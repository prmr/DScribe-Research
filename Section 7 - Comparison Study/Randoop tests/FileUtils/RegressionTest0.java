import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.jupiter.api.Disabled;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest0 {

    public static boolean debug = false;

    @Test
    public void test001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test001");
        java.net.URL uRL0 = null;
        java.io.File file1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.copyURLToFile(uRL0, file1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.net.URL.openStream()\" because \"source\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test002");
        java.net.URL uRL0 = null;
        java.io.File file1 = org.apache.commons.io.FileUtils.toFile(uRL0);
        org.junit.Assert.assertNull(file1);
    }

    @Test
    public void test003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test003");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        // The following exception was thrown during execution in test generation
        try {
            long long4 = org.apache.commons.io.FileUtils.sizeOfDirectory(file3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: hi!\\hi! is not a directory");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
    }

    @Test
    @Disabled
    public void test004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test004");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.util.zip.Checksum checksum4 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.zip.Checksum checksum5 = null; // flaky: org.apache.commons.io.FileUtils.checksum(file3, checksum4);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.util.zip.Checksum.update(byte[], int, int)\" because \"this.cksum\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
    }

    @Test
    @Disabled
    public void test005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test005");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        // The following exception was thrown during execution in test generation
        try {
// flaky:             org.apache.commons.io.FileUtils.copyFileToDirectory(file3, file7);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Destination 'hi!\\hi!' is not a directory");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
    }

    @Test
    public void test006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test006");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.util.Date date4 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean5 = org.apache.commons.io.FileUtils.isFileNewer(file3, date4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No specified date");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
    }

    @Test
    public void test007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test007");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.moveToDirectory(file3, file7, true);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Destination 'hi!\\hi!' is not a directory");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
    }

    @Test
    public void test008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test008");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.copyFile(file3, file7, true);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Source 'hi!\\hi!' and destination 'hi!\\hi!' are the same");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
    }

    @Test
    public void test009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test009");
        long long0 = org.apache.commons.io.FileUtils.ONE_EB;
        org.junit.Assert.assertTrue("'" + long0 + "' != '" + 1152921504606846976L + "'", long0 == 1152921504606846976L);
    }

    @Test
    public void test010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test010");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean8 = org.apache.commons.io.FileUtils.directoryContains(file3, file7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Not a directory: hi!\\hi!");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
    }

    @Test
    public void test011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test011");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str5 = org.apache.commons.io.FileUtils.readFileToString(file3, "");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
    }

    @Test
    @Disabled
    public void test012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test012");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.deleteDirectory(file3);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: hi!\\hi! is not a directory");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
    }

    @Test
    public void test013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test013");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<java.io.File> fileItor9 = org.apache.commons.io.FileUtils.iterateFiles(file3, strArray6, true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'directory' is not a directory: hi!\\hi!");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
    }

    @Test
    @Disabled
    public void test014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test014");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        java.lang.String[] strArray10 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file11 = org.apache.commons.io.FileUtils.getFile(strArray10);
        boolean boolean12 = false; // flaky: org.apache.commons.io.FileUtils.isFileOlder(file7, file11);
        boolean boolean14 = org.apache.commons.io.FileUtils.waitFor(file11, (int) '4');
        java.io.FileFilter fileFilter15 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.copyDirectory(file3, file11, fileFilter15);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Source 'hi!\\hi!' exists but is not a directory");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(file11);
        org.junit.Assert.assertEquals(file11.getParent(), "hi!");
        org.junit.Assert.assertEquals(file11.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    @Disabled
    public void test015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test015");
        java.io.InputStream inputStream0 = null;
        java.lang.String[] strArray3 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file4 = org.apache.commons.io.FileUtils.getFile(strArray3);
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file8 = org.apache.commons.io.FileUtils.getFile(strArray7);
        boolean boolean9 = false; // flaky: org.apache.commons.io.FileUtils.isFileOlder(file4, file8);
        boolean boolean11 = org.apache.commons.io.FileUtils.waitFor(file8, (int) '4');
        org.apache.commons.io.LineIterator lineIterator12 = null; // flaky: org.apache.commons.io.FileUtils.lineIterator(file8);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.copyToFile(inputStream0, file8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.InputStream.read(byte[])\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(file4);
        org.junit.Assert.assertEquals(file4.getParent(), "hi!");
        org.junit.Assert.assertEquals(file4.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(file8);
        org.junit.Assert.assertEquals(file8.getParent(), "hi!");
        org.junit.Assert.assertEquals(file8.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
// flaky:         org.junit.Assert.assertNotNull(lineIterator12);
    }

    @Test
    @Disabled
    public void test016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test016");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = false; // flaky: org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter11 = null;
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter12 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Collection<java.io.File> fileCollection13 = org.apache.commons.io.FileUtils.listFilesAndDirs(file7, iOFileFilter11, iOFileFilter12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'directory' is not a directory: hi!\\hi!");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test017");
        java.io.File file0 = null;
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter1 = null;
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter2 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Collection<java.io.File> fileCollection3 = org.apache.commons.io.FileUtils.listFiles(file0, iOFileFilter1, iOFileFilter2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.File.isDirectory()\" because \"directory\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test018");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.copyDirectory(file3, file7, false);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Source 'hi!\\hi!' exists but is not a directory");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
    }

    @Test
    @Disabled
    public void test019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test019");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = false; // flaky: org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        java.lang.String[] strArray11 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file12 = org.apache.commons.io.FileUtils.getFile(strArray11);
        java.lang.String[] strArray15 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file16 = org.apache.commons.io.FileUtils.getFile(strArray15);
        boolean boolean17 = false; // flaky: org.apache.commons.io.FileUtils.isFileOlder(file12, file16);
        boolean boolean19 = org.apache.commons.io.FileUtils.waitFor(file16, (int) '4');
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file23 = org.apache.commons.io.FileUtils.getFile(strArray22);
        boolean boolean25 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file16, file23, "");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.copyToDirectory(file3, file16);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Destination 'hi!\\hi!' is not a directory");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(file12);
        org.junit.Assert.assertEquals(file12.getParent(), "hi!");
        org.junit.Assert.assertEquals(file12.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(file16);
        org.junit.Assert.assertEquals(file16.getParent(), "hi!");
        org.junit.Assert.assertEquals(file16.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(file23);
        org.junit.Assert.assertEquals(file23.getParent(), "hi!");
        org.junit.Assert.assertEquals(file23.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
    }

    @Test
    @Disabled
    public void test020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test020");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = false; // flaky: org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = null; // flaky: org.apache.commons.io.FileUtils.lineIterator(file7);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter12 = null;
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter13 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Collection<java.io.File> fileCollection14 = org.apache.commons.io.FileUtils.listFiles(file7, iOFileFilter12, iOFileFilter13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'directory' is not a directory: hi!\\hi!");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
// flaky:         org.junit.Assert.assertNotNull(lineIterator11);
    }

    @Test
    public void test021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test021");
        java.lang.Iterable<java.io.File> fileIterable0 = null;
        java.lang.String[] strArray3 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file4 = org.apache.commons.io.FileUtils.getFile(strArray3);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.copyToDirectory(fileIterable0, file4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: sourceIterable");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(file4);
        org.junit.Assert.assertEquals(file4.getParent(), "hi!");
        org.junit.Assert.assertEquals(file4.toString(), "hi!\\hi!");
    }

    @Test
    public void test022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test022");
        java.math.BigInteger bigInteger0 = org.apache.commons.io.FileUtils.ONE_ZB;
        org.junit.Assert.assertNotNull(bigInteger0);
    }

    @Test
    @Disabled
    public void test023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test023");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = false; // flaky: org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        java.lang.String[] strArray11 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file12 = org.apache.commons.io.FileUtils.getFile(strArray11);
        java.lang.String[] strArray15 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file16 = org.apache.commons.io.FileUtils.getFile(strArray15);
        boolean boolean17 = false; // flaky: org.apache.commons.io.FileUtils.isFileOlder(file12, file16);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.moveDirectoryToDirectory(file7, file12, true);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Destination 'hi!\\hi!' is not a directory");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(file12);
        org.junit.Assert.assertEquals(file12.getParent(), "hi!");
        org.junit.Assert.assertEquals(file12.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(file16);
        org.junit.Assert.assertEquals(file16.getParent(), "hi!");
        org.junit.Assert.assertEquals(file16.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    @Disabled
    public void test024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test024");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = false; // flaky: org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = null; // flaky: org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean13 = org.apache.commons.io.FileUtils.isFileOlder(file7, (-1L));
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "hi!", "", true);
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
// flaky:         org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test025");
        java.lang.String str0 = org.apache.commons.io.FileUtils.getTempDirectoryPath();
        org.junit.Assert.assertEquals("'" + str0 + "' != '" + "C:\\Users\\Mathieu\\AppData\\Local\\Temp\\" + "'", str0, "C:\\Users\\Mathieu\\AppData\\Local\\Temp\\");
    }

    @Test
    public void test026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test026");
        java.io.InputStream inputStream0 = null;
        java.lang.String[] strArray3 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file4 = org.apache.commons.io.FileUtils.getFile(strArray3);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.copyToFile(inputStream0, file4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.InputStream.read(byte[])\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(file4);
        org.junit.Assert.assertEquals(file4.getParent(), "hi!");
        org.junit.Assert.assertEquals(file4.toString(), "hi!\\hi!");
    }

    @Test
    public void test027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test027");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file14 = org.apache.commons.io.FileUtils.getFile(strArray13);
        boolean boolean16 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file7, file14, "");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.deleteDirectory(file7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: hi!\\hi! is not a directory");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(file14);
        org.junit.Assert.assertEquals(file14.getParent(), "hi!");
        org.junit.Assert.assertEquals(file14.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test028");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file14 = org.apache.commons.io.FileUtils.getFile(strArray13);
        boolean boolean16 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file7, file14, "");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str18 = org.apache.commons.io.FileUtils.readFileToString(file7, "C:\\Users\\Mathieu\\AppData\\Local\\Temp\\");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: C:\\Users\\Mathieu\\AppData\\Local\\Temp\\");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(file14);
        org.junit.Assert.assertEquals(file14.getParent(), "hi!");
        org.junit.Assert.assertEquals(file14.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test029");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter11 = null;
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter12 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<java.io.File> fileItor13 = org.apache.commons.io.FileUtils.iterateFilesAndDirs(file7, iOFileFilter11, iOFileFilter12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'directory' is not a directory: hi!\\hi!");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    @Disabled
    public void test030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test030");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        java.io.OutputStream outputStream12 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long13 = org.apache.commons.io.FileUtils.copyFile(file7, outputStream12);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.OutputStream.write(byte[], int, int)\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
    }

    @Test
    @Disabled
    public void test031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test031");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        java.util.zip.Checksum checksum9 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.zip.Checksum checksum10 = org.apache.commons.io.FileUtils.checksum(file7, checksum9);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.util.zip.Checksum.update(byte[], int, int)\" because \"this.cksum\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test032");
        long long0 = org.apache.commons.io.FileUtils.ONE_PB;
        org.junit.Assert.assertTrue("'" + long0 + "' != '" + 1125899906842624L + "'", long0 == 1125899906842624L);
    }

    @Test
    public void test033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test033");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter4 = null;
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter5 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Collection<java.io.File> fileCollection6 = org.apache.commons.io.FileUtils.listFiles(file3, iOFileFilter4, iOFileFilter5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'directory' is not a directory: hi!\\hi!");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
    }

    @Test
    public void test034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test034");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean13 = org.apache.commons.io.FileUtils.isFileOlder(file7, (-1L));
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.LineIterator lineIterator15 = org.apache.commons.io.FileUtils.lineIterator(file7, "");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test035");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        java.util.Date date9 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean10 = org.apache.commons.io.FileUtils.isFileOlder(file3, date9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No specified date");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test036");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.writeStringToFile(file7, "", "", false);
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
    }

    @Test
    public void test037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test037");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file14 = org.apache.commons.io.FileUtils.getFile(strArray13);
        boolean boolean16 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file7, file14, "");
        org.apache.commons.io.LineIterator lineIterator17 = org.apache.commons.io.FileUtils.lineIterator(file7);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.deleteDirectory(file7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: hi!\\hi! is not a directory");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(file14);
        org.junit.Assert.assertEquals(file14.getParent(), "hi!");
        org.junit.Assert.assertEquals(file14.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(lineIterator17);
    }

    @Test
    public void test038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test038");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file14 = org.apache.commons.io.FileUtils.getFile(strArray13);
        boolean boolean16 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file7, file14, "");
        org.apache.commons.io.LineIterator lineIterator17 = org.apache.commons.io.FileUtils.lineIterator(file7);
        java.io.File file18 = org.apache.commons.io.FileUtils.getUserDirectory();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.copyDirectoryToDirectory(file7, file18);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Source 'hi!\\hi!' is not a directory");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(file14);
        org.junit.Assert.assertEquals(file14.getParent(), "hi!");
        org.junit.Assert.assertEquals(file14.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(lineIterator17);
        org.junit.Assert.assertNotNull(file18);
        org.junit.Assert.assertEquals(file18.getParent(), "C:\\Users");
        org.junit.Assert.assertEquals(file18.toString(), "C:\\Users\\Mathieu");
    }

    @Test
    public void test039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test039");
        java.net.URL uRL0 = null;
        java.lang.String[] strArray3 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file4 = org.apache.commons.io.FileUtils.getFile(strArray3);
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file8 = org.apache.commons.io.FileUtils.getFile(strArray7);
        boolean boolean9 = org.apache.commons.io.FileUtils.isFileOlder(file4, file8);
        boolean boolean11 = org.apache.commons.io.FileUtils.waitFor(file8, (int) '4');
        org.apache.commons.io.LineIterator lineIterator12 = org.apache.commons.io.FileUtils.lineIterator(file8);
        boolean boolean13 = org.apache.commons.io.FileUtils.deleteQuietly(file8);
        org.apache.commons.io.FileUtils.writeStringToFile(file8, "");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.copyURLToFile(uRL0, file8, (int) ' ', 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.net.URL.openConnection()\" because \"source\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(file4);
        org.junit.Assert.assertEquals(file4.getParent(), "hi!");
        org.junit.Assert.assertEquals(file4.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(file8);
        org.junit.Assert.assertEquals(file8.getParent(), "hi!");
        org.junit.Assert.assertEquals(file8.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(lineIterator12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test040");
        long long0 = org.apache.commons.io.FileUtils.ONE_MB;
        org.junit.Assert.assertTrue("'" + long0 + "' != '" + 1048576L + "'", long0 == 1048576L);
    }

    @Test
    public void test041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test041");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean13 = org.apache.commons.io.FileUtils.isFileOlder(file7, (-1L));
        java.nio.charset.Charset charset14 = null;
        java.lang.String str15 = org.apache.commons.io.FileUtils.readFileToString(file7, charset14);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str17 = org.apache.commons.io.FileUtils.readFileToString(file7, "C:\\Users\\Mathieu\\AppData\\Local\\Temp\\");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: C:\\Users\\Mathieu\\AppData\\Local\\Temp\\");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
    }

    @Test
    public void test042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test042");
        java.net.URL uRL0 = null;
        java.lang.String[] strArray3 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file4 = org.apache.commons.io.FileUtils.getFile(strArray3);
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file8 = org.apache.commons.io.FileUtils.getFile(strArray7);
        boolean boolean9 = org.apache.commons.io.FileUtils.isFileOlder(file4, file8);
        boolean boolean11 = org.apache.commons.io.FileUtils.waitFor(file8, (int) '4');
        org.apache.commons.io.LineIterator lineIterator12 = org.apache.commons.io.FileUtils.lineIterator(file8);
        boolean boolean14 = org.apache.commons.io.FileUtils.isFileOlder(file8, (-1L));
        long long15 = org.apache.commons.io.FileUtils.sizeOf(file8);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.copyURLToFile(uRL0, file8, (-1), (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.net.URL.openConnection()\" because \"source\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(file4);
        org.junit.Assert.assertEquals(file4.getParent(), "hi!");
        org.junit.Assert.assertEquals(file4.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(file8);
        org.junit.Assert.assertEquals(file8.getParent(), "hi!");
        org.junit.Assert.assertEquals(file8.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(lineIterator12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
    }

    @Test
    @Disabled
    public void test043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test043");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean9 = org.apache.commons.io.FileUtils.deleteQuietly(file7);
        java.lang.String[] strArray12 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file13 = org.apache.commons.io.FileUtils.getFile(strArray12);
        java.lang.String str14 = org.apache.commons.io.FileUtils.readFileToString(file13);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.copyFile(file7, file13, false);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Source 'hi!\\hi!' and destination 'hi!\\hi!' are the same");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(file13);
        org.junit.Assert.assertEquals(file13.getParent(), "hi!");
        org.junit.Assert.assertEquals(file13.toString(), "hi!\\hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
    }

    @Test
    public void test044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test044");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean12 = org.apache.commons.io.FileUtils.deleteQuietly(file7);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigInteger bigInteger13 = org.apache.commons.io.FileUtils.sizeOfDirectoryAsBigInteger(file7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: hi!\\hi! is not a directory");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test045");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean12 = org.apache.commons.io.FileUtils.deleteQuietly(file7);
        java.lang.String[] strArray15 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file16 = org.apache.commons.io.FileUtils.getFile(strArray15);
        java.lang.String[] strArray19 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file20 = org.apache.commons.io.FileUtils.getFile(strArray19);
        boolean boolean21 = org.apache.commons.io.FileUtils.isFileOlder(file16, file20);
        boolean boolean23 = org.apache.commons.io.FileUtils.waitFor(file20, (int) '4');
        org.apache.commons.io.LineIterator lineIterator24 = org.apache.commons.io.FileUtils.lineIterator(file20);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.copyToDirectory(file7, file20);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Destination 'hi!\\hi!' is not a directory");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(file16);
        org.junit.Assert.assertEquals(file16.getParent(), "hi!");
        org.junit.Assert.assertEquals(file16.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(file20);
        org.junit.Assert.assertEquals(file20.getParent(), "hi!");
        org.junit.Assert.assertEquals(file20.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(lineIterator24);
    }

    @Test
    public void test046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test046");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean12 = org.apache.commons.io.FileUtils.deleteQuietly(file7);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter13 = null;
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter14 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Collection<java.io.File> fileCollection15 = org.apache.commons.io.FileUtils.listFiles(file7, iOFileFilter13, iOFileFilter14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'directory' is not a directory: hi!\\hi!");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test047");
        java.math.BigInteger bigInteger0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str1 = org.apache.commons.io.FileUtils.byteCountToDisplaySize(bigInteger0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.math.BigInteger.divide(java.math.BigInteger)\" because \"size\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    @Disabled
    public void test048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test048");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean13 = org.apache.commons.io.FileUtils.isFileOlder(file7, (-1L));
        long long14 = org.apache.commons.io.FileUtils.sizeOf(file7);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.forceDelete(file7);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Unable to delete file: hi!\\hi!");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + 36L + "'", long14 == 36L);
    }

    @Test
    @Disabled
    public void test049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test049");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean13 = org.apache.commons.io.FileUtils.isFileOlder(file7, (-1L));
        java.nio.charset.Charset charset14 = null;
        java.lang.String str15 = org.apache.commons.io.FileUtils.readFileToString(file7, charset14);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter16 = null;
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter17 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Collection<java.io.File> fileCollection18 = org.apache.commons.io.FileUtils.listFiles(file7, iOFileFilter16, iOFileFilter17);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'directory' is not a directory: hi!\\hi!");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "C:\\Users\\Mathieu\\AppData\\Local\\Temp\\" + "'", str15, "C:\\Users\\Mathieu\\AppData\\Local\\Temp\\");
    }

    @Test
    public void test050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test050");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file14 = org.apache.commons.io.FileUtils.getFile(strArray13);
        boolean boolean16 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file7, file14, "");
        org.apache.commons.io.LineIterator lineIterator17 = org.apache.commons.io.FileUtils.lineIterator(file7);
        org.apache.commons.io.FileUtils.writeStringToFile(file7, "C:\\Users\\Mathieu\\AppData\\Local\\Temp\\", false);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigInteger bigInteger21 = org.apache.commons.io.FileUtils.sizeOfDirectoryAsBigInteger(file7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: hi!\\hi! is not a directory");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(file14);
        org.junit.Assert.assertEquals(file14.getParent(), "hi!");
        org.junit.Assert.assertEquals(file14.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(lineIterator17);
    }

    @Test
    public void test051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test051");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        boolean boolean5 = org.apache.commons.io.FileUtils.waitFor(file3, 100);
        java.io.File file6 = org.apache.commons.io.FileUtils.getUserDirectory();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.moveDirectory(file3, file6);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Source 'hi!\\hi!' is not a directory");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(file6);
        org.junit.Assert.assertEquals(file6.getParent(), "C:\\Users");
        org.junit.Assert.assertEquals(file6.toString(), "C:\\Users\\Mathieu");
    }

    @Test
    @Disabled
    public void test052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test052");
        java.net.URL uRL0 = null;
        java.lang.String[] strArray3 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file4 = org.apache.commons.io.FileUtils.getFile(strArray3);
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file8 = org.apache.commons.io.FileUtils.getFile(strArray7);
        boolean boolean9 = org.apache.commons.io.FileUtils.isFileOlder(file4, file8);
        boolean boolean11 = org.apache.commons.io.FileUtils.waitFor(file8, (int) '4');
        org.apache.commons.io.LineIterator lineIterator12 = org.apache.commons.io.FileUtils.lineIterator(file8);
        boolean boolean14 = org.apache.commons.io.FileUtils.isFileOlder(file8, (-1L));
        long long15 = org.apache.commons.io.FileUtils.sizeOf(file8);
        java.io.File file16 = org.apache.commons.io.FileUtils.getUserDirectory();
        org.apache.commons.io.FileUtils.copyFileToDirectory(file8, file16, true);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.copyURLToFile(uRL0, file16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.net.URL.openStream()\" because \"source\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(file4);
        org.junit.Assert.assertEquals(file4.getParent(), "hi!");
        org.junit.Assert.assertEquals(file4.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(file8);
        org.junit.Assert.assertEquals(file8.getParent(), "hi!");
        org.junit.Assert.assertEquals(file8.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(lineIterator12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long15 + "' != '" + 3L + "'", long15 == 3L);
        org.junit.Assert.assertNotNull(file16);
        org.junit.Assert.assertEquals(file16.getParent(), "C:\\Users");
        org.junit.Assert.assertEquals(file16.toString(), "C:\\Users\\Mathieu");
    }

    @Test
    public void test053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test053");
        java.io.File file0 = null;
        java.lang.String[] strArray3 = new java.lang.String[] { "C:\\Users\\Mathieu\\AppData\\Local\\Temp\\", "" };
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<java.io.File> fileItor5 = org.apache.commons.io.FileUtils.iterateFiles(file0, strArray3, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.File.isDirectory()\" because \"directory\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
    }

    @Test
    public void test054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test054");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file14 = org.apache.commons.io.FileUtils.getFile(strArray13);
        boolean boolean16 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file7, file14, "");
        org.apache.commons.io.LineIterator lineIterator17 = org.apache.commons.io.FileUtils.lineIterator(file7);
        org.apache.commons.io.FileUtils.writeStringToFile(file7, "C:\\Users\\Mathieu\\AppData\\Local\\Temp\\", false);
        java.util.Date date21 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean22 = org.apache.commons.io.FileUtils.isFileNewer(file7, date21);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No specified date");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(file14);
        org.junit.Assert.assertEquals(file14.getParent(), "hi!");
        org.junit.Assert.assertEquals(file14.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(lineIterator17);
    }

    @Test
    public void test055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test055");
        java.lang.Iterable<java.io.File> fileIterable0 = null;
        java.io.File file1 = org.apache.commons.io.FileUtils.getUserDirectory();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.copyToDirectory(fileIterable0, file1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: sourceIterable");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(file1);
        org.junit.Assert.assertEquals(file1.getParent(), "C:\\Users");
        org.junit.Assert.assertEquals(file1.toString(), "C:\\Users\\Mathieu");
    }

    @Test
    public void test056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test056");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        java.lang.String[] strArray14 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file15 = org.apache.commons.io.FileUtils.getFile(strArray14);
        java.lang.String[] strArray18 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file19 = org.apache.commons.io.FileUtils.getFile(strArray18);
        boolean boolean20 = org.apache.commons.io.FileUtils.isFileOlder(file15, file19);
        boolean boolean22 = org.apache.commons.io.FileUtils.waitFor(file19, (int) '4');
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file26 = org.apache.commons.io.FileUtils.getFile(strArray25);
        boolean boolean28 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file19, file26, "");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.copyToDirectory(file7, file26);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Destination 'hi!\\hi!' is not a directory");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(file15);
        org.junit.Assert.assertEquals(file15.getParent(), "hi!");
        org.junit.Assert.assertEquals(file15.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(file19);
        org.junit.Assert.assertEquals(file19.getParent(), "hi!");
        org.junit.Assert.assertEquals(file19.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(file26);
        org.junit.Assert.assertEquals(file26.getParent(), "hi!");
        org.junit.Assert.assertEquals(file26.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
    }

    @Test
    @Disabled
    public void test057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test057");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean13 = org.apache.commons.io.FileUtils.isFileOlder(file7, (-1L));
        long long14 = org.apache.commons.io.FileUtils.sizeOf(file7);
        java.io.File file15 = org.apache.commons.io.FileUtils.getUserDirectory();
        org.apache.commons.io.FileUtils.copyFileToDirectory(file7, file15, true);
        java.lang.String[] strArray20 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file21 = org.apache.commons.io.FileUtils.getFile(strArray20);
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file25 = org.apache.commons.io.FileUtils.getFile(strArray24);
        boolean boolean26 = org.apache.commons.io.FileUtils.isFileOlder(file21, file25);
        boolean boolean28 = org.apache.commons.io.FileUtils.waitFor(file25, (int) '4');
        org.apache.commons.io.LineIterator lineIterator29 = org.apache.commons.io.FileUtils.lineIterator(file25);
        boolean boolean30 = org.apache.commons.io.FileUtils.deleteQuietly(file25);
        org.apache.commons.io.FileUtils.writeStringToFile(file25, "");
        java.lang.String[] strArray35 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file36 = org.apache.commons.io.FileUtils.getFile(strArray35);
        java.lang.String[] strArray39 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file40 = org.apache.commons.io.FileUtils.getFile(strArray39);
        boolean boolean41 = org.apache.commons.io.FileUtils.isFileOlder(file36, file40);
        boolean boolean43 = org.apache.commons.io.FileUtils.waitFor(file40, (int) '4');
        java.lang.String[] strArray46 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file47 = org.apache.commons.io.FileUtils.getFile(strArray46);
        boolean boolean49 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file40, file47, "");
        boolean boolean50 = org.apache.commons.io.FileUtils.isFileNewer(file25, file40);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.copyFileToDirectory(file15, file25, true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Destination 'hi!\\hi!' is not a directory");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(file15);
        org.junit.Assert.assertEquals(file15.getParent(), "C:\\Users");
        org.junit.Assert.assertEquals(file15.toString(), "C:\\Users\\Mathieu");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(file21);
        org.junit.Assert.assertEquals(file21.getParent(), "hi!");
        org.junit.Assert.assertEquals(file21.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(file25);
        org.junit.Assert.assertEquals(file25.getParent(), "hi!");
        org.junit.Assert.assertEquals(file25.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(lineIterator29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(file36);
        org.junit.Assert.assertEquals(file36.getParent(), "hi!");
        org.junit.Assert.assertEquals(file36.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(file40);
        org.junit.Assert.assertEquals(file40.getParent(), "hi!");
        org.junit.Assert.assertEquals(file40.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(file47);
        org.junit.Assert.assertEquals(file47.getParent(), "hi!");
        org.junit.Assert.assertEquals(file47.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test058");
        java.io.InputStream inputStream0 = null;
        java.lang.String[] strArray3 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file4 = org.apache.commons.io.FileUtils.getFile(strArray3);
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file8 = org.apache.commons.io.FileUtils.getFile(strArray7);
        boolean boolean9 = org.apache.commons.io.FileUtils.isFileOlder(file4, file8);
        boolean boolean11 = org.apache.commons.io.FileUtils.waitFor(file8, (int) '4');
        org.apache.commons.io.LineIterator lineIterator12 = org.apache.commons.io.FileUtils.lineIterator(file8);
        boolean boolean14 = org.apache.commons.io.FileUtils.isFileOlder(file8, (-1L));
        long long15 = org.apache.commons.io.FileUtils.sizeOf(file8);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.copyInputStreamToFile(inputStream0, file8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.InputStream.read(byte[])\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(file4);
        org.junit.Assert.assertEquals(file4.getParent(), "hi!");
        org.junit.Assert.assertEquals(file4.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(file8);
        org.junit.Assert.assertEquals(file8.getParent(), "hi!");
        org.junit.Assert.assertEquals(file8.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(lineIterator12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
    }

    @Test
    public void test059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test059");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean12 = org.apache.commons.io.FileUtils.deleteQuietly(file7);
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset16 = null;
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "", charset16, true);
        java.nio.charset.Charset charset20 = null;
        org.apache.commons.io.FileUtils.writeStringToFile(file7, "", charset20, false);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.LineIterator lineIterator24 = org.apache.commons.io.FileUtils.lineIterator(file7, "");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test060");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file14 = org.apache.commons.io.FileUtils.getFile(strArray13);
        boolean boolean16 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file7, file14, "");
        // The following exception was thrown during execution in test generation
        try {
            long long17 = org.apache.commons.io.FileUtils.sizeOfDirectory(file14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: hi!\\hi! is not a directory");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(file14);
        org.junit.Assert.assertEquals(file14.getParent(), "hi!");
        org.junit.Assert.assertEquals(file14.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test061");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file14 = org.apache.commons.io.FileUtils.getFile(strArray13);
        boolean boolean16 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file7, file14, "");
        org.apache.commons.io.FileUtils.writeStringToFile(file7, "", false);
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file23 = org.apache.commons.io.FileUtils.getFile(strArray22);
        java.lang.String[] strArray26 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file27 = org.apache.commons.io.FileUtils.getFile(strArray26);
        boolean boolean28 = org.apache.commons.io.FileUtils.isFileOlder(file23, file27);
        boolean boolean30 = org.apache.commons.io.FileUtils.waitFor(file27, (int) '4');
        org.apache.commons.io.LineIterator lineIterator31 = org.apache.commons.io.FileUtils.lineIterator(file27);
        boolean boolean32 = org.apache.commons.io.FileUtils.deleteQuietly(file27);
        org.apache.commons.io.FileUtils.write(file27, (java.lang.CharSequence) "hi!");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.moveFile(file7, file27);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.io.FileExistsException; message: Destination 'hi!\\hi!' already exists");
        } catch (org.apache.commons.io.FileExistsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(file14);
        org.junit.Assert.assertEquals(file14.getParent(), "hi!");
        org.junit.Assert.assertEquals(file14.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(file23);
        org.junit.Assert.assertEquals(file23.getParent(), "hi!");
        org.junit.Assert.assertEquals(file23.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(file27);
        org.junit.Assert.assertEquals(file27.getParent(), "hi!");
        org.junit.Assert.assertEquals(file27.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(lineIterator31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test062");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray4 = new java.lang.String[] {};
        java.io.File file5 = org.apache.commons.io.FileUtils.getFile(strArray4);
        java.io.File file6 = org.apache.commons.io.FileUtils.getFile(file3, strArray4);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.writeStringToFile(file6, "hi!", "hi!", false);
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: hi!");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNull(file5);
        org.junit.Assert.assertNotNull(file6);
        org.junit.Assert.assertEquals(file6.getParent(), "hi!");
        org.junit.Assert.assertEquals(file6.toString(), "hi!\\hi!");
    }

    @Test
    public void test063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test063");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean13 = org.apache.commons.io.FileUtils.isFileOlder(file7, (-1L));
        long long14 = org.apache.commons.io.FileUtils.sizeOf(file7);
        java.io.File file15 = org.apache.commons.io.FileUtils.getUserDirectory();
        org.apache.commons.io.FileUtils.copyFileToDirectory(file7, file15, true);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.String> strList18 = org.apache.commons.io.FileUtils.readLines(file15);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: File 'C:\\Users\\Mathieu' exists but is a directory");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 3L + "'", long14 == 3L);
        org.junit.Assert.assertNotNull(file15);
        org.junit.Assert.assertEquals(file15.getParent(), "C:\\Users");
        org.junit.Assert.assertEquals(file15.toString(), "C:\\Users\\Mathieu");
    }

    @Test
    public void test064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test064");
        java.math.BigInteger bigInteger0 = org.apache.commons.io.FileUtils.ONE_KB_BI;
        org.junit.Assert.assertNotNull(bigInteger0);
    }

    @Test
    public void test065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test065");
        org.apache.commons.io.FileUtils fileUtils0 = new org.apache.commons.io.FileUtils();
        java.lang.Class<?> wildcardClass1 = fileUtils0.getClass();
        org.junit.Assert.assertNotNull(wildcardClass1);
    }

    @Test
    public void test066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test066");
        java.io.File file0 = null;
        java.lang.String[] strArray3 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file4 = org.apache.commons.io.FileUtils.getFile(strArray3);
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file8 = org.apache.commons.io.FileUtils.getFile(strArray7);
        boolean boolean9 = org.apache.commons.io.FileUtils.isFileOlder(file4, file8);
        boolean boolean11 = org.apache.commons.io.FileUtils.waitFor(file8, (int) '4');
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.copyFileToDirectory(file0, file8, false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Destination 'hi!\\hi!' is not a directory");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(file4);
        org.junit.Assert.assertEquals(file4.getParent(), "hi!");
        org.junit.Assert.assertEquals(file4.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(file8);
        org.junit.Assert.assertEquals(file8.getParent(), "hi!");
        org.junit.Assert.assertEquals(file8.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test067");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean12 = org.apache.commons.io.FileUtils.deleteQuietly(file7);
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset16 = null;
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "", charset16, true);
        byte[] byteArray19 = org.apache.commons.io.FileUtils.readFileToByteArray(file7);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigInteger bigInteger20 = org.apache.commons.io.FileUtils.sizeOfDirectoryAsBigInteger(file7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: hi!\\hi! is not a directory");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[104, 105, 33]");
    }

    @Test
    public void test068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test068");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray4 = new java.lang.String[] {};
        java.io.File file5 = org.apache.commons.io.FileUtils.getFile(strArray4);
        java.io.File file6 = org.apache.commons.io.FileUtils.getFile(file3, strArray4);
        // The following exception was thrown during execution in test generation
        try {
            long long7 = org.apache.commons.io.FileUtils.sizeOfDirectory(file3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: hi!\\hi! is not a directory");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNull(file5);
        org.junit.Assert.assertNotNull(file6);
        org.junit.Assert.assertEquals(file6.getParent(), "hi!");
        org.junit.Assert.assertEquals(file6.toString(), "hi!\\hi!");
    }

    @Test
    public void test069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test069");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file14 = org.apache.commons.io.FileUtils.getFile(strArray13);
        boolean boolean16 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file7, file14, "");
        org.apache.commons.io.LineIterator lineIterator17 = org.apache.commons.io.FileUtils.lineIterator(file7);
        org.apache.commons.io.FileUtils.writeStringToFile(file7, "C:\\Users\\Mathieu\\AppData\\Local\\Temp\\", false);
        java.lang.String[] strArray23 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file24 = org.apache.commons.io.FileUtils.getFile(strArray23);
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file28 = org.apache.commons.io.FileUtils.getFile(strArray27);
        boolean boolean29 = org.apache.commons.io.FileUtils.isFileOlder(file24, file28);
        boolean boolean31 = org.apache.commons.io.FileUtils.waitFor(file28, (int) '4');
        java.lang.String[] strArray34 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file35 = org.apache.commons.io.FileUtils.getFile(strArray34);
        boolean boolean37 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file28, file35, "");
        java.io.FileOutputStream fileOutputStream39 = org.apache.commons.io.FileUtils.openOutputStream(file28, false);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.copyDirectory(file7, file28, true);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Source 'hi!\\hi!' exists but is not a directory");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(file14);
        org.junit.Assert.assertEquals(file14.getParent(), "hi!");
        org.junit.Assert.assertEquals(file14.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(lineIterator17);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(file24);
        org.junit.Assert.assertEquals(file24.getParent(), "hi!");
        org.junit.Assert.assertEquals(file24.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(file28);
        org.junit.Assert.assertEquals(file28.getParent(), "hi!");
        org.junit.Assert.assertEquals(file28.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(file35);
        org.junit.Assert.assertEquals(file35.getParent(), "hi!");
        org.junit.Assert.assertEquals(file35.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(fileOutputStream39);
    }

    @Test
    public void test070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test070");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        java.lang.String[] strArray11 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file12 = org.apache.commons.io.FileUtils.getFile(strArray11);
        java.lang.String[] strArray15 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file16 = org.apache.commons.io.FileUtils.getFile(strArray15);
        boolean boolean17 = org.apache.commons.io.FileUtils.isFileOlder(file12, file16);
        java.io.FileFilter fileFilter18 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.copyDirectory(file7, file16, fileFilter18, true);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Source 'hi!\\hi!' exists but is not a directory");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(file12);
        org.junit.Assert.assertEquals(file12.getParent(), "hi!");
        org.junit.Assert.assertEquals(file12.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(file16);
        org.junit.Assert.assertEquals(file16.getParent(), "hi!");
        org.junit.Assert.assertEquals(file16.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test071");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file14 = org.apache.commons.io.FileUtils.getFile(strArray13);
        boolean boolean16 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file7, file14, "");
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter17 = null;
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter18 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Collection<java.io.File> fileCollection19 = org.apache.commons.io.FileUtils.listFiles(file14, iOFileFilter17, iOFileFilter18);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'directory' is not a directory: hi!\\hi!");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(file14);
        org.junit.Assert.assertEquals(file14.getParent(), "hi!");
        org.junit.Assert.assertEquals(file14.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test072");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file14 = org.apache.commons.io.FileUtils.getFile(strArray13);
        boolean boolean16 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file7, file14, "");
        org.apache.commons.io.LineIterator lineIterator17 = org.apache.commons.io.FileUtils.lineIterator(file7);
        org.apache.commons.io.FileUtils.writeStringToFile(file7, "C:\\Users\\Mathieu\\AppData\\Local\\Temp\\", false);
        java.nio.charset.Charset charset22 = null;
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "", charset22, true);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigInteger bigInteger25 = org.apache.commons.io.FileUtils.sizeOfDirectoryAsBigInteger(file7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: hi!\\hi! is not a directory");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(file14);
        org.junit.Assert.assertEquals(file14.getParent(), "hi!");
        org.junit.Assert.assertEquals(file14.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(lineIterator17);
    }

    @Test
    public void test073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test073");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean13 = org.apache.commons.io.FileUtils.isFileOlder(file7, (-1L));
        java.io.FileOutputStream fileOutputStream15 = org.apache.commons.io.FileUtils.openOutputStream(file7, false);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.LineIterator lineIterator17 = org.apache.commons.io.FileUtils.lineIterator(file7, "hi!");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: hi!");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(fileOutputStream15);
    }

    @Test
    public void test074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test074");
        java.io.InputStream inputStream0 = null;
        java.lang.String[] strArray3 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file4 = org.apache.commons.io.FileUtils.getFile(strArray3);
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file8 = org.apache.commons.io.FileUtils.getFile(strArray7);
        boolean boolean9 = org.apache.commons.io.FileUtils.isFileOlder(file4, file8);
        boolean boolean11 = org.apache.commons.io.FileUtils.waitFor(file8, (int) '4');
        org.apache.commons.io.LineIterator lineIterator12 = org.apache.commons.io.FileUtils.lineIterator(file8);
        boolean boolean13 = org.apache.commons.io.FileUtils.deleteQuietly(file8);
        org.apache.commons.io.FileUtils.writeStringToFile(file8, "");
        org.apache.commons.io.FileUtils.forceMkdirParent(file8);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.copyToFile(inputStream0, file8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.InputStream.read(byte[])\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(file4);
        org.junit.Assert.assertEquals(file4.getParent(), "hi!");
        org.junit.Assert.assertEquals(file4.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(file8);
        org.junit.Assert.assertEquals(file8.getParent(), "hi!");
        org.junit.Assert.assertEquals(file8.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(lineIterator12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test075");
        java.io.InputStream inputStream0 = null;
        java.io.File file1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.copyInputStreamToFile(inputStream0, file1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.File.exists()\" because \"file\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test076");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.writeStringToFile(file7, "", "", true);
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test077");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean13 = org.apache.commons.io.FileUtils.isFileOlder(file7, (-1L));
        java.io.FileOutputStream fileOutputStream15 = org.apache.commons.io.FileUtils.openOutputStream(file7, false);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.String> strList17 = org.apache.commons.io.FileUtils.readLines(file7, "");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(fileOutputStream15);
    }

    @Test
    @Disabled
    public void test078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test078");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean13 = org.apache.commons.io.FileUtils.isFileOlder(file7, (-1L));
        long long14 = org.apache.commons.io.FileUtils.sizeOf(file7);
        java.io.File file15 = org.apache.commons.io.FileUtils.getUserDirectory();
        org.apache.commons.io.FileUtils.copyFileToDirectory(file7, file15, true);
        java.lang.String[] strArray20 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file21 = org.apache.commons.io.FileUtils.getFile(strArray20);
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file25 = org.apache.commons.io.FileUtils.getFile(strArray24);
        boolean boolean26 = org.apache.commons.io.FileUtils.isFileOlder(file21, file25);
        boolean boolean28 = org.apache.commons.io.FileUtils.waitFor(file25, (int) '4');
        org.apache.commons.io.LineIterator lineIterator29 = org.apache.commons.io.FileUtils.lineIterator(file25);
        boolean boolean30 = org.apache.commons.io.FileUtils.deleteQuietly(file25);
        org.apache.commons.io.FileUtils.write(file25, (java.lang.CharSequence) "hi!");
        java.io.FileOutputStream fileOutputStream34 = org.apache.commons.io.FileUtils.openOutputStream(file25, true);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.copyFileToDirectory(file7, file25, true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Destination 'hi!\\hi!' is not a directory");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + 36L + "'", long14 == 36L);
        org.junit.Assert.assertNotNull(file15);
        org.junit.Assert.assertEquals(file15.getParent(), "C:\\Users");
        org.junit.Assert.assertEquals(file15.toString(), "C:\\Users\\Mathieu");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(file21);
        org.junit.Assert.assertEquals(file21.getParent(), "hi!");
        org.junit.Assert.assertEquals(file21.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(file25);
        org.junit.Assert.assertEquals(file25.getParent(), "hi!");
        org.junit.Assert.assertEquals(file25.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(lineIterator29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(fileOutputStream34);
    }

    @Test
    public void test079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test079");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean12 = org.apache.commons.io.FileUtils.deleteQuietly(file7);
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset16 = null;
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "", charset16, true);
        java.nio.charset.Charset charset20 = null;
        org.apache.commons.io.FileUtils.writeStringToFile(file7, "", charset20, false);
        long long23 = org.apache.commons.io.FileUtils.sizeOf(file7);
        org.apache.commons.io.FileUtils.writeStringToFile(file7, "");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.cleanDirectory(file7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: hi!\\hi! is not a directory");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
    }

    @Test
    public void test080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test080");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean12 = org.apache.commons.io.FileUtils.deleteQuietly(file7);
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset16 = null;
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "", charset16, true);
        java.nio.charset.Charset charset20 = null;
        org.apache.commons.io.FileUtils.writeStringToFile(file7, "", charset20, false);
        long long23 = org.apache.commons.io.FileUtils.sizeOf(file7);
        java.lang.String[] strArray26 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file27 = org.apache.commons.io.FileUtils.getFile(strArray26);
        java.lang.String[] strArray28 = new java.lang.String[] {};
        java.io.File file29 = org.apache.commons.io.FileUtils.getFile(strArray28);
        java.io.File file30 = org.apache.commons.io.FileUtils.getFile(file27, strArray28);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Collection<java.io.File> fileCollection32 = org.apache.commons.io.FileUtils.listFiles(file7, strArray28, true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'directory' is not a directory: hi!\\hi!");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(file27);
        org.junit.Assert.assertEquals(file27.getParent(), "hi!");
        org.junit.Assert.assertEquals(file27.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNull(file29);
        org.junit.Assert.assertNotNull(file30);
        org.junit.Assert.assertEquals(file30.getParent(), "hi!");
        org.junit.Assert.assertEquals(file30.toString(), "hi!\\hi!");
    }

    @Test
    public void test081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test081");
        long long0 = org.apache.commons.io.FileUtils.ONE_GB;
        org.junit.Assert.assertTrue("'" + long0 + "' != '" + 1073741824L + "'", long0 == 1073741824L);
    }

    @Test
    public void test082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test082");
        java.io.File file0 = org.apache.commons.io.FileUtils.getUserDirectory();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str1 = org.apache.commons.io.FileUtils.readFileToString(file0);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: File 'C:\\Users\\Mathieu' exists but is a directory");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(file0);
        org.junit.Assert.assertEquals(file0.getParent(), "C:\\Users");
        org.junit.Assert.assertEquals(file0.toString(), "C:\\Users\\Mathieu");
    }

    @Test
    public void test083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test083");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file14 = org.apache.commons.io.FileUtils.getFile(strArray13);
        boolean boolean16 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file7, file14, "");
        org.apache.commons.io.LineIterator lineIterator17 = org.apache.commons.io.FileUtils.lineIterator(file7);
        org.apache.commons.io.FileUtils.writeStringToFile(file7, "C:\\Users\\Mathieu\\AppData\\Local\\Temp\\", false);
        java.nio.charset.Charset charset22 = null;
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "", charset22, true);
        boolean boolean26 = org.apache.commons.io.FileUtils.waitFor(file7, 0);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.cleanDirectory(file7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: hi!\\hi! is not a directory");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(file14);
        org.junit.Assert.assertEquals(file14.getParent(), "hi!");
        org.junit.Assert.assertEquals(file14.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(lineIterator17);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
    }

    @Test
    public void test084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test084");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String str4 = org.apache.commons.io.FileUtils.readFileToString(file3);
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file8 = org.apache.commons.io.FileUtils.getFile(strArray7);
        java.lang.String[] strArray11 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file12 = org.apache.commons.io.FileUtils.getFile(strArray11);
        boolean boolean13 = org.apache.commons.io.FileUtils.isFileOlder(file8, file12);
        boolean boolean15 = org.apache.commons.io.FileUtils.waitFor(file12, (int) '4');
        org.apache.commons.io.LineIterator lineIterator16 = org.apache.commons.io.FileUtils.lineIterator(file12);
        boolean boolean17 = org.apache.commons.io.FileUtils.deleteQuietly(file12);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.copyFile(file3, file12);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Source 'hi!\\hi!' and destination 'hi!\\hi!' are the same");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "C:\\Users\\Mathieu\\AppData\\Local\\Temp\\" + "'", str4, "C:\\Users\\Mathieu\\AppData\\Local\\Temp\\");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(file8);
        org.junit.Assert.assertEquals(file8.getParent(), "hi!");
        org.junit.Assert.assertEquals(file8.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(file12);
        org.junit.Assert.assertEquals(file12.getParent(), "hi!");
        org.junit.Assert.assertEquals(file12.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(lineIterator16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test085");
        long long0 = org.apache.commons.io.FileUtils.ONE_TB;
        org.junit.Assert.assertTrue("'" + long0 + "' != '" + 1099511627776L + "'", long0 == 1099511627776L);
    }

    @Test
    public void test086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test086");
        java.io.File file0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.write(file0, (java.lang.CharSequence) "C:\\Users\\Mathieu\\AppData\\Local\\Temp\\", "hi!");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: hi!");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
    }

    @Test
    public void test087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test087");
        java.lang.Iterable<java.io.File> fileIterable0 = null;
        java.lang.String[] strArray3 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file4 = org.apache.commons.io.FileUtils.getFile(strArray3);
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file8 = org.apache.commons.io.FileUtils.getFile(strArray7);
        boolean boolean9 = org.apache.commons.io.FileUtils.isFileOlder(file4, file8);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.copyToDirectory(fileIterable0, file4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: sourceIterable");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(file4);
        org.junit.Assert.assertEquals(file4.getParent(), "hi!");
        org.junit.Assert.assertEquals(file4.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(file8);
        org.junit.Assert.assertEquals(file8.getParent(), "hi!");
        org.junit.Assert.assertEquals(file8.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    @Disabled
    public void test088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test088");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean13 = org.apache.commons.io.FileUtils.isFileOlder(file7, (-1L));
        java.nio.charset.Charset charset14 = null;
        java.lang.String str15 = org.apache.commons.io.FileUtils.readFileToString(file7, charset14);
        java.lang.String[] strArray18 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file19 = org.apache.commons.io.FileUtils.getFile(strArray18);
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file23 = org.apache.commons.io.FileUtils.getFile(strArray22);
        boolean boolean24 = org.apache.commons.io.FileUtils.isFileOlder(file19, file23);
        boolean boolean26 = org.apache.commons.io.FileUtils.waitFor(file23, (int) '4');
        java.lang.String[] strArray29 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file30 = org.apache.commons.io.FileUtils.getFile(strArray29);
        boolean boolean32 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file23, file30, "");
        java.io.FileOutputStream fileOutputStream34 = org.apache.commons.io.FileUtils.openOutputStream(file23, false);
        java.util.zip.Checksum checksum35 = null;
        java.util.zip.Checksum checksum36 = org.apache.commons.io.FileUtils.checksum(file23, checksum35);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.copyFile(file7, file23, false);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Source 'hi!\\hi!' and destination 'hi!\\hi!' are the same");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(file19);
        org.junit.Assert.assertEquals(file19.getParent(), "hi!");
        org.junit.Assert.assertEquals(file19.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(file23);
        org.junit.Assert.assertEquals(file23.getParent(), "hi!");
        org.junit.Assert.assertEquals(file23.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(file30);
        org.junit.Assert.assertEquals(file30.getParent(), "hi!");
        org.junit.Assert.assertEquals(file30.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(fileOutputStream34);
        org.junit.Assert.assertNull(checksum36);
    }

    @Test
    public void test089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test089");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean12 = org.apache.commons.io.FileUtils.deleteQuietly(file7);
        org.apache.commons.io.FileUtils.writeStringToFile(file7, "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file18 = org.apache.commons.io.FileUtils.getFile(strArray17);
        java.lang.String[] strArray21 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file22 = org.apache.commons.io.FileUtils.getFile(strArray21);
        boolean boolean23 = org.apache.commons.io.FileUtils.isFileOlder(file18, file22);
        boolean boolean25 = org.apache.commons.io.FileUtils.waitFor(file22, (int) '4');
        java.lang.String[] strArray28 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file29 = org.apache.commons.io.FileUtils.getFile(strArray28);
        boolean boolean31 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file22, file29, "");
        boolean boolean32 = org.apache.commons.io.FileUtils.isFileNewer(file7, file22);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.LineIterator lineIterator34 = org.apache.commons.io.FileUtils.lineIterator(file7, "hi!");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: hi!");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(file18);
        org.junit.Assert.assertEquals(file18.getParent(), "hi!");
        org.junit.Assert.assertEquals(file18.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(file22);
        org.junit.Assert.assertEquals(file22.getParent(), "hi!");
        org.junit.Assert.assertEquals(file22.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(file29);
        org.junit.Assert.assertEquals(file29.getParent(), "hi!");
        org.junit.Assert.assertEquals(file29.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test090");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray4 = new java.lang.String[] {};
        java.io.File file5 = org.apache.commons.io.FileUtils.getFile(strArray4);
        java.io.File file6 = org.apache.commons.io.FileUtils.getFile(file3, strArray4);
        java.lang.String[] strArray9 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file10 = org.apache.commons.io.FileUtils.getFile(strArray9);
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file14 = org.apache.commons.io.FileUtils.getFile(strArray13);
        boolean boolean15 = org.apache.commons.io.FileUtils.isFileOlder(file10, file14);
        boolean boolean17 = org.apache.commons.io.FileUtils.waitFor(file14, (int) '4');
        org.apache.commons.io.LineIterator lineIterator18 = org.apache.commons.io.FileUtils.lineIterator(file14);
        boolean boolean19 = org.apache.commons.io.FileUtils.deleteQuietly(file14);
        org.apache.commons.io.FileUtils.write(file14, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset23 = null;
        org.apache.commons.io.FileUtils.write(file14, (java.lang.CharSequence) "", charset23, true);
        byte[] byteArray26 = org.apache.commons.io.FileUtils.readFileToByteArray(file14);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.moveToDirectory(file6, file14, true);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Destination 'hi!\\hi!' is not a directory");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNull(file5);
        org.junit.Assert.assertNotNull(file6);
        org.junit.Assert.assertEquals(file6.getParent(), "hi!");
        org.junit.Assert.assertEquals(file6.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(file10);
        org.junit.Assert.assertEquals(file10.getParent(), "hi!");
        org.junit.Assert.assertEquals(file10.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(file14);
        org.junit.Assert.assertEquals(file14.getParent(), "hi!");
        org.junit.Assert.assertEquals(file14.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(lineIterator18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[104, 105, 33]");
    }

    @Test
    public void test091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test091");
        java.net.URL uRL0 = null;
        java.lang.String[] strArray3 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file4 = org.apache.commons.io.FileUtils.getFile(strArray3);
        java.lang.String[] strArray5 = new java.lang.String[] {};
        java.io.File file6 = org.apache.commons.io.FileUtils.getFile(strArray5);
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(file4, strArray5);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.copyURLToFile(uRL0, file4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.net.URL.openStream()\" because \"source\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(file4);
        org.junit.Assert.assertEquals(file4.getParent(), "hi!");
        org.junit.Assert.assertEquals(file4.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNull(file6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
    }

    @Test
    public void test092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test092");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean13 = org.apache.commons.io.FileUtils.isFileOlder(file7, (-1L));
        java.nio.charset.Charset charset14 = null;
        java.lang.String str15 = org.apache.commons.io.FileUtils.readFileToString(file7, charset14);
        java.lang.String[] strArray18 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file19 = org.apache.commons.io.FileUtils.getFile(strArray18);
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file23 = org.apache.commons.io.FileUtils.getFile(strArray22);
        boolean boolean24 = org.apache.commons.io.FileUtils.isFileOlder(file19, file23);
        boolean boolean26 = org.apache.commons.io.FileUtils.waitFor(file23, (int) '4');
        java.io.FileFilter fileFilter27 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.copyDirectory(file7, file23, fileFilter27);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Source 'hi!\\hi!' exists but is not a directory");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(file19);
        org.junit.Assert.assertEquals(file19.getParent(), "hi!");
        org.junit.Assert.assertEquals(file19.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(file23);
        org.junit.Assert.assertEquals(file23.getParent(), "hi!");
        org.junit.Assert.assertEquals(file23.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
    }

    @Test
    public void test093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test093");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean12 = org.apache.commons.io.FileUtils.deleteQuietly(file7);
        org.apache.commons.io.FileUtils.writeStringToFile(file7, "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file18 = org.apache.commons.io.FileUtils.getFile(strArray17);
        java.lang.String[] strArray21 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file22 = org.apache.commons.io.FileUtils.getFile(strArray21);
        boolean boolean23 = org.apache.commons.io.FileUtils.isFileOlder(file18, file22);
        boolean boolean25 = org.apache.commons.io.FileUtils.waitFor(file22, (int) '4');
        java.lang.String[] strArray28 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file29 = org.apache.commons.io.FileUtils.getFile(strArray28);
        boolean boolean31 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file22, file29, "");
        boolean boolean32 = org.apache.commons.io.FileUtils.isFileNewer(file7, file22);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter33 = null;
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter34 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<java.io.File> fileItor35 = org.apache.commons.io.FileUtils.iterateFilesAndDirs(file22, iOFileFilter33, iOFileFilter34);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'directory' is not a directory: hi!\\hi!");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(file18);
        org.junit.Assert.assertEquals(file18.getParent(), "hi!");
        org.junit.Assert.assertEquals(file18.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(file22);
        org.junit.Assert.assertEquals(file22.getParent(), "hi!");
        org.junit.Assert.assertEquals(file22.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(file29);
        org.junit.Assert.assertEquals(file29.getParent(), "hi!");
        org.junit.Assert.assertEquals(file29.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test094");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file14 = org.apache.commons.io.FileUtils.getFile(strArray13);
        boolean boolean16 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file7, file14, "");
        java.util.Date date17 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean18 = org.apache.commons.io.FileUtils.isFileOlder(file7, date17);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No specified date");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(file14);
        org.junit.Assert.assertEquals(file14.getParent(), "hi!");
        org.junit.Assert.assertEquals(file14.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test095");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file14 = org.apache.commons.io.FileUtils.getFile(strArray13);
        boolean boolean16 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file7, file14, "");
        org.apache.commons.io.LineIterator lineIterator17 = org.apache.commons.io.FileUtils.lineIterator(file7);
        org.apache.commons.io.FileUtils.writeStringToFile(file7, "C:\\Users\\Mathieu\\AppData\\Local\\Temp\\", false);
        java.nio.charset.Charset charset22 = null;
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "", charset22, true);
        boolean boolean26 = org.apache.commons.io.FileUtils.waitFor(file7, 0);
        java.util.zip.Checksum checksum27 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.zip.Checksum checksum28 = org.apache.commons.io.FileUtils.checksum(file7, checksum27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.util.zip.Checksum.update(byte[], int, int)\" because \"this.cksum\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(file14);
        org.junit.Assert.assertEquals(file14.getParent(), "hi!");
        org.junit.Assert.assertEquals(file14.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(lineIterator17);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
    }

    @Test
    public void test096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test096");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean12 = org.apache.commons.io.FileUtils.deleteQuietly(file7);
        java.lang.String[] strArray15 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file16 = org.apache.commons.io.FileUtils.getFile(strArray15);
        java.lang.String[] strArray19 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file20 = org.apache.commons.io.FileUtils.getFile(strArray19);
        boolean boolean21 = org.apache.commons.io.FileUtils.isFileOlder(file16, file20);
        boolean boolean23 = org.apache.commons.io.FileUtils.waitFor(file20, (int) '4');
        org.apache.commons.io.LineIterator lineIterator24 = org.apache.commons.io.FileUtils.lineIterator(file20);
        boolean boolean25 = org.apache.commons.io.FileUtils.deleteQuietly(file20);
        java.io.FileOutputStream fileOutputStream26 = org.apache.commons.io.FileUtils.openOutputStream(file20);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.copyDirectory(file7, file20);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Source 'hi!\\hi!' exists but is not a directory");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(file16);
        org.junit.Assert.assertEquals(file16.getParent(), "hi!");
        org.junit.Assert.assertEquals(file16.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(file20);
        org.junit.Assert.assertEquals(file20.getParent(), "hi!");
        org.junit.Assert.assertEquals(file20.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(lineIterator24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(fileOutputStream26);
    }

    @Test
    public void test097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test097");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.writeStringToFile(file7, "C:\\Users\\Mathieu\\AppData\\Local\\Temp\\", "", true);
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
    }

    @Test
    public void test098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test098");
        java.lang.String str1 = org.apache.commons.io.FileUtils.byteCountToDisplaySize((long) (-1));
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "-1 bytes" + "'", str1, "-1 bytes");
    }

    @Test
    public void test099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test099");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean13 = org.apache.commons.io.FileUtils.isFileOlder(file7, (-1L));
        long long14 = org.apache.commons.io.FileUtils.sizeOf(file7);
        java.io.File file15 = org.apache.commons.io.FileUtils.getUserDirectory();
        org.apache.commons.io.FileUtils.copyFileToDirectory(file7, file15, true);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.write(file15, (java.lang.CharSequence) "C:\\Users\\Mathieu\\AppData\\Local\\Temp\\", "-1 bytes");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: -1 bytes");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(file15);
        org.junit.Assert.assertEquals(file15.getParent(), "C:\\Users");
        org.junit.Assert.assertEquals(file15.toString(), "C:\\Users\\Mathieu");
    }

    @Test
    public void test100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test100");
        java.math.BigInteger bigInteger0 = org.apache.commons.io.FileUtils.ONE_MB_BI;
        org.junit.Assert.assertNotNull(bigInteger0);
    }

    @Test
    public void test101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test101");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean12 = org.apache.commons.io.FileUtils.deleteQuietly(file7);
        java.io.FileOutputStream fileOutputStream13 = org.apache.commons.io.FileUtils.openOutputStream(file7);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.writeStringToFile(file7, "hi!", "");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(fileOutputStream13);
    }

    @Test
    public void test102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test102");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean13 = org.apache.commons.io.FileUtils.isFileOlder(file7, (-1L));
        long long14 = org.apache.commons.io.FileUtils.sizeOf(file7);
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file18 = org.apache.commons.io.FileUtils.getFile(strArray17);
        java.lang.String[] strArray21 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file22 = org.apache.commons.io.FileUtils.getFile(strArray21);
        boolean boolean23 = org.apache.commons.io.FileUtils.isFileOlder(file18, file22);
        boolean boolean24 = org.apache.commons.io.FileUtils.deleteQuietly(file22);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean25 = org.apache.commons.io.FileUtils.directoryContains(file7, file22);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Not a directory: hi!\\hi!");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(file18);
        org.junit.Assert.assertEquals(file18.getParent(), "hi!");
        org.junit.Assert.assertEquals(file18.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(file22);
        org.junit.Assert.assertEquals(file22.getParent(), "hi!");
        org.junit.Assert.assertEquals(file22.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test103");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file14 = org.apache.commons.io.FileUtils.getFile(strArray13);
        boolean boolean16 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file7, file14, "");
        java.io.FileOutputStream fileOutputStream18 = org.apache.commons.io.FileUtils.openOutputStream(file7, false);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "C:\\Users\\Mathieu\\AppData\\Local\\Temp\\", "C:\\Users\\Mathieu\\AppData\\Local\\Temp\\", true);
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: C:\\Users\\Mathieu\\AppData\\Local\\Temp\\");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(file14);
        org.junit.Assert.assertEquals(file14.getParent(), "hi!");
        org.junit.Assert.assertEquals(file14.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(fileOutputStream18);
    }

    @Test
    public void test104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test104");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean9 = org.apache.commons.io.FileUtils.deleteQuietly(file7);
        java.nio.charset.Charset charset11 = null;
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "", charset11, true);
        java.util.Date date14 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean15 = org.apache.commons.io.FileUtils.isFileOlder(file7, date14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No specified date");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test105");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean13 = org.apache.commons.io.FileUtils.isFileOlder(file7, (-1L));
        java.util.Date date14 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean15 = org.apache.commons.io.FileUtils.isFileOlder(file7, date14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No specified date");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test106");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        java.lang.String[] strArray14 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file15 = org.apache.commons.io.FileUtils.getFile(strArray14);
        java.lang.String[] strArray18 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file19 = org.apache.commons.io.FileUtils.getFile(strArray18);
        boolean boolean20 = org.apache.commons.io.FileUtils.isFileOlder(file15, file19);
        boolean boolean22 = org.apache.commons.io.FileUtils.waitFor(file19, (int) '4');
        org.apache.commons.io.LineIterator lineIterator23 = org.apache.commons.io.FileUtils.lineIterator(file19);
        boolean boolean24 = org.apache.commons.io.FileUtils.deleteQuietly(file19);
        org.apache.commons.io.FileUtils.write(file19, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset28 = null;
        org.apache.commons.io.FileUtils.write(file19, (java.lang.CharSequence) "", charset28, true);
        java.nio.charset.Charset charset32 = null;
        org.apache.commons.io.FileUtils.writeStringToFile(file19, "", charset32, false);
        long long35 = org.apache.commons.io.FileUtils.sizeOf(file19);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.moveDirectoryToDirectory(file7, file19, false);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Destination 'hi!\\hi!' is not a directory");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(file15);
        org.junit.Assert.assertEquals(file15.getParent(), "hi!");
        org.junit.Assert.assertEquals(file15.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(file19);
        org.junit.Assert.assertEquals(file19.getParent(), "hi!");
        org.junit.Assert.assertEquals(file19.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(lineIterator23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
    }

    @Test
    public void test107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test107");
        long long0 = org.apache.commons.io.FileUtils.ONE_KB;
        org.junit.Assert.assertTrue("'" + long0 + "' != '" + 1024L + "'", long0 == 1024L);
    }

    @Test
    public void test108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test108");
        java.io.File file0 = null;
        java.lang.String[] strArray3 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file4 = org.apache.commons.io.FileUtils.getFile(strArray3);
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file8 = org.apache.commons.io.FileUtils.getFile(strArray7);
        boolean boolean9 = org.apache.commons.io.FileUtils.isFileOlder(file4, file8);
        boolean boolean11 = org.apache.commons.io.FileUtils.waitFor(file8, (int) '4');
        org.apache.commons.io.LineIterator lineIterator12 = org.apache.commons.io.FileUtils.lineIterator(file8);
        boolean boolean13 = org.apache.commons.io.FileUtils.deleteQuietly(file8);
        org.apache.commons.io.FileUtils.write(file8, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset17 = null;
        org.apache.commons.io.FileUtils.write(file8, (java.lang.CharSequence) "", charset17, true);
        java.nio.charset.Charset charset21 = null;
        org.apache.commons.io.FileUtils.writeStringToFile(file8, "", charset21, false);
        long long24 = org.apache.commons.io.FileUtils.sizeOf(file8);
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file28 = org.apache.commons.io.FileUtils.getFile(strArray27);
        java.lang.String[] strArray31 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file32 = org.apache.commons.io.FileUtils.getFile(strArray31);
        boolean boolean33 = org.apache.commons.io.FileUtils.isFileOlder(file28, file32);
        boolean boolean35 = org.apache.commons.io.FileUtils.waitFor(file32, (int) '4');
        org.apache.commons.io.LineIterator lineIterator36 = org.apache.commons.io.FileUtils.lineIterator(file32);
        boolean boolean37 = org.apache.commons.io.FileUtils.deleteQuietly(file32);
        org.apache.commons.io.FileUtils.write(file32, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset41 = null;
        org.apache.commons.io.FileUtils.write(file32, (java.lang.CharSequence) "", charset41, true);
        java.nio.charset.Charset charset45 = null;
        org.apache.commons.io.FileUtils.writeStringToFile(file32, "", charset45, false);
        long long48 = org.apache.commons.io.FileUtils.sizeOf(file32);
        org.apache.commons.io.FileUtils.writeStringToFile(file32, "");
        boolean boolean52 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file8, file32, "hi!");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.copyFile(file0, file32, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: source");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(file4);
        org.junit.Assert.assertEquals(file4.getParent(), "hi!");
        org.junit.Assert.assertEquals(file4.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(file8);
        org.junit.Assert.assertEquals(file8.getParent(), "hi!");
        org.junit.Assert.assertEquals(file8.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(lineIterator12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(file28);
        org.junit.Assert.assertEquals(file28.getParent(), "hi!");
        org.junit.Assert.assertEquals(file28.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(file32);
        org.junit.Assert.assertEquals(file32.getParent(), "hi!");
        org.junit.Assert.assertEquals(file32.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(lineIterator36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
    }

    @Test
    public void test109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test109");
        java.net.URL uRL0 = null;
        java.lang.String[] strArray3 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file4 = org.apache.commons.io.FileUtils.getFile(strArray3);
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file8 = org.apache.commons.io.FileUtils.getFile(strArray7);
        boolean boolean9 = org.apache.commons.io.FileUtils.isFileOlder(file4, file8);
        boolean boolean11 = org.apache.commons.io.FileUtils.waitFor(file8, (int) '4');
        org.apache.commons.io.LineIterator lineIterator12 = org.apache.commons.io.FileUtils.lineIterator(file8);
        boolean boolean14 = org.apache.commons.io.FileUtils.isFileOlder(file8, (-1L));
        long long15 = org.apache.commons.io.FileUtils.sizeOf(file8);
        java.io.File file16 = org.apache.commons.io.FileUtils.getUserDirectory();
        org.apache.commons.io.FileUtils.copyFileToDirectory(file8, file16, true);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.copyURLToFile(uRL0, file16, (int) (byte) 100, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.net.URL.openConnection()\" because \"source\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(file4);
        org.junit.Assert.assertEquals(file4.getParent(), "hi!");
        org.junit.Assert.assertEquals(file4.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(file8);
        org.junit.Assert.assertEquals(file8.getParent(), "hi!");
        org.junit.Assert.assertEquals(file8.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(lineIterator12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(file16);
        org.junit.Assert.assertEquals(file16.getParent(), "C:\\Users");
        org.junit.Assert.assertEquals(file16.toString(), "C:\\Users\\Mathieu");
    }

    @Test
    public void test110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test110");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean9 = org.apache.commons.io.FileUtils.deleteQuietly(file7);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.writeStringToFile(file7, "C:\\Users\\Mathieu\\AppData\\Local\\Temp\\", "hi!");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: hi!");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test111");
        java.math.BigInteger bigInteger0 = org.apache.commons.io.FileUtils.ONE_GB_BI;
        java.lang.String str1 = org.apache.commons.io.FileUtils.byteCountToDisplaySize(bigInteger0);
        org.junit.Assert.assertNotNull(bigInteger0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "1 GB" + "'", str1, "1 GB");
    }

    @Test
    public void test112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test112");
        java.io.File file0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str2 = org.apache.commons.io.FileUtils.readFileToString(file0, "1 GB");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: 1 GB");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
    }

    @Test
    @Disabled
    public void test113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test113");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String str4 = org.apache.commons.io.FileUtils.readFileToString(file3);
        // The following exception was thrown during execution in test generation
        try {
            long long5 = org.apache.commons.io.FileUtils.sizeOfDirectory(file3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: hi!\\hi! is not a directory");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 bytes" + "'", str4, "-1 bytes");
    }

    @Test
    public void test114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test114");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean12 = org.apache.commons.io.FileUtils.deleteQuietly(file7);
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset16 = null;
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "", charset16, true);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter19 = null;
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter20 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<java.io.File> fileItor21 = org.apache.commons.io.FileUtils.iterateFilesAndDirs(file7, iOFileFilter19, iOFileFilter20);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'directory' is not a directory: hi!\\hi!");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test115");
        java.net.URL uRL0 = null;
        java.lang.String[] strArray3 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file4 = org.apache.commons.io.FileUtils.getFile(strArray3);
        java.lang.String[] strArray5 = new java.lang.String[] {};
        java.io.File file6 = org.apache.commons.io.FileUtils.getFile(strArray5);
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(file4, strArray5);
        org.apache.commons.io.LineIterator lineIterator8 = org.apache.commons.io.FileUtils.lineIterator(file7);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.copyURLToFile(uRL0, file7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.net.URL.openStream()\" because \"source\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(file4);
        org.junit.Assert.assertEquals(file4.getParent(), "hi!");
        org.junit.Assert.assertEquals(file4.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNull(file6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(lineIterator8);
    }

    @Test
    public void test116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test116");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean9 = org.apache.commons.io.FileUtils.deleteQuietly(file7);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter10 = null;
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter11 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Collection<java.io.File> fileCollection12 = org.apache.commons.io.FileUtils.listFiles(file7, iOFileFilter10, iOFileFilter11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'directory' is not a directory: hi!\\hi!");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test117");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean12 = org.apache.commons.io.FileUtils.deleteQuietly(file7);
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset16 = null;
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "", charset16, true);
        byte[] byteArray19 = org.apache.commons.io.FileUtils.readFileToByteArray(file7);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.cleanDirectory(file7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: hi!\\hi! is not a directory");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[104, 105, 33]");
    }

    @Test
    public void test118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test118");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file14 = org.apache.commons.io.FileUtils.getFile(strArray13);
        boolean boolean16 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file7, file14, "");
        org.apache.commons.io.LineIterator lineIterator17 = org.apache.commons.io.FileUtils.lineIterator(file7);
        org.apache.commons.io.FileUtils.writeStringToFile(file7, "C:\\Users\\Mathieu\\AppData\\Local\\Temp\\", false);
        java.lang.String[] strArray23 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file24 = org.apache.commons.io.FileUtils.getFile(strArray23);
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file28 = org.apache.commons.io.FileUtils.getFile(strArray27);
        boolean boolean29 = org.apache.commons.io.FileUtils.isFileOlder(file24, file28);
        boolean boolean30 = org.apache.commons.io.FileUtils.deleteQuietly(file28);
        java.lang.String[] strArray33 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file34 = org.apache.commons.io.FileUtils.getFile(strArray33);
        java.lang.String[] strArray37 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file38 = org.apache.commons.io.FileUtils.getFile(strArray37);
        boolean boolean39 = org.apache.commons.io.FileUtils.isFileOlder(file34, file38);
        boolean boolean41 = org.apache.commons.io.FileUtils.waitFor(file38, (int) '4');
        java.lang.String[] strArray44 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file45 = org.apache.commons.io.FileUtils.getFile(strArray44);
        boolean boolean47 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file38, file45, "");
        org.apache.commons.io.LineIterator lineIterator48 = org.apache.commons.io.FileUtils.lineIterator(file38);
        org.apache.commons.io.FileUtils.writeStringToFile(file38, "C:\\Users\\Mathieu\\AppData\\Local\\Temp\\", false);
        java.nio.charset.Charset charset53 = null;
        org.apache.commons.io.FileUtils.write(file38, (java.lang.CharSequence) "", charset53, true);
        boolean boolean57 = org.apache.commons.io.FileUtils.waitFor(file38, 0);
        boolean boolean58 = org.apache.commons.io.FileUtils.isFileOlder(file28, file38);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.copyToDirectory(file7, file28);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Destination 'hi!\\hi!' is not a directory");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(file14);
        org.junit.Assert.assertEquals(file14.getParent(), "hi!");
        org.junit.Assert.assertEquals(file14.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(lineIterator17);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(file24);
        org.junit.Assert.assertEquals(file24.getParent(), "hi!");
        org.junit.Assert.assertEquals(file24.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(file28);
        org.junit.Assert.assertEquals(file28.getParent(), "hi!");
        org.junit.Assert.assertEquals(file28.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(file34);
        org.junit.Assert.assertEquals(file34.getParent(), "hi!");
        org.junit.Assert.assertEquals(file34.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(file38);
        org.junit.Assert.assertEquals(file38.getParent(), "hi!");
        org.junit.Assert.assertEquals(file38.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(file45);
        org.junit.Assert.assertEquals(file45.getParent(), "hi!");
        org.junit.Assert.assertEquals(file45.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(lineIterator48);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test119");
        java.lang.String str0 = org.apache.commons.io.FileUtils.getUserDirectoryPath();
        org.junit.Assert.assertEquals("'" + str0 + "' != '" + "C:\\Users\\Mathieu" + "'", str0, "C:\\Users\\Mathieu");
    }

    @Test
    public void test120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test120");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean13 = org.apache.commons.io.FileUtils.isFileOlder(file7, (-1L));
        byte[] byteArray14 = new byte[] {};
        org.apache.commons.io.FileUtils.writeByteArrayToFile(file7, byteArray14);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.writeStringToFile(file7, "-1 bytes", "-1 bytes");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: -1 bytes");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
    }

    @Test
    public void test121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test121");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray4 = new java.lang.String[] {};
        java.io.File file5 = org.apache.commons.io.FileUtils.getFile(strArray4);
        java.io.File file6 = org.apache.commons.io.FileUtils.getFile(file3, strArray4);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.writeStringToFile(file3, "hi!", "hi!");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: hi!");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNull(file5);
        org.junit.Assert.assertNotNull(file6);
        org.junit.Assert.assertEquals(file6.getParent(), "hi!");
        org.junit.Assert.assertEquals(file6.toString(), "hi!\\hi!");
    }

    @Test
    public void test122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test122");
        java.lang.Iterable<java.io.File> fileIterable0 = null;
        java.lang.String[] strArray3 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file4 = org.apache.commons.io.FileUtils.getFile(strArray3);
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file8 = org.apache.commons.io.FileUtils.getFile(strArray7);
        boolean boolean9 = org.apache.commons.io.FileUtils.isFileOlder(file4, file8);
        boolean boolean11 = org.apache.commons.io.FileUtils.waitFor(file8, (int) '4');
        org.apache.commons.io.LineIterator lineIterator12 = org.apache.commons.io.FileUtils.lineIterator(file8);
        boolean boolean13 = org.apache.commons.io.FileUtils.deleteQuietly(file8);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.copyToDirectory(fileIterable0, file8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: sourceIterable");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(file4);
        org.junit.Assert.assertEquals(file4.getParent(), "hi!");
        org.junit.Assert.assertEquals(file4.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(file8);
        org.junit.Assert.assertEquals(file8.getParent(), "hi!");
        org.junit.Assert.assertEquals(file8.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(lineIterator12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test123");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean12 = org.apache.commons.io.FileUtils.deleteQuietly(file7);
        org.apache.commons.io.FileUtils.writeStringToFile(file7, "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file18 = org.apache.commons.io.FileUtils.getFile(strArray17);
        java.lang.String[] strArray21 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file22 = org.apache.commons.io.FileUtils.getFile(strArray21);
        boolean boolean23 = org.apache.commons.io.FileUtils.isFileOlder(file18, file22);
        boolean boolean25 = org.apache.commons.io.FileUtils.waitFor(file22, (int) '4');
        java.lang.String[] strArray28 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file29 = org.apache.commons.io.FileUtils.getFile(strArray28);
        boolean boolean31 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file22, file29, "");
        boolean boolean32 = org.apache.commons.io.FileUtils.isFileNewer(file7, file22);
        boolean boolean33 = org.apache.commons.io.FileUtils.isSymlink(file7);
        java.lang.String[] strArray36 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file37 = org.apache.commons.io.FileUtils.getFile(strArray36);
        java.lang.String[] strArray40 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file41 = org.apache.commons.io.FileUtils.getFile(strArray40);
        boolean boolean42 = org.apache.commons.io.FileUtils.isFileOlder(file37, file41);
        boolean boolean44 = org.apache.commons.io.FileUtils.waitFor(file41, (int) '4');
        org.apache.commons.io.LineIterator lineIterator45 = org.apache.commons.io.FileUtils.lineIterator(file41);
        boolean boolean47 = org.apache.commons.io.FileUtils.isFileOlder(file41, (-1L));
        long long48 = org.apache.commons.io.FileUtils.sizeOf(file41);
        java.io.File file49 = org.apache.commons.io.FileUtils.getUserDirectory();
        org.apache.commons.io.FileUtils.copyFileToDirectory(file41, file49, true);
        java.io.FileFilter fileFilter52 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.copyDirectory(file7, file41, fileFilter52);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Source 'hi!\\hi!' exists but is not a directory");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(file18);
        org.junit.Assert.assertEquals(file18.getParent(), "hi!");
        org.junit.Assert.assertEquals(file18.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(file22);
        org.junit.Assert.assertEquals(file22.getParent(), "hi!");
        org.junit.Assert.assertEquals(file22.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(file29);
        org.junit.Assert.assertEquals(file29.getParent(), "hi!");
        org.junit.Assert.assertEquals(file29.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(file37);
        org.junit.Assert.assertEquals(file37.getParent(), "hi!");
        org.junit.Assert.assertEquals(file37.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(file41);
        org.junit.Assert.assertEquals(file41.getParent(), "hi!");
        org.junit.Assert.assertEquals(file41.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(lineIterator45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertNotNull(file49);
        org.junit.Assert.assertEquals(file49.getParent(), "C:\\Users");
        org.junit.Assert.assertEquals(file49.toString(), "C:\\Users\\Mathieu");
    }

    @Test
    public void test124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test124");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean12 = org.apache.commons.io.FileUtils.deleteQuietly(file7);
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset16 = null;
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "", charset16, true);
        java.nio.charset.Charset charset20 = null;
        org.apache.commons.io.FileUtils.writeStringToFile(file7, "", charset20, false);
        long long23 = org.apache.commons.io.FileUtils.sizeOf(file7);
        org.apache.commons.io.FileUtils.writeStringToFile(file7, "");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "C:\\Users\\Mathieu", "1 GB", false);
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: 1 GB");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
    }

    @Test
    public void test125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test125");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean13 = org.apache.commons.io.FileUtils.isFileOlder(file7, (-1L));
        java.nio.charset.Charset charset14 = null;
        java.lang.String str15 = org.apache.commons.io.FileUtils.readFileToString(file7, charset14);
        java.io.FileOutputStream fileOutputStream17 = org.apache.commons.io.FileUtils.openOutputStream(file7, false);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter18 = null;
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter19 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Collection<java.io.File> fileCollection20 = org.apache.commons.io.FileUtils.listFiles(file7, iOFileFilter18, iOFileFilter19);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'directory' is not a directory: hi!\\hi!");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(fileOutputStream17);
    }

    @Test
    public void test126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test126");
        java.io.File file0 = org.apache.commons.io.FileUtils.getTempDirectory();
        java.lang.String[] strArray3 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file4 = org.apache.commons.io.FileUtils.getFile(strArray3);
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file8 = org.apache.commons.io.FileUtils.getFile(strArray7);
        boolean boolean9 = org.apache.commons.io.FileUtils.isFileOlder(file4, file8);
        boolean boolean11 = org.apache.commons.io.FileUtils.waitFor(file8, (int) '4');
        org.apache.commons.io.LineIterator lineIterator12 = org.apache.commons.io.FileUtils.lineIterator(file8);
        boolean boolean14 = org.apache.commons.io.FileUtils.isFileOlder(file8, (-1L));
        java.nio.charset.Charset charset15 = null;
        java.lang.String str16 = org.apache.commons.io.FileUtils.readFileToString(file8, charset15);
        java.io.FileOutputStream fileOutputStream18 = org.apache.commons.io.FileUtils.openOutputStream(file8, false);
        java.io.FileOutputStream fileOutputStream20 = org.apache.commons.io.FileUtils.openOutputStream(file8, true);
        boolean boolean21 = org.apache.commons.io.FileUtils.isFileOlder(file0, file8);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.forceMkdir(file8);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: File hi!\\hi! exists and is not a directory. Unable to create directory.");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(file0);
        org.junit.Assert.assertEquals(file0.getParent(), "C:\\Users\\Mathieu\\AppData\\Local");
        org.junit.Assert.assertEquals(file0.toString(), "C:\\Users\\Mathieu\\AppData\\Local\\Temp");
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(file4);
        org.junit.Assert.assertEquals(file4.getParent(), "hi!");
        org.junit.Assert.assertEquals(file4.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(file8);
        org.junit.Assert.assertEquals(file8.getParent(), "hi!");
        org.junit.Assert.assertEquals(file8.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(lineIterator12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(fileOutputStream18);
        org.junit.Assert.assertNotNull(fileOutputStream20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
    }

    @Test
    public void test127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test127");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file14 = org.apache.commons.io.FileUtils.getFile(strArray13);
        boolean boolean16 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file7, file14, "");
        java.io.File file17 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.copyFile(file14, file17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: target");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(file14);
        org.junit.Assert.assertEquals(file14.getParent(), "hi!");
        org.junit.Assert.assertEquals(file14.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test128");
        java.io.File file0 = null;
        java.lang.String[] strArray3 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file4 = org.apache.commons.io.FileUtils.getFile(strArray3);
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file8 = org.apache.commons.io.FileUtils.getFile(strArray7);
        boolean boolean9 = org.apache.commons.io.FileUtils.isFileOlder(file4, file8);
        boolean boolean11 = org.apache.commons.io.FileUtils.waitFor(file8, (int) '4');
        java.lang.String[] strArray14 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file15 = org.apache.commons.io.FileUtils.getFile(strArray14);
        boolean boolean17 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file8, file15, "");
        org.apache.commons.io.LineIterator lineIterator18 = org.apache.commons.io.FileUtils.lineIterator(file8);
        org.apache.commons.io.FileUtils.writeStringToFile(file8, "C:\\Users\\Mathieu\\AppData\\Local\\Temp\\", false);
        java.nio.charset.Charset charset23 = null;
        org.apache.commons.io.FileUtils.write(file8, (java.lang.CharSequence) "", charset23, true);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean26 = org.apache.commons.io.FileUtils.directoryContains(file0, file8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Directory must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(file4);
        org.junit.Assert.assertEquals(file4.getParent(), "hi!");
        org.junit.Assert.assertEquals(file4.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(file8);
        org.junit.Assert.assertEquals(file8.getParent(), "hi!");
        org.junit.Assert.assertEquals(file8.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(file15);
        org.junit.Assert.assertEquals(file15.getParent(), "hi!");
        org.junit.Assert.assertEquals(file15.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(lineIterator18);
    }

    @Test
    public void test129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test129");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean12 = org.apache.commons.io.FileUtils.deleteQuietly(file7);
        org.apache.commons.io.FileUtils.writeStringToFile(file7, "");
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter15 = null;
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter16 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<java.io.File> fileItor17 = org.apache.commons.io.FileUtils.iterateFilesAndDirs(file7, iOFileFilter15, iOFileFilter16);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'directory' is not a directory: hi!\\hi!");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test130");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean13 = org.apache.commons.io.FileUtils.isFileOlder(file7, (-1L));
        byte[] byteArray14 = new byte[] {};
        org.apache.commons.io.FileUtils.writeByteArrayToFile(file7, byteArray14);
        java.lang.String[] strArray18 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file19 = org.apache.commons.io.FileUtils.getFile(strArray18);
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file23 = org.apache.commons.io.FileUtils.getFile(strArray22);
        boolean boolean24 = org.apache.commons.io.FileUtils.isFileOlder(file19, file23);
        boolean boolean26 = org.apache.commons.io.FileUtils.waitFor(file23, (int) '4');
        org.apache.commons.io.LineIterator lineIterator27 = org.apache.commons.io.FileUtils.lineIterator(file23);
        boolean boolean29 = org.apache.commons.io.FileUtils.isFileOlder(file23, (-1L));
        java.io.FileOutputStream fileOutputStream31 = org.apache.commons.io.FileUtils.openOutputStream(file23, false);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.copyFileToDirectory(file7, file23, true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Destination 'hi!\\hi!' is not a directory");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(file19);
        org.junit.Assert.assertEquals(file19.getParent(), "hi!");
        org.junit.Assert.assertEquals(file19.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(file23);
        org.junit.Assert.assertEquals(file23.getParent(), "hi!");
        org.junit.Assert.assertEquals(file23.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(lineIterator27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(fileOutputStream31);
    }

    @Test
    public void test131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test131");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean12 = org.apache.commons.io.FileUtils.deleteQuietly(file7);
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset16 = null;
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "", charset16, true);
        java.nio.charset.Charset charset20 = null;
        org.apache.commons.io.FileUtils.writeStringToFile(file7, "", charset20, false);
        long long23 = org.apache.commons.io.FileUtils.sizeOf(file7);
        java.lang.String[] strArray26 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file27 = org.apache.commons.io.FileUtils.getFile(strArray26);
        java.lang.String[] strArray30 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file31 = org.apache.commons.io.FileUtils.getFile(strArray30);
        boolean boolean32 = org.apache.commons.io.FileUtils.isFileOlder(file27, file31);
        boolean boolean34 = org.apache.commons.io.FileUtils.waitFor(file31, (int) '4');
        org.apache.commons.io.LineIterator lineIterator35 = org.apache.commons.io.FileUtils.lineIterator(file31);
        boolean boolean36 = org.apache.commons.io.FileUtils.deleteQuietly(file31);
        org.apache.commons.io.FileUtils.write(file31, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset40 = null;
        org.apache.commons.io.FileUtils.write(file31, (java.lang.CharSequence) "", charset40, true);
        java.nio.charset.Charset charset44 = null;
        org.apache.commons.io.FileUtils.writeStringToFile(file31, "", charset44, false);
        long long47 = org.apache.commons.io.FileUtils.sizeOf(file31);
        org.apache.commons.io.FileUtils.writeStringToFile(file31, "");
        boolean boolean51 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file7, file31, "hi!");
        java.lang.String[] strArray54 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file55 = org.apache.commons.io.FileUtils.getFile(strArray54);
        java.lang.String[] strArray58 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file59 = org.apache.commons.io.FileUtils.getFile(strArray58);
        boolean boolean60 = org.apache.commons.io.FileUtils.isFileOlder(file55, file59);
        boolean boolean62 = org.apache.commons.io.FileUtils.waitFor(file59, (int) '4');
        org.apache.commons.io.LineIterator lineIterator63 = org.apache.commons.io.FileUtils.lineIterator(file59);
        boolean boolean65 = org.apache.commons.io.FileUtils.isFileOlder(file59, (-1L));
        java.nio.charset.Charset charset66 = null;
        java.lang.String str67 = org.apache.commons.io.FileUtils.readFileToString(file59, charset66);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.copyToDirectory(file31, file59);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Destination 'hi!\\hi!' is not a directory");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(file27);
        org.junit.Assert.assertEquals(file27.getParent(), "hi!");
        org.junit.Assert.assertEquals(file27.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(file31);
        org.junit.Assert.assertEquals(file31.getParent(), "hi!");
        org.junit.Assert.assertEquals(file31.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(lineIterator35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(file55);
        org.junit.Assert.assertEquals(file55.getParent(), "hi!");
        org.junit.Assert.assertEquals(file55.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(file59);
        org.junit.Assert.assertEquals(file59.getParent(), "hi!");
        org.junit.Assert.assertEquals(file59.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(lineIterator63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
    }

    @Test
    public void test132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test132");
        java.io.File file0 = org.apache.commons.io.FileUtils.getUserDirectory();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter1 = null;
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter2 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<java.io.File> fileItor3 = org.apache.commons.io.FileUtils.iterateFiles(file0, iOFileFilter1, iOFileFilter2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: fileFilter");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(file0);
        org.junit.Assert.assertEquals(file0.getParent(), "C:\\Users");
        org.junit.Assert.assertEquals(file0.toString(), "C:\\Users\\Mathieu");
    }

    @Test
    public void test133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test133");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean12 = org.apache.commons.io.FileUtils.deleteQuietly(file7);
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset16 = null;
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "", charset16, true);
        byte[] byteArray19 = org.apache.commons.io.FileUtils.readFileToByteArray(file7);
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file23 = org.apache.commons.io.FileUtils.getFile(strArray22);
        java.lang.String[] strArray26 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file27 = org.apache.commons.io.FileUtils.getFile(strArray26);
        boolean boolean28 = org.apache.commons.io.FileUtils.isFileOlder(file23, file27);
        boolean boolean30 = org.apache.commons.io.FileUtils.waitFor(file27, (int) '4');
        org.apache.commons.io.LineIterator lineIterator31 = org.apache.commons.io.FileUtils.lineIterator(file27);
        boolean boolean32 = org.apache.commons.io.FileUtils.deleteQuietly(file27);
        org.apache.commons.io.FileUtils.write(file27, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset36 = null;
        org.apache.commons.io.FileUtils.write(file27, (java.lang.CharSequence) "", charset36, true);
        java.nio.charset.Charset charset40 = null;
        org.apache.commons.io.FileUtils.writeStringToFile(file27, "", charset40, false);
        boolean boolean43 = org.apache.commons.io.FileUtils.isFileNewer(file7, file27);
        java.lang.String[] strArray46 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file47 = org.apache.commons.io.FileUtils.getFile(strArray46);
        java.lang.String[] strArray50 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file51 = org.apache.commons.io.FileUtils.getFile(strArray50);
        boolean boolean52 = org.apache.commons.io.FileUtils.isFileOlder(file47, file51);
        boolean boolean54 = org.apache.commons.io.FileUtils.waitFor(file51, (int) '4');
        org.apache.commons.io.LineIterator lineIterator55 = org.apache.commons.io.FileUtils.lineIterator(file51);
        boolean boolean57 = org.apache.commons.io.FileUtils.isFileOlder(file51, (-1L));
        long long58 = org.apache.commons.io.FileUtils.sizeOf(file51);
        java.io.File file59 = org.apache.commons.io.FileUtils.getUserDirectory();
        org.apache.commons.io.FileUtils.copyFileToDirectory(file51, file59, true);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.copyDirectoryToDirectory(file27, file59);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Source 'hi!\\hi!' is not a directory");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[104, 105, 33]");
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(file23);
        org.junit.Assert.assertEquals(file23.getParent(), "hi!");
        org.junit.Assert.assertEquals(file23.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(file27);
        org.junit.Assert.assertEquals(file27.getParent(), "hi!");
        org.junit.Assert.assertEquals(file27.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(lineIterator31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(file47);
        org.junit.Assert.assertEquals(file47.getParent(), "hi!");
        org.junit.Assert.assertEquals(file47.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(file51);
        org.junit.Assert.assertEquals(file51.getParent(), "hi!");
        org.junit.Assert.assertEquals(file51.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(lineIterator55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 0L + "'", long58 == 0L);
        org.junit.Assert.assertNotNull(file59);
        org.junit.Assert.assertEquals(file59.getParent(), "C:\\Users");
        org.junit.Assert.assertEquals(file59.toString(), "C:\\Users\\Mathieu");
    }

    @Test
    public void test134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test134");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        java.lang.String[] strArray10 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file11 = org.apache.commons.io.FileUtils.getFile(strArray10);
        boolean boolean12 = org.apache.commons.io.FileUtils.isFileOlder(file7, file11);
        boolean boolean14 = org.apache.commons.io.FileUtils.waitFor(file11, (int) '4');
        org.apache.commons.io.LineIterator lineIterator15 = org.apache.commons.io.FileUtils.lineIterator(file11);
        boolean boolean16 = org.apache.commons.io.FileUtils.deleteQuietly(file11);
        org.apache.commons.io.FileUtils.writeStringToFile(file11, "");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.moveDirectory(file3, file11);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Source 'hi!\\hi!' is not a directory");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(file11);
        org.junit.Assert.assertEquals(file11.getParent(), "hi!");
        org.junit.Assert.assertEquals(file11.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(lineIterator15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test135");
        java.math.BigInteger bigInteger0 = org.apache.commons.io.FileUtils.ONE_YB;
        java.lang.Class<?> wildcardClass1 = bigInteger0.getClass();
        org.junit.Assert.assertNotNull(bigInteger0);
        org.junit.Assert.assertNotNull(wildcardClass1);
    }

    @Test
    public void test136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test136");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean12 = org.apache.commons.io.FileUtils.deleteQuietly(file7);
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "hi!");
        long long15 = org.apache.commons.io.FileUtils.sizeOf(file7);
        java.lang.String[] strArray18 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file19 = org.apache.commons.io.FileUtils.getFile(strArray18);
        java.lang.String[] strArray20 = new java.lang.String[] {};
        java.io.File file21 = org.apache.commons.io.FileUtils.getFile(strArray20);
        java.io.File file22 = org.apache.commons.io.FileUtils.getFile(file19, strArray20);
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file26 = org.apache.commons.io.FileUtils.getFile(strArray25);
        java.lang.String[] strArray29 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file30 = org.apache.commons.io.FileUtils.getFile(strArray29);
        boolean boolean31 = org.apache.commons.io.FileUtils.isFileOlder(file26, file30);
        boolean boolean33 = org.apache.commons.io.FileUtils.waitFor(file30, (int) '4');
        org.apache.commons.io.LineIterator lineIterator34 = org.apache.commons.io.FileUtils.lineIterator(file30);
        boolean boolean36 = org.apache.commons.io.FileUtils.isFileOlder(file30, (-1L));
        java.io.FileOutputStream fileOutputStream38 = org.apache.commons.io.FileUtils.openOutputStream(file30, false);
        long long39 = org.apache.commons.io.FileUtils.copyFile(file19, (java.io.OutputStream) fileOutputStream38);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.copyDirectory(file7, file19);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Source 'hi!\\hi!' exists but is not a directory");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 3L + "'", long15 == 3L);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(file19);
        org.junit.Assert.assertEquals(file19.getParent(), "hi!");
        org.junit.Assert.assertEquals(file19.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNull(file21);
        org.junit.Assert.assertNotNull(file22);
        org.junit.Assert.assertEquals(file22.getParent(), "hi!");
        org.junit.Assert.assertEquals(file22.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(file26);
        org.junit.Assert.assertEquals(file26.getParent(), "hi!");
        org.junit.Assert.assertEquals(file26.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(file30);
        org.junit.Assert.assertEquals(file30.getParent(), "hi!");
        org.junit.Assert.assertEquals(file30.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(lineIterator34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(fileOutputStream38);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
    }

    @Test
    public void test137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test137");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        java.io.File file12 = org.apache.commons.io.FileUtils.getTempDirectory();
        java.lang.String[] strArray15 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file16 = org.apache.commons.io.FileUtils.getFile(strArray15);
        java.lang.String[] strArray19 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file20 = org.apache.commons.io.FileUtils.getFile(strArray19);
        boolean boolean21 = org.apache.commons.io.FileUtils.isFileOlder(file16, file20);
        boolean boolean23 = org.apache.commons.io.FileUtils.waitFor(file20, (int) '4');
        org.apache.commons.io.LineIterator lineIterator24 = org.apache.commons.io.FileUtils.lineIterator(file20);
        boolean boolean26 = org.apache.commons.io.FileUtils.isFileOlder(file20, (-1L));
        java.nio.charset.Charset charset27 = null;
        java.lang.String str28 = org.apache.commons.io.FileUtils.readFileToString(file20, charset27);
        java.io.FileOutputStream fileOutputStream30 = org.apache.commons.io.FileUtils.openOutputStream(file20, false);
        java.io.FileOutputStream fileOutputStream32 = org.apache.commons.io.FileUtils.openOutputStream(file20, true);
        boolean boolean33 = org.apache.commons.io.FileUtils.isFileOlder(file12, file20);
        java.lang.String[] strArray40 = new java.lang.String[] { "C:\\Users\\Mathieu", "C:\\Users\\Mathieu", "", "1 GB", "hi!", "" };
        java.util.Iterator<java.io.File> fileItor42 = org.apache.commons.io.FileUtils.iterateFiles(file12, strArray40, true);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.copyDirectory(file7, file12);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Source 'hi!\\hi!' exists but is not a directory");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertNotNull(file12);
        org.junit.Assert.assertEquals(file12.getParent(), "C:\\Users\\Mathieu\\AppData\\Local");
        org.junit.Assert.assertEquals(file12.toString(), "C:\\Users\\Mathieu\\AppData\\Local\\Temp");
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(file16);
        org.junit.Assert.assertEquals(file16.getParent(), "hi!");
        org.junit.Assert.assertEquals(file16.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(file20);
        org.junit.Assert.assertEquals(file20.getParent(), "hi!");
        org.junit.Assert.assertEquals(file20.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(lineIterator24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(fileOutputStream30);
        org.junit.Assert.assertNotNull(fileOutputStream32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(fileItor42);
    }

    @Test
    public void test138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test138");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray4 = new java.lang.String[] {};
        java.io.File file5 = org.apache.commons.io.FileUtils.getFile(strArray4);
        java.io.File file6 = org.apache.commons.io.FileUtils.getFile(file3, strArray4);
        java.lang.CharSequence charSequence7 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.write(file3, charSequence7, "hi!");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: hi!");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNull(file5);
        org.junit.Assert.assertNotNull(file6);
        org.junit.Assert.assertEquals(file6.getParent(), "hi!");
        org.junit.Assert.assertEquals(file6.toString(), "hi!\\hi!");
    }

    @Test
    public void test139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test139");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean9 = org.apache.commons.io.FileUtils.deleteQuietly(file7);
        java.lang.String[] strArray12 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file13 = org.apache.commons.io.FileUtils.getFile(strArray12);
        java.lang.String[] strArray16 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file17 = org.apache.commons.io.FileUtils.getFile(strArray16);
        boolean boolean18 = org.apache.commons.io.FileUtils.isFileOlder(file13, file17);
        boolean boolean20 = org.apache.commons.io.FileUtils.waitFor(file17, (int) '4');
        java.lang.String[] strArray23 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file24 = org.apache.commons.io.FileUtils.getFile(strArray23);
        boolean boolean26 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file17, file24, "");
        org.apache.commons.io.LineIterator lineIterator27 = org.apache.commons.io.FileUtils.lineIterator(file17);
        org.apache.commons.io.FileUtils.writeStringToFile(file17, "C:\\Users\\Mathieu\\AppData\\Local\\Temp\\", false);
        java.nio.charset.Charset charset32 = null;
        org.apache.commons.io.FileUtils.write(file17, (java.lang.CharSequence) "", charset32, true);
        boolean boolean36 = org.apache.commons.io.FileUtils.waitFor(file17, 0);
        boolean boolean37 = org.apache.commons.io.FileUtils.isFileOlder(file7, file17);
        java.lang.String[] strArray40 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file41 = org.apache.commons.io.FileUtils.getFile(strArray40);
        java.lang.String[] strArray44 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file45 = org.apache.commons.io.FileUtils.getFile(strArray44);
        boolean boolean46 = org.apache.commons.io.FileUtils.isFileOlder(file41, file45);
        boolean boolean48 = org.apache.commons.io.FileUtils.waitFor(file45, (int) '4');
        java.lang.String[] strArray51 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file52 = org.apache.commons.io.FileUtils.getFile(strArray51);
        boolean boolean54 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file45, file52, "");
        org.apache.commons.io.FileUtils.writeStringToFile(file45, "", false);
        java.io.FileFilter fileFilter58 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.copyDirectory(file17, file45, fileFilter58, true);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Source 'hi!\\hi!' exists but is not a directory");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(file13);
        org.junit.Assert.assertEquals(file13.getParent(), "hi!");
        org.junit.Assert.assertEquals(file13.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(file17);
        org.junit.Assert.assertEquals(file17.getParent(), "hi!");
        org.junit.Assert.assertEquals(file17.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(file24);
        org.junit.Assert.assertEquals(file24.getParent(), "hi!");
        org.junit.Assert.assertEquals(file24.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(lineIterator27);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(file41);
        org.junit.Assert.assertEquals(file41.getParent(), "hi!");
        org.junit.Assert.assertEquals(file41.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(file45);
        org.junit.Assert.assertEquals(file45.getParent(), "hi!");
        org.junit.Assert.assertEquals(file45.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(file52);
        org.junit.Assert.assertEquals(file52.getParent(), "hi!");
        org.junit.Assert.assertEquals(file52.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
    }

    @Test
    public void test140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test140");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String str4 = org.apache.commons.io.FileUtils.readFileToString(file3);
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file8 = org.apache.commons.io.FileUtils.getFile(strArray7);
        java.lang.String[] strArray11 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file12 = org.apache.commons.io.FileUtils.getFile(strArray11);
        boolean boolean13 = org.apache.commons.io.FileUtils.isFileOlder(file8, file12);
        boolean boolean15 = org.apache.commons.io.FileUtils.waitFor(file12, (int) '4');
        org.apache.commons.io.LineIterator lineIterator16 = org.apache.commons.io.FileUtils.lineIterator(file12);
        boolean boolean18 = org.apache.commons.io.FileUtils.isFileOlder(file12, (-1L));
        java.nio.charset.Charset charset19 = null;
        java.lang.String str20 = org.apache.commons.io.FileUtils.readFileToString(file12, charset19);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.copyToDirectory(file3, file12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Destination 'hi!\\hi!' is not a directory");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(file8);
        org.junit.Assert.assertEquals(file8.getParent(), "hi!");
        org.junit.Assert.assertEquals(file8.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(file12);
        org.junit.Assert.assertEquals(file12.getParent(), "hi!");
        org.junit.Assert.assertEquals(file12.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(lineIterator16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
    }

    @Test
    public void test141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test141");
        java.io.File file0 = null;
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray1 = org.apache.commons.io.FileUtils.readFileToByteArray(file0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.File.exists()\" because \"file\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test142");
        java.io.File file0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.forceDeleteOnExit(file0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.File.isDirectory()\" because \"file\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test143");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean12 = org.apache.commons.io.FileUtils.deleteQuietly(file7);
        org.apache.commons.io.FileUtils.writeStringToFile(file7, "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file18 = org.apache.commons.io.FileUtils.getFile(strArray17);
        java.lang.String[] strArray21 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file22 = org.apache.commons.io.FileUtils.getFile(strArray21);
        boolean boolean23 = org.apache.commons.io.FileUtils.isFileOlder(file18, file22);
        boolean boolean25 = org.apache.commons.io.FileUtils.waitFor(file22, (int) '4');
        java.lang.String[] strArray28 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file29 = org.apache.commons.io.FileUtils.getFile(strArray28);
        boolean boolean31 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file22, file29, "");
        boolean boolean32 = org.apache.commons.io.FileUtils.isFileNewer(file7, file22);
        boolean boolean33 = org.apache.commons.io.FileUtils.isSymlink(file7);
        java.lang.String[] strArray36 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file37 = org.apache.commons.io.FileUtils.getFile(strArray36);
        java.lang.String[] strArray38 = new java.lang.String[] {};
        java.io.File file39 = org.apache.commons.io.FileUtils.getFile(strArray38);
        java.io.File file40 = org.apache.commons.io.FileUtils.getFile(file37, strArray38);
        org.apache.commons.io.LineIterator lineIterator41 = org.apache.commons.io.FileUtils.lineIterator(file40);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.moveDirectoryToDirectory(file7, file40, true);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Destination 'hi!\\hi!' is not a directory");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(file18);
        org.junit.Assert.assertEquals(file18.getParent(), "hi!");
        org.junit.Assert.assertEquals(file18.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(file22);
        org.junit.Assert.assertEquals(file22.getParent(), "hi!");
        org.junit.Assert.assertEquals(file22.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(file29);
        org.junit.Assert.assertEquals(file29.getParent(), "hi!");
        org.junit.Assert.assertEquals(file29.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(file37);
        org.junit.Assert.assertEquals(file37.getParent(), "hi!");
        org.junit.Assert.assertEquals(file37.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNull(file39);
        org.junit.Assert.assertNotNull(file40);
        org.junit.Assert.assertEquals(file40.getParent(), "hi!");
        org.junit.Assert.assertEquals(file40.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(lineIterator41);
    }

    @Test
    public void test144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test144");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean12 = org.apache.commons.io.FileUtils.deleteQuietly(file7);
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "hi!");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file18 = org.apache.commons.io.FileUtils.getFile(strArray17);
        java.lang.String[] strArray21 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file22 = org.apache.commons.io.FileUtils.getFile(strArray21);
        boolean boolean23 = org.apache.commons.io.FileUtils.isFileOlder(file18, file22);
        boolean boolean25 = org.apache.commons.io.FileUtils.waitFor(file22, (int) '4');
        org.apache.commons.io.LineIterator lineIterator26 = org.apache.commons.io.FileUtils.lineIterator(file22);
        boolean boolean27 = org.apache.commons.io.FileUtils.deleteQuietly(file22);
        org.apache.commons.io.FileUtils.write(file22, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset31 = null;
        org.apache.commons.io.FileUtils.write(file22, (java.lang.CharSequence) "", charset31, true);
        java.nio.charset.Charset charset34 = null;
        java.lang.String str35 = org.apache.commons.io.FileUtils.readFileToString(file22, charset34);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.moveFile(file7, file22);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.io.FileExistsException; message: Destination 'hi!\\hi!' already exists");
        } catch (org.apache.commons.io.FileExistsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(file18);
        org.junit.Assert.assertEquals(file18.getParent(), "hi!");
        org.junit.Assert.assertEquals(file18.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(file22);
        org.junit.Assert.assertEquals(file22.getParent(), "hi!");
        org.junit.Assert.assertEquals(file22.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(lineIterator26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
    }

    @Test
    public void test145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test145");
        java.math.BigInteger bigInteger0 = org.apache.commons.io.FileUtils.ONE_EB_BI;
        org.junit.Assert.assertNotNull(bigInteger0);
    }

    @Test
    @Disabled
    public void test146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test146");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean13 = org.apache.commons.io.FileUtils.isFileOlder(file7, (-1L));
        java.nio.charset.Charset charset14 = null;
        java.lang.String str15 = org.apache.commons.io.FileUtils.readFileToString(file7, charset14);
        org.apache.commons.io.FileUtils.writeStringToFile(file7, "hi!", true);
        java.lang.String[] strArray24 = new java.lang.String[] { "C:\\Users\\Mathieu", "1 GB", "C:\\Users\\Mathieu\\AppData\\Local\\Temp\\", "hi!", "C:\\Users\\Mathieu\\AppData\\Local\\Temp\\" };
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<java.io.File> fileItor26 = org.apache.commons.io.FileUtils.iterateFiles(file7, strArray24, true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'directory' is not a directory: hi!\\hi!");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(strArray24);
    }

    @Test
    public void test147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test147");
        java.lang.Iterable<java.io.File> fileIterable0 = null;
        java.lang.String[] strArray3 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file4 = org.apache.commons.io.FileUtils.getFile(strArray3);
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file8 = org.apache.commons.io.FileUtils.getFile(strArray7);
        boolean boolean9 = org.apache.commons.io.FileUtils.isFileOlder(file4, file8);
        boolean boolean10 = org.apache.commons.io.FileUtils.deleteQuietly(file8);
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file14 = org.apache.commons.io.FileUtils.getFile(strArray13);
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file18 = org.apache.commons.io.FileUtils.getFile(strArray17);
        boolean boolean19 = org.apache.commons.io.FileUtils.isFileOlder(file14, file18);
        boolean boolean21 = org.apache.commons.io.FileUtils.waitFor(file18, (int) '4');
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file25 = org.apache.commons.io.FileUtils.getFile(strArray24);
        boolean boolean27 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file18, file25, "");
        org.apache.commons.io.LineIterator lineIterator28 = org.apache.commons.io.FileUtils.lineIterator(file18);
        org.apache.commons.io.FileUtils.writeStringToFile(file18, "C:\\Users\\Mathieu\\AppData\\Local\\Temp\\", false);
        java.nio.charset.Charset charset33 = null;
        org.apache.commons.io.FileUtils.write(file18, (java.lang.CharSequence) "", charset33, true);
        boolean boolean37 = org.apache.commons.io.FileUtils.waitFor(file18, 0);
        boolean boolean38 = org.apache.commons.io.FileUtils.isFileOlder(file8, file18);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.copyToDirectory(fileIterable0, file18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: sourceIterable");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(file4);
        org.junit.Assert.assertEquals(file4.getParent(), "hi!");
        org.junit.Assert.assertEquals(file4.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(file8);
        org.junit.Assert.assertEquals(file8.getParent(), "hi!");
        org.junit.Assert.assertEquals(file8.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(file14);
        org.junit.Assert.assertEquals(file14.getParent(), "hi!");
        org.junit.Assert.assertEquals(file14.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(file18);
        org.junit.Assert.assertEquals(file18.getParent(), "hi!");
        org.junit.Assert.assertEquals(file18.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(file25);
        org.junit.Assert.assertEquals(file25.getParent(), "hi!");
        org.junit.Assert.assertEquals(file25.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(lineIterator28);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test148");
        java.math.BigInteger bigInteger0 = org.apache.commons.io.FileUtils.ONE_YB;
        java.lang.String str1 = org.apache.commons.io.FileUtils.byteCountToDisplaySize(bigInteger0);
        org.junit.Assert.assertNotNull(bigInteger0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "1048576 EB" + "'", str1, "1048576 EB");
    }

    @Test
    @Disabled
    public void test149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test149");
        java.net.URL uRL0 = null;
        java.lang.String[] strArray3 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file4 = org.apache.commons.io.FileUtils.getFile(strArray3);
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file8 = org.apache.commons.io.FileUtils.getFile(strArray7);
        boolean boolean9 = org.apache.commons.io.FileUtils.isFileOlder(file4, file8);
        boolean boolean11 = org.apache.commons.io.FileUtils.waitFor(file8, (int) '4');
        org.apache.commons.io.LineIterator lineIterator12 = org.apache.commons.io.FileUtils.lineIterator(file8);
        boolean boolean14 = org.apache.commons.io.FileUtils.isFileOlder(file8, (-1L));
        java.nio.charset.Charset charset15 = null;
        java.lang.String str16 = org.apache.commons.io.FileUtils.readFileToString(file8, charset15);
        java.io.FileOutputStream fileOutputStream18 = org.apache.commons.io.FileUtils.openOutputStream(file8, false);
        org.apache.commons.io.LineIterator lineIterator19 = org.apache.commons.io.FileUtils.lineIterator(file8);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.copyURLToFile(uRL0, file8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.net.URL.openStream()\" because \"source\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(file4);
        org.junit.Assert.assertEquals(file4.getParent(), "hi!");
        org.junit.Assert.assertEquals(file4.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(file8);
        org.junit.Assert.assertEquals(file8.getParent(), "hi!");
        org.junit.Assert.assertEquals(file8.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(lineIterator12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(fileOutputStream18);
        org.junit.Assert.assertNotNull(lineIterator19);
    }

    @Test
    public void test150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test150");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean12 = org.apache.commons.io.FileUtils.deleteQuietly(file7);
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset16 = null;
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "", charset16, true);
        byte[] byteArray19 = org.apache.commons.io.FileUtils.readFileToByteArray(file7);
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file23 = org.apache.commons.io.FileUtils.getFile(strArray22);
        java.lang.String[] strArray26 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file27 = org.apache.commons.io.FileUtils.getFile(strArray26);
        boolean boolean28 = org.apache.commons.io.FileUtils.isFileOlder(file23, file27);
        boolean boolean30 = org.apache.commons.io.FileUtils.waitFor(file27, (int) '4');
        org.apache.commons.io.LineIterator lineIterator31 = org.apache.commons.io.FileUtils.lineIterator(file27);
        boolean boolean32 = org.apache.commons.io.FileUtils.deleteQuietly(file27);
        org.apache.commons.io.FileUtils.write(file27, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset36 = null;
        org.apache.commons.io.FileUtils.write(file27, (java.lang.CharSequence) "", charset36, true);
        java.nio.charset.Charset charset40 = null;
        org.apache.commons.io.FileUtils.writeStringToFile(file27, "", charset40, false);
        boolean boolean43 = org.apache.commons.io.FileUtils.isFileNewer(file7, file27);
        java.lang.String[] strArray46 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file47 = org.apache.commons.io.FileUtils.getFile(strArray46);
        java.lang.String[] strArray50 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file51 = org.apache.commons.io.FileUtils.getFile(strArray50);
        boolean boolean52 = org.apache.commons.io.FileUtils.isFileOlder(file47, file51);
        boolean boolean54 = org.apache.commons.io.FileUtils.waitFor(file51, (int) '4');
        org.apache.commons.io.LineIterator lineIterator55 = org.apache.commons.io.FileUtils.lineIterator(file51);
        boolean boolean56 = org.apache.commons.io.FileUtils.deleteQuietly(file51);
        org.apache.commons.io.FileUtils.write(file51, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset60 = null;
        org.apache.commons.io.FileUtils.write(file51, (java.lang.CharSequence) "", charset60, true);
        byte[] byteArray63 = org.apache.commons.io.FileUtils.readFileToByteArray(file51);
        org.apache.commons.io.FileUtils.writeByteArrayToFile(file7, byteArray63);
        java.lang.Class<?> wildcardClass65 = byteArray63.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[104, 105, 33]");
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(file23);
        org.junit.Assert.assertEquals(file23.getParent(), "hi!");
        org.junit.Assert.assertEquals(file23.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(file27);
        org.junit.Assert.assertEquals(file27.getParent(), "hi!");
        org.junit.Assert.assertEquals(file27.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(lineIterator31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(file47);
        org.junit.Assert.assertEquals(file47.getParent(), "hi!");
        org.junit.Assert.assertEquals(file47.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(file51);
        org.junit.Assert.assertEquals(file51.getParent(), "hi!");
        org.junit.Assert.assertEquals(file51.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(lineIterator55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[104, 105, 33]");
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    public void test151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test151");
        java.io.File file0 = org.apache.commons.io.FileUtils.getTempDirectory();
        java.lang.String[] strArray3 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file4 = org.apache.commons.io.FileUtils.getFile(strArray3);
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file8 = org.apache.commons.io.FileUtils.getFile(strArray7);
        boolean boolean9 = org.apache.commons.io.FileUtils.isFileOlder(file4, file8);
        boolean boolean11 = org.apache.commons.io.FileUtils.waitFor(file8, (int) '4');
        org.apache.commons.io.LineIterator lineIterator12 = org.apache.commons.io.FileUtils.lineIterator(file8);
        boolean boolean14 = org.apache.commons.io.FileUtils.isFileOlder(file8, (-1L));
        java.nio.charset.Charset charset15 = null;
        java.lang.String str16 = org.apache.commons.io.FileUtils.readFileToString(file8, charset15);
        java.io.FileOutputStream fileOutputStream18 = org.apache.commons.io.FileUtils.openOutputStream(file8, false);
        java.io.FileOutputStream fileOutputStream20 = org.apache.commons.io.FileUtils.openOutputStream(file8, true);
        boolean boolean21 = org.apache.commons.io.FileUtils.isFileOlder(file0, file8);
        java.lang.String[] strArray28 = new java.lang.String[] { "C:\\Users\\Mathieu", "C:\\Users\\Mathieu", "", "1 GB", "hi!", "" };
        java.util.Iterator<java.io.File> fileItor30 = org.apache.commons.io.FileUtils.iterateFiles(file0, strArray28, true);
        java.util.Date date31 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean32 = org.apache.commons.io.FileUtils.isFileNewer(file0, date31);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No specified date");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(file0);
        org.junit.Assert.assertEquals(file0.getParent(), "C:\\Users\\Mathieu\\AppData\\Local");
        org.junit.Assert.assertEquals(file0.toString(), "C:\\Users\\Mathieu\\AppData\\Local\\Temp");
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(file4);
        org.junit.Assert.assertEquals(file4.getParent(), "hi!");
        org.junit.Assert.assertEquals(file4.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(file8);
        org.junit.Assert.assertEquals(file8.getParent(), "hi!");
        org.junit.Assert.assertEquals(file8.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(lineIterator12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(fileOutputStream18);
        org.junit.Assert.assertNotNull(fileOutputStream20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(fileItor30);
    }

    @Test
    public void test152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test152");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean12 = org.apache.commons.io.FileUtils.deleteQuietly(file7);
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset16 = null;
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "", charset16, true);
        byte[] byteArray19 = org.apache.commons.io.FileUtils.readFileToByteArray(file7);
        boolean boolean21 = org.apache.commons.io.FileUtils.waitFor(file7, (int) 'a');
        byte[] byteArray22 = org.apache.commons.io.FileUtils.readFileToByteArray(file7);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter23 = null;
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter24 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Collection<java.io.File> fileCollection25 = org.apache.commons.io.FileUtils.listFilesAndDirs(file7, iOFileFilter23, iOFileFilter24);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'directory' is not a directory: hi!\\hi!");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[104, 105, 33]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[104, 105, 33]");
    }

    @Test
    public void test153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test153");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean12 = org.apache.commons.io.FileUtils.deleteQuietly(file7);
        org.apache.commons.io.FileUtils.writeStringToFile(file7, "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file18 = org.apache.commons.io.FileUtils.getFile(strArray17);
        java.lang.String[] strArray21 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file22 = org.apache.commons.io.FileUtils.getFile(strArray21);
        boolean boolean23 = org.apache.commons.io.FileUtils.isFileOlder(file18, file22);
        boolean boolean25 = org.apache.commons.io.FileUtils.waitFor(file22, (int) '4');
        java.lang.String[] strArray28 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file29 = org.apache.commons.io.FileUtils.getFile(strArray28);
        boolean boolean31 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file22, file29, "");
        boolean boolean32 = org.apache.commons.io.FileUtils.isFileNewer(file7, file22);
        java.lang.String[] strArray35 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file36 = org.apache.commons.io.FileUtils.getFile(strArray35);
        java.lang.String[] strArray39 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file40 = org.apache.commons.io.FileUtils.getFile(strArray39);
        boolean boolean41 = org.apache.commons.io.FileUtils.isFileOlder(file36, file40);
        boolean boolean43 = org.apache.commons.io.FileUtils.waitFor(file40, (int) '4');
        org.apache.commons.io.LineIterator lineIterator44 = org.apache.commons.io.FileUtils.lineIterator(file40);
        boolean boolean46 = org.apache.commons.io.FileUtils.isFileOlder(file40, (-1L));
        java.nio.charset.Charset charset47 = null;
        java.lang.String str48 = org.apache.commons.io.FileUtils.readFileToString(file40, charset47);
        java.io.FileOutputStream fileOutputStream50 = org.apache.commons.io.FileUtils.openOutputStream(file40, false);
        org.apache.commons.io.LineIterator lineIterator51 = org.apache.commons.io.FileUtils.lineIterator(file40);
        java.lang.String[] strArray54 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file55 = org.apache.commons.io.FileUtils.getFile(strArray54);
        java.lang.String[] strArray58 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file59 = org.apache.commons.io.FileUtils.getFile(strArray58);
        boolean boolean60 = org.apache.commons.io.FileUtils.isFileOlder(file55, file59);
        boolean boolean62 = org.apache.commons.io.FileUtils.waitFor(file59, (int) '4');
        org.apache.commons.io.LineIterator lineIterator63 = org.apache.commons.io.FileUtils.lineIterator(file59);
        boolean boolean64 = org.apache.commons.io.FileUtils.deleteQuietly(file59);
        org.apache.commons.io.FileUtils.writeStringToFile(file59, "");
        java.lang.String[] strArray69 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file70 = org.apache.commons.io.FileUtils.getFile(strArray69);
        java.lang.String[] strArray73 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file74 = org.apache.commons.io.FileUtils.getFile(strArray73);
        boolean boolean75 = org.apache.commons.io.FileUtils.isFileOlder(file70, file74);
        boolean boolean77 = org.apache.commons.io.FileUtils.waitFor(file74, (int) '4');
        java.lang.String[] strArray80 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file81 = org.apache.commons.io.FileUtils.getFile(strArray80);
        boolean boolean83 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file74, file81, "");
        boolean boolean84 = org.apache.commons.io.FileUtils.isFileNewer(file59, file74);
        boolean boolean85 = org.apache.commons.io.FileUtils.contentEquals(file40, file59);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.copyFile(file7, file40);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Source 'hi!\\hi!' and destination 'hi!\\hi!' are the same");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(file18);
        org.junit.Assert.assertEquals(file18.getParent(), "hi!");
        org.junit.Assert.assertEquals(file18.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(file22);
        org.junit.Assert.assertEquals(file22.getParent(), "hi!");
        org.junit.Assert.assertEquals(file22.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(file29);
        org.junit.Assert.assertEquals(file29.getParent(), "hi!");
        org.junit.Assert.assertEquals(file29.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(file36);
        org.junit.Assert.assertEquals(file36.getParent(), "hi!");
        org.junit.Assert.assertEquals(file36.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(file40);
        org.junit.Assert.assertEquals(file40.getParent(), "hi!");
        org.junit.Assert.assertEquals(file40.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(lineIterator44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(fileOutputStream50);
        org.junit.Assert.assertNotNull(lineIterator51);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(file55);
        org.junit.Assert.assertEquals(file55.getParent(), "hi!");
        org.junit.Assert.assertEquals(file55.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(file59);
        org.junit.Assert.assertEquals(file59.getParent(), "hi!");
        org.junit.Assert.assertEquals(file59.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(lineIterator63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertNotNull(file70);
        org.junit.Assert.assertEquals(file70.getParent(), "hi!");
        org.junit.Assert.assertEquals(file70.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(file74);
        org.junit.Assert.assertEquals(file74.getParent(), "hi!");
        org.junit.Assert.assertEquals(file74.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertNotNull(file81);
        org.junit.Assert.assertEquals(file81.getParent(), "hi!");
        org.junit.Assert.assertEquals(file81.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
    }

    @Test
    public void test154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test154");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean9 = org.apache.commons.io.FileUtils.deleteQuietly(file7);
        java.lang.String[] strArray12 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file13 = org.apache.commons.io.FileUtils.getFile(strArray12);
        java.lang.String[] strArray16 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file17 = org.apache.commons.io.FileUtils.getFile(strArray16);
        boolean boolean18 = org.apache.commons.io.FileUtils.isFileOlder(file13, file17);
        boolean boolean20 = org.apache.commons.io.FileUtils.waitFor(file17, (int) '4');
        java.lang.String[] strArray23 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file24 = org.apache.commons.io.FileUtils.getFile(strArray23);
        boolean boolean26 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file17, file24, "");
        org.apache.commons.io.LineIterator lineIterator27 = org.apache.commons.io.FileUtils.lineIterator(file17);
        org.apache.commons.io.FileUtils.writeStringToFile(file17, "C:\\Users\\Mathieu\\AppData\\Local\\Temp\\", false);
        java.nio.charset.Charset charset32 = null;
        org.apache.commons.io.FileUtils.write(file17, (java.lang.CharSequence) "", charset32, true);
        boolean boolean36 = org.apache.commons.io.FileUtils.waitFor(file17, 0);
        boolean boolean37 = org.apache.commons.io.FileUtils.isFileOlder(file7, file17);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.LineIterator lineIterator39 = org.apache.commons.io.FileUtils.lineIterator(file7, "1048576 EB");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: 1048576 EB");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(file13);
        org.junit.Assert.assertEquals(file13.getParent(), "hi!");
        org.junit.Assert.assertEquals(file13.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(file17);
        org.junit.Assert.assertEquals(file17.getParent(), "hi!");
        org.junit.Assert.assertEquals(file17.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(file24);
        org.junit.Assert.assertEquals(file24.getParent(), "hi!");
        org.junit.Assert.assertEquals(file24.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(lineIterator27);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test155");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean9 = org.apache.commons.io.FileUtils.deleteQuietly(file7);
        java.nio.charset.Charset charset11 = null;
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "", charset11, true);
        java.lang.String[] strArray16 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file17 = org.apache.commons.io.FileUtils.getFile(strArray16);
        java.lang.String[] strArray20 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file21 = org.apache.commons.io.FileUtils.getFile(strArray20);
        boolean boolean22 = org.apache.commons.io.FileUtils.isFileOlder(file17, file21);
        boolean boolean24 = org.apache.commons.io.FileUtils.waitFor(file21, (int) '4');
        org.apache.commons.io.LineIterator lineIterator25 = org.apache.commons.io.FileUtils.lineIterator(file21);
        boolean boolean26 = org.apache.commons.io.FileUtils.deleteQuietly(file21);
        org.apache.commons.io.FileUtils.write(file21, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset30 = null;
        org.apache.commons.io.FileUtils.write(file21, (java.lang.CharSequence) "", charset30, true);
        byte[] byteArray33 = org.apache.commons.io.FileUtils.readFileToByteArray(file21);
        boolean boolean35 = org.apache.commons.io.FileUtils.waitFor(file21, (int) 'a');
        byte[] byteArray36 = org.apache.commons.io.FileUtils.readFileToByteArray(file21);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.writeByteArrayToFile(file7, byteArray36, 0, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(file17);
        org.junit.Assert.assertEquals(file17.getParent(), "hi!");
        org.junit.Assert.assertEquals(file17.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(file21);
        org.junit.Assert.assertEquals(file21.getParent(), "hi!");
        org.junit.Assert.assertEquals(file21.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(lineIterator25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[104, 105, 33]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[104, 105, 33]");
    }

    @Test
    @Disabled
    public void test156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test156");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean13 = org.apache.commons.io.FileUtils.isFileOlder(file7, (-1L));
        java.nio.charset.Charset charset14 = null;
        java.lang.String str15 = org.apache.commons.io.FileUtils.readFileToString(file7, charset14);
        java.io.FileOutputStream fileOutputStream17 = org.apache.commons.io.FileUtils.openOutputStream(file7, false);
        org.apache.commons.io.LineIterator lineIterator18 = org.apache.commons.io.FileUtils.lineIterator(file7);
        org.apache.commons.io.FileUtils.writeStringToFile(file7, "-1 bytes", false);
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file25 = org.apache.commons.io.FileUtils.getFile(strArray24);
        java.lang.String[] strArray28 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file29 = org.apache.commons.io.FileUtils.getFile(strArray28);
        boolean boolean30 = org.apache.commons.io.FileUtils.isFileOlder(file25, file29);
        boolean boolean32 = org.apache.commons.io.FileUtils.waitFor(file29, (int) '4');
        org.apache.commons.io.LineIterator lineIterator33 = org.apache.commons.io.FileUtils.lineIterator(file29);
        boolean boolean35 = org.apache.commons.io.FileUtils.isFileOlder(file29, (-1L));
        long long36 = org.apache.commons.io.FileUtils.sizeOf(file29);
        java.io.File file37 = org.apache.commons.io.FileUtils.getUserDirectory();
        org.apache.commons.io.FileUtils.copyFileToDirectory(file29, file37, true);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.copyFileToDirectory(file7, file29, true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Destination 'hi!\\hi!' is not a directory");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "C:\\Users\\Mathieu\\AppData\\Local\\Temp\\" + "'", str15, "C:\\Users\\Mathieu\\AppData\\Local\\Temp\\");
        org.junit.Assert.assertNotNull(fileOutputStream17);
        org.junit.Assert.assertNotNull(lineIterator18);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(file25);
        org.junit.Assert.assertEquals(file25.getParent(), "hi!");
        org.junit.Assert.assertEquals(file25.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(file29);
        org.junit.Assert.assertEquals(file29.getParent(), "hi!");
        org.junit.Assert.assertEquals(file29.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(lineIterator33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 8L + "'", long36 == 8L);
        org.junit.Assert.assertNotNull(file37);
        org.junit.Assert.assertEquals(file37.getParent(), "C:\\Users");
        org.junit.Assert.assertEquals(file37.toString(), "C:\\Users\\Mathieu");
    }

    @Test
    public void test157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test157");
        java.io.File file0 = org.apache.commons.io.FileUtils.getUserDirectory();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.deleteDirectory(file0);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Unable to delete file: C:\\Users\\Mathieu\\Searches");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(file0);
        org.junit.Assert.assertEquals(file0.getParent(), "C:\\Users");
        org.junit.Assert.assertEquals(file0.toString(), "C:\\Users\\Mathieu");
    }

    @Test
    public void test158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test158");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file14 = org.apache.commons.io.FileUtils.getFile(strArray13);
        boolean boolean16 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file7, file14, "");
        org.apache.commons.io.LineIterator lineIterator17 = org.apache.commons.io.FileUtils.lineIterator(file7);
        java.util.zip.Checksum checksum18 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.zip.Checksum checksum19 = org.apache.commons.io.FileUtils.checksum(file7, checksum18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.util.zip.Checksum.update(byte[], int, int)\" because \"this.cksum\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(file14);
        org.junit.Assert.assertEquals(file14.getParent(), "hi!");
        org.junit.Assert.assertEquals(file14.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(lineIterator17);
    }

    @Test
    public void test159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test159");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        java.lang.String[] strArray10 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file11 = org.apache.commons.io.FileUtils.getFile(strArray10);
        boolean boolean12 = org.apache.commons.io.FileUtils.isFileOlder(file7, file11);
        boolean boolean14 = org.apache.commons.io.FileUtils.waitFor(file11, (int) '4');
        org.apache.commons.io.LineIterator lineIterator15 = org.apache.commons.io.FileUtils.lineIterator(file11);
        boolean boolean16 = org.apache.commons.io.FileUtils.deleteQuietly(file11);
        org.apache.commons.io.FileUtils.write(file11, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset20 = null;
        org.apache.commons.io.FileUtils.write(file11, (java.lang.CharSequence) "", charset20, true);
        byte[] byteArray23 = org.apache.commons.io.FileUtils.readFileToByteArray(file11);
        boolean boolean25 = org.apache.commons.io.FileUtils.waitFor(file11, (int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.copyFileToDirectory(file3, file11, true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Destination 'hi!\\hi!' is not a directory");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(file11);
        org.junit.Assert.assertEquals(file11.getParent(), "hi!");
        org.junit.Assert.assertEquals(file11.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(lineIterator15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[104, 105, 33]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
    }

    @Test
    public void test160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test160");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean12 = org.apache.commons.io.FileUtils.deleteQuietly(file7);
        java.lang.String[] strArray15 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file16 = org.apache.commons.io.FileUtils.getFile(strArray15);
        java.lang.String[] strArray19 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file20 = org.apache.commons.io.FileUtils.getFile(strArray19);
        boolean boolean21 = org.apache.commons.io.FileUtils.isFileOlder(file16, file20);
        boolean boolean23 = org.apache.commons.io.FileUtils.waitFor(file20, (int) '4');
        org.apache.commons.io.LineIterator lineIterator24 = org.apache.commons.io.FileUtils.lineIterator(file20);
        boolean boolean26 = org.apache.commons.io.FileUtils.isFileOlder(file20, (-1L));
        java.nio.charset.Charset charset27 = null;
        java.lang.String str28 = org.apache.commons.io.FileUtils.readFileToString(file20, charset27);
        java.io.FileOutputStream fileOutputStream30 = org.apache.commons.io.FileUtils.openOutputStream(file20, false);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.copyFileToDirectory(file7, file20);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Destination 'hi!\\hi!' is not a directory");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(file16);
        org.junit.Assert.assertEquals(file16.getParent(), "hi!");
        org.junit.Assert.assertEquals(file16.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(file20);
        org.junit.Assert.assertEquals(file20.getParent(), "hi!");
        org.junit.Assert.assertEquals(file20.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(lineIterator24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hi!" + "'", str28, "hi!");
        org.junit.Assert.assertNotNull(fileOutputStream30);
    }

    @Test
    public void test161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test161");
        java.io.File file0 = org.apache.commons.io.FileUtils.getTempDirectory();
        java.lang.String[] strArray3 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file4 = org.apache.commons.io.FileUtils.getFile(strArray3);
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file8 = org.apache.commons.io.FileUtils.getFile(strArray7);
        boolean boolean9 = org.apache.commons.io.FileUtils.isFileOlder(file4, file8);
        boolean boolean11 = org.apache.commons.io.FileUtils.waitFor(file8, (int) '4');
        org.apache.commons.io.LineIterator lineIterator12 = org.apache.commons.io.FileUtils.lineIterator(file8);
        boolean boolean14 = org.apache.commons.io.FileUtils.isFileOlder(file8, (-1L));
        java.nio.charset.Charset charset15 = null;
        java.lang.String str16 = org.apache.commons.io.FileUtils.readFileToString(file8, charset15);
        java.io.FileOutputStream fileOutputStream18 = org.apache.commons.io.FileUtils.openOutputStream(file8, false);
        java.io.FileOutputStream fileOutputStream20 = org.apache.commons.io.FileUtils.openOutputStream(file8, true);
        boolean boolean21 = org.apache.commons.io.FileUtils.isFileOlder(file0, file8);
        java.io.FileInputStream fileInputStream22 = org.apache.commons.io.FileUtils.openInputStream(file8);
        java.io.File file23 = org.apache.commons.io.FileUtils.getUserDirectory();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.copyToFile((java.io.InputStream) fileInputStream22, file23);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: File 'C:\\Users\\Mathieu' exists but is a directory");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(file0);
        org.junit.Assert.assertEquals(file0.getParent(), "C:\\Users\\Mathieu\\AppData\\Local");
        org.junit.Assert.assertEquals(file0.toString(), "C:\\Users\\Mathieu\\AppData\\Local\\Temp");
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(file4);
        org.junit.Assert.assertEquals(file4.getParent(), "hi!");
        org.junit.Assert.assertEquals(file4.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(file8);
        org.junit.Assert.assertEquals(file8.getParent(), "hi!");
        org.junit.Assert.assertEquals(file8.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(lineIterator12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(fileOutputStream18);
        org.junit.Assert.assertNotNull(fileOutputStream20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(fileInputStream22);
        org.junit.Assert.assertNotNull(file23);
        org.junit.Assert.assertEquals(file23.getParent(), "C:\\Users");
        org.junit.Assert.assertEquals(file23.toString(), "C:\\Users\\Mathieu");
    }

    @Test
    public void test162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test162");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean12 = org.apache.commons.io.FileUtils.deleteQuietly(file7);
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "hi!");
        long long15 = org.apache.commons.io.FileUtils.sizeOf(file7);
        java.lang.Class<?> wildcardClass16 = file7.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 3L + "'", long15 == 3L);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test163");
        java.net.URL uRL0 = null;
        java.lang.String[] strArray3 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file4 = org.apache.commons.io.FileUtils.getFile(strArray3);
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file8 = org.apache.commons.io.FileUtils.getFile(strArray7);
        boolean boolean9 = org.apache.commons.io.FileUtils.isFileOlder(file4, file8);
        boolean boolean11 = org.apache.commons.io.FileUtils.waitFor(file8, (int) '4');
        org.apache.commons.io.LineIterator lineIterator12 = org.apache.commons.io.FileUtils.lineIterator(file8);
        boolean boolean13 = org.apache.commons.io.FileUtils.deleteQuietly(file8);
        org.apache.commons.io.FileUtils.write(file8, (java.lang.CharSequence) "hi!");
        java.io.FileOutputStream fileOutputStream17 = org.apache.commons.io.FileUtils.openOutputStream(file8, true);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.copyURLToFile(uRL0, file8, (int) '#', (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.net.URL.openConnection()\" because \"source\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(file4);
        org.junit.Assert.assertEquals(file4.getParent(), "hi!");
        org.junit.Assert.assertEquals(file4.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(file8);
        org.junit.Assert.assertEquals(file8.getParent(), "hi!");
        org.junit.Assert.assertEquals(file8.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(lineIterator12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(fileOutputStream17);
    }

    @Test
    public void test164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test164");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean13 = org.apache.commons.io.FileUtils.isFileOlder(file7, (-1L));
        java.nio.charset.Charset charset14 = null;
        java.lang.String str15 = org.apache.commons.io.FileUtils.readFileToString(file7, charset14);
        java.io.FileOutputStream fileOutputStream17 = org.apache.commons.io.FileUtils.openOutputStream(file7, false);
        org.apache.commons.io.LineIterator lineIterator18 = org.apache.commons.io.FileUtils.lineIterator(file7);
        java.lang.String[] strArray21 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file22 = org.apache.commons.io.FileUtils.getFile(strArray21);
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file26 = org.apache.commons.io.FileUtils.getFile(strArray25);
        boolean boolean27 = org.apache.commons.io.FileUtils.isFileOlder(file22, file26);
        boolean boolean29 = org.apache.commons.io.FileUtils.waitFor(file26, (int) '4');
        org.apache.commons.io.LineIterator lineIterator30 = org.apache.commons.io.FileUtils.lineIterator(file26);
        boolean boolean31 = org.apache.commons.io.FileUtils.deleteQuietly(file26);
        org.apache.commons.io.FileUtils.writeStringToFile(file26, "");
        java.lang.String[] strArray36 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file37 = org.apache.commons.io.FileUtils.getFile(strArray36);
        java.lang.String[] strArray40 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file41 = org.apache.commons.io.FileUtils.getFile(strArray40);
        boolean boolean42 = org.apache.commons.io.FileUtils.isFileOlder(file37, file41);
        boolean boolean44 = org.apache.commons.io.FileUtils.waitFor(file41, (int) '4');
        java.lang.String[] strArray47 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file48 = org.apache.commons.io.FileUtils.getFile(strArray47);
        boolean boolean50 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file41, file48, "");
        boolean boolean51 = org.apache.commons.io.FileUtils.isFileNewer(file26, file41);
        boolean boolean52 = org.apache.commons.io.FileUtils.contentEquals(file7, file26);
        java.lang.String[] strArray55 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file56 = org.apache.commons.io.FileUtils.getFile(strArray55);
        java.lang.String[] strArray59 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file60 = org.apache.commons.io.FileUtils.getFile(strArray59);
        boolean boolean61 = org.apache.commons.io.FileUtils.isFileOlder(file56, file60);
        boolean boolean63 = org.apache.commons.io.FileUtils.waitFor(file60, (int) '4');
        org.apache.commons.io.LineIterator lineIterator64 = org.apache.commons.io.FileUtils.lineIterator(file60);
        boolean boolean66 = org.apache.commons.io.FileUtils.isFileOlder(file60, (-1L));
        java.nio.charset.Charset charset67 = null;
        java.lang.String str68 = org.apache.commons.io.FileUtils.readFileToString(file60, charset67);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.copyFile(file26, file60, true);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Source 'hi!\\hi!' and destination 'hi!\\hi!' are the same");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertNotNull(fileOutputStream17);
        org.junit.Assert.assertNotNull(lineIterator18);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(file22);
        org.junit.Assert.assertEquals(file22.getParent(), "hi!");
        org.junit.Assert.assertEquals(file22.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(file26);
        org.junit.Assert.assertEquals(file26.getParent(), "hi!");
        org.junit.Assert.assertEquals(file26.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(lineIterator30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(file37);
        org.junit.Assert.assertEquals(file37.getParent(), "hi!");
        org.junit.Assert.assertEquals(file37.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(file41);
        org.junit.Assert.assertEquals(file41.getParent(), "hi!");
        org.junit.Assert.assertEquals(file41.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(file48);
        org.junit.Assert.assertEquals(file48.getParent(), "hi!");
        org.junit.Assert.assertEquals(file48.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(file56);
        org.junit.Assert.assertEquals(file56.getParent(), "hi!");
        org.junit.Assert.assertEquals(file56.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(file60);
        org.junit.Assert.assertEquals(file60.getParent(), "hi!");
        org.junit.Assert.assertEquals(file60.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(lineIterator64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
    }

    @Test
    public void test165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test165");
        java.io.File file0 = null;
        boolean boolean1 = org.apache.commons.io.FileUtils.deleteQuietly(file0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test166");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.Class<?> wildcardClass4 = strArray2.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test167");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean12 = org.apache.commons.io.FileUtils.deleteQuietly(file7);
        org.apache.commons.io.FileUtils.writeStringToFile(file7, "");
        org.apache.commons.io.FileUtils.forceMkdirParent(file7);
        java.lang.String[] strArray18 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file19 = org.apache.commons.io.FileUtils.getFile(strArray18);
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file23 = org.apache.commons.io.FileUtils.getFile(strArray22);
        boolean boolean24 = org.apache.commons.io.FileUtils.isFileOlder(file19, file23);
        boolean boolean26 = org.apache.commons.io.FileUtils.waitFor(file23, (int) '4');
        java.lang.String[] strArray29 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file30 = org.apache.commons.io.FileUtils.getFile(strArray29);
        boolean boolean32 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file23, file30, "");
        boolean boolean34 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file7, file23, "hi!");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "-1 bytes", "hi!", true);
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: hi!");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(file19);
        org.junit.Assert.assertEquals(file19.getParent(), "hi!");
        org.junit.Assert.assertEquals(file19.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(file23);
        org.junit.Assert.assertEquals(file23.getParent(), "hi!");
        org.junit.Assert.assertEquals(file23.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(file30);
        org.junit.Assert.assertEquals(file30.getParent(), "hi!");
        org.junit.Assert.assertEquals(file30.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
    }

    @Test
    public void test168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test168");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray4 = new java.lang.String[] {};
        java.io.File file5 = org.apache.commons.io.FileUtils.getFile(strArray4);
        java.io.File file6 = org.apache.commons.io.FileUtils.getFile(file3, strArray4);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigInteger bigInteger7 = org.apache.commons.io.FileUtils.sizeOfDirectoryAsBigInteger(file3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: hi!\\hi! is not a directory");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNull(file5);
        org.junit.Assert.assertNotNull(file6);
        org.junit.Assert.assertEquals(file6.getParent(), "hi!");
        org.junit.Assert.assertEquals(file6.toString(), "hi!\\hi!");
    }

    @Test
    public void test169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test169");
        java.io.File file0 = null;
        java.lang.String[] strArray3 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file4 = org.apache.commons.io.FileUtils.getFile(strArray3);
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file8 = org.apache.commons.io.FileUtils.getFile(strArray7);
        boolean boolean9 = org.apache.commons.io.FileUtils.isFileOlder(file4, file8);
        boolean boolean11 = org.apache.commons.io.FileUtils.waitFor(file8, (int) '4');
        java.lang.String[] strArray14 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file15 = org.apache.commons.io.FileUtils.getFile(strArray14);
        boolean boolean17 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file8, file15, "");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.copyDirectory(file0, file15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: source");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(file4);
        org.junit.Assert.assertEquals(file4.getParent(), "hi!");
        org.junit.Assert.assertEquals(file4.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(file8);
        org.junit.Assert.assertEquals(file8.getParent(), "hi!");
        org.junit.Assert.assertEquals(file8.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(file15);
        org.junit.Assert.assertEquals(file15.getParent(), "hi!");
        org.junit.Assert.assertEquals(file15.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test170");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        java.lang.String str9 = org.apache.commons.io.FileUtils.readFileToString(file3);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter10 = null;
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter11 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Collection<java.io.File> fileCollection12 = org.apache.commons.io.FileUtils.listFiles(file3, iOFileFilter10, iOFileFilter11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'directory' is not a directory: hi!\\hi!");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
    }

    @Test
    public void test171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test171");
        java.net.URL uRL0 = null;
        java.net.URL[] uRLArray1 = new java.net.URL[] { uRL0 };
        java.io.File[] fileArray2 = org.apache.commons.io.FileUtils.toFiles(uRLArray1);
        // The following exception was thrown during execution in test generation
        try {
            java.net.URL[] uRLArray3 = org.apache.commons.io.FileUtils.toURLs(fileArray2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.File.toURI()\" because \"files[i]\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(uRLArray1);
        org.junit.Assert.assertNotNull(fileArray2);
    }

    @Test
    public void test172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test172");
        java.io.File file0 = null;
        java.lang.String[] strArray6 = new java.lang.String[] { "1 GB", "1048576 EB", "hi!", "1048576 EB", "C:\\Users\\Mathieu" };
        java.util.ArrayList<java.lang.String> strList7 = new java.util.ArrayList<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList7, strArray6);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.writeLines(file0, (java.util.Collection<java.lang.String>) strList7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.File.exists()\" because \"file\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test173");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean12 = org.apache.commons.io.FileUtils.deleteQuietly(file7);
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset16 = null;
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "", charset16, true);
        byte[] byteArray19 = org.apache.commons.io.FileUtils.readFileToByteArray(file7);
        boolean boolean21 = org.apache.commons.io.FileUtils.waitFor(file7, (int) 'a');
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file25 = org.apache.commons.io.FileUtils.getFile(strArray24);
        java.lang.String[] strArray28 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file29 = org.apache.commons.io.FileUtils.getFile(strArray28);
        boolean boolean30 = org.apache.commons.io.FileUtils.isFileOlder(file25, file29);
        boolean boolean32 = org.apache.commons.io.FileUtils.waitFor(file29, (int) '4');
        java.lang.String[] strArray35 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file36 = org.apache.commons.io.FileUtils.getFile(strArray35);
        boolean boolean38 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file29, file36, "");
        org.apache.commons.io.LineIterator lineIterator39 = org.apache.commons.io.FileUtils.lineIterator(file29);
        org.apache.commons.io.FileUtils.writeStringToFile(file29, "C:\\Users\\Mathieu\\AppData\\Local\\Temp\\", false);
        boolean boolean44 = org.apache.commons.io.FileUtils.isFileOlder(file29, (long) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.copyDirectory(file7, file29);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Source 'hi!\\hi!' exists but is not a directory");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[104, 105, 33]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(file25);
        org.junit.Assert.assertEquals(file25.getParent(), "hi!");
        org.junit.Assert.assertEquals(file25.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(file29);
        org.junit.Assert.assertEquals(file29.getParent(), "hi!");
        org.junit.Assert.assertEquals(file29.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(file36);
        org.junit.Assert.assertEquals(file36.getParent(), "hi!");
        org.junit.Assert.assertEquals(file36.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(lineIterator39);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test174");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        boolean boolean5 = org.apache.commons.io.FileUtils.waitFor(file3, 100);
        java.util.Date date6 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean7 = org.apache.commons.io.FileUtils.isFileOlder(file3, date6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No specified date");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test175");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        java.nio.charset.Charset charset11 = null;
        java.lang.String str12 = org.apache.commons.io.FileUtils.readFileToString(file7, charset11);
        java.lang.String[] strArray15 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file16 = org.apache.commons.io.FileUtils.getFile(strArray15);
        java.lang.String[] strArray19 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file20 = org.apache.commons.io.FileUtils.getFile(strArray19);
        boolean boolean21 = org.apache.commons.io.FileUtils.isFileOlder(file16, file20);
        java.lang.String str22 = org.apache.commons.io.FileUtils.readFileToString(file16);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.copyToDirectory(file7, file16);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Destination 'hi!\\hi!' is not a directory");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "C:\\Users\\Mathieu\\AppData\\Local\\Temp\\" + "'", str12, "C:\\Users\\Mathieu\\AppData\\Local\\Temp\\");
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(file16);
        org.junit.Assert.assertEquals(file16.getParent(), "hi!");
        org.junit.Assert.assertEquals(file16.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(file20);
        org.junit.Assert.assertEquals(file20.getParent(), "hi!");
        org.junit.Assert.assertEquals(file20.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "C:\\Users\\Mathieu\\AppData\\Local\\Temp\\" + "'", str22, "C:\\Users\\Mathieu\\AppData\\Local\\Temp\\");
    }

    @Test
    public void test176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test176");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean12 = org.apache.commons.io.FileUtils.deleteQuietly(file7);
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset16 = null;
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "", charset16, true);
        java.nio.charset.Charset charset20 = null;
        org.apache.commons.io.FileUtils.writeStringToFile(file7, "", charset20, false);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.forceMkdir(file7);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: File hi!\\hi! exists and is not a directory. Unable to create directory.");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test177");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray4 = new java.lang.String[] {};
        java.io.File file5 = org.apache.commons.io.FileUtils.getFile(strArray4);
        java.io.File file6 = org.apache.commons.io.FileUtils.getFile(file3, strArray4);
        java.lang.String[] strArray9 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file10 = org.apache.commons.io.FileUtils.getFile(strArray9);
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file14 = org.apache.commons.io.FileUtils.getFile(strArray13);
        boolean boolean15 = org.apache.commons.io.FileUtils.isFileOlder(file10, file14);
        boolean boolean17 = org.apache.commons.io.FileUtils.waitFor(file14, (int) '4');
        org.apache.commons.io.LineIterator lineIterator18 = org.apache.commons.io.FileUtils.lineIterator(file14);
        boolean boolean20 = org.apache.commons.io.FileUtils.isFileOlder(file14, (-1L));
        java.io.FileOutputStream fileOutputStream22 = org.apache.commons.io.FileUtils.openOutputStream(file14, false);
        long long23 = org.apache.commons.io.FileUtils.copyFile(file3, (java.io.OutputStream) fileOutputStream22);
        java.lang.String[] strArray26 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file27 = org.apache.commons.io.FileUtils.getFile(strArray26);
        java.lang.String[] strArray30 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file31 = org.apache.commons.io.FileUtils.getFile(strArray30);
        boolean boolean32 = org.apache.commons.io.FileUtils.isFileOlder(file27, file31);
        boolean boolean34 = org.apache.commons.io.FileUtils.waitFor(file31, (int) '4');
        org.apache.commons.io.LineIterator lineIterator35 = org.apache.commons.io.FileUtils.lineIterator(file31);
        boolean boolean36 = org.apache.commons.io.FileUtils.deleteQuietly(file31);
        org.apache.commons.io.FileUtils.write(file31, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset40 = null;
        org.apache.commons.io.FileUtils.write(file31, (java.lang.CharSequence) "", charset40, true);
        java.nio.charset.Charset charset44 = null;
        org.apache.commons.io.FileUtils.writeStringToFile(file31, "", charset44, false);
        long long47 = org.apache.commons.io.FileUtils.sizeOf(file31);
        org.apache.commons.io.FileUtils.writeStringToFile(file31, "");
        java.nio.charset.Charset charset50 = null;
        java.util.List<java.lang.String> strList51 = org.apache.commons.io.FileUtils.readLines(file31, charset50);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.moveDirectoryToDirectory(file3, file31, true);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Destination 'hi!\\hi!' is not a directory");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNull(file5);
        org.junit.Assert.assertNotNull(file6);
        org.junit.Assert.assertEquals(file6.getParent(), "hi!");
        org.junit.Assert.assertEquals(file6.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(file10);
        org.junit.Assert.assertEquals(file10.getParent(), "hi!");
        org.junit.Assert.assertEquals(file10.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(file14);
        org.junit.Assert.assertEquals(file14.getParent(), "hi!");
        org.junit.Assert.assertEquals(file14.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(lineIterator18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(fileOutputStream22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(file27);
        org.junit.Assert.assertEquals(file27.getParent(), "hi!");
        org.junit.Assert.assertEquals(file27.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(file31);
        org.junit.Assert.assertEquals(file31.getParent(), "hi!");
        org.junit.Assert.assertEquals(file31.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(lineIterator35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertNotNull(strList51);
    }

    @Test
    public void test178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test178");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        java.lang.String[] strArray14 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file15 = org.apache.commons.io.FileUtils.getFile(strArray14);
        java.lang.String[] strArray18 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file19 = org.apache.commons.io.FileUtils.getFile(strArray18);
        boolean boolean20 = org.apache.commons.io.FileUtils.isFileOlder(file15, file19);
        boolean boolean21 = org.apache.commons.io.FileUtils.deleteQuietly(file19);
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file25 = org.apache.commons.io.FileUtils.getFile(strArray24);
        java.lang.String[] strArray28 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file29 = org.apache.commons.io.FileUtils.getFile(strArray28);
        boolean boolean30 = org.apache.commons.io.FileUtils.isFileOlder(file25, file29);
        boolean boolean32 = org.apache.commons.io.FileUtils.waitFor(file29, (int) '4');
        java.lang.String[] strArray35 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file36 = org.apache.commons.io.FileUtils.getFile(strArray35);
        boolean boolean38 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file29, file36, "");
        org.apache.commons.io.LineIterator lineIterator39 = org.apache.commons.io.FileUtils.lineIterator(file29);
        org.apache.commons.io.FileUtils.writeStringToFile(file29, "C:\\Users\\Mathieu\\AppData\\Local\\Temp\\", false);
        java.nio.charset.Charset charset44 = null;
        org.apache.commons.io.FileUtils.write(file29, (java.lang.CharSequence) "", charset44, true);
        boolean boolean48 = org.apache.commons.io.FileUtils.waitFor(file29, 0);
        boolean boolean49 = org.apache.commons.io.FileUtils.isFileOlder(file19, file29);
        java.lang.String[] strArray52 = new java.lang.String[] { "C:\\Users\\Mathieu\\AppData\\Local\\Temp\\", "" };
        java.util.ArrayList<java.lang.String> strList53 = new java.util.ArrayList<java.lang.String>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList53, strArray52);
        org.apache.commons.io.FileUtils.writeLines(file19, (java.util.Collection<java.lang.String>) strList53);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.writeLines(file7, "C:\\Users\\Mathieu\\AppData\\Local\\Temp\\", (java.util.Collection<java.lang.String>) strList53, false);
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: C:\\Users\\Mathieu\\AppData\\Local\\Temp\\");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(file15);
        org.junit.Assert.assertEquals(file15.getParent(), "hi!");
        org.junit.Assert.assertEquals(file15.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(file19);
        org.junit.Assert.assertEquals(file19.getParent(), "hi!");
        org.junit.Assert.assertEquals(file19.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(file25);
        org.junit.Assert.assertEquals(file25.getParent(), "hi!");
        org.junit.Assert.assertEquals(file25.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(file29);
        org.junit.Assert.assertEquals(file29.getParent(), "hi!");
        org.junit.Assert.assertEquals(file29.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(file36);
        org.junit.Assert.assertEquals(file36.getParent(), "hi!");
        org.junit.Assert.assertEquals(file36.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(lineIterator39);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
    }

    @Test
    public void test179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test179");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean9 = org.apache.commons.io.FileUtils.deleteQuietly(file7);
        java.lang.String[] strArray12 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file13 = org.apache.commons.io.FileUtils.getFile(strArray12);
        java.lang.String[] strArray16 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file17 = org.apache.commons.io.FileUtils.getFile(strArray16);
        boolean boolean18 = org.apache.commons.io.FileUtils.isFileOlder(file13, file17);
        boolean boolean20 = org.apache.commons.io.FileUtils.waitFor(file17, (int) '4');
        java.lang.String[] strArray23 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file24 = org.apache.commons.io.FileUtils.getFile(strArray23);
        boolean boolean26 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file17, file24, "");
        org.apache.commons.io.LineIterator lineIterator27 = org.apache.commons.io.FileUtils.lineIterator(file17);
        org.apache.commons.io.FileUtils.writeStringToFile(file17, "C:\\Users\\Mathieu\\AppData\\Local\\Temp\\", false);
        boolean boolean32 = org.apache.commons.io.FileUtils.isFileOlder(file17, (long) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.copyDirectoryToDirectory(file7, file17);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Source 'hi!\\hi!' is not a directory");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(file13);
        org.junit.Assert.assertEquals(file13.getParent(), "hi!");
        org.junit.Assert.assertEquals(file13.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(file17);
        org.junit.Assert.assertEquals(file17.getParent(), "hi!");
        org.junit.Assert.assertEquals(file17.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(file24);
        org.junit.Assert.assertEquals(file24.getParent(), "hi!");
        org.junit.Assert.assertEquals(file24.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(lineIterator27);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test180");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        java.lang.String str9 = org.apache.commons.io.FileUtils.readFileToString(file3);
        org.apache.commons.io.FileUtils.writeStringToFile(file3, "", false);
        java.lang.String[] strArray15 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file16 = org.apache.commons.io.FileUtils.getFile(strArray15);
        java.lang.String[] strArray19 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file20 = org.apache.commons.io.FileUtils.getFile(strArray19);
        boolean boolean21 = org.apache.commons.io.FileUtils.isFileOlder(file16, file20);
        boolean boolean23 = org.apache.commons.io.FileUtils.waitFor(file20, (int) '4');
        org.apache.commons.io.LineIterator lineIterator24 = org.apache.commons.io.FileUtils.lineIterator(file20);
        boolean boolean26 = org.apache.commons.io.FileUtils.isFileOlder(file20, (-1L));
        byte[] byteArray27 = new byte[] {};
        org.apache.commons.io.FileUtils.writeByteArrayToFile(file20, byteArray27);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.writeByteArrayToFile(file3, byteArray27, 0, 100, true);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "C:\\Users\\Mathieu\\AppData\\Local\\Temp\\" + "'", str9, "C:\\Users\\Mathieu\\AppData\\Local\\Temp\\");
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(file16);
        org.junit.Assert.assertEquals(file16.getParent(), "hi!");
        org.junit.Assert.assertEquals(file16.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(file20);
        org.junit.Assert.assertEquals(file20.getParent(), "hi!");
        org.junit.Assert.assertEquals(file20.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(lineIterator24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
    }

    @Test
    public void test181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test181");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file14 = org.apache.commons.io.FileUtils.getFile(strArray13);
        boolean boolean16 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file7, file14, "");
        org.apache.commons.io.LineIterator lineIterator17 = org.apache.commons.io.FileUtils.lineIterator(file7);
        org.apache.commons.io.FileUtils.writeStringToFile(file7, "C:\\Users\\Mathieu\\AppData\\Local\\Temp\\", false);
        java.lang.String[] strArray23 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file24 = org.apache.commons.io.FileUtils.getFile(strArray23);
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file28 = org.apache.commons.io.FileUtils.getFile(strArray27);
        boolean boolean29 = org.apache.commons.io.FileUtils.isFileOlder(file24, file28);
        java.lang.String str30 = org.apache.commons.io.FileUtils.readFileToString(file24);
        java.lang.String[] strArray33 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file34 = org.apache.commons.io.FileUtils.getFile(strArray33);
        java.io.File file35 = org.apache.commons.io.FileUtils.getFile(file24, strArray33);
        boolean boolean37 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file7, file35, "-1 bytes");
        // The following exception was thrown during execution in test generation
        try {
            java.io.FileOutputStream fileOutputStream38 = org.apache.commons.io.FileUtils.openOutputStream(file35);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Directory 'hi!\\hi!\\hi!' could not be created");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(file14);
        org.junit.Assert.assertEquals(file14.getParent(), "hi!");
        org.junit.Assert.assertEquals(file14.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(lineIterator17);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(file24);
        org.junit.Assert.assertEquals(file24.getParent(), "hi!");
        org.junit.Assert.assertEquals(file24.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(file28);
        org.junit.Assert.assertEquals(file28.getParent(), "hi!");
        org.junit.Assert.assertEquals(file28.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "C:\\Users\\Mathieu\\AppData\\Local\\Temp\\" + "'", str30, "C:\\Users\\Mathieu\\AppData\\Local\\Temp\\");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(file34);
        org.junit.Assert.assertEquals(file34.getParent(), "hi!");
        org.junit.Assert.assertEquals(file34.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(file35);
        org.junit.Assert.assertEquals(file35.getParent(), "hi!\\hi!\\hi!");
        org.junit.Assert.assertEquals(file35.toString(), "hi!\\hi!\\hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test182");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean12 = org.apache.commons.io.FileUtils.deleteQuietly(file7);
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset16 = null;
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "", charset16, true);
        java.nio.charset.Charset charset20 = null;
        org.apache.commons.io.FileUtils.writeStringToFile(file7, "", charset20, false);
        long long23 = org.apache.commons.io.FileUtils.sizeOf(file7);
        java.lang.String[] strArray26 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file27 = org.apache.commons.io.FileUtils.getFile(strArray26);
        java.lang.String[] strArray30 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file31 = org.apache.commons.io.FileUtils.getFile(strArray30);
        boolean boolean32 = org.apache.commons.io.FileUtils.isFileOlder(file27, file31);
        boolean boolean34 = org.apache.commons.io.FileUtils.waitFor(file31, (int) '4');
        org.apache.commons.io.LineIterator lineIterator35 = org.apache.commons.io.FileUtils.lineIterator(file31);
        boolean boolean36 = org.apache.commons.io.FileUtils.deleteQuietly(file31);
        org.apache.commons.io.FileUtils.write(file31, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset40 = null;
        org.apache.commons.io.FileUtils.write(file31, (java.lang.CharSequence) "", charset40, true);
        java.nio.charset.Charset charset44 = null;
        org.apache.commons.io.FileUtils.writeStringToFile(file31, "", charset44, false);
        long long47 = org.apache.commons.io.FileUtils.sizeOf(file31);
        org.apache.commons.io.FileUtils.writeStringToFile(file31, "");
        boolean boolean51 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file7, file31, "hi!");
        java.lang.String[] strArray54 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file55 = org.apache.commons.io.FileUtils.getFile(strArray54);
        java.lang.String[] strArray56 = new java.lang.String[] {};
        java.io.File file57 = org.apache.commons.io.FileUtils.getFile(strArray56);
        java.io.File file58 = org.apache.commons.io.FileUtils.getFile(file55, strArray56);
        java.lang.String[] strArray61 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file62 = org.apache.commons.io.FileUtils.getFile(strArray61);
        java.lang.String[] strArray65 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file66 = org.apache.commons.io.FileUtils.getFile(strArray65);
        boolean boolean67 = org.apache.commons.io.FileUtils.isFileOlder(file62, file66);
        boolean boolean69 = org.apache.commons.io.FileUtils.waitFor(file66, (int) '4');
        org.apache.commons.io.LineIterator lineIterator70 = org.apache.commons.io.FileUtils.lineIterator(file66);
        boolean boolean72 = org.apache.commons.io.FileUtils.isFileOlder(file66, (-1L));
        java.io.FileOutputStream fileOutputStream74 = org.apache.commons.io.FileUtils.openOutputStream(file66, false);
        long long75 = org.apache.commons.io.FileUtils.copyFile(file55, (java.io.OutputStream) fileOutputStream74);
        boolean boolean76 = org.apache.commons.io.FileUtils.isFileOlder(file7, file55);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.writeStringToFile(file55, "1 GB", "1 GB");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: 1 GB");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(file27);
        org.junit.Assert.assertEquals(file27.getParent(), "hi!");
        org.junit.Assert.assertEquals(file27.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(file31);
        org.junit.Assert.assertEquals(file31.getParent(), "hi!");
        org.junit.Assert.assertEquals(file31.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(lineIterator35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(file55);
        org.junit.Assert.assertEquals(file55.getParent(), "hi!");
        org.junit.Assert.assertEquals(file55.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNull(file57);
        org.junit.Assert.assertNotNull(file58);
        org.junit.Assert.assertEquals(file58.getParent(), "hi!");
        org.junit.Assert.assertEquals(file58.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(file62);
        org.junit.Assert.assertEquals(file62.getParent(), "hi!");
        org.junit.Assert.assertEquals(file62.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(file66);
        org.junit.Assert.assertEquals(file66.getParent(), "hi!");
        org.junit.Assert.assertEquals(file66.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(lineIterator70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(fileOutputStream74);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 0L + "'", long75 == 0L);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test183");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file14 = org.apache.commons.io.FileUtils.getFile(strArray13);
        boolean boolean16 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file7, file14, "");
        java.io.FileOutputStream fileOutputStream18 = org.apache.commons.io.FileUtils.openOutputStream(file7, false);
        java.lang.String[] strArray21 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file22 = org.apache.commons.io.FileUtils.getFile(strArray21);
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file26 = org.apache.commons.io.FileUtils.getFile(strArray25);
        boolean boolean27 = org.apache.commons.io.FileUtils.isFileOlder(file22, file26);
        boolean boolean29 = org.apache.commons.io.FileUtils.waitFor(file26, (int) '4');
        org.apache.commons.io.LineIterator lineIterator30 = org.apache.commons.io.FileUtils.lineIterator(file26);
        boolean boolean31 = org.apache.commons.io.FileUtils.deleteQuietly(file26);
        org.apache.commons.io.FileUtils.write(file26, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset35 = null;
        org.apache.commons.io.FileUtils.write(file26, (java.lang.CharSequence) "", charset35, true);
        java.nio.charset.Charset charset39 = null;
        org.apache.commons.io.FileUtils.writeStringToFile(file26, "", charset39, false);
        long long42 = org.apache.commons.io.FileUtils.sizeOf(file26);
        java.lang.String[] strArray45 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file46 = org.apache.commons.io.FileUtils.getFile(strArray45);
        java.lang.String[] strArray49 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file50 = org.apache.commons.io.FileUtils.getFile(strArray49);
        boolean boolean51 = org.apache.commons.io.FileUtils.isFileOlder(file46, file50);
        boolean boolean53 = org.apache.commons.io.FileUtils.waitFor(file50, (int) '4');
        org.apache.commons.io.LineIterator lineIterator54 = org.apache.commons.io.FileUtils.lineIterator(file50);
        boolean boolean55 = org.apache.commons.io.FileUtils.deleteQuietly(file50);
        org.apache.commons.io.FileUtils.write(file50, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset59 = null;
        org.apache.commons.io.FileUtils.write(file50, (java.lang.CharSequence) "", charset59, true);
        java.nio.charset.Charset charset63 = null;
        org.apache.commons.io.FileUtils.writeStringToFile(file50, "", charset63, false);
        long long66 = org.apache.commons.io.FileUtils.sizeOf(file50);
        org.apache.commons.io.FileUtils.writeStringToFile(file50, "");
        boolean boolean70 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file26, file50, "hi!");
        boolean boolean72 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file7, file50, "-1 bytes");
        java.nio.charset.Charset charset74 = null;
        org.apache.commons.io.FileUtils.writeStringToFile(file50, "C:\\Users\\Mathieu", charset74, true);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter77 = null;
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter78 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Collection<java.io.File> fileCollection79 = org.apache.commons.io.FileUtils.listFiles(file50, iOFileFilter77, iOFileFilter78);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'directory' is not a directory: hi!\\hi!");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(file14);
        org.junit.Assert.assertEquals(file14.getParent(), "hi!");
        org.junit.Assert.assertEquals(file14.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(fileOutputStream18);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(file22);
        org.junit.Assert.assertEquals(file22.getParent(), "hi!");
        org.junit.Assert.assertEquals(file22.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(file26);
        org.junit.Assert.assertEquals(file26.getParent(), "hi!");
        org.junit.Assert.assertEquals(file26.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(lineIterator30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(file46);
        org.junit.Assert.assertEquals(file46.getParent(), "hi!");
        org.junit.Assert.assertEquals(file46.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(file50);
        org.junit.Assert.assertEquals(file50.getParent(), "hi!");
        org.junit.Assert.assertEquals(file50.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(lineIterator54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 0L + "'", long66 == 0L);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
    }

    @Test
    public void test184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test184");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file14 = org.apache.commons.io.FileUtils.getFile(strArray13);
        boolean boolean16 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file7, file14, "");
        org.apache.commons.io.LineIterator lineIterator17 = org.apache.commons.io.FileUtils.lineIterator(file7);
        org.apache.commons.io.FileUtils.writeStringToFile(file7, "C:\\Users\\Mathieu\\AppData\\Local\\Temp\\", false);
        java.io.File file21 = org.apache.commons.io.FileUtils.getTempDirectory();
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file25 = org.apache.commons.io.FileUtils.getFile(strArray24);
        java.lang.String[] strArray28 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file29 = org.apache.commons.io.FileUtils.getFile(strArray28);
        boolean boolean30 = org.apache.commons.io.FileUtils.isFileOlder(file25, file29);
        boolean boolean32 = org.apache.commons.io.FileUtils.waitFor(file29, (int) '4');
        org.apache.commons.io.LineIterator lineIterator33 = org.apache.commons.io.FileUtils.lineIterator(file29);
        boolean boolean35 = org.apache.commons.io.FileUtils.isFileOlder(file29, (-1L));
        java.nio.charset.Charset charset36 = null;
        java.lang.String str37 = org.apache.commons.io.FileUtils.readFileToString(file29, charset36);
        java.io.FileOutputStream fileOutputStream39 = org.apache.commons.io.FileUtils.openOutputStream(file29, false);
        java.io.FileOutputStream fileOutputStream41 = org.apache.commons.io.FileUtils.openOutputStream(file29, true);
        boolean boolean42 = org.apache.commons.io.FileUtils.isFileOlder(file21, file29);
        java.lang.String[] strArray49 = new java.lang.String[] { "C:\\Users\\Mathieu", "C:\\Users\\Mathieu", "", "1 GB", "hi!", "" };
        java.util.Iterator<java.io.File> fileItor51 = org.apache.commons.io.FileUtils.iterateFiles(file21, strArray49, true);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<java.io.File> fileItor53 = org.apache.commons.io.FileUtils.iterateFiles(file7, strArray49, false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'directory' is not a directory: hi!\\hi!");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(file14);
        org.junit.Assert.assertEquals(file14.getParent(), "hi!");
        org.junit.Assert.assertEquals(file14.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(lineIterator17);
        org.junit.Assert.assertNotNull(file21);
        org.junit.Assert.assertEquals(file21.getParent(), "C:\\Users\\Mathieu\\AppData\\Local");
        org.junit.Assert.assertEquals(file21.toString(), "C:\\Users\\Mathieu\\AppData\\Local\\Temp");
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(file25);
        org.junit.Assert.assertEquals(file25.getParent(), "hi!");
        org.junit.Assert.assertEquals(file25.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(file29);
        org.junit.Assert.assertEquals(file29.getParent(), "hi!");
        org.junit.Assert.assertEquals(file29.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(lineIterator33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "C:\\Users\\Mathieu\\AppData\\Local\\Temp\\" + "'", str37, "C:\\Users\\Mathieu\\AppData\\Local\\Temp\\");
        org.junit.Assert.assertNotNull(fileOutputStream39);
        org.junit.Assert.assertNotNull(fileOutputStream41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(fileItor51);
    }

    @Test
    public void test185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test185");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean9 = org.apache.commons.io.FileUtils.deleteQuietly(file7);
        java.lang.String[] strArray12 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file13 = org.apache.commons.io.FileUtils.getFile(strArray12);
        java.lang.String[] strArray16 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file17 = org.apache.commons.io.FileUtils.getFile(strArray16);
        boolean boolean18 = org.apache.commons.io.FileUtils.isFileOlder(file13, file17);
        boolean boolean20 = org.apache.commons.io.FileUtils.waitFor(file17, (int) '4');
        java.lang.String[] strArray23 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file24 = org.apache.commons.io.FileUtils.getFile(strArray23);
        boolean boolean26 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file17, file24, "");
        org.apache.commons.io.LineIterator lineIterator27 = org.apache.commons.io.FileUtils.lineIterator(file17);
        org.apache.commons.io.FileUtils.writeStringToFile(file17, "C:\\Users\\Mathieu\\AppData\\Local\\Temp\\", false);
        java.nio.charset.Charset charset32 = null;
        org.apache.commons.io.FileUtils.write(file17, (java.lang.CharSequence) "", charset32, true);
        boolean boolean36 = org.apache.commons.io.FileUtils.waitFor(file17, 0);
        boolean boolean37 = org.apache.commons.io.FileUtils.isFileOlder(file7, file17);
        java.lang.String[] strArray40 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file41 = org.apache.commons.io.FileUtils.getFile(strArray40);
        java.io.File file42 = org.apache.commons.io.FileUtils.getFile(strArray40);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<java.io.File> fileItor44 = org.apache.commons.io.FileUtils.iterateFiles(file7, strArray40, false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'directory' is not a directory: hi!\\hi!");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(file13);
        org.junit.Assert.assertEquals(file13.getParent(), "hi!");
        org.junit.Assert.assertEquals(file13.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(file17);
        org.junit.Assert.assertEquals(file17.getParent(), "hi!");
        org.junit.Assert.assertEquals(file17.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(file24);
        org.junit.Assert.assertEquals(file24.getParent(), "hi!");
        org.junit.Assert.assertEquals(file24.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(lineIterator27);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(file41);
        org.junit.Assert.assertEquals(file41.getParent(), "hi!");
        org.junit.Assert.assertEquals(file41.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(file42);
        org.junit.Assert.assertEquals(file42.getParent(), "hi!");
        org.junit.Assert.assertEquals(file42.toString(), "hi!\\hi!");
    }

    @Test
    public void test186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test186");
        java.net.URL uRL0 = null;
        java.lang.String[] strArray3 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file4 = org.apache.commons.io.FileUtils.getFile(strArray3);
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file8 = org.apache.commons.io.FileUtils.getFile(strArray7);
        boolean boolean9 = org.apache.commons.io.FileUtils.isFileOlder(file4, file8);
        java.lang.String str10 = org.apache.commons.io.FileUtils.readFileToString(file4);
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file14 = org.apache.commons.io.FileUtils.getFile(strArray13);
        java.io.File file15 = org.apache.commons.io.FileUtils.getFile(file4, strArray13);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.copyURLToFile(uRL0, file15, (int) (short) 0, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.net.URL.openConnection()\" because \"source\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(file4);
        org.junit.Assert.assertEquals(file4.getParent(), "hi!");
        org.junit.Assert.assertEquals(file4.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(file8);
        org.junit.Assert.assertEquals(file8.getParent(), "hi!");
        org.junit.Assert.assertEquals(file8.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "C:\\Users\\Mathieu\\AppData\\Local\\Temp\\" + "'", str10, "C:\\Users\\Mathieu\\AppData\\Local\\Temp\\");
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(file14);
        org.junit.Assert.assertEquals(file14.getParent(), "hi!");
        org.junit.Assert.assertEquals(file14.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(file15);
        org.junit.Assert.assertEquals(file15.getParent(), "hi!\\hi!\\hi!");
        org.junit.Assert.assertEquals(file15.toString(), "hi!\\hi!\\hi!\\hi!");
    }

    @Test
    public void test187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test187");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean12 = org.apache.commons.io.FileUtils.deleteQuietly(file7);
        org.apache.commons.io.FileUtils.writeStringToFile(file7, "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file18 = org.apache.commons.io.FileUtils.getFile(strArray17);
        java.lang.String[] strArray21 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file22 = org.apache.commons.io.FileUtils.getFile(strArray21);
        boolean boolean23 = org.apache.commons.io.FileUtils.isFileOlder(file18, file22);
        boolean boolean25 = org.apache.commons.io.FileUtils.waitFor(file22, (int) '4');
        java.lang.String[] strArray28 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file29 = org.apache.commons.io.FileUtils.getFile(strArray28);
        boolean boolean31 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file22, file29, "");
        boolean boolean32 = org.apache.commons.io.FileUtils.isFileNewer(file7, file22);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter33 = null;
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter34 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Collection<java.io.File> fileCollection35 = org.apache.commons.io.FileUtils.listFilesAndDirs(file22, iOFileFilter33, iOFileFilter34);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'directory' is not a directory: hi!\\hi!");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(file18);
        org.junit.Assert.assertEquals(file18.getParent(), "hi!");
        org.junit.Assert.assertEquals(file18.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(file22);
        org.junit.Assert.assertEquals(file22.getParent(), "hi!");
        org.junit.Assert.assertEquals(file22.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(file29);
        org.junit.Assert.assertEquals(file29.getParent(), "hi!");
        org.junit.Assert.assertEquals(file29.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test188");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean12 = org.apache.commons.io.FileUtils.deleteQuietly(file7);
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset16 = null;
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "", charset16, true);
        byte[] byteArray19 = org.apache.commons.io.FileUtils.readFileToByteArray(file7);
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file23 = org.apache.commons.io.FileUtils.getFile(strArray22);
        java.lang.String[] strArray26 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file27 = org.apache.commons.io.FileUtils.getFile(strArray26);
        boolean boolean28 = org.apache.commons.io.FileUtils.isFileOlder(file23, file27);
        boolean boolean30 = org.apache.commons.io.FileUtils.waitFor(file27, (int) '4');
        org.apache.commons.io.LineIterator lineIterator31 = org.apache.commons.io.FileUtils.lineIterator(file27);
        boolean boolean32 = org.apache.commons.io.FileUtils.deleteQuietly(file27);
        org.apache.commons.io.FileUtils.write(file27, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset36 = null;
        org.apache.commons.io.FileUtils.write(file27, (java.lang.CharSequence) "", charset36, true);
        java.nio.charset.Charset charset40 = null;
        org.apache.commons.io.FileUtils.writeStringToFile(file27, "", charset40, false);
        boolean boolean43 = org.apache.commons.io.FileUtils.isFileNewer(file7, file27);
        java.lang.String[] strArray46 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file47 = org.apache.commons.io.FileUtils.getFile(strArray46);
        java.lang.String[] strArray50 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file51 = org.apache.commons.io.FileUtils.getFile(strArray50);
        boolean boolean52 = org.apache.commons.io.FileUtils.isFileOlder(file47, file51);
        boolean boolean54 = org.apache.commons.io.FileUtils.waitFor(file51, (int) '4');
        java.lang.String[] strArray57 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file58 = org.apache.commons.io.FileUtils.getFile(strArray57);
        boolean boolean60 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file51, file58, "");
        org.apache.commons.io.LineIterator lineIterator61 = org.apache.commons.io.FileUtils.lineIterator(file51);
        org.apache.commons.io.FileUtils.writeStringToFile(file51, "C:\\Users\\Mathieu\\AppData\\Local\\Temp\\", false);
        java.nio.charset.Charset charset66 = null;
        org.apache.commons.io.FileUtils.write(file51, (java.lang.CharSequence) "", charset66, true);
        java.lang.String[] strArray71 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file72 = org.apache.commons.io.FileUtils.getFile(strArray71);
        java.lang.String[] strArray75 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file76 = org.apache.commons.io.FileUtils.getFile(strArray75);
        boolean boolean77 = org.apache.commons.io.FileUtils.isFileOlder(file72, file76);
        boolean boolean79 = org.apache.commons.io.FileUtils.waitFor(file76, (int) '4');
        org.apache.commons.io.LineIterator lineIterator80 = org.apache.commons.io.FileUtils.lineIterator(file76);
        boolean boolean81 = org.apache.commons.io.FileUtils.deleteQuietly(file76);
        org.apache.commons.io.FileUtils.write(file76, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset85 = null;
        org.apache.commons.io.FileUtils.write(file76, (java.lang.CharSequence) "", charset85, true);
        byte[] byteArray88 = org.apache.commons.io.FileUtils.readFileToByteArray(file76);
        org.apache.commons.io.FileUtils.writeByteArrayToFile(file51, byteArray88);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.writeByteArrayToFile(file27, byteArray88, (int) (short) 0, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[104, 105, 33]");
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(file23);
        org.junit.Assert.assertEquals(file23.getParent(), "hi!");
        org.junit.Assert.assertEquals(file23.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(file27);
        org.junit.Assert.assertEquals(file27.getParent(), "hi!");
        org.junit.Assert.assertEquals(file27.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(lineIterator31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(file47);
        org.junit.Assert.assertEquals(file47.getParent(), "hi!");
        org.junit.Assert.assertEquals(file47.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(file51);
        org.junit.Assert.assertEquals(file51.getParent(), "hi!");
        org.junit.Assert.assertEquals(file51.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(file58);
        org.junit.Assert.assertEquals(file58.getParent(), "hi!");
        org.junit.Assert.assertEquals(file58.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(lineIterator61);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(file72);
        org.junit.Assert.assertEquals(file72.getParent(), "hi!");
        org.junit.Assert.assertEquals(file72.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(file76);
        org.junit.Assert.assertEquals(file76.getParent(), "hi!");
        org.junit.Assert.assertEquals(file76.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(lineIterator80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(byteArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[104, 105, 33]");
    }

    @Test
    public void test189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test189");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean12 = org.apache.commons.io.FileUtils.deleteQuietly(file7);
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset16 = null;
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "", charset16, true);
        java.nio.charset.Charset charset20 = null;
        org.apache.commons.io.FileUtils.writeStringToFile(file7, "", charset20, false);
        long long23 = org.apache.commons.io.FileUtils.sizeOf(file7);
        java.lang.String[] strArray26 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file27 = org.apache.commons.io.FileUtils.getFile(strArray26);
        java.lang.String[] strArray30 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file31 = org.apache.commons.io.FileUtils.getFile(strArray30);
        boolean boolean32 = org.apache.commons.io.FileUtils.isFileOlder(file27, file31);
        boolean boolean34 = org.apache.commons.io.FileUtils.waitFor(file31, (int) '4');
        org.apache.commons.io.LineIterator lineIterator35 = org.apache.commons.io.FileUtils.lineIterator(file31);
        boolean boolean36 = org.apache.commons.io.FileUtils.deleteQuietly(file31);
        org.apache.commons.io.FileUtils.write(file31, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset40 = null;
        org.apache.commons.io.FileUtils.write(file31, (java.lang.CharSequence) "", charset40, true);
        java.nio.charset.Charset charset44 = null;
        org.apache.commons.io.FileUtils.writeStringToFile(file31, "", charset44, false);
        long long47 = org.apache.commons.io.FileUtils.sizeOf(file31);
        org.apache.commons.io.FileUtils.writeStringToFile(file31, "");
        boolean boolean51 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file7, file31, "hi!");
        java.io.FileInputStream fileInputStream52 = org.apache.commons.io.FileUtils.openInputStream(file7);
        java.io.FileOutputStream fileOutputStream54 = org.apache.commons.io.FileUtils.openOutputStream(file7, false);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(file27);
        org.junit.Assert.assertEquals(file27.getParent(), "hi!");
        org.junit.Assert.assertEquals(file27.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(file31);
        org.junit.Assert.assertEquals(file31.getParent(), "hi!");
        org.junit.Assert.assertEquals(file31.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(lineIterator35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(fileInputStream52);
        org.junit.Assert.assertNotNull(fileOutputStream54);
    }

    @Test
    public void test190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test190");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file14 = org.apache.commons.io.FileUtils.getFile(strArray13);
        boolean boolean16 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file7, file14, "");
        org.apache.commons.io.LineIterator lineIterator17 = org.apache.commons.io.FileUtils.lineIterator(file7);
        org.apache.commons.io.FileUtils.writeStringToFile(file7, "C:\\Users\\Mathieu\\AppData\\Local\\Temp\\", false);
        boolean boolean22 = org.apache.commons.io.FileUtils.isFileOlder(file7, (long) (short) 0);
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file26 = org.apache.commons.io.FileUtils.getFile(strArray25);
        java.lang.String[] strArray29 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file30 = org.apache.commons.io.FileUtils.getFile(strArray29);
        boolean boolean31 = org.apache.commons.io.FileUtils.isFileOlder(file26, file30);
        boolean boolean33 = org.apache.commons.io.FileUtils.waitFor(file30, (int) '4');
        org.apache.commons.io.LineIterator lineIterator34 = org.apache.commons.io.FileUtils.lineIterator(file30);
        boolean boolean35 = org.apache.commons.io.FileUtils.deleteQuietly(file30);
        org.apache.commons.io.FileUtils.writeStringToFile(file30, "");
        java.lang.String[] strArray40 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file41 = org.apache.commons.io.FileUtils.getFile(strArray40);
        java.lang.String[] strArray44 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file45 = org.apache.commons.io.FileUtils.getFile(strArray44);
        boolean boolean46 = org.apache.commons.io.FileUtils.isFileOlder(file41, file45);
        boolean boolean48 = org.apache.commons.io.FileUtils.waitFor(file45, (int) '4');
        java.lang.String[] strArray51 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file52 = org.apache.commons.io.FileUtils.getFile(strArray51);
        boolean boolean54 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file45, file52, "");
        boolean boolean55 = org.apache.commons.io.FileUtils.isFileNewer(file30, file45);
        java.io.File file56 = null;
        boolean boolean57 = org.apache.commons.io.FileUtils.contentEquals(file45, file56);
        org.apache.commons.io.FileUtils.touch(file45);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.copyToDirectory(file7, file45);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Destination 'hi!\\hi!' is not a directory");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(file14);
        org.junit.Assert.assertEquals(file14.getParent(), "hi!");
        org.junit.Assert.assertEquals(file14.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(lineIterator17);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(file26);
        org.junit.Assert.assertEquals(file26.getParent(), "hi!");
        org.junit.Assert.assertEquals(file26.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(file30);
        org.junit.Assert.assertEquals(file30.getParent(), "hi!");
        org.junit.Assert.assertEquals(file30.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(lineIterator34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(file41);
        org.junit.Assert.assertEquals(file41.getParent(), "hi!");
        org.junit.Assert.assertEquals(file41.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(file45);
        org.junit.Assert.assertEquals(file45.getParent(), "hi!");
        org.junit.Assert.assertEquals(file45.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(file52);
        org.junit.Assert.assertEquals(file52.getParent(), "hi!");
        org.junit.Assert.assertEquals(file52.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test191");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean9 = org.apache.commons.io.FileUtils.deleteQuietly(file7);
        java.lang.String[] strArray12 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file13 = org.apache.commons.io.FileUtils.getFile(strArray12);
        java.lang.String[] strArray16 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file17 = org.apache.commons.io.FileUtils.getFile(strArray16);
        boolean boolean18 = org.apache.commons.io.FileUtils.isFileOlder(file13, file17);
        boolean boolean20 = org.apache.commons.io.FileUtils.waitFor(file17, (int) '4');
        java.lang.String[] strArray23 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file24 = org.apache.commons.io.FileUtils.getFile(strArray23);
        boolean boolean26 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file17, file24, "");
        org.apache.commons.io.LineIterator lineIterator27 = org.apache.commons.io.FileUtils.lineIterator(file17);
        org.apache.commons.io.FileUtils.writeStringToFile(file17, "C:\\Users\\Mathieu\\AppData\\Local\\Temp\\", false);
        java.nio.charset.Charset charset32 = null;
        org.apache.commons.io.FileUtils.write(file17, (java.lang.CharSequence) "", charset32, true);
        boolean boolean36 = org.apache.commons.io.FileUtils.waitFor(file17, 0);
        boolean boolean37 = org.apache.commons.io.FileUtils.isFileOlder(file7, file17);
        java.lang.Class<?> wildcardClass38 = file17.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(file13);
        org.junit.Assert.assertEquals(file13.getParent(), "hi!");
        org.junit.Assert.assertEquals(file13.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(file17);
        org.junit.Assert.assertEquals(file17.getParent(), "hi!");
        org.junit.Assert.assertEquals(file17.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(file24);
        org.junit.Assert.assertEquals(file24.getParent(), "hi!");
        org.junit.Assert.assertEquals(file24.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(lineIterator27);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test192");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        java.lang.String[] strArray10 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file11 = org.apache.commons.io.FileUtils.getFile(strArray10);
        boolean boolean12 = org.apache.commons.io.FileUtils.isFileOlder(file7, file11);
        boolean boolean14 = org.apache.commons.io.FileUtils.waitFor(file11, (int) '4');
        org.apache.commons.io.LineIterator lineIterator15 = org.apache.commons.io.FileUtils.lineIterator(file11);
        boolean boolean16 = org.apache.commons.io.FileUtils.deleteQuietly(file11);
        org.apache.commons.io.FileUtils.write(file11, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset20 = null;
        org.apache.commons.io.FileUtils.write(file11, (java.lang.CharSequence) "", charset20, true);
        boolean boolean23 = org.apache.commons.io.FileUtils.contentEquals(file3, file11);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.forceDelete(file11);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Unable to delete file: hi!\\hi!");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(file11);
        org.junit.Assert.assertEquals(file11.getParent(), "hi!");
        org.junit.Assert.assertEquals(file11.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(lineIterator15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
    }

    @Test
    public void test193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test193");
        java.lang.Iterable<java.io.File> fileIterable0 = null;
        java.lang.String[] strArray3 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file4 = org.apache.commons.io.FileUtils.getFile(strArray3);
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file8 = org.apache.commons.io.FileUtils.getFile(strArray7);
        boolean boolean9 = org.apache.commons.io.FileUtils.isFileOlder(file4, file8);
        boolean boolean11 = org.apache.commons.io.FileUtils.waitFor(file8, (int) '4');
        java.lang.String[] strArray14 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file15 = org.apache.commons.io.FileUtils.getFile(strArray14);
        boolean boolean17 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file8, file15, "");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.copyToDirectory(fileIterable0, file8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: sourceIterable");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(file4);
        org.junit.Assert.assertEquals(file4.getParent(), "hi!");
        org.junit.Assert.assertEquals(file4.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(file8);
        org.junit.Assert.assertEquals(file8.getParent(), "hi!");
        org.junit.Assert.assertEquals(file8.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(file15);
        org.junit.Assert.assertEquals(file15.getParent(), "hi!");
        org.junit.Assert.assertEquals(file15.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test194");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean12 = org.apache.commons.io.FileUtils.deleteQuietly(file7);
        org.apache.commons.io.FileUtils.writeStringToFile(file7, "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file18 = org.apache.commons.io.FileUtils.getFile(strArray17);
        java.lang.String[] strArray21 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file22 = org.apache.commons.io.FileUtils.getFile(strArray21);
        boolean boolean23 = org.apache.commons.io.FileUtils.isFileOlder(file18, file22);
        boolean boolean25 = org.apache.commons.io.FileUtils.waitFor(file22, (int) '4');
        java.lang.String[] strArray28 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file29 = org.apache.commons.io.FileUtils.getFile(strArray28);
        boolean boolean31 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file22, file29, "");
        boolean boolean32 = org.apache.commons.io.FileUtils.isFileNewer(file7, file22);
        java.lang.String[] strArray35 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file36 = org.apache.commons.io.FileUtils.getFile(strArray35);
        java.lang.String[] strArray39 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file40 = org.apache.commons.io.FileUtils.getFile(strArray39);
        boolean boolean41 = org.apache.commons.io.FileUtils.isFileOlder(file36, file40);
        boolean boolean43 = org.apache.commons.io.FileUtils.waitFor(file40, (int) '4');
        org.apache.commons.io.LineIterator lineIterator44 = org.apache.commons.io.FileUtils.lineIterator(file40);
        boolean boolean45 = org.apache.commons.io.FileUtils.deleteQuietly(file40);
        org.apache.commons.io.FileUtils.write(file40, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset49 = null;
        org.apache.commons.io.FileUtils.write(file40, (java.lang.CharSequence) "", charset49, true);
        java.nio.charset.Charset charset53 = null;
        org.apache.commons.io.FileUtils.writeStringToFile(file40, "", charset53, false);
        long long56 = org.apache.commons.io.FileUtils.sizeOf(file40);
        java.lang.String[] strArray59 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file60 = org.apache.commons.io.FileUtils.getFile(strArray59);
        java.lang.String[] strArray63 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file64 = org.apache.commons.io.FileUtils.getFile(strArray63);
        boolean boolean65 = org.apache.commons.io.FileUtils.isFileOlder(file60, file64);
        boolean boolean67 = org.apache.commons.io.FileUtils.waitFor(file64, (int) '4');
        org.apache.commons.io.LineIterator lineIterator68 = org.apache.commons.io.FileUtils.lineIterator(file64);
        boolean boolean69 = org.apache.commons.io.FileUtils.deleteQuietly(file64);
        org.apache.commons.io.FileUtils.write(file64, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset73 = null;
        org.apache.commons.io.FileUtils.write(file64, (java.lang.CharSequence) "", charset73, true);
        java.nio.charset.Charset charset77 = null;
        org.apache.commons.io.FileUtils.writeStringToFile(file64, "", charset77, false);
        long long80 = org.apache.commons.io.FileUtils.sizeOf(file64);
        org.apache.commons.io.FileUtils.writeStringToFile(file64, "");
        boolean boolean84 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file40, file64, "hi!");
        org.apache.commons.io.FileUtils.writeStringToFile(file64, "", true);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.copyDirectoryToDirectory(file7, file64);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Source 'hi!\\hi!' is not a directory");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(file18);
        org.junit.Assert.assertEquals(file18.getParent(), "hi!");
        org.junit.Assert.assertEquals(file18.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(file22);
        org.junit.Assert.assertEquals(file22.getParent(), "hi!");
        org.junit.Assert.assertEquals(file22.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(file29);
        org.junit.Assert.assertEquals(file29.getParent(), "hi!");
        org.junit.Assert.assertEquals(file29.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(file36);
        org.junit.Assert.assertEquals(file36.getParent(), "hi!");
        org.junit.Assert.assertEquals(file36.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(file40);
        org.junit.Assert.assertEquals(file40.getParent(), "hi!");
        org.junit.Assert.assertEquals(file40.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(lineIterator44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(file60);
        org.junit.Assert.assertEquals(file60.getParent(), "hi!");
        org.junit.Assert.assertEquals(file60.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(file64);
        org.junit.Assert.assertEquals(file64.getParent(), "hi!");
        org.junit.Assert.assertEquals(file64.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(lineIterator68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 0L + "'", long80 == 0L);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
    }

    @Test
    public void test195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test195");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean13 = org.apache.commons.io.FileUtils.isFileOlder(file7, (-1L));
        long long14 = org.apache.commons.io.FileUtils.sizeOf(file7);
        java.io.File file15 = org.apache.commons.io.FileUtils.getUserDirectory();
        org.apache.commons.io.FileUtils.copyFileToDirectory(file7, file15, true);
        java.util.Date date18 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean19 = org.apache.commons.io.FileUtils.isFileOlder(file7, date18);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No specified date");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(file15);
        org.junit.Assert.assertEquals(file15.getParent(), "C:\\Users");
        org.junit.Assert.assertEquals(file15.toString(), "C:\\Users\\Mathieu");
    }

    @Test
    public void test196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test196");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean12 = org.apache.commons.io.FileUtils.deleteQuietly(file7);
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset16 = null;
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "", charset16, true);
        java.nio.charset.Charset charset20 = null;
        org.apache.commons.io.FileUtils.writeStringToFile(file7, "", charset20, false);
        long long23 = org.apache.commons.io.FileUtils.sizeOf(file7);
        java.lang.String[] strArray26 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file27 = org.apache.commons.io.FileUtils.getFile(strArray26);
        java.lang.String[] strArray30 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file31 = org.apache.commons.io.FileUtils.getFile(strArray30);
        boolean boolean32 = org.apache.commons.io.FileUtils.isFileOlder(file27, file31);
        boolean boolean34 = org.apache.commons.io.FileUtils.waitFor(file31, (int) '4');
        org.apache.commons.io.LineIterator lineIterator35 = org.apache.commons.io.FileUtils.lineIterator(file31);
        boolean boolean36 = org.apache.commons.io.FileUtils.deleteQuietly(file31);
        org.apache.commons.io.FileUtils.write(file31, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset40 = null;
        org.apache.commons.io.FileUtils.write(file31, (java.lang.CharSequence) "", charset40, true);
        java.nio.charset.Charset charset44 = null;
        org.apache.commons.io.FileUtils.writeStringToFile(file31, "", charset44, false);
        long long47 = org.apache.commons.io.FileUtils.sizeOf(file31);
        org.apache.commons.io.FileUtils.writeStringToFile(file31, "");
        boolean boolean51 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file7, file31, "hi!");
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigInteger bigInteger52 = org.apache.commons.io.FileUtils.sizeOfDirectoryAsBigInteger(file31);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: hi!\\hi! is not a directory");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(file27);
        org.junit.Assert.assertEquals(file27.getParent(), "hi!");
        org.junit.Assert.assertEquals(file27.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(file31);
        org.junit.Assert.assertEquals(file31.getParent(), "hi!");
        org.junit.Assert.assertEquals(file31.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(lineIterator35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
    }

    @Test
    @Disabled
    public void test197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test197");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean13 = org.apache.commons.io.FileUtils.isFileOlder(file7, (-1L));
        java.nio.charset.Charset charset14 = null;
        java.lang.String str15 = org.apache.commons.io.FileUtils.readFileToString(file7, charset14);
        org.apache.commons.io.FileUtils.writeStringToFile(file7, "hi!", true);
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file23 = org.apache.commons.io.FileUtils.getFile(strArray22);
        java.lang.String[] strArray26 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file27 = org.apache.commons.io.FileUtils.getFile(strArray26);
        boolean boolean28 = org.apache.commons.io.FileUtils.isFileOlder(file23, file27);
        boolean boolean30 = org.apache.commons.io.FileUtils.waitFor(file27, (int) '4');
        org.apache.commons.io.LineIterator lineIterator31 = org.apache.commons.io.FileUtils.lineIterator(file27);
        boolean boolean32 = org.apache.commons.io.FileUtils.deleteQuietly(file27);
        org.apache.commons.io.FileUtils.write(file27, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset36 = null;
        org.apache.commons.io.FileUtils.write(file27, (java.lang.CharSequence) "", charset36, true);
        java.nio.charset.Charset charset40 = null;
        org.apache.commons.io.FileUtils.writeStringToFile(file27, "", charset40, false);
        long long43 = org.apache.commons.io.FileUtils.sizeOf(file27);
        org.apache.commons.io.FileUtils.writeStringToFile(file27, "");
        java.nio.charset.Charset charset46 = null;
        java.util.List<java.lang.String> strList47 = org.apache.commons.io.FileUtils.readLines(file27, charset46);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.writeLines(file7, "1048576 EB", (java.util.Collection<java.lang.String>) strList47, "C:\\Users\\Mathieu\\AppData\\Local\\Temp\\");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: 1048576 EB");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(file23);
        org.junit.Assert.assertEquals(file23.getParent(), "hi!");
        org.junit.Assert.assertEquals(file23.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(file27);
        org.junit.Assert.assertEquals(file27.getParent(), "hi!");
        org.junit.Assert.assertEquals(file27.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(lineIterator31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertNotNull(strList47);
    }

    @Test
    public void test198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test198");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        java.lang.String[] strArray11 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file12 = org.apache.commons.io.FileUtils.getFile(strArray11);
        java.lang.String[] strArray15 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file16 = org.apache.commons.io.FileUtils.getFile(strArray15);
        boolean boolean17 = org.apache.commons.io.FileUtils.isFileOlder(file12, file16);
        boolean boolean19 = org.apache.commons.io.FileUtils.waitFor(file16, (int) '4');
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file23 = org.apache.commons.io.FileUtils.getFile(strArray22);
        boolean boolean25 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file16, file23, "");
        java.io.FileOutputStream fileOutputStream27 = org.apache.commons.io.FileUtils.openOutputStream(file16, false);
        java.lang.String[] strArray30 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file31 = org.apache.commons.io.FileUtils.getFile(strArray30);
        java.lang.String[] strArray34 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file35 = org.apache.commons.io.FileUtils.getFile(strArray34);
        boolean boolean36 = org.apache.commons.io.FileUtils.isFileOlder(file31, file35);
        boolean boolean38 = org.apache.commons.io.FileUtils.waitFor(file35, (int) '4');
        org.apache.commons.io.LineIterator lineIterator39 = org.apache.commons.io.FileUtils.lineIterator(file35);
        boolean boolean40 = org.apache.commons.io.FileUtils.deleteQuietly(file35);
        org.apache.commons.io.FileUtils.write(file35, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset44 = null;
        org.apache.commons.io.FileUtils.write(file35, (java.lang.CharSequence) "", charset44, true);
        java.nio.charset.Charset charset48 = null;
        org.apache.commons.io.FileUtils.writeStringToFile(file35, "", charset48, false);
        long long51 = org.apache.commons.io.FileUtils.sizeOf(file35);
        java.lang.String[] strArray54 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file55 = org.apache.commons.io.FileUtils.getFile(strArray54);
        java.lang.String[] strArray58 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file59 = org.apache.commons.io.FileUtils.getFile(strArray58);
        boolean boolean60 = org.apache.commons.io.FileUtils.isFileOlder(file55, file59);
        boolean boolean62 = org.apache.commons.io.FileUtils.waitFor(file59, (int) '4');
        org.apache.commons.io.LineIterator lineIterator63 = org.apache.commons.io.FileUtils.lineIterator(file59);
        boolean boolean64 = org.apache.commons.io.FileUtils.deleteQuietly(file59);
        org.apache.commons.io.FileUtils.write(file59, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset68 = null;
        org.apache.commons.io.FileUtils.write(file59, (java.lang.CharSequence) "", charset68, true);
        java.nio.charset.Charset charset72 = null;
        org.apache.commons.io.FileUtils.writeStringToFile(file59, "", charset72, false);
        long long75 = org.apache.commons.io.FileUtils.sizeOf(file59);
        org.apache.commons.io.FileUtils.writeStringToFile(file59, "");
        boolean boolean79 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file35, file59, "hi!");
        boolean boolean81 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file16, file59, "-1 bytes");
        java.nio.charset.Charset charset83 = null;
        org.apache.commons.io.FileUtils.writeStringToFile(file59, "C:\\Users\\Mathieu", charset83, true);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.moveDirectoryToDirectory(file7, file59, false);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Destination 'hi!\\hi!' is not a directory");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(file12);
        org.junit.Assert.assertEquals(file12.getParent(), "hi!");
        org.junit.Assert.assertEquals(file12.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(file16);
        org.junit.Assert.assertEquals(file16.getParent(), "hi!");
        org.junit.Assert.assertEquals(file16.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(file23);
        org.junit.Assert.assertEquals(file23.getParent(), "hi!");
        org.junit.Assert.assertEquals(file23.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(fileOutputStream27);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(file31);
        org.junit.Assert.assertEquals(file31.getParent(), "hi!");
        org.junit.Assert.assertEquals(file31.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(file35);
        org.junit.Assert.assertEquals(file35.getParent(), "hi!");
        org.junit.Assert.assertEquals(file35.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(lineIterator39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(file55);
        org.junit.Assert.assertEquals(file55.getParent(), "hi!");
        org.junit.Assert.assertEquals(file55.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(file59);
        org.junit.Assert.assertEquals(file59.getParent(), "hi!");
        org.junit.Assert.assertEquals(file59.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(lineIterator63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 0L + "'", long75 == 0L);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
    }

    @Test
    public void test199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test199");
        java.io.File file0 = null;
        java.nio.charset.Charset charset1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.String> strList2 = org.apache.commons.io.FileUtils.readLines(file0, charset1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.File.exists()\" because \"file\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test200");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean12 = org.apache.commons.io.FileUtils.deleteQuietly(file7);
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset16 = null;
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "", charset16, true);
        java.nio.charset.Charset charset19 = null;
        java.lang.String str20 = org.apache.commons.io.FileUtils.readFileToString(file7, charset19);
        java.util.Date date21 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean22 = org.apache.commons.io.FileUtils.isFileNewer(file7, date21);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No specified date");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
    }

    @Test
    public void test201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test201");
        java.lang.String str1 = org.apache.commons.io.FileUtils.byteCountToDisplaySize((long) '#');
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "35 bytes" + "'", str1, "35 bytes");
    }

    @Test
    public void test202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test202");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file14 = org.apache.commons.io.FileUtils.getFile(strArray13);
        boolean boolean16 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file7, file14, "");
        java.io.FileOutputStream fileOutputStream18 = org.apache.commons.io.FileUtils.openOutputStream(file7, false);
        java.util.zip.Checksum checksum19 = null;
        java.util.zip.Checksum checksum20 = org.apache.commons.io.FileUtils.checksum(file7, checksum19);
        java.lang.String[] strArray23 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file24 = org.apache.commons.io.FileUtils.getFile(strArray23);
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file28 = org.apache.commons.io.FileUtils.getFile(strArray27);
        boolean boolean29 = org.apache.commons.io.FileUtils.isFileOlder(file24, file28);
        boolean boolean31 = org.apache.commons.io.FileUtils.waitFor(file28, (int) '4');
        org.apache.commons.io.LineIterator lineIterator32 = org.apache.commons.io.FileUtils.lineIterator(file28);
        boolean boolean33 = org.apache.commons.io.FileUtils.deleteQuietly(file28);
        org.apache.commons.io.FileUtils.writeStringToFile(file28, "");
        java.lang.String[] strArray38 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file39 = org.apache.commons.io.FileUtils.getFile(strArray38);
        java.lang.String[] strArray42 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file43 = org.apache.commons.io.FileUtils.getFile(strArray42);
        boolean boolean44 = org.apache.commons.io.FileUtils.isFileOlder(file39, file43);
        boolean boolean46 = org.apache.commons.io.FileUtils.waitFor(file43, (int) '4');
        java.lang.String[] strArray49 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file50 = org.apache.commons.io.FileUtils.getFile(strArray49);
        boolean boolean52 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file43, file50, "");
        boolean boolean53 = org.apache.commons.io.FileUtils.isFileNewer(file28, file43);
        java.io.File file54 = null;
        boolean boolean55 = org.apache.commons.io.FileUtils.contentEquals(file43, file54);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.moveDirectory(file7, file54);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: destination");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(file14);
        org.junit.Assert.assertEquals(file14.getParent(), "hi!");
        org.junit.Assert.assertEquals(file14.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(fileOutputStream18);
        org.junit.Assert.assertNull(checksum20);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(file24);
        org.junit.Assert.assertEquals(file24.getParent(), "hi!");
        org.junit.Assert.assertEquals(file24.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(file28);
        org.junit.Assert.assertEquals(file28.getParent(), "hi!");
        org.junit.Assert.assertEquals(file28.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(lineIterator32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(file39);
        org.junit.Assert.assertEquals(file39.getParent(), "hi!");
        org.junit.Assert.assertEquals(file39.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(file43);
        org.junit.Assert.assertEquals(file43.getParent(), "hi!");
        org.junit.Assert.assertEquals(file43.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(file50);
        org.junit.Assert.assertEquals(file50.getParent(), "hi!");
        org.junit.Assert.assertEquals(file50.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test203");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray4 = new java.lang.String[] {};
        java.io.File file5 = org.apache.commons.io.FileUtils.getFile(strArray4);
        java.io.File file6 = org.apache.commons.io.FileUtils.getFile(file3, strArray4);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.writeStringToFile(file6, "1048576 EB", "C:\\Users\\Mathieu", false);
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: C:\\Users\\Mathieu");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNull(file5);
        org.junit.Assert.assertNotNull(file6);
        org.junit.Assert.assertEquals(file6.getParent(), "hi!");
        org.junit.Assert.assertEquals(file6.toString(), "hi!\\hi!");
    }

    @Test
    public void test204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test204");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean13 = org.apache.commons.io.FileUtils.isFileOlder(file7, (-1L));
        byte[] byteArray14 = new byte[] {};
        org.apache.commons.io.FileUtils.writeByteArrayToFile(file7, byteArray14);
        java.lang.String[] strArray18 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file19 = org.apache.commons.io.FileUtils.getFile(strArray18);
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file23 = org.apache.commons.io.FileUtils.getFile(strArray22);
        boolean boolean24 = org.apache.commons.io.FileUtils.isFileOlder(file19, file23);
        boolean boolean26 = org.apache.commons.io.FileUtils.waitFor(file23, (int) '4');
        org.apache.commons.io.LineIterator lineIterator27 = org.apache.commons.io.FileUtils.lineIterator(file23);
        boolean boolean29 = org.apache.commons.io.FileUtils.isFileOlder(file23, (-1L));
        java.io.FileOutputStream fileOutputStream31 = org.apache.commons.io.FileUtils.openOutputStream(file23, false);
        long long32 = org.apache.commons.io.FileUtils.copyFile(file7, (java.io.OutputStream) fileOutputStream31);
        java.lang.String[] strArray35 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file36 = org.apache.commons.io.FileUtils.getFile(strArray35);
        boolean boolean38 = org.apache.commons.io.FileUtils.waitFor(file36, 100);
        java.io.FileFilter fileFilter39 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.copyDirectory(file7, file36, fileFilter39);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Source 'hi!\\hi!' exists but is not a directory");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(file19);
        org.junit.Assert.assertEquals(file19.getParent(), "hi!");
        org.junit.Assert.assertEquals(file19.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(file23);
        org.junit.Assert.assertEquals(file23.getParent(), "hi!");
        org.junit.Assert.assertEquals(file23.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(lineIterator27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(fileOutputStream31);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(file36);
        org.junit.Assert.assertEquals(file36.getParent(), "hi!");
        org.junit.Assert.assertEquals(file36.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
    }

    @Test
    public void test205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test205");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean12 = org.apache.commons.io.FileUtils.deleteQuietly(file7);
        org.apache.commons.io.FileUtils.writeStringToFile(file7, "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file18 = org.apache.commons.io.FileUtils.getFile(strArray17);
        java.lang.String[] strArray21 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file22 = org.apache.commons.io.FileUtils.getFile(strArray21);
        boolean boolean23 = org.apache.commons.io.FileUtils.isFileOlder(file18, file22);
        boolean boolean25 = org.apache.commons.io.FileUtils.waitFor(file22, (int) '4');
        java.lang.String[] strArray28 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file29 = org.apache.commons.io.FileUtils.getFile(strArray28);
        boolean boolean31 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file22, file29, "");
        boolean boolean32 = org.apache.commons.io.FileUtils.isFileNewer(file7, file22);
        java.io.FileOutputStream fileOutputStream33 = org.apache.commons.io.FileUtils.openOutputStream(file7);
        java.lang.String[] strArray36 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file37 = org.apache.commons.io.FileUtils.getFile(strArray36);
        java.lang.String[] strArray40 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file41 = org.apache.commons.io.FileUtils.getFile(strArray40);
        boolean boolean42 = org.apache.commons.io.FileUtils.isFileOlder(file37, file41);
        boolean boolean44 = org.apache.commons.io.FileUtils.waitFor(file41, (int) '4');
        org.apache.commons.io.LineIterator lineIterator45 = org.apache.commons.io.FileUtils.lineIterator(file41);
        boolean boolean46 = org.apache.commons.io.FileUtils.deleteQuietly(file41);
        org.apache.commons.io.FileUtils.write(file41, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset50 = null;
        org.apache.commons.io.FileUtils.write(file41, (java.lang.CharSequence) "", charset50, true);
        java.nio.charset.Charset charset53 = null;
        java.lang.String str54 = org.apache.commons.io.FileUtils.readFileToString(file41, charset53);
        boolean boolean55 = org.apache.commons.io.FileUtils.contentEquals(file7, file41);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigInteger bigInteger56 = org.apache.commons.io.FileUtils.sizeOfDirectoryAsBigInteger(file41);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: hi!\\hi! is not a directory");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(file18);
        org.junit.Assert.assertEquals(file18.getParent(), "hi!");
        org.junit.Assert.assertEquals(file18.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(file22);
        org.junit.Assert.assertEquals(file22.getParent(), "hi!");
        org.junit.Assert.assertEquals(file22.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(file29);
        org.junit.Assert.assertEquals(file29.getParent(), "hi!");
        org.junit.Assert.assertEquals(file29.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(fileOutputStream33);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(file37);
        org.junit.Assert.assertEquals(file37.getParent(), "hi!");
        org.junit.Assert.assertEquals(file37.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(file41);
        org.junit.Assert.assertEquals(file41.getParent(), "hi!");
        org.junit.Assert.assertEquals(file41.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(lineIterator45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "hi!" + "'", str54, "hi!");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
    }

    @Test
    public void test206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test206");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean13 = org.apache.commons.io.FileUtils.isFileOlder(file7, (-1L));
        java.nio.charset.Charset charset14 = null;
        java.lang.String str15 = org.apache.commons.io.FileUtils.readFileToString(file7, charset14);
        org.apache.commons.io.FileUtils.writeStringToFile(file7, "hi!", true);
        java.lang.String[] strArray21 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file22 = org.apache.commons.io.FileUtils.getFile(strArray21);
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file26 = org.apache.commons.io.FileUtils.getFile(strArray25);
        boolean boolean27 = org.apache.commons.io.FileUtils.isFileOlder(file22, file26);
        boolean boolean29 = org.apache.commons.io.FileUtils.waitFor(file26, (int) '4');
        org.apache.commons.io.LineIterator lineIterator30 = org.apache.commons.io.FileUtils.lineIterator(file26);
        boolean boolean31 = org.apache.commons.io.FileUtils.deleteQuietly(file26);
        org.apache.commons.io.FileUtils.writeStringToFile(file26, "");
        java.lang.String[] strArray36 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file37 = org.apache.commons.io.FileUtils.getFile(strArray36);
        java.lang.String[] strArray40 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file41 = org.apache.commons.io.FileUtils.getFile(strArray40);
        boolean boolean42 = org.apache.commons.io.FileUtils.isFileOlder(file37, file41);
        boolean boolean44 = org.apache.commons.io.FileUtils.waitFor(file41, (int) '4');
        java.lang.String[] strArray47 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file48 = org.apache.commons.io.FileUtils.getFile(strArray47);
        boolean boolean50 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file41, file48, "");
        boolean boolean51 = org.apache.commons.io.FileUtils.isFileNewer(file26, file41);
        boolean boolean52 = org.apache.commons.io.FileUtils.isSymlink(file26);
        boolean boolean53 = org.apache.commons.io.FileUtils.isFileOlder(file7, file26);
        java.util.Date date54 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean55 = org.apache.commons.io.FileUtils.isFileOlder(file26, date54);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No specified date");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(file22);
        org.junit.Assert.assertEquals(file22.getParent(), "hi!");
        org.junit.Assert.assertEquals(file22.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(file26);
        org.junit.Assert.assertEquals(file26.getParent(), "hi!");
        org.junit.Assert.assertEquals(file26.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(lineIterator30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(file37);
        org.junit.Assert.assertEquals(file37.getParent(), "hi!");
        org.junit.Assert.assertEquals(file37.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(file41);
        org.junit.Assert.assertEquals(file41.getParent(), "hi!");
        org.junit.Assert.assertEquals(file41.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(file48);
        org.junit.Assert.assertEquals(file48.getParent(), "hi!");
        org.junit.Assert.assertEquals(file48.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test207");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean12 = org.apache.commons.io.FileUtils.deleteQuietly(file7);
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset16 = null;
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "", charset16, true);
        byte[] byteArray19 = org.apache.commons.io.FileUtils.readFileToByteArray(file7);
        boolean boolean21 = org.apache.commons.io.FileUtils.waitFor(file7, (int) 'a');
        byte[] byteArray22 = org.apache.commons.io.FileUtils.readFileToByteArray(file7);
        java.util.Date date23 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean24 = org.apache.commons.io.FileUtils.isFileNewer(file7, date23);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No specified date");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[104, 105, 33]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[104, 105, 33]");
    }

    @Test
    public void test208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test208");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean12 = org.apache.commons.io.FileUtils.deleteQuietly(file7);
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset16 = null;
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "", charset16, true);
        byte[] byteArray19 = org.apache.commons.io.FileUtils.readFileToByteArray(file7);
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file23 = org.apache.commons.io.FileUtils.getFile(strArray22);
        java.lang.String[] strArray26 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file27 = org.apache.commons.io.FileUtils.getFile(strArray26);
        boolean boolean28 = org.apache.commons.io.FileUtils.isFileOlder(file23, file27);
        boolean boolean30 = org.apache.commons.io.FileUtils.waitFor(file27, (int) '4');
        org.apache.commons.io.LineIterator lineIterator31 = org.apache.commons.io.FileUtils.lineIterator(file27);
        boolean boolean32 = org.apache.commons.io.FileUtils.deleteQuietly(file27);
        org.apache.commons.io.FileUtils.write(file27, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset36 = null;
        org.apache.commons.io.FileUtils.write(file27, (java.lang.CharSequence) "", charset36, true);
        java.nio.charset.Charset charset40 = null;
        org.apache.commons.io.FileUtils.writeStringToFile(file27, "", charset40, false);
        boolean boolean43 = org.apache.commons.io.FileUtils.isFileNewer(file7, file27);
        boolean boolean45 = org.apache.commons.io.FileUtils.isFileOlder(file7, (long) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.String> strList47 = org.apache.commons.io.FileUtils.readLines(file7, "35 bytes");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: 35 bytes");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[104, 105, 33]");
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(file23);
        org.junit.Assert.assertEquals(file23.getParent(), "hi!");
        org.junit.Assert.assertEquals(file23.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(file27);
        org.junit.Assert.assertEquals(file27.getParent(), "hi!");
        org.junit.Assert.assertEquals(file27.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(lineIterator31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test209");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean12 = org.apache.commons.io.FileUtils.deleteQuietly(file7);
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset16 = null;
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "", charset16, true);
        java.nio.charset.Charset charset19 = null;
        java.lang.String str20 = org.apache.commons.io.FileUtils.readFileToString(file7, charset19);
        java.lang.String[] strArray23 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file24 = org.apache.commons.io.FileUtils.getFile(strArray23);
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file28 = org.apache.commons.io.FileUtils.getFile(strArray27);
        boolean boolean29 = org.apache.commons.io.FileUtils.isFileOlder(file24, file28);
        boolean boolean31 = org.apache.commons.io.FileUtils.waitFor(file28, (int) '4');
        org.apache.commons.io.LineIterator lineIterator32 = org.apache.commons.io.FileUtils.lineIterator(file28);
        boolean boolean33 = org.apache.commons.io.FileUtils.deleteQuietly(file28);
        org.apache.commons.io.FileUtils.write(file28, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset37 = null;
        org.apache.commons.io.FileUtils.write(file28, (java.lang.CharSequence) "", charset37, true);
        byte[] byteArray40 = org.apache.commons.io.FileUtils.readFileToByteArray(file28);
        boolean boolean42 = org.apache.commons.io.FileUtils.waitFor(file28, (int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.moveDirectory(file7, file28);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Source 'hi!\\hi!' is not a directory");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(file24);
        org.junit.Assert.assertEquals(file24.getParent(), "hi!");
        org.junit.Assert.assertEquals(file24.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(file28);
        org.junit.Assert.assertEquals(file28.getParent(), "hi!");
        org.junit.Assert.assertEquals(file28.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(lineIterator32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[104, 105, 33]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
    }

    @Test
    public void test210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test210");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean12 = org.apache.commons.io.FileUtils.deleteQuietly(file7);
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset16 = null;
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "", charset16, true);
        byte[] byteArray19 = org.apache.commons.io.FileUtils.readFileToByteArray(file7);
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file23 = org.apache.commons.io.FileUtils.getFile(strArray22);
        java.lang.String[] strArray26 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file27 = org.apache.commons.io.FileUtils.getFile(strArray26);
        boolean boolean28 = org.apache.commons.io.FileUtils.isFileOlder(file23, file27);
        boolean boolean30 = org.apache.commons.io.FileUtils.waitFor(file27, (int) '4');
        org.apache.commons.io.LineIterator lineIterator31 = org.apache.commons.io.FileUtils.lineIterator(file27);
        boolean boolean32 = org.apache.commons.io.FileUtils.deleteQuietly(file27);
        org.apache.commons.io.FileUtils.write(file27, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset36 = null;
        org.apache.commons.io.FileUtils.write(file27, (java.lang.CharSequence) "", charset36, true);
        java.nio.charset.Charset charset40 = null;
        org.apache.commons.io.FileUtils.writeStringToFile(file27, "", charset40, false);
        boolean boolean43 = org.apache.commons.io.FileUtils.isFileNewer(file7, file27);
        java.nio.charset.Charset charset45 = null;
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "-1 bytes", charset45);
        java.lang.String[] strArray50 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file51 = org.apache.commons.io.FileUtils.getFile(strArray50);
        java.lang.String[] strArray54 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file55 = org.apache.commons.io.FileUtils.getFile(strArray54);
        boolean boolean56 = org.apache.commons.io.FileUtils.isFileOlder(file51, file55);
        boolean boolean57 = org.apache.commons.io.FileUtils.deleteQuietly(file55);
        java.lang.String[] strArray60 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file61 = org.apache.commons.io.FileUtils.getFile(strArray60);
        java.lang.String[] strArray64 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file65 = org.apache.commons.io.FileUtils.getFile(strArray64);
        boolean boolean66 = org.apache.commons.io.FileUtils.isFileOlder(file61, file65);
        boolean boolean68 = org.apache.commons.io.FileUtils.waitFor(file65, (int) '4');
        java.lang.String[] strArray71 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file72 = org.apache.commons.io.FileUtils.getFile(strArray71);
        boolean boolean74 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file65, file72, "");
        org.apache.commons.io.LineIterator lineIterator75 = org.apache.commons.io.FileUtils.lineIterator(file65);
        org.apache.commons.io.FileUtils.writeStringToFile(file65, "C:\\Users\\Mathieu\\AppData\\Local\\Temp\\", false);
        java.nio.charset.Charset charset80 = null;
        org.apache.commons.io.FileUtils.write(file65, (java.lang.CharSequence) "", charset80, true);
        boolean boolean84 = org.apache.commons.io.FileUtils.waitFor(file65, 0);
        boolean boolean85 = org.apache.commons.io.FileUtils.isFileOlder(file55, file65);
        java.lang.String[] strArray88 = new java.lang.String[] { "C:\\Users\\Mathieu\\AppData\\Local\\Temp\\", "" };
        java.util.ArrayList<java.lang.String> strList89 = new java.util.ArrayList<java.lang.String>();
        boolean boolean90 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList89, strArray88);
        org.apache.commons.io.FileUtils.writeLines(file55, (java.util.Collection<java.lang.String>) strList89);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.writeLines(file7, "1048576 EB", (java.util.Collection<java.lang.String>) strList89);
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: 1048576 EB");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[104, 105, 33]");
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(file23);
        org.junit.Assert.assertEquals(file23.getParent(), "hi!");
        org.junit.Assert.assertEquals(file23.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(file27);
        org.junit.Assert.assertEquals(file27.getParent(), "hi!");
        org.junit.Assert.assertEquals(file27.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(lineIterator31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(file51);
        org.junit.Assert.assertEquals(file51.getParent(), "hi!");
        org.junit.Assert.assertEquals(file51.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(file55);
        org.junit.Assert.assertEquals(file55.getParent(), "hi!");
        org.junit.Assert.assertEquals(file55.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(file61);
        org.junit.Assert.assertEquals(file61.getParent(), "hi!");
        org.junit.Assert.assertEquals(file61.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(file65);
        org.junit.Assert.assertEquals(file65.getParent(), "hi!");
        org.junit.Assert.assertEquals(file65.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(file72);
        org.junit.Assert.assertEquals(file72.getParent(), "hi!");
        org.junit.Assert.assertEquals(file72.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(lineIterator75);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(strArray88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
    }

    @Test
    public void test211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test211");
        java.io.File file0 = org.apache.commons.io.FileUtils.getTempDirectory();
        java.lang.String[] strArray2 = new java.lang.String[] { "1048576 EB" };
        java.util.ArrayList<java.lang.String> strList3 = new java.util.ArrayList<java.lang.String>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList3, strArray2);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.writeLines(file0, (java.util.Collection<java.lang.String>) strList3);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: File 'C:\\Users\\Mathieu\\AppData\\Local\\Temp' exists but is a directory");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(file0);
        org.junit.Assert.assertEquals(file0.getParent(), "C:\\Users\\Mathieu\\AppData\\Local");
        org.junit.Assert.assertEquals(file0.toString(), "C:\\Users\\Mathieu\\AppData\\Local\\Temp");
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    }

    @Test
    public void test212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test212");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean9 = org.apache.commons.io.FileUtils.deleteQuietly(file7);
        java.nio.charset.Charset charset11 = null;
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "", charset11, true);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "1 GB", "1 GB");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: 1 GB");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test213");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean13 = org.apache.commons.io.FileUtils.isFileOlder(file7, (-1L));
        java.nio.charset.Charset charset14 = null;
        java.lang.String str15 = org.apache.commons.io.FileUtils.readFileToString(file7, charset14);
        org.apache.commons.io.FileUtils.writeStringToFile(file7, "hi!", true);
        java.lang.String[] strArray19 = new java.lang.String[] {};
        java.io.File file20 = org.apache.commons.io.FileUtils.getFile(strArray19);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Collection<java.io.File> fileCollection22 = org.apache.commons.io.FileUtils.listFiles(file7, strArray19, true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'directory' is not a directory: hi!\\hi!");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNull(file20);
    }

    @Test
    public void test214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test214");
        java.io.File file0 = null;
        java.lang.String[] strArray3 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file4 = org.apache.commons.io.FileUtils.getFile(strArray3);
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file8 = org.apache.commons.io.FileUtils.getFile(strArray7);
        boolean boolean9 = org.apache.commons.io.FileUtils.isFileOlder(file4, file8);
        boolean boolean11 = org.apache.commons.io.FileUtils.waitFor(file8, (int) '4');
        org.apache.commons.io.LineIterator lineIterator12 = org.apache.commons.io.FileUtils.lineIterator(file8);
        boolean boolean13 = org.apache.commons.io.FileUtils.deleteQuietly(file8);
        java.nio.charset.Charset charset15 = null;
        org.apache.commons.io.FileUtils.writeStringToFile(file8, "hi!", charset15, true);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.copyDirectory(file0, file8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: source");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(file4);
        org.junit.Assert.assertEquals(file4.getParent(), "hi!");
        org.junit.Assert.assertEquals(file4.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(file8);
        org.junit.Assert.assertEquals(file8.getParent(), "hi!");
        org.junit.Assert.assertEquals(file8.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(lineIterator12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test215");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean13 = org.apache.commons.io.FileUtils.isFileOlder(file7, (-1L));
        long long14 = org.apache.commons.io.FileUtils.sizeOf(file7);
        java.io.File file15 = org.apache.commons.io.FileUtils.getUserDirectory();
        org.apache.commons.io.FileUtils.copyFileToDirectory(file7, file15, true);
        java.lang.String[] strArray20 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file21 = org.apache.commons.io.FileUtils.getFile(strArray20);
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file25 = org.apache.commons.io.FileUtils.getFile(strArray24);
        boolean boolean26 = org.apache.commons.io.FileUtils.isFileOlder(file21, file25);
        boolean boolean28 = org.apache.commons.io.FileUtils.waitFor(file25, (int) '4');
        org.apache.commons.io.LineIterator lineIterator29 = org.apache.commons.io.FileUtils.lineIterator(file25);
        boolean boolean31 = org.apache.commons.io.FileUtils.isFileOlder(file25, (-1L));
        java.io.FileOutputStream fileOutputStream33 = org.apache.commons.io.FileUtils.openOutputStream(file25, false);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.copyFile(file15, file25, false);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Source 'C:\\Users\\Mathieu' exists but is a directory");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 6L + "'", long14 == 6L);
        org.junit.Assert.assertNotNull(file15);
        org.junit.Assert.assertEquals(file15.getParent(), "C:\\Users");
        org.junit.Assert.assertEquals(file15.toString(), "C:\\Users\\Mathieu");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(file21);
        org.junit.Assert.assertEquals(file21.getParent(), "hi!");
        org.junit.Assert.assertEquals(file21.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(file25);
        org.junit.Assert.assertEquals(file25.getParent(), "hi!");
        org.junit.Assert.assertEquals(file25.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(lineIterator29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(fileOutputStream33);
    }

    @Test
    public void test216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test216");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        java.lang.String[] strArray10 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file11 = org.apache.commons.io.FileUtils.getFile(strArray10);
        boolean boolean12 = org.apache.commons.io.FileUtils.isFileOlder(file7, file11);
        boolean boolean14 = org.apache.commons.io.FileUtils.waitFor(file11, (int) '4');
        org.apache.commons.io.LineIterator lineIterator15 = org.apache.commons.io.FileUtils.lineIterator(file11);
        boolean boolean16 = org.apache.commons.io.FileUtils.deleteQuietly(file11);
        org.apache.commons.io.FileUtils.write(file11, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset20 = null;
        org.apache.commons.io.FileUtils.write(file11, (java.lang.CharSequence) "", charset20, true);
        java.nio.charset.Charset charset24 = null;
        org.apache.commons.io.FileUtils.writeStringToFile(file11, "", charset24, false);
        long long27 = org.apache.commons.io.FileUtils.sizeOf(file11);
        java.lang.String[] strArray30 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file31 = org.apache.commons.io.FileUtils.getFile(strArray30);
        java.lang.String[] strArray34 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file35 = org.apache.commons.io.FileUtils.getFile(strArray34);
        boolean boolean36 = org.apache.commons.io.FileUtils.isFileOlder(file31, file35);
        boolean boolean38 = org.apache.commons.io.FileUtils.waitFor(file35, (int) '4');
        org.apache.commons.io.LineIterator lineIterator39 = org.apache.commons.io.FileUtils.lineIterator(file35);
        boolean boolean40 = org.apache.commons.io.FileUtils.deleteQuietly(file35);
        org.apache.commons.io.FileUtils.write(file35, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset44 = null;
        org.apache.commons.io.FileUtils.write(file35, (java.lang.CharSequence) "", charset44, true);
        java.nio.charset.Charset charset48 = null;
        org.apache.commons.io.FileUtils.writeStringToFile(file35, "", charset48, false);
        long long51 = org.apache.commons.io.FileUtils.sizeOf(file35);
        org.apache.commons.io.FileUtils.writeStringToFile(file35, "");
        boolean boolean55 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file11, file35, "hi!");
        org.apache.commons.io.FileUtils.writeStringToFile(file35, "", true);
        java.io.FileFilter fileFilter59 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.copyDirectory(file3, file35, fileFilter59);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Source 'hi!\\hi!' exists but is not a directory");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(file11);
        org.junit.Assert.assertEquals(file11.getParent(), "hi!");
        org.junit.Assert.assertEquals(file11.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(lineIterator15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(file31);
        org.junit.Assert.assertEquals(file31.getParent(), "hi!");
        org.junit.Assert.assertEquals(file31.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(file35);
        org.junit.Assert.assertEquals(file35.getParent(), "hi!");
        org.junit.Assert.assertEquals(file35.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(lineIterator39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
    }

    @Test
    public void test217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test217");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean12 = org.apache.commons.io.FileUtils.deleteQuietly(file7);
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset16 = null;
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "", charset16, true);
        java.nio.charset.Charset charset20 = null;
        org.apache.commons.io.FileUtils.writeStringToFile(file7, "", charset20, false);
        long long23 = org.apache.commons.io.FileUtils.sizeOf(file7);
        org.apache.commons.io.FileUtils.writeStringToFile(file7, "");
        java.math.BigInteger bigInteger26 = org.apache.commons.io.FileUtils.sizeOfAsBigInteger(file7);
        java.lang.String[] strArray29 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file30 = org.apache.commons.io.FileUtils.getFile(strArray29);
        java.lang.String[] strArray33 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file34 = org.apache.commons.io.FileUtils.getFile(strArray33);
        boolean boolean35 = org.apache.commons.io.FileUtils.isFileOlder(file30, file34);
        boolean boolean37 = org.apache.commons.io.FileUtils.waitFor(file34, (int) '4');
        org.apache.commons.io.LineIterator lineIterator38 = org.apache.commons.io.FileUtils.lineIterator(file34);
        boolean boolean39 = org.apache.commons.io.FileUtils.deleteQuietly(file34);
        org.apache.commons.io.FileUtils.write(file34, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset43 = null;
        org.apache.commons.io.FileUtils.write(file34, (java.lang.CharSequence) "", charset43, true);
        java.nio.charset.Charset charset47 = null;
        org.apache.commons.io.FileUtils.writeStringToFile(file34, "", charset47, false);
        long long50 = org.apache.commons.io.FileUtils.sizeOf(file34);
        org.apache.commons.io.FileUtils.writeStringToFile(file34, "");
        java.nio.charset.Charset charset53 = null;
        java.util.List<java.lang.String> strList54 = org.apache.commons.io.FileUtils.readLines(file34, charset53);
        java.io.FileFilter fileFilter55 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.copyDirectory(file7, file34, fileFilter55);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Source 'hi!\\hi!' exists but is not a directory");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(bigInteger26);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(file30);
        org.junit.Assert.assertEquals(file30.getParent(), "hi!");
        org.junit.Assert.assertEquals(file30.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(file34);
        org.junit.Assert.assertEquals(file34.getParent(), "hi!");
        org.junit.Assert.assertEquals(file34.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(lineIterator38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertNotNull(strList54);
    }

    @Test
    public void test218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test218");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean13 = org.apache.commons.io.FileUtils.isFileOlder(file7, (-1L));
        long long14 = org.apache.commons.io.FileUtils.sizeOf(file7);
        java.io.File file15 = org.apache.commons.io.FileUtils.getUserDirectory();
        org.apache.commons.io.FileUtils.copyFileToDirectory(file7, file15, true);
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "hi!", true);
        byte[] byteArray21 = org.apache.commons.io.FileUtils.readFileToByteArray(file7);
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file26 = org.apache.commons.io.FileUtils.getFile(strArray25);
        java.lang.String[] strArray29 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file30 = org.apache.commons.io.FileUtils.getFile(strArray29);
        boolean boolean31 = org.apache.commons.io.FileUtils.isFileOlder(file26, file30);
        boolean boolean32 = org.apache.commons.io.FileUtils.deleteQuietly(file30);
        java.lang.String[] strArray35 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file36 = org.apache.commons.io.FileUtils.getFile(strArray35);
        java.lang.String[] strArray39 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file40 = org.apache.commons.io.FileUtils.getFile(strArray39);
        boolean boolean41 = org.apache.commons.io.FileUtils.isFileOlder(file36, file40);
        boolean boolean43 = org.apache.commons.io.FileUtils.waitFor(file40, (int) '4');
        java.lang.String[] strArray46 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file47 = org.apache.commons.io.FileUtils.getFile(strArray46);
        boolean boolean49 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file40, file47, "");
        org.apache.commons.io.LineIterator lineIterator50 = org.apache.commons.io.FileUtils.lineIterator(file40);
        org.apache.commons.io.FileUtils.writeStringToFile(file40, "C:\\Users\\Mathieu\\AppData\\Local\\Temp\\", false);
        java.nio.charset.Charset charset55 = null;
        org.apache.commons.io.FileUtils.write(file40, (java.lang.CharSequence) "", charset55, true);
        boolean boolean59 = org.apache.commons.io.FileUtils.waitFor(file40, 0);
        boolean boolean60 = org.apache.commons.io.FileUtils.isFileOlder(file30, file40);
        java.lang.String[] strArray63 = new java.lang.String[] { "C:\\Users\\Mathieu\\AppData\\Local\\Temp\\", "" };
        java.util.ArrayList<java.lang.String> strList64 = new java.util.ArrayList<java.lang.String>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList64, strArray63);
        org.apache.commons.io.FileUtils.writeLines(file30, (java.util.Collection<java.lang.String>) strList64);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.writeLines(file7, "1048576 EB", (java.util.Collection<java.lang.String>) strList64, "35 bytes");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: 1048576 EB");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(file15);
        org.junit.Assert.assertEquals(file15.getParent(), "C:\\Users");
        org.junit.Assert.assertEquals(file15.toString(), "C:\\Users\\Mathieu");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[104, 105, 33]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(file26);
        org.junit.Assert.assertEquals(file26.getParent(), "hi!");
        org.junit.Assert.assertEquals(file26.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(file30);
        org.junit.Assert.assertEquals(file30.getParent(), "hi!");
        org.junit.Assert.assertEquals(file30.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(file36);
        org.junit.Assert.assertEquals(file36.getParent(), "hi!");
        org.junit.Assert.assertEquals(file36.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(file40);
        org.junit.Assert.assertEquals(file40.getParent(), "hi!");
        org.junit.Assert.assertEquals(file40.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(file47);
        org.junit.Assert.assertEquals(file47.getParent(), "hi!");
        org.junit.Assert.assertEquals(file47.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(lineIterator50);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
    }

    @Test
    public void test219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test219");
        java.lang.String str1 = org.apache.commons.io.FileUtils.byteCountToDisplaySize((long) ' ');
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "32 bytes" + "'", str1, "32 bytes");
    }

    @Test
    public void test220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test220");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file14 = org.apache.commons.io.FileUtils.getFile(strArray13);
        boolean boolean16 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file7, file14, "");
        java.io.FileOutputStream fileOutputStream18 = org.apache.commons.io.FileUtils.openOutputStream(file7, false);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "32 bytes", "35 bytes", true);
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: 35 bytes");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(file14);
        org.junit.Assert.assertEquals(file14.getParent(), "hi!");
        org.junit.Assert.assertEquals(file14.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(fileOutputStream18);
    }

    @Test
    public void test221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test221");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        java.lang.String[] strArray11 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file12 = org.apache.commons.io.FileUtils.getFile(strArray11);
        java.lang.String[] strArray15 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file16 = org.apache.commons.io.FileUtils.getFile(strArray15);
        boolean boolean17 = org.apache.commons.io.FileUtils.isFileOlder(file12, file16);
        boolean boolean19 = org.apache.commons.io.FileUtils.waitFor(file16, (int) '4');
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file23 = org.apache.commons.io.FileUtils.getFile(strArray22);
        boolean boolean25 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file16, file23, "");
        java.io.FileInputStream fileInputStream26 = org.apache.commons.io.FileUtils.openInputStream(file23);
        java.lang.String[] strArray29 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file30 = org.apache.commons.io.FileUtils.getFile(strArray29);
        java.lang.String[] strArray33 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file34 = org.apache.commons.io.FileUtils.getFile(strArray33);
        boolean boolean35 = org.apache.commons.io.FileUtils.isFileOlder(file30, file34);
        boolean boolean36 = org.apache.commons.io.FileUtils.deleteQuietly(file34);
        java.lang.String[] strArray39 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file40 = org.apache.commons.io.FileUtils.getFile(strArray39);
        java.lang.String[] strArray43 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file44 = org.apache.commons.io.FileUtils.getFile(strArray43);
        boolean boolean45 = org.apache.commons.io.FileUtils.isFileOlder(file40, file44);
        boolean boolean47 = org.apache.commons.io.FileUtils.waitFor(file44, (int) '4');
        java.lang.String[] strArray50 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file51 = org.apache.commons.io.FileUtils.getFile(strArray50);
        boolean boolean53 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file44, file51, "");
        org.apache.commons.io.LineIterator lineIterator54 = org.apache.commons.io.FileUtils.lineIterator(file44);
        org.apache.commons.io.FileUtils.writeStringToFile(file44, "C:\\Users\\Mathieu\\AppData\\Local\\Temp\\", false);
        java.nio.charset.Charset charset59 = null;
        org.apache.commons.io.FileUtils.write(file44, (java.lang.CharSequence) "", charset59, true);
        boolean boolean63 = org.apache.commons.io.FileUtils.waitFor(file44, 0);
        boolean boolean64 = org.apache.commons.io.FileUtils.isFileOlder(file34, file44);
        java.lang.String[] strArray67 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file68 = org.apache.commons.io.FileUtils.getFile(strArray67);
        java.lang.String[] strArray71 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file72 = org.apache.commons.io.FileUtils.getFile(strArray71);
        boolean boolean73 = org.apache.commons.io.FileUtils.isFileOlder(file68, file72);
        boolean boolean75 = org.apache.commons.io.FileUtils.waitFor(file72, (int) '4');
        org.apache.commons.io.LineIterator lineIterator76 = org.apache.commons.io.FileUtils.lineIterator(file72);
        boolean boolean77 = org.apache.commons.io.FileUtils.deleteQuietly(file72);
        org.apache.commons.io.FileUtils.write(file72, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset81 = null;
        org.apache.commons.io.FileUtils.write(file72, (java.lang.CharSequence) "", charset81, true);
        java.nio.charset.Charset charset85 = null;
        org.apache.commons.io.FileUtils.writeStringToFile(file72, "", charset85, false);
        java.io.FileOutputStream fileOutputStream88 = org.apache.commons.io.FileUtils.openOutputStream(file72);
        long long89 = org.apache.commons.io.FileUtils.copyFile(file34, (java.io.OutputStream) fileOutputStream88);
        boolean boolean91 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file23, file34, "-1 bytes");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.copyFileToDirectory(file3, file23);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Destination 'hi!\\hi!' is not a directory");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(file12);
        org.junit.Assert.assertEquals(file12.getParent(), "hi!");
        org.junit.Assert.assertEquals(file12.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(file16);
        org.junit.Assert.assertEquals(file16.getParent(), "hi!");
        org.junit.Assert.assertEquals(file16.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(file23);
        org.junit.Assert.assertEquals(file23.getParent(), "hi!");
        org.junit.Assert.assertEquals(file23.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(fileInputStream26);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(file30);
        org.junit.Assert.assertEquals(file30.getParent(), "hi!");
        org.junit.Assert.assertEquals(file30.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(file34);
        org.junit.Assert.assertEquals(file34.getParent(), "hi!");
        org.junit.Assert.assertEquals(file34.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(file40);
        org.junit.Assert.assertEquals(file40.getParent(), "hi!");
        org.junit.Assert.assertEquals(file40.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(file44);
        org.junit.Assert.assertEquals(file44.getParent(), "hi!");
        org.junit.Assert.assertEquals(file44.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(file51);
        org.junit.Assert.assertEquals(file51.getParent(), "hi!");
        org.junit.Assert.assertEquals(file51.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(lineIterator54);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(file68);
        org.junit.Assert.assertEquals(file68.getParent(), "hi!");
        org.junit.Assert.assertEquals(file68.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(file72);
        org.junit.Assert.assertEquals(file72.getParent(), "hi!");
        org.junit.Assert.assertEquals(file72.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(lineIterator76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(fileOutputStream88);
        org.junit.Assert.assertTrue("'" + long89 + "' != '" + 0L + "'", long89 == 0L);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
    }

    @Test
    public void test222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test222");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean9 = org.apache.commons.io.FileUtils.deleteQuietly(file7);
        java.lang.String[] strArray12 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file13 = org.apache.commons.io.FileUtils.getFile(strArray12);
        java.lang.String[] strArray16 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file17 = org.apache.commons.io.FileUtils.getFile(strArray16);
        boolean boolean18 = org.apache.commons.io.FileUtils.isFileOlder(file13, file17);
        boolean boolean20 = org.apache.commons.io.FileUtils.waitFor(file17, (int) '4');
        java.lang.String[] strArray23 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file24 = org.apache.commons.io.FileUtils.getFile(strArray23);
        boolean boolean26 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file17, file24, "");
        org.apache.commons.io.LineIterator lineIterator27 = org.apache.commons.io.FileUtils.lineIterator(file17);
        org.apache.commons.io.FileUtils.writeStringToFile(file17, "C:\\Users\\Mathieu\\AppData\\Local\\Temp\\", false);
        java.nio.charset.Charset charset32 = null;
        org.apache.commons.io.FileUtils.write(file17, (java.lang.CharSequence) "", charset32, true);
        boolean boolean36 = org.apache.commons.io.FileUtils.waitFor(file17, 0);
        boolean boolean37 = org.apache.commons.io.FileUtils.isFileOlder(file7, file17);
        java.lang.String[] strArray40 = new java.lang.String[] { "C:\\Users\\Mathieu\\AppData\\Local\\Temp\\", "" };
        java.util.ArrayList<java.lang.String> strList41 = new java.util.ArrayList<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList41, strArray40);
        org.apache.commons.io.FileUtils.writeLines(file7, (java.util.Collection<java.lang.String>) strList41);
        // The following exception was thrown during execution in test generation
        try {
            long long44 = org.apache.commons.io.FileUtils.sizeOfDirectory(file7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: hi!\\hi! is not a directory");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(file13);
        org.junit.Assert.assertEquals(file13.getParent(), "hi!");
        org.junit.Assert.assertEquals(file13.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(file17);
        org.junit.Assert.assertEquals(file17.getParent(), "hi!");
        org.junit.Assert.assertEquals(file17.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(file24);
        org.junit.Assert.assertEquals(file24.getParent(), "hi!");
        org.junit.Assert.assertEquals(file24.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(lineIterator27);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
    }

    @Test
    public void test223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test223");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean9 = org.apache.commons.io.FileUtils.deleteQuietly(file7);
        java.lang.String[] strArray12 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file13 = org.apache.commons.io.FileUtils.getFile(strArray12);
        java.lang.String[] strArray16 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file17 = org.apache.commons.io.FileUtils.getFile(strArray16);
        boolean boolean18 = org.apache.commons.io.FileUtils.isFileOlder(file13, file17);
        boolean boolean20 = org.apache.commons.io.FileUtils.waitFor(file17, (int) '4');
        java.lang.String[] strArray23 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file24 = org.apache.commons.io.FileUtils.getFile(strArray23);
        boolean boolean26 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file17, file24, "");
        org.apache.commons.io.LineIterator lineIterator27 = org.apache.commons.io.FileUtils.lineIterator(file17);
        org.apache.commons.io.FileUtils.writeStringToFile(file17, "C:\\Users\\Mathieu\\AppData\\Local\\Temp\\", false);
        java.nio.charset.Charset charset32 = null;
        org.apache.commons.io.FileUtils.write(file17, (java.lang.CharSequence) "", charset32, true);
        boolean boolean36 = org.apache.commons.io.FileUtils.waitFor(file17, 0);
        boolean boolean37 = org.apache.commons.io.FileUtils.isFileOlder(file7, file17);
        java.lang.String[] strArray40 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file41 = org.apache.commons.io.FileUtils.getFile(strArray40);
        java.lang.String[] strArray44 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file45 = org.apache.commons.io.FileUtils.getFile(strArray44);
        boolean boolean46 = org.apache.commons.io.FileUtils.isFileOlder(file41, file45);
        boolean boolean48 = org.apache.commons.io.FileUtils.waitFor(file45, (int) '4');
        org.apache.commons.io.LineIterator lineIterator49 = org.apache.commons.io.FileUtils.lineIterator(file45);
        boolean boolean50 = org.apache.commons.io.FileUtils.deleteQuietly(file45);
        org.apache.commons.io.FileUtils.write(file45, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset54 = null;
        org.apache.commons.io.FileUtils.write(file45, (java.lang.CharSequence) "", charset54, true);
        java.nio.charset.Charset charset58 = null;
        org.apache.commons.io.FileUtils.writeStringToFile(file45, "", charset58, false);
        java.io.FileOutputStream fileOutputStream61 = org.apache.commons.io.FileUtils.openOutputStream(file45);
        long long62 = org.apache.commons.io.FileUtils.copyFile(file7, (java.io.OutputStream) fileOutputStream61);
        java.lang.String[] strArray65 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file66 = org.apache.commons.io.FileUtils.getFile(strArray65);
        java.lang.String[] strArray69 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file70 = org.apache.commons.io.FileUtils.getFile(strArray69);
        boolean boolean71 = org.apache.commons.io.FileUtils.isFileOlder(file66, file70);
        boolean boolean73 = org.apache.commons.io.FileUtils.waitFor(file70, (int) '4');
        org.apache.commons.io.LineIterator lineIterator74 = org.apache.commons.io.FileUtils.lineIterator(file70);
        boolean boolean75 = org.apache.commons.io.FileUtils.deleteQuietly(file70);
        org.apache.commons.io.FileUtils.write(file70, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset79 = null;
        org.apache.commons.io.FileUtils.write(file70, (java.lang.CharSequence) "", charset79, true);
        byte[] byteArray82 = org.apache.commons.io.FileUtils.readFileToByteArray(file70);
        boolean boolean84 = org.apache.commons.io.FileUtils.waitFor(file70, (int) 'a');
        byte[] byteArray85 = org.apache.commons.io.FileUtils.readFileToByteArray(file70);
        org.apache.commons.io.FileUtils.writeByteArrayToFile(file7, byteArray85, false);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(file13);
        org.junit.Assert.assertEquals(file13.getParent(), "hi!");
        org.junit.Assert.assertEquals(file13.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(file17);
        org.junit.Assert.assertEquals(file17.getParent(), "hi!");
        org.junit.Assert.assertEquals(file17.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(file24);
        org.junit.Assert.assertEquals(file24.getParent(), "hi!");
        org.junit.Assert.assertEquals(file24.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(lineIterator27);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(file41);
        org.junit.Assert.assertEquals(file41.getParent(), "hi!");
        org.junit.Assert.assertEquals(file41.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(file45);
        org.junit.Assert.assertEquals(file45.getParent(), "hi!");
        org.junit.Assert.assertEquals(file45.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(lineIterator49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(fileOutputStream61);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 0L + "'", long62 == 0L);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(file66);
        org.junit.Assert.assertEquals(file66.getParent(), "hi!");
        org.junit.Assert.assertEquals(file66.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertNotNull(file70);
        org.junit.Assert.assertEquals(file70.getParent(), "hi!");
        org.junit.Assert.assertEquals(file70.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(lineIterator74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[104, 105, 33]");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[104, 105, 33]");
    }

    @Test
    public void test224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test224");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file14 = org.apache.commons.io.FileUtils.getFile(strArray13);
        boolean boolean16 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file7, file14, "");
        java.io.FileOutputStream fileOutputStream18 = org.apache.commons.io.FileUtils.openOutputStream(file7, false);
        java.lang.String[] strArray21 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file22 = org.apache.commons.io.FileUtils.getFile(strArray21);
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file26 = org.apache.commons.io.FileUtils.getFile(strArray25);
        boolean boolean27 = org.apache.commons.io.FileUtils.isFileOlder(file22, file26);
        boolean boolean29 = org.apache.commons.io.FileUtils.waitFor(file26, (int) '4');
        org.apache.commons.io.LineIterator lineIterator30 = org.apache.commons.io.FileUtils.lineIterator(file26);
        boolean boolean31 = org.apache.commons.io.FileUtils.deleteQuietly(file26);
        org.apache.commons.io.FileUtils.write(file26, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset35 = null;
        org.apache.commons.io.FileUtils.write(file26, (java.lang.CharSequence) "", charset35, true);
        java.nio.charset.Charset charset39 = null;
        org.apache.commons.io.FileUtils.writeStringToFile(file26, "", charset39, false);
        long long42 = org.apache.commons.io.FileUtils.sizeOf(file26);
        java.lang.String[] strArray45 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file46 = org.apache.commons.io.FileUtils.getFile(strArray45);
        java.lang.String[] strArray49 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file50 = org.apache.commons.io.FileUtils.getFile(strArray49);
        boolean boolean51 = org.apache.commons.io.FileUtils.isFileOlder(file46, file50);
        boolean boolean53 = org.apache.commons.io.FileUtils.waitFor(file50, (int) '4');
        org.apache.commons.io.LineIterator lineIterator54 = org.apache.commons.io.FileUtils.lineIterator(file50);
        boolean boolean55 = org.apache.commons.io.FileUtils.deleteQuietly(file50);
        org.apache.commons.io.FileUtils.write(file50, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset59 = null;
        org.apache.commons.io.FileUtils.write(file50, (java.lang.CharSequence) "", charset59, true);
        java.nio.charset.Charset charset63 = null;
        org.apache.commons.io.FileUtils.writeStringToFile(file50, "", charset63, false);
        long long66 = org.apache.commons.io.FileUtils.sizeOf(file50);
        org.apache.commons.io.FileUtils.writeStringToFile(file50, "");
        boolean boolean70 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file26, file50, "hi!");
        boolean boolean72 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file7, file50, "-1 bytes");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.deleteDirectory(file50);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: hi!\\hi! is not a directory");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(file14);
        org.junit.Assert.assertEquals(file14.getParent(), "hi!");
        org.junit.Assert.assertEquals(file14.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(fileOutputStream18);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(file22);
        org.junit.Assert.assertEquals(file22.getParent(), "hi!");
        org.junit.Assert.assertEquals(file22.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(file26);
        org.junit.Assert.assertEquals(file26.getParent(), "hi!");
        org.junit.Assert.assertEquals(file26.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(lineIterator30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(file46);
        org.junit.Assert.assertEquals(file46.getParent(), "hi!");
        org.junit.Assert.assertEquals(file46.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(file50);
        org.junit.Assert.assertEquals(file50.getParent(), "hi!");
        org.junit.Assert.assertEquals(file50.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(lineIterator54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 0L + "'", long66 == 0L);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
    }

    @Test
    public void test225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test225");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean13 = org.apache.commons.io.FileUtils.isFileOlder(file7, (-1L));
        java.nio.charset.Charset charset14 = null;
        java.lang.String str15 = org.apache.commons.io.FileUtils.readFileToString(file7, charset14);
        org.apache.commons.io.FileUtils.writeStringToFile(file7, "hi!", true);
        java.lang.String[] strArray21 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file22 = org.apache.commons.io.FileUtils.getFile(strArray21);
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file26 = org.apache.commons.io.FileUtils.getFile(strArray25);
        boolean boolean27 = org.apache.commons.io.FileUtils.isFileOlder(file22, file26);
        boolean boolean29 = org.apache.commons.io.FileUtils.waitFor(file26, (int) '4');
        org.apache.commons.io.LineIterator lineIterator30 = org.apache.commons.io.FileUtils.lineIterator(file26);
        boolean boolean31 = org.apache.commons.io.FileUtils.deleteQuietly(file26);
        org.apache.commons.io.FileUtils.writeStringToFile(file26, "");
        java.lang.String[] strArray36 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file37 = org.apache.commons.io.FileUtils.getFile(strArray36);
        java.lang.String[] strArray40 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file41 = org.apache.commons.io.FileUtils.getFile(strArray40);
        boolean boolean42 = org.apache.commons.io.FileUtils.isFileOlder(file37, file41);
        boolean boolean44 = org.apache.commons.io.FileUtils.waitFor(file41, (int) '4');
        java.lang.String[] strArray47 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file48 = org.apache.commons.io.FileUtils.getFile(strArray47);
        boolean boolean50 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file41, file48, "");
        boolean boolean51 = org.apache.commons.io.FileUtils.isFileNewer(file26, file41);
        boolean boolean52 = org.apache.commons.io.FileUtils.isSymlink(file26);
        boolean boolean53 = org.apache.commons.io.FileUtils.isFileOlder(file7, file26);
        java.lang.String[] strArray56 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file57 = org.apache.commons.io.FileUtils.getFile(strArray56);
        java.lang.String[] strArray60 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file61 = org.apache.commons.io.FileUtils.getFile(strArray60);
        boolean boolean62 = org.apache.commons.io.FileUtils.isFileOlder(file57, file61);
        boolean boolean64 = org.apache.commons.io.FileUtils.waitFor(file61, (int) '4');
        java.lang.String[] strArray67 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file68 = org.apache.commons.io.FileUtils.getFile(strArray67);
        boolean boolean70 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file61, file68, "");
        java.io.FileOutputStream fileOutputStream72 = org.apache.commons.io.FileUtils.openOutputStream(file61, false);
        java.util.zip.Checksum checksum73 = null;
        java.util.zip.Checksum checksum74 = org.apache.commons.io.FileUtils.checksum(file61, checksum73);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.moveDirectory(file7, file61);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Source 'hi!\\hi!' is not a directory");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(file22);
        org.junit.Assert.assertEquals(file22.getParent(), "hi!");
        org.junit.Assert.assertEquals(file22.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(file26);
        org.junit.Assert.assertEquals(file26.getParent(), "hi!");
        org.junit.Assert.assertEquals(file26.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(lineIterator30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(file37);
        org.junit.Assert.assertEquals(file37.getParent(), "hi!");
        org.junit.Assert.assertEquals(file37.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(file41);
        org.junit.Assert.assertEquals(file41.getParent(), "hi!");
        org.junit.Assert.assertEquals(file41.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(file48);
        org.junit.Assert.assertEquals(file48.getParent(), "hi!");
        org.junit.Assert.assertEquals(file48.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(file57);
        org.junit.Assert.assertEquals(file57.getParent(), "hi!");
        org.junit.Assert.assertEquals(file57.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(file61);
        org.junit.Assert.assertEquals(file61.getParent(), "hi!");
        org.junit.Assert.assertEquals(file61.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(file68);
        org.junit.Assert.assertEquals(file68.getParent(), "hi!");
        org.junit.Assert.assertEquals(file68.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(fileOutputStream72);
        org.junit.Assert.assertNull(checksum74);
    }

    @Test
    public void test226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test226");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean12 = org.apache.commons.io.FileUtils.deleteQuietly(file7);
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset16 = null;
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "", charset16, true);
        byte[] byteArray19 = org.apache.commons.io.FileUtils.readFileToByteArray(file7);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.forceMkdir(file7);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: File hi!\\hi! exists and is not a directory. Unable to create directory.");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[104, 105, 33]");
    }

    @Test
    public void test227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test227");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        java.lang.String[] strArray10 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file11 = org.apache.commons.io.FileUtils.getFile(strArray10);
        boolean boolean12 = org.apache.commons.io.FileUtils.isFileOlder(file7, file11);
        boolean boolean14 = org.apache.commons.io.FileUtils.waitFor(file11, (int) '4');
        org.apache.commons.io.LineIterator lineIterator15 = org.apache.commons.io.FileUtils.lineIterator(file11);
        boolean boolean16 = org.apache.commons.io.FileUtils.deleteQuietly(file11);
        org.apache.commons.io.FileUtils.write(file11, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset20 = null;
        org.apache.commons.io.FileUtils.write(file11, (java.lang.CharSequence) "", charset20, true);
        boolean boolean23 = org.apache.commons.io.FileUtils.contentEquals(file3, file11);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.forceMkdir(file11);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: File hi!\\hi! exists and is not a directory. Unable to create directory.");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(file11);
        org.junit.Assert.assertEquals(file11.getParent(), "hi!");
        org.junit.Assert.assertEquals(file11.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(lineIterator15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
    }

    @Test
    public void test228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test228");
        java.io.File file0 = null;
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file5 = org.apache.commons.io.FileUtils.getFile(strArray4);
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file9 = org.apache.commons.io.FileUtils.getFile(strArray8);
        boolean boolean10 = org.apache.commons.io.FileUtils.isFileOlder(file5, file9);
        boolean boolean12 = org.apache.commons.io.FileUtils.waitFor(file9, (int) '4');
        org.apache.commons.io.LineIterator lineIterator13 = org.apache.commons.io.FileUtils.lineIterator(file9);
        boolean boolean14 = org.apache.commons.io.FileUtils.deleteQuietly(file9);
        org.apache.commons.io.FileUtils.write(file9, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset18 = null;
        org.apache.commons.io.FileUtils.write(file9, (java.lang.CharSequence) "", charset18, true);
        java.nio.charset.Charset charset22 = null;
        org.apache.commons.io.FileUtils.writeStringToFile(file9, "", charset22, false);
        long long25 = org.apache.commons.io.FileUtils.sizeOf(file9);
        org.apache.commons.io.FileUtils.writeStringToFile(file9, "");
        java.nio.charset.Charset charset28 = null;
        java.util.List<java.lang.String> strList29 = org.apache.commons.io.FileUtils.readLines(file9, charset28);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.writeLines(file0, "C:\\Users\\Mathieu", (java.util.Collection<java.lang.String>) strList29, "");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.File.exists()\" because \"file\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(file5);
        org.junit.Assert.assertEquals(file5.getParent(), "hi!");
        org.junit.Assert.assertEquals(file5.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(file9);
        org.junit.Assert.assertEquals(file9.getParent(), "hi!");
        org.junit.Assert.assertEquals(file9.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(lineIterator13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(strList29);
    }

    @Test
    public void test229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test229");
        java.io.File file0 = org.apache.commons.io.FileUtils.getTempDirectory();
        java.lang.String[] strArray3 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file4 = org.apache.commons.io.FileUtils.getFile(strArray3);
        java.lang.String[] strArray5 = new java.lang.String[] {};
        java.io.File file6 = org.apache.commons.io.FileUtils.getFile(strArray5);
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(file4, strArray5);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.copyDirectory(file0, file4, false);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Destination 'hi!\\hi!' exists but is not a directory");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(file0);
        org.junit.Assert.assertEquals(file0.getParent(), "C:\\Users\\Mathieu\\AppData\\Local");
        org.junit.Assert.assertEquals(file0.toString(), "C:\\Users\\Mathieu\\AppData\\Local\\Temp");
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(file4);
        org.junit.Assert.assertEquals(file4.getParent(), "hi!");
        org.junit.Assert.assertEquals(file4.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNull(file6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
    }

    @Test
    public void test230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test230");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean13 = org.apache.commons.io.FileUtils.isFileOlder(file7, (-1L));
        java.nio.charset.Charset charset14 = null;
        java.lang.String str15 = org.apache.commons.io.FileUtils.readFileToString(file7, charset14);
        org.apache.commons.io.FileUtils.writeStringToFile(file7, "hi!", true);
        java.lang.String[] strArray21 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file22 = org.apache.commons.io.FileUtils.getFile(strArray21);
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file26 = org.apache.commons.io.FileUtils.getFile(strArray25);
        boolean boolean27 = org.apache.commons.io.FileUtils.isFileOlder(file22, file26);
        boolean boolean29 = org.apache.commons.io.FileUtils.waitFor(file26, (int) '4');
        org.apache.commons.io.LineIterator lineIterator30 = org.apache.commons.io.FileUtils.lineIterator(file26);
        boolean boolean31 = org.apache.commons.io.FileUtils.deleteQuietly(file26);
        org.apache.commons.io.FileUtils.writeStringToFile(file26, "");
        java.lang.String[] strArray36 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file37 = org.apache.commons.io.FileUtils.getFile(strArray36);
        java.lang.String[] strArray40 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file41 = org.apache.commons.io.FileUtils.getFile(strArray40);
        boolean boolean42 = org.apache.commons.io.FileUtils.isFileOlder(file37, file41);
        boolean boolean44 = org.apache.commons.io.FileUtils.waitFor(file41, (int) '4');
        java.lang.String[] strArray47 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file48 = org.apache.commons.io.FileUtils.getFile(strArray47);
        boolean boolean50 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file41, file48, "");
        boolean boolean51 = org.apache.commons.io.FileUtils.isFileNewer(file26, file41);
        boolean boolean52 = org.apache.commons.io.FileUtils.isSymlink(file26);
        boolean boolean53 = org.apache.commons.io.FileUtils.isFileOlder(file7, file26);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.forceDelete(file7);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Unable to delete file: hi!\\hi!");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(file22);
        org.junit.Assert.assertEquals(file22.getParent(), "hi!");
        org.junit.Assert.assertEquals(file22.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(file26);
        org.junit.Assert.assertEquals(file26.getParent(), "hi!");
        org.junit.Assert.assertEquals(file26.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(lineIterator30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(file37);
        org.junit.Assert.assertEquals(file37.getParent(), "hi!");
        org.junit.Assert.assertEquals(file37.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(file41);
        org.junit.Assert.assertEquals(file41.getParent(), "hi!");
        org.junit.Assert.assertEquals(file41.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(file48);
        org.junit.Assert.assertEquals(file48.getParent(), "hi!");
        org.junit.Assert.assertEquals(file48.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test231");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray4 = new java.lang.String[] {};
        java.io.File file5 = org.apache.commons.io.FileUtils.getFile(strArray4);
        java.io.File file6 = org.apache.commons.io.FileUtils.getFile(file3, strArray4);
        java.lang.String[] strArray9 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file10 = org.apache.commons.io.FileUtils.getFile(strArray9);
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file14 = org.apache.commons.io.FileUtils.getFile(strArray13);
        boolean boolean15 = org.apache.commons.io.FileUtils.isFileOlder(file10, file14);
        boolean boolean17 = org.apache.commons.io.FileUtils.waitFor(file14, (int) '4');
        org.apache.commons.io.LineIterator lineIterator18 = org.apache.commons.io.FileUtils.lineIterator(file14);
        boolean boolean20 = org.apache.commons.io.FileUtils.isFileOlder(file14, (-1L));
        java.io.FileOutputStream fileOutputStream22 = org.apache.commons.io.FileUtils.openOutputStream(file14, false);
        long long23 = org.apache.commons.io.FileUtils.copyFile(file3, (java.io.OutputStream) fileOutputStream22);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.write(file3, (java.lang.CharSequence) "35 bytes", "1048576 EB", false);
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: 1048576 EB");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNull(file5);
        org.junit.Assert.assertNotNull(file6);
        org.junit.Assert.assertEquals(file6.getParent(), "hi!");
        org.junit.Assert.assertEquals(file6.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(file10);
        org.junit.Assert.assertEquals(file10.getParent(), "hi!");
        org.junit.Assert.assertEquals(file10.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(file14);
        org.junit.Assert.assertEquals(file14.getParent(), "hi!");
        org.junit.Assert.assertEquals(file14.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(lineIterator18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(fileOutputStream22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
    }

    @Test
    public void test232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test232");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file14 = org.apache.commons.io.FileUtils.getFile(strArray13);
        boolean boolean16 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file7, file14, "");
        org.apache.commons.io.LineIterator lineIterator17 = org.apache.commons.io.FileUtils.lineIterator(file7);
        org.apache.commons.io.FileUtils.writeStringToFile(file7, "C:\\Users\\Mathieu\\AppData\\Local\\Temp\\", false);
        java.nio.charset.Charset charset22 = null;
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "", charset22, true);
        boolean boolean26 = org.apache.commons.io.FileUtils.waitFor(file7, 0);
        java.nio.charset.Charset charset27 = null;
        java.lang.String str28 = org.apache.commons.io.FileUtils.readFileToString(file7, charset27);
        long long29 = org.apache.commons.io.FileUtils.checksumCRC32(file7);
        java.nio.charset.Charset charset31 = null;
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "1048576 EB", charset31, true);
        // The following exception was thrown during execution in test generation
        try {
            long long34 = org.apache.commons.io.FileUtils.sizeOfDirectory(file7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: hi!\\hi! is not a directory");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(file14);
        org.junit.Assert.assertEquals(file14.getParent(), "hi!");
        org.junit.Assert.assertEquals(file14.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(lineIterator17);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "C:\\Users\\Mathieu\\AppData\\Local\\Temp\\" + "'", str28, "C:\\Users\\Mathieu\\AppData\\Local\\Temp\\");
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 4154702209L + "'", long29 == 4154702209L);
    }

    @Test
    public void test233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test233");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean13 = org.apache.commons.io.FileUtils.isFileOlder(file7, (-1L));
        long long14 = org.apache.commons.io.FileUtils.sizeOf(file7);
        java.io.File file15 = org.apache.commons.io.FileUtils.getUserDirectory();
        org.apache.commons.io.FileUtils.copyFileToDirectory(file7, file15, true);
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "hi!", true);
        byte[] byteArray21 = org.apache.commons.io.FileUtils.readFileToByteArray(file7);
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file25 = org.apache.commons.io.FileUtils.getFile(strArray24);
        java.lang.String[] strArray28 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file29 = org.apache.commons.io.FileUtils.getFile(strArray28);
        boolean boolean30 = org.apache.commons.io.FileUtils.isFileOlder(file25, file29);
        java.lang.String str31 = org.apache.commons.io.FileUtils.readFileToString(file25);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean32 = org.apache.commons.io.FileUtils.directoryContains(file7, file25);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Not a directory: hi!\\hi!");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 46L + "'", long14 == 46L);
        org.junit.Assert.assertNotNull(file15);
        org.junit.Assert.assertEquals(file15.getParent(), "C:\\Users");
        org.junit.Assert.assertEquals(file15.toString(), "C:\\Users\\Mathieu");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[67, 58, 92, 85, 115, 101, 114, 115, 92, 77, 97, 116, 104, 105, 101, 117, 92, 65, 112, 112, 68, 97, 116, 97, 92, 76, 111, 99, 97, 108, 92, 84, 101, 109, 112, 92, 49, 48, 52, 56, 53, 55, 54, 32, 69, 66, 104, 105, 33]");
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(file25);
        org.junit.Assert.assertEquals(file25.getParent(), "hi!");
        org.junit.Assert.assertEquals(file25.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(file29);
        org.junit.Assert.assertEquals(file29.getParent(), "hi!");
        org.junit.Assert.assertEquals(file29.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "C:\\Users\\Mathieu\\AppData\\Local\\Temp\\1048576 EBhi!" + "'", str31, "C:\\Users\\Mathieu\\AppData\\Local\\Temp\\1048576 EBhi!");
    }

    @Test
    public void test234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test234");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file14 = org.apache.commons.io.FileUtils.getFile(strArray13);
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file18 = org.apache.commons.io.FileUtils.getFile(strArray17);
        boolean boolean19 = org.apache.commons.io.FileUtils.isFileOlder(file14, file18);
        boolean boolean21 = org.apache.commons.io.FileUtils.waitFor(file18, (int) '4');
        org.apache.commons.io.LineIterator lineIterator22 = org.apache.commons.io.FileUtils.lineIterator(file18);
        boolean boolean24 = org.apache.commons.io.FileUtils.isFileOlder(file18, (-1L));
        byte[] byteArray25 = new byte[] {};
        org.apache.commons.io.FileUtils.writeByteArrayToFile(file18, byteArray25);
        java.io.FileOutputStream fileOutputStream27 = org.apache.commons.io.FileUtils.openOutputStream(file18);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.moveFile(file7, file18);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.io.FileExistsException; message: Destination 'hi!\\hi!' already exists");
        } catch (org.apache.commons.io.FileExistsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(file14);
        org.junit.Assert.assertEquals(file14.getParent(), "hi!");
        org.junit.Assert.assertEquals(file14.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(file18);
        org.junit.Assert.assertEquals(file18.getParent(), "hi!");
        org.junit.Assert.assertEquals(file18.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(lineIterator22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertNotNull(fileOutputStream27);
    }

    @Test
    public void test235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test235");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean12 = org.apache.commons.io.FileUtils.deleteQuietly(file7);
        org.apache.commons.io.FileUtils.writeStringToFile(file7, "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file18 = org.apache.commons.io.FileUtils.getFile(strArray17);
        java.lang.String[] strArray21 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file22 = org.apache.commons.io.FileUtils.getFile(strArray21);
        boolean boolean23 = org.apache.commons.io.FileUtils.isFileOlder(file18, file22);
        boolean boolean25 = org.apache.commons.io.FileUtils.waitFor(file22, (int) '4');
        java.lang.String[] strArray28 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file29 = org.apache.commons.io.FileUtils.getFile(strArray28);
        boolean boolean31 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file22, file29, "");
        boolean boolean32 = org.apache.commons.io.FileUtils.isFileNewer(file7, file22);
        java.io.File file33 = null;
        boolean boolean34 = org.apache.commons.io.FileUtils.contentEquals(file22, file33);
        java.lang.String[] strArray37 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file38 = org.apache.commons.io.FileUtils.getFile(strArray37);
        java.lang.String[] strArray41 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file42 = org.apache.commons.io.FileUtils.getFile(strArray41);
        boolean boolean43 = org.apache.commons.io.FileUtils.isFileOlder(file38, file42);
        boolean boolean45 = org.apache.commons.io.FileUtils.waitFor(file42, (int) '4');
        org.apache.commons.io.LineIterator lineIterator46 = org.apache.commons.io.FileUtils.lineIterator(file42);
        boolean boolean47 = org.apache.commons.io.FileUtils.deleteQuietly(file42);
        org.apache.commons.io.FileUtils.write(file42, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset51 = null;
        org.apache.commons.io.FileUtils.write(file42, (java.lang.CharSequence) "", charset51, true);
        byte[] byteArray54 = org.apache.commons.io.FileUtils.readFileToByteArray(file42);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.writeByteArrayToFile(file33, byteArray54, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.File.exists()\" because \"file\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(file18);
        org.junit.Assert.assertEquals(file18.getParent(), "hi!");
        org.junit.Assert.assertEquals(file18.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(file22);
        org.junit.Assert.assertEquals(file22.getParent(), "hi!");
        org.junit.Assert.assertEquals(file22.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(file29);
        org.junit.Assert.assertEquals(file29.getParent(), "hi!");
        org.junit.Assert.assertEquals(file29.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(file38);
        org.junit.Assert.assertEquals(file38.getParent(), "hi!");
        org.junit.Assert.assertEquals(file38.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(file42);
        org.junit.Assert.assertEquals(file42.getParent(), "hi!");
        org.junit.Assert.assertEquals(file42.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(lineIterator46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[104, 105, 33]");
    }

    @Test
    public void test236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test236");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean13 = org.apache.commons.io.FileUtils.isFileOlder(file7, (-1L));
        java.io.FileOutputStream fileOutputStream15 = org.apache.commons.io.FileUtils.openOutputStream(file7, false);
        java.lang.String[] strArray18 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file19 = org.apache.commons.io.FileUtils.getFile(strArray18);
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file23 = org.apache.commons.io.FileUtils.getFile(strArray22);
        boolean boolean24 = org.apache.commons.io.FileUtils.isFileOlder(file19, file23);
        boolean boolean26 = org.apache.commons.io.FileUtils.waitFor(file23, (int) '4');
        org.apache.commons.io.LineIterator lineIterator27 = org.apache.commons.io.FileUtils.lineIterator(file23);
        boolean boolean28 = org.apache.commons.io.FileUtils.deleteQuietly(file23);
        org.apache.commons.io.FileUtils.writeStringToFile(file23, "");
        java.lang.String[] strArray33 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file34 = org.apache.commons.io.FileUtils.getFile(strArray33);
        java.lang.String[] strArray37 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file38 = org.apache.commons.io.FileUtils.getFile(strArray37);
        boolean boolean39 = org.apache.commons.io.FileUtils.isFileOlder(file34, file38);
        boolean boolean41 = org.apache.commons.io.FileUtils.waitFor(file38, (int) '4');
        java.lang.String[] strArray44 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file45 = org.apache.commons.io.FileUtils.getFile(strArray44);
        boolean boolean47 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file38, file45, "");
        boolean boolean48 = org.apache.commons.io.FileUtils.isFileNewer(file23, file38);
        java.io.File file49 = null;
        boolean boolean50 = org.apache.commons.io.FileUtils.contentEquals(file38, file49);
        org.apache.commons.io.FileUtils.touch(file38);
        java.lang.String str52 = org.apache.commons.io.FileUtils.readFileToString(file38);
        boolean boolean53 = org.apache.commons.io.FileUtils.isFileOlder(file7, file38);
        // The following exception was thrown during execution in test generation
        try {
            long long54 = org.apache.commons.io.FileUtils.sizeOfDirectory(file7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: hi!\\hi! is not a directory");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(fileOutputStream15);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(file19);
        org.junit.Assert.assertEquals(file19.getParent(), "hi!");
        org.junit.Assert.assertEquals(file19.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(file23);
        org.junit.Assert.assertEquals(file23.getParent(), "hi!");
        org.junit.Assert.assertEquals(file23.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(lineIterator27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(file34);
        org.junit.Assert.assertEquals(file34.getParent(), "hi!");
        org.junit.Assert.assertEquals(file34.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(file38);
        org.junit.Assert.assertEquals(file38.getParent(), "hi!");
        org.junit.Assert.assertEquals(file38.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(file45);
        org.junit.Assert.assertEquals(file45.getParent(), "hi!");
        org.junit.Assert.assertEquals(file45.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test237");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean12 = org.apache.commons.io.FileUtils.deleteQuietly(file7);
        org.apache.commons.io.FileUtils.writeStringToFile(file7, "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file18 = org.apache.commons.io.FileUtils.getFile(strArray17);
        java.lang.String[] strArray21 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file22 = org.apache.commons.io.FileUtils.getFile(strArray21);
        boolean boolean23 = org.apache.commons.io.FileUtils.isFileOlder(file18, file22);
        boolean boolean25 = org.apache.commons.io.FileUtils.waitFor(file22, (int) '4');
        java.lang.String[] strArray28 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file29 = org.apache.commons.io.FileUtils.getFile(strArray28);
        boolean boolean31 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file22, file29, "");
        boolean boolean32 = org.apache.commons.io.FileUtils.isFileNewer(file7, file22);
        boolean boolean33 = org.apache.commons.io.FileUtils.isSymlink(file7);
        java.lang.String[] strArray36 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file37 = org.apache.commons.io.FileUtils.getFile(strArray36);
        java.lang.String[] strArray40 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file41 = org.apache.commons.io.FileUtils.getFile(strArray40);
        boolean boolean42 = org.apache.commons.io.FileUtils.isFileOlder(file37, file41);
        boolean boolean44 = org.apache.commons.io.FileUtils.waitFor(file41, (int) '4');
        org.apache.commons.io.LineIterator lineIterator45 = org.apache.commons.io.FileUtils.lineIterator(file41);
        boolean boolean46 = org.apache.commons.io.FileUtils.deleteQuietly(file41);
        org.apache.commons.io.FileUtils.writeStringToFile(file41, "");
        java.lang.String[] strArray51 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file52 = org.apache.commons.io.FileUtils.getFile(strArray51);
        java.lang.String[] strArray55 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file56 = org.apache.commons.io.FileUtils.getFile(strArray55);
        boolean boolean57 = org.apache.commons.io.FileUtils.isFileOlder(file52, file56);
        boolean boolean59 = org.apache.commons.io.FileUtils.waitFor(file56, (int) '4');
        java.lang.String[] strArray62 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file63 = org.apache.commons.io.FileUtils.getFile(strArray62);
        boolean boolean65 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file56, file63, "");
        boolean boolean66 = org.apache.commons.io.FileUtils.isFileNewer(file41, file56);
        java.io.FileFilter fileFilter67 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.copyDirectory(file7, file41, fileFilter67, true);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Source 'hi!\\hi!' exists but is not a directory");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(file18);
        org.junit.Assert.assertEquals(file18.getParent(), "hi!");
        org.junit.Assert.assertEquals(file18.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(file22);
        org.junit.Assert.assertEquals(file22.getParent(), "hi!");
        org.junit.Assert.assertEquals(file22.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(file29);
        org.junit.Assert.assertEquals(file29.getParent(), "hi!");
        org.junit.Assert.assertEquals(file29.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(file37);
        org.junit.Assert.assertEquals(file37.getParent(), "hi!");
        org.junit.Assert.assertEquals(file37.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(file41);
        org.junit.Assert.assertEquals(file41.getParent(), "hi!");
        org.junit.Assert.assertEquals(file41.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(lineIterator45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(file52);
        org.junit.Assert.assertEquals(file52.getParent(), "hi!");
        org.junit.Assert.assertEquals(file52.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(file56);
        org.junit.Assert.assertEquals(file56.getParent(), "hi!");
        org.junit.Assert.assertEquals(file56.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(file63);
        org.junit.Assert.assertEquals(file63.getParent(), "hi!");
        org.junit.Assert.assertEquals(file63.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test238");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean12 = org.apache.commons.io.FileUtils.deleteQuietly(file7);
        org.apache.commons.io.FileUtils.writeStringToFile(file7, "");
        org.apache.commons.io.FileUtils.forceMkdirParent(file7);
        java.nio.charset.Charset charset16 = null;
        java.lang.String str17 = org.apache.commons.io.FileUtils.readFileToString(file7, charset16);
        java.nio.charset.Charset charset19 = null;
        org.apache.commons.io.FileUtils.writeStringToFile(file7, "1 GB", charset19);
        java.lang.String[] strArray23 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file24 = org.apache.commons.io.FileUtils.getFile(strArray23);
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file28 = org.apache.commons.io.FileUtils.getFile(strArray27);
        boolean boolean29 = org.apache.commons.io.FileUtils.isFileOlder(file24, file28);
        boolean boolean31 = org.apache.commons.io.FileUtils.waitFor(file28, (int) '4');
        java.lang.String[] strArray34 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file35 = org.apache.commons.io.FileUtils.getFile(strArray34);
        boolean boolean37 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file28, file35, "");
        java.io.FileOutputStream fileOutputStream39 = org.apache.commons.io.FileUtils.openOutputStream(file28, false);
        java.util.zip.Checksum checksum40 = null;
        java.util.zip.Checksum checksum41 = org.apache.commons.io.FileUtils.checksum(file28, checksum40);
        java.nio.charset.Charset charset43 = null;
        org.apache.commons.io.FileUtils.write(file28, (java.lang.CharSequence) "hi!", charset43);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean45 = org.apache.commons.io.FileUtils.directoryContains(file7, file28);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Not a directory: hi!\\hi!");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(file24);
        org.junit.Assert.assertEquals(file24.getParent(), "hi!");
        org.junit.Assert.assertEquals(file24.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(file28);
        org.junit.Assert.assertEquals(file28.getParent(), "hi!");
        org.junit.Assert.assertEquals(file28.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(file35);
        org.junit.Assert.assertEquals(file35.getParent(), "hi!");
        org.junit.Assert.assertEquals(file35.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(fileOutputStream39);
        org.junit.Assert.assertNull(checksum41);
    }

    @Test
    public void test239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test239");
        java.io.File file0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.String> strList1 = org.apache.commons.io.FileUtils.readLines(file0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.File.exists()\" because \"file\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test240");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean12 = org.apache.commons.io.FileUtils.deleteQuietly(file7);
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset16 = null;
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "", charset16, true);
        java.nio.charset.Charset charset20 = null;
        org.apache.commons.io.FileUtils.writeStringToFile(file7, "", charset20, false);
        long long23 = org.apache.commons.io.FileUtils.sizeOf(file7);
        java.lang.String[] strArray26 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file27 = org.apache.commons.io.FileUtils.getFile(strArray26);
        java.lang.String[] strArray30 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file31 = org.apache.commons.io.FileUtils.getFile(strArray30);
        boolean boolean32 = org.apache.commons.io.FileUtils.isFileOlder(file27, file31);
        boolean boolean34 = org.apache.commons.io.FileUtils.waitFor(file31, (int) '4');
        org.apache.commons.io.LineIterator lineIterator35 = org.apache.commons.io.FileUtils.lineIterator(file31);
        boolean boolean36 = org.apache.commons.io.FileUtils.deleteQuietly(file31);
        org.apache.commons.io.FileUtils.write(file31, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset40 = null;
        org.apache.commons.io.FileUtils.write(file31, (java.lang.CharSequence) "", charset40, true);
        java.nio.charset.Charset charset44 = null;
        org.apache.commons.io.FileUtils.writeStringToFile(file31, "", charset44, false);
        long long47 = org.apache.commons.io.FileUtils.sizeOf(file31);
        org.apache.commons.io.FileUtils.writeStringToFile(file31, "");
        boolean boolean51 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file7, file31, "hi!");
        java.lang.String[] strArray54 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file55 = org.apache.commons.io.FileUtils.getFile(strArray54);
        java.lang.String[] strArray56 = new java.lang.String[] {};
        java.io.File file57 = org.apache.commons.io.FileUtils.getFile(strArray56);
        java.io.File file58 = org.apache.commons.io.FileUtils.getFile(file55, strArray56);
        java.lang.String[] strArray61 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file62 = org.apache.commons.io.FileUtils.getFile(strArray61);
        java.lang.String[] strArray65 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file66 = org.apache.commons.io.FileUtils.getFile(strArray65);
        boolean boolean67 = org.apache.commons.io.FileUtils.isFileOlder(file62, file66);
        boolean boolean69 = org.apache.commons.io.FileUtils.waitFor(file66, (int) '4');
        org.apache.commons.io.LineIterator lineIterator70 = org.apache.commons.io.FileUtils.lineIterator(file66);
        boolean boolean72 = org.apache.commons.io.FileUtils.isFileOlder(file66, (-1L));
        java.io.FileOutputStream fileOutputStream74 = org.apache.commons.io.FileUtils.openOutputStream(file66, false);
        long long75 = org.apache.commons.io.FileUtils.copyFile(file55, (java.io.OutputStream) fileOutputStream74);
        boolean boolean76 = org.apache.commons.io.FileUtils.isFileOlder(file7, file55);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter77 = null;
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter78 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<java.io.File> fileItor79 = org.apache.commons.io.FileUtils.iterateFiles(file55, iOFileFilter77, iOFileFilter78);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'directory' is not a directory: hi!\\hi!");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(file27);
        org.junit.Assert.assertEquals(file27.getParent(), "hi!");
        org.junit.Assert.assertEquals(file27.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(file31);
        org.junit.Assert.assertEquals(file31.getParent(), "hi!");
        org.junit.Assert.assertEquals(file31.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(lineIterator35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(file55);
        org.junit.Assert.assertEquals(file55.getParent(), "hi!");
        org.junit.Assert.assertEquals(file55.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNull(file57);
        org.junit.Assert.assertNotNull(file58);
        org.junit.Assert.assertEquals(file58.getParent(), "hi!");
        org.junit.Assert.assertEquals(file58.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(file62);
        org.junit.Assert.assertEquals(file62.getParent(), "hi!");
        org.junit.Assert.assertEquals(file62.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(file66);
        org.junit.Assert.assertEquals(file66.getParent(), "hi!");
        org.junit.Assert.assertEquals(file66.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(lineIterator70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(fileOutputStream74);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 0L + "'", long75 == 0L);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test241");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean12 = org.apache.commons.io.FileUtils.deleteQuietly(file7);
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset16 = null;
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "", charset16, true);
        java.nio.charset.Charset charset20 = null;
        org.apache.commons.io.FileUtils.writeStringToFile(file7, "", charset20, false);
        java.nio.charset.Charset charset24 = null;
        org.apache.commons.io.FileUtils.writeStringToFile(file7, "C:\\Users\\Mathieu\\AppData\\Local\\Temp\\", charset24);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter26 = null;
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter27 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<java.io.File> fileItor28 = org.apache.commons.io.FileUtils.iterateFiles(file7, iOFileFilter26, iOFileFilter27);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'directory' is not a directory: hi!\\hi!");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test242");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        java.lang.String[] strArray10 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file11 = org.apache.commons.io.FileUtils.getFile(strArray10);
        boolean boolean12 = org.apache.commons.io.FileUtils.isFileOlder(file7, file11);
        boolean boolean14 = org.apache.commons.io.FileUtils.waitFor(file11, (int) '4');
        org.apache.commons.io.LineIterator lineIterator15 = org.apache.commons.io.FileUtils.lineIterator(file11);
        boolean boolean16 = org.apache.commons.io.FileUtils.deleteQuietly(file11);
        org.apache.commons.io.FileUtils.write(file11, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset20 = null;
        org.apache.commons.io.FileUtils.write(file11, (java.lang.CharSequence) "", charset20, true);
        byte[] byteArray23 = org.apache.commons.io.FileUtils.readFileToByteArray(file11);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean24 = org.apache.commons.io.FileUtils.directoryContains(file3, file11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Not a directory: hi!\\hi!");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(file11);
        org.junit.Assert.assertEquals(file11.getParent(), "hi!");
        org.junit.Assert.assertEquals(file11.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(lineIterator15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[104, 105, 33]");
    }

    @Test
    public void test243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test243");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean12 = org.apache.commons.io.FileUtils.deleteQuietly(file7);
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset16 = null;
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "", charset16, true);
        java.nio.charset.Charset charset20 = null;
        org.apache.commons.io.FileUtils.writeStringToFile(file7, "", charset20, false);
        java.io.FileOutputStream fileOutputStream23 = org.apache.commons.io.FileUtils.openOutputStream(file7);
        java.lang.String[] strArray26 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file27 = org.apache.commons.io.FileUtils.getFile(strArray26);
        java.lang.String[] strArray30 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file31 = org.apache.commons.io.FileUtils.getFile(strArray30);
        boolean boolean32 = org.apache.commons.io.FileUtils.isFileOlder(file27, file31);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.copyFile(file7, file27, true);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Source 'hi!\\hi!' and destination 'hi!\\hi!' are the same");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(fileOutputStream23);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(file27);
        org.junit.Assert.assertEquals(file27.getParent(), "hi!");
        org.junit.Assert.assertEquals(file27.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(file31);
        org.junit.Assert.assertEquals(file31.getParent(), "hi!");
        org.junit.Assert.assertEquals(file31.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test244");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        java.lang.String[] strArray10 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file11 = org.apache.commons.io.FileUtils.getFile(strArray10);
        boolean boolean12 = org.apache.commons.io.FileUtils.isFileOlder(file7, file11);
        boolean boolean14 = org.apache.commons.io.FileUtils.waitFor(file11, (int) '4');
        org.apache.commons.io.LineIterator lineIterator15 = org.apache.commons.io.FileUtils.lineIterator(file11);
        boolean boolean16 = org.apache.commons.io.FileUtils.deleteQuietly(file11);
        org.apache.commons.io.FileUtils.write(file11, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset20 = null;
        org.apache.commons.io.FileUtils.write(file11, (java.lang.CharSequence) "", charset20, true);
        boolean boolean23 = org.apache.commons.io.FileUtils.contentEquals(file3, file11);
        org.apache.commons.io.FileUtils.forceMkdirParent(file3);
        java.util.Date date25 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean26 = org.apache.commons.io.FileUtils.isFileOlder(file3, date25);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No specified date");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(file11);
        org.junit.Assert.assertEquals(file11.getParent(), "hi!");
        org.junit.Assert.assertEquals(file11.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(lineIterator15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
    }

    @Test
    public void test245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test245");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean13 = org.apache.commons.io.FileUtils.isFileOlder(file7, (-1L));
        java.nio.charset.Charset charset14 = null;
        java.lang.String str15 = org.apache.commons.io.FileUtils.readFileToString(file7, charset14);
        java.io.FileOutputStream fileOutputStream17 = org.apache.commons.io.FileUtils.openOutputStream(file7, false);
        org.apache.commons.io.LineIterator lineIterator18 = org.apache.commons.io.FileUtils.lineIterator(file7);
        java.lang.String[] strArray21 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file22 = org.apache.commons.io.FileUtils.getFile(strArray21);
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file26 = org.apache.commons.io.FileUtils.getFile(strArray25);
        boolean boolean27 = org.apache.commons.io.FileUtils.isFileOlder(file22, file26);
        boolean boolean29 = org.apache.commons.io.FileUtils.waitFor(file26, (int) '4');
        org.apache.commons.io.LineIterator lineIterator30 = org.apache.commons.io.FileUtils.lineIterator(file26);
        boolean boolean31 = org.apache.commons.io.FileUtils.deleteQuietly(file26);
        org.apache.commons.io.FileUtils.writeStringToFile(file26, "");
        java.lang.String[] strArray36 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file37 = org.apache.commons.io.FileUtils.getFile(strArray36);
        java.lang.String[] strArray40 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file41 = org.apache.commons.io.FileUtils.getFile(strArray40);
        boolean boolean42 = org.apache.commons.io.FileUtils.isFileOlder(file37, file41);
        boolean boolean44 = org.apache.commons.io.FileUtils.waitFor(file41, (int) '4');
        java.lang.String[] strArray47 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file48 = org.apache.commons.io.FileUtils.getFile(strArray47);
        boolean boolean50 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file41, file48, "");
        boolean boolean51 = org.apache.commons.io.FileUtils.isFileNewer(file26, file41);
        boolean boolean52 = org.apache.commons.io.FileUtils.contentEquals(file7, file26);
        boolean boolean54 = org.apache.commons.io.FileUtils.isFileNewer(file26, 0L);
        java.nio.charset.Charset charset56 = null;
        org.apache.commons.io.FileUtils.write(file26, (java.lang.CharSequence) "C:\\Users\\Mathieu\\AppData\\Local\\Temp\\", charset56, true);
        org.apache.commons.io.FileUtils.forceDeleteOnExit(file26);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertNotNull(fileOutputStream17);
        org.junit.Assert.assertNotNull(lineIterator18);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(file22);
        org.junit.Assert.assertEquals(file22.getParent(), "hi!");
        org.junit.Assert.assertEquals(file22.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(file26);
        org.junit.Assert.assertEquals(file26.getParent(), "hi!");
        org.junit.Assert.assertEquals(file26.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(lineIterator30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(file37);
        org.junit.Assert.assertEquals(file37.getParent(), "hi!");
        org.junit.Assert.assertEquals(file37.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(file41);
        org.junit.Assert.assertEquals(file41.getParent(), "hi!");
        org.junit.Assert.assertEquals(file41.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(file48);
        org.junit.Assert.assertEquals(file48.getParent(), "hi!");
        org.junit.Assert.assertEquals(file48.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
    }

    @Test
    public void test246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test246");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        java.nio.charset.Charset charset11 = null;
        java.lang.String str12 = org.apache.commons.io.FileUtils.readFileToString(file7, charset11);
        java.lang.String[] strArray15 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file16 = org.apache.commons.io.FileUtils.getFile(strArray15);
        java.lang.String[] strArray19 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file20 = org.apache.commons.io.FileUtils.getFile(strArray19);
        boolean boolean21 = org.apache.commons.io.FileUtils.isFileOlder(file16, file20);
        boolean boolean23 = org.apache.commons.io.FileUtils.waitFor(file20, (int) '4');
        java.lang.String[] strArray26 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file27 = org.apache.commons.io.FileUtils.getFile(strArray26);
        boolean boolean29 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file20, file27, "");
        org.apache.commons.io.LineIterator lineIterator30 = org.apache.commons.io.FileUtils.lineIterator(file20);
        org.apache.commons.io.FileUtils.writeStringToFile(file20, "C:\\Users\\Mathieu\\AppData\\Local\\Temp\\", false);
        boolean boolean35 = org.apache.commons.io.FileUtils.isFileOlder(file20, (long) (short) 0);
        java.lang.String[] strArray38 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file39 = org.apache.commons.io.FileUtils.getFile(strArray38);
        java.lang.String[] strArray42 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file43 = org.apache.commons.io.FileUtils.getFile(strArray42);
        boolean boolean44 = org.apache.commons.io.FileUtils.isFileOlder(file39, file43);
        boolean boolean46 = org.apache.commons.io.FileUtils.waitFor(file43, (int) '4');
        org.apache.commons.io.LineIterator lineIterator47 = org.apache.commons.io.FileUtils.lineIterator(file43);
        boolean boolean48 = org.apache.commons.io.FileUtils.deleteQuietly(file43);
        org.apache.commons.io.FileUtils.writeStringToFile(file43, "");
        java.lang.String[] strArray53 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file54 = org.apache.commons.io.FileUtils.getFile(strArray53);
        java.lang.String[] strArray57 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file58 = org.apache.commons.io.FileUtils.getFile(strArray57);
        boolean boolean59 = org.apache.commons.io.FileUtils.isFileOlder(file54, file58);
        boolean boolean61 = org.apache.commons.io.FileUtils.waitFor(file58, (int) '4');
        java.lang.String[] strArray64 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file65 = org.apache.commons.io.FileUtils.getFile(strArray64);
        boolean boolean67 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file58, file65, "");
        boolean boolean68 = org.apache.commons.io.FileUtils.isFileNewer(file43, file58);
        java.io.FileOutputStream fileOutputStream69 = org.apache.commons.io.FileUtils.openOutputStream(file43);
        long long70 = org.apache.commons.io.FileUtils.copyFile(file20, (java.io.OutputStream) fileOutputStream69);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.copyDirectoryToDirectory(file7, file20);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Source 'hi!\\hi!' is not a directory");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "C:\\Users\\Mathieu\\AppData\\Local\\Temp\\" + "'", str12, "C:\\Users\\Mathieu\\AppData\\Local\\Temp\\");
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(file16);
        org.junit.Assert.assertEquals(file16.getParent(), "hi!");
        org.junit.Assert.assertEquals(file16.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(file20);
        org.junit.Assert.assertEquals(file20.getParent(), "hi!");
        org.junit.Assert.assertEquals(file20.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(file27);
        org.junit.Assert.assertEquals(file27.getParent(), "hi!");
        org.junit.Assert.assertEquals(file27.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(lineIterator30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(file39);
        org.junit.Assert.assertEquals(file39.getParent(), "hi!");
        org.junit.Assert.assertEquals(file39.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(file43);
        org.junit.Assert.assertEquals(file43.getParent(), "hi!");
        org.junit.Assert.assertEquals(file43.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(lineIterator47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(file54);
        org.junit.Assert.assertEquals(file54.getParent(), "hi!");
        org.junit.Assert.assertEquals(file54.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(file58);
        org.junit.Assert.assertEquals(file58.getParent(), "hi!");
        org.junit.Assert.assertEquals(file58.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(file65);
        org.junit.Assert.assertEquals(file65.getParent(), "hi!");
        org.junit.Assert.assertEquals(file65.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(fileOutputStream69);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 0L + "'", long70 == 0L);
    }

    @Test
    public void test247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test247");
        java.net.URL uRL0 = null;
        java.lang.String[] strArray3 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file4 = org.apache.commons.io.FileUtils.getFile(strArray3);
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file8 = org.apache.commons.io.FileUtils.getFile(strArray7);
        boolean boolean9 = org.apache.commons.io.FileUtils.isFileOlder(file4, file8);
        boolean boolean11 = org.apache.commons.io.FileUtils.waitFor(file8, (int) '4');
        org.apache.commons.io.LineIterator lineIterator12 = org.apache.commons.io.FileUtils.lineIterator(file8);
        boolean boolean14 = org.apache.commons.io.FileUtils.isFileOlder(file8, (-1L));
        java.nio.charset.Charset charset15 = null;
        java.lang.String str16 = org.apache.commons.io.FileUtils.readFileToString(file8, charset15);
        java.io.FileOutputStream fileOutputStream18 = org.apache.commons.io.FileUtils.openOutputStream(file8, false);
        java.io.FileOutputStream fileOutputStream20 = org.apache.commons.io.FileUtils.openOutputStream(file8, true);
        java.nio.charset.Charset charset21 = null;
        java.lang.String str22 = org.apache.commons.io.FileUtils.readFileToString(file8, charset21);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.copyURLToFile(uRL0, file8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.net.URL.openStream()\" because \"source\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(file4);
        org.junit.Assert.assertEquals(file4.getParent(), "hi!");
        org.junit.Assert.assertEquals(file4.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(file8);
        org.junit.Assert.assertEquals(file8.getParent(), "hi!");
        org.junit.Assert.assertEquals(file8.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(lineIterator12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(fileOutputStream18);
        org.junit.Assert.assertNotNull(fileOutputStream20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
    }

    @Test
    public void test248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test248");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean12 = org.apache.commons.io.FileUtils.deleteQuietly(file7);
        org.apache.commons.io.FileUtils.writeStringToFile(file7, "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file18 = org.apache.commons.io.FileUtils.getFile(strArray17);
        java.lang.String[] strArray21 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file22 = org.apache.commons.io.FileUtils.getFile(strArray21);
        boolean boolean23 = org.apache.commons.io.FileUtils.isFileOlder(file18, file22);
        boolean boolean25 = org.apache.commons.io.FileUtils.waitFor(file22, (int) '4');
        java.lang.String[] strArray28 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file29 = org.apache.commons.io.FileUtils.getFile(strArray28);
        boolean boolean31 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file22, file29, "");
        boolean boolean32 = org.apache.commons.io.FileUtils.isFileNewer(file7, file22);
        java.io.File file33 = null;
        boolean boolean34 = org.apache.commons.io.FileUtils.contentEquals(file22, file33);
        org.apache.commons.io.FileUtils.touch(file22);
        java.lang.String str36 = org.apache.commons.io.FileUtils.readFileToString(file22);
        org.apache.commons.io.FileUtils.forceMkdirParent(file22);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.String> strList39 = org.apache.commons.io.FileUtils.readLines(file22, "32 bytes");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: 32 bytes");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(file18);
        org.junit.Assert.assertEquals(file18.getParent(), "hi!");
        org.junit.Assert.assertEquals(file18.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(file22);
        org.junit.Assert.assertEquals(file22.getParent(), "hi!");
        org.junit.Assert.assertEquals(file22.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(file29);
        org.junit.Assert.assertEquals(file29.getParent(), "hi!");
        org.junit.Assert.assertEquals(file29.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
    }

    @Test
    public void test249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test249");
        java.lang.Iterable<java.io.File> fileIterable0 = null;
        java.lang.String[] strArray3 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file4 = org.apache.commons.io.FileUtils.getFile(strArray3);
        java.lang.String[] strArray5 = new java.lang.String[] {};
        java.io.File file6 = org.apache.commons.io.FileUtils.getFile(strArray5);
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(file4, strArray5);
        boolean boolean9 = org.apache.commons.io.FileUtils.isFileNewer(file4, (-1L));
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.copyToDirectory(fileIterable0, file4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: sourceIterable");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(file4);
        org.junit.Assert.assertEquals(file4.getParent(), "hi!");
        org.junit.Assert.assertEquals(file4.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNull(file6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test250");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean13 = org.apache.commons.io.FileUtils.isFileOlder(file7, (-1L));
        java.nio.charset.Charset charset14 = null;
        java.lang.String str15 = org.apache.commons.io.FileUtils.readFileToString(file7, charset14);
        org.apache.commons.io.FileUtils.writeStringToFile(file7, "hi!", true);
        java.lang.String[] strArray21 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file22 = org.apache.commons.io.FileUtils.getFile(strArray21);
        java.lang.String[] strArray23 = new java.lang.String[] {};
        java.io.File file24 = org.apache.commons.io.FileUtils.getFile(strArray23);
        java.io.File file25 = org.apache.commons.io.FileUtils.getFile(file22, strArray23);
        boolean boolean27 = org.apache.commons.io.FileUtils.isFileNewer(file22, (-1L));
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.moveDirectory(file7, file22);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Source 'hi!\\hi!' is not a directory");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(file22);
        org.junit.Assert.assertEquals(file22.getParent(), "hi!");
        org.junit.Assert.assertEquals(file22.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNull(file24);
        org.junit.Assert.assertNotNull(file25);
        org.junit.Assert.assertEquals(file25.getParent(), "hi!");
        org.junit.Assert.assertEquals(file25.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
    }

    @Test
    public void test251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test251");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file14 = org.apache.commons.io.FileUtils.getFile(strArray13);
        boolean boolean16 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file7, file14, "");
        org.apache.commons.io.FileUtils.writeStringToFile(file7, "", false);
        org.apache.commons.io.FileUtils.forceDeleteOnExit(file7);
        java.lang.String[] strArray23 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file24 = org.apache.commons.io.FileUtils.getFile(strArray23);
        java.lang.String[] strArray25 = new java.lang.String[] {};
        java.io.File file26 = org.apache.commons.io.FileUtils.getFile(strArray25);
        java.io.File file27 = org.apache.commons.io.FileUtils.getFile(file24, strArray25);
        org.apache.commons.io.LineIterator lineIterator28 = org.apache.commons.io.FileUtils.lineIterator(file27);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.moveDirectory(file7, file27);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Source 'hi!\\hi!' is not a directory");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(file14);
        org.junit.Assert.assertEquals(file14.getParent(), "hi!");
        org.junit.Assert.assertEquals(file14.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(file24);
        org.junit.Assert.assertEquals(file24.getParent(), "hi!");
        org.junit.Assert.assertEquals(file24.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNull(file26);
        org.junit.Assert.assertNotNull(file27);
        org.junit.Assert.assertEquals(file27.getParent(), "hi!");
        org.junit.Assert.assertEquals(file27.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(lineIterator28);
    }

    @Test
    public void test252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test252");
        java.lang.String str1 = org.apache.commons.io.FileUtils.byteCountToDisplaySize((long) 100);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "100 bytes" + "'", str1, "100 bytes");
    }

    @Test
    public void test253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test253");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean12 = org.apache.commons.io.FileUtils.deleteQuietly(file7);
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset16 = null;
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "", charset16, true);
        java.nio.charset.Charset charset20 = null;
        org.apache.commons.io.FileUtils.writeStringToFile(file7, "", charset20, false);
        long long23 = org.apache.commons.io.FileUtils.sizeOf(file7);
        java.lang.String[] strArray26 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file27 = org.apache.commons.io.FileUtils.getFile(strArray26);
        java.lang.String[] strArray30 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file31 = org.apache.commons.io.FileUtils.getFile(strArray30);
        boolean boolean32 = org.apache.commons.io.FileUtils.isFileOlder(file27, file31);
        boolean boolean34 = org.apache.commons.io.FileUtils.waitFor(file31, (int) '4');
        org.apache.commons.io.LineIterator lineIterator35 = org.apache.commons.io.FileUtils.lineIterator(file31);
        boolean boolean36 = org.apache.commons.io.FileUtils.deleteQuietly(file31);
        org.apache.commons.io.FileUtils.write(file31, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset40 = null;
        org.apache.commons.io.FileUtils.write(file31, (java.lang.CharSequence) "", charset40, true);
        java.nio.charset.Charset charset44 = null;
        org.apache.commons.io.FileUtils.writeStringToFile(file31, "", charset44, false);
        long long47 = org.apache.commons.io.FileUtils.sizeOf(file31);
        org.apache.commons.io.FileUtils.writeStringToFile(file31, "");
        boolean boolean51 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file7, file31, "hi!");
        java.lang.String[] strArray54 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file55 = org.apache.commons.io.FileUtils.getFile(strArray54);
        java.lang.String[] strArray56 = new java.lang.String[] {};
        java.io.File file57 = org.apache.commons.io.FileUtils.getFile(strArray56);
        java.io.File file58 = org.apache.commons.io.FileUtils.getFile(file55, strArray56);
        java.lang.String[] strArray61 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file62 = org.apache.commons.io.FileUtils.getFile(strArray61);
        java.lang.String[] strArray65 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file66 = org.apache.commons.io.FileUtils.getFile(strArray65);
        boolean boolean67 = org.apache.commons.io.FileUtils.isFileOlder(file62, file66);
        boolean boolean69 = org.apache.commons.io.FileUtils.waitFor(file66, (int) '4');
        org.apache.commons.io.LineIterator lineIterator70 = org.apache.commons.io.FileUtils.lineIterator(file66);
        boolean boolean72 = org.apache.commons.io.FileUtils.isFileOlder(file66, (-1L));
        java.io.FileOutputStream fileOutputStream74 = org.apache.commons.io.FileUtils.openOutputStream(file66, false);
        long long75 = org.apache.commons.io.FileUtils.copyFile(file55, (java.io.OutputStream) fileOutputStream74);
        boolean boolean76 = org.apache.commons.io.FileUtils.isFileOlder(file7, file55);
        java.math.BigInteger bigInteger77 = org.apache.commons.io.FileUtils.sizeOfAsBigInteger(file7);
        java.lang.String[] strArray80 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file81 = org.apache.commons.io.FileUtils.getFile(strArray80);
        java.lang.String[] strArray84 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file85 = org.apache.commons.io.FileUtils.getFile(strArray84);
        boolean boolean86 = org.apache.commons.io.FileUtils.isFileOlder(file81, file85);
        java.lang.String str87 = org.apache.commons.io.FileUtils.readFileToString(file81);
        java.util.Collection<java.lang.String> strCollection88 = null;
        org.apache.commons.io.FileUtils.writeLines(file81, strCollection88, false);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.copyDirectory(file7, file81);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Source 'hi!\\hi!' exists but is not a directory");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(file27);
        org.junit.Assert.assertEquals(file27.getParent(), "hi!");
        org.junit.Assert.assertEquals(file27.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(file31);
        org.junit.Assert.assertEquals(file31.getParent(), "hi!");
        org.junit.Assert.assertEquals(file31.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(lineIterator35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(file55);
        org.junit.Assert.assertEquals(file55.getParent(), "hi!");
        org.junit.Assert.assertEquals(file55.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNull(file57);
        org.junit.Assert.assertNotNull(file58);
        org.junit.Assert.assertEquals(file58.getParent(), "hi!");
        org.junit.Assert.assertEquals(file58.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(file62);
        org.junit.Assert.assertEquals(file62.getParent(), "hi!");
        org.junit.Assert.assertEquals(file62.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(file66);
        org.junit.Assert.assertEquals(file66.getParent(), "hi!");
        org.junit.Assert.assertEquals(file66.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(lineIterator70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(fileOutputStream74);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 0L + "'", long75 == 0L);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(bigInteger77);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertNotNull(file81);
        org.junit.Assert.assertEquals(file81.getParent(), "hi!");
        org.junit.Assert.assertEquals(file81.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertNotNull(file85);
        org.junit.Assert.assertEquals(file85.getParent(), "hi!");
        org.junit.Assert.assertEquals(file85.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "" + "'", str87, "");
    }

    @Test
    public void test254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test254");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean13 = org.apache.commons.io.FileUtils.isFileOlder(file7, (-1L));
        long long14 = org.apache.commons.io.FileUtils.sizeOf(file7);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.String> strList16 = org.apache.commons.io.FileUtils.readLines(file7, "100 bytes");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: 100 bytes");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
    }

    @Test
    public void test255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test255");
        java.io.File file0 = null;
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file5 = org.apache.commons.io.FileUtils.getFile(strArray4);
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file9 = org.apache.commons.io.FileUtils.getFile(strArray8);
        boolean boolean10 = org.apache.commons.io.FileUtils.isFileOlder(file5, file9);
        boolean boolean12 = org.apache.commons.io.FileUtils.waitFor(file9, (int) '4');
        java.lang.String[] strArray15 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file16 = org.apache.commons.io.FileUtils.getFile(strArray15);
        boolean boolean18 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file9, file16, "");
        java.io.FileOutputStream fileOutputStream20 = org.apache.commons.io.FileUtils.openOutputStream(file9, false);
        java.lang.String[] strArray27 = new java.lang.String[] { "", "1048576 EB", "C:\\Users\\Mathieu\\AppData\\Local\\Temp\\", "C:\\Users\\Mathieu", "", "1048576 EB" };
        java.util.ArrayList<java.lang.String> strList28 = new java.util.ArrayList<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList28, strArray27);
        org.apache.commons.io.FileUtils.writeLines(file9, (java.util.Collection<java.lang.String>) strList28, "1 GB", false);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.writeLines(file0, "1048576 EB", (java.util.Collection<java.lang.String>) strList28, "", true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.File.exists()\" because \"file\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(file5);
        org.junit.Assert.assertEquals(file5.getParent(), "hi!");
        org.junit.Assert.assertEquals(file5.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(file9);
        org.junit.Assert.assertEquals(file9.getParent(), "hi!");
        org.junit.Assert.assertEquals(file9.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(file16);
        org.junit.Assert.assertEquals(file16.getParent(), "hi!");
        org.junit.Assert.assertEquals(file16.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(fileOutputStream20);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
    }

    @Test
    public void test256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test256");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean12 = org.apache.commons.io.FileUtils.deleteQuietly(file7);
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset16 = null;
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "", charset16, true);
        byte[] byteArray19 = org.apache.commons.io.FileUtils.readFileToByteArray(file7);
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file23 = org.apache.commons.io.FileUtils.getFile(strArray22);
        java.lang.String[] strArray26 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file27 = org.apache.commons.io.FileUtils.getFile(strArray26);
        boolean boolean28 = org.apache.commons.io.FileUtils.isFileOlder(file23, file27);
        boolean boolean30 = org.apache.commons.io.FileUtils.waitFor(file27, (int) '4');
        org.apache.commons.io.LineIterator lineIterator31 = org.apache.commons.io.FileUtils.lineIterator(file27);
        boolean boolean32 = org.apache.commons.io.FileUtils.deleteQuietly(file27);
        org.apache.commons.io.FileUtils.write(file27, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset36 = null;
        org.apache.commons.io.FileUtils.write(file27, (java.lang.CharSequence) "", charset36, true);
        java.nio.charset.Charset charset40 = null;
        org.apache.commons.io.FileUtils.writeStringToFile(file27, "", charset40, false);
        boolean boolean43 = org.apache.commons.io.FileUtils.isFileNewer(file7, file27);
        java.lang.String[] strArray46 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file47 = org.apache.commons.io.FileUtils.getFile(strArray46);
        java.lang.String[] strArray50 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file51 = org.apache.commons.io.FileUtils.getFile(strArray50);
        boolean boolean52 = org.apache.commons.io.FileUtils.isFileOlder(file47, file51);
        boolean boolean54 = org.apache.commons.io.FileUtils.waitFor(file51, (int) '4');
        org.apache.commons.io.LineIterator lineIterator55 = org.apache.commons.io.FileUtils.lineIterator(file51);
        boolean boolean56 = org.apache.commons.io.FileUtils.deleteQuietly(file51);
        org.apache.commons.io.FileUtils.write(file51, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset60 = null;
        org.apache.commons.io.FileUtils.write(file51, (java.lang.CharSequence) "", charset60, true);
        byte[] byteArray63 = org.apache.commons.io.FileUtils.readFileToByteArray(file51);
        org.apache.commons.io.FileUtils.writeByteArrayToFile(file7, byteArray63);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.writeStringToFile(file7, "C:\\Users\\Mathieu\\AppData\\Local\\Temp\\", "1 GB1048576 EB1 GBC:\\Users\\Mathieu\\AppData\\Local\\Temp\\1 GBC:\\Users\\Mathieu1 GB1 GB1048576 EB1 GB", false);
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: 1 GB1048576 EB1 GBC:\\Users\\Mathieu\\AppData\\Local\\Temp\\1 GBC:\\Users\\Mathieu1 GB1 GB1048576 EB1 GB");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[104, 105, 33]");
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(file23);
        org.junit.Assert.assertEquals(file23.getParent(), "hi!");
        org.junit.Assert.assertEquals(file23.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(file27);
        org.junit.Assert.assertEquals(file27.getParent(), "hi!");
        org.junit.Assert.assertEquals(file27.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(lineIterator31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(file47);
        org.junit.Assert.assertEquals(file47.getParent(), "hi!");
        org.junit.Assert.assertEquals(file47.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(file51);
        org.junit.Assert.assertEquals(file51.getParent(), "hi!");
        org.junit.Assert.assertEquals(file51.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(lineIterator55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[104, 105, 33]");
    }

    @Test
    public void test257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test257");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean12 = org.apache.commons.io.FileUtils.deleteQuietly(file7);
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset16 = null;
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "", charset16, true);
        java.nio.charset.Charset charset19 = null;
        java.lang.String str20 = org.apache.commons.io.FileUtils.readFileToString(file7, charset19);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.deleteDirectory(file7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: hi!\\hi! is not a directory");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
    }

    @Test
    public void test258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test258");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean13 = org.apache.commons.io.FileUtils.isFileOlder(file7, (-1L));
        java.nio.charset.Charset charset14 = null;
        java.lang.String str15 = org.apache.commons.io.FileUtils.readFileToString(file7, charset14);
        java.io.FileOutputStream fileOutputStream17 = org.apache.commons.io.FileUtils.openOutputStream(file7, false);
        org.apache.commons.io.LineIterator lineIterator18 = org.apache.commons.io.FileUtils.lineIterator(file7);
        java.lang.String[] strArray21 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file22 = org.apache.commons.io.FileUtils.getFile(strArray21);
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file26 = org.apache.commons.io.FileUtils.getFile(strArray25);
        boolean boolean27 = org.apache.commons.io.FileUtils.isFileOlder(file22, file26);
        boolean boolean29 = org.apache.commons.io.FileUtils.waitFor(file26, (int) '4');
        org.apache.commons.io.LineIterator lineIterator30 = org.apache.commons.io.FileUtils.lineIterator(file26);
        boolean boolean31 = org.apache.commons.io.FileUtils.deleteQuietly(file26);
        org.apache.commons.io.FileUtils.writeStringToFile(file26, "");
        java.lang.String[] strArray36 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file37 = org.apache.commons.io.FileUtils.getFile(strArray36);
        java.lang.String[] strArray40 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file41 = org.apache.commons.io.FileUtils.getFile(strArray40);
        boolean boolean42 = org.apache.commons.io.FileUtils.isFileOlder(file37, file41);
        boolean boolean44 = org.apache.commons.io.FileUtils.waitFor(file41, (int) '4');
        java.lang.String[] strArray47 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file48 = org.apache.commons.io.FileUtils.getFile(strArray47);
        boolean boolean50 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file41, file48, "");
        boolean boolean51 = org.apache.commons.io.FileUtils.isFileNewer(file26, file41);
        boolean boolean52 = org.apache.commons.io.FileUtils.contentEquals(file7, file26);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter53 = null;
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter54 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Collection<java.io.File> fileCollection55 = org.apache.commons.io.FileUtils.listFilesAndDirs(file26, iOFileFilter53, iOFileFilter54);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'directory' is not a directory: hi!\\hi!");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertNotNull(fileOutputStream17);
        org.junit.Assert.assertNotNull(lineIterator18);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(file22);
        org.junit.Assert.assertEquals(file22.getParent(), "hi!");
        org.junit.Assert.assertEquals(file22.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(file26);
        org.junit.Assert.assertEquals(file26.getParent(), "hi!");
        org.junit.Assert.assertEquals(file26.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(lineIterator30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(file37);
        org.junit.Assert.assertEquals(file37.getParent(), "hi!");
        org.junit.Assert.assertEquals(file37.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(file41);
        org.junit.Assert.assertEquals(file41.getParent(), "hi!");
        org.junit.Assert.assertEquals(file41.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(file48);
        org.junit.Assert.assertEquals(file48.getParent(), "hi!");
        org.junit.Assert.assertEquals(file48.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
    }

    @Test
    public void test259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test259");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean12 = org.apache.commons.io.FileUtils.deleteQuietly(file7);
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset16 = null;
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "", charset16, true);
        java.nio.charset.Charset charset20 = null;
        org.apache.commons.io.FileUtils.writeStringToFile(file7, "", charset20, false);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter23 = null;
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter24 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<java.io.File> fileItor25 = org.apache.commons.io.FileUtils.iterateFilesAndDirs(file7, iOFileFilter23, iOFileFilter24);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'directory' is not a directory: hi!\\hi!");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test260");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean12 = org.apache.commons.io.FileUtils.deleteQuietly(file7);
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset16 = null;
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "", charset16, true);
        java.nio.charset.Charset charset20 = null;
        org.apache.commons.io.FileUtils.writeStringToFile(file7, "", charset20, false);
        long long23 = org.apache.commons.io.FileUtils.sizeOf(file7);
        java.lang.String[] strArray26 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file27 = org.apache.commons.io.FileUtils.getFile(strArray26);
        java.lang.String[] strArray30 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file31 = org.apache.commons.io.FileUtils.getFile(strArray30);
        boolean boolean32 = org.apache.commons.io.FileUtils.isFileOlder(file27, file31);
        boolean boolean34 = org.apache.commons.io.FileUtils.waitFor(file31, (int) '4');
        org.apache.commons.io.LineIterator lineIterator35 = org.apache.commons.io.FileUtils.lineIterator(file31);
        boolean boolean36 = org.apache.commons.io.FileUtils.deleteQuietly(file31);
        org.apache.commons.io.FileUtils.write(file31, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset40 = null;
        org.apache.commons.io.FileUtils.write(file31, (java.lang.CharSequence) "", charset40, true);
        java.nio.charset.Charset charset44 = null;
        org.apache.commons.io.FileUtils.writeStringToFile(file31, "", charset44, false);
        long long47 = org.apache.commons.io.FileUtils.sizeOf(file31);
        org.apache.commons.io.FileUtils.writeStringToFile(file31, "");
        boolean boolean51 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file7, file31, "hi!");
        java.lang.String[] strArray54 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file55 = org.apache.commons.io.FileUtils.getFile(strArray54);
        java.lang.String[] strArray56 = new java.lang.String[] {};
        java.io.File file57 = org.apache.commons.io.FileUtils.getFile(strArray56);
        java.io.File file58 = org.apache.commons.io.FileUtils.getFile(file55, strArray56);
        java.lang.String[] strArray61 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file62 = org.apache.commons.io.FileUtils.getFile(strArray61);
        java.lang.String[] strArray65 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file66 = org.apache.commons.io.FileUtils.getFile(strArray65);
        boolean boolean67 = org.apache.commons.io.FileUtils.isFileOlder(file62, file66);
        boolean boolean69 = org.apache.commons.io.FileUtils.waitFor(file66, (int) '4');
        org.apache.commons.io.LineIterator lineIterator70 = org.apache.commons.io.FileUtils.lineIterator(file66);
        boolean boolean72 = org.apache.commons.io.FileUtils.isFileOlder(file66, (-1L));
        java.io.FileOutputStream fileOutputStream74 = org.apache.commons.io.FileUtils.openOutputStream(file66, false);
        long long75 = org.apache.commons.io.FileUtils.copyFile(file55, (java.io.OutputStream) fileOutputStream74);
        boolean boolean76 = org.apache.commons.io.FileUtils.isFileOlder(file7, file55);
        java.math.BigInteger bigInteger77 = org.apache.commons.io.FileUtils.sizeOfAsBigInteger(file7);
        java.lang.String str78 = org.apache.commons.io.FileUtils.byteCountToDisplaySize(bigInteger77);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(file27);
        org.junit.Assert.assertEquals(file27.getParent(), "hi!");
        org.junit.Assert.assertEquals(file27.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(file31);
        org.junit.Assert.assertEquals(file31.getParent(), "hi!");
        org.junit.Assert.assertEquals(file31.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(lineIterator35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(file55);
        org.junit.Assert.assertEquals(file55.getParent(), "hi!");
        org.junit.Assert.assertEquals(file55.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNull(file57);
        org.junit.Assert.assertNotNull(file58);
        org.junit.Assert.assertEquals(file58.getParent(), "hi!");
        org.junit.Assert.assertEquals(file58.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(file62);
        org.junit.Assert.assertEquals(file62.getParent(), "hi!");
        org.junit.Assert.assertEquals(file62.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(file66);
        org.junit.Assert.assertEquals(file66.getParent(), "hi!");
        org.junit.Assert.assertEquals(file66.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(lineIterator70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(fileOutputStream74);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 0L + "'", long75 == 0L);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(bigInteger77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "0 bytes" + "'", str78, "0 bytes");
    }

    @Test
    public void test261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test261");
        java.lang.Iterable<java.io.File> fileIterable0 = null;
        java.io.File file1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.copyToDirectory(fileIterable0, file1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: sourceIterable");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test262");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean12 = org.apache.commons.io.FileUtils.deleteQuietly(file7);
        org.apache.commons.io.FileUtils.writeStringToFile(file7, "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file18 = org.apache.commons.io.FileUtils.getFile(strArray17);
        java.lang.String[] strArray21 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file22 = org.apache.commons.io.FileUtils.getFile(strArray21);
        boolean boolean23 = org.apache.commons.io.FileUtils.isFileOlder(file18, file22);
        boolean boolean25 = org.apache.commons.io.FileUtils.waitFor(file22, (int) '4');
        java.lang.String[] strArray28 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file29 = org.apache.commons.io.FileUtils.getFile(strArray28);
        boolean boolean31 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file22, file29, "");
        boolean boolean32 = org.apache.commons.io.FileUtils.isFileNewer(file7, file22);
        boolean boolean33 = org.apache.commons.io.FileUtils.isSymlink(file7);
        java.lang.String[] strArray36 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file37 = org.apache.commons.io.FileUtils.getFile(strArray36);
        java.lang.String[] strArray40 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file41 = org.apache.commons.io.FileUtils.getFile(strArray40);
        boolean boolean42 = org.apache.commons.io.FileUtils.isFileOlder(file37, file41);
        boolean boolean44 = org.apache.commons.io.FileUtils.waitFor(file41, (int) '4');
        org.apache.commons.io.LineIterator lineIterator45 = org.apache.commons.io.FileUtils.lineIterator(file41);
        boolean boolean46 = org.apache.commons.io.FileUtils.deleteQuietly(file41);
        org.apache.commons.io.FileUtils.write(file41, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset50 = null;
        org.apache.commons.io.FileUtils.write(file41, (java.lang.CharSequence) "", charset50, true);
        java.nio.charset.Charset charset54 = null;
        org.apache.commons.io.FileUtils.writeStringToFile(file41, "", charset54, false);
        java.io.FileOutputStream fileOutputStream57 = org.apache.commons.io.FileUtils.openOutputStream(file41);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.moveFile(file7, file41);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.io.FileExistsException; message: Destination 'hi!\\hi!' already exists");
        } catch (org.apache.commons.io.FileExistsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(file18);
        org.junit.Assert.assertEquals(file18.getParent(), "hi!");
        org.junit.Assert.assertEquals(file18.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(file22);
        org.junit.Assert.assertEquals(file22.getParent(), "hi!");
        org.junit.Assert.assertEquals(file22.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(file29);
        org.junit.Assert.assertEquals(file29.getParent(), "hi!");
        org.junit.Assert.assertEquals(file29.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(file37);
        org.junit.Assert.assertEquals(file37.getParent(), "hi!");
        org.junit.Assert.assertEquals(file37.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(file41);
        org.junit.Assert.assertEquals(file41.getParent(), "hi!");
        org.junit.Assert.assertEquals(file41.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(lineIterator45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(fileOutputStream57);
    }

    @Test
    public void test263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test263");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file14 = org.apache.commons.io.FileUtils.getFile(strArray13);
        boolean boolean16 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file7, file14, "");
        java.io.FileOutputStream fileOutputStream18 = org.apache.commons.io.FileUtils.openOutputStream(file7, false);
        java.util.zip.Checksum checksum19 = null;
        java.util.zip.Checksum checksum20 = org.apache.commons.io.FileUtils.checksum(file7, checksum19);
        java.io.File file21 = org.apache.commons.io.FileUtils.getTempDirectory();
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file25 = org.apache.commons.io.FileUtils.getFile(strArray24);
        java.lang.String[] strArray28 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file29 = org.apache.commons.io.FileUtils.getFile(strArray28);
        boolean boolean30 = org.apache.commons.io.FileUtils.isFileOlder(file25, file29);
        boolean boolean32 = org.apache.commons.io.FileUtils.waitFor(file29, (int) '4');
        org.apache.commons.io.LineIterator lineIterator33 = org.apache.commons.io.FileUtils.lineIterator(file29);
        boolean boolean35 = org.apache.commons.io.FileUtils.isFileOlder(file29, (-1L));
        java.nio.charset.Charset charset36 = null;
        java.lang.String str37 = org.apache.commons.io.FileUtils.readFileToString(file29, charset36);
        java.io.FileOutputStream fileOutputStream39 = org.apache.commons.io.FileUtils.openOutputStream(file29, false);
        java.io.FileOutputStream fileOutputStream41 = org.apache.commons.io.FileUtils.openOutputStream(file29, true);
        boolean boolean42 = org.apache.commons.io.FileUtils.isFileOlder(file21, file29);
        java.lang.String[] strArray49 = new java.lang.String[] { "C:\\Users\\Mathieu", "C:\\Users\\Mathieu", "", "1 GB", "hi!", "" };
        java.util.Iterator<java.io.File> fileItor51 = org.apache.commons.io.FileUtils.iterateFiles(file21, strArray49, true);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<java.io.File> fileItor53 = org.apache.commons.io.FileUtils.iterateFiles(file7, strArray49, false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'directory' is not a directory: hi!\\hi!");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(file14);
        org.junit.Assert.assertEquals(file14.getParent(), "hi!");
        org.junit.Assert.assertEquals(file14.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(fileOutputStream18);
        org.junit.Assert.assertNull(checksum20);
        org.junit.Assert.assertNotNull(file21);
        org.junit.Assert.assertEquals(file21.getParent(), "C:\\Users\\Mathieu\\AppData\\Local");
        org.junit.Assert.assertEquals(file21.toString(), "C:\\Users\\Mathieu\\AppData\\Local\\Temp");
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(file25);
        org.junit.Assert.assertEquals(file25.getParent(), "hi!");
        org.junit.Assert.assertEquals(file25.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(file29);
        org.junit.Assert.assertEquals(file29.getParent(), "hi!");
        org.junit.Assert.assertEquals(file29.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(lineIterator33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(fileOutputStream39);
        org.junit.Assert.assertNotNull(fileOutputStream41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(fileItor51);
    }

    @Test
    public void test264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test264");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean12 = org.apache.commons.io.FileUtils.deleteQuietly(file7);
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset16 = null;
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "", charset16, true);
        java.nio.charset.Charset charset20 = null;
        org.apache.commons.io.FileUtils.writeStringToFile(file7, "", charset20, false);
        long long23 = org.apache.commons.io.FileUtils.sizeOf(file7);
        java.lang.String[] strArray26 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file27 = org.apache.commons.io.FileUtils.getFile(strArray26);
        java.lang.String[] strArray30 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file31 = org.apache.commons.io.FileUtils.getFile(strArray30);
        boolean boolean32 = org.apache.commons.io.FileUtils.isFileOlder(file27, file31);
        boolean boolean34 = org.apache.commons.io.FileUtils.waitFor(file31, (int) '4');
        org.apache.commons.io.LineIterator lineIterator35 = org.apache.commons.io.FileUtils.lineIterator(file31);
        boolean boolean36 = org.apache.commons.io.FileUtils.deleteQuietly(file31);
        org.apache.commons.io.FileUtils.write(file31, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset40 = null;
        org.apache.commons.io.FileUtils.write(file31, (java.lang.CharSequence) "", charset40, true);
        java.nio.charset.Charset charset44 = null;
        org.apache.commons.io.FileUtils.writeStringToFile(file31, "", charset44, false);
        long long47 = org.apache.commons.io.FileUtils.sizeOf(file31);
        org.apache.commons.io.FileUtils.writeStringToFile(file31, "");
        boolean boolean51 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file7, file31, "hi!");
        java.lang.String[] strArray54 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file55 = org.apache.commons.io.FileUtils.getFile(strArray54);
        java.lang.String[] strArray58 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file59 = org.apache.commons.io.FileUtils.getFile(strArray58);
        boolean boolean60 = org.apache.commons.io.FileUtils.isFileOlder(file55, file59);
        boolean boolean62 = org.apache.commons.io.FileUtils.waitFor(file59, (int) '4');
        org.apache.commons.io.LineIterator lineIterator63 = org.apache.commons.io.FileUtils.lineIterator(file59);
        boolean boolean64 = org.apache.commons.io.FileUtils.deleteQuietly(file59);
        org.apache.commons.io.FileUtils.write(file59, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset68 = null;
        org.apache.commons.io.FileUtils.write(file59, (java.lang.CharSequence) "", charset68, true);
        java.nio.charset.Charset charset72 = null;
        org.apache.commons.io.FileUtils.writeStringToFile(file59, "", charset72, false);
        long long75 = org.apache.commons.io.FileUtils.sizeOf(file59);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.moveFile(file7, file59);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.io.FileExistsException; message: Destination 'hi!\\hi!' already exists");
        } catch (org.apache.commons.io.FileExistsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(file27);
        org.junit.Assert.assertEquals(file27.getParent(), "hi!");
        org.junit.Assert.assertEquals(file27.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(file31);
        org.junit.Assert.assertEquals(file31.getParent(), "hi!");
        org.junit.Assert.assertEquals(file31.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(lineIterator35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(file55);
        org.junit.Assert.assertEquals(file55.getParent(), "hi!");
        org.junit.Assert.assertEquals(file55.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(file59);
        org.junit.Assert.assertEquals(file59.getParent(), "hi!");
        org.junit.Assert.assertEquals(file59.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(lineIterator63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 0L + "'", long75 == 0L);
    }

    @Test
    public void test265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test265");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean12 = org.apache.commons.io.FileUtils.deleteQuietly(file7);
        org.apache.commons.io.FileUtils.writeStringToFile(file7, "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file18 = org.apache.commons.io.FileUtils.getFile(strArray17);
        java.lang.String[] strArray21 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file22 = org.apache.commons.io.FileUtils.getFile(strArray21);
        boolean boolean23 = org.apache.commons.io.FileUtils.isFileOlder(file18, file22);
        boolean boolean25 = org.apache.commons.io.FileUtils.waitFor(file22, (int) '4');
        java.lang.String[] strArray28 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file29 = org.apache.commons.io.FileUtils.getFile(strArray28);
        boolean boolean31 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file22, file29, "");
        boolean boolean32 = org.apache.commons.io.FileUtils.isFileNewer(file7, file22);
        java.io.FileOutputStream fileOutputStream33 = org.apache.commons.io.FileUtils.openOutputStream(file7);
        java.math.BigInteger bigInteger34 = org.apache.commons.io.FileUtils.sizeOfAsBigInteger(file7);
        java.lang.String[] strArray37 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file38 = org.apache.commons.io.FileUtils.getFile(strArray37);
        java.lang.String[] strArray41 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file42 = org.apache.commons.io.FileUtils.getFile(strArray41);
        boolean boolean43 = org.apache.commons.io.FileUtils.isFileOlder(file38, file42);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.copyDirectory(file7, file38, false);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Source 'hi!\\hi!' exists but is not a directory");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(file18);
        org.junit.Assert.assertEquals(file18.getParent(), "hi!");
        org.junit.Assert.assertEquals(file18.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(file22);
        org.junit.Assert.assertEquals(file22.getParent(), "hi!");
        org.junit.Assert.assertEquals(file22.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(file29);
        org.junit.Assert.assertEquals(file29.getParent(), "hi!");
        org.junit.Assert.assertEquals(file29.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(fileOutputStream33);
        org.junit.Assert.assertNotNull(bigInteger34);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(file38);
        org.junit.Assert.assertEquals(file38.getParent(), "hi!");
        org.junit.Assert.assertEquals(file38.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(file42);
        org.junit.Assert.assertEquals(file42.getParent(), "hi!");
        org.junit.Assert.assertEquals(file42.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test266");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean9 = org.apache.commons.io.FileUtils.deleteQuietly(file7);
        java.nio.charset.Charset charset11 = null;
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "", charset11, true);
        java.lang.String[] strArray16 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file17 = org.apache.commons.io.FileUtils.getFile(strArray16);
        java.lang.String[] strArray20 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file21 = org.apache.commons.io.FileUtils.getFile(strArray20);
        boolean boolean22 = org.apache.commons.io.FileUtils.isFileOlder(file17, file21);
        boolean boolean24 = org.apache.commons.io.FileUtils.waitFor(file21, (int) '4');
        org.apache.commons.io.LineIterator lineIterator25 = org.apache.commons.io.FileUtils.lineIterator(file21);
        java.lang.String[] strArray28 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file29 = org.apache.commons.io.FileUtils.getFile(strArray28);
        java.lang.String[] strArray32 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file33 = org.apache.commons.io.FileUtils.getFile(strArray32);
        boolean boolean34 = org.apache.commons.io.FileUtils.isFileOlder(file29, file33);
        boolean boolean36 = org.apache.commons.io.FileUtils.waitFor(file33, (int) '4');
        org.apache.commons.io.LineIterator lineIterator37 = org.apache.commons.io.FileUtils.lineIterator(file33);
        boolean boolean38 = org.apache.commons.io.FileUtils.deleteQuietly(file33);
        org.apache.commons.io.FileUtils.write(file33, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset42 = null;
        org.apache.commons.io.FileUtils.write(file33, (java.lang.CharSequence) "", charset42, true);
        byte[] byteArray45 = org.apache.commons.io.FileUtils.readFileToByteArray(file33);
        boolean boolean47 = org.apache.commons.io.FileUtils.waitFor(file33, (int) 'a');
        byte[] byteArray48 = org.apache.commons.io.FileUtils.readFileToByteArray(file33);
        org.apache.commons.io.FileUtils.writeByteArrayToFile(file21, byteArray48);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.writeByteArrayToFile(file7, byteArray48, (-1), 10, true);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(file17);
        org.junit.Assert.assertEquals(file17.getParent(), "hi!");
        org.junit.Assert.assertEquals(file17.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(file21);
        org.junit.Assert.assertEquals(file21.getParent(), "hi!");
        org.junit.Assert.assertEquals(file21.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(lineIterator25);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(file29);
        org.junit.Assert.assertEquals(file29.getParent(), "hi!");
        org.junit.Assert.assertEquals(file29.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(file33);
        org.junit.Assert.assertEquals(file33.getParent(), "hi!");
        org.junit.Assert.assertEquals(file33.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(lineIterator37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[104, 105, 33]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[104, 105, 33]");
    }

    @Test
    public void test267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test267");
        java.io.File file0 = org.apache.commons.io.FileUtils.getTempDirectory();
        boolean boolean2 = org.apache.commons.io.FileUtils.isFileOlder(file0, (long) 'a');
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.write(file0, (java.lang.CharSequence) "C:\\Users\\Mathieu");
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: File 'C:\\Users\\Mathieu\\AppData\\Local\\Temp' exists but is a directory");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(file0);
        org.junit.Assert.assertEquals(file0.getParent(), "C:\\Users\\Mathieu\\AppData\\Local");
        org.junit.Assert.assertEquals(file0.toString(), "C:\\Users\\Mathieu\\AppData\\Local\\Temp");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test268");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        java.lang.String str9 = org.apache.commons.io.FileUtils.readFileToString(file3);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.deleteDirectory(file3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: hi!\\hi! is not a directory");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
    }

    @Test
    public void test269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test269");
        java.io.File[] fileArray0 = org.apache.commons.io.FileUtils.EMPTY_FILE_ARRAY;
        java.net.URL[] uRLArray1 = org.apache.commons.io.FileUtils.toURLs(fileArray0);
        java.io.File[] fileArray2 = org.apache.commons.io.FileUtils.toFiles(uRLArray1);
        org.junit.Assert.assertNotNull(fileArray0);
        org.junit.Assert.assertNotNull(uRLArray1);
        org.junit.Assert.assertNotNull(fileArray2);
    }

    @Test
    public void test270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test270");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean12 = org.apache.commons.io.FileUtils.deleteQuietly(file7);
        java.io.FileOutputStream fileOutputStream13 = org.apache.commons.io.FileUtils.openOutputStream(file7);
        java.io.FileInputStream fileInputStream14 = org.apache.commons.io.FileUtils.openInputStream(file7);
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file18 = org.apache.commons.io.FileUtils.getFile(strArray17);
        org.apache.commons.io.FileUtils.copyToFile((java.io.InputStream) fileInputStream14, file18);
        java.lang.String[] strArray23 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file24 = org.apache.commons.io.FileUtils.getFile(strArray23);
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file28 = org.apache.commons.io.FileUtils.getFile(strArray27);
        boolean boolean29 = org.apache.commons.io.FileUtils.isFileOlder(file24, file28);
        boolean boolean31 = org.apache.commons.io.FileUtils.waitFor(file28, (int) '4');
        org.apache.commons.io.LineIterator lineIterator32 = org.apache.commons.io.FileUtils.lineIterator(file28);
        boolean boolean33 = org.apache.commons.io.FileUtils.deleteQuietly(file28);
        org.apache.commons.io.FileUtils.writeStringToFile(file28, "");
        java.lang.String[] strArray38 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file39 = org.apache.commons.io.FileUtils.getFile(strArray38);
        java.lang.String[] strArray42 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file43 = org.apache.commons.io.FileUtils.getFile(strArray42);
        boolean boolean44 = org.apache.commons.io.FileUtils.isFileOlder(file39, file43);
        boolean boolean46 = org.apache.commons.io.FileUtils.waitFor(file43, (int) '4');
        java.lang.String[] strArray49 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file50 = org.apache.commons.io.FileUtils.getFile(strArray49);
        boolean boolean52 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file43, file50, "");
        java.io.FileOutputStream fileOutputStream54 = org.apache.commons.io.FileUtils.openOutputStream(file43, false);
        java.lang.String[] strArray61 = new java.lang.String[] { "", "1048576 EB", "C:\\Users\\Mathieu\\AppData\\Local\\Temp\\", "C:\\Users\\Mathieu", "", "1048576 EB" };
        java.util.ArrayList<java.lang.String> strList62 = new java.util.ArrayList<java.lang.String>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList62, strArray61);
        org.apache.commons.io.FileUtils.writeLines(file43, (java.util.Collection<java.lang.String>) strList62, "1 GB", false);
        org.apache.commons.io.FileUtils.writeLines(file28, (java.util.Collection<java.lang.String>) strList62, true);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.writeLines(file18, "", (java.util.Collection<java.lang.String>) strList62, false);
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(fileOutputStream13);
        org.junit.Assert.assertNotNull(fileInputStream14);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(file18);
        org.junit.Assert.assertEquals(file18.getParent(), "hi!");
        org.junit.Assert.assertEquals(file18.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(file24);
        org.junit.Assert.assertEquals(file24.getParent(), "hi!");
        org.junit.Assert.assertEquals(file24.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(file28);
        org.junit.Assert.assertEquals(file28.getParent(), "hi!");
        org.junit.Assert.assertEquals(file28.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(lineIterator32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(file39);
        org.junit.Assert.assertEquals(file39.getParent(), "hi!");
        org.junit.Assert.assertEquals(file39.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(file43);
        org.junit.Assert.assertEquals(file43.getParent(), "hi!");
        org.junit.Assert.assertEquals(file43.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(file50);
        org.junit.Assert.assertEquals(file50.getParent(), "hi!");
        org.junit.Assert.assertEquals(file50.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(fileOutputStream54);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
    }

    @Test
    public void test271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test271");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean12 = org.apache.commons.io.FileUtils.deleteQuietly(file7);
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset16 = null;
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "", charset16, true);
        byte[] byteArray19 = org.apache.commons.io.FileUtils.readFileToByteArray(file7);
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file23 = org.apache.commons.io.FileUtils.getFile(strArray22);
        java.lang.String[] strArray26 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file27 = org.apache.commons.io.FileUtils.getFile(strArray26);
        boolean boolean28 = org.apache.commons.io.FileUtils.isFileOlder(file23, file27);
        boolean boolean30 = org.apache.commons.io.FileUtils.waitFor(file27, (int) '4');
        org.apache.commons.io.LineIterator lineIterator31 = org.apache.commons.io.FileUtils.lineIterator(file27);
        boolean boolean32 = org.apache.commons.io.FileUtils.deleteQuietly(file27);
        org.apache.commons.io.FileUtils.write(file27, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset36 = null;
        org.apache.commons.io.FileUtils.write(file27, (java.lang.CharSequence) "", charset36, true);
        java.nio.charset.Charset charset40 = null;
        org.apache.commons.io.FileUtils.writeStringToFile(file27, "", charset40, false);
        boolean boolean43 = org.apache.commons.io.FileUtils.isFileNewer(file7, file27);
        java.nio.charset.Charset charset45 = null;
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "-1 bytes", charset45);
        long long47 = org.apache.commons.io.FileUtils.checksumCRC32(file7);
        java.lang.String[] strArray50 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file51 = org.apache.commons.io.FileUtils.getFile(strArray50);
        boolean boolean53 = org.apache.commons.io.FileUtils.waitFor(file51, 100);
        java.io.FileFilter fileFilter54 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.copyDirectory(file7, file51, fileFilter54);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Source 'hi!\\hi!' exists but is not a directory");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[104, 105, 33]");
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(file23);
        org.junit.Assert.assertEquals(file23.getParent(), "hi!");
        org.junit.Assert.assertEquals(file23.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(file27);
        org.junit.Assert.assertEquals(file27.getParent(), "hi!");
        org.junit.Assert.assertEquals(file27.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(lineIterator31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 2035464173L + "'", long47 == 2035464173L);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(file51);
        org.junit.Assert.assertEquals(file51.getParent(), "hi!");
        org.junit.Assert.assertEquals(file51.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
    }

    @Test
    @Disabled
    public void test272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test272");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean13 = org.apache.commons.io.FileUtils.isFileOlder(file7, (-1L));
        java.nio.charset.Charset charset14 = null;
        java.lang.String str15 = org.apache.commons.io.FileUtils.readFileToString(file7, charset14);
        java.io.FileOutputStream fileOutputStream17 = org.apache.commons.io.FileUtils.openOutputStream(file7, false);
        boolean boolean19 = org.apache.commons.io.FileUtils.isFileOlder(file7, 1125899906842624L);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "32 bytes" + "'", str15, "32 bytes");
        org.junit.Assert.assertNotNull(fileOutputStream17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test273");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file14 = org.apache.commons.io.FileUtils.getFile(strArray13);
        boolean boolean16 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file7, file14, "");
        org.apache.commons.io.LineIterator lineIterator17 = org.apache.commons.io.FileUtils.lineIterator(file7);
        java.lang.String[] strArray20 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file21 = org.apache.commons.io.FileUtils.getFile(strArray20);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Collection<java.io.File> fileCollection23 = org.apache.commons.io.FileUtils.listFiles(file7, strArray20, false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'directory' is not a directory: hi!\\hi!");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(file14);
        org.junit.Assert.assertEquals(file14.getParent(), "hi!");
        org.junit.Assert.assertEquals(file14.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(lineIterator17);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(file21);
        org.junit.Assert.assertEquals(file21.getParent(), "hi!");
        org.junit.Assert.assertEquals(file21.toString(), "hi!\\hi!");
    }

    @Test
    public void test274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test274");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean12 = org.apache.commons.io.FileUtils.deleteQuietly(file7);
        java.io.FileOutputStream fileOutputStream13 = org.apache.commons.io.FileUtils.openOutputStream(file7);
        java.io.FileInputStream fileInputStream14 = org.apache.commons.io.FileUtils.openInputStream(file7);
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file18 = org.apache.commons.io.FileUtils.getFile(strArray17);
        org.apache.commons.io.FileUtils.copyToFile((java.io.InputStream) fileInputStream14, file18);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.forceDelete(file18);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Unable to delete file: hi!\\hi!");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(fileOutputStream13);
        org.junit.Assert.assertNotNull(fileInputStream14);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(file18);
        org.junit.Assert.assertEquals(file18.getParent(), "hi!");
        org.junit.Assert.assertEquals(file18.toString(), "hi!\\hi!");
    }

    @Test
    public void test275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test275");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean12 = org.apache.commons.io.FileUtils.deleteQuietly(file7);
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset16 = null;
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "", charset16, true);
        byte[] byteArray19 = org.apache.commons.io.FileUtils.readFileToByteArray(file7);
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file23 = org.apache.commons.io.FileUtils.getFile(strArray22);
        java.lang.String[] strArray26 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file27 = org.apache.commons.io.FileUtils.getFile(strArray26);
        boolean boolean28 = org.apache.commons.io.FileUtils.isFileOlder(file23, file27);
        boolean boolean30 = org.apache.commons.io.FileUtils.waitFor(file27, (int) '4');
        org.apache.commons.io.LineIterator lineIterator31 = org.apache.commons.io.FileUtils.lineIterator(file27);
        boolean boolean32 = org.apache.commons.io.FileUtils.deleteQuietly(file27);
        org.apache.commons.io.FileUtils.write(file27, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset36 = null;
        org.apache.commons.io.FileUtils.write(file27, (java.lang.CharSequence) "", charset36, true);
        java.nio.charset.Charset charset40 = null;
        org.apache.commons.io.FileUtils.writeStringToFile(file27, "", charset40, false);
        boolean boolean43 = org.apache.commons.io.FileUtils.isFileNewer(file7, file27);
        java.lang.String[] strArray47 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file48 = org.apache.commons.io.FileUtils.getFile(strArray47);
        java.lang.String[] strArray51 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file52 = org.apache.commons.io.FileUtils.getFile(strArray51);
        boolean boolean53 = org.apache.commons.io.FileUtils.isFileOlder(file48, file52);
        boolean boolean55 = org.apache.commons.io.FileUtils.waitFor(file52, (int) '4');
        org.apache.commons.io.LineIterator lineIterator56 = org.apache.commons.io.FileUtils.lineIterator(file52);
        boolean boolean57 = org.apache.commons.io.FileUtils.deleteQuietly(file52);
        org.apache.commons.io.FileUtils.write(file52, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset61 = null;
        org.apache.commons.io.FileUtils.write(file52, (java.lang.CharSequence) "", charset61, true);
        java.nio.charset.Charset charset65 = null;
        org.apache.commons.io.FileUtils.writeStringToFile(file52, "", charset65, false);
        long long68 = org.apache.commons.io.FileUtils.sizeOf(file52);
        org.apache.commons.io.FileUtils.writeStringToFile(file52, "");
        java.nio.charset.Charset charset71 = null;
        java.util.List<java.lang.String> strList72 = org.apache.commons.io.FileUtils.readLines(file52, charset71);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.writeLines(file27, "C:\\Users\\Mathieu", (java.util.Collection<java.lang.String>) strList72, "35 bytes");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: C:\\Users\\Mathieu");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[104, 105, 33]");
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(file23);
        org.junit.Assert.assertEquals(file23.getParent(), "hi!");
        org.junit.Assert.assertEquals(file23.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(file27);
        org.junit.Assert.assertEquals(file27.getParent(), "hi!");
        org.junit.Assert.assertEquals(file27.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(lineIterator31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(file48);
        org.junit.Assert.assertEquals(file48.getParent(), "hi!");
        org.junit.Assert.assertEquals(file48.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(file52);
        org.junit.Assert.assertEquals(file52.getParent(), "hi!");
        org.junit.Assert.assertEquals(file52.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(lineIterator56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 0L + "'", long68 == 0L);
        org.junit.Assert.assertNotNull(strList72);
    }

    @Test
    public void test276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test276");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file14 = org.apache.commons.io.FileUtils.getFile(strArray13);
        boolean boolean16 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file7, file14, "");
        java.io.FileOutputStream fileOutputStream18 = org.apache.commons.io.FileUtils.openOutputStream(file7, false);
        java.lang.String[] strArray21 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file22 = org.apache.commons.io.FileUtils.getFile(strArray21);
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file26 = org.apache.commons.io.FileUtils.getFile(strArray25);
        boolean boolean27 = org.apache.commons.io.FileUtils.isFileOlder(file22, file26);
        boolean boolean29 = org.apache.commons.io.FileUtils.waitFor(file26, (int) '4');
        org.apache.commons.io.LineIterator lineIterator30 = org.apache.commons.io.FileUtils.lineIterator(file26);
        boolean boolean31 = org.apache.commons.io.FileUtils.deleteQuietly(file26);
        org.apache.commons.io.FileUtils.write(file26, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset35 = null;
        org.apache.commons.io.FileUtils.write(file26, (java.lang.CharSequence) "", charset35, true);
        java.nio.charset.Charset charset39 = null;
        org.apache.commons.io.FileUtils.writeStringToFile(file26, "", charset39, false);
        long long42 = org.apache.commons.io.FileUtils.sizeOf(file26);
        java.lang.String[] strArray45 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file46 = org.apache.commons.io.FileUtils.getFile(strArray45);
        java.lang.String[] strArray49 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file50 = org.apache.commons.io.FileUtils.getFile(strArray49);
        boolean boolean51 = org.apache.commons.io.FileUtils.isFileOlder(file46, file50);
        boolean boolean53 = org.apache.commons.io.FileUtils.waitFor(file50, (int) '4');
        org.apache.commons.io.LineIterator lineIterator54 = org.apache.commons.io.FileUtils.lineIterator(file50);
        boolean boolean55 = org.apache.commons.io.FileUtils.deleteQuietly(file50);
        org.apache.commons.io.FileUtils.write(file50, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset59 = null;
        org.apache.commons.io.FileUtils.write(file50, (java.lang.CharSequence) "", charset59, true);
        java.nio.charset.Charset charset63 = null;
        org.apache.commons.io.FileUtils.writeStringToFile(file50, "", charset63, false);
        long long66 = org.apache.commons.io.FileUtils.sizeOf(file50);
        org.apache.commons.io.FileUtils.writeStringToFile(file50, "");
        boolean boolean70 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file26, file50, "hi!");
        boolean boolean72 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file7, file50, "-1 bytes");
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigInteger bigInteger73 = org.apache.commons.io.FileUtils.sizeOfDirectoryAsBigInteger(file7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: hi!\\hi! is not a directory");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(file14);
        org.junit.Assert.assertEquals(file14.getParent(), "hi!");
        org.junit.Assert.assertEquals(file14.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(fileOutputStream18);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(file22);
        org.junit.Assert.assertEquals(file22.getParent(), "hi!");
        org.junit.Assert.assertEquals(file22.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(file26);
        org.junit.Assert.assertEquals(file26.getParent(), "hi!");
        org.junit.Assert.assertEquals(file26.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(lineIterator30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(file46);
        org.junit.Assert.assertEquals(file46.getParent(), "hi!");
        org.junit.Assert.assertEquals(file46.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(file50);
        org.junit.Assert.assertEquals(file50.getParent(), "hi!");
        org.junit.Assert.assertEquals(file50.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(lineIterator54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 0L + "'", long66 == 0L);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
    }

    @Test
    public void test277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test277");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file14 = org.apache.commons.io.FileUtils.getFile(strArray13);
        boolean boolean16 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file7, file14, "");
        org.apache.commons.io.LineIterator lineIterator17 = org.apache.commons.io.FileUtils.lineIterator(file7);
        org.apache.commons.io.FileUtils.writeStringToFile(file7, "C:\\Users\\Mathieu\\AppData\\Local\\Temp\\", false);
        java.nio.charset.Charset charset22 = null;
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "", charset22, true);
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file28 = org.apache.commons.io.FileUtils.getFile(strArray27);
        java.lang.String[] strArray31 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file32 = org.apache.commons.io.FileUtils.getFile(strArray31);
        boolean boolean33 = org.apache.commons.io.FileUtils.isFileOlder(file28, file32);
        boolean boolean35 = org.apache.commons.io.FileUtils.waitFor(file32, (int) '4');
        org.apache.commons.io.LineIterator lineIterator36 = org.apache.commons.io.FileUtils.lineIterator(file32);
        boolean boolean37 = org.apache.commons.io.FileUtils.deleteQuietly(file32);
        org.apache.commons.io.FileUtils.write(file32, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset41 = null;
        org.apache.commons.io.FileUtils.write(file32, (java.lang.CharSequence) "", charset41, true);
        byte[] byteArray44 = org.apache.commons.io.FileUtils.readFileToByteArray(file32);
        org.apache.commons.io.FileUtils.writeByteArrayToFile(file7, byteArray44);
        java.nio.charset.Charset charset47 = null;
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "", charset47);
        java.lang.String[] strArray51 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file52 = org.apache.commons.io.FileUtils.getFile(strArray51);
        java.lang.String[] strArray55 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file56 = org.apache.commons.io.FileUtils.getFile(strArray55);
        boolean boolean57 = org.apache.commons.io.FileUtils.isFileOlder(file52, file56);
        boolean boolean59 = org.apache.commons.io.FileUtils.waitFor(file56, (int) '4');
        java.lang.String[] strArray62 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file63 = org.apache.commons.io.FileUtils.getFile(strArray62);
        boolean boolean65 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file56, file63, "");
        org.apache.commons.io.LineIterator lineIterator66 = org.apache.commons.io.FileUtils.lineIterator(file56);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean67 = org.apache.commons.io.FileUtils.directoryContains(file7, file56);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Not a directory: hi!\\hi!");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(file14);
        org.junit.Assert.assertEquals(file14.getParent(), "hi!");
        org.junit.Assert.assertEquals(file14.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(lineIterator17);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(file28);
        org.junit.Assert.assertEquals(file28.getParent(), "hi!");
        org.junit.Assert.assertEquals(file28.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(file32);
        org.junit.Assert.assertEquals(file32.getParent(), "hi!");
        org.junit.Assert.assertEquals(file32.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(lineIterator36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[104, 105, 33]");
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(file52);
        org.junit.Assert.assertEquals(file52.getParent(), "hi!");
        org.junit.Assert.assertEquals(file52.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(file56);
        org.junit.Assert.assertEquals(file56.getParent(), "hi!");
        org.junit.Assert.assertEquals(file56.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(file63);
        org.junit.Assert.assertEquals(file63.getParent(), "hi!");
        org.junit.Assert.assertEquals(file63.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(lineIterator66);
    }

    @Test
    public void test278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test278");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean13 = org.apache.commons.io.FileUtils.isFileOlder(file7, (-1L));
        java.nio.charset.Charset charset14 = null;
        java.lang.String str15 = org.apache.commons.io.FileUtils.readFileToString(file7, charset14);
        java.io.FileOutputStream fileOutputStream17 = org.apache.commons.io.FileUtils.openOutputStream(file7, false);
        org.apache.commons.io.LineIterator lineIterator18 = org.apache.commons.io.FileUtils.lineIterator(file7);
        java.lang.String[] strArray21 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file22 = org.apache.commons.io.FileUtils.getFile(strArray21);
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file26 = org.apache.commons.io.FileUtils.getFile(strArray25);
        boolean boolean27 = org.apache.commons.io.FileUtils.isFileOlder(file22, file26);
        boolean boolean29 = org.apache.commons.io.FileUtils.waitFor(file26, (int) '4');
        org.apache.commons.io.LineIterator lineIterator30 = org.apache.commons.io.FileUtils.lineIterator(file26);
        boolean boolean31 = org.apache.commons.io.FileUtils.deleteQuietly(file26);
        org.apache.commons.io.FileUtils.writeStringToFile(file26, "");
        java.lang.String[] strArray36 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file37 = org.apache.commons.io.FileUtils.getFile(strArray36);
        java.lang.String[] strArray40 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file41 = org.apache.commons.io.FileUtils.getFile(strArray40);
        boolean boolean42 = org.apache.commons.io.FileUtils.isFileOlder(file37, file41);
        boolean boolean44 = org.apache.commons.io.FileUtils.waitFor(file41, (int) '4');
        java.lang.String[] strArray47 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file48 = org.apache.commons.io.FileUtils.getFile(strArray47);
        boolean boolean50 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file41, file48, "");
        boolean boolean51 = org.apache.commons.io.FileUtils.isFileNewer(file26, file41);
        boolean boolean52 = org.apache.commons.io.FileUtils.contentEquals(file7, file26);
        java.lang.String[] strArray55 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file56 = org.apache.commons.io.FileUtils.getFile(strArray55);
        java.io.File file57 = org.apache.commons.io.FileUtils.getFile(strArray55);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.moveToDirectory(file26, file57, true);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Destination 'hi!\\hi!' is not a directory");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(fileOutputStream17);
        org.junit.Assert.assertNotNull(lineIterator18);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(file22);
        org.junit.Assert.assertEquals(file22.getParent(), "hi!");
        org.junit.Assert.assertEquals(file22.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(file26);
        org.junit.Assert.assertEquals(file26.getParent(), "hi!");
        org.junit.Assert.assertEquals(file26.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(lineIterator30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(file37);
        org.junit.Assert.assertEquals(file37.getParent(), "hi!");
        org.junit.Assert.assertEquals(file37.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(file41);
        org.junit.Assert.assertEquals(file41.getParent(), "hi!");
        org.junit.Assert.assertEquals(file41.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(file48);
        org.junit.Assert.assertEquals(file48.getParent(), "hi!");
        org.junit.Assert.assertEquals(file48.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(file56);
        org.junit.Assert.assertEquals(file56.getParent(), "hi!");
        org.junit.Assert.assertEquals(file56.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(file57);
        org.junit.Assert.assertEquals(file57.getParent(), "hi!");
        org.junit.Assert.assertEquals(file57.toString(), "hi!\\hi!");
    }

    @Test
    public void test279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test279");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file14 = org.apache.commons.io.FileUtils.getFile(strArray13);
        boolean boolean16 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file7, file14, "");
        org.apache.commons.io.LineIterator lineIterator17 = org.apache.commons.io.FileUtils.lineIterator(file7);
        org.apache.commons.io.FileUtils.writeStringToFile(file7, "C:\\Users\\Mathieu\\AppData\\Local\\Temp\\", false);
        java.nio.charset.Charset charset22 = null;
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "", charset22, true);
        boolean boolean26 = org.apache.commons.io.FileUtils.waitFor(file7, 0);
        org.apache.commons.io.FileUtils.writeStringToFile(file7, "C:\\Users\\Mathieu\\AppData\\Local\\Temp\\");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "100 bytes", "C:\\Users\\Mathieu\\AppData\\Local\\Temp\\", true);
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: C:\\Users\\Mathieu\\AppData\\Local\\Temp\\");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(file14);
        org.junit.Assert.assertEquals(file14.getParent(), "hi!");
        org.junit.Assert.assertEquals(file14.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(lineIterator17);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
    }

    @Test
    public void test280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test280");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean12 = org.apache.commons.io.FileUtils.deleteQuietly(file7);
        org.apache.commons.io.FileUtils.forceDeleteOnExit(file7);
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file18 = org.apache.commons.io.FileUtils.getFile(strArray17);
        java.lang.String[] strArray21 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file22 = org.apache.commons.io.FileUtils.getFile(strArray21);
        boolean boolean23 = org.apache.commons.io.FileUtils.isFileOlder(file18, file22);
        boolean boolean25 = org.apache.commons.io.FileUtils.waitFor(file22, (int) '4');
        org.apache.commons.io.LineIterator lineIterator26 = org.apache.commons.io.FileUtils.lineIterator(file22);
        boolean boolean27 = org.apache.commons.io.FileUtils.deleteQuietly(file22);
        org.apache.commons.io.FileUtils.write(file22, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset31 = null;
        org.apache.commons.io.FileUtils.write(file22, (java.lang.CharSequence) "", charset31, true);
        java.nio.charset.Charset charset35 = null;
        org.apache.commons.io.FileUtils.writeStringToFile(file22, "", charset35, false);
        long long38 = org.apache.commons.io.FileUtils.sizeOf(file22);
        org.apache.commons.io.FileUtils.writeStringToFile(file22, "");
        java.nio.charset.Charset charset41 = null;
        java.util.List<java.lang.String> strList42 = org.apache.commons.io.FileUtils.readLines(file22, charset41);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.writeLines(file7, "-1 bytes", (java.util.Collection<java.lang.String>) strList42);
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: -1 bytes");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(file18);
        org.junit.Assert.assertEquals(file18.getParent(), "hi!");
        org.junit.Assert.assertEquals(file18.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(file22);
        org.junit.Assert.assertEquals(file22.getParent(), "hi!");
        org.junit.Assert.assertEquals(file22.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(lineIterator26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertNotNull(strList42);
    }

    @Test
    public void test281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test281");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean12 = org.apache.commons.io.FileUtils.deleteQuietly(file7);
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset16 = null;
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "", charset16, true);
        java.nio.charset.Charset charset20 = null;
        org.apache.commons.io.FileUtils.writeStringToFile(file7, "", charset20, false);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.writeStringToFile(file7, "-1 bytes", "100 bytes", false);
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: 100 bytes");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test282");
        java.net.URL uRL0 = null;
        java.lang.String[] strArray3 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file4 = org.apache.commons.io.FileUtils.getFile(strArray3);
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file8 = org.apache.commons.io.FileUtils.getFile(strArray7);
        boolean boolean9 = org.apache.commons.io.FileUtils.isFileOlder(file4, file8);
        boolean boolean11 = org.apache.commons.io.FileUtils.waitFor(file8, (int) '4');
        java.lang.String[] strArray14 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file15 = org.apache.commons.io.FileUtils.getFile(strArray14);
        boolean boolean17 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file8, file15, "");
        org.apache.commons.io.LineIterator lineIterator18 = org.apache.commons.io.FileUtils.lineIterator(file8);
        org.apache.commons.io.FileUtils.writeStringToFile(file8, "C:\\Users\\Mathieu\\AppData\\Local\\Temp\\", false);
        java.nio.charset.Charset charset23 = null;
        org.apache.commons.io.FileUtils.write(file8, (java.lang.CharSequence) "", charset23, true);
        java.lang.String[] strArray28 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file29 = org.apache.commons.io.FileUtils.getFile(strArray28);
        java.lang.String[] strArray32 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file33 = org.apache.commons.io.FileUtils.getFile(strArray32);
        boolean boolean34 = org.apache.commons.io.FileUtils.isFileOlder(file29, file33);
        boolean boolean36 = org.apache.commons.io.FileUtils.waitFor(file33, (int) '4');
        org.apache.commons.io.LineIterator lineIterator37 = org.apache.commons.io.FileUtils.lineIterator(file33);
        boolean boolean38 = org.apache.commons.io.FileUtils.deleteQuietly(file33);
        org.apache.commons.io.FileUtils.write(file33, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset42 = null;
        org.apache.commons.io.FileUtils.write(file33, (java.lang.CharSequence) "", charset42, true);
        byte[] byteArray45 = org.apache.commons.io.FileUtils.readFileToByteArray(file33);
        org.apache.commons.io.FileUtils.writeByteArrayToFile(file8, byteArray45);
        java.nio.charset.Charset charset48 = null;
        org.apache.commons.io.FileUtils.write(file8, (java.lang.CharSequence) "", charset48);
        java.lang.String[] strArray52 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file53 = org.apache.commons.io.FileUtils.getFile(strArray52);
        java.lang.String[] strArray56 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file57 = org.apache.commons.io.FileUtils.getFile(strArray56);
        boolean boolean58 = org.apache.commons.io.FileUtils.isFileOlder(file53, file57);
        boolean boolean60 = org.apache.commons.io.FileUtils.waitFor(file57, (int) '4');
        org.apache.commons.io.LineIterator lineIterator61 = org.apache.commons.io.FileUtils.lineIterator(file57);
        boolean boolean62 = org.apache.commons.io.FileUtils.deleteQuietly(file57);
        org.apache.commons.io.FileUtils.write(file57, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset66 = null;
        org.apache.commons.io.FileUtils.write(file57, (java.lang.CharSequence) "", charset66, true);
        java.nio.charset.Charset charset70 = null;
        org.apache.commons.io.FileUtils.writeStringToFile(file57, "", charset70, false);
        long long73 = org.apache.commons.io.FileUtils.sizeOf(file57);
        org.apache.commons.io.FileUtils.writeStringToFile(file57, "");
        java.nio.charset.Charset charset76 = null;
        java.util.List<java.lang.String> strList77 = org.apache.commons.io.FileUtils.readLines(file57, charset76);
        org.apache.commons.io.FileUtils.writeLines(file8, (java.util.Collection<java.lang.String>) strList77, "hi!");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.copyURLToFile(uRL0, file8, (int) '4', (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.net.URL.openConnection()\" because \"source\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(file4);
        org.junit.Assert.assertEquals(file4.getParent(), "hi!");
        org.junit.Assert.assertEquals(file4.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(file8);
        org.junit.Assert.assertEquals(file8.getParent(), "hi!");
        org.junit.Assert.assertEquals(file8.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(file15);
        org.junit.Assert.assertEquals(file15.getParent(), "hi!");
        org.junit.Assert.assertEquals(file15.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(lineIterator18);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(file29);
        org.junit.Assert.assertEquals(file29.getParent(), "hi!");
        org.junit.Assert.assertEquals(file29.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(file33);
        org.junit.Assert.assertEquals(file33.getParent(), "hi!");
        org.junit.Assert.assertEquals(file33.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(lineIterator37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[104, 105, 33]");
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(file53);
        org.junit.Assert.assertEquals(file53.getParent(), "hi!");
        org.junit.Assert.assertEquals(file53.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(file57);
        org.junit.Assert.assertEquals(file57.getParent(), "hi!");
        org.junit.Assert.assertEquals(file57.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(lineIterator61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 0L + "'", long73 == 0L);
        org.junit.Assert.assertNotNull(strList77);
    }

    @Test
    public void test283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test283");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean13 = org.apache.commons.io.FileUtils.isFileOlder(file7, (-1L));
        long long14 = org.apache.commons.io.FileUtils.sizeOf(file7);
        java.io.File file15 = org.apache.commons.io.FileUtils.getUserDirectory();
        org.apache.commons.io.FileUtils.copyFileToDirectory(file7, file15, true);
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "hi!", true);
        java.nio.charset.Charset charset22 = null;
        org.apache.commons.io.FileUtils.writeStringToFile(file7, "", charset22, false);
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file28 = org.apache.commons.io.FileUtils.getFile(strArray27);
        java.lang.String[] strArray31 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file32 = org.apache.commons.io.FileUtils.getFile(strArray31);
        boolean boolean33 = org.apache.commons.io.FileUtils.isFileOlder(file28, file32);
        boolean boolean34 = org.apache.commons.io.FileUtils.deleteQuietly(file32);
        java.lang.String[] strArray37 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file38 = org.apache.commons.io.FileUtils.getFile(strArray37);
        java.lang.String[] strArray41 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file42 = org.apache.commons.io.FileUtils.getFile(strArray41);
        boolean boolean43 = org.apache.commons.io.FileUtils.isFileOlder(file38, file42);
        boolean boolean45 = org.apache.commons.io.FileUtils.waitFor(file42, (int) '4');
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file49 = org.apache.commons.io.FileUtils.getFile(strArray48);
        boolean boolean51 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file42, file49, "");
        org.apache.commons.io.LineIterator lineIterator52 = org.apache.commons.io.FileUtils.lineIterator(file42);
        org.apache.commons.io.FileUtils.writeStringToFile(file42, "C:\\Users\\Mathieu\\AppData\\Local\\Temp\\", false);
        java.nio.charset.Charset charset57 = null;
        org.apache.commons.io.FileUtils.write(file42, (java.lang.CharSequence) "", charset57, true);
        boolean boolean61 = org.apache.commons.io.FileUtils.waitFor(file42, 0);
        boolean boolean62 = org.apache.commons.io.FileUtils.isFileOlder(file32, file42);
        java.lang.String[] strArray65 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file66 = org.apache.commons.io.FileUtils.getFile(strArray65);
        java.lang.String[] strArray69 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file70 = org.apache.commons.io.FileUtils.getFile(strArray69);
        boolean boolean71 = org.apache.commons.io.FileUtils.isFileOlder(file66, file70);
        boolean boolean73 = org.apache.commons.io.FileUtils.waitFor(file70, (int) '4');
        org.apache.commons.io.LineIterator lineIterator74 = org.apache.commons.io.FileUtils.lineIterator(file70);
        boolean boolean75 = org.apache.commons.io.FileUtils.deleteQuietly(file70);
        org.apache.commons.io.FileUtils.write(file70, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset79 = null;
        org.apache.commons.io.FileUtils.write(file70, (java.lang.CharSequence) "", charset79, true);
        java.nio.charset.Charset charset83 = null;
        org.apache.commons.io.FileUtils.writeStringToFile(file70, "", charset83, false);
        java.io.FileOutputStream fileOutputStream86 = org.apache.commons.io.FileUtils.openOutputStream(file70);
        long long87 = org.apache.commons.io.FileUtils.copyFile(file32, (java.io.OutputStream) fileOutputStream86);
        byte[] byteArray92 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) 1 };
        org.apache.commons.io.FileUtils.writeByteArrayToFile(file32, byteArray92);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.copyFile(file7, file32);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Source 'hi!\\hi!' and destination 'hi!\\hi!' are the same");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(file15);
        org.junit.Assert.assertEquals(file15.getParent(), "C:\\Users");
        org.junit.Assert.assertEquals(file15.toString(), "C:\\Users\\Mathieu");
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(file28);
        org.junit.Assert.assertEquals(file28.getParent(), "hi!");
        org.junit.Assert.assertEquals(file28.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(file32);
        org.junit.Assert.assertEquals(file32.getParent(), "hi!");
        org.junit.Assert.assertEquals(file32.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(file38);
        org.junit.Assert.assertEquals(file38.getParent(), "hi!");
        org.junit.Assert.assertEquals(file38.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(file42);
        org.junit.Assert.assertEquals(file42.getParent(), "hi!");
        org.junit.Assert.assertEquals(file42.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(file49);
        org.junit.Assert.assertEquals(file49.getParent(), "hi!");
        org.junit.Assert.assertEquals(file49.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(lineIterator52);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(file66);
        org.junit.Assert.assertEquals(file66.getParent(), "hi!");
        org.junit.Assert.assertEquals(file66.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertNotNull(file70);
        org.junit.Assert.assertEquals(file70.getParent(), "hi!");
        org.junit.Assert.assertEquals(file70.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(lineIterator74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(fileOutputStream86);
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + 0L + "'", long87 == 0L);
        org.junit.Assert.assertNotNull(byteArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray92), "[0, 0, 100, 1]");
    }

    @Test
    public void test284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test284");
        java.net.URL uRL0 = null;
        java.lang.String[] strArray3 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file4 = org.apache.commons.io.FileUtils.getFile(strArray3);
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file8 = org.apache.commons.io.FileUtils.getFile(strArray7);
        boolean boolean9 = org.apache.commons.io.FileUtils.isFileOlder(file4, file8);
        boolean boolean11 = org.apache.commons.io.FileUtils.waitFor(file8, (int) '4');
        org.apache.commons.io.LineIterator lineIterator12 = org.apache.commons.io.FileUtils.lineIterator(file8);
        boolean boolean14 = org.apache.commons.io.FileUtils.isFileOlder(file8, (-1L));
        byte[] byteArray15 = new byte[] {};
        org.apache.commons.io.FileUtils.writeByteArrayToFile(file8, byteArray15);
        java.lang.String[] strArray19 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file20 = org.apache.commons.io.FileUtils.getFile(strArray19);
        java.lang.String[] strArray23 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file24 = org.apache.commons.io.FileUtils.getFile(strArray23);
        boolean boolean25 = org.apache.commons.io.FileUtils.isFileOlder(file20, file24);
        boolean boolean27 = org.apache.commons.io.FileUtils.waitFor(file24, (int) '4');
        org.apache.commons.io.LineIterator lineIterator28 = org.apache.commons.io.FileUtils.lineIterator(file24);
        boolean boolean30 = org.apache.commons.io.FileUtils.isFileOlder(file24, (-1L));
        java.io.FileOutputStream fileOutputStream32 = org.apache.commons.io.FileUtils.openOutputStream(file24, false);
        long long33 = org.apache.commons.io.FileUtils.copyFile(file8, (java.io.OutputStream) fileOutputStream32);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.copyURLToFile(uRL0, file8, (int) (short) -1, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.net.URL.openConnection()\" because \"source\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(file4);
        org.junit.Assert.assertEquals(file4.getParent(), "hi!");
        org.junit.Assert.assertEquals(file4.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(file8);
        org.junit.Assert.assertEquals(file8.getParent(), "hi!");
        org.junit.Assert.assertEquals(file8.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(lineIterator12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(file20);
        org.junit.Assert.assertEquals(file20.getParent(), "hi!");
        org.junit.Assert.assertEquals(file20.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(file24);
        org.junit.Assert.assertEquals(file24.getParent(), "hi!");
        org.junit.Assert.assertEquals(file24.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(lineIterator28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(fileOutputStream32);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
    }

    @Test
    public void test285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test285");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean12 = org.apache.commons.io.FileUtils.deleteQuietly(file7);
        org.apache.commons.io.FileUtils.writeStringToFile(file7, "");
        org.apache.commons.io.FileUtils.forceMkdirParent(file7);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.forceDelete(file7);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Unable to delete file: hi!\\hi!");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test286");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        java.lang.String str9 = org.apache.commons.io.FileUtils.readFileToString(file3);
        org.apache.commons.io.FileUtils.writeStringToFile(file3, "", false);
        java.lang.String[] strArray15 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file16 = org.apache.commons.io.FileUtils.getFile(strArray15);
        java.lang.String[] strArray19 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file20 = org.apache.commons.io.FileUtils.getFile(strArray19);
        boolean boolean21 = org.apache.commons.io.FileUtils.isFileOlder(file16, file20);
        java.lang.String str22 = org.apache.commons.io.FileUtils.readFileToString(file16);
        org.apache.commons.io.FileUtils.writeStringToFile(file16, "", false);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.copyDirectory(file3, file16);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Source 'hi!\\hi!' exists but is not a directory");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(file16);
        org.junit.Assert.assertEquals(file16.getParent(), "hi!");
        org.junit.Assert.assertEquals(file16.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(file20);
        org.junit.Assert.assertEquals(file20.getParent(), "hi!");
        org.junit.Assert.assertEquals(file20.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
    }

    @Test
    public void test287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test287");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean12 = org.apache.commons.io.FileUtils.deleteQuietly(file7);
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset16 = null;
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "", charset16, true);
        java.nio.charset.Charset charset20 = null;
        org.apache.commons.io.FileUtils.writeStringToFile(file7, "", charset20, false);
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file26 = org.apache.commons.io.FileUtils.getFile(strArray25);
        java.lang.String[] strArray29 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file30 = org.apache.commons.io.FileUtils.getFile(strArray29);
        boolean boolean31 = org.apache.commons.io.FileUtils.isFileOlder(file26, file30);
        boolean boolean33 = org.apache.commons.io.FileUtils.waitFor(file30, (int) '4');
        java.lang.String[] strArray36 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file37 = org.apache.commons.io.FileUtils.getFile(strArray36);
        boolean boolean39 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file30, file37, "");
        java.io.FileOutputStream fileOutputStream41 = org.apache.commons.io.FileUtils.openOutputStream(file30, false);
        java.lang.String[] strArray48 = new java.lang.String[] { "", "1048576 EB", "C:\\Users\\Mathieu\\AppData\\Local\\Temp\\", "C:\\Users\\Mathieu", "", "1048576 EB" };
        java.util.ArrayList<java.lang.String> strList49 = new java.util.ArrayList<java.lang.String>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList49, strArray48);
        org.apache.commons.io.FileUtils.writeLines(file30, (java.util.Collection<java.lang.String>) strList49, "1 GB", false);
        org.apache.commons.io.FileUtils.writeLines(file7, (java.util.Collection<java.lang.String>) strList49, "35 bytes");
        long long56 = org.apache.commons.io.FileUtils.checksumCRC32(file7);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(file26);
        org.junit.Assert.assertEquals(file26.getParent(), "hi!");
        org.junit.Assert.assertEquals(file26.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(file30);
        org.junit.Assert.assertEquals(file30.getParent(), "hi!");
        org.junit.Assert.assertEquals(file30.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(file37);
        org.junit.Assert.assertEquals(file37.getParent(), "hi!");
        org.junit.Assert.assertEquals(file37.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(fileOutputStream41);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 2918508243L + "'", long56 == 2918508243L);
    }

    @Test
    public void test288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test288");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean12 = org.apache.commons.io.FileUtils.deleteQuietly(file7);
        org.apache.commons.io.FileUtils.writeStringToFile(file7, "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file18 = org.apache.commons.io.FileUtils.getFile(strArray17);
        java.lang.String[] strArray21 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file22 = org.apache.commons.io.FileUtils.getFile(strArray21);
        boolean boolean23 = org.apache.commons.io.FileUtils.isFileOlder(file18, file22);
        boolean boolean25 = org.apache.commons.io.FileUtils.waitFor(file22, (int) '4');
        java.lang.String[] strArray28 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file29 = org.apache.commons.io.FileUtils.getFile(strArray28);
        boolean boolean31 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file22, file29, "");
        boolean boolean32 = org.apache.commons.io.FileUtils.isFileNewer(file7, file22);
        java.io.File file33 = null;
        boolean boolean34 = org.apache.commons.io.FileUtils.contentEquals(file22, file33);
        java.lang.String[] strArray37 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file38 = org.apache.commons.io.FileUtils.getFile(strArray37);
        java.lang.String[] strArray41 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file42 = org.apache.commons.io.FileUtils.getFile(strArray41);
        boolean boolean43 = org.apache.commons.io.FileUtils.isFileOlder(file38, file42);
        boolean boolean45 = org.apache.commons.io.FileUtils.waitFor(file42, (int) '4');
        org.apache.commons.io.LineIterator lineIterator46 = org.apache.commons.io.FileUtils.lineIterator(file42);
        boolean boolean47 = org.apache.commons.io.FileUtils.deleteQuietly(file42);
        org.apache.commons.io.FileUtils.writeStringToFile(file42, "");
        java.lang.String[] strArray52 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file53 = org.apache.commons.io.FileUtils.getFile(strArray52);
        java.lang.String[] strArray56 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file57 = org.apache.commons.io.FileUtils.getFile(strArray56);
        boolean boolean58 = org.apache.commons.io.FileUtils.isFileOlder(file53, file57);
        boolean boolean60 = org.apache.commons.io.FileUtils.waitFor(file57, (int) '4');
        java.lang.String[] strArray63 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file64 = org.apache.commons.io.FileUtils.getFile(strArray63);
        boolean boolean66 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file57, file64, "");
        boolean boolean67 = org.apache.commons.io.FileUtils.isFileNewer(file42, file57);
        boolean boolean68 = org.apache.commons.io.FileUtils.isSymlink(file42);
        org.apache.commons.io.FileUtils.writeStringToFile(file42, "C:\\Users\\Mathieu\\AppData\\Local\\Temp\\", true);
        java.lang.String str72 = org.apache.commons.io.FileUtils.readFileToString(file42);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.moveFileToDirectory(file33, file42, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: source");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(file18);
        org.junit.Assert.assertEquals(file18.getParent(), "hi!");
        org.junit.Assert.assertEquals(file18.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(file22);
        org.junit.Assert.assertEquals(file22.getParent(), "hi!");
        org.junit.Assert.assertEquals(file22.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(file29);
        org.junit.Assert.assertEquals(file29.getParent(), "hi!");
        org.junit.Assert.assertEquals(file29.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(file38);
        org.junit.Assert.assertEquals(file38.getParent(), "hi!");
        org.junit.Assert.assertEquals(file38.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(file42);
        org.junit.Assert.assertEquals(file42.getParent(), "hi!");
        org.junit.Assert.assertEquals(file42.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(lineIterator46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(file53);
        org.junit.Assert.assertEquals(file53.getParent(), "hi!");
        org.junit.Assert.assertEquals(file53.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(file57);
        org.junit.Assert.assertEquals(file57.getParent(), "hi!");
        org.junit.Assert.assertEquals(file57.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(file64);
        org.junit.Assert.assertEquals(file64.getParent(), "hi!");
        org.junit.Assert.assertEquals(file64.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "C:\\Users\\Mathieu\\AppData\\Local\\Temp\\" + "'", str72, "C:\\Users\\Mathieu\\AppData\\Local\\Temp\\");
    }

    @Test
    public void test289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test289");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean12 = org.apache.commons.io.FileUtils.deleteQuietly(file7);
        org.apache.commons.io.FileUtils.writeStringToFile(file7, "");
        org.apache.commons.io.FileUtils.forceMkdirParent(file7);
        java.nio.charset.Charset charset16 = null;
        java.lang.String str17 = org.apache.commons.io.FileUtils.readFileToString(file7, charset16);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter18 = null;
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter19 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Collection<java.io.File> fileCollection20 = org.apache.commons.io.FileUtils.listFilesAndDirs(file7, iOFileFilter18, iOFileFilter19);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'directory' is not a directory: hi!\\hi!");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
    }

    @Test
    @Disabled
    public void test290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test290");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file14 = org.apache.commons.io.FileUtils.getFile(strArray13);
        boolean boolean16 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file7, file14, "");
        java.lang.String[] strArray19 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file20 = org.apache.commons.io.FileUtils.getFile(strArray19);
        java.lang.String[] strArray23 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file24 = org.apache.commons.io.FileUtils.getFile(strArray23);
        boolean boolean25 = org.apache.commons.io.FileUtils.isFileOlder(file20, file24);
        boolean boolean27 = org.apache.commons.io.FileUtils.waitFor(file24, (int) '4');
        org.apache.commons.io.LineIterator lineIterator28 = org.apache.commons.io.FileUtils.lineIterator(file24);
        boolean boolean30 = org.apache.commons.io.FileUtils.isFileOlder(file24, (-1L));
        java.nio.charset.Charset charset31 = null;
        java.lang.String str32 = org.apache.commons.io.FileUtils.readFileToString(file24, charset31);
        java.io.FileOutputStream fileOutputStream34 = org.apache.commons.io.FileUtils.openOutputStream(file24, false);
        org.apache.commons.io.LineIterator lineIterator35 = org.apache.commons.io.FileUtils.lineIterator(file24);
        java.lang.String[] strArray38 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file39 = org.apache.commons.io.FileUtils.getFile(strArray38);
        java.lang.String[] strArray42 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file43 = org.apache.commons.io.FileUtils.getFile(strArray42);
        boolean boolean44 = org.apache.commons.io.FileUtils.isFileOlder(file39, file43);
        boolean boolean46 = org.apache.commons.io.FileUtils.waitFor(file43, (int) '4');
        org.apache.commons.io.LineIterator lineIterator47 = org.apache.commons.io.FileUtils.lineIterator(file43);
        boolean boolean48 = org.apache.commons.io.FileUtils.deleteQuietly(file43);
        org.apache.commons.io.FileUtils.writeStringToFile(file43, "");
        java.lang.String[] strArray53 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file54 = org.apache.commons.io.FileUtils.getFile(strArray53);
        java.lang.String[] strArray57 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file58 = org.apache.commons.io.FileUtils.getFile(strArray57);
        boolean boolean59 = org.apache.commons.io.FileUtils.isFileOlder(file54, file58);
        boolean boolean61 = org.apache.commons.io.FileUtils.waitFor(file58, (int) '4');
        java.lang.String[] strArray64 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file65 = org.apache.commons.io.FileUtils.getFile(strArray64);
        boolean boolean67 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file58, file65, "");
        boolean boolean68 = org.apache.commons.io.FileUtils.isFileNewer(file43, file58);
        boolean boolean69 = org.apache.commons.io.FileUtils.contentEquals(file24, file43);
        boolean boolean71 = org.apache.commons.io.FileUtils.isFileNewer(file43, 0L);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.moveFileToDirectory(file7, file43, false);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Destination 'hi!\\hi!' is not a directory");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(file14);
        org.junit.Assert.assertEquals(file14.getParent(), "hi!");
        org.junit.Assert.assertEquals(file14.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(file20);
        org.junit.Assert.assertEquals(file20.getParent(), "hi!");
        org.junit.Assert.assertEquals(file20.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(file24);
        org.junit.Assert.assertEquals(file24.getParent(), "hi!");
        org.junit.Assert.assertEquals(file24.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(lineIterator28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "hi!hi!" + "'", str32, "hi!hi!");
        org.junit.Assert.assertNotNull(fileOutputStream34);
        org.junit.Assert.assertNotNull(lineIterator35);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(file39);
        org.junit.Assert.assertEquals(file39.getParent(), "hi!");
        org.junit.Assert.assertEquals(file39.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(file43);
        org.junit.Assert.assertEquals(file43.getParent(), "hi!");
        org.junit.Assert.assertEquals(file43.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(lineIterator47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(file54);
        org.junit.Assert.assertEquals(file54.getParent(), "hi!");
        org.junit.Assert.assertEquals(file54.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(file58);
        org.junit.Assert.assertEquals(file58.getParent(), "hi!");
        org.junit.Assert.assertEquals(file58.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(file65);
        org.junit.Assert.assertEquals(file65.getParent(), "hi!");
        org.junit.Assert.assertEquals(file65.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
    }

    @Test
    public void test291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test291");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        java.lang.String[] strArray10 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file11 = org.apache.commons.io.FileUtils.getFile(strArray10);
        boolean boolean12 = org.apache.commons.io.FileUtils.isFileOlder(file7, file11);
        boolean boolean14 = org.apache.commons.io.FileUtils.waitFor(file11, (int) '4');
        org.apache.commons.io.LineIterator lineIterator15 = org.apache.commons.io.FileUtils.lineIterator(file11);
        boolean boolean16 = org.apache.commons.io.FileUtils.deleteQuietly(file11);
        org.apache.commons.io.FileUtils.write(file11, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset20 = null;
        org.apache.commons.io.FileUtils.write(file11, (java.lang.CharSequence) "", charset20, true);
        boolean boolean23 = org.apache.commons.io.FileUtils.contentEquals(file3, file11);
        org.apache.commons.io.FileUtils.forceDeleteOnExit(file11);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(file11);
        org.junit.Assert.assertEquals(file11.getParent(), "hi!");
        org.junit.Assert.assertEquals(file11.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(lineIterator15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
    }

    @Test
    public void test292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test292");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file14 = org.apache.commons.io.FileUtils.getFile(strArray13);
        boolean boolean16 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file7, file14, "");
        java.io.FileOutputStream fileOutputStream18 = org.apache.commons.io.FileUtils.openOutputStream(file7, false);
        java.util.zip.Checksum checksum19 = null;
        java.util.zip.Checksum checksum20 = org.apache.commons.io.FileUtils.checksum(file7, checksum19);
        java.nio.charset.Charset charset22 = null;
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "hi!", charset22);
        // The following exception was thrown during execution in test generation
        try {
            long long24 = org.apache.commons.io.FileUtils.sizeOfDirectory(file7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: hi!\\hi! is not a directory");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(file14);
        org.junit.Assert.assertEquals(file14.getParent(), "hi!");
        org.junit.Assert.assertEquals(file14.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(fileOutputStream18);
        org.junit.Assert.assertNull(checksum20);
    }

    @Test
    public void test293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test293");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean12 = org.apache.commons.io.FileUtils.deleteQuietly(file7);
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset16 = null;
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "", charset16, true);
        byte[] byteArray19 = org.apache.commons.io.FileUtils.readFileToByteArray(file7);
        boolean boolean21 = org.apache.commons.io.FileUtils.waitFor(file7, (int) 'a');
        org.apache.commons.io.LineIterator lineIterator22 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean24 = org.apache.commons.io.FileUtils.isFileOlder(file7, (long) (byte) 100);
        boolean boolean26 = org.apache.commons.io.FileUtils.isFileOlder(file7, (-1L));
        java.lang.String[] strArray29 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file30 = org.apache.commons.io.FileUtils.getFile(strArray29);
        java.lang.String[] strArray33 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file34 = org.apache.commons.io.FileUtils.getFile(strArray33);
        boolean boolean35 = org.apache.commons.io.FileUtils.isFileOlder(file30, file34);
        boolean boolean37 = org.apache.commons.io.FileUtils.waitFor(file34, (int) '4');
        org.apache.commons.io.LineIterator lineIterator38 = org.apache.commons.io.FileUtils.lineIterator(file34);
        boolean boolean40 = org.apache.commons.io.FileUtils.isFileOlder(file34, (-1L));
        long long41 = org.apache.commons.io.FileUtils.sizeOf(file34);
        java.io.File file42 = org.apache.commons.io.FileUtils.getUserDirectory();
        org.apache.commons.io.FileUtils.copyFileToDirectory(file34, file42, true);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean46 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file7, file42, "\000\000d\001");
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Can't compare directories, only files");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[104, 105, 33]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(lineIterator22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(file30);
        org.junit.Assert.assertEquals(file30.getParent(), "hi!");
        org.junit.Assert.assertEquals(file30.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(file34);
        org.junit.Assert.assertEquals(file34.getParent(), "hi!");
        org.junit.Assert.assertEquals(file34.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(lineIterator38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 3L + "'", long41 == 3L);
        org.junit.Assert.assertNotNull(file42);
        org.junit.Assert.assertEquals(file42.getParent(), "C:\\Users");
        org.junit.Assert.assertEquals(file42.toString(), "C:\\Users\\Mathieu");
    }

    @Test
    @Disabled
    public void test294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test294");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean13 = org.apache.commons.io.FileUtils.isFileOlder(file7, (-1L));
        java.nio.charset.Charset charset14 = null;
        java.lang.String str15 = org.apache.commons.io.FileUtils.readFileToString(file7, charset14);
        java.io.FileOutputStream fileOutputStream17 = org.apache.commons.io.FileUtils.openOutputStream(file7, false);
        org.apache.commons.io.LineIterator lineIterator18 = org.apache.commons.io.FileUtils.lineIterator(file7);
        org.apache.commons.io.FileUtils.writeStringToFile(file7, "-1 bytes", false);
        java.nio.charset.Charset charset23 = null;
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "32 bytes", charset23);
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file28 = org.apache.commons.io.FileUtils.getFile(strArray27);
        java.lang.String[] strArray31 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file32 = org.apache.commons.io.FileUtils.getFile(strArray31);
        boolean boolean33 = org.apache.commons.io.FileUtils.isFileOlder(file28, file32);
        boolean boolean35 = org.apache.commons.io.FileUtils.waitFor(file32, (int) '4');
        org.apache.commons.io.LineIterator lineIterator36 = org.apache.commons.io.FileUtils.lineIterator(file32);
        boolean boolean37 = org.apache.commons.io.FileUtils.deleteQuietly(file32);
        org.apache.commons.io.FileUtils.write(file32, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset41 = null;
        org.apache.commons.io.FileUtils.write(file32, (java.lang.CharSequence) "", charset41, true);
        java.nio.charset.Charset charset45 = null;
        org.apache.commons.io.FileUtils.writeStringToFile(file32, "", charset45, false);
        java.lang.String[] strArray50 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file51 = org.apache.commons.io.FileUtils.getFile(strArray50);
        java.lang.String[] strArray54 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file55 = org.apache.commons.io.FileUtils.getFile(strArray54);
        boolean boolean56 = org.apache.commons.io.FileUtils.isFileOlder(file51, file55);
        boolean boolean58 = org.apache.commons.io.FileUtils.waitFor(file55, (int) '4');
        org.apache.commons.io.LineIterator lineIterator59 = org.apache.commons.io.FileUtils.lineIterator(file55);
        boolean boolean60 = org.apache.commons.io.FileUtils.deleteQuietly(file55);
        org.apache.commons.io.FileUtils.write(file55, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset64 = null;
        org.apache.commons.io.FileUtils.write(file55, (java.lang.CharSequence) "", charset64, true);
        java.nio.charset.Charset charset68 = null;
        org.apache.commons.io.FileUtils.writeStringToFile(file55, "", charset68, false);
        long long71 = org.apache.commons.io.FileUtils.sizeOf(file55);
        org.apache.commons.io.FileUtils.writeStringToFile(file55, "");
        boolean boolean74 = org.apache.commons.io.FileUtils.isFileNewer(file32, file55);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.copyDirectoryToDirectory(file7, file32);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Source 'hi!\\hi!' is not a directory");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1 GB1048576 EB1 GBC:\\Users\\Mathieu\\AppData\\Local\\Temp\\1 GBC:\\Users\\Mathieu1 GB1 GB1048576 EB1 GB1048576 EB1 GB1048576 EB1 GBC:\\Users\\Mathieu\\AppData\\Local\\Temp\\1 GBC:\\Users\\Mathieu1 GB1 GB1048576 EB1 GBC:\\Users\\Mathieu\\AppData\\Local\\Temp\\1 GB1048576 EB1 GBC:\\Users\\Mathieu\\AppData\\Local\\Temp\\1 GBC:\\Users\\Mathieu1 GB1 GB1048576 EB1 GBC:\\Users\\Mathieu1 GB1048576 EB1 GBC:\\Users\\Mathieu\\AppData\\Local\\Temp\\1 GBC:\\Users\\Mathieu1 GB1 GB1048576 EB1 GB1 GB1048576 EB1 GBC:\\Users\\Mathieu\\AppData\\Local\\Temp\\1 GBC:\\Users\\Mathieu1 GB1 GB1048576 EB1 GB1048576 EB1 GB1048576 EB1 GBC:\\Users\\Mathieu\\AppData\\Local\\Temp\\1 GBC:\\Users\\Mathieu1 GB1 GB1048576 EB1 GB" + "'", str15, "1 GB1048576 EB1 GBC:\\Users\\Mathieu\\AppData\\Local\\Temp\\1 GBC:\\Users\\Mathieu1 GB1 GB1048576 EB1 GB1048576 EB1 GB1048576 EB1 GBC:\\Users\\Mathieu\\AppData\\Local\\Temp\\1 GBC:\\Users\\Mathieu1 GB1 GB1048576 EB1 GBC:\\Users\\Mathieu\\AppData\\Local\\Temp\\1 GB1048576 EB1 GBC:\\Users\\Mathieu\\AppData\\Local\\Temp\\1 GBC:\\Users\\Mathieu1 GB1 GB1048576 EB1 GBC:\\Users\\Mathieu1 GB1048576 EB1 GBC:\\Users\\Mathieu\\AppData\\Local\\Temp\\1 GBC:\\Users\\Mathieu1 GB1 GB1048576 EB1 GB1 GB1048576 EB1 GBC:\\Users\\Mathieu\\AppData\\Local\\Temp\\1 GBC:\\Users\\Mathieu1 GB1 GB1048576 EB1 GB1048576 EB1 GB1048576 EB1 GBC:\\Users\\Mathieu\\AppData\\Local\\Temp\\1 GBC:\\Users\\Mathieu1 GB1 GB1048576 EB1 GB");
        org.junit.Assert.assertNotNull(fileOutputStream17);
        org.junit.Assert.assertNotNull(lineIterator18);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(file28);
        org.junit.Assert.assertEquals(file28.getParent(), "hi!");
        org.junit.Assert.assertEquals(file28.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(file32);
        org.junit.Assert.assertEquals(file32.getParent(), "hi!");
        org.junit.Assert.assertEquals(file32.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(lineIterator36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(file51);
        org.junit.Assert.assertEquals(file51.getParent(), "hi!");
        org.junit.Assert.assertEquals(file51.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(file55);
        org.junit.Assert.assertEquals(file55.getParent(), "hi!");
        org.junit.Assert.assertEquals(file55.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(lineIterator59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 0L + "'", long71 == 0L);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test295");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean12 = org.apache.commons.io.FileUtils.deleteQuietly(file7);
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset16 = null;
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "", charset16, true);
        byte[] byteArray19 = org.apache.commons.io.FileUtils.readFileToByteArray(file7);
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file23 = org.apache.commons.io.FileUtils.getFile(strArray22);
        java.lang.String[] strArray26 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file27 = org.apache.commons.io.FileUtils.getFile(strArray26);
        boolean boolean28 = org.apache.commons.io.FileUtils.isFileOlder(file23, file27);
        boolean boolean30 = org.apache.commons.io.FileUtils.waitFor(file27, (int) '4');
        org.apache.commons.io.LineIterator lineIterator31 = org.apache.commons.io.FileUtils.lineIterator(file27);
        boolean boolean32 = org.apache.commons.io.FileUtils.deleteQuietly(file27);
        org.apache.commons.io.FileUtils.write(file27, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset36 = null;
        org.apache.commons.io.FileUtils.write(file27, (java.lang.CharSequence) "", charset36, true);
        java.nio.charset.Charset charset40 = null;
        org.apache.commons.io.FileUtils.writeStringToFile(file27, "", charset40, false);
        boolean boolean43 = org.apache.commons.io.FileUtils.isFileNewer(file7, file27);
        java.nio.charset.Charset charset45 = null;
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "-1 bytes", charset45);
        long long47 = org.apache.commons.io.FileUtils.checksumCRC32(file7);
        java.nio.charset.Charset charset49 = null;
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "32 bytes", charset49, true);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[104, 105, 33]");
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(file23);
        org.junit.Assert.assertEquals(file23.getParent(), "hi!");
        org.junit.Assert.assertEquals(file23.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(file27);
        org.junit.Assert.assertEquals(file27.getParent(), "hi!");
        org.junit.Assert.assertEquals(file27.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(lineIterator31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 2035464173L + "'", long47 == 2035464173L);
    }

    @Test
    public void test296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test296");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean12 = org.apache.commons.io.FileUtils.deleteQuietly(file7);
        org.apache.commons.io.FileUtils.writeStringToFile(file7, "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file18 = org.apache.commons.io.FileUtils.getFile(strArray17);
        java.lang.String[] strArray21 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file22 = org.apache.commons.io.FileUtils.getFile(strArray21);
        boolean boolean23 = org.apache.commons.io.FileUtils.isFileOlder(file18, file22);
        boolean boolean25 = org.apache.commons.io.FileUtils.waitFor(file22, (int) '4');
        java.lang.String[] strArray28 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file29 = org.apache.commons.io.FileUtils.getFile(strArray28);
        boolean boolean31 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file22, file29, "");
        boolean boolean32 = org.apache.commons.io.FileUtils.isFileNewer(file7, file22);
        java.io.File file33 = null;
        boolean boolean34 = org.apache.commons.io.FileUtils.contentEquals(file22, file33);
        java.lang.String[] strArray37 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file38 = org.apache.commons.io.FileUtils.getFile(strArray37);
        java.lang.String[] strArray41 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file42 = org.apache.commons.io.FileUtils.getFile(strArray41);
        boolean boolean43 = org.apache.commons.io.FileUtils.isFileOlder(file38, file42);
        boolean boolean45 = org.apache.commons.io.FileUtils.waitFor(file42, (int) '4');
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file49 = org.apache.commons.io.FileUtils.getFile(strArray48);
        boolean boolean51 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file42, file49, "");
        java.io.FileOutputStream fileOutputStream53 = org.apache.commons.io.FileUtils.openOutputStream(file42, false);
        java.lang.String[] strArray60 = new java.lang.String[] { "", "1048576 EB", "C:\\Users\\Mathieu\\AppData\\Local\\Temp\\", "C:\\Users\\Mathieu", "", "1048576 EB" };
        java.util.ArrayList<java.lang.String> strList61 = new java.util.ArrayList<java.lang.String>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList61, strArray60);
        org.apache.commons.io.FileUtils.writeLines(file42, (java.util.Collection<java.lang.String>) strList61, "1 GB", false);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.writeLines(file33, (java.util.Collection<java.lang.String>) strList61, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.File.exists()\" because \"file\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(file18);
        org.junit.Assert.assertEquals(file18.getParent(), "hi!");
        org.junit.Assert.assertEquals(file18.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(file22);
        org.junit.Assert.assertEquals(file22.getParent(), "hi!");
        org.junit.Assert.assertEquals(file22.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(file29);
        org.junit.Assert.assertEquals(file29.getParent(), "hi!");
        org.junit.Assert.assertEquals(file29.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(file38);
        org.junit.Assert.assertEquals(file38.getParent(), "hi!");
        org.junit.Assert.assertEquals(file38.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(file42);
        org.junit.Assert.assertEquals(file42.getParent(), "hi!");
        org.junit.Assert.assertEquals(file42.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(file49);
        org.junit.Assert.assertEquals(file49.getParent(), "hi!");
        org.junit.Assert.assertEquals(file49.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(fileOutputStream53);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
    }

    @Test
    public void test297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test297");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        java.lang.String str9 = org.apache.commons.io.FileUtils.readFileToString(file3);
        java.lang.String[] strArray12 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file13 = org.apache.commons.io.FileUtils.getFile(strArray12);
        java.io.File file14 = org.apache.commons.io.FileUtils.getFile(file3, strArray12);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter15 = null;
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter16 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Collection<java.io.File> fileCollection17 = org.apache.commons.io.FileUtils.listFiles(file14, iOFileFilter15, iOFileFilter16);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'directory' is not a directory: hi!\\hi!\\hi!\\hi!");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "1 GB1048576 EB1 GBC:\\Users\\Mathieu\\AppData\\Local\\Temp\\1 GBC:\\Users\\Mathieu1 GB1 GB1048576 EB1 GB" + "'", str9, "1 GB1048576 EB1 GBC:\\Users\\Mathieu\\AppData\\Local\\Temp\\1 GBC:\\Users\\Mathieu1 GB1 GB1048576 EB1 GB");
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(file13);
        org.junit.Assert.assertEquals(file13.getParent(), "hi!");
        org.junit.Assert.assertEquals(file13.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(file14);
        org.junit.Assert.assertEquals(file14.getParent(), "hi!\\hi!\\hi!");
        org.junit.Assert.assertEquals(file14.toString(), "hi!\\hi!\\hi!\\hi!");
    }

    @Test
    public void test298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test298");
        java.lang.Iterable<java.io.File> fileIterable0 = null;
        java.lang.String[] strArray3 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file4 = org.apache.commons.io.FileUtils.getFile(strArray3);
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file8 = org.apache.commons.io.FileUtils.getFile(strArray7);
        boolean boolean9 = org.apache.commons.io.FileUtils.isFileOlder(file4, file8);
        boolean boolean11 = org.apache.commons.io.FileUtils.waitFor(file8, (int) '4');
        org.apache.commons.io.LineIterator lineIterator12 = org.apache.commons.io.FileUtils.lineIterator(file8);
        boolean boolean13 = org.apache.commons.io.FileUtils.deleteQuietly(file8);
        org.apache.commons.io.FileUtils.writeStringToFile(file8, "");
        java.lang.String[] strArray18 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file19 = org.apache.commons.io.FileUtils.getFile(strArray18);
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file23 = org.apache.commons.io.FileUtils.getFile(strArray22);
        boolean boolean24 = org.apache.commons.io.FileUtils.isFileOlder(file19, file23);
        boolean boolean26 = org.apache.commons.io.FileUtils.waitFor(file23, (int) '4');
        java.lang.String[] strArray29 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file30 = org.apache.commons.io.FileUtils.getFile(strArray29);
        boolean boolean32 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file23, file30, "");
        boolean boolean33 = org.apache.commons.io.FileUtils.isFileNewer(file8, file23);
        java.io.FileOutputStream fileOutputStream34 = org.apache.commons.io.FileUtils.openOutputStream(file8);
        java.lang.String[] strArray37 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file38 = org.apache.commons.io.FileUtils.getFile(strArray37);
        java.lang.String[] strArray41 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file42 = org.apache.commons.io.FileUtils.getFile(strArray41);
        boolean boolean43 = org.apache.commons.io.FileUtils.isFileOlder(file38, file42);
        boolean boolean45 = org.apache.commons.io.FileUtils.waitFor(file42, (int) '4');
        org.apache.commons.io.LineIterator lineIterator46 = org.apache.commons.io.FileUtils.lineIterator(file42);
        boolean boolean47 = org.apache.commons.io.FileUtils.deleteQuietly(file42);
        org.apache.commons.io.FileUtils.write(file42, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset51 = null;
        org.apache.commons.io.FileUtils.write(file42, (java.lang.CharSequence) "", charset51, true);
        java.nio.charset.Charset charset54 = null;
        java.lang.String str55 = org.apache.commons.io.FileUtils.readFileToString(file42, charset54);
        boolean boolean56 = org.apache.commons.io.FileUtils.contentEquals(file8, file42);
        java.lang.String[] strArray59 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file60 = org.apache.commons.io.FileUtils.getFile(strArray59);
        java.io.File file61 = org.apache.commons.io.FileUtils.getFile(file8, strArray59);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.copyToDirectory(fileIterable0, file61);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: sourceIterable");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(file4);
        org.junit.Assert.assertEquals(file4.getParent(), "hi!");
        org.junit.Assert.assertEquals(file4.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(file8);
        org.junit.Assert.assertEquals(file8.getParent(), "hi!");
        org.junit.Assert.assertEquals(file8.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(lineIterator12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(file19);
        org.junit.Assert.assertEquals(file19.getParent(), "hi!");
        org.junit.Assert.assertEquals(file19.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(file23);
        org.junit.Assert.assertEquals(file23.getParent(), "hi!");
        org.junit.Assert.assertEquals(file23.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(file30);
        org.junit.Assert.assertEquals(file30.getParent(), "hi!");
        org.junit.Assert.assertEquals(file30.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(fileOutputStream34);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(file38);
        org.junit.Assert.assertEquals(file38.getParent(), "hi!");
        org.junit.Assert.assertEquals(file38.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(file42);
        org.junit.Assert.assertEquals(file42.getParent(), "hi!");
        org.junit.Assert.assertEquals(file42.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(lineIterator46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "hi!" + "'", str55, "hi!");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(file60);
        org.junit.Assert.assertEquals(file60.getParent(), "hi!");
        org.junit.Assert.assertEquals(file60.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(file61);
        org.junit.Assert.assertEquals(file61.getParent(), "hi!\\hi!\\hi!");
        org.junit.Assert.assertEquals(file61.toString(), "hi!\\hi!\\hi!\\hi!");
    }

    @Test
    public void test299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test299");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file14 = org.apache.commons.io.FileUtils.getFile(strArray13);
        boolean boolean16 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file7, file14, "");
        long long17 = org.apache.commons.io.FileUtils.checksumCRC32(file7);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(file14);
        org.junit.Assert.assertEquals(file14.getParent(), "hi!");
        org.junit.Assert.assertEquals(file14.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1104380730L + "'", long17 == 1104380730L);
    }

    @Test
    public void test300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test300");
        java.lang.String str1 = org.apache.commons.io.FileUtils.byteCountToDisplaySize((long) '4');
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "52 bytes" + "'", str1, "52 bytes");
    }

    @Test
    public void test301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test301");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean13 = org.apache.commons.io.FileUtils.isFileOlder(file7, (-1L));
        java.nio.charset.Charset charset14 = null;
        java.lang.String str15 = org.apache.commons.io.FileUtils.readFileToString(file7, charset14);
        java.io.FileOutputStream fileOutputStream17 = org.apache.commons.io.FileUtils.openOutputStream(file7, false);
        org.apache.commons.io.LineIterator lineIterator18 = org.apache.commons.io.FileUtils.lineIterator(file7);
        java.lang.String[] strArray21 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file22 = org.apache.commons.io.FileUtils.getFile(strArray21);
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file26 = org.apache.commons.io.FileUtils.getFile(strArray25);
        boolean boolean27 = org.apache.commons.io.FileUtils.isFileOlder(file22, file26);
        boolean boolean29 = org.apache.commons.io.FileUtils.waitFor(file26, (int) '4');
        org.apache.commons.io.LineIterator lineIterator30 = org.apache.commons.io.FileUtils.lineIterator(file26);
        boolean boolean31 = org.apache.commons.io.FileUtils.deleteQuietly(file26);
        org.apache.commons.io.FileUtils.writeStringToFile(file26, "");
        java.lang.String[] strArray36 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file37 = org.apache.commons.io.FileUtils.getFile(strArray36);
        java.lang.String[] strArray40 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file41 = org.apache.commons.io.FileUtils.getFile(strArray40);
        boolean boolean42 = org.apache.commons.io.FileUtils.isFileOlder(file37, file41);
        boolean boolean44 = org.apache.commons.io.FileUtils.waitFor(file41, (int) '4');
        java.lang.String[] strArray47 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file48 = org.apache.commons.io.FileUtils.getFile(strArray47);
        boolean boolean50 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file41, file48, "");
        boolean boolean51 = org.apache.commons.io.FileUtils.isFileNewer(file26, file41);
        boolean boolean52 = org.apache.commons.io.FileUtils.contentEquals(file7, file26);
        java.lang.String[] strArray55 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file56 = org.apache.commons.io.FileUtils.getFile(strArray55);
        java.lang.String[] strArray59 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file60 = org.apache.commons.io.FileUtils.getFile(strArray59);
        boolean boolean61 = org.apache.commons.io.FileUtils.isFileOlder(file56, file60);
        boolean boolean63 = org.apache.commons.io.FileUtils.waitFor(file60, (int) '4');
        java.lang.String[] strArray66 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file67 = org.apache.commons.io.FileUtils.getFile(strArray66);
        boolean boolean69 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file60, file67, "");
        org.apache.commons.io.LineIterator lineIterator70 = org.apache.commons.io.FileUtils.lineIterator(file60);
        org.apache.commons.io.FileUtils.writeStringToFile(file60, "C:\\Users\\Mathieu\\AppData\\Local\\Temp\\", false);
        java.nio.charset.Charset charset75 = null;
        org.apache.commons.io.FileUtils.write(file60, (java.lang.CharSequence) "", charset75, true);
        boolean boolean79 = org.apache.commons.io.FileUtils.waitFor(file60, 0);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.moveFileToDirectory(file26, file60, false);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Destination 'hi!\\hi!' is not a directory");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertNotNull(fileOutputStream17);
        org.junit.Assert.assertNotNull(lineIterator18);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(file22);
        org.junit.Assert.assertEquals(file22.getParent(), "hi!");
        org.junit.Assert.assertEquals(file22.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(file26);
        org.junit.Assert.assertEquals(file26.getParent(), "hi!");
        org.junit.Assert.assertEquals(file26.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(lineIterator30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(file37);
        org.junit.Assert.assertEquals(file37.getParent(), "hi!");
        org.junit.Assert.assertEquals(file37.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(file41);
        org.junit.Assert.assertEquals(file41.getParent(), "hi!");
        org.junit.Assert.assertEquals(file41.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(file48);
        org.junit.Assert.assertEquals(file48.getParent(), "hi!");
        org.junit.Assert.assertEquals(file48.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(file56);
        org.junit.Assert.assertEquals(file56.getParent(), "hi!");
        org.junit.Assert.assertEquals(file56.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(file60);
        org.junit.Assert.assertEquals(file60.getParent(), "hi!");
        org.junit.Assert.assertEquals(file60.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(file67);
        org.junit.Assert.assertEquals(file67.getParent(), "hi!");
        org.junit.Assert.assertEquals(file67.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(lineIterator70);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
    }

    @Test
    public void test302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test302");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file14 = org.apache.commons.io.FileUtils.getFile(strArray13);
        boolean boolean16 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file7, file14, "");
        java.io.FileOutputStream fileOutputStream18 = org.apache.commons.io.FileUtils.openOutputStream(file7, false);
        java.lang.String[] strArray21 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file22 = org.apache.commons.io.FileUtils.getFile(strArray21);
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file26 = org.apache.commons.io.FileUtils.getFile(strArray25);
        boolean boolean27 = org.apache.commons.io.FileUtils.isFileOlder(file22, file26);
        boolean boolean29 = org.apache.commons.io.FileUtils.waitFor(file26, (int) '4');
        org.apache.commons.io.LineIterator lineIterator30 = org.apache.commons.io.FileUtils.lineIterator(file26);
        boolean boolean31 = org.apache.commons.io.FileUtils.deleteQuietly(file26);
        org.apache.commons.io.FileUtils.write(file26, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset35 = null;
        org.apache.commons.io.FileUtils.write(file26, (java.lang.CharSequence) "", charset35, true);
        java.nio.charset.Charset charset39 = null;
        org.apache.commons.io.FileUtils.writeStringToFile(file26, "", charset39, false);
        long long42 = org.apache.commons.io.FileUtils.sizeOf(file26);
        java.lang.String[] strArray45 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file46 = org.apache.commons.io.FileUtils.getFile(strArray45);
        java.lang.String[] strArray49 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file50 = org.apache.commons.io.FileUtils.getFile(strArray49);
        boolean boolean51 = org.apache.commons.io.FileUtils.isFileOlder(file46, file50);
        boolean boolean53 = org.apache.commons.io.FileUtils.waitFor(file50, (int) '4');
        org.apache.commons.io.LineIterator lineIterator54 = org.apache.commons.io.FileUtils.lineIterator(file50);
        boolean boolean55 = org.apache.commons.io.FileUtils.deleteQuietly(file50);
        org.apache.commons.io.FileUtils.write(file50, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset59 = null;
        org.apache.commons.io.FileUtils.write(file50, (java.lang.CharSequence) "", charset59, true);
        java.nio.charset.Charset charset63 = null;
        org.apache.commons.io.FileUtils.writeStringToFile(file50, "", charset63, false);
        long long66 = org.apache.commons.io.FileUtils.sizeOf(file50);
        org.apache.commons.io.FileUtils.writeStringToFile(file50, "");
        boolean boolean70 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file26, file50, "hi!");
        boolean boolean72 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file7, file50, "-1 bytes");
        java.lang.String[] strArray75 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file76 = org.apache.commons.io.FileUtils.getFile(strArray75);
        java.lang.String[] strArray79 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file80 = org.apache.commons.io.FileUtils.getFile(strArray79);
        boolean boolean81 = org.apache.commons.io.FileUtils.isFileOlder(file76, file80);
        boolean boolean83 = org.apache.commons.io.FileUtils.waitFor(file80, (int) '4');
        org.apache.commons.io.LineIterator lineIterator84 = org.apache.commons.io.FileUtils.lineIterator(file80);
        java.nio.charset.Charset charset86 = null;
        org.apache.commons.io.FileUtils.writeStringToFile(file80, "0 bytes", charset86);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.moveToDirectory(file7, file80, false);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Destination 'hi!\\hi!' is not a directory");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(file14);
        org.junit.Assert.assertEquals(file14.getParent(), "hi!");
        org.junit.Assert.assertEquals(file14.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(fileOutputStream18);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(file22);
        org.junit.Assert.assertEquals(file22.getParent(), "hi!");
        org.junit.Assert.assertEquals(file22.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(file26);
        org.junit.Assert.assertEquals(file26.getParent(), "hi!");
        org.junit.Assert.assertEquals(file26.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(lineIterator30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(file46);
        org.junit.Assert.assertEquals(file46.getParent(), "hi!");
        org.junit.Assert.assertEquals(file46.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(file50);
        org.junit.Assert.assertEquals(file50.getParent(), "hi!");
        org.junit.Assert.assertEquals(file50.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(lineIterator54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 0L + "'", long66 == 0L);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(file76);
        org.junit.Assert.assertEquals(file76.getParent(), "hi!");
        org.junit.Assert.assertEquals(file76.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray79);
        org.junit.Assert.assertNotNull(file80);
        org.junit.Assert.assertEquals(file80.getParent(), "hi!");
        org.junit.Assert.assertEquals(file80.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(lineIterator84);
    }

    @Test
    public void test303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test303");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean12 = org.apache.commons.io.FileUtils.deleteQuietly(file7);
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset16 = null;
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "", charset16, true);
        byte[] byteArray19 = org.apache.commons.io.FileUtils.readFileToByteArray(file7);
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file23 = org.apache.commons.io.FileUtils.getFile(strArray22);
        java.lang.String[] strArray26 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file27 = org.apache.commons.io.FileUtils.getFile(strArray26);
        boolean boolean28 = org.apache.commons.io.FileUtils.isFileOlder(file23, file27);
        boolean boolean30 = org.apache.commons.io.FileUtils.waitFor(file27, (int) '4');
        org.apache.commons.io.LineIterator lineIterator31 = org.apache.commons.io.FileUtils.lineIterator(file27);
        boolean boolean32 = org.apache.commons.io.FileUtils.deleteQuietly(file27);
        org.apache.commons.io.FileUtils.write(file27, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset36 = null;
        org.apache.commons.io.FileUtils.write(file27, (java.lang.CharSequence) "", charset36, true);
        java.nio.charset.Charset charset40 = null;
        org.apache.commons.io.FileUtils.writeStringToFile(file27, "", charset40, false);
        boolean boolean43 = org.apache.commons.io.FileUtils.isFileNewer(file7, file27);
        boolean boolean45 = org.apache.commons.io.FileUtils.isFileOlder(file7, (long) (byte) 100);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter46 = null;
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter47 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Collection<java.io.File> fileCollection48 = org.apache.commons.io.FileUtils.listFiles(file7, iOFileFilter46, iOFileFilter47);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'directory' is not a directory: hi!\\hi!");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[104, 105, 33]");
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(file23);
        org.junit.Assert.assertEquals(file23.getParent(), "hi!");
        org.junit.Assert.assertEquals(file23.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(file27);
        org.junit.Assert.assertEquals(file27.getParent(), "hi!");
        org.junit.Assert.assertEquals(file27.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(lineIterator31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test304");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean13 = org.apache.commons.io.FileUtils.isFileOlder(file7, (-1L));
        java.nio.charset.Charset charset14 = null;
        java.lang.String str15 = org.apache.commons.io.FileUtils.readFileToString(file7, charset14);
        java.io.FileOutputStream fileOutputStream17 = org.apache.commons.io.FileUtils.openOutputStream(file7, false);
        org.apache.commons.io.LineIterator lineIterator18 = org.apache.commons.io.FileUtils.lineIterator(file7);
        org.apache.commons.io.FileUtils.writeStringToFile(file7, "-1 bytes", false);
        java.nio.charset.Charset charset23 = null;
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "32 bytes", charset23);
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "-1 bytes");
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(fileOutputStream17);
        org.junit.Assert.assertNotNull(lineIterator18);
    }

    @Test
    public void test305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test305");
        java.io.File file0 = null;
        java.lang.String[] strArray3 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file4 = org.apache.commons.io.FileUtils.getFile(strArray3);
        java.lang.String[] strArray5 = new java.lang.String[] {};
        java.io.File file6 = org.apache.commons.io.FileUtils.getFile(strArray5);
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(file4, strArray5);
        java.lang.String[] strArray10 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file11 = org.apache.commons.io.FileUtils.getFile(strArray10);
        java.lang.String[] strArray14 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file15 = org.apache.commons.io.FileUtils.getFile(strArray14);
        boolean boolean16 = org.apache.commons.io.FileUtils.isFileOlder(file11, file15);
        boolean boolean18 = org.apache.commons.io.FileUtils.waitFor(file15, (int) '4');
        org.apache.commons.io.LineIterator lineIterator19 = org.apache.commons.io.FileUtils.lineIterator(file15);
        boolean boolean20 = org.apache.commons.io.FileUtils.deleteQuietly(file15);
        org.apache.commons.io.FileUtils.write(file15, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset24 = null;
        org.apache.commons.io.FileUtils.write(file15, (java.lang.CharSequence) "", charset24, true);
        java.nio.charset.Charset charset28 = null;
        org.apache.commons.io.FileUtils.writeStringToFile(file15, "", charset28, false);
        java.lang.String[] strArray33 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file34 = org.apache.commons.io.FileUtils.getFile(strArray33);
        java.lang.String[] strArray37 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file38 = org.apache.commons.io.FileUtils.getFile(strArray37);
        boolean boolean39 = org.apache.commons.io.FileUtils.isFileOlder(file34, file38);
        boolean boolean41 = org.apache.commons.io.FileUtils.waitFor(file38, (int) '4');
        java.lang.String[] strArray44 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file45 = org.apache.commons.io.FileUtils.getFile(strArray44);
        boolean boolean47 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file38, file45, "");
        java.io.FileOutputStream fileOutputStream49 = org.apache.commons.io.FileUtils.openOutputStream(file38, false);
        java.lang.String[] strArray56 = new java.lang.String[] { "", "1048576 EB", "C:\\Users\\Mathieu\\AppData\\Local\\Temp\\", "C:\\Users\\Mathieu", "", "1048576 EB" };
        java.util.ArrayList<java.lang.String> strList57 = new java.util.ArrayList<java.lang.String>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList57, strArray56);
        org.apache.commons.io.FileUtils.writeLines(file38, (java.util.Collection<java.lang.String>) strList57, "1 GB", false);
        org.apache.commons.io.FileUtils.writeLines(file15, (java.util.Collection<java.lang.String>) strList57, "35 bytes");
        org.apache.commons.io.FileUtils.writeLines(file7, (java.util.Collection<java.lang.String>) strList57, "1 GB1048576 EB1 GBC:\\Users\\Mathieu\\AppData\\Local\\Temp\\1 GBC:\\Users\\Mathieu1 GB1 GB1048576 EB1 GB");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.writeLines(file0, (java.util.Collection<java.lang.String>) strList57);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.File.exists()\" because \"file\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(file4);
        org.junit.Assert.assertEquals(file4.getParent(), "hi!");
        org.junit.Assert.assertEquals(file4.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNull(file6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(file11);
        org.junit.Assert.assertEquals(file11.getParent(), "hi!");
        org.junit.Assert.assertEquals(file11.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(file15);
        org.junit.Assert.assertEquals(file15.getParent(), "hi!");
        org.junit.Assert.assertEquals(file15.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(lineIterator19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(file34);
        org.junit.Assert.assertEquals(file34.getParent(), "hi!");
        org.junit.Assert.assertEquals(file34.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(file38);
        org.junit.Assert.assertEquals(file38.getParent(), "hi!");
        org.junit.Assert.assertEquals(file38.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(file45);
        org.junit.Assert.assertEquals(file45.getParent(), "hi!");
        org.junit.Assert.assertEquals(file45.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(fileOutputStream49);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
    }

    @Test
    public void test306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test306");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean12 = org.apache.commons.io.FileUtils.deleteQuietly(file7);
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "hi!");
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "1 GB1048576 EB1 GBC:\\Users\\Mathieu\\AppData\\Local\\Temp\\1 GBC:\\Users\\Mathieu1 GB1 GB1048576 EB1 GB", true);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.String> strList19 = org.apache.commons.io.FileUtils.readLines(file7, "35 bytes");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: 35 bytes");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test307");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean9 = org.apache.commons.io.FileUtils.deleteQuietly(file7);
        java.lang.String[] strArray12 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file13 = org.apache.commons.io.FileUtils.getFile(strArray12);
        java.lang.String[] strArray16 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file17 = org.apache.commons.io.FileUtils.getFile(strArray16);
        boolean boolean18 = org.apache.commons.io.FileUtils.isFileOlder(file13, file17);
        boolean boolean20 = org.apache.commons.io.FileUtils.waitFor(file17, (int) '4');
        java.lang.String[] strArray23 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file24 = org.apache.commons.io.FileUtils.getFile(strArray23);
        boolean boolean26 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file17, file24, "");
        org.apache.commons.io.LineIterator lineIterator27 = org.apache.commons.io.FileUtils.lineIterator(file17);
        org.apache.commons.io.FileUtils.writeStringToFile(file17, "C:\\Users\\Mathieu\\AppData\\Local\\Temp\\", false);
        java.nio.charset.Charset charset32 = null;
        org.apache.commons.io.FileUtils.write(file17, (java.lang.CharSequence) "", charset32, true);
        boolean boolean36 = org.apache.commons.io.FileUtils.waitFor(file17, 0);
        boolean boolean37 = org.apache.commons.io.FileUtils.isFileOlder(file7, file17);
        boolean boolean39 = org.apache.commons.io.FileUtils.isFileOlder(file7, 1024L);
        java.util.zip.Checksum checksum40 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.zip.Checksum checksum41 = org.apache.commons.io.FileUtils.checksum(file7, checksum40);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.util.zip.Checksum.update(byte[], int, int)\" because \"this.cksum\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(file13);
        org.junit.Assert.assertEquals(file13.getParent(), "hi!");
        org.junit.Assert.assertEquals(file13.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(file17);
        org.junit.Assert.assertEquals(file17.getParent(), "hi!");
        org.junit.Assert.assertEquals(file17.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(file24);
        org.junit.Assert.assertEquals(file24.getParent(), "hi!");
        org.junit.Assert.assertEquals(file24.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(lineIterator27);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test308");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter9 = null;
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter10 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Collection<java.io.File> fileCollection11 = org.apache.commons.io.FileUtils.listFiles(file3, iOFileFilter9, iOFileFilter10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'directory' is not a directory: hi!\\hi!");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test309");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean12 = org.apache.commons.io.FileUtils.deleteQuietly(file7);
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset16 = null;
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "", charset16, true);
        java.nio.charset.Charset charset20 = null;
        org.apache.commons.io.FileUtils.writeStringToFile(file7, "", charset20, false);
        java.io.FileOutputStream fileOutputStream23 = org.apache.commons.io.FileUtils.openOutputStream(file7);
        java.lang.String[] strArray26 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file27 = org.apache.commons.io.FileUtils.getFile(strArray26);
        java.lang.String[] strArray30 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file31 = org.apache.commons.io.FileUtils.getFile(strArray30);
        boolean boolean32 = org.apache.commons.io.FileUtils.isFileOlder(file27, file31);
        boolean boolean34 = org.apache.commons.io.FileUtils.waitFor(file31, (int) '4');
        org.apache.commons.io.LineIterator lineIterator35 = org.apache.commons.io.FileUtils.lineIterator(file31);
        boolean boolean36 = org.apache.commons.io.FileUtils.deleteQuietly(file31);
        org.apache.commons.io.FileUtils.writeStringToFile(file31, "");
        java.lang.String[] strArray41 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file42 = org.apache.commons.io.FileUtils.getFile(strArray41);
        java.lang.String[] strArray45 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file46 = org.apache.commons.io.FileUtils.getFile(strArray45);
        boolean boolean47 = org.apache.commons.io.FileUtils.isFileOlder(file42, file46);
        boolean boolean49 = org.apache.commons.io.FileUtils.waitFor(file46, (int) '4');
        java.lang.String[] strArray52 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file53 = org.apache.commons.io.FileUtils.getFile(strArray52);
        boolean boolean55 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file46, file53, "");
        boolean boolean56 = org.apache.commons.io.FileUtils.isFileNewer(file31, file46);
        java.io.FileOutputStream fileOutputStream57 = org.apache.commons.io.FileUtils.openOutputStream(file31);
        java.lang.String[] strArray60 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file61 = org.apache.commons.io.FileUtils.getFile(strArray60);
        java.lang.String[] strArray64 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file65 = org.apache.commons.io.FileUtils.getFile(strArray64);
        boolean boolean66 = org.apache.commons.io.FileUtils.isFileOlder(file61, file65);
        boolean boolean68 = org.apache.commons.io.FileUtils.waitFor(file65, (int) '4');
        org.apache.commons.io.LineIterator lineIterator69 = org.apache.commons.io.FileUtils.lineIterator(file65);
        boolean boolean70 = org.apache.commons.io.FileUtils.deleteQuietly(file65);
        org.apache.commons.io.FileUtils.write(file65, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset74 = null;
        org.apache.commons.io.FileUtils.write(file65, (java.lang.CharSequence) "", charset74, true);
        java.nio.charset.Charset charset77 = null;
        java.lang.String str78 = org.apache.commons.io.FileUtils.readFileToString(file65, charset77);
        boolean boolean79 = org.apache.commons.io.FileUtils.contentEquals(file31, file65);
        java.lang.String[] strArray82 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file83 = org.apache.commons.io.FileUtils.getFile(strArray82);
        java.io.File file84 = org.apache.commons.io.FileUtils.getFile(file31, strArray82);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.copyFile(file7, file31);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Source 'hi!\\hi!' and destination 'hi!\\hi!' are the same");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(fileOutputStream23);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(file27);
        org.junit.Assert.assertEquals(file27.getParent(), "hi!");
        org.junit.Assert.assertEquals(file27.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(file31);
        org.junit.Assert.assertEquals(file31.getParent(), "hi!");
        org.junit.Assert.assertEquals(file31.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(lineIterator35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(file42);
        org.junit.Assert.assertEquals(file42.getParent(), "hi!");
        org.junit.Assert.assertEquals(file42.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(file46);
        org.junit.Assert.assertEquals(file46.getParent(), "hi!");
        org.junit.Assert.assertEquals(file46.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(file53);
        org.junit.Assert.assertEquals(file53.getParent(), "hi!");
        org.junit.Assert.assertEquals(file53.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(fileOutputStream57);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(file61);
        org.junit.Assert.assertEquals(file61.getParent(), "hi!");
        org.junit.Assert.assertEquals(file61.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(file65);
        org.junit.Assert.assertEquals(file65.getParent(), "hi!");
        org.junit.Assert.assertEquals(file65.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(lineIterator69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "hi!" + "'", str78, "hi!");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertNotNull(file83);
        org.junit.Assert.assertEquals(file83.getParent(), "hi!");
        org.junit.Assert.assertEquals(file83.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(file84);
        org.junit.Assert.assertEquals(file84.getParent(), "hi!\\hi!\\hi!");
        org.junit.Assert.assertEquals(file84.toString(), "hi!\\hi!\\hi!\\hi!");
    }

    @Test
    public void test310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test310");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean13 = org.apache.commons.io.FileUtils.isFileOlder(file7, (-1L));
        byte[] byteArray14 = new byte[] {};
        org.apache.commons.io.FileUtils.writeByteArrayToFile(file7, byteArray14);
        java.io.FileOutputStream fileOutputStream16 = org.apache.commons.io.FileUtils.openOutputStream(file7);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.LineIterator lineIterator18 = org.apache.commons.io.FileUtils.lineIterator(file7, "35 bytes");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: 35 bytes");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(fileOutputStream16);
    }

    @Test
    public void test311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test311");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file14 = org.apache.commons.io.FileUtils.getFile(strArray13);
        boolean boolean16 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file7, file14, "");
        org.apache.commons.io.LineIterator lineIterator17 = org.apache.commons.io.FileUtils.lineIterator(file7);
        org.apache.commons.io.FileUtils.writeStringToFile(file7, "C:\\Users\\Mathieu\\AppData\\Local\\Temp\\", false);
        java.nio.charset.Charset charset22 = null;
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "", charset22, true);
        boolean boolean26 = org.apache.commons.io.FileUtils.waitFor(file7, 0);
        java.nio.charset.Charset charset27 = null;
        java.lang.String str28 = org.apache.commons.io.FileUtils.readFileToString(file7, charset27);
        long long29 = org.apache.commons.io.FileUtils.checksumCRC32(file7);
        java.nio.charset.Charset charset31 = null;
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "1048576 EB", charset31, true);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.LineIterator lineIterator35 = org.apache.commons.io.FileUtils.lineIterator(file7, "C:\\Users\\Mathieu\\AppData\\Local\\Temp\\");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: C:\\Users\\Mathieu\\AppData\\Local\\Temp\\");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(file14);
        org.junit.Assert.assertEquals(file14.getParent(), "hi!");
        org.junit.Assert.assertEquals(file14.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(lineIterator17);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "C:\\Users\\Mathieu\\AppData\\Local\\Temp\\" + "'", str28, "C:\\Users\\Mathieu\\AppData\\Local\\Temp\\");
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 4154702209L + "'", long29 == 4154702209L);
    }

    @Test
    public void test312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test312");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean12 = org.apache.commons.io.FileUtils.deleteQuietly(file7);
        org.apache.commons.io.FileUtils.writeStringToFile(file7, "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file18 = org.apache.commons.io.FileUtils.getFile(strArray17);
        java.lang.String[] strArray21 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file22 = org.apache.commons.io.FileUtils.getFile(strArray21);
        boolean boolean23 = org.apache.commons.io.FileUtils.isFileOlder(file18, file22);
        boolean boolean25 = org.apache.commons.io.FileUtils.waitFor(file22, (int) '4');
        java.lang.String[] strArray28 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file29 = org.apache.commons.io.FileUtils.getFile(strArray28);
        boolean boolean31 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file22, file29, "");
        boolean boolean32 = org.apache.commons.io.FileUtils.isFileNewer(file7, file22);
        java.io.File file33 = null;
        boolean boolean34 = org.apache.commons.io.FileUtils.contentEquals(file22, file33);
        org.apache.commons.io.FileUtils.touch(file22);
        java.lang.String[] strArray38 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file39 = org.apache.commons.io.FileUtils.getFile(strArray38);
        java.lang.String[] strArray42 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file43 = org.apache.commons.io.FileUtils.getFile(strArray42);
        boolean boolean44 = org.apache.commons.io.FileUtils.isFileOlder(file39, file43);
        java.lang.String str45 = org.apache.commons.io.FileUtils.readFileToString(file39);
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file49 = org.apache.commons.io.FileUtils.getFile(strArray48);
        java.io.File file50 = org.apache.commons.io.FileUtils.getFile(file39, strArray48);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.copyFile(file22, file50);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Destination 'hi!\\hi!\\hi!' directory cannot be created");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(file18);
        org.junit.Assert.assertEquals(file18.getParent(), "hi!");
        org.junit.Assert.assertEquals(file18.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(file22);
        org.junit.Assert.assertEquals(file22.getParent(), "hi!");
        org.junit.Assert.assertEquals(file22.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(file29);
        org.junit.Assert.assertEquals(file29.getParent(), "hi!");
        org.junit.Assert.assertEquals(file29.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(file39);
        org.junit.Assert.assertEquals(file39.getParent(), "hi!");
        org.junit.Assert.assertEquals(file39.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(file43);
        org.junit.Assert.assertEquals(file43.getParent(), "hi!");
        org.junit.Assert.assertEquals(file43.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(file49);
        org.junit.Assert.assertEquals(file49.getParent(), "hi!");
        org.junit.Assert.assertEquals(file49.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(file50);
        org.junit.Assert.assertEquals(file50.getParent(), "hi!\\hi!\\hi!");
        org.junit.Assert.assertEquals(file50.toString(), "hi!\\hi!\\hi!\\hi!");
    }

    @Test
    @Disabled
    public void test313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test313");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        long long12 = org.apache.commons.io.FileUtils.checksumCRC32(file7);
        java.lang.String[] strArray15 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file16 = org.apache.commons.io.FileUtils.getFile(strArray15);
        java.lang.String[] strArray19 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file20 = org.apache.commons.io.FileUtils.getFile(strArray19);
        boolean boolean21 = org.apache.commons.io.FileUtils.isFileOlder(file16, file20);
        boolean boolean23 = org.apache.commons.io.FileUtils.waitFor(file20, (int) '4');
        org.apache.commons.io.LineIterator lineIterator24 = org.apache.commons.io.FileUtils.lineIterator(file20);
        boolean boolean25 = org.apache.commons.io.FileUtils.deleteQuietly(file20);
        org.apache.commons.io.FileUtils.writeStringToFile(file20, "");
        java.lang.String[] strArray30 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file31 = org.apache.commons.io.FileUtils.getFile(strArray30);
        java.lang.String[] strArray34 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file35 = org.apache.commons.io.FileUtils.getFile(strArray34);
        boolean boolean36 = org.apache.commons.io.FileUtils.isFileOlder(file31, file35);
        boolean boolean38 = org.apache.commons.io.FileUtils.waitFor(file35, (int) '4');
        java.lang.String[] strArray41 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file42 = org.apache.commons.io.FileUtils.getFile(strArray41);
        boolean boolean44 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file35, file42, "");
        boolean boolean45 = org.apache.commons.io.FileUtils.isFileNewer(file20, file35);
        boolean boolean46 = org.apache.commons.io.FileUtils.isSymlink(file20);
        boolean boolean48 = org.apache.commons.io.FileUtils.waitFor(file20, (int) '4');
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.copyToDirectory(file7, file20);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Destination 'hi!\\hi!' is not a directory");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + 3698770167L + "'", long12 == 3698770167L);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(file16);
        org.junit.Assert.assertEquals(file16.getParent(), "hi!");
        org.junit.Assert.assertEquals(file16.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(file20);
        org.junit.Assert.assertEquals(file20.getParent(), "hi!");
        org.junit.Assert.assertEquals(file20.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(lineIterator24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(file31);
        org.junit.Assert.assertEquals(file31.getParent(), "hi!");
        org.junit.Assert.assertEquals(file31.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(file35);
        org.junit.Assert.assertEquals(file35.getParent(), "hi!");
        org.junit.Assert.assertEquals(file35.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(file42);
        org.junit.Assert.assertEquals(file42.getParent(), "hi!");
        org.junit.Assert.assertEquals(file42.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
    }

    @Test
    public void test314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test314");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file14 = org.apache.commons.io.FileUtils.getFile(strArray13);
        boolean boolean16 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file7, file14, "");
        org.apache.commons.io.LineIterator lineIterator17 = org.apache.commons.io.FileUtils.lineIterator(file7);
        org.apache.commons.io.FileUtils.writeStringToFile(file7, "C:\\Users\\Mathieu\\AppData\\Local\\Temp\\", false);
        java.lang.String[] strArray23 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file24 = org.apache.commons.io.FileUtils.getFile(strArray23);
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file28 = org.apache.commons.io.FileUtils.getFile(strArray27);
        boolean boolean29 = org.apache.commons.io.FileUtils.isFileOlder(file24, file28);
        java.lang.String str30 = org.apache.commons.io.FileUtils.readFileToString(file24);
        java.lang.String[] strArray33 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file34 = org.apache.commons.io.FileUtils.getFile(strArray33);
        java.io.File file35 = org.apache.commons.io.FileUtils.getFile(file24, strArray33);
        boolean boolean37 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file7, file35, "-1 bytes");
        java.lang.String[] strArray40 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file41 = org.apache.commons.io.FileUtils.getFile(strArray40);
        java.io.File file42 = org.apache.commons.io.FileUtils.getFile(strArray40);
        java.math.BigInteger bigInteger43 = org.apache.commons.io.FileUtils.sizeOfAsBigInteger(file42);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.moveFile(file35, file42);
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: Source 'hi!\\hi!\\hi!\\hi!' does not exist");
        } catch (java.io.FileNotFoundException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(file14);
        org.junit.Assert.assertEquals(file14.getParent(), "hi!");
        org.junit.Assert.assertEquals(file14.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(lineIterator17);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(file24);
        org.junit.Assert.assertEquals(file24.getParent(), "hi!");
        org.junit.Assert.assertEquals(file24.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(file28);
        org.junit.Assert.assertEquals(file28.getParent(), "hi!");
        org.junit.Assert.assertEquals(file28.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "C:\\Users\\Mathieu\\AppData\\Local\\Temp\\" + "'", str30, "C:\\Users\\Mathieu\\AppData\\Local\\Temp\\");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(file34);
        org.junit.Assert.assertEquals(file34.getParent(), "hi!");
        org.junit.Assert.assertEquals(file34.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(file35);
        org.junit.Assert.assertEquals(file35.getParent(), "hi!\\hi!\\hi!");
        org.junit.Assert.assertEquals(file35.toString(), "hi!\\hi!\\hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(file41);
        org.junit.Assert.assertEquals(file41.getParent(), "hi!");
        org.junit.Assert.assertEquals(file41.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(file42);
        org.junit.Assert.assertEquals(file42.getParent(), "hi!");
        org.junit.Assert.assertEquals(file42.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(bigInteger43);
    }

    @Test
    public void test315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test315");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean12 = org.apache.commons.io.FileUtils.deleteQuietly(file7);
        org.apache.commons.io.FileUtils.writeStringToFile(file7, "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file18 = org.apache.commons.io.FileUtils.getFile(strArray17);
        java.lang.String[] strArray21 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file22 = org.apache.commons.io.FileUtils.getFile(strArray21);
        boolean boolean23 = org.apache.commons.io.FileUtils.isFileOlder(file18, file22);
        boolean boolean25 = org.apache.commons.io.FileUtils.waitFor(file22, (int) '4');
        java.lang.String[] strArray28 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file29 = org.apache.commons.io.FileUtils.getFile(strArray28);
        boolean boolean31 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file22, file29, "");
        boolean boolean32 = org.apache.commons.io.FileUtils.isFileNewer(file7, file22);
        java.util.Date date33 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean34 = org.apache.commons.io.FileUtils.isFileNewer(file7, date33);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No specified date");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(file18);
        org.junit.Assert.assertEquals(file18.getParent(), "hi!");
        org.junit.Assert.assertEquals(file18.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(file22);
        org.junit.Assert.assertEquals(file22.getParent(), "hi!");
        org.junit.Assert.assertEquals(file22.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(file29);
        org.junit.Assert.assertEquals(file29.getParent(), "hi!");
        org.junit.Assert.assertEquals(file29.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test316");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file14 = org.apache.commons.io.FileUtils.getFile(strArray13);
        boolean boolean16 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file7, file14, "");
        org.apache.commons.io.LineIterator lineIterator17 = org.apache.commons.io.FileUtils.lineIterator(file7);
        org.apache.commons.io.FileUtils.writeStringToFile(file7, "C:\\Users\\Mathieu\\AppData\\Local\\Temp\\", false);
        java.nio.charset.Charset charset22 = null;
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "", charset22, true);
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file28 = org.apache.commons.io.FileUtils.getFile(strArray27);
        java.lang.String[] strArray31 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file32 = org.apache.commons.io.FileUtils.getFile(strArray31);
        boolean boolean33 = org.apache.commons.io.FileUtils.isFileOlder(file28, file32);
        boolean boolean35 = org.apache.commons.io.FileUtils.waitFor(file32, (int) '4');
        org.apache.commons.io.LineIterator lineIterator36 = org.apache.commons.io.FileUtils.lineIterator(file32);
        boolean boolean37 = org.apache.commons.io.FileUtils.deleteQuietly(file32);
        org.apache.commons.io.FileUtils.write(file32, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset41 = null;
        org.apache.commons.io.FileUtils.write(file32, (java.lang.CharSequence) "", charset41, true);
        byte[] byteArray44 = org.apache.commons.io.FileUtils.readFileToByteArray(file32);
        org.apache.commons.io.FileUtils.writeByteArrayToFile(file7, byteArray44);
        java.nio.charset.Charset charset47 = null;
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "", charset47);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.cleanDirectory(file7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: hi!\\hi! is not a directory");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(file14);
        org.junit.Assert.assertEquals(file14.getParent(), "hi!");
        org.junit.Assert.assertEquals(file14.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(lineIterator17);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(file28);
        org.junit.Assert.assertEquals(file28.getParent(), "hi!");
        org.junit.Assert.assertEquals(file28.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(file32);
        org.junit.Assert.assertEquals(file32.getParent(), "hi!");
        org.junit.Assert.assertEquals(file32.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(lineIterator36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[104, 105, 33]");
    }

    @Test
    public void test317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test317");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean12 = org.apache.commons.io.FileUtils.deleteQuietly(file7);
        java.io.FileOutputStream fileOutputStream13 = org.apache.commons.io.FileUtils.openOutputStream(file7);
        java.io.FileInputStream fileInputStream14 = org.apache.commons.io.FileUtils.openInputStream(file7);
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file18 = org.apache.commons.io.FileUtils.getFile(strArray17);
        org.apache.commons.io.FileUtils.copyToFile((java.io.InputStream) fileInputStream14, file18);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.writeStringToFile(file18, "100 bytes", "", true);
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(fileOutputStream13);
        org.junit.Assert.assertNotNull(fileInputStream14);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(file18);
        org.junit.Assert.assertEquals(file18.getParent(), "hi!");
        org.junit.Assert.assertEquals(file18.toString(), "hi!\\hi!");
    }

    @Test
    public void test318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test318");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean12 = org.apache.commons.io.FileUtils.deleteQuietly(file7);
        org.apache.commons.io.FileUtils.writeStringToFile(file7, "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file18 = org.apache.commons.io.FileUtils.getFile(strArray17);
        java.lang.String[] strArray21 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file22 = org.apache.commons.io.FileUtils.getFile(strArray21);
        boolean boolean23 = org.apache.commons.io.FileUtils.isFileOlder(file18, file22);
        boolean boolean25 = org.apache.commons.io.FileUtils.waitFor(file22, (int) '4');
        java.lang.String[] strArray28 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file29 = org.apache.commons.io.FileUtils.getFile(strArray28);
        boolean boolean31 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file22, file29, "");
        boolean boolean32 = org.apache.commons.io.FileUtils.isFileNewer(file7, file22);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.forceDelete(file22);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Unable to delete file: hi!\\hi!");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(file18);
        org.junit.Assert.assertEquals(file18.getParent(), "hi!");
        org.junit.Assert.assertEquals(file18.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(file22);
        org.junit.Assert.assertEquals(file22.getParent(), "hi!");
        org.junit.Assert.assertEquals(file22.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(file29);
        org.junit.Assert.assertEquals(file29.getParent(), "hi!");
        org.junit.Assert.assertEquals(file29.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test319");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file14 = org.apache.commons.io.FileUtils.getFile(strArray13);
        boolean boolean16 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file7, file14, "");
        org.apache.commons.io.LineIterator lineIterator17 = org.apache.commons.io.FileUtils.lineIterator(file7);
        org.apache.commons.io.FileUtils.writeStringToFile(file7, "C:\\Users\\Mathieu\\AppData\\Local\\Temp\\", false);
        boolean boolean22 = org.apache.commons.io.FileUtils.isFileOlder(file7, (long) (short) 0);
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file26 = org.apache.commons.io.FileUtils.getFile(strArray25);
        java.lang.String[] strArray29 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file30 = org.apache.commons.io.FileUtils.getFile(strArray29);
        boolean boolean31 = org.apache.commons.io.FileUtils.isFileOlder(file26, file30);
        boolean boolean33 = org.apache.commons.io.FileUtils.waitFor(file30, (int) '4');
        org.apache.commons.io.LineIterator lineIterator34 = org.apache.commons.io.FileUtils.lineIterator(file30);
        boolean boolean35 = org.apache.commons.io.FileUtils.deleteQuietly(file30);
        org.apache.commons.io.FileUtils.writeStringToFile(file30, "");
        java.lang.String[] strArray40 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file41 = org.apache.commons.io.FileUtils.getFile(strArray40);
        java.lang.String[] strArray44 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file45 = org.apache.commons.io.FileUtils.getFile(strArray44);
        boolean boolean46 = org.apache.commons.io.FileUtils.isFileOlder(file41, file45);
        boolean boolean48 = org.apache.commons.io.FileUtils.waitFor(file45, (int) '4');
        java.lang.String[] strArray51 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file52 = org.apache.commons.io.FileUtils.getFile(strArray51);
        boolean boolean54 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file45, file52, "");
        boolean boolean55 = org.apache.commons.io.FileUtils.isFileNewer(file30, file45);
        java.io.FileOutputStream fileOutputStream56 = org.apache.commons.io.FileUtils.openOutputStream(file30);
        long long57 = org.apache.commons.io.FileUtils.copyFile(file7, (java.io.OutputStream) fileOutputStream56);
        java.lang.String[] strArray60 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file61 = org.apache.commons.io.FileUtils.getFile(strArray60);
        java.lang.String[] strArray62 = new java.lang.String[] {};
        java.io.File file63 = org.apache.commons.io.FileUtils.getFile(strArray62);
        java.io.File file64 = org.apache.commons.io.FileUtils.getFile(file61, strArray62);
        java.lang.String[] strArray68 = new java.lang.String[] { "35 bytes", "1048576 EB", "hi!" };
        java.util.ArrayList<java.lang.String> strList69 = new java.util.ArrayList<java.lang.String>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList69, strArray68);
        org.apache.commons.io.FileUtils.writeLines(file64, (java.util.Collection<java.lang.String>) strList69, "1 GB1048576 EB1 GBC:\\Users\\Mathieu\\AppData\\Local\\Temp\\1 GBC:\\Users\\Mathieu1 GB1 GB1048576 EB1 GB");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.copyFileToDirectory(file7, file64);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Destination 'hi!\\hi!' is not a directory");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(file14);
        org.junit.Assert.assertEquals(file14.getParent(), "hi!");
        org.junit.Assert.assertEquals(file14.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(lineIterator17);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(file26);
        org.junit.Assert.assertEquals(file26.getParent(), "hi!");
        org.junit.Assert.assertEquals(file26.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(file30);
        org.junit.Assert.assertEquals(file30.getParent(), "hi!");
        org.junit.Assert.assertEquals(file30.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(lineIterator34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(file41);
        org.junit.Assert.assertEquals(file41.getParent(), "hi!");
        org.junit.Assert.assertEquals(file41.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(file45);
        org.junit.Assert.assertEquals(file45.getParent(), "hi!");
        org.junit.Assert.assertEquals(file45.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(file52);
        org.junit.Assert.assertEquals(file52.getParent(), "hi!");
        org.junit.Assert.assertEquals(file52.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(fileOutputStream56);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(file61);
        org.junit.Assert.assertEquals(file61.getParent(), "hi!");
        org.junit.Assert.assertEquals(file61.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNull(file63);
        org.junit.Assert.assertNotNull(file64);
        org.junit.Assert.assertEquals(file64.getParent(), "hi!");
        org.junit.Assert.assertEquals(file64.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
    }

    @Test
    public void test320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test320");
        java.net.URL uRL0 = null;
        java.io.File file1 = org.apache.commons.io.FileUtils.getTempDirectory();
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file5 = org.apache.commons.io.FileUtils.getFile(strArray4);
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file9 = org.apache.commons.io.FileUtils.getFile(strArray8);
        boolean boolean10 = org.apache.commons.io.FileUtils.isFileOlder(file5, file9);
        boolean boolean12 = org.apache.commons.io.FileUtils.waitFor(file9, (int) '4');
        org.apache.commons.io.LineIterator lineIterator13 = org.apache.commons.io.FileUtils.lineIterator(file9);
        boolean boolean15 = org.apache.commons.io.FileUtils.isFileOlder(file9, (-1L));
        java.nio.charset.Charset charset16 = null;
        java.lang.String str17 = org.apache.commons.io.FileUtils.readFileToString(file9, charset16);
        java.io.FileOutputStream fileOutputStream19 = org.apache.commons.io.FileUtils.openOutputStream(file9, false);
        java.io.FileOutputStream fileOutputStream21 = org.apache.commons.io.FileUtils.openOutputStream(file9, true);
        boolean boolean22 = org.apache.commons.io.FileUtils.isFileOlder(file1, file9);
        java.io.FileInputStream fileInputStream23 = org.apache.commons.io.FileUtils.openInputStream(file9);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.copyURLToFile(uRL0, file9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.net.URL.openStream()\" because \"source\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(file1);
        org.junit.Assert.assertEquals(file1.getParent(), "C:\\Users\\Mathieu\\AppData\\Local");
        org.junit.Assert.assertEquals(file1.toString(), "C:\\Users\\Mathieu\\AppData\\Local\\Temp");
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(file5);
        org.junit.Assert.assertEquals(file5.getParent(), "hi!");
        org.junit.Assert.assertEquals(file5.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(file9);
        org.junit.Assert.assertEquals(file9.getParent(), "hi!");
        org.junit.Assert.assertEquals(file9.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(lineIterator13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "35 bytes1 GB1048576 EB1 GBC:\\Users\\Mathieu\\AppData\\Local\\Temp\\1 GBC:\\Users\\Mathieu1 GB1 GB1048576 EB1 GB1048576 EB1 GB1048576 EB1 GBC:\\Users\\Mathieu\\AppData\\Local\\Temp\\1 GBC:\\Users\\Mathieu1 GB1 GB1048576 EB1 GBhi!1 GB1048576 EB1 GBC:\\Users\\Mathieu\\AppData\\Local\\Temp\\1 GBC:\\Users\\Mathieu1 GB1 GB1048576 EB1 GB" + "'", str17, "35 bytes1 GB1048576 EB1 GBC:\\Users\\Mathieu\\AppData\\Local\\Temp\\1 GBC:\\Users\\Mathieu1 GB1 GB1048576 EB1 GB1048576 EB1 GB1048576 EB1 GBC:\\Users\\Mathieu\\AppData\\Local\\Temp\\1 GBC:\\Users\\Mathieu1 GB1 GB1048576 EB1 GBhi!1 GB1048576 EB1 GBC:\\Users\\Mathieu\\AppData\\Local\\Temp\\1 GBC:\\Users\\Mathieu1 GB1 GB1048576 EB1 GB");
        org.junit.Assert.assertNotNull(fileOutputStream19);
        org.junit.Assert.assertNotNull(fileOutputStream21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(fileInputStream23);
    }

    @Test
    public void test321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test321");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file14 = org.apache.commons.io.FileUtils.getFile(strArray13);
        boolean boolean16 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file7, file14, "");
        org.apache.commons.io.LineIterator lineIterator17 = org.apache.commons.io.FileUtils.lineIterator(file7);
        org.apache.commons.io.FileUtils.writeStringToFile(file7, "C:\\Users\\Mathieu\\AppData\\Local\\Temp\\", false);
        java.lang.String[] strArray23 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file24 = org.apache.commons.io.FileUtils.getFile(strArray23);
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file28 = org.apache.commons.io.FileUtils.getFile(strArray27);
        boolean boolean29 = org.apache.commons.io.FileUtils.isFileOlder(file24, file28);
        java.lang.String str30 = org.apache.commons.io.FileUtils.readFileToString(file24);
        java.lang.String[] strArray33 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file34 = org.apache.commons.io.FileUtils.getFile(strArray33);
        java.io.File file35 = org.apache.commons.io.FileUtils.getFile(file24, strArray33);
        boolean boolean37 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file7, file35, "-1 bytes");
        java.io.FileOutputStream fileOutputStream38 = org.apache.commons.io.FileUtils.openOutputStream(file7);
        java.io.File file39 = org.apache.commons.io.FileUtils.getTempDirectory();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean40 = org.apache.commons.io.FileUtils.contentEquals(file7, file39);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Can't compare directories, only files");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(file14);
        org.junit.Assert.assertEquals(file14.getParent(), "hi!");
        org.junit.Assert.assertEquals(file14.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(lineIterator17);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(file24);
        org.junit.Assert.assertEquals(file24.getParent(), "hi!");
        org.junit.Assert.assertEquals(file24.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(file28);
        org.junit.Assert.assertEquals(file28.getParent(), "hi!");
        org.junit.Assert.assertEquals(file28.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "C:\\Users\\Mathieu\\AppData\\Local\\Temp\\" + "'", str30, "C:\\Users\\Mathieu\\AppData\\Local\\Temp\\");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(file34);
        org.junit.Assert.assertEquals(file34.getParent(), "hi!");
        org.junit.Assert.assertEquals(file34.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(file35);
        org.junit.Assert.assertEquals(file35.getParent(), "hi!\\hi!\\hi!");
        org.junit.Assert.assertEquals(file35.toString(), "hi!\\hi!\\hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(fileOutputStream38);
        org.junit.Assert.assertNotNull(file39);
        org.junit.Assert.assertEquals(file39.getParent(), "C:\\Users\\Mathieu\\AppData\\Local");
        org.junit.Assert.assertEquals(file39.toString(), "C:\\Users\\Mathieu\\AppData\\Local\\Temp");
    }

    @Test
    public void test322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test322");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file14 = org.apache.commons.io.FileUtils.getFile(strArray13);
        boolean boolean16 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file7, file14, "");
        java.io.FileOutputStream fileOutputStream18 = org.apache.commons.io.FileUtils.openOutputStream(file7, false);
        java.util.zip.Checksum checksum19 = null;
        java.util.zip.Checksum checksum20 = org.apache.commons.io.FileUtils.checksum(file7, checksum19);
        java.lang.String[] strArray23 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file24 = org.apache.commons.io.FileUtils.getFile(strArray23);
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file28 = org.apache.commons.io.FileUtils.getFile(strArray27);
        boolean boolean29 = org.apache.commons.io.FileUtils.isFileOlder(file24, file28);
        boolean boolean31 = org.apache.commons.io.FileUtils.waitFor(file28, (int) '4');
        org.apache.commons.io.LineIterator lineIterator32 = org.apache.commons.io.FileUtils.lineIterator(file28);
        boolean boolean33 = org.apache.commons.io.FileUtils.deleteQuietly(file28);
        org.apache.commons.io.FileUtils.write(file28, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset37 = null;
        org.apache.commons.io.FileUtils.write(file28, (java.lang.CharSequence) "", charset37, true);
        byte[] byteArray40 = org.apache.commons.io.FileUtils.readFileToByteArray(file28);
        boolean boolean42 = org.apache.commons.io.FileUtils.waitFor(file28, (int) 'a');
        byte[] byteArray43 = org.apache.commons.io.FileUtils.readFileToByteArray(file28);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.copyFileToDirectory(file7, file28, true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Destination 'hi!\\hi!' is not a directory");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(file14);
        org.junit.Assert.assertEquals(file14.getParent(), "hi!");
        org.junit.Assert.assertEquals(file14.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(fileOutputStream18);
        org.junit.Assert.assertNull(checksum20);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(file24);
        org.junit.Assert.assertEquals(file24.getParent(), "hi!");
        org.junit.Assert.assertEquals(file24.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(file28);
        org.junit.Assert.assertEquals(file28.getParent(), "hi!");
        org.junit.Assert.assertEquals(file28.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(lineIterator32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[104, 105, 33]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[104, 105, 33]");
    }

    @Test
    public void test323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test323");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean12 = org.apache.commons.io.FileUtils.deleteQuietly(file7);
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "hi!");
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "-1 bytes", false);
        java.io.FileOutputStream fileOutputStream18 = org.apache.commons.io.FileUtils.openOutputStream(file7);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(fileOutputStream18);
    }

    @Test
    public void test324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test324");
        java.io.File file0 = null;
        java.io.File file1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.moveDirectory(file0, file1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: source");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test325");
        java.io.File file0 = org.apache.commons.io.FileUtils.getTempDirectory();
        java.lang.String[] strArray3 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file4 = org.apache.commons.io.FileUtils.getFile(strArray3);
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file8 = org.apache.commons.io.FileUtils.getFile(strArray7);
        boolean boolean9 = org.apache.commons.io.FileUtils.isFileOlder(file4, file8);
        boolean boolean11 = org.apache.commons.io.FileUtils.waitFor(file8, (int) '4');
        org.apache.commons.io.LineIterator lineIterator12 = org.apache.commons.io.FileUtils.lineIterator(file8);
        boolean boolean14 = org.apache.commons.io.FileUtils.isFileOlder(file8, (-1L));
        java.nio.charset.Charset charset15 = null;
        java.lang.String str16 = org.apache.commons.io.FileUtils.readFileToString(file8, charset15);
        java.io.FileOutputStream fileOutputStream18 = org.apache.commons.io.FileUtils.openOutputStream(file8, false);
        java.io.FileOutputStream fileOutputStream20 = org.apache.commons.io.FileUtils.openOutputStream(file8, true);
        boolean boolean21 = org.apache.commons.io.FileUtils.isFileOlder(file0, file8);
        java.io.FileInputStream fileInputStream22 = org.apache.commons.io.FileUtils.openInputStream(file8);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.forceMkdir(file8);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: File hi!\\hi! exists and is not a directory. Unable to create directory.");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(file0);
        org.junit.Assert.assertEquals(file0.getParent(), "C:\\Users\\Mathieu\\AppData\\Local");
        org.junit.Assert.assertEquals(file0.toString(), "C:\\Users\\Mathieu\\AppData\\Local\\Temp");
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(file4);
        org.junit.Assert.assertEquals(file4.getParent(), "hi!");
        org.junit.Assert.assertEquals(file4.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(file8);
        org.junit.Assert.assertEquals(file8.getParent(), "hi!");
        org.junit.Assert.assertEquals(file8.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(lineIterator12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(fileOutputStream18);
        org.junit.Assert.assertNotNull(fileOutputStream20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(fileInputStream22);
    }

    @Test
    public void test326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test326");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String str4 = org.apache.commons.io.FileUtils.readFileToString(file3);
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file9 = org.apache.commons.io.FileUtils.getFile(strArray8);
        java.lang.String[] strArray12 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file13 = org.apache.commons.io.FileUtils.getFile(strArray12);
        boolean boolean14 = org.apache.commons.io.FileUtils.isFileOlder(file9, file13);
        boolean boolean16 = org.apache.commons.io.FileUtils.waitFor(file13, (int) '4');
        java.lang.String[] strArray19 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file20 = org.apache.commons.io.FileUtils.getFile(strArray19);
        boolean boolean22 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file13, file20, "");
        org.apache.commons.io.LineIterator lineIterator23 = org.apache.commons.io.FileUtils.lineIterator(file13);
        org.apache.commons.io.FileUtils.writeStringToFile(file13, "C:\\Users\\Mathieu\\AppData\\Local\\Temp\\", false);
        java.nio.charset.Charset charset28 = null;
        org.apache.commons.io.FileUtils.write(file13, (java.lang.CharSequence) "", charset28, true);
        java.lang.String[] strArray33 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file34 = org.apache.commons.io.FileUtils.getFile(strArray33);
        java.lang.String[] strArray37 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file38 = org.apache.commons.io.FileUtils.getFile(strArray37);
        boolean boolean39 = org.apache.commons.io.FileUtils.isFileOlder(file34, file38);
        boolean boolean41 = org.apache.commons.io.FileUtils.waitFor(file38, (int) '4');
        org.apache.commons.io.LineIterator lineIterator42 = org.apache.commons.io.FileUtils.lineIterator(file38);
        boolean boolean43 = org.apache.commons.io.FileUtils.deleteQuietly(file38);
        org.apache.commons.io.FileUtils.write(file38, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset47 = null;
        org.apache.commons.io.FileUtils.write(file38, (java.lang.CharSequence) "", charset47, true);
        byte[] byteArray50 = org.apache.commons.io.FileUtils.readFileToByteArray(file38);
        org.apache.commons.io.FileUtils.writeByteArrayToFile(file13, byteArray50);
        java.nio.charset.Charset charset53 = null;
        org.apache.commons.io.FileUtils.write(file13, (java.lang.CharSequence) "", charset53);
        java.lang.String[] strArray57 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file58 = org.apache.commons.io.FileUtils.getFile(strArray57);
        java.lang.String[] strArray61 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file62 = org.apache.commons.io.FileUtils.getFile(strArray61);
        boolean boolean63 = org.apache.commons.io.FileUtils.isFileOlder(file58, file62);
        boolean boolean65 = org.apache.commons.io.FileUtils.waitFor(file62, (int) '4');
        org.apache.commons.io.LineIterator lineIterator66 = org.apache.commons.io.FileUtils.lineIterator(file62);
        boolean boolean67 = org.apache.commons.io.FileUtils.deleteQuietly(file62);
        org.apache.commons.io.FileUtils.write(file62, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset71 = null;
        org.apache.commons.io.FileUtils.write(file62, (java.lang.CharSequence) "", charset71, true);
        java.nio.charset.Charset charset75 = null;
        org.apache.commons.io.FileUtils.writeStringToFile(file62, "", charset75, false);
        long long78 = org.apache.commons.io.FileUtils.sizeOf(file62);
        org.apache.commons.io.FileUtils.writeStringToFile(file62, "");
        java.nio.charset.Charset charset81 = null;
        java.util.List<java.lang.String> strList82 = org.apache.commons.io.FileUtils.readLines(file62, charset81);
        org.apache.commons.io.FileUtils.writeLines(file13, (java.util.Collection<java.lang.String>) strList82, "hi!");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.writeLines(file3, "", (java.util.Collection<java.lang.String>) strList82, true);
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(file9);
        org.junit.Assert.assertEquals(file9.getParent(), "hi!");
        org.junit.Assert.assertEquals(file9.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(file13);
        org.junit.Assert.assertEquals(file13.getParent(), "hi!");
        org.junit.Assert.assertEquals(file13.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(file20);
        org.junit.Assert.assertEquals(file20.getParent(), "hi!");
        org.junit.Assert.assertEquals(file20.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(lineIterator23);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(file34);
        org.junit.Assert.assertEquals(file34.getParent(), "hi!");
        org.junit.Assert.assertEquals(file34.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(file38);
        org.junit.Assert.assertEquals(file38.getParent(), "hi!");
        org.junit.Assert.assertEquals(file38.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(lineIterator42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[104, 105, 33]");
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(file58);
        org.junit.Assert.assertEquals(file58.getParent(), "hi!");
        org.junit.Assert.assertEquals(file58.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(file62);
        org.junit.Assert.assertEquals(file62.getParent(), "hi!");
        org.junit.Assert.assertEquals(file62.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(lineIterator66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 0L + "'", long78 == 0L);
        org.junit.Assert.assertNotNull(strList82);
    }

    @Test
    public void test327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test327");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        java.nio.charset.Charset charset13 = null;
        org.apache.commons.io.FileUtils.writeStringToFile(file7, "0 bytes", charset13);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter15 = null;
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter16 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Collection<java.io.File> fileCollection17 = org.apache.commons.io.FileUtils.listFilesAndDirs(file7, iOFileFilter15, iOFileFilter16);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'directory' is not a directory: hi!\\hi!");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
    }

    @Test
    public void test328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test328");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean12 = org.apache.commons.io.FileUtils.deleteQuietly(file7);
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset16 = null;
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "", charset16, true);
        java.nio.charset.Charset charset20 = null;
        org.apache.commons.io.FileUtils.writeStringToFile(file7, "", charset20, false);
        java.io.FileOutputStream fileOutputStream23 = org.apache.commons.io.FileUtils.openOutputStream(file7);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter24 = null;
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter25 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Collection<java.io.File> fileCollection26 = org.apache.commons.io.FileUtils.listFiles(file7, iOFileFilter24, iOFileFilter25);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'directory' is not a directory: hi!\\hi!");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(fileOutputStream23);
    }

    @Test
    public void test329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test329");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean12 = org.apache.commons.io.FileUtils.deleteQuietly(file7);
        org.apache.commons.io.FileUtils.writeStringToFile(file7, "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file18 = org.apache.commons.io.FileUtils.getFile(strArray17);
        java.lang.String[] strArray21 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file22 = org.apache.commons.io.FileUtils.getFile(strArray21);
        boolean boolean23 = org.apache.commons.io.FileUtils.isFileOlder(file18, file22);
        boolean boolean25 = org.apache.commons.io.FileUtils.waitFor(file22, (int) '4');
        java.lang.String[] strArray28 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file29 = org.apache.commons.io.FileUtils.getFile(strArray28);
        boolean boolean31 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file22, file29, "");
        boolean boolean32 = org.apache.commons.io.FileUtils.isFileNewer(file7, file22);
        boolean boolean33 = org.apache.commons.io.FileUtils.isSymlink(file7);
        boolean boolean35 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        java.lang.String[] strArray38 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file39 = org.apache.commons.io.FileUtils.getFile(strArray38);
        java.lang.String[] strArray42 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file43 = org.apache.commons.io.FileUtils.getFile(strArray42);
        boolean boolean44 = org.apache.commons.io.FileUtils.isFileOlder(file39, file43);
        boolean boolean46 = org.apache.commons.io.FileUtils.waitFor(file43, (int) '4');
        org.apache.commons.io.LineIterator lineIterator47 = org.apache.commons.io.FileUtils.lineIterator(file43);
        boolean boolean49 = org.apache.commons.io.FileUtils.isFileOlder(file43, (-1L));
        java.nio.charset.Charset charset50 = null;
        java.lang.String str51 = org.apache.commons.io.FileUtils.readFileToString(file43, charset50);
        java.lang.String[] strArray54 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file55 = org.apache.commons.io.FileUtils.getFile(strArray54);
        java.lang.String[] strArray58 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file59 = org.apache.commons.io.FileUtils.getFile(strArray58);
        boolean boolean60 = org.apache.commons.io.FileUtils.isFileOlder(file55, file59);
        boolean boolean62 = org.apache.commons.io.FileUtils.waitFor(file59, (int) '4');
        org.apache.commons.io.LineIterator lineIterator63 = org.apache.commons.io.FileUtils.lineIterator(file59);
        boolean boolean64 = org.apache.commons.io.FileUtils.deleteQuietly(file59);
        org.apache.commons.io.FileUtils.write(file59, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset68 = null;
        org.apache.commons.io.FileUtils.write(file59, (java.lang.CharSequence) "", charset68, true);
        java.nio.charset.Charset charset72 = null;
        org.apache.commons.io.FileUtils.writeStringToFile(file59, "", charset72, false);
        long long75 = org.apache.commons.io.FileUtils.sizeOf(file59);
        org.apache.commons.io.FileUtils.writeStringToFile(file59, "");
        java.nio.charset.Charset charset78 = null;
        java.util.List<java.lang.String> strList79 = org.apache.commons.io.FileUtils.readLines(file59, charset78);
        org.apache.commons.io.FileUtils.writeLines(file43, (java.util.Collection<java.lang.String>) strList79, "hi!");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.copyFile(file7, file43);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Source 'hi!\\hi!' and destination 'hi!\\hi!' are the same");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(file18);
        org.junit.Assert.assertEquals(file18.getParent(), "hi!");
        org.junit.Assert.assertEquals(file18.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(file22);
        org.junit.Assert.assertEquals(file22.getParent(), "hi!");
        org.junit.Assert.assertEquals(file22.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(file29);
        org.junit.Assert.assertEquals(file29.getParent(), "hi!");
        org.junit.Assert.assertEquals(file29.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(file39);
        org.junit.Assert.assertEquals(file39.getParent(), "hi!");
        org.junit.Assert.assertEquals(file39.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(file43);
        org.junit.Assert.assertEquals(file43.getParent(), "hi!");
        org.junit.Assert.assertEquals(file43.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(lineIterator47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(file55);
        org.junit.Assert.assertEquals(file55.getParent(), "hi!");
        org.junit.Assert.assertEquals(file55.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(file59);
        org.junit.Assert.assertEquals(file59.getParent(), "hi!");
        org.junit.Assert.assertEquals(file59.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(lineIterator63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 0L + "'", long75 == 0L);
        org.junit.Assert.assertNotNull(strList79);
    }

    @Test
    public void test330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test330");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean12 = org.apache.commons.io.FileUtils.deleteQuietly(file7);
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset16 = null;
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "", charset16, true);
        java.nio.charset.Charset charset20 = null;
        org.apache.commons.io.FileUtils.writeStringToFile(file7, "", charset20, false);
        long long23 = org.apache.commons.io.FileUtils.sizeOf(file7);
        java.lang.String[] strArray26 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file27 = org.apache.commons.io.FileUtils.getFile(strArray26);
        java.lang.String[] strArray30 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file31 = org.apache.commons.io.FileUtils.getFile(strArray30);
        boolean boolean32 = org.apache.commons.io.FileUtils.isFileOlder(file27, file31);
        boolean boolean34 = org.apache.commons.io.FileUtils.waitFor(file31, (int) '4');
        org.apache.commons.io.LineIterator lineIterator35 = org.apache.commons.io.FileUtils.lineIterator(file31);
        boolean boolean36 = org.apache.commons.io.FileUtils.deleteQuietly(file31);
        org.apache.commons.io.FileUtils.write(file31, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset40 = null;
        org.apache.commons.io.FileUtils.write(file31, (java.lang.CharSequence) "", charset40, true);
        java.nio.charset.Charset charset44 = null;
        org.apache.commons.io.FileUtils.writeStringToFile(file31, "", charset44, false);
        long long47 = org.apache.commons.io.FileUtils.sizeOf(file31);
        org.apache.commons.io.FileUtils.writeStringToFile(file31, "");
        boolean boolean51 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file7, file31, "hi!");
        java.io.FileInputStream fileInputStream52 = org.apache.commons.io.FileUtils.openInputStream(file7);
        java.lang.String[] strArray55 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file56 = org.apache.commons.io.FileUtils.getFile(strArray55);
        java.lang.String[] strArray59 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file60 = org.apache.commons.io.FileUtils.getFile(strArray59);
        boolean boolean61 = org.apache.commons.io.FileUtils.isFileOlder(file56, file60);
        boolean boolean63 = org.apache.commons.io.FileUtils.waitFor(file60, (int) '4');
        org.apache.commons.io.LineIterator lineIterator64 = org.apache.commons.io.FileUtils.lineIterator(file60);
        boolean boolean65 = org.apache.commons.io.FileUtils.deleteQuietly(file60);
        org.apache.commons.io.FileUtils.write(file60, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset69 = null;
        org.apache.commons.io.FileUtils.write(file60, (java.lang.CharSequence) "", charset69, true);
        byte[] byteArray72 = org.apache.commons.io.FileUtils.readFileToByteArray(file60);
        boolean boolean74 = org.apache.commons.io.FileUtils.waitFor(file60, (int) 'a');
        org.apache.commons.io.FileUtils.copyInputStreamToFile((java.io.InputStream) fileInputStream52, file60);
        org.apache.commons.io.FileUtils.write(file60, (java.lang.CharSequence) "", true);
        java.util.Date date79 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean80 = org.apache.commons.io.FileUtils.isFileNewer(file60, date79);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No specified date");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(file27);
        org.junit.Assert.assertEquals(file27.getParent(), "hi!");
        org.junit.Assert.assertEquals(file27.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(file31);
        org.junit.Assert.assertEquals(file31.getParent(), "hi!");
        org.junit.Assert.assertEquals(file31.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(lineIterator35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(fileInputStream52);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(file56);
        org.junit.Assert.assertEquals(file56.getParent(), "hi!");
        org.junit.Assert.assertEquals(file56.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(file60);
        org.junit.Assert.assertEquals(file60.getParent(), "hi!");
        org.junit.Assert.assertEquals(file60.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(lineIterator64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[104, 105, 33]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
    }

    @Test
    public void test331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test331");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean9 = org.apache.commons.io.FileUtils.deleteQuietly(file7);
        java.lang.String[] strArray12 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file13 = org.apache.commons.io.FileUtils.getFile(strArray12);
        java.lang.String[] strArray16 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file17 = org.apache.commons.io.FileUtils.getFile(strArray16);
        boolean boolean18 = org.apache.commons.io.FileUtils.isFileOlder(file13, file17);
        boolean boolean20 = org.apache.commons.io.FileUtils.waitFor(file17, (int) '4');
        java.lang.String[] strArray23 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file24 = org.apache.commons.io.FileUtils.getFile(strArray23);
        boolean boolean26 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file17, file24, "");
        org.apache.commons.io.LineIterator lineIterator27 = org.apache.commons.io.FileUtils.lineIterator(file17);
        org.apache.commons.io.FileUtils.writeStringToFile(file17, "C:\\Users\\Mathieu\\AppData\\Local\\Temp\\", false);
        java.nio.charset.Charset charset32 = null;
        org.apache.commons.io.FileUtils.write(file17, (java.lang.CharSequence) "", charset32, true);
        boolean boolean36 = org.apache.commons.io.FileUtils.waitFor(file17, 0);
        boolean boolean37 = org.apache.commons.io.FileUtils.isFileOlder(file7, file17);
        java.lang.String[] strArray40 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file41 = org.apache.commons.io.FileUtils.getFile(strArray40);
        java.lang.String[] strArray44 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file45 = org.apache.commons.io.FileUtils.getFile(strArray44);
        boolean boolean46 = org.apache.commons.io.FileUtils.isFileOlder(file41, file45);
        boolean boolean48 = org.apache.commons.io.FileUtils.waitFor(file45, (int) '4');
        org.apache.commons.io.LineIterator lineIterator49 = org.apache.commons.io.FileUtils.lineIterator(file45);
        boolean boolean51 = org.apache.commons.io.FileUtils.isFileOlder(file45, (-1L));
        byte[] byteArray52 = new byte[] {};
        org.apache.commons.io.FileUtils.writeByteArrayToFile(file45, byteArray52);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.writeByteArrayToFile(file7, byteArray52, (int) (short) -1, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(file13);
        org.junit.Assert.assertEquals(file13.getParent(), "hi!");
        org.junit.Assert.assertEquals(file13.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(file17);
        org.junit.Assert.assertEquals(file17.getParent(), "hi!");
        org.junit.Assert.assertEquals(file17.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(file24);
        org.junit.Assert.assertEquals(file24.getParent(), "hi!");
        org.junit.Assert.assertEquals(file24.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(lineIterator27);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(file41);
        org.junit.Assert.assertEquals(file41.getParent(), "hi!");
        org.junit.Assert.assertEquals(file41.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(file45);
        org.junit.Assert.assertEquals(file45.getParent(), "hi!");
        org.junit.Assert.assertEquals(file45.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(lineIterator49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[]");
    }

    @Test
    public void test332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test332");
        java.net.URL[] uRLArray0 = null;
        java.io.File[] fileArray1 = org.apache.commons.io.FileUtils.toFiles(uRLArray0);
        java.net.URL[] uRLArray2 = org.apache.commons.io.FileUtils.toURLs(fileArray1);
        org.junit.Assert.assertNotNull(fileArray1);
        org.junit.Assert.assertNotNull(uRLArray2);
    }

    @Test
    public void test333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test333");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean12 = org.apache.commons.io.FileUtils.deleteQuietly(file7);
        org.apache.commons.io.FileUtils.writeStringToFile(file7, "");
        org.apache.commons.io.FileUtils.forceMkdirParent(file7);
        java.lang.String[] strArray18 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file19 = org.apache.commons.io.FileUtils.getFile(strArray18);
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file23 = org.apache.commons.io.FileUtils.getFile(strArray22);
        boolean boolean24 = org.apache.commons.io.FileUtils.isFileOlder(file19, file23);
        boolean boolean26 = org.apache.commons.io.FileUtils.waitFor(file23, (int) '4');
        java.lang.String[] strArray29 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file30 = org.apache.commons.io.FileUtils.getFile(strArray29);
        boolean boolean32 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file23, file30, "");
        boolean boolean34 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file7, file23, "hi!");
        java.lang.String[] strArray37 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file38 = org.apache.commons.io.FileUtils.getFile(strArray37);
        java.lang.String[] strArray39 = new java.lang.String[] {};
        java.io.File file40 = org.apache.commons.io.FileUtils.getFile(strArray39);
        java.io.File file41 = org.apache.commons.io.FileUtils.getFile(file38, strArray39);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<java.io.File> fileItor43 = org.apache.commons.io.FileUtils.iterateFiles(file23, strArray39, false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'directory' is not a directory: hi!\\hi!");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(file19);
        org.junit.Assert.assertEquals(file19.getParent(), "hi!");
        org.junit.Assert.assertEquals(file19.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(file23);
        org.junit.Assert.assertEquals(file23.getParent(), "hi!");
        org.junit.Assert.assertEquals(file23.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(file30);
        org.junit.Assert.assertEquals(file30.getParent(), "hi!");
        org.junit.Assert.assertEquals(file30.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(file38);
        org.junit.Assert.assertEquals(file38.getParent(), "hi!");
        org.junit.Assert.assertEquals(file38.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNull(file40);
        org.junit.Assert.assertNotNull(file41);
        org.junit.Assert.assertEquals(file41.getParent(), "hi!");
        org.junit.Assert.assertEquals(file41.toString(), "hi!\\hi!");
    }

    @Test
    public void test334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test334");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file14 = org.apache.commons.io.FileUtils.getFile(strArray13);
        boolean boolean16 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file7, file14, "");
        org.apache.commons.io.LineIterator lineIterator17 = org.apache.commons.io.FileUtils.lineIterator(file7);
        java.lang.String[] strArray20 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file21 = org.apache.commons.io.FileUtils.getFile(strArray20);
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file25 = org.apache.commons.io.FileUtils.getFile(strArray24);
        boolean boolean26 = org.apache.commons.io.FileUtils.isFileOlder(file21, file25);
        boolean boolean28 = org.apache.commons.io.FileUtils.waitFor(file25, (int) '4');
        org.apache.commons.io.LineIterator lineIterator29 = org.apache.commons.io.FileUtils.lineIterator(file25);
        boolean boolean30 = org.apache.commons.io.FileUtils.deleteQuietly(file25);
        org.apache.commons.io.FileUtils.write(file25, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset34 = null;
        org.apache.commons.io.FileUtils.write(file25, (java.lang.CharSequence) "", charset34, true);
        java.nio.charset.Charset charset38 = null;
        org.apache.commons.io.FileUtils.writeStringToFile(file25, "", charset38, false);
        long long41 = org.apache.commons.io.FileUtils.sizeOf(file25);
        org.apache.commons.io.FileUtils.writeStringToFile(file25, "");
        java.nio.charset.Charset charset44 = null;
        java.util.List<java.lang.String> strList45 = org.apache.commons.io.FileUtils.readLines(file25, charset44);
        org.apache.commons.io.FileUtils.writeLines(file7, (java.util.Collection<java.lang.String>) strList45);
        java.lang.String[] strArray49 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file50 = org.apache.commons.io.FileUtils.getFile(strArray49);
        java.lang.String[] strArray53 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file54 = org.apache.commons.io.FileUtils.getFile(strArray53);
        boolean boolean55 = org.apache.commons.io.FileUtils.isFileOlder(file50, file54);
        boolean boolean57 = org.apache.commons.io.FileUtils.waitFor(file54, (int) '4');
        org.apache.commons.io.LineIterator lineIterator58 = org.apache.commons.io.FileUtils.lineIterator(file54);
        boolean boolean59 = org.apache.commons.io.FileUtils.deleteQuietly(file54);
        org.apache.commons.io.FileUtils.writeStringToFile(file54, "");
        java.lang.String[] strArray64 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file65 = org.apache.commons.io.FileUtils.getFile(strArray64);
        java.lang.String[] strArray68 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file69 = org.apache.commons.io.FileUtils.getFile(strArray68);
        boolean boolean70 = org.apache.commons.io.FileUtils.isFileOlder(file65, file69);
        boolean boolean72 = org.apache.commons.io.FileUtils.waitFor(file69, (int) '4');
        java.lang.String[] strArray75 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file76 = org.apache.commons.io.FileUtils.getFile(strArray75);
        boolean boolean78 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file69, file76, "");
        boolean boolean79 = org.apache.commons.io.FileUtils.isFileNewer(file54, file69);
        java.io.File file80 = null;
        boolean boolean81 = org.apache.commons.io.FileUtils.contentEquals(file69, file80);
        org.apache.commons.io.FileUtils.touch(file69);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.copyDirectory(file7, file69, true);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Source 'hi!\\hi!' exists but is not a directory");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(file14);
        org.junit.Assert.assertEquals(file14.getParent(), "hi!");
        org.junit.Assert.assertEquals(file14.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(lineIterator17);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(file21);
        org.junit.Assert.assertEquals(file21.getParent(), "hi!");
        org.junit.Assert.assertEquals(file21.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(file25);
        org.junit.Assert.assertEquals(file25.getParent(), "hi!");
        org.junit.Assert.assertEquals(file25.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(lineIterator29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertNotNull(strList45);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(file50);
        org.junit.Assert.assertEquals(file50.getParent(), "hi!");
        org.junit.Assert.assertEquals(file50.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(file54);
        org.junit.Assert.assertEquals(file54.getParent(), "hi!");
        org.junit.Assert.assertEquals(file54.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(lineIterator58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(file65);
        org.junit.Assert.assertEquals(file65.getParent(), "hi!");
        org.junit.Assert.assertEquals(file65.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(file69);
        org.junit.Assert.assertEquals(file69.getParent(), "hi!");
        org.junit.Assert.assertEquals(file69.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(file76);
        org.junit.Assert.assertEquals(file76.getParent(), "hi!");
        org.junit.Assert.assertEquals(file76.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test335");
        java.io.File file0 = org.apache.commons.io.FileUtils.getTempDirectory();
        java.lang.String[] strArray3 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file4 = org.apache.commons.io.FileUtils.getFile(strArray3);
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file8 = org.apache.commons.io.FileUtils.getFile(strArray7);
        boolean boolean9 = org.apache.commons.io.FileUtils.isFileOlder(file4, file8);
        boolean boolean11 = org.apache.commons.io.FileUtils.waitFor(file8, (int) '4');
        org.apache.commons.io.LineIterator lineIterator12 = org.apache.commons.io.FileUtils.lineIterator(file8);
        boolean boolean14 = org.apache.commons.io.FileUtils.isFileOlder(file8, (-1L));
        java.nio.charset.Charset charset15 = null;
        java.lang.String str16 = org.apache.commons.io.FileUtils.readFileToString(file8, charset15);
        java.io.FileOutputStream fileOutputStream18 = org.apache.commons.io.FileUtils.openOutputStream(file8, false);
        java.io.FileOutputStream fileOutputStream20 = org.apache.commons.io.FileUtils.openOutputStream(file8, true);
        boolean boolean21 = org.apache.commons.io.FileUtils.isFileOlder(file0, file8);
        java.lang.String[] strArray28 = new java.lang.String[] { "C:\\Users\\Mathieu", "C:\\Users\\Mathieu", "", "1 GB", "hi!", "" };
        java.util.Iterator<java.io.File> fileItor30 = org.apache.commons.io.FileUtils.iterateFiles(file0, strArray28, true);
        java.io.File file31 = org.apache.commons.io.FileUtils.getFile(strArray28);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.String> strList32 = org.apache.commons.io.FileUtils.readLines(file31);
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: File 'C:\\Users\\Mathieu\\C:\\Users\\Mathieu\\1 GB\\hi!' does not exist");
        } catch (java.io.FileNotFoundException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(file0);
        org.junit.Assert.assertEquals(file0.getParent(), "C:\\Users\\Mathieu\\AppData\\Local");
        org.junit.Assert.assertEquals(file0.toString(), "C:\\Users\\Mathieu\\AppData\\Local\\Temp");
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(file4);
        org.junit.Assert.assertEquals(file4.getParent(), "hi!");
        org.junit.Assert.assertEquals(file4.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(file8);
        org.junit.Assert.assertEquals(file8.getParent(), "hi!");
        org.junit.Assert.assertEquals(file8.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(lineIterator12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(fileOutputStream18);
        org.junit.Assert.assertNotNull(fileOutputStream20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(fileItor30);
        org.junit.Assert.assertNotNull(file31);
        org.junit.Assert.assertEquals(file31.getParent(), "C:\\Users\\Mathieu\\C:\\Users\\Mathieu\\1 GB");
        org.junit.Assert.assertEquals(file31.toString(), "C:\\Users\\Mathieu\\C:\\Users\\Mathieu\\1 GB\\hi!");
    }

    @Test
    public void test336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test336");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file14 = org.apache.commons.io.FileUtils.getFile(strArray13);
        boolean boolean16 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file7, file14, "");
        java.io.FileOutputStream fileOutputStream18 = org.apache.commons.io.FileUtils.openOutputStream(file7, false);
        java.util.zip.Checksum checksum19 = null;
        java.util.zip.Checksum checksum20 = org.apache.commons.io.FileUtils.checksum(file7, checksum19);
        org.apache.commons.io.FileUtils.forceMkdirParent(file7);
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file25 = org.apache.commons.io.FileUtils.getFile(strArray24);
        java.lang.String[] strArray28 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file29 = org.apache.commons.io.FileUtils.getFile(strArray28);
        boolean boolean30 = org.apache.commons.io.FileUtils.isFileOlder(file25, file29);
        boolean boolean32 = org.apache.commons.io.FileUtils.waitFor(file29, (int) '4');
        org.apache.commons.io.LineIterator lineIterator33 = org.apache.commons.io.FileUtils.lineIterator(file29);
        boolean boolean35 = org.apache.commons.io.FileUtils.isFileOlder(file29, (-1L));
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.copyFile(file7, file29);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Source 'hi!\\hi!' and destination 'hi!\\hi!' are the same");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(file14);
        org.junit.Assert.assertEquals(file14.getParent(), "hi!");
        org.junit.Assert.assertEquals(file14.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(fileOutputStream18);
        org.junit.Assert.assertNull(checksum20);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(file25);
        org.junit.Assert.assertEquals(file25.getParent(), "hi!");
        org.junit.Assert.assertEquals(file25.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(file29);
        org.junit.Assert.assertEquals(file29.getParent(), "hi!");
        org.junit.Assert.assertEquals(file29.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(lineIterator33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test337");
        java.io.File file0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.write(file0, (java.lang.CharSequence) "0 bytes", "", false);
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
    }

    @Test
    public void test338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test338");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        java.lang.String[] strArray14 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file15 = org.apache.commons.io.FileUtils.getFile(strArray14);
        java.lang.String[] strArray18 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file19 = org.apache.commons.io.FileUtils.getFile(strArray18);
        boolean boolean20 = org.apache.commons.io.FileUtils.isFileOlder(file15, file19);
        boolean boolean22 = org.apache.commons.io.FileUtils.waitFor(file19, (int) '4');
        org.apache.commons.io.LineIterator lineIterator23 = org.apache.commons.io.FileUtils.lineIterator(file19);
        boolean boolean24 = org.apache.commons.io.FileUtils.deleteQuietly(file19);
        org.apache.commons.io.FileUtils.write(file19, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset28 = null;
        org.apache.commons.io.FileUtils.write(file19, (java.lang.CharSequence) "", charset28, true);
        byte[] byteArray31 = org.apache.commons.io.FileUtils.readFileToByteArray(file19);
        boolean boolean33 = org.apache.commons.io.FileUtils.waitFor(file19, (int) 'a');
        byte[] byteArray34 = org.apache.commons.io.FileUtils.readFileToByteArray(file19);
        org.apache.commons.io.FileUtils.writeByteArrayToFile(file7, byteArray34);
        java.util.Date date36 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean37 = org.apache.commons.io.FileUtils.isFileOlder(file7, date36);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No specified date");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(file15);
        org.junit.Assert.assertEquals(file15.getParent(), "hi!");
        org.junit.Assert.assertEquals(file15.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(file19);
        org.junit.Assert.assertEquals(file19.getParent(), "hi!");
        org.junit.Assert.assertEquals(file19.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(lineIterator23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[104, 105, 33]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[104, 105, 33]");
    }

    @Test
    public void test339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test339");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file14 = org.apache.commons.io.FileUtils.getFile(strArray13);
        boolean boolean16 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file7, file14, "");
        java.io.FileInputStream fileInputStream17 = org.apache.commons.io.FileUtils.openInputStream(file14);
        java.lang.String[] strArray20 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file21 = org.apache.commons.io.FileUtils.getFile(strArray20);
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file25 = org.apache.commons.io.FileUtils.getFile(strArray24);
        boolean boolean26 = org.apache.commons.io.FileUtils.isFileOlder(file21, file25);
        boolean boolean27 = org.apache.commons.io.FileUtils.deleteQuietly(file25);
        java.lang.String[] strArray30 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file31 = org.apache.commons.io.FileUtils.getFile(strArray30);
        java.lang.String[] strArray34 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file35 = org.apache.commons.io.FileUtils.getFile(strArray34);
        boolean boolean36 = org.apache.commons.io.FileUtils.isFileOlder(file31, file35);
        boolean boolean38 = org.apache.commons.io.FileUtils.waitFor(file35, (int) '4');
        java.lang.String[] strArray41 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file42 = org.apache.commons.io.FileUtils.getFile(strArray41);
        boolean boolean44 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file35, file42, "");
        org.apache.commons.io.LineIterator lineIterator45 = org.apache.commons.io.FileUtils.lineIterator(file35);
        org.apache.commons.io.FileUtils.writeStringToFile(file35, "C:\\Users\\Mathieu\\AppData\\Local\\Temp\\", false);
        java.nio.charset.Charset charset50 = null;
        org.apache.commons.io.FileUtils.write(file35, (java.lang.CharSequence) "", charset50, true);
        boolean boolean54 = org.apache.commons.io.FileUtils.waitFor(file35, 0);
        boolean boolean55 = org.apache.commons.io.FileUtils.isFileOlder(file25, file35);
        java.lang.String[] strArray58 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file59 = org.apache.commons.io.FileUtils.getFile(strArray58);
        java.lang.String[] strArray62 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file63 = org.apache.commons.io.FileUtils.getFile(strArray62);
        boolean boolean64 = org.apache.commons.io.FileUtils.isFileOlder(file59, file63);
        boolean boolean66 = org.apache.commons.io.FileUtils.waitFor(file63, (int) '4');
        org.apache.commons.io.LineIterator lineIterator67 = org.apache.commons.io.FileUtils.lineIterator(file63);
        boolean boolean68 = org.apache.commons.io.FileUtils.deleteQuietly(file63);
        org.apache.commons.io.FileUtils.write(file63, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset72 = null;
        org.apache.commons.io.FileUtils.write(file63, (java.lang.CharSequence) "", charset72, true);
        java.nio.charset.Charset charset76 = null;
        org.apache.commons.io.FileUtils.writeStringToFile(file63, "", charset76, false);
        java.io.FileOutputStream fileOutputStream79 = org.apache.commons.io.FileUtils.openOutputStream(file63);
        long long80 = org.apache.commons.io.FileUtils.copyFile(file25, (java.io.OutputStream) fileOutputStream79);
        boolean boolean82 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file14, file25, "-1 bytes");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.writeStringToFile(file14, "100 bytes", "35 bytes");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: 35 bytes");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(file14);
        org.junit.Assert.assertEquals(file14.getParent(), "hi!");
        org.junit.Assert.assertEquals(file14.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(fileInputStream17);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(file21);
        org.junit.Assert.assertEquals(file21.getParent(), "hi!");
        org.junit.Assert.assertEquals(file21.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(file25);
        org.junit.Assert.assertEquals(file25.getParent(), "hi!");
        org.junit.Assert.assertEquals(file25.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(file31);
        org.junit.Assert.assertEquals(file31.getParent(), "hi!");
        org.junit.Assert.assertEquals(file31.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(file35);
        org.junit.Assert.assertEquals(file35.getParent(), "hi!");
        org.junit.Assert.assertEquals(file35.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(file42);
        org.junit.Assert.assertEquals(file42.getParent(), "hi!");
        org.junit.Assert.assertEquals(file42.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(lineIterator45);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(file59);
        org.junit.Assert.assertEquals(file59.getParent(), "hi!");
        org.junit.Assert.assertEquals(file59.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(file63);
        org.junit.Assert.assertEquals(file63.getParent(), "hi!");
        org.junit.Assert.assertEquals(file63.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(lineIterator67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(fileOutputStream79);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 0L + "'", long80 == 0L);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
    }

    @Test
    public void test340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test340");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file14 = org.apache.commons.io.FileUtils.getFile(strArray13);
        boolean boolean16 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file7, file14, "");
        org.apache.commons.io.LineIterator lineIterator17 = org.apache.commons.io.FileUtils.lineIterator(file7);
        org.apache.commons.io.FileUtils.writeStringToFile(file7, "C:\\Users\\Mathieu\\AppData\\Local\\Temp\\", false);
        java.lang.String[] strArray23 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file24 = org.apache.commons.io.FileUtils.getFile(strArray23);
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file28 = org.apache.commons.io.FileUtils.getFile(strArray27);
        boolean boolean29 = org.apache.commons.io.FileUtils.isFileOlder(file24, file28);
        java.lang.String str30 = org.apache.commons.io.FileUtils.readFileToString(file24);
        java.lang.String[] strArray33 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file34 = org.apache.commons.io.FileUtils.getFile(strArray33);
        java.io.File file35 = org.apache.commons.io.FileUtils.getFile(file24, strArray33);
        boolean boolean37 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file7, file35, "-1 bytes");
        org.apache.commons.io.FileUtils.forceDeleteOnExit(file35);
        java.lang.String[] strArray41 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file42 = org.apache.commons.io.FileUtils.getFile(strArray41);
        java.lang.String[] strArray45 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file46 = org.apache.commons.io.FileUtils.getFile(strArray45);
        boolean boolean47 = org.apache.commons.io.FileUtils.isFileOlder(file42, file46);
        boolean boolean49 = org.apache.commons.io.FileUtils.waitFor(file46, (int) '4');
        java.lang.String[] strArray52 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file53 = org.apache.commons.io.FileUtils.getFile(strArray52);
        boolean boolean55 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file46, file53, "");
        org.apache.commons.io.LineIterator lineIterator56 = org.apache.commons.io.FileUtils.lineIterator(file46);
        java.lang.String[] strArray59 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file60 = org.apache.commons.io.FileUtils.getFile(strArray59);
        java.lang.String[] strArray63 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file64 = org.apache.commons.io.FileUtils.getFile(strArray63);
        boolean boolean65 = org.apache.commons.io.FileUtils.isFileOlder(file60, file64);
        boolean boolean67 = org.apache.commons.io.FileUtils.waitFor(file64, (int) '4');
        org.apache.commons.io.LineIterator lineIterator68 = org.apache.commons.io.FileUtils.lineIterator(file64);
        boolean boolean69 = org.apache.commons.io.FileUtils.deleteQuietly(file64);
        org.apache.commons.io.FileUtils.write(file64, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset73 = null;
        org.apache.commons.io.FileUtils.write(file64, (java.lang.CharSequence) "", charset73, true);
        java.nio.charset.Charset charset77 = null;
        org.apache.commons.io.FileUtils.writeStringToFile(file64, "", charset77, false);
        long long80 = org.apache.commons.io.FileUtils.sizeOf(file64);
        org.apache.commons.io.FileUtils.writeStringToFile(file64, "");
        java.nio.charset.Charset charset83 = null;
        java.util.List<java.lang.String> strList84 = org.apache.commons.io.FileUtils.readLines(file64, charset83);
        org.apache.commons.io.FileUtils.writeLines(file46, (java.util.Collection<java.lang.String>) strList84);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.writeLines(file35, (java.util.Collection<java.lang.String>) strList84, "\000\000d\001");
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Directory 'hi!\\hi!\\hi!' could not be created");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(file14);
        org.junit.Assert.assertEquals(file14.getParent(), "hi!");
        org.junit.Assert.assertEquals(file14.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(lineIterator17);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(file24);
        org.junit.Assert.assertEquals(file24.getParent(), "hi!");
        org.junit.Assert.assertEquals(file24.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(file28);
        org.junit.Assert.assertEquals(file28.getParent(), "hi!");
        org.junit.Assert.assertEquals(file28.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "C:\\Users\\Mathieu\\AppData\\Local\\Temp\\" + "'", str30, "C:\\Users\\Mathieu\\AppData\\Local\\Temp\\");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(file34);
        org.junit.Assert.assertEquals(file34.getParent(), "hi!");
        org.junit.Assert.assertEquals(file34.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(file35);
        org.junit.Assert.assertEquals(file35.getParent(), "hi!\\hi!\\hi!");
        org.junit.Assert.assertEquals(file35.toString(), "hi!\\hi!\\hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(file42);
        org.junit.Assert.assertEquals(file42.getParent(), "hi!");
        org.junit.Assert.assertEquals(file42.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(file46);
        org.junit.Assert.assertEquals(file46.getParent(), "hi!");
        org.junit.Assert.assertEquals(file46.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(file53);
        org.junit.Assert.assertEquals(file53.getParent(), "hi!");
        org.junit.Assert.assertEquals(file53.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(lineIterator56);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(file60);
        org.junit.Assert.assertEquals(file60.getParent(), "hi!");
        org.junit.Assert.assertEquals(file60.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(file64);
        org.junit.Assert.assertEquals(file64.getParent(), "hi!");
        org.junit.Assert.assertEquals(file64.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(lineIterator68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 0L + "'", long80 == 0L);
        org.junit.Assert.assertNotNull(strList84);
    }

    @Test
    @Disabled
    public void test341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test341");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean13 = org.apache.commons.io.FileUtils.isFileOlder(file7, (-1L));
        java.nio.charset.Charset charset14 = null;
        java.lang.String str15 = org.apache.commons.io.FileUtils.readFileToString(file7, charset14);
        java.io.FileOutputStream fileOutputStream17 = org.apache.commons.io.FileUtils.openOutputStream(file7, false);
        org.apache.commons.io.LineIterator lineIterator18 = org.apache.commons.io.FileUtils.lineIterator(file7);
        org.apache.commons.io.FileUtils.writeStringToFile(file7, "-1 bytes", false);
        java.nio.charset.Charset charset23 = null;
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "32 bytes", charset23);
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "C:\\Users\\Mathieu\\AppData\\Local\\Temp\\", false);
        java.math.BigInteger bigInteger28 = org.apache.commons.io.FileUtils.sizeOfAsBigInteger(file7);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "-1 bytes1 GB1048576 EB1 GBC:\\Users\\Mathieu\\AppData\\Local\\Temp\\1 GBC:\\Users\\Mathieu1 GB1 GB1048576 EB1 GB" + "'", str15, "-1 bytes1 GB1048576 EB1 GBC:\\Users\\Mathieu\\AppData\\Local\\Temp\\1 GBC:\\Users\\Mathieu1 GB1 GB1048576 EB1 GB");
        org.junit.Assert.assertNotNull(fileOutputStream17);
        org.junit.Assert.assertNotNull(lineIterator18);
        org.junit.Assert.assertNotNull(bigInteger28);
    }

    @Test
    public void test342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test342");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean13 = org.apache.commons.io.FileUtils.isFileOlder(file7, (-1L));
        java.nio.charset.Charset charset14 = null;
        java.lang.String str15 = org.apache.commons.io.FileUtils.readFileToString(file7, charset14);
        java.io.FileOutputStream fileOutputStream17 = org.apache.commons.io.FileUtils.openOutputStream(file7, false);
        org.apache.commons.io.LineIterator lineIterator18 = org.apache.commons.io.FileUtils.lineIterator(file7);
        org.apache.commons.io.FileUtils.writeStringToFile(file7, "-1 bytes", false);
        java.nio.charset.Charset charset23 = null;
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "32 bytes", charset23);
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "C:\\Users\\Mathieu\\AppData\\Local\\Temp\\", false);
        org.apache.commons.io.FileUtils.forceDeleteOnExit(file7);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "C:\\Users\\Mathieu\\AppData\\Local\\Temp\\" + "'", str15, "C:\\Users\\Mathieu\\AppData\\Local\\Temp\\");
        org.junit.Assert.assertNotNull(fileOutputStream17);
        org.junit.Assert.assertNotNull(lineIterator18);
    }

    @Test
    public void test343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test343");
        java.net.URL uRL0 = null;
        java.lang.String[] strArray3 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file4 = org.apache.commons.io.FileUtils.getFile(strArray3);
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file8 = org.apache.commons.io.FileUtils.getFile(strArray7);
        boolean boolean9 = org.apache.commons.io.FileUtils.isFileOlder(file4, file8);
        boolean boolean11 = org.apache.commons.io.FileUtils.waitFor(file8, (int) '4');
        org.apache.commons.io.LineIterator lineIterator12 = org.apache.commons.io.FileUtils.lineIterator(file8);
        boolean boolean13 = org.apache.commons.io.FileUtils.deleteQuietly(file8);
        org.apache.commons.io.FileUtils.write(file8, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset17 = null;
        org.apache.commons.io.FileUtils.write(file8, (java.lang.CharSequence) "", charset17, true);
        byte[] byteArray20 = org.apache.commons.io.FileUtils.readFileToByteArray(file8);
        boolean boolean22 = org.apache.commons.io.FileUtils.waitFor(file8, (int) 'a');
        byte[] byteArray23 = org.apache.commons.io.FileUtils.readFileToByteArray(file8);
        java.nio.charset.Charset charset25 = null;
        org.apache.commons.io.FileUtils.write(file8, (java.lang.CharSequence) "-1 bytes", charset25);
        org.apache.commons.io.FileUtils.writeStringToFile(file8, "35 bytes", true);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.copyURLToFile(uRL0, file8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.net.URL.openStream()\" because \"source\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(file4);
        org.junit.Assert.assertEquals(file4.getParent(), "hi!");
        org.junit.Assert.assertEquals(file4.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(file8);
        org.junit.Assert.assertEquals(file8.getParent(), "hi!");
        org.junit.Assert.assertEquals(file8.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(lineIterator12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[104, 105, 33]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[104, 105, 33]");
    }

    @Test
    public void test344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test344");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray4 = new java.lang.String[] {};
        java.io.File file5 = org.apache.commons.io.FileUtils.getFile(strArray4);
        java.io.File file6 = org.apache.commons.io.FileUtils.getFile(file3, strArray4);
        java.lang.String str7 = org.apache.commons.io.FileUtils.readFileToString(file3);
        java.lang.String[] strArray10 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file11 = org.apache.commons.io.FileUtils.getFile(strArray10);
        java.lang.String[] strArray14 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file15 = org.apache.commons.io.FileUtils.getFile(strArray14);
        boolean boolean16 = org.apache.commons.io.FileUtils.isFileOlder(file11, file15);
        boolean boolean18 = org.apache.commons.io.FileUtils.waitFor(file15, (int) '4');
        org.apache.commons.io.LineIterator lineIterator19 = org.apache.commons.io.FileUtils.lineIterator(file15);
        boolean boolean20 = org.apache.commons.io.FileUtils.deleteQuietly(file15);
        org.apache.commons.io.FileUtils.write(file15, (java.lang.CharSequence) "hi!");
        org.apache.commons.io.FileUtils.write(file15, (java.lang.CharSequence) "-1 bytes", false);
        byte[] byteArray26 = org.apache.commons.io.FileUtils.readFileToByteArray(file15);
        org.apache.commons.io.FileUtils.writeStringToFile(file15, "1 GB1048576 EB1 GBC:\\Users\\Mathieu\\AppData\\Local\\Temp\\1 GBC:\\Users\\Mathieu1 GB1 GB1048576 EB1 GB", true);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.copyDirectory(file3, file15);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Source 'hi!\\hi!' exists but is not a directory");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNull(file5);
        org.junit.Assert.assertNotNull(file6);
        org.junit.Assert.assertEquals(file6.getParent(), "hi!");
        org.junit.Assert.assertEquals(file6.toString(), "hi!\\hi!");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "-1 bytes35 bytes" + "'", str7, "-1 bytes35 bytes");
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(file11);
        org.junit.Assert.assertEquals(file11.getParent(), "hi!");
        org.junit.Assert.assertEquals(file11.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(file15);
        org.junit.Assert.assertEquals(file15.getParent(), "hi!");
        org.junit.Assert.assertEquals(file15.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(lineIterator19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[45, 49, 32, 98, 121, 116, 101, 115]");
    }

    @Test
    public void test345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test345");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean12 = org.apache.commons.io.FileUtils.deleteQuietly(file7);
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "hi!");
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.String> strList16 = org.apache.commons.io.FileUtils.readLines(file7, "");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test346");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file14 = org.apache.commons.io.FileUtils.getFile(strArray13);
        boolean boolean16 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file7, file14, "");
        java.io.FileInputStream fileInputStream17 = org.apache.commons.io.FileUtils.openInputStream(file14);
        java.lang.String[] strArray20 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file21 = org.apache.commons.io.FileUtils.getFile(strArray20);
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file25 = org.apache.commons.io.FileUtils.getFile(strArray24);
        boolean boolean26 = org.apache.commons.io.FileUtils.isFileOlder(file21, file25);
        boolean boolean27 = org.apache.commons.io.FileUtils.deleteQuietly(file25);
        java.lang.String[] strArray30 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file31 = org.apache.commons.io.FileUtils.getFile(strArray30);
        java.lang.String[] strArray34 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file35 = org.apache.commons.io.FileUtils.getFile(strArray34);
        boolean boolean36 = org.apache.commons.io.FileUtils.isFileOlder(file31, file35);
        boolean boolean38 = org.apache.commons.io.FileUtils.waitFor(file35, (int) '4');
        java.lang.String[] strArray41 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file42 = org.apache.commons.io.FileUtils.getFile(strArray41);
        boolean boolean44 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file35, file42, "");
        org.apache.commons.io.LineIterator lineIterator45 = org.apache.commons.io.FileUtils.lineIterator(file35);
        org.apache.commons.io.FileUtils.writeStringToFile(file35, "C:\\Users\\Mathieu\\AppData\\Local\\Temp\\", false);
        java.nio.charset.Charset charset50 = null;
        org.apache.commons.io.FileUtils.write(file35, (java.lang.CharSequence) "", charset50, true);
        boolean boolean54 = org.apache.commons.io.FileUtils.waitFor(file35, 0);
        boolean boolean55 = org.apache.commons.io.FileUtils.isFileOlder(file25, file35);
        java.lang.String[] strArray58 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file59 = org.apache.commons.io.FileUtils.getFile(strArray58);
        java.lang.String[] strArray62 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file63 = org.apache.commons.io.FileUtils.getFile(strArray62);
        boolean boolean64 = org.apache.commons.io.FileUtils.isFileOlder(file59, file63);
        boolean boolean66 = org.apache.commons.io.FileUtils.waitFor(file63, (int) '4');
        org.apache.commons.io.LineIterator lineIterator67 = org.apache.commons.io.FileUtils.lineIterator(file63);
        boolean boolean68 = org.apache.commons.io.FileUtils.deleteQuietly(file63);
        org.apache.commons.io.FileUtils.write(file63, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset72 = null;
        org.apache.commons.io.FileUtils.write(file63, (java.lang.CharSequence) "", charset72, true);
        java.nio.charset.Charset charset76 = null;
        org.apache.commons.io.FileUtils.writeStringToFile(file63, "", charset76, false);
        java.io.FileOutputStream fileOutputStream79 = org.apache.commons.io.FileUtils.openOutputStream(file63);
        long long80 = org.apache.commons.io.FileUtils.copyFile(file25, (java.io.OutputStream) fileOutputStream79);
        boolean boolean82 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file14, file25, "-1 bytes");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str84 = org.apache.commons.io.FileUtils.readFileToString(file25, "1048576 EB");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: 1048576 EB");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(file14);
        org.junit.Assert.assertEquals(file14.getParent(), "hi!");
        org.junit.Assert.assertEquals(file14.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(fileInputStream17);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(file21);
        org.junit.Assert.assertEquals(file21.getParent(), "hi!");
        org.junit.Assert.assertEquals(file21.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(file25);
        org.junit.Assert.assertEquals(file25.getParent(), "hi!");
        org.junit.Assert.assertEquals(file25.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(file31);
        org.junit.Assert.assertEquals(file31.getParent(), "hi!");
        org.junit.Assert.assertEquals(file31.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(file35);
        org.junit.Assert.assertEquals(file35.getParent(), "hi!");
        org.junit.Assert.assertEquals(file35.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(file42);
        org.junit.Assert.assertEquals(file42.getParent(), "hi!");
        org.junit.Assert.assertEquals(file42.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(lineIterator45);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(file59);
        org.junit.Assert.assertEquals(file59.getParent(), "hi!");
        org.junit.Assert.assertEquals(file59.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(file63);
        org.junit.Assert.assertEquals(file63.getParent(), "hi!");
        org.junit.Assert.assertEquals(file63.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(lineIterator67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(fileOutputStream79);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 0L + "'", long80 == 0L);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
    }

    @Test
    public void test347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test347");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        long long12 = org.apache.commons.io.FileUtils.checksumCRC32(file7);
        byte[] byteArray15 = new byte[] { (byte) 100, (byte) 100 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.writeByteArrayToFile(file7, byteArray15, (int) (byte) 1, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[100, 100]");
    }

    @Test
    public void test348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test348");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean13 = org.apache.commons.io.FileUtils.isFileOlder(file7, (-1L));
        java.io.FileOutputStream fileOutputStream15 = org.apache.commons.io.FileUtils.openOutputStream(file7, false);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.writeStringToFile(file7, "1 GB1048576 EB1 GBC:\\Users\\Mathieu\\AppData\\Local\\Temp\\1 GBC:\\Users\\Mathieu1 GB1 GB1048576 EB1 GB", "-1 bytes1 GB1048576 EB1 GBC:\\Users\\Mathieu\\AppData\\Local\\Temp\\1 GBC:\\Users\\Mathieu1 GB1 GB1048576 EB1 GB", true);
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: -1 bytes1 GB1048576 EB1 GBC:\\Users\\Mathieu\\AppData\\Local\\Temp\\1 GBC:\\Users\\Mathieu1 GB1 GB1048576 EB1 GB");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(fileOutputStream15);
    }

    @Test
    public void test349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test349");
        java.io.File file0 = null;
        java.lang.String[] strArray3 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file4 = org.apache.commons.io.FileUtils.getFile(strArray3);
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file8 = org.apache.commons.io.FileUtils.getFile(strArray7);
        boolean boolean9 = org.apache.commons.io.FileUtils.isFileOlder(file4, file8);
        boolean boolean11 = org.apache.commons.io.FileUtils.waitFor(file8, (int) '4');
        org.apache.commons.io.LineIterator lineIterator12 = org.apache.commons.io.FileUtils.lineIterator(file8);
        boolean boolean13 = org.apache.commons.io.FileUtils.deleteQuietly(file8);
        org.apache.commons.io.FileUtils.writeStringToFile(file8, "");
        java.lang.String[] strArray18 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file19 = org.apache.commons.io.FileUtils.getFile(strArray18);
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file23 = org.apache.commons.io.FileUtils.getFile(strArray22);
        boolean boolean24 = org.apache.commons.io.FileUtils.isFileOlder(file19, file23);
        boolean boolean26 = org.apache.commons.io.FileUtils.waitFor(file23, (int) '4');
        java.lang.String[] strArray29 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file30 = org.apache.commons.io.FileUtils.getFile(strArray29);
        boolean boolean32 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file23, file30, "");
        boolean boolean33 = org.apache.commons.io.FileUtils.isFileNewer(file8, file23);
        boolean boolean34 = org.apache.commons.io.FileUtils.isSymlink(file8);
        org.apache.commons.io.FileUtils.writeStringToFile(file8, "C:\\Users\\Mathieu\\AppData\\Local\\Temp\\", true);
        java.lang.String[] strArray40 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file41 = org.apache.commons.io.FileUtils.getFile(strArray40);
        java.lang.String[] strArray44 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file45 = org.apache.commons.io.FileUtils.getFile(strArray44);
        boolean boolean46 = org.apache.commons.io.FileUtils.isFileOlder(file41, file45);
        boolean boolean48 = org.apache.commons.io.FileUtils.waitFor(file45, (int) '4');
        org.apache.commons.io.LineIterator lineIterator49 = org.apache.commons.io.FileUtils.lineIterator(file45);
        boolean boolean51 = org.apache.commons.io.FileUtils.isFileOlder(file45, (-1L));
        byte[] byteArray52 = new byte[] {};
        org.apache.commons.io.FileUtils.writeByteArrayToFile(file45, byteArray52);
        org.apache.commons.io.FileUtils.writeByteArrayToFile(file8, byteArray52);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.writeByteArrayToFile(file0, byteArray52, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.File.exists()\" because \"file\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(file4);
        org.junit.Assert.assertEquals(file4.getParent(), "hi!");
        org.junit.Assert.assertEquals(file4.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(file8);
        org.junit.Assert.assertEquals(file8.getParent(), "hi!");
        org.junit.Assert.assertEquals(file8.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(lineIterator12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(file19);
        org.junit.Assert.assertEquals(file19.getParent(), "hi!");
        org.junit.Assert.assertEquals(file19.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(file23);
        org.junit.Assert.assertEquals(file23.getParent(), "hi!");
        org.junit.Assert.assertEquals(file23.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(file30);
        org.junit.Assert.assertEquals(file30.getParent(), "hi!");
        org.junit.Assert.assertEquals(file30.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(file41);
        org.junit.Assert.assertEquals(file41.getParent(), "hi!");
        org.junit.Assert.assertEquals(file41.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(file45);
        org.junit.Assert.assertEquals(file45.getParent(), "hi!");
        org.junit.Assert.assertEquals(file45.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(lineIterator49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[]");
    }

    @Test
    public void test350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test350");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean12 = org.apache.commons.io.FileUtils.deleteQuietly(file7);
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset16 = null;
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "", charset16, true);
        java.nio.charset.Charset charset20 = null;
        org.apache.commons.io.FileUtils.writeStringToFile(file7, "", charset20, false);
        long long23 = org.apache.commons.io.FileUtils.sizeOf(file7);
        org.apache.commons.io.FileUtils.writeStringToFile(file7, "");
        java.math.BigInteger bigInteger26 = org.apache.commons.io.FileUtils.sizeOfAsBigInteger(file7);
        java.lang.String str27 = org.apache.commons.io.FileUtils.byteCountToDisplaySize(bigInteger26);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(bigInteger26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "0 bytes" + "'", str27, "0 bytes");
    }

    @Test
    public void test351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test351");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        long long12 = org.apache.commons.io.FileUtils.checksumCRC32(file7);
        java.lang.String[] strArray15 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file16 = org.apache.commons.io.FileUtils.getFile(strArray15);
        java.lang.String[] strArray19 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file20 = org.apache.commons.io.FileUtils.getFile(strArray19);
        boolean boolean21 = org.apache.commons.io.FileUtils.isFileOlder(file16, file20);
        boolean boolean22 = org.apache.commons.io.FileUtils.deleteQuietly(file20);
        boolean boolean24 = org.apache.commons.io.FileUtils.isFileNewer(file20, 0L);
        java.nio.charset.Charset charset25 = null;
        java.util.List<java.lang.String> strList26 = org.apache.commons.io.FileUtils.readLines(file20, charset25);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean27 = org.apache.commons.io.FileUtils.directoryContains(file7, file20);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Not a directory: hi!\\hi!");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(file16);
        org.junit.Assert.assertEquals(file16.getParent(), "hi!");
        org.junit.Assert.assertEquals(file16.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(file20);
        org.junit.Assert.assertEquals(file20.getParent(), "hi!");
        org.junit.Assert.assertEquals(file20.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(strList26);
    }

    @Test
    public void test352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test352");
        java.io.File file0 = null;
        java.lang.String[] strArray3 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file4 = org.apache.commons.io.FileUtils.getFile(strArray3);
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file8 = org.apache.commons.io.FileUtils.getFile(strArray7);
        boolean boolean9 = org.apache.commons.io.FileUtils.isFileOlder(file4, file8);
        boolean boolean11 = org.apache.commons.io.FileUtils.waitFor(file8, (int) '4');
        org.apache.commons.io.LineIterator lineIterator12 = org.apache.commons.io.FileUtils.lineIterator(file8);
        boolean boolean13 = org.apache.commons.io.FileUtils.deleteQuietly(file8);
        org.apache.commons.io.FileUtils.write(file8, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset17 = null;
        org.apache.commons.io.FileUtils.write(file8, (java.lang.CharSequence) "", charset17, true);
        java.nio.charset.Charset charset21 = null;
        org.apache.commons.io.FileUtils.writeStringToFile(file8, "", charset21, false);
        long long24 = org.apache.commons.io.FileUtils.sizeOf(file8);
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file28 = org.apache.commons.io.FileUtils.getFile(strArray27);
        java.lang.String[] strArray31 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file32 = org.apache.commons.io.FileUtils.getFile(strArray31);
        boolean boolean33 = org.apache.commons.io.FileUtils.isFileOlder(file28, file32);
        boolean boolean35 = org.apache.commons.io.FileUtils.waitFor(file32, (int) '4');
        org.apache.commons.io.LineIterator lineIterator36 = org.apache.commons.io.FileUtils.lineIterator(file32);
        boolean boolean37 = org.apache.commons.io.FileUtils.deleteQuietly(file32);
        org.apache.commons.io.FileUtils.write(file32, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset41 = null;
        org.apache.commons.io.FileUtils.write(file32, (java.lang.CharSequence) "", charset41, true);
        java.nio.charset.Charset charset45 = null;
        org.apache.commons.io.FileUtils.writeStringToFile(file32, "", charset45, false);
        long long48 = org.apache.commons.io.FileUtils.sizeOf(file32);
        org.apache.commons.io.FileUtils.writeStringToFile(file32, "");
        boolean boolean52 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file8, file32, "hi!");
        java.io.FileInputStream fileInputStream53 = org.apache.commons.io.FileUtils.openInputStream(file8);
        java.lang.String[] strArray56 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file57 = org.apache.commons.io.FileUtils.getFile(strArray56);
        java.lang.String[] strArray60 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file61 = org.apache.commons.io.FileUtils.getFile(strArray60);
        boolean boolean62 = org.apache.commons.io.FileUtils.isFileOlder(file57, file61);
        boolean boolean64 = org.apache.commons.io.FileUtils.waitFor(file61, (int) '4');
        java.lang.String[] strArray67 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file68 = org.apache.commons.io.FileUtils.getFile(strArray67);
        boolean boolean70 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file61, file68, "");
        java.io.FileOutputStream fileOutputStream72 = org.apache.commons.io.FileUtils.openOutputStream(file61, false);
        java.lang.String[] strArray79 = new java.lang.String[] { "", "1048576 EB", "C:\\Users\\Mathieu\\AppData\\Local\\Temp\\", "C:\\Users\\Mathieu", "", "1048576 EB" };
        java.util.ArrayList<java.lang.String> strList80 = new java.util.ArrayList<java.lang.String>();
        boolean boolean81 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList80, strArray79);
        org.apache.commons.io.FileUtils.writeLines(file61, (java.util.Collection<java.lang.String>) strList80, "1 GB", false);
        org.apache.commons.io.FileUtils.writeLines(file8, (java.util.Collection<java.lang.String>) strList80, "hi!");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.writeLines(file0, (java.util.Collection<java.lang.String>) strList80, "1 GB1048576 EB1 GBC:\\Users\\Mathieu\\AppData\\Local\\Temp\\1 GBC:\\Users\\Mathieu1 GB1 GB1048576 EB1 GB");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.File.exists()\" because \"file\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(file4);
        org.junit.Assert.assertEquals(file4.getParent(), "hi!");
        org.junit.Assert.assertEquals(file4.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(file8);
        org.junit.Assert.assertEquals(file8.getParent(), "hi!");
        org.junit.Assert.assertEquals(file8.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(lineIterator12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(file28);
        org.junit.Assert.assertEquals(file28.getParent(), "hi!");
        org.junit.Assert.assertEquals(file28.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(file32);
        org.junit.Assert.assertEquals(file32.getParent(), "hi!");
        org.junit.Assert.assertEquals(file32.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(lineIterator36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(fileInputStream53);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(file57);
        org.junit.Assert.assertEquals(file57.getParent(), "hi!");
        org.junit.Assert.assertEquals(file57.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(file61);
        org.junit.Assert.assertEquals(file61.getParent(), "hi!");
        org.junit.Assert.assertEquals(file61.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(file68);
        org.junit.Assert.assertEquals(file68.getParent(), "hi!");
        org.junit.Assert.assertEquals(file68.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(fileOutputStream72);
        org.junit.Assert.assertNotNull(strArray79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
    }

    @Test
    public void test353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test353");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean13 = org.apache.commons.io.FileUtils.isFileOlder(file7, (-1L));
        java.nio.charset.Charset charset14 = null;
        java.lang.String str15 = org.apache.commons.io.FileUtils.readFileToString(file7, charset14);
        java.io.FileOutputStream fileOutputStream17 = org.apache.commons.io.FileUtils.openOutputStream(file7, false);
        org.apache.commons.io.LineIterator lineIterator18 = org.apache.commons.io.FileUtils.lineIterator(file7);
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file23 = org.apache.commons.io.FileUtils.getFile(strArray22);
        java.lang.String[] strArray26 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file27 = org.apache.commons.io.FileUtils.getFile(strArray26);
        boolean boolean28 = org.apache.commons.io.FileUtils.isFileOlder(file23, file27);
        boolean boolean29 = org.apache.commons.io.FileUtils.deleteQuietly(file27);
        java.lang.String[] strArray32 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file33 = org.apache.commons.io.FileUtils.getFile(strArray32);
        java.lang.String[] strArray36 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file37 = org.apache.commons.io.FileUtils.getFile(strArray36);
        boolean boolean38 = org.apache.commons.io.FileUtils.isFileOlder(file33, file37);
        boolean boolean40 = org.apache.commons.io.FileUtils.waitFor(file37, (int) '4');
        java.lang.String[] strArray43 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file44 = org.apache.commons.io.FileUtils.getFile(strArray43);
        boolean boolean46 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file37, file44, "");
        org.apache.commons.io.LineIterator lineIterator47 = org.apache.commons.io.FileUtils.lineIterator(file37);
        org.apache.commons.io.FileUtils.writeStringToFile(file37, "C:\\Users\\Mathieu\\AppData\\Local\\Temp\\", false);
        java.nio.charset.Charset charset52 = null;
        org.apache.commons.io.FileUtils.write(file37, (java.lang.CharSequence) "", charset52, true);
        boolean boolean56 = org.apache.commons.io.FileUtils.waitFor(file37, 0);
        boolean boolean57 = org.apache.commons.io.FileUtils.isFileOlder(file27, file37);
        java.lang.String[] strArray60 = new java.lang.String[] { "C:\\Users\\Mathieu\\AppData\\Local\\Temp\\", "" };
        java.util.ArrayList<java.lang.String> strList61 = new java.util.ArrayList<java.lang.String>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList61, strArray60);
        org.apache.commons.io.FileUtils.writeLines(file27, (java.util.Collection<java.lang.String>) strList61);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.writeLines(file7, "1048576 EB", (java.util.Collection<java.lang.String>) strList61, "1 GB", false);
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: 1048576 EB");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!1048576 EBhi!C:\\Users\\Mathieu\\AppData\\Local\\Temp\\hi!C:\\Users\\Mathieuhi!hi!1048576 EBhi!" + "'", str15, "hi!1048576 EBhi!C:\\Users\\Mathieu\\AppData\\Local\\Temp\\hi!C:\\Users\\Mathieuhi!hi!1048576 EBhi!");
        org.junit.Assert.assertNotNull(fileOutputStream17);
        org.junit.Assert.assertNotNull(lineIterator18);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(file23);
        org.junit.Assert.assertEquals(file23.getParent(), "hi!");
        org.junit.Assert.assertEquals(file23.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(file27);
        org.junit.Assert.assertEquals(file27.getParent(), "hi!");
        org.junit.Assert.assertEquals(file27.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(file33);
        org.junit.Assert.assertEquals(file33.getParent(), "hi!");
        org.junit.Assert.assertEquals(file33.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(file37);
        org.junit.Assert.assertEquals(file37.getParent(), "hi!");
        org.junit.Assert.assertEquals(file37.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(file44);
        org.junit.Assert.assertEquals(file44.getParent(), "hi!");
        org.junit.Assert.assertEquals(file44.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(lineIterator47);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
    }

    @Test
    public void test354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test354");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean12 = org.apache.commons.io.FileUtils.deleteQuietly(file7);
        org.apache.commons.io.FileUtils.writeStringToFile(file7, "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file18 = org.apache.commons.io.FileUtils.getFile(strArray17);
        java.lang.String[] strArray21 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file22 = org.apache.commons.io.FileUtils.getFile(strArray21);
        boolean boolean23 = org.apache.commons.io.FileUtils.isFileOlder(file18, file22);
        boolean boolean25 = org.apache.commons.io.FileUtils.waitFor(file22, (int) '4');
        java.lang.String[] strArray28 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file29 = org.apache.commons.io.FileUtils.getFile(strArray28);
        boolean boolean31 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file22, file29, "");
        boolean boolean32 = org.apache.commons.io.FileUtils.isFileNewer(file7, file22);
        java.io.FileOutputStream fileOutputStream33 = org.apache.commons.io.FileUtils.openOutputStream(file7);
        java.lang.String[] strArray36 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file37 = org.apache.commons.io.FileUtils.getFile(strArray36);
        java.lang.String[] strArray40 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file41 = org.apache.commons.io.FileUtils.getFile(strArray40);
        boolean boolean42 = org.apache.commons.io.FileUtils.isFileOlder(file37, file41);
        boolean boolean44 = org.apache.commons.io.FileUtils.waitFor(file41, (int) '4');
        org.apache.commons.io.LineIterator lineIterator45 = org.apache.commons.io.FileUtils.lineIterator(file41);
        boolean boolean46 = org.apache.commons.io.FileUtils.deleteQuietly(file41);
        org.apache.commons.io.FileUtils.write(file41, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset50 = null;
        org.apache.commons.io.FileUtils.write(file41, (java.lang.CharSequence) "", charset50, true);
        java.nio.charset.Charset charset53 = null;
        java.lang.String str54 = org.apache.commons.io.FileUtils.readFileToString(file41, charset53);
        boolean boolean55 = org.apache.commons.io.FileUtils.contentEquals(file7, file41);
        java.lang.String[] strArray58 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file59 = org.apache.commons.io.FileUtils.getFile(strArray58);
        java.io.File file60 = org.apache.commons.io.FileUtils.getFile(file7, strArray58);
        java.io.File file61 = org.apache.commons.io.FileUtils.getFile(strArray58);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(file18);
        org.junit.Assert.assertEquals(file18.getParent(), "hi!");
        org.junit.Assert.assertEquals(file18.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(file22);
        org.junit.Assert.assertEquals(file22.getParent(), "hi!");
        org.junit.Assert.assertEquals(file22.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(file29);
        org.junit.Assert.assertEquals(file29.getParent(), "hi!");
        org.junit.Assert.assertEquals(file29.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(fileOutputStream33);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(file37);
        org.junit.Assert.assertEquals(file37.getParent(), "hi!");
        org.junit.Assert.assertEquals(file37.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(file41);
        org.junit.Assert.assertEquals(file41.getParent(), "hi!");
        org.junit.Assert.assertEquals(file41.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(lineIterator45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "hi!" + "'", str54, "hi!");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(file59);
        org.junit.Assert.assertEquals(file59.getParent(), "hi!");
        org.junit.Assert.assertEquals(file59.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(file60);
        org.junit.Assert.assertEquals(file60.getParent(), "hi!\\hi!\\hi!");
        org.junit.Assert.assertEquals(file60.toString(), "hi!\\hi!\\hi!\\hi!");
        org.junit.Assert.assertNotNull(file61);
        org.junit.Assert.assertEquals(file61.getParent(), "hi!");
        org.junit.Assert.assertEquals(file61.toString(), "hi!\\hi!");
    }

    @Test
    public void test355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test355");
        java.io.File file0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.LineIterator lineIterator1 = org.apache.commons.io.FileUtils.lineIterator(file0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.File.exists()\" because \"file\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test356");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean12 = org.apache.commons.io.FileUtils.deleteQuietly(file7);
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "hi!");
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "-1 bytes", false);
        java.lang.String[] strArray20 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file21 = org.apache.commons.io.FileUtils.getFile(strArray20);
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file25 = org.apache.commons.io.FileUtils.getFile(strArray24);
        boolean boolean26 = org.apache.commons.io.FileUtils.isFileOlder(file21, file25);
        boolean boolean28 = org.apache.commons.io.FileUtils.waitFor(file25, (int) '4');
        org.apache.commons.io.LineIterator lineIterator29 = org.apache.commons.io.FileUtils.lineIterator(file25);
        boolean boolean30 = org.apache.commons.io.FileUtils.deleteQuietly(file25);
        org.apache.commons.io.FileUtils.write(file25, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset34 = null;
        org.apache.commons.io.FileUtils.write(file25, (java.lang.CharSequence) "", charset34, true);
        java.nio.charset.Charset charset38 = null;
        org.apache.commons.io.FileUtils.writeStringToFile(file25, "", charset38, false);
        java.util.zip.Checksum checksum41 = null;
        java.util.zip.Checksum checksum42 = org.apache.commons.io.FileUtils.checksum(file25, checksum41);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.copyFile(file7, file25, true);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Source 'hi!\\hi!' and destination 'hi!\\hi!' are the same");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(file21);
        org.junit.Assert.assertEquals(file21.getParent(), "hi!");
        org.junit.Assert.assertEquals(file21.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(file25);
        org.junit.Assert.assertEquals(file25.getParent(), "hi!");
        org.junit.Assert.assertEquals(file25.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(lineIterator29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(checksum42);
    }

    @Test
    public void test357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test357");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file14 = org.apache.commons.io.FileUtils.getFile(strArray13);
        boolean boolean16 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file7, file14, "");
        org.apache.commons.io.LineIterator lineIterator17 = org.apache.commons.io.FileUtils.lineIterator(file7);
        org.apache.commons.io.FileUtils.writeStringToFile(file7, "C:\\Users\\Mathieu\\AppData\\Local\\Temp\\", false);
        java.nio.charset.Charset charset22 = null;
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "", charset22, true);
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file28 = org.apache.commons.io.FileUtils.getFile(strArray27);
        java.lang.String[] strArray31 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file32 = org.apache.commons.io.FileUtils.getFile(strArray31);
        boolean boolean33 = org.apache.commons.io.FileUtils.isFileOlder(file28, file32);
        boolean boolean35 = org.apache.commons.io.FileUtils.waitFor(file32, (int) '4');
        org.apache.commons.io.LineIterator lineIterator36 = org.apache.commons.io.FileUtils.lineIterator(file32);
        boolean boolean37 = org.apache.commons.io.FileUtils.deleteQuietly(file32);
        org.apache.commons.io.FileUtils.write(file32, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset41 = null;
        org.apache.commons.io.FileUtils.write(file32, (java.lang.CharSequence) "", charset41, true);
        byte[] byteArray44 = org.apache.commons.io.FileUtils.readFileToByteArray(file32);
        org.apache.commons.io.FileUtils.writeByteArrayToFile(file7, byteArray44);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "", "1 GB1048576 EB1 GBC:\\Users\\Mathieu\\AppData\\Local\\Temp\\1 GBC:\\Users\\Mathieu1 GB1 GB1048576 EB1 GB", true);
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: 1 GB1048576 EB1 GBC:\\Users\\Mathieu\\AppData\\Local\\Temp\\1 GBC:\\Users\\Mathieu1 GB1 GB1048576 EB1 GB");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(file14);
        org.junit.Assert.assertEquals(file14.getParent(), "hi!");
        org.junit.Assert.assertEquals(file14.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(lineIterator17);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(file28);
        org.junit.Assert.assertEquals(file28.getParent(), "hi!");
        org.junit.Assert.assertEquals(file28.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(file32);
        org.junit.Assert.assertEquals(file32.getParent(), "hi!");
        org.junit.Assert.assertEquals(file32.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(lineIterator36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[104, 105, 33]");
    }

    @Test
    public void test358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test358");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file14 = org.apache.commons.io.FileUtils.getFile(strArray13);
        boolean boolean16 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file7, file14, "");
        java.io.FileOutputStream fileOutputStream18 = org.apache.commons.io.FileUtils.openOutputStream(file7, false);
        java.util.zip.Checksum checksum19 = null;
        java.util.zip.Checksum checksum20 = org.apache.commons.io.FileUtils.checksum(file7, checksum19);
        java.nio.charset.Charset charset22 = null;
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "hi!", charset22);
        java.io.File file24 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.moveFile(file7, file24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: destination");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(file14);
        org.junit.Assert.assertEquals(file14.getParent(), "hi!");
        org.junit.Assert.assertEquals(file14.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(fileOutputStream18);
        org.junit.Assert.assertNull(checksum20);
    }

    @Test
    public void test359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test359");
        java.io.File file0 = org.apache.commons.io.FileUtils.getTempDirectory();
        java.lang.String[] strArray3 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file4 = org.apache.commons.io.FileUtils.getFile(strArray3);
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file8 = org.apache.commons.io.FileUtils.getFile(strArray7);
        boolean boolean9 = org.apache.commons.io.FileUtils.isFileOlder(file4, file8);
        boolean boolean11 = org.apache.commons.io.FileUtils.waitFor(file8, (int) '4');
        org.apache.commons.io.LineIterator lineIterator12 = org.apache.commons.io.FileUtils.lineIterator(file8);
        boolean boolean13 = org.apache.commons.io.FileUtils.deleteQuietly(file8);
        org.apache.commons.io.FileUtils.writeStringToFile(file8, "");
        java.lang.String[] strArray18 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file19 = org.apache.commons.io.FileUtils.getFile(strArray18);
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file23 = org.apache.commons.io.FileUtils.getFile(strArray22);
        boolean boolean24 = org.apache.commons.io.FileUtils.isFileOlder(file19, file23);
        boolean boolean26 = org.apache.commons.io.FileUtils.waitFor(file23, (int) '4');
        java.lang.String[] strArray29 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file30 = org.apache.commons.io.FileUtils.getFile(strArray29);
        boolean boolean32 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file23, file30, "");
        boolean boolean33 = org.apache.commons.io.FileUtils.isFileNewer(file8, file23);
        boolean boolean34 = org.apache.commons.io.FileUtils.isSymlink(file8);
        boolean boolean35 = org.apache.commons.io.FileUtils.isFileNewer(file0, file8);
        org.junit.Assert.assertNotNull(file0);
        org.junit.Assert.assertEquals(file0.getParent(), "C:\\Users\\Mathieu\\AppData\\Local");
        org.junit.Assert.assertEquals(file0.toString(), "C:\\Users\\Mathieu\\AppData\\Local\\Temp");
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(file4);
        org.junit.Assert.assertEquals(file4.getParent(), "hi!");
        org.junit.Assert.assertEquals(file4.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(file8);
        org.junit.Assert.assertEquals(file8.getParent(), "hi!");
        org.junit.Assert.assertEquals(file8.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(lineIterator12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(file19);
        org.junit.Assert.assertEquals(file19.getParent(), "hi!");
        org.junit.Assert.assertEquals(file19.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(file23);
        org.junit.Assert.assertEquals(file23.getParent(), "hi!");
        org.junit.Assert.assertEquals(file23.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(file30);
        org.junit.Assert.assertEquals(file30.getParent(), "hi!");
        org.junit.Assert.assertEquals(file30.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test360");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file14 = org.apache.commons.io.FileUtils.getFile(strArray13);
        boolean boolean16 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file7, file14, "");
        org.apache.commons.io.FileUtils.write(file14, (java.lang.CharSequence) "hi!");
        java.lang.String[] strArray21 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file22 = org.apache.commons.io.FileUtils.getFile(strArray21);
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file26 = org.apache.commons.io.FileUtils.getFile(strArray25);
        boolean boolean27 = org.apache.commons.io.FileUtils.isFileOlder(file22, file26);
        boolean boolean29 = org.apache.commons.io.FileUtils.waitFor(file26, (int) '4');
        org.apache.commons.io.LineIterator lineIterator30 = org.apache.commons.io.FileUtils.lineIterator(file26);
        boolean boolean31 = org.apache.commons.io.FileUtils.deleteQuietly(file26);
        org.apache.commons.io.FileUtils.write(file26, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset35 = null;
        org.apache.commons.io.FileUtils.write(file26, (java.lang.CharSequence) "", charset35, true);
        java.nio.charset.Charset charset39 = null;
        org.apache.commons.io.FileUtils.writeStringToFile(file26, "", charset39, false);
        long long42 = org.apache.commons.io.FileUtils.sizeOf(file26);
        java.lang.String[] strArray45 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file46 = org.apache.commons.io.FileUtils.getFile(strArray45);
        java.lang.String[] strArray49 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file50 = org.apache.commons.io.FileUtils.getFile(strArray49);
        boolean boolean51 = org.apache.commons.io.FileUtils.isFileOlder(file46, file50);
        boolean boolean53 = org.apache.commons.io.FileUtils.waitFor(file50, (int) '4');
        org.apache.commons.io.LineIterator lineIterator54 = org.apache.commons.io.FileUtils.lineIterator(file50);
        boolean boolean55 = org.apache.commons.io.FileUtils.deleteQuietly(file50);
        org.apache.commons.io.FileUtils.write(file50, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset59 = null;
        org.apache.commons.io.FileUtils.write(file50, (java.lang.CharSequence) "", charset59, true);
        java.nio.charset.Charset charset63 = null;
        org.apache.commons.io.FileUtils.writeStringToFile(file50, "", charset63, false);
        long long66 = org.apache.commons.io.FileUtils.sizeOf(file50);
        org.apache.commons.io.FileUtils.writeStringToFile(file50, "");
        boolean boolean70 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file26, file50, "hi!");
        java.lang.String[] strArray73 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file74 = org.apache.commons.io.FileUtils.getFile(strArray73);
        java.lang.String[] strArray77 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file78 = org.apache.commons.io.FileUtils.getFile(strArray77);
        boolean boolean79 = org.apache.commons.io.FileUtils.isFileOlder(file74, file78);
        boolean boolean81 = org.apache.commons.io.FileUtils.waitFor(file78, (int) '4');
        org.apache.commons.io.LineIterator lineIterator82 = org.apache.commons.io.FileUtils.lineIterator(file78);
        boolean boolean83 = org.apache.commons.io.FileUtils.deleteQuietly(file78);
        org.apache.commons.io.FileUtils.write(file78, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset87 = null;
        org.apache.commons.io.FileUtils.write(file78, (java.lang.CharSequence) "", charset87, true);
        byte[] byteArray90 = org.apache.commons.io.FileUtils.readFileToByteArray(file78);
        org.apache.commons.io.FileUtils.writeByteArrayToFile(file26, byteArray90, true);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.writeByteArrayToFile(file14, byteArray90, (int) (byte) 10, 100, false);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(file14);
        org.junit.Assert.assertEquals(file14.getParent(), "hi!");
        org.junit.Assert.assertEquals(file14.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(file22);
        org.junit.Assert.assertEquals(file22.getParent(), "hi!");
        org.junit.Assert.assertEquals(file22.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(file26);
        org.junit.Assert.assertEquals(file26.getParent(), "hi!");
        org.junit.Assert.assertEquals(file26.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(lineIterator30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(file46);
        org.junit.Assert.assertEquals(file46.getParent(), "hi!");
        org.junit.Assert.assertEquals(file46.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(file50);
        org.junit.Assert.assertEquals(file50.getParent(), "hi!");
        org.junit.Assert.assertEquals(file50.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(lineIterator54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 0L + "'", long66 == 0L);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(file74);
        org.junit.Assert.assertEquals(file74.getParent(), "hi!");
        org.junit.Assert.assertEquals(file74.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNotNull(file78);
        org.junit.Assert.assertEquals(file78.getParent(), "hi!");
        org.junit.Assert.assertEquals(file78.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(lineIterator82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(byteArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray90), "[104, 105, 33]");
    }

    @Test
    public void test361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test361");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file14 = org.apache.commons.io.FileUtils.getFile(strArray13);
        boolean boolean16 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file7, file14, "");
        java.io.FileInputStream fileInputStream17 = org.apache.commons.io.FileUtils.openInputStream(file14);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.String> strList19 = org.apache.commons.io.FileUtils.readLines(file14, "35 bytes");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: 35 bytes");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(file14);
        org.junit.Assert.assertEquals(file14.getParent(), "hi!");
        org.junit.Assert.assertEquals(file14.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(fileInputStream17);
    }

    @Test
    public void test362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test362");
        java.lang.Iterable<java.io.File> fileIterable0 = null;
        java.lang.String[] strArray3 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file4 = org.apache.commons.io.FileUtils.getFile(strArray3);
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file8 = org.apache.commons.io.FileUtils.getFile(strArray7);
        boolean boolean9 = org.apache.commons.io.FileUtils.isFileOlder(file4, file8);
        boolean boolean11 = org.apache.commons.io.FileUtils.waitFor(file8, (int) '4');
        org.apache.commons.io.LineIterator lineIterator12 = org.apache.commons.io.FileUtils.lineIterator(file8);
        boolean boolean14 = org.apache.commons.io.FileUtils.isFileOlder(file8, (-1L));
        java.nio.charset.Charset charset15 = null;
        java.lang.String str16 = org.apache.commons.io.FileUtils.readFileToString(file8, charset15);
        org.apache.commons.io.FileUtils.writeStringToFile(file8, "hi!", true);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.copyToDirectory(fileIterable0, file8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: sourceIterable");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(file4);
        org.junit.Assert.assertEquals(file4.getParent(), "hi!");
        org.junit.Assert.assertEquals(file4.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(file8);
        org.junit.Assert.assertEquals(file8.getParent(), "hi!");
        org.junit.Assert.assertEquals(file8.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(lineIterator12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
    }

    @Test
    public void test363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test363");
        java.net.URL[] uRLArray0 = new java.net.URL[] {};
        java.io.File[] fileArray1 = org.apache.commons.io.FileUtils.toFiles(uRLArray0);
        java.io.File[] fileArray2 = org.apache.commons.io.FileUtils.toFiles(uRLArray0);
        org.junit.Assert.assertNotNull(uRLArray0);
        org.junit.Assert.assertNotNull(fileArray1);
        org.junit.Assert.assertNotNull(fileArray2);
    }

    @Test
    public void test364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test364");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean12 = org.apache.commons.io.FileUtils.deleteQuietly(file7);
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset16 = null;
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "", charset16, true);
        java.nio.charset.Charset charset20 = null;
        org.apache.commons.io.FileUtils.writeStringToFile(file7, "", charset20, false);
        long long23 = org.apache.commons.io.FileUtils.sizeOf(file7);
        java.lang.String[] strArray26 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file27 = org.apache.commons.io.FileUtils.getFile(strArray26);
        java.lang.String[] strArray30 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file31 = org.apache.commons.io.FileUtils.getFile(strArray30);
        boolean boolean32 = org.apache.commons.io.FileUtils.isFileOlder(file27, file31);
        boolean boolean34 = org.apache.commons.io.FileUtils.waitFor(file31, (int) '4');
        org.apache.commons.io.LineIterator lineIterator35 = org.apache.commons.io.FileUtils.lineIterator(file31);
        boolean boolean36 = org.apache.commons.io.FileUtils.deleteQuietly(file31);
        org.apache.commons.io.FileUtils.write(file31, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset40 = null;
        org.apache.commons.io.FileUtils.write(file31, (java.lang.CharSequence) "", charset40, true);
        java.nio.charset.Charset charset44 = null;
        org.apache.commons.io.FileUtils.writeStringToFile(file31, "", charset44, false);
        long long47 = org.apache.commons.io.FileUtils.sizeOf(file31);
        org.apache.commons.io.FileUtils.writeStringToFile(file31, "");
        boolean boolean51 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file7, file31, "hi!");
        java.lang.String[] strArray54 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file55 = org.apache.commons.io.FileUtils.getFile(strArray54);
        java.lang.String[] strArray56 = new java.lang.String[] {};
        java.io.File file57 = org.apache.commons.io.FileUtils.getFile(strArray56);
        java.io.File file58 = org.apache.commons.io.FileUtils.getFile(file55, strArray56);
        java.lang.String[] strArray61 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file62 = org.apache.commons.io.FileUtils.getFile(strArray61);
        java.lang.String[] strArray65 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file66 = org.apache.commons.io.FileUtils.getFile(strArray65);
        boolean boolean67 = org.apache.commons.io.FileUtils.isFileOlder(file62, file66);
        boolean boolean69 = org.apache.commons.io.FileUtils.waitFor(file66, (int) '4');
        org.apache.commons.io.LineIterator lineIterator70 = org.apache.commons.io.FileUtils.lineIterator(file66);
        boolean boolean72 = org.apache.commons.io.FileUtils.isFileOlder(file66, (-1L));
        java.io.FileOutputStream fileOutputStream74 = org.apache.commons.io.FileUtils.openOutputStream(file66, false);
        long long75 = org.apache.commons.io.FileUtils.copyFile(file55, (java.io.OutputStream) fileOutputStream74);
        boolean boolean76 = org.apache.commons.io.FileUtils.isFileOlder(file7, file55);
        java.lang.String[] strArray79 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file80 = org.apache.commons.io.FileUtils.getFile(strArray79);
        java.lang.String[] strArray83 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file84 = org.apache.commons.io.FileUtils.getFile(strArray83);
        boolean boolean85 = org.apache.commons.io.FileUtils.isFileOlder(file80, file84);
        boolean boolean87 = org.apache.commons.io.FileUtils.waitFor(file84, (int) '4');
        org.apache.commons.io.LineIterator lineIterator88 = org.apache.commons.io.FileUtils.lineIterator(file84);
        boolean boolean90 = org.apache.commons.io.FileUtils.isFileOlder(file84, (-1L));
        long long91 = org.apache.commons.io.FileUtils.sizeOf(file84);
        java.io.File file92 = org.apache.commons.io.FileUtils.getUserDirectory();
        org.apache.commons.io.FileUtils.copyFileToDirectory(file84, file92, true);
        org.apache.commons.io.FileUtils.forceDeleteOnExit(file84);
        boolean boolean96 = org.apache.commons.io.FileUtils.isFileNewer(file55, file84);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter97 = null;
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter98 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Collection<java.io.File> fileCollection99 = org.apache.commons.io.FileUtils.listFiles(file84, iOFileFilter97, iOFileFilter98);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'directory' is not a directory: hi!\\hi!");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(file27);
        org.junit.Assert.assertEquals(file27.getParent(), "hi!");
        org.junit.Assert.assertEquals(file27.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(file31);
        org.junit.Assert.assertEquals(file31.getParent(), "hi!");
        org.junit.Assert.assertEquals(file31.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(lineIterator35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(file55);
        org.junit.Assert.assertEquals(file55.getParent(), "hi!");
        org.junit.Assert.assertEquals(file55.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNull(file57);
        org.junit.Assert.assertNotNull(file58);
        org.junit.Assert.assertEquals(file58.getParent(), "hi!");
        org.junit.Assert.assertEquals(file58.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(file62);
        org.junit.Assert.assertEquals(file62.getParent(), "hi!");
        org.junit.Assert.assertEquals(file62.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(file66);
        org.junit.Assert.assertEquals(file66.getParent(), "hi!");
        org.junit.Assert.assertEquals(file66.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(lineIterator70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(fileOutputStream74);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 0L + "'", long75 == 0L);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(strArray79);
        org.junit.Assert.assertNotNull(file80);
        org.junit.Assert.assertEquals(file80.getParent(), "hi!");
        org.junit.Assert.assertEquals(file80.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray83);
        org.junit.Assert.assertNotNull(file84);
        org.junit.Assert.assertEquals(file84.getParent(), "hi!");
        org.junit.Assert.assertEquals(file84.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(lineIterator88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + long91 + "' != '" + 0L + "'", long91 == 0L);
        org.junit.Assert.assertNotNull(file92);
        org.junit.Assert.assertEquals(file92.getParent(), "C:\\Users");
        org.junit.Assert.assertEquals(file92.toString(), "C:\\Users\\Mathieu");
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test365");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean9 = org.apache.commons.io.FileUtils.deleteQuietly(file7);
        java.lang.String[] strArray12 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file13 = org.apache.commons.io.FileUtils.getFile(strArray12);
        java.lang.String[] strArray16 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file17 = org.apache.commons.io.FileUtils.getFile(strArray16);
        boolean boolean18 = org.apache.commons.io.FileUtils.isFileOlder(file13, file17);
        boolean boolean20 = org.apache.commons.io.FileUtils.waitFor(file17, (int) '4');
        java.lang.String[] strArray23 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file24 = org.apache.commons.io.FileUtils.getFile(strArray23);
        boolean boolean26 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file17, file24, "");
        org.apache.commons.io.LineIterator lineIterator27 = org.apache.commons.io.FileUtils.lineIterator(file17);
        org.apache.commons.io.FileUtils.writeStringToFile(file17, "C:\\Users\\Mathieu\\AppData\\Local\\Temp\\", false);
        java.nio.charset.Charset charset32 = null;
        org.apache.commons.io.FileUtils.write(file17, (java.lang.CharSequence) "", charset32, true);
        boolean boolean36 = org.apache.commons.io.FileUtils.waitFor(file17, 0);
        boolean boolean37 = org.apache.commons.io.FileUtils.isFileOlder(file7, file17);
        boolean boolean39 = org.apache.commons.io.FileUtils.isFileOlder(file7, 1024L);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str41 = org.apache.commons.io.FileUtils.readFileToString(file7, "100 bytes");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: 100 bytes");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(file13);
        org.junit.Assert.assertEquals(file13.getParent(), "hi!");
        org.junit.Assert.assertEquals(file13.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(file17);
        org.junit.Assert.assertEquals(file17.getParent(), "hi!");
        org.junit.Assert.assertEquals(file17.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(file24);
        org.junit.Assert.assertEquals(file24.getParent(), "hi!");
        org.junit.Assert.assertEquals(file24.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(lineIterator27);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test366");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean12 = org.apache.commons.io.FileUtils.deleteQuietly(file7);
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset16 = null;
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "", charset16, true);
        java.nio.charset.Charset charset20 = null;
        org.apache.commons.io.FileUtils.writeStringToFile(file7, "", charset20, false);
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file26 = org.apache.commons.io.FileUtils.getFile(strArray25);
        java.lang.String[] strArray29 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file30 = org.apache.commons.io.FileUtils.getFile(strArray29);
        boolean boolean31 = org.apache.commons.io.FileUtils.isFileOlder(file26, file30);
        boolean boolean33 = org.apache.commons.io.FileUtils.waitFor(file30, (int) '4');
        java.lang.String[] strArray36 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file37 = org.apache.commons.io.FileUtils.getFile(strArray36);
        boolean boolean39 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file30, file37, "");
        java.io.FileOutputStream fileOutputStream41 = org.apache.commons.io.FileUtils.openOutputStream(file30, false);
        java.lang.String[] strArray48 = new java.lang.String[] { "", "1048576 EB", "C:\\Users\\Mathieu\\AppData\\Local\\Temp\\", "C:\\Users\\Mathieu", "", "1048576 EB" };
        java.util.ArrayList<java.lang.String> strList49 = new java.util.ArrayList<java.lang.String>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList49, strArray48);
        org.apache.commons.io.FileUtils.writeLines(file30, (java.util.Collection<java.lang.String>) strList49, "1 GB", false);
        org.apache.commons.io.FileUtils.writeLines(file7, (java.util.Collection<java.lang.String>) strList49, "35 bytes");
        java.lang.String[] strArray58 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file59 = org.apache.commons.io.FileUtils.getFile(strArray58);
        java.lang.String[] strArray62 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file63 = org.apache.commons.io.FileUtils.getFile(strArray62);
        boolean boolean64 = org.apache.commons.io.FileUtils.isFileOlder(file59, file63);
        boolean boolean66 = org.apache.commons.io.FileUtils.waitFor(file63, (int) '4');
        java.lang.String[] strArray69 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file70 = org.apache.commons.io.FileUtils.getFile(strArray69);
        boolean boolean72 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file63, file70, "");
        org.apache.commons.io.FileUtils.writeStringToFile(file63, "", false);
        org.apache.commons.io.FileUtils.forceDeleteOnExit(file63);
        boolean boolean77 = org.apache.commons.io.FileUtils.isFileOlder(file7, file63);
        java.lang.String[] strArray80 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file81 = org.apache.commons.io.FileUtils.getFile(strArray80);
        boolean boolean83 = org.apache.commons.io.FileUtils.waitFor(file81, 100);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.copyFileToDirectory(file63, file81, true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Destination 'hi!\\hi!' is not a directory");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(file26);
        org.junit.Assert.assertEquals(file26.getParent(), "hi!");
        org.junit.Assert.assertEquals(file26.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(file30);
        org.junit.Assert.assertEquals(file30.getParent(), "hi!");
        org.junit.Assert.assertEquals(file30.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(file37);
        org.junit.Assert.assertEquals(file37.getParent(), "hi!");
        org.junit.Assert.assertEquals(file37.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(fileOutputStream41);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(file59);
        org.junit.Assert.assertEquals(file59.getParent(), "hi!");
        org.junit.Assert.assertEquals(file59.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(file63);
        org.junit.Assert.assertEquals(file63.getParent(), "hi!");
        org.junit.Assert.assertEquals(file63.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertNotNull(file70);
        org.junit.Assert.assertEquals(file70.getParent(), "hi!");
        org.junit.Assert.assertEquals(file70.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertNotNull(file81);
        org.junit.Assert.assertEquals(file81.getParent(), "hi!");
        org.junit.Assert.assertEquals(file81.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
    }

    @Test
    public void test367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test367");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean12 = org.apache.commons.io.FileUtils.deleteQuietly(file7);
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset16 = null;
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "", charset16, true);
        java.nio.charset.Charset charset20 = null;
        org.apache.commons.io.FileUtils.writeStringToFile(file7, "", charset20, false);
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file26 = org.apache.commons.io.FileUtils.getFile(strArray25);
        java.lang.String[] strArray29 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file30 = org.apache.commons.io.FileUtils.getFile(strArray29);
        boolean boolean31 = org.apache.commons.io.FileUtils.isFileOlder(file26, file30);
        boolean boolean33 = org.apache.commons.io.FileUtils.waitFor(file30, (int) '4');
        java.lang.String[] strArray36 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file37 = org.apache.commons.io.FileUtils.getFile(strArray36);
        boolean boolean39 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file30, file37, "");
        java.io.FileOutputStream fileOutputStream41 = org.apache.commons.io.FileUtils.openOutputStream(file30, false);
        java.lang.String[] strArray48 = new java.lang.String[] { "", "1048576 EB", "C:\\Users\\Mathieu\\AppData\\Local\\Temp\\", "C:\\Users\\Mathieu", "", "1048576 EB" };
        java.util.ArrayList<java.lang.String> strList49 = new java.util.ArrayList<java.lang.String>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList49, strArray48);
        org.apache.commons.io.FileUtils.writeLines(file30, (java.util.Collection<java.lang.String>) strList49, "1 GB", false);
        org.apache.commons.io.FileUtils.writeLines(file7, (java.util.Collection<java.lang.String>) strList49, "35 bytes");
        java.lang.String[] strArray58 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file59 = org.apache.commons.io.FileUtils.getFile(strArray58);
        java.lang.String[] strArray62 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file63 = org.apache.commons.io.FileUtils.getFile(strArray62);
        boolean boolean64 = org.apache.commons.io.FileUtils.isFileOlder(file59, file63);
        boolean boolean66 = org.apache.commons.io.FileUtils.waitFor(file63, (int) '4');
        java.lang.String[] strArray69 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file70 = org.apache.commons.io.FileUtils.getFile(strArray69);
        boolean boolean72 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file63, file70, "");
        org.apache.commons.io.FileUtils.writeStringToFile(file63, "", false);
        org.apache.commons.io.FileUtils.forceDeleteOnExit(file63);
        boolean boolean77 = org.apache.commons.io.FileUtils.isFileOlder(file7, file63);
        java.lang.String[] strArray80 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file81 = org.apache.commons.io.FileUtils.getFile(strArray80);
        java.lang.String[] strArray84 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file85 = org.apache.commons.io.FileUtils.getFile(strArray84);
        boolean boolean86 = org.apache.commons.io.FileUtils.isFileOlder(file81, file85);
        boolean boolean88 = org.apache.commons.io.FileUtils.waitFor(file85, (int) '4');
        java.lang.String[] strArray91 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file92 = org.apache.commons.io.FileUtils.getFile(strArray91);
        boolean boolean94 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file85, file92, "");
        org.apache.commons.io.FileUtils.write(file92, (java.lang.CharSequence) "hi!");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.moveFile(file7, file92);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.io.FileExistsException; message: Destination 'hi!\\hi!' already exists");
        } catch (org.apache.commons.io.FileExistsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(file26);
        org.junit.Assert.assertEquals(file26.getParent(), "hi!");
        org.junit.Assert.assertEquals(file26.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(file30);
        org.junit.Assert.assertEquals(file30.getParent(), "hi!");
        org.junit.Assert.assertEquals(file30.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(file37);
        org.junit.Assert.assertEquals(file37.getParent(), "hi!");
        org.junit.Assert.assertEquals(file37.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(fileOutputStream41);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(file59);
        org.junit.Assert.assertEquals(file59.getParent(), "hi!");
        org.junit.Assert.assertEquals(file59.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(file63);
        org.junit.Assert.assertEquals(file63.getParent(), "hi!");
        org.junit.Assert.assertEquals(file63.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertNotNull(file70);
        org.junit.Assert.assertEquals(file70.getParent(), "hi!");
        org.junit.Assert.assertEquals(file70.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertNotNull(file81);
        org.junit.Assert.assertEquals(file81.getParent(), "hi!");
        org.junit.Assert.assertEquals(file81.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertNotNull(file85);
        org.junit.Assert.assertEquals(file85.getParent(), "hi!");
        org.junit.Assert.assertEquals(file85.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(strArray91);
        org.junit.Assert.assertNotNull(file92);
        org.junit.Assert.assertEquals(file92.getParent(), "hi!");
        org.junit.Assert.assertEquals(file92.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
    }

    @Test
    public void test368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test368");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean12 = org.apache.commons.io.FileUtils.deleteQuietly(file7);
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "hi!");
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "-1 bytes", false);
        byte[] byteArray18 = org.apache.commons.io.FileUtils.readFileToByteArray(file7);
        java.lang.String[] strArray21 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file22 = org.apache.commons.io.FileUtils.getFile(strArray21);
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file26 = org.apache.commons.io.FileUtils.getFile(strArray25);
        boolean boolean27 = org.apache.commons.io.FileUtils.isFileOlder(file22, file26);
        boolean boolean29 = org.apache.commons.io.FileUtils.waitFor(file26, (int) '4');
        org.apache.commons.io.LineIterator lineIterator30 = org.apache.commons.io.FileUtils.lineIterator(file26);
        java.lang.String[] strArray33 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file34 = org.apache.commons.io.FileUtils.getFile(strArray33);
        java.lang.String[] strArray37 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file38 = org.apache.commons.io.FileUtils.getFile(strArray37);
        boolean boolean39 = org.apache.commons.io.FileUtils.isFileOlder(file34, file38);
        boolean boolean41 = org.apache.commons.io.FileUtils.waitFor(file38, (int) '4');
        org.apache.commons.io.LineIterator lineIterator42 = org.apache.commons.io.FileUtils.lineIterator(file38);
        boolean boolean43 = org.apache.commons.io.FileUtils.deleteQuietly(file38);
        org.apache.commons.io.FileUtils.write(file38, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset47 = null;
        org.apache.commons.io.FileUtils.write(file38, (java.lang.CharSequence) "", charset47, true);
        byte[] byteArray50 = org.apache.commons.io.FileUtils.readFileToByteArray(file38);
        boolean boolean52 = org.apache.commons.io.FileUtils.waitFor(file38, (int) 'a');
        byte[] byteArray53 = org.apache.commons.io.FileUtils.readFileToByteArray(file38);
        org.apache.commons.io.FileUtils.writeByteArrayToFile(file26, byteArray53);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.writeByteArrayToFile(file7, byteArray53, 0, 100, false);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[45, 49, 32, 98, 121, 116, 101, 115]");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(file22);
        org.junit.Assert.assertEquals(file22.getParent(), "hi!");
        org.junit.Assert.assertEquals(file22.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(file26);
        org.junit.Assert.assertEquals(file26.getParent(), "hi!");
        org.junit.Assert.assertEquals(file26.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(lineIterator30);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(file34);
        org.junit.Assert.assertEquals(file34.getParent(), "hi!");
        org.junit.Assert.assertEquals(file34.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(file38);
        org.junit.Assert.assertEquals(file38.getParent(), "hi!");
        org.junit.Assert.assertEquals(file38.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(lineIterator42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[104, 105, 33]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[104, 105, 33]");
    }

    @Test
    public void test369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test369");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file14 = org.apache.commons.io.FileUtils.getFile(strArray13);
        boolean boolean16 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file7, file14, "");
        java.io.FileOutputStream fileOutputStream18 = org.apache.commons.io.FileUtils.openOutputStream(file7, false);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "1048576 EB", "C:\\Users\\Mathieu\\AppData\\Local\\Temp\\", "C:\\Users\\Mathieu", "", "1048576 EB" };
        java.util.ArrayList<java.lang.String> strList26 = new java.util.ArrayList<java.lang.String>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList26, strArray25);
        org.apache.commons.io.FileUtils.writeLines(file7, (java.util.Collection<java.lang.String>) strList26, "1 GB", false);
        org.apache.commons.io.LineIterator lineIterator31 = org.apache.commons.io.FileUtils.lineIterator(file7);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(file14);
        org.junit.Assert.assertEquals(file14.getParent(), "hi!");
        org.junit.Assert.assertEquals(file14.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(fileOutputStream18);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(lineIterator31);
    }

    @Test
    public void test370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test370");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file14 = org.apache.commons.io.FileUtils.getFile(strArray13);
        boolean boolean16 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file7, file14, "");
        java.io.FileOutputStream fileOutputStream18 = org.apache.commons.io.FileUtils.openOutputStream(file7, false);
        java.lang.String[] strArray21 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file22 = org.apache.commons.io.FileUtils.getFile(strArray21);
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file26 = org.apache.commons.io.FileUtils.getFile(strArray25);
        boolean boolean27 = org.apache.commons.io.FileUtils.isFileOlder(file22, file26);
        boolean boolean29 = org.apache.commons.io.FileUtils.waitFor(file26, (int) '4');
        org.apache.commons.io.LineIterator lineIterator30 = org.apache.commons.io.FileUtils.lineIterator(file26);
        boolean boolean31 = org.apache.commons.io.FileUtils.deleteQuietly(file26);
        org.apache.commons.io.FileUtils.write(file26, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset35 = null;
        org.apache.commons.io.FileUtils.write(file26, (java.lang.CharSequence) "", charset35, true);
        java.nio.charset.Charset charset39 = null;
        org.apache.commons.io.FileUtils.writeStringToFile(file26, "", charset39, false);
        long long42 = org.apache.commons.io.FileUtils.sizeOf(file26);
        java.lang.String[] strArray45 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file46 = org.apache.commons.io.FileUtils.getFile(strArray45);
        java.lang.String[] strArray49 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file50 = org.apache.commons.io.FileUtils.getFile(strArray49);
        boolean boolean51 = org.apache.commons.io.FileUtils.isFileOlder(file46, file50);
        boolean boolean53 = org.apache.commons.io.FileUtils.waitFor(file50, (int) '4');
        org.apache.commons.io.LineIterator lineIterator54 = org.apache.commons.io.FileUtils.lineIterator(file50);
        boolean boolean55 = org.apache.commons.io.FileUtils.deleteQuietly(file50);
        org.apache.commons.io.FileUtils.write(file50, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset59 = null;
        org.apache.commons.io.FileUtils.write(file50, (java.lang.CharSequence) "", charset59, true);
        java.nio.charset.Charset charset63 = null;
        org.apache.commons.io.FileUtils.writeStringToFile(file50, "", charset63, false);
        long long66 = org.apache.commons.io.FileUtils.sizeOf(file50);
        org.apache.commons.io.FileUtils.writeStringToFile(file50, "");
        boolean boolean70 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file26, file50, "hi!");
        boolean boolean72 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file7, file50, "-1 bytes");
        java.lang.String[] strArray76 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file77 = org.apache.commons.io.FileUtils.getFile(strArray76);
        java.lang.String[] strArray80 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file81 = org.apache.commons.io.FileUtils.getFile(strArray80);
        boolean boolean82 = org.apache.commons.io.FileUtils.isFileOlder(file77, file81);
        boolean boolean83 = org.apache.commons.io.FileUtils.deleteQuietly(file81);
        boolean boolean85 = org.apache.commons.io.FileUtils.isFileNewer(file81, 0L);
        java.nio.charset.Charset charset86 = null;
        java.util.List<java.lang.String> strList87 = org.apache.commons.io.FileUtils.readLines(file81, charset86);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.writeLines(file50, "\000\000d\001", (java.util.Collection<java.lang.String>) strList87, "hi!");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ??d?");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(file14);
        org.junit.Assert.assertEquals(file14.getParent(), "hi!");
        org.junit.Assert.assertEquals(file14.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(fileOutputStream18);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(file22);
        org.junit.Assert.assertEquals(file22.getParent(), "hi!");
        org.junit.Assert.assertEquals(file22.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(file26);
        org.junit.Assert.assertEquals(file26.getParent(), "hi!");
        org.junit.Assert.assertEquals(file26.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(lineIterator30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(file46);
        org.junit.Assert.assertEquals(file46.getParent(), "hi!");
        org.junit.Assert.assertEquals(file46.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(file50);
        org.junit.Assert.assertEquals(file50.getParent(), "hi!");
        org.junit.Assert.assertEquals(file50.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(lineIterator54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 0L + "'", long66 == 0L);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertNotNull(file77);
        org.junit.Assert.assertEquals(file77.getParent(), "hi!");
        org.junit.Assert.assertEquals(file77.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertNotNull(file81);
        org.junit.Assert.assertEquals(file81.getParent(), "hi!");
        org.junit.Assert.assertEquals(file81.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(strList87);
    }

    @Test
    public void test371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test371");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean12 = org.apache.commons.io.FileUtils.deleteQuietly(file7);
        java.io.FileOutputStream fileOutputStream13 = org.apache.commons.io.FileUtils.openOutputStream(file7);
        java.io.FileInputStream fileInputStream14 = org.apache.commons.io.FileUtils.openInputStream(file7);
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file18 = org.apache.commons.io.FileUtils.getFile(strArray17);
        org.apache.commons.io.FileUtils.copyToFile((java.io.InputStream) fileInputStream14, file18);
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file23 = org.apache.commons.io.FileUtils.getFile(strArray22);
        java.lang.String[] strArray26 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file27 = org.apache.commons.io.FileUtils.getFile(strArray26);
        boolean boolean28 = org.apache.commons.io.FileUtils.isFileOlder(file23, file27);
        boolean boolean30 = org.apache.commons.io.FileUtils.waitFor(file27, (int) '4');
        org.apache.commons.io.LineIterator lineIterator31 = org.apache.commons.io.FileUtils.lineIterator(file27);
        boolean boolean33 = org.apache.commons.io.FileUtils.isFileOlder(file27, (-1L));
        long long34 = org.apache.commons.io.FileUtils.sizeOf(file27);
        java.io.File file35 = org.apache.commons.io.FileUtils.getUserDirectory();
        org.apache.commons.io.FileUtils.copyFileToDirectory(file27, file35, true);
        org.apache.commons.io.FileUtils.write(file27, (java.lang.CharSequence) "hi!", true);
        org.apache.commons.io.FileUtils.copyInputStreamToFile((java.io.InputStream) fileInputStream14, file27);
        java.lang.String[] strArray44 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file45 = org.apache.commons.io.FileUtils.getFile(strArray44);
        java.io.File file46 = org.apache.commons.io.FileUtils.getFile(strArray44);
        java.math.BigInteger bigInteger47 = org.apache.commons.io.FileUtils.sizeOfAsBigInteger(file46);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.copyFileToDirectory(file27, file46, false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Destination 'hi!\\hi!' is not a directory");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(fileOutputStream13);
        org.junit.Assert.assertNotNull(fileInputStream14);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(file18);
        org.junit.Assert.assertEquals(file18.getParent(), "hi!");
        org.junit.Assert.assertEquals(file18.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(file23);
        org.junit.Assert.assertEquals(file23.getParent(), "hi!");
        org.junit.Assert.assertEquals(file23.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(file27);
        org.junit.Assert.assertEquals(file27.getParent(), "hi!");
        org.junit.Assert.assertEquals(file27.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(lineIterator31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(file35);
        org.junit.Assert.assertEquals(file35.getParent(), "C:\\Users");
        org.junit.Assert.assertEquals(file35.toString(), "C:\\Users\\Mathieu");
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(file45);
        org.junit.Assert.assertEquals(file45.getParent(), "hi!");
        org.junit.Assert.assertEquals(file45.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(file46);
        org.junit.Assert.assertEquals(file46.getParent(), "hi!");
        org.junit.Assert.assertEquals(file46.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(bigInteger47);
    }

    @Test
    public void test372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test372");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean13 = org.apache.commons.io.FileUtils.isFileOlder(file7, (-1L));
        java.lang.String[] strArray16 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file17 = org.apache.commons.io.FileUtils.getFile(strArray16);
        java.lang.String[] strArray20 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file21 = org.apache.commons.io.FileUtils.getFile(strArray20);
        boolean boolean22 = org.apache.commons.io.FileUtils.isFileOlder(file17, file21);
        boolean boolean24 = org.apache.commons.io.FileUtils.waitFor(file21, (int) '4');
        org.apache.commons.io.LineIterator lineIterator25 = org.apache.commons.io.FileUtils.lineIterator(file21);
        boolean boolean27 = org.apache.commons.io.FileUtils.isFileOlder(file21, (-1L));
        java.nio.charset.Charset charset28 = null;
        java.lang.String str29 = org.apache.commons.io.FileUtils.readFileToString(file21, charset28);
        java.io.FileOutputStream fileOutputStream31 = org.apache.commons.io.FileUtils.openOutputStream(file21, false);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.copyFile(file7, file21);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Source 'hi!\\hi!' and destination 'hi!\\hi!' are the same");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(file17);
        org.junit.Assert.assertEquals(file17.getParent(), "hi!");
        org.junit.Assert.assertEquals(file17.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(file21);
        org.junit.Assert.assertEquals(file21.getParent(), "hi!");
        org.junit.Assert.assertEquals(file21.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(lineIterator25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(fileOutputStream31);
    }

    @Test
    public void test373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test373");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray4 = new java.lang.String[] {};
        java.io.File file5 = org.apache.commons.io.FileUtils.getFile(strArray4);
        java.io.File file6 = org.apache.commons.io.FileUtils.getFile(file3, strArray4);
        java.lang.Class<?> wildcardClass7 = strArray4.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNull(file5);
        org.junit.Assert.assertNotNull(file6);
        org.junit.Assert.assertEquals(file6.getParent(), "hi!");
        org.junit.Assert.assertEquals(file6.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test374");
        java.io.File file0 = null;
        java.lang.String[] strArray3 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file4 = org.apache.commons.io.FileUtils.getFile(strArray3);
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file8 = org.apache.commons.io.FileUtils.getFile(strArray7);
        boolean boolean9 = org.apache.commons.io.FileUtils.isFileOlder(file4, file8);
        boolean boolean11 = org.apache.commons.io.FileUtils.waitFor(file8, (int) '4');
        org.apache.commons.io.LineIterator lineIterator12 = org.apache.commons.io.FileUtils.lineIterator(file8);
        boolean boolean13 = org.apache.commons.io.FileUtils.deleteQuietly(file8);
        org.apache.commons.io.FileUtils.write(file8, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset17 = null;
        org.apache.commons.io.FileUtils.write(file8, (java.lang.CharSequence) "", charset17, true);
        byte[] byteArray20 = org.apache.commons.io.FileUtils.readFileToByteArray(file8);
        boolean boolean22 = org.apache.commons.io.FileUtils.waitFor(file8, (int) 'a');
        byte[] byteArray23 = org.apache.commons.io.FileUtils.readFileToByteArray(file8);
        java.io.FileInputStream fileInputStream24 = org.apache.commons.io.FileUtils.openInputStream(file8);
        byte[] byteArray25 = org.apache.commons.io.FileUtils.readFileToByteArray(file8);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.moveFileToDirectory(file0, file8, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: source");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(file4);
        org.junit.Assert.assertEquals(file4.getParent(), "hi!");
        org.junit.Assert.assertEquals(file4.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(file8);
        org.junit.Assert.assertEquals(file8.getParent(), "hi!");
        org.junit.Assert.assertEquals(file8.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(lineIterator12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[104, 105, 33]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[104, 105, 33]");
        org.junit.Assert.assertNotNull(fileInputStream24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[104, 105, 33]");
    }

    @Test
    public void test375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test375");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.writeStringToFile(file3, "", "1 GB1048576 EB1 GBC:\\Users\\Mathieu\\AppData\\Local\\Temp\\1 GBC:\\Users\\Mathieu1 GB1 GB1048576 EB1 GB");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: 1 GB1048576 EB1 GBC:\\Users\\Mathieu\\AppData\\Local\\Temp\\1 GBC:\\Users\\Mathieu1 GB1 GB1048576 EB1 GB");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test376");
        java.io.File file0 = null;
        java.io.OutputStream outputStream1 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long2 = org.apache.commons.io.FileUtils.copyFile(file0, outputStream1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test377");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean12 = org.apache.commons.io.FileUtils.deleteQuietly(file7);
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset16 = null;
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "", charset16, true);
        byte[] byteArray19 = org.apache.commons.io.FileUtils.readFileToByteArray(file7);
        boolean boolean21 = org.apache.commons.io.FileUtils.waitFor(file7, (int) 'a');
        org.apache.commons.io.LineIterator lineIterator22 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean24 = org.apache.commons.io.FileUtils.isFileOlder(file7, (long) (byte) 100);
        boolean boolean26 = org.apache.commons.io.FileUtils.isFileOlder(file7, (-1L));
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter27 = null;
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter28 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<java.io.File> fileItor29 = org.apache.commons.io.FileUtils.iterateFilesAndDirs(file7, iOFileFilter27, iOFileFilter28);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'directory' is not a directory: hi!\\hi!");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[104, 105, 33]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(lineIterator22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test378");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file14 = org.apache.commons.io.FileUtils.getFile(strArray13);
        boolean boolean16 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file7, file14, "");
        java.io.FileOutputStream fileOutputStream18 = org.apache.commons.io.FileUtils.openOutputStream(file7, false);
        java.util.zip.Checksum checksum19 = null;
        java.util.zip.Checksum checksum20 = org.apache.commons.io.FileUtils.checksum(file7, checksum19);
        java.lang.String[] strArray23 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file24 = org.apache.commons.io.FileUtils.getFile(strArray23);
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file28 = org.apache.commons.io.FileUtils.getFile(strArray27);
        boolean boolean29 = org.apache.commons.io.FileUtils.isFileOlder(file24, file28);
        boolean boolean31 = org.apache.commons.io.FileUtils.waitFor(file28, (int) '4');
        org.apache.commons.io.LineIterator lineIterator32 = org.apache.commons.io.FileUtils.lineIterator(file28);
        boolean boolean33 = org.apache.commons.io.FileUtils.deleteQuietly(file28);
        org.apache.commons.io.FileUtils.write(file28, (java.lang.CharSequence) "hi!");
        org.apache.commons.io.FileUtils.write(file28, (java.lang.CharSequence) "-1 bytes", false);
        byte[] byteArray39 = org.apache.commons.io.FileUtils.readFileToByteArray(file28);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.writeByteArrayToFile(file7, byteArray39, (int) 'a', (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(file14);
        org.junit.Assert.assertEquals(file14.getParent(), "hi!");
        org.junit.Assert.assertEquals(file14.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(fileOutputStream18);
        org.junit.Assert.assertNull(checksum20);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(file24);
        org.junit.Assert.assertEquals(file24.getParent(), "hi!");
        org.junit.Assert.assertEquals(file24.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(file28);
        org.junit.Assert.assertEquals(file28.getParent(), "hi!");
        org.junit.Assert.assertEquals(file28.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(lineIterator32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[45, 49, 32, 98, 121, 116, 101, 115]");
    }

    @Test
    public void test379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test379");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean13 = org.apache.commons.io.FileUtils.isFileOlder(file7, (-1L));
        java.nio.charset.Charset charset14 = null;
        java.lang.String str15 = org.apache.commons.io.FileUtils.readFileToString(file7, charset14);
        java.io.FileOutputStream fileOutputStream17 = org.apache.commons.io.FileUtils.openOutputStream(file7, false);
        org.apache.commons.io.LineIterator lineIterator18 = org.apache.commons.io.FileUtils.lineIterator(file7);
        org.apache.commons.io.FileUtils.writeStringToFile(file7, "-1 bytes", false);
        java.nio.charset.Charset charset23 = null;
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "32 bytes", charset23);
        long long25 = org.apache.commons.io.FileUtils.checksumCRC32(file7);
        java.lang.String[] strArray28 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file29 = org.apache.commons.io.FileUtils.getFile(strArray28);
        java.lang.String[] strArray32 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file33 = org.apache.commons.io.FileUtils.getFile(strArray32);
        boolean boolean34 = org.apache.commons.io.FileUtils.isFileOlder(file29, file33);
        boolean boolean36 = org.apache.commons.io.FileUtils.waitFor(file33, (int) '4');
        org.apache.commons.io.LineIterator lineIterator37 = org.apache.commons.io.FileUtils.lineIterator(file33);
        boolean boolean39 = org.apache.commons.io.FileUtils.isFileOlder(file33, (-1L));
        java.nio.charset.Charset charset40 = null;
        java.lang.String str41 = org.apache.commons.io.FileUtils.readFileToString(file33, charset40);
        java.io.FileOutputStream fileOutputStream43 = org.apache.commons.io.FileUtils.openOutputStream(file33, false);
        boolean boolean44 = org.apache.commons.io.FileUtils.isFileOlder(file7, file33);
        java.lang.String[] strArray47 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file48 = org.apache.commons.io.FileUtils.getFile(strArray47);
        java.lang.String[] strArray51 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file52 = org.apache.commons.io.FileUtils.getFile(strArray51);
        boolean boolean53 = org.apache.commons.io.FileUtils.isFileOlder(file48, file52);
        boolean boolean55 = org.apache.commons.io.FileUtils.waitFor(file52, (int) '4');
        java.lang.String[] strArray58 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file59 = org.apache.commons.io.FileUtils.getFile(strArray58);
        boolean boolean61 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file52, file59, "");
        org.apache.commons.io.LineIterator lineIterator62 = org.apache.commons.io.FileUtils.lineIterator(file52);
        org.apache.commons.io.FileUtils.writeStringToFile(file52, "C:\\Users\\Mathieu\\AppData\\Local\\Temp\\", false);
        java.lang.String[] strArray68 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file69 = org.apache.commons.io.FileUtils.getFile(strArray68);
        java.lang.String[] strArray72 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file73 = org.apache.commons.io.FileUtils.getFile(strArray72);
        boolean boolean74 = org.apache.commons.io.FileUtils.isFileOlder(file69, file73);
        java.lang.String str75 = org.apache.commons.io.FileUtils.readFileToString(file69);
        java.lang.String[] strArray78 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file79 = org.apache.commons.io.FileUtils.getFile(strArray78);
        java.io.File file80 = org.apache.commons.io.FileUtils.getFile(file69, strArray78);
        boolean boolean82 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file52, file80, "-1 bytes");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.moveFileToDirectory(file7, file52, false);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Destination 'hi!\\hi!' is not a directory");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(fileOutputStream17);
        org.junit.Assert.assertNotNull(lineIterator18);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 562794089L + "'", long25 == 562794089L);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(file29);
        org.junit.Assert.assertEquals(file29.getParent(), "hi!");
        org.junit.Assert.assertEquals(file29.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(file33);
        org.junit.Assert.assertEquals(file33.getParent(), "hi!");
        org.junit.Assert.assertEquals(file33.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(lineIterator37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "32 bytes" + "'", str41, "32 bytes");
        org.junit.Assert.assertNotNull(fileOutputStream43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(file48);
        org.junit.Assert.assertEquals(file48.getParent(), "hi!");
        org.junit.Assert.assertEquals(file48.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(file52);
        org.junit.Assert.assertEquals(file52.getParent(), "hi!");
        org.junit.Assert.assertEquals(file52.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(file59);
        org.junit.Assert.assertEquals(file59.getParent(), "hi!");
        org.junit.Assert.assertEquals(file59.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(lineIterator62);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(file69);
        org.junit.Assert.assertEquals(file69.getParent(), "hi!");
        org.junit.Assert.assertEquals(file69.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(file73);
        org.junit.Assert.assertEquals(file73.getParent(), "hi!");
        org.junit.Assert.assertEquals(file73.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "C:\\Users\\Mathieu\\AppData\\Local\\Temp\\" + "'", str75, "C:\\Users\\Mathieu\\AppData\\Local\\Temp\\");
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(file79);
        org.junit.Assert.assertEquals(file79.getParent(), "hi!");
        org.junit.Assert.assertEquals(file79.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(file80);
        org.junit.Assert.assertEquals(file80.getParent(), "hi!\\hi!\\hi!");
        org.junit.Assert.assertEquals(file80.toString(), "hi!\\hi!\\hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test380");
        java.io.File file0 = org.apache.commons.io.FileUtils.getTempDirectory();
        boolean boolean2 = org.apache.commons.io.FileUtils.isFileOlder(file0, (long) 'a');
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        java.lang.String[] strArray10 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file11 = org.apache.commons.io.FileUtils.getFile(strArray10);
        boolean boolean12 = org.apache.commons.io.FileUtils.isFileOlder(file7, file11);
        boolean boolean14 = org.apache.commons.io.FileUtils.waitFor(file11, (int) '4');
        org.apache.commons.io.LineIterator lineIterator15 = org.apache.commons.io.FileUtils.lineIterator(file11);
        boolean boolean16 = org.apache.commons.io.FileUtils.deleteQuietly(file11);
        org.apache.commons.io.FileUtils.write(file11, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset20 = null;
        org.apache.commons.io.FileUtils.write(file11, (java.lang.CharSequence) "", charset20, true);
        java.nio.charset.Charset charset24 = null;
        org.apache.commons.io.FileUtils.writeStringToFile(file11, "", charset24, false);
        long long27 = org.apache.commons.io.FileUtils.sizeOf(file11);
        java.lang.String[] strArray30 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file31 = org.apache.commons.io.FileUtils.getFile(strArray30);
        java.lang.String[] strArray34 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file35 = org.apache.commons.io.FileUtils.getFile(strArray34);
        boolean boolean36 = org.apache.commons.io.FileUtils.isFileOlder(file31, file35);
        boolean boolean38 = org.apache.commons.io.FileUtils.waitFor(file35, (int) '4');
        org.apache.commons.io.LineIterator lineIterator39 = org.apache.commons.io.FileUtils.lineIterator(file35);
        boolean boolean40 = org.apache.commons.io.FileUtils.deleteQuietly(file35);
        org.apache.commons.io.FileUtils.write(file35, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset44 = null;
        org.apache.commons.io.FileUtils.write(file35, (java.lang.CharSequence) "", charset44, true);
        java.nio.charset.Charset charset48 = null;
        org.apache.commons.io.FileUtils.writeStringToFile(file35, "", charset48, false);
        long long51 = org.apache.commons.io.FileUtils.sizeOf(file35);
        org.apache.commons.io.FileUtils.writeStringToFile(file35, "");
        boolean boolean55 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file11, file35, "hi!");
        java.io.FileInputStream fileInputStream56 = org.apache.commons.io.FileUtils.openInputStream(file11);
        java.lang.String[] strArray59 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file60 = org.apache.commons.io.FileUtils.getFile(strArray59);
        java.lang.String[] strArray63 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file64 = org.apache.commons.io.FileUtils.getFile(strArray63);
        boolean boolean65 = org.apache.commons.io.FileUtils.isFileOlder(file60, file64);
        boolean boolean67 = org.apache.commons.io.FileUtils.waitFor(file64, (int) '4');
        java.lang.String[] strArray70 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file71 = org.apache.commons.io.FileUtils.getFile(strArray70);
        boolean boolean73 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file64, file71, "");
        java.io.FileOutputStream fileOutputStream75 = org.apache.commons.io.FileUtils.openOutputStream(file64, false);
        java.lang.String[] strArray82 = new java.lang.String[] { "", "1048576 EB", "C:\\Users\\Mathieu\\AppData\\Local\\Temp\\", "C:\\Users\\Mathieu", "", "1048576 EB" };
        java.util.ArrayList<java.lang.String> strList83 = new java.util.ArrayList<java.lang.String>();
        boolean boolean84 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList83, strArray82);
        org.apache.commons.io.FileUtils.writeLines(file64, (java.util.Collection<java.lang.String>) strList83, "1 GB", false);
        org.apache.commons.io.FileUtils.writeLines(file11, (java.util.Collection<java.lang.String>) strList83, "hi!");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.writeLines(file0, "C:\\Users\\Mathieu\\AppData\\Local\\Temp\\", (java.util.Collection<java.lang.String>) strList83, "35 bytes");
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: File 'C:\\Users\\Mathieu\\AppData\\Local\\Temp' exists but is a directory");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(file0);
        org.junit.Assert.assertEquals(file0.getParent(), "C:\\Users\\Mathieu\\AppData\\Local");
        org.junit.Assert.assertEquals(file0.toString(), "C:\\Users\\Mathieu\\AppData\\Local\\Temp");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(file11);
        org.junit.Assert.assertEquals(file11.getParent(), "hi!");
        org.junit.Assert.assertEquals(file11.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(lineIterator15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(file31);
        org.junit.Assert.assertEquals(file31.getParent(), "hi!");
        org.junit.Assert.assertEquals(file31.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(file35);
        org.junit.Assert.assertEquals(file35.getParent(), "hi!");
        org.junit.Assert.assertEquals(file35.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(lineIterator39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(fileInputStream56);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(file60);
        org.junit.Assert.assertEquals(file60.getParent(), "hi!");
        org.junit.Assert.assertEquals(file60.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(file64);
        org.junit.Assert.assertEquals(file64.getParent(), "hi!");
        org.junit.Assert.assertEquals(file64.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertNotNull(file71);
        org.junit.Assert.assertEquals(file71.getParent(), "hi!");
        org.junit.Assert.assertEquals(file71.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(fileOutputStream75);
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
    }

    @Test
    public void test381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test381");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean12 = org.apache.commons.io.FileUtils.deleteQuietly(file7);
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset16 = null;
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "", charset16, true);
        java.nio.charset.Charset charset20 = null;
        org.apache.commons.io.FileUtils.writeStringToFile(file7, "", charset20, false);
        long long23 = org.apache.commons.io.FileUtils.sizeOf(file7);
        java.lang.String[] strArray26 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file27 = org.apache.commons.io.FileUtils.getFile(strArray26);
        java.lang.String[] strArray30 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file31 = org.apache.commons.io.FileUtils.getFile(strArray30);
        boolean boolean32 = org.apache.commons.io.FileUtils.isFileOlder(file27, file31);
        boolean boolean34 = org.apache.commons.io.FileUtils.waitFor(file31, (int) '4');
        org.apache.commons.io.LineIterator lineIterator35 = org.apache.commons.io.FileUtils.lineIterator(file31);
        boolean boolean36 = org.apache.commons.io.FileUtils.deleteQuietly(file31);
        org.apache.commons.io.FileUtils.write(file31, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset40 = null;
        org.apache.commons.io.FileUtils.write(file31, (java.lang.CharSequence) "", charset40, true);
        java.nio.charset.Charset charset44 = null;
        org.apache.commons.io.FileUtils.writeStringToFile(file31, "", charset44, false);
        long long47 = org.apache.commons.io.FileUtils.sizeOf(file31);
        org.apache.commons.io.FileUtils.writeStringToFile(file31, "");
        boolean boolean51 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file7, file31, "hi!");
        java.lang.String[] strArray54 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file55 = org.apache.commons.io.FileUtils.getFile(strArray54);
        java.lang.String[] strArray56 = new java.lang.String[] {};
        java.io.File file57 = org.apache.commons.io.FileUtils.getFile(strArray56);
        java.io.File file58 = org.apache.commons.io.FileUtils.getFile(file55, strArray56);
        java.lang.String[] strArray61 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file62 = org.apache.commons.io.FileUtils.getFile(strArray61);
        java.lang.String[] strArray65 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file66 = org.apache.commons.io.FileUtils.getFile(strArray65);
        boolean boolean67 = org.apache.commons.io.FileUtils.isFileOlder(file62, file66);
        boolean boolean69 = org.apache.commons.io.FileUtils.waitFor(file66, (int) '4');
        org.apache.commons.io.LineIterator lineIterator70 = org.apache.commons.io.FileUtils.lineIterator(file66);
        boolean boolean72 = org.apache.commons.io.FileUtils.isFileOlder(file66, (-1L));
        java.io.FileOutputStream fileOutputStream74 = org.apache.commons.io.FileUtils.openOutputStream(file66, false);
        long long75 = org.apache.commons.io.FileUtils.copyFile(file55, (java.io.OutputStream) fileOutputStream74);
        boolean boolean76 = org.apache.commons.io.FileUtils.isFileOlder(file7, file55);
        java.lang.String[] strArray79 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file80 = org.apache.commons.io.FileUtils.getFile(strArray79);
        java.lang.String[] strArray83 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file84 = org.apache.commons.io.FileUtils.getFile(strArray83);
        boolean boolean85 = org.apache.commons.io.FileUtils.isFileOlder(file80, file84);
        boolean boolean87 = org.apache.commons.io.FileUtils.waitFor(file84, (int) '4');
        org.apache.commons.io.LineIterator lineIterator88 = org.apache.commons.io.FileUtils.lineIterator(file84);
        boolean boolean90 = org.apache.commons.io.FileUtils.isFileOlder(file84, (-1L));
        long long91 = org.apache.commons.io.FileUtils.sizeOf(file84);
        java.io.File file92 = org.apache.commons.io.FileUtils.getUserDirectory();
        org.apache.commons.io.FileUtils.copyFileToDirectory(file84, file92, true);
        org.apache.commons.io.FileUtils.forceDeleteOnExit(file84);
        boolean boolean96 = org.apache.commons.io.FileUtils.isFileNewer(file55, file84);
        boolean boolean97 = org.apache.commons.io.FileUtils.deleteQuietly(file84);
        java.util.Date date98 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean99 = org.apache.commons.io.FileUtils.isFileOlder(file84, date98);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No specified date");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(file27);
        org.junit.Assert.assertEquals(file27.getParent(), "hi!");
        org.junit.Assert.assertEquals(file27.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(file31);
        org.junit.Assert.assertEquals(file31.getParent(), "hi!");
        org.junit.Assert.assertEquals(file31.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(lineIterator35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(file55);
        org.junit.Assert.assertEquals(file55.getParent(), "hi!");
        org.junit.Assert.assertEquals(file55.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNull(file57);
        org.junit.Assert.assertNotNull(file58);
        org.junit.Assert.assertEquals(file58.getParent(), "hi!");
        org.junit.Assert.assertEquals(file58.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(file62);
        org.junit.Assert.assertEquals(file62.getParent(), "hi!");
        org.junit.Assert.assertEquals(file62.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(file66);
        org.junit.Assert.assertEquals(file66.getParent(), "hi!");
        org.junit.Assert.assertEquals(file66.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(lineIterator70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(fileOutputStream74);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 0L + "'", long75 == 0L);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(strArray79);
        org.junit.Assert.assertNotNull(file80);
        org.junit.Assert.assertEquals(file80.getParent(), "hi!");
        org.junit.Assert.assertEquals(file80.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray83);
        org.junit.Assert.assertNotNull(file84);
        org.junit.Assert.assertEquals(file84.getParent(), "hi!");
        org.junit.Assert.assertEquals(file84.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(lineIterator88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + long91 + "' != '" + 0L + "'", long91 == 0L);
        org.junit.Assert.assertNotNull(file92);
        org.junit.Assert.assertEquals(file92.getParent(), "C:\\Users");
        org.junit.Assert.assertEquals(file92.toString(), "C:\\Users\\Mathieu");
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test382");
        java.io.File file0 = null;
        java.nio.charset.Charset charset2 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.writeStringToFile(file0, "C:\\Users\\Mathieu\\AppData\\Local\\Temp\\", charset2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.File.exists()\" because \"file\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test383");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file14 = org.apache.commons.io.FileUtils.getFile(strArray13);
        boolean boolean16 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file7, file14, "");
        org.apache.commons.io.LineIterator lineIterator17 = org.apache.commons.io.FileUtils.lineIterator(file7);
        org.apache.commons.io.FileUtils.writeStringToFile(file7, "C:\\Users\\Mathieu\\AppData\\Local\\Temp\\", false);
        java.nio.charset.Charset charset22 = null;
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "", charset22, true);
        boolean boolean26 = org.apache.commons.io.FileUtils.waitFor(file7, 0);
        org.apache.commons.io.FileUtils.writeStringToFile(file7, "C:\\Users\\Mathieu\\AppData\\Local\\Temp\\");
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter29 = null;
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter30 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<java.io.File> fileItor31 = org.apache.commons.io.FileUtils.iterateFiles(file7, iOFileFilter29, iOFileFilter30);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'directory' is not a directory: hi!\\hi!");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(file14);
        org.junit.Assert.assertEquals(file14.getParent(), "hi!");
        org.junit.Assert.assertEquals(file14.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(lineIterator17);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
    }

    @Test
    public void test384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test384");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean9 = org.apache.commons.io.FileUtils.deleteQuietly(file7);
        java.nio.charset.Charset charset11 = null;
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "", charset11, true);
        java.lang.String[] strArray16 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file17 = org.apache.commons.io.FileUtils.getFile(strArray16);
        java.io.File file18 = org.apache.commons.io.FileUtils.getFile(strArray16);
        java.io.File file19 = org.apache.commons.io.FileUtils.getFile(file7, strArray16);
        java.util.Date date20 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean21 = org.apache.commons.io.FileUtils.isFileNewer(file7, date20);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No specified date");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(file17);
        org.junit.Assert.assertEquals(file17.getParent(), "hi!");
        org.junit.Assert.assertEquals(file17.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(file18);
        org.junit.Assert.assertEquals(file18.getParent(), "hi!");
        org.junit.Assert.assertEquals(file18.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(file19);
        org.junit.Assert.assertEquals(file19.getParent(), "hi!\\hi!\\hi!");
        org.junit.Assert.assertEquals(file19.toString(), "hi!\\hi!\\hi!\\hi!");
    }

    @Test
    public void test385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test385");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean12 = org.apache.commons.io.FileUtils.deleteQuietly(file7);
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset16 = null;
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "", charset16, true);
        java.nio.charset.Charset charset20 = null;
        org.apache.commons.io.FileUtils.writeStringToFile(file7, "", charset20, false);
        long long23 = org.apache.commons.io.FileUtils.sizeOf(file7);
        java.lang.String[] strArray26 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file27 = org.apache.commons.io.FileUtils.getFile(strArray26);
        java.lang.String[] strArray30 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file31 = org.apache.commons.io.FileUtils.getFile(strArray30);
        boolean boolean32 = org.apache.commons.io.FileUtils.isFileOlder(file27, file31);
        boolean boolean34 = org.apache.commons.io.FileUtils.waitFor(file31, (int) '4');
        org.apache.commons.io.LineIterator lineIterator35 = org.apache.commons.io.FileUtils.lineIterator(file31);
        boolean boolean36 = org.apache.commons.io.FileUtils.deleteQuietly(file31);
        org.apache.commons.io.FileUtils.write(file31, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset40 = null;
        org.apache.commons.io.FileUtils.write(file31, (java.lang.CharSequence) "", charset40, true);
        java.nio.charset.Charset charset44 = null;
        org.apache.commons.io.FileUtils.writeStringToFile(file31, "", charset44, false);
        long long47 = org.apache.commons.io.FileUtils.sizeOf(file31);
        org.apache.commons.io.FileUtils.writeStringToFile(file31, "");
        boolean boolean51 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file7, file31, "hi!");
        java.lang.String[] strArray54 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file55 = org.apache.commons.io.FileUtils.getFile(strArray54);
        java.lang.String[] strArray56 = new java.lang.String[] {};
        java.io.File file57 = org.apache.commons.io.FileUtils.getFile(strArray56);
        java.io.File file58 = org.apache.commons.io.FileUtils.getFile(file55, strArray56);
        java.lang.String[] strArray61 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file62 = org.apache.commons.io.FileUtils.getFile(strArray61);
        java.lang.String[] strArray65 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file66 = org.apache.commons.io.FileUtils.getFile(strArray65);
        boolean boolean67 = org.apache.commons.io.FileUtils.isFileOlder(file62, file66);
        boolean boolean69 = org.apache.commons.io.FileUtils.waitFor(file66, (int) '4');
        org.apache.commons.io.LineIterator lineIterator70 = org.apache.commons.io.FileUtils.lineIterator(file66);
        boolean boolean72 = org.apache.commons.io.FileUtils.isFileOlder(file66, (-1L));
        java.io.FileOutputStream fileOutputStream74 = org.apache.commons.io.FileUtils.openOutputStream(file66, false);
        long long75 = org.apache.commons.io.FileUtils.copyFile(file55, (java.io.OutputStream) fileOutputStream74);
        boolean boolean76 = org.apache.commons.io.FileUtils.isFileOlder(file7, file55);
        java.math.BigInteger bigInteger77 = org.apache.commons.io.FileUtils.sizeOfAsBigInteger(file7);
        java.nio.charset.Charset charset79 = null;
        org.apache.commons.io.FileUtils.writeStringToFile(file7, "1048576 EB", charset79, false);
        java.lang.String[] strArray84 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file85 = org.apache.commons.io.FileUtils.getFile(strArray84);
        java.lang.String[] strArray88 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file89 = org.apache.commons.io.FileUtils.getFile(strArray88);
        boolean boolean90 = org.apache.commons.io.FileUtils.isFileOlder(file85, file89);
        java.lang.String str91 = org.apache.commons.io.FileUtils.readFileToString(file85);
        java.util.Collection<java.lang.String> strCollection92 = null;
        org.apache.commons.io.FileUtils.writeLines(file85, strCollection92, false);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.copyFile(file7, file85, false);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Source 'hi!\\hi!' and destination 'hi!\\hi!' are the same");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(file27);
        org.junit.Assert.assertEquals(file27.getParent(), "hi!");
        org.junit.Assert.assertEquals(file27.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(file31);
        org.junit.Assert.assertEquals(file31.getParent(), "hi!");
        org.junit.Assert.assertEquals(file31.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(lineIterator35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(file55);
        org.junit.Assert.assertEquals(file55.getParent(), "hi!");
        org.junit.Assert.assertEquals(file55.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNull(file57);
        org.junit.Assert.assertNotNull(file58);
        org.junit.Assert.assertEquals(file58.getParent(), "hi!");
        org.junit.Assert.assertEquals(file58.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(file62);
        org.junit.Assert.assertEquals(file62.getParent(), "hi!");
        org.junit.Assert.assertEquals(file62.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(file66);
        org.junit.Assert.assertEquals(file66.getParent(), "hi!");
        org.junit.Assert.assertEquals(file66.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(lineIterator70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(fileOutputStream74);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 0L + "'", long75 == 0L);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(bigInteger77);
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertNotNull(file85);
        org.junit.Assert.assertEquals(file85.getParent(), "hi!");
        org.junit.Assert.assertEquals(file85.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray88);
        org.junit.Assert.assertNotNull(file89);
        org.junit.Assert.assertEquals(file89.getParent(), "hi!");
        org.junit.Assert.assertEquals(file89.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "1048576 EB" + "'", str91, "1048576 EB");
    }

    @Test
    public void test386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test386");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file14 = org.apache.commons.io.FileUtils.getFile(strArray13);
        boolean boolean16 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file7, file14, "");
        java.io.FileInputStream fileInputStream17 = org.apache.commons.io.FileUtils.openInputStream(file14);
        java.lang.String[] strArray20 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file21 = org.apache.commons.io.FileUtils.getFile(strArray20);
        java.lang.String[] strArray22 = new java.lang.String[] {};
        java.io.File file23 = org.apache.commons.io.FileUtils.getFile(strArray22);
        java.io.File file24 = org.apache.commons.io.FileUtils.getFile(file21, strArray22);
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file28 = org.apache.commons.io.FileUtils.getFile(strArray27);
        java.lang.String[] strArray31 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file32 = org.apache.commons.io.FileUtils.getFile(strArray31);
        boolean boolean33 = org.apache.commons.io.FileUtils.isFileOlder(file28, file32);
        boolean boolean35 = org.apache.commons.io.FileUtils.waitFor(file32, (int) '4');
        org.apache.commons.io.LineIterator lineIterator36 = org.apache.commons.io.FileUtils.lineIterator(file32);
        boolean boolean37 = org.apache.commons.io.FileUtils.deleteQuietly(file32);
        org.apache.commons.io.FileUtils.write(file32, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset41 = null;
        org.apache.commons.io.FileUtils.write(file32, (java.lang.CharSequence) "", charset41, true);
        java.nio.charset.Charset charset45 = null;
        org.apache.commons.io.FileUtils.writeStringToFile(file32, "", charset45, false);
        java.lang.String[] strArray50 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file51 = org.apache.commons.io.FileUtils.getFile(strArray50);
        java.lang.String[] strArray54 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file55 = org.apache.commons.io.FileUtils.getFile(strArray54);
        boolean boolean56 = org.apache.commons.io.FileUtils.isFileOlder(file51, file55);
        boolean boolean58 = org.apache.commons.io.FileUtils.waitFor(file55, (int) '4');
        java.lang.String[] strArray61 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file62 = org.apache.commons.io.FileUtils.getFile(strArray61);
        boolean boolean64 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file55, file62, "");
        java.io.FileOutputStream fileOutputStream66 = org.apache.commons.io.FileUtils.openOutputStream(file55, false);
        java.lang.String[] strArray73 = new java.lang.String[] { "", "1048576 EB", "C:\\Users\\Mathieu\\AppData\\Local\\Temp\\", "C:\\Users\\Mathieu", "", "1048576 EB" };
        java.util.ArrayList<java.lang.String> strList74 = new java.util.ArrayList<java.lang.String>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList74, strArray73);
        org.apache.commons.io.FileUtils.writeLines(file55, (java.util.Collection<java.lang.String>) strList74, "1 GB", false);
        org.apache.commons.io.FileUtils.writeLines(file32, (java.util.Collection<java.lang.String>) strList74, "35 bytes");
        org.apache.commons.io.FileUtils.writeLines(file24, (java.util.Collection<java.lang.String>) strList74, "1 GB1048576 EB1 GBC:\\Users\\Mathieu\\AppData\\Local\\Temp\\1 GBC:\\Users\\Mathieu1 GB1 GB1048576 EB1 GB");
        org.apache.commons.io.FileUtils.copyToFile((java.io.InputStream) fileInputStream17, file24);
        java.nio.charset.Charset charset84 = null;
        java.lang.String str85 = org.apache.commons.io.FileUtils.readFileToString(file24, charset84);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(file14);
        org.junit.Assert.assertEquals(file14.getParent(), "hi!");
        org.junit.Assert.assertEquals(file14.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(fileInputStream17);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(file21);
        org.junit.Assert.assertEquals(file21.getParent(), "hi!");
        org.junit.Assert.assertEquals(file21.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNull(file23);
        org.junit.Assert.assertNotNull(file24);
        org.junit.Assert.assertEquals(file24.getParent(), "hi!");
        org.junit.Assert.assertEquals(file24.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(file28);
        org.junit.Assert.assertEquals(file28.getParent(), "hi!");
        org.junit.Assert.assertEquals(file28.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(file32);
        org.junit.Assert.assertEquals(file32.getParent(), "hi!");
        org.junit.Assert.assertEquals(file32.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(lineIterator36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(file51);
        org.junit.Assert.assertEquals(file51.getParent(), "hi!");
        org.junit.Assert.assertEquals(file51.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(file55);
        org.junit.Assert.assertEquals(file55.getParent(), "hi!");
        org.junit.Assert.assertEquals(file55.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(file62);
        org.junit.Assert.assertEquals(file62.getParent(), "hi!");
        org.junit.Assert.assertEquals(file62.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(fileOutputStream66);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "" + "'", str85, "");
    }

    @Test
    public void test387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test387");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean12 = org.apache.commons.io.FileUtils.deleteQuietly(file7);
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset16 = null;
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "", charset16, true);
        java.nio.charset.Charset charset20 = null;
        org.apache.commons.io.FileUtils.writeStringToFile(file7, "", charset20, false);
        long long23 = org.apache.commons.io.FileUtils.sizeOf(file7);
        org.apache.commons.io.FileUtils.writeStringToFile(file7, "");
        java.math.BigInteger bigInteger26 = org.apache.commons.io.FileUtils.sizeOfAsBigInteger(file7);
        java.lang.Class<?> wildcardClass27 = bigInteger26.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(bigInteger26);
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test388");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        java.lang.String[] strArray11 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file12 = org.apache.commons.io.FileUtils.getFile(strArray11);
        java.lang.String[] strArray15 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file16 = org.apache.commons.io.FileUtils.getFile(strArray15);
        boolean boolean17 = org.apache.commons.io.FileUtils.isFileOlder(file12, file16);
        boolean boolean19 = org.apache.commons.io.FileUtils.waitFor(file16, (int) '4');
        org.apache.commons.io.LineIterator lineIterator20 = org.apache.commons.io.FileUtils.lineIterator(file16);
        boolean boolean21 = org.apache.commons.io.FileUtils.deleteQuietly(file16);
        org.apache.commons.io.FileUtils.write(file16, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset25 = null;
        org.apache.commons.io.FileUtils.write(file16, (java.lang.CharSequence) "", charset25, true);
        java.nio.charset.Charset charset29 = null;
        org.apache.commons.io.FileUtils.writeStringToFile(file16, "", charset29, false);
        long long32 = org.apache.commons.io.FileUtils.sizeOf(file16);
        java.lang.String[] strArray35 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file36 = org.apache.commons.io.FileUtils.getFile(strArray35);
        java.lang.String[] strArray39 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file40 = org.apache.commons.io.FileUtils.getFile(strArray39);
        boolean boolean41 = org.apache.commons.io.FileUtils.isFileOlder(file36, file40);
        boolean boolean43 = org.apache.commons.io.FileUtils.waitFor(file40, (int) '4');
        org.apache.commons.io.LineIterator lineIterator44 = org.apache.commons.io.FileUtils.lineIterator(file40);
        boolean boolean45 = org.apache.commons.io.FileUtils.deleteQuietly(file40);
        org.apache.commons.io.FileUtils.write(file40, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset49 = null;
        org.apache.commons.io.FileUtils.write(file40, (java.lang.CharSequence) "", charset49, true);
        java.nio.charset.Charset charset53 = null;
        org.apache.commons.io.FileUtils.writeStringToFile(file40, "", charset53, false);
        long long56 = org.apache.commons.io.FileUtils.sizeOf(file40);
        org.apache.commons.io.FileUtils.writeStringToFile(file40, "");
        boolean boolean60 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file16, file40, "hi!");
        java.lang.String[] strArray63 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file64 = org.apache.commons.io.FileUtils.getFile(strArray63);
        java.lang.String[] strArray65 = new java.lang.String[] {};
        java.io.File file66 = org.apache.commons.io.FileUtils.getFile(strArray65);
        java.io.File file67 = org.apache.commons.io.FileUtils.getFile(file64, strArray65);
        java.lang.String[] strArray70 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file71 = org.apache.commons.io.FileUtils.getFile(strArray70);
        java.lang.String[] strArray74 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file75 = org.apache.commons.io.FileUtils.getFile(strArray74);
        boolean boolean76 = org.apache.commons.io.FileUtils.isFileOlder(file71, file75);
        boolean boolean78 = org.apache.commons.io.FileUtils.waitFor(file75, (int) '4');
        org.apache.commons.io.LineIterator lineIterator79 = org.apache.commons.io.FileUtils.lineIterator(file75);
        boolean boolean81 = org.apache.commons.io.FileUtils.isFileOlder(file75, (-1L));
        java.io.FileOutputStream fileOutputStream83 = org.apache.commons.io.FileUtils.openOutputStream(file75, false);
        long long84 = org.apache.commons.io.FileUtils.copyFile(file64, (java.io.OutputStream) fileOutputStream83);
        boolean boolean85 = org.apache.commons.io.FileUtils.isFileOlder(file16, file64);
        java.math.BigInteger bigInteger86 = org.apache.commons.io.FileUtils.sizeOfAsBigInteger(file16);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.copyFile(file3, file16, true);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Source 'hi!\\hi!' and destination 'hi!\\hi!' are the same");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(file12);
        org.junit.Assert.assertEquals(file12.getParent(), "hi!");
        org.junit.Assert.assertEquals(file12.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(file16);
        org.junit.Assert.assertEquals(file16.getParent(), "hi!");
        org.junit.Assert.assertEquals(file16.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(lineIterator20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(file36);
        org.junit.Assert.assertEquals(file36.getParent(), "hi!");
        org.junit.Assert.assertEquals(file36.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(file40);
        org.junit.Assert.assertEquals(file40.getParent(), "hi!");
        org.junit.Assert.assertEquals(file40.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(lineIterator44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(file64);
        org.junit.Assert.assertEquals(file64.getParent(), "hi!");
        org.junit.Assert.assertEquals(file64.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNull(file66);
        org.junit.Assert.assertNotNull(file67);
        org.junit.Assert.assertEquals(file67.getParent(), "hi!");
        org.junit.Assert.assertEquals(file67.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertNotNull(file71);
        org.junit.Assert.assertEquals(file71.getParent(), "hi!");
        org.junit.Assert.assertEquals(file71.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(file75);
        org.junit.Assert.assertEquals(file75.getParent(), "hi!");
        org.junit.Assert.assertEquals(file75.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(lineIterator79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(fileOutputStream83);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 0L + "'", long84 == 0L);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(bigInteger86);
    }

    @Test
    public void test389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test389");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean13 = org.apache.commons.io.FileUtils.isFileOlder(file7, (-1L));
        java.nio.charset.Charset charset14 = null;
        java.lang.String str15 = org.apache.commons.io.FileUtils.readFileToString(file7, charset14);
        org.apache.commons.io.FileUtils.writeStringToFile(file7, "hi!", true);
        java.lang.String[] strArray21 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file22 = org.apache.commons.io.FileUtils.getFile(strArray21);
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file26 = org.apache.commons.io.FileUtils.getFile(strArray25);
        boolean boolean27 = org.apache.commons.io.FileUtils.isFileOlder(file22, file26);
        boolean boolean29 = org.apache.commons.io.FileUtils.waitFor(file26, (int) '4');
        org.apache.commons.io.LineIterator lineIterator30 = org.apache.commons.io.FileUtils.lineIterator(file26);
        boolean boolean31 = org.apache.commons.io.FileUtils.deleteQuietly(file26);
        org.apache.commons.io.FileUtils.writeStringToFile(file26, "");
        java.lang.String[] strArray36 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file37 = org.apache.commons.io.FileUtils.getFile(strArray36);
        java.lang.String[] strArray40 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file41 = org.apache.commons.io.FileUtils.getFile(strArray40);
        boolean boolean42 = org.apache.commons.io.FileUtils.isFileOlder(file37, file41);
        boolean boolean44 = org.apache.commons.io.FileUtils.waitFor(file41, (int) '4');
        java.lang.String[] strArray47 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file48 = org.apache.commons.io.FileUtils.getFile(strArray47);
        boolean boolean50 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file41, file48, "");
        boolean boolean51 = org.apache.commons.io.FileUtils.isFileNewer(file26, file41);
        boolean boolean52 = org.apache.commons.io.FileUtils.isSymlink(file26);
        boolean boolean53 = org.apache.commons.io.FileUtils.isFileOlder(file7, file26);
        java.lang.String[] strArray56 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file57 = org.apache.commons.io.FileUtils.getFile(strArray56);
        java.lang.String[] strArray60 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file61 = org.apache.commons.io.FileUtils.getFile(strArray60);
        boolean boolean62 = org.apache.commons.io.FileUtils.isFileOlder(file57, file61);
        boolean boolean64 = org.apache.commons.io.FileUtils.waitFor(file61, (int) '4');
        org.apache.commons.io.LineIterator lineIterator65 = org.apache.commons.io.FileUtils.lineIterator(file61);
        boolean boolean66 = org.apache.commons.io.FileUtils.deleteQuietly(file61);
        org.apache.commons.io.FileUtils.write(file61, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset70 = null;
        org.apache.commons.io.FileUtils.write(file61, (java.lang.CharSequence) "", charset70, true);
        java.nio.charset.Charset charset74 = null;
        org.apache.commons.io.FileUtils.writeStringToFile(file61, "", charset74, false);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.moveToDirectory(file26, file61, false);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Destination 'hi!\\hi!' is not a directory");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(file22);
        org.junit.Assert.assertEquals(file22.getParent(), "hi!");
        org.junit.Assert.assertEquals(file22.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(file26);
        org.junit.Assert.assertEquals(file26.getParent(), "hi!");
        org.junit.Assert.assertEquals(file26.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(lineIterator30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(file37);
        org.junit.Assert.assertEquals(file37.getParent(), "hi!");
        org.junit.Assert.assertEquals(file37.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(file41);
        org.junit.Assert.assertEquals(file41.getParent(), "hi!");
        org.junit.Assert.assertEquals(file41.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(file48);
        org.junit.Assert.assertEquals(file48.getParent(), "hi!");
        org.junit.Assert.assertEquals(file48.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(file57);
        org.junit.Assert.assertEquals(file57.getParent(), "hi!");
        org.junit.Assert.assertEquals(file57.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(file61);
        org.junit.Assert.assertEquals(file61.getParent(), "hi!");
        org.junit.Assert.assertEquals(file61.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(lineIterator65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test390");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean13 = org.apache.commons.io.FileUtils.isFileOlder(file7, (-1L));
        long long14 = org.apache.commons.io.FileUtils.sizeOf(file7);
        java.io.File file15 = org.apache.commons.io.FileUtils.getUserDirectory();
        org.apache.commons.io.FileUtils.copyFileToDirectory(file7, file15, true);
        java.lang.String[] strArray20 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file21 = org.apache.commons.io.FileUtils.getFile(strArray20);
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file25 = org.apache.commons.io.FileUtils.getFile(strArray24);
        boolean boolean26 = org.apache.commons.io.FileUtils.isFileOlder(file21, file25);
        boolean boolean28 = org.apache.commons.io.FileUtils.waitFor(file25, (int) '4');
        java.lang.String[] strArray31 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file32 = org.apache.commons.io.FileUtils.getFile(strArray31);
        boolean boolean34 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file25, file32, "");
        java.lang.String[] strArray37 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file38 = org.apache.commons.io.FileUtils.getFile(strArray37);
        java.lang.String[] strArray41 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file42 = org.apache.commons.io.FileUtils.getFile(strArray41);
        boolean boolean43 = org.apache.commons.io.FileUtils.isFileOlder(file38, file42);
        boolean boolean45 = org.apache.commons.io.FileUtils.waitFor(file42, (int) '4');
        org.apache.commons.io.LineIterator lineIterator46 = org.apache.commons.io.FileUtils.lineIterator(file42);
        boolean boolean48 = org.apache.commons.io.FileUtils.isFileOlder(file42, (-1L));
        byte[] byteArray49 = new byte[] {};
        org.apache.commons.io.FileUtils.writeByteArrayToFile(file42, byteArray49);
        org.apache.commons.io.FileUtils.writeByteArrayToFile(file32, byteArray49);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.writeByteArrayToFile(file15, byteArray49, 10, (int) (short) 10, false);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: File 'C:\\Users\\Mathieu' exists but is a directory");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(file15);
        org.junit.Assert.assertEquals(file15.getParent(), "C:\\Users");
        org.junit.Assert.assertEquals(file15.toString(), "C:\\Users\\Mathieu");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(file21);
        org.junit.Assert.assertEquals(file21.getParent(), "hi!");
        org.junit.Assert.assertEquals(file21.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(file25);
        org.junit.Assert.assertEquals(file25.getParent(), "hi!");
        org.junit.Assert.assertEquals(file25.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(file32);
        org.junit.Assert.assertEquals(file32.getParent(), "hi!");
        org.junit.Assert.assertEquals(file32.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(file38);
        org.junit.Assert.assertEquals(file38.getParent(), "hi!");
        org.junit.Assert.assertEquals(file38.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(file42);
        org.junit.Assert.assertEquals(file42.getParent(), "hi!");
        org.junit.Assert.assertEquals(file42.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(lineIterator46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
    }

    @Test
    public void test391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test391");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        java.lang.String str9 = org.apache.commons.io.FileUtils.readFileToString(file3);
        org.apache.commons.io.FileUtils.writeStringToFile(file3, "", false);
        boolean boolean14 = org.apache.commons.io.FileUtils.isFileNewer(file3, 0L);
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file18 = org.apache.commons.io.FileUtils.getFile(strArray17);
        java.lang.String[] strArray21 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file22 = org.apache.commons.io.FileUtils.getFile(strArray21);
        boolean boolean23 = org.apache.commons.io.FileUtils.isFileOlder(file18, file22);
        boolean boolean25 = org.apache.commons.io.FileUtils.waitFor(file22, (int) '4');
        org.apache.commons.io.LineIterator lineIterator26 = org.apache.commons.io.FileUtils.lineIterator(file22);
        boolean boolean27 = org.apache.commons.io.FileUtils.deleteQuietly(file22);
        org.apache.commons.io.FileUtils.writeStringToFile(file22, "");
        java.lang.String[] strArray32 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file33 = org.apache.commons.io.FileUtils.getFile(strArray32);
        java.lang.String[] strArray36 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file37 = org.apache.commons.io.FileUtils.getFile(strArray36);
        boolean boolean38 = org.apache.commons.io.FileUtils.isFileOlder(file33, file37);
        boolean boolean40 = org.apache.commons.io.FileUtils.waitFor(file37, (int) '4');
        java.lang.String[] strArray43 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file44 = org.apache.commons.io.FileUtils.getFile(strArray43);
        boolean boolean46 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file37, file44, "");
        boolean boolean47 = org.apache.commons.io.FileUtils.isFileNewer(file22, file37);
        boolean boolean48 = org.apache.commons.io.FileUtils.isSymlink(file22);
        org.apache.commons.io.FileUtils.writeStringToFile(file22, "C:\\Users\\Mathieu\\AppData\\Local\\Temp\\", true);
        java.io.FileFilter fileFilter52 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.copyDirectory(file3, file22, fileFilter52);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Source 'hi!\\hi!' exists but is not a directory");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(file18);
        org.junit.Assert.assertEquals(file18.getParent(), "hi!");
        org.junit.Assert.assertEquals(file18.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(file22);
        org.junit.Assert.assertEquals(file22.getParent(), "hi!");
        org.junit.Assert.assertEquals(file22.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(lineIterator26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(file33);
        org.junit.Assert.assertEquals(file33.getParent(), "hi!");
        org.junit.Assert.assertEquals(file33.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(file37);
        org.junit.Assert.assertEquals(file37.getParent(), "hi!");
        org.junit.Assert.assertEquals(file37.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(file44);
        org.junit.Assert.assertEquals(file44.getParent(), "hi!");
        org.junit.Assert.assertEquals(file44.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test392");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        boolean boolean5 = org.apache.commons.io.FileUtils.waitFor(file3, 100);
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file9 = org.apache.commons.io.FileUtils.getFile(strArray8);
        java.lang.String[] strArray12 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file13 = org.apache.commons.io.FileUtils.getFile(strArray12);
        boolean boolean14 = org.apache.commons.io.FileUtils.isFileOlder(file9, file13);
        boolean boolean16 = org.apache.commons.io.FileUtils.waitFor(file13, (int) '4');
        org.apache.commons.io.LineIterator lineIterator17 = org.apache.commons.io.FileUtils.lineIterator(file13);
        boolean boolean18 = org.apache.commons.io.FileUtils.deleteQuietly(file13);
        org.apache.commons.io.FileUtils.write(file13, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset22 = null;
        org.apache.commons.io.FileUtils.write(file13, (java.lang.CharSequence) "", charset22, true);
        java.nio.charset.Charset charset26 = null;
        org.apache.commons.io.FileUtils.writeStringToFile(file13, "", charset26, false);
        java.lang.String[] strArray31 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file32 = org.apache.commons.io.FileUtils.getFile(strArray31);
        java.lang.String[] strArray35 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file36 = org.apache.commons.io.FileUtils.getFile(strArray35);
        boolean boolean37 = org.apache.commons.io.FileUtils.isFileOlder(file32, file36);
        boolean boolean39 = org.apache.commons.io.FileUtils.waitFor(file36, (int) '4');
        org.apache.commons.io.LineIterator lineIterator40 = org.apache.commons.io.FileUtils.lineIterator(file36);
        boolean boolean41 = org.apache.commons.io.FileUtils.deleteQuietly(file36);
        org.apache.commons.io.FileUtils.write(file36, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset45 = null;
        org.apache.commons.io.FileUtils.write(file36, (java.lang.CharSequence) "", charset45, true);
        java.nio.charset.Charset charset49 = null;
        org.apache.commons.io.FileUtils.writeStringToFile(file36, "", charset49, false);
        long long52 = org.apache.commons.io.FileUtils.sizeOf(file36);
        org.apache.commons.io.FileUtils.writeStringToFile(file36, "");
        boolean boolean55 = org.apache.commons.io.FileUtils.isFileNewer(file13, file36);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.moveFile(file3, file13);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.io.FileExistsException; message: Destination 'hi!\\hi!' already exists");
        } catch (org.apache.commons.io.FileExistsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(file9);
        org.junit.Assert.assertEquals(file9.getParent(), "hi!");
        org.junit.Assert.assertEquals(file9.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(file13);
        org.junit.Assert.assertEquals(file13.getParent(), "hi!");
        org.junit.Assert.assertEquals(file13.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(lineIterator17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(file32);
        org.junit.Assert.assertEquals(file32.getParent(), "hi!");
        org.junit.Assert.assertEquals(file32.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(file36);
        org.junit.Assert.assertEquals(file36.getParent(), "hi!");
        org.junit.Assert.assertEquals(file36.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(lineIterator40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test393");
        java.net.URL[] uRLArray0 = new java.net.URL[] {};
        java.io.File[] fileArray1 = org.apache.commons.io.FileUtils.toFiles(uRLArray0);
        java.net.URL[] uRLArray2 = org.apache.commons.io.FileUtils.toURLs(fileArray1);
        java.net.URL[] uRLArray3 = org.apache.commons.io.FileUtils.toURLs(fileArray1);
        org.junit.Assert.assertNotNull(uRLArray0);
        org.junit.Assert.assertNotNull(fileArray1);
        org.junit.Assert.assertNotNull(uRLArray2);
        org.junit.Assert.assertNotNull(uRLArray3);
    }

    @Test
    public void test394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test394");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean12 = org.apache.commons.io.FileUtils.deleteQuietly(file7);
        java.lang.String[] strArray16 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file17 = org.apache.commons.io.FileUtils.getFile(strArray16);
        java.lang.String[] strArray20 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file21 = org.apache.commons.io.FileUtils.getFile(strArray20);
        boolean boolean22 = org.apache.commons.io.FileUtils.isFileOlder(file17, file21);
        boolean boolean24 = org.apache.commons.io.FileUtils.waitFor(file21, (int) '4');
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file28 = org.apache.commons.io.FileUtils.getFile(strArray27);
        boolean boolean30 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file21, file28, "");
        org.apache.commons.io.LineIterator lineIterator31 = org.apache.commons.io.FileUtils.lineIterator(file21);
        org.apache.commons.io.FileUtils.writeStringToFile(file21, "C:\\Users\\Mathieu\\AppData\\Local\\Temp\\", false);
        java.lang.String[] strArray37 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file38 = org.apache.commons.io.FileUtils.getFile(strArray37);
        java.lang.String[] strArray41 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file42 = org.apache.commons.io.FileUtils.getFile(strArray41);
        boolean boolean43 = org.apache.commons.io.FileUtils.isFileOlder(file38, file42);
        java.lang.String str44 = org.apache.commons.io.FileUtils.readFileToString(file38);
        java.lang.String[] strArray47 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file48 = org.apache.commons.io.FileUtils.getFile(strArray47);
        java.io.File file49 = org.apache.commons.io.FileUtils.getFile(file38, strArray47);
        boolean boolean51 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file21, file49, "-1 bytes");
        java.lang.String[] strArray54 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file55 = org.apache.commons.io.FileUtils.getFile(strArray54);
        java.lang.String[] strArray58 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file59 = org.apache.commons.io.FileUtils.getFile(strArray58);
        boolean boolean60 = org.apache.commons.io.FileUtils.isFileOlder(file55, file59);
        boolean boolean62 = org.apache.commons.io.FileUtils.waitFor(file59, (int) '4');
        org.apache.commons.io.LineIterator lineIterator63 = org.apache.commons.io.FileUtils.lineIterator(file59);
        boolean boolean64 = org.apache.commons.io.FileUtils.deleteQuietly(file59);
        org.apache.commons.io.FileUtils.write(file59, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset68 = null;
        org.apache.commons.io.FileUtils.write(file59, (java.lang.CharSequence) "", charset68, true);
        java.nio.charset.Charset charset72 = null;
        org.apache.commons.io.FileUtils.writeStringToFile(file59, "", charset72, false);
        long long75 = org.apache.commons.io.FileUtils.sizeOf(file59);
        org.apache.commons.io.FileUtils.writeStringToFile(file59, "");
        java.nio.charset.Charset charset78 = null;
        java.util.List<java.lang.String> strList79 = org.apache.commons.io.FileUtils.readLines(file59, charset78);
        org.apache.commons.io.FileUtils.writeLines(file21, (java.util.Collection<java.lang.String>) strList79, "32 bytes");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.writeLines(file7, "1048576 EB", (java.util.Collection<java.lang.String>) strList79, false);
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: 1048576 EB");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(file17);
        org.junit.Assert.assertEquals(file17.getParent(), "hi!");
        org.junit.Assert.assertEquals(file17.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(file21);
        org.junit.Assert.assertEquals(file21.getParent(), "hi!");
        org.junit.Assert.assertEquals(file21.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(file28);
        org.junit.Assert.assertEquals(file28.getParent(), "hi!");
        org.junit.Assert.assertEquals(file28.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(lineIterator31);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(file38);
        org.junit.Assert.assertEquals(file38.getParent(), "hi!");
        org.junit.Assert.assertEquals(file38.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(file42);
        org.junit.Assert.assertEquals(file42.getParent(), "hi!");
        org.junit.Assert.assertEquals(file42.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "C:\\Users\\Mathieu\\AppData\\Local\\Temp\\" + "'", str44, "C:\\Users\\Mathieu\\AppData\\Local\\Temp\\");
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(file48);
        org.junit.Assert.assertEquals(file48.getParent(), "hi!");
        org.junit.Assert.assertEquals(file48.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(file49);
        org.junit.Assert.assertEquals(file49.getParent(), "hi!\\hi!\\hi!");
        org.junit.Assert.assertEquals(file49.toString(), "hi!\\hi!\\hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(file55);
        org.junit.Assert.assertEquals(file55.getParent(), "hi!");
        org.junit.Assert.assertEquals(file55.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(file59);
        org.junit.Assert.assertEquals(file59.getParent(), "hi!");
        org.junit.Assert.assertEquals(file59.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(lineIterator63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 0L + "'", long75 == 0L);
        org.junit.Assert.assertNotNull(strList79);
    }

    @Test
    public void test395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test395");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean13 = org.apache.commons.io.FileUtils.isFileOlder(file7, (-1L));
        byte[] byteArray14 = new byte[] {};
        org.apache.commons.io.FileUtils.writeByteArrayToFile(file7, byteArray14);
        java.io.FileOutputStream fileOutputStream16 = org.apache.commons.io.FileUtils.openOutputStream(file7);
        java.math.BigInteger bigInteger17 = org.apache.commons.io.FileUtils.sizeOfAsBigInteger(file7);
        java.lang.String[] strArray20 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file21 = org.apache.commons.io.FileUtils.getFile(strArray20);
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file25 = org.apache.commons.io.FileUtils.getFile(strArray24);
        boolean boolean26 = org.apache.commons.io.FileUtils.isFileOlder(file21, file25);
        boolean boolean28 = org.apache.commons.io.FileUtils.waitFor(file25, (int) '4');
        org.apache.commons.io.LineIterator lineIterator29 = org.apache.commons.io.FileUtils.lineIterator(file25);
        boolean boolean31 = org.apache.commons.io.FileUtils.isFileOlder(file25, (-1L));
        java.nio.charset.Charset charset32 = null;
        java.lang.String str33 = org.apache.commons.io.FileUtils.readFileToString(file25, charset32);
        java.io.FileOutputStream fileOutputStream35 = org.apache.commons.io.FileUtils.openOutputStream(file25, false);
        java.io.FileOutputStream fileOutputStream37 = org.apache.commons.io.FileUtils.openOutputStream(file25, true);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean38 = org.apache.commons.io.FileUtils.directoryContains(file7, file25);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Not a directory: hi!\\hi!");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(fileOutputStream16);
        org.junit.Assert.assertNotNull(bigInteger17);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(file21);
        org.junit.Assert.assertEquals(file21.getParent(), "hi!");
        org.junit.Assert.assertEquals(file21.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(file25);
        org.junit.Assert.assertEquals(file25.getParent(), "hi!");
        org.junit.Assert.assertEquals(file25.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(lineIterator29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(fileOutputStream35);
        org.junit.Assert.assertNotNull(fileOutputStream37);
    }

    @Test
    public void test396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test396");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean9 = org.apache.commons.io.FileUtils.deleteQuietly(file7);
        java.lang.String[] strArray12 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file13 = org.apache.commons.io.FileUtils.getFile(strArray12);
        java.lang.String[] strArray16 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file17 = org.apache.commons.io.FileUtils.getFile(strArray16);
        boolean boolean18 = org.apache.commons.io.FileUtils.isFileOlder(file13, file17);
        boolean boolean20 = org.apache.commons.io.FileUtils.waitFor(file17, (int) '4');
        java.lang.String[] strArray23 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file24 = org.apache.commons.io.FileUtils.getFile(strArray23);
        boolean boolean26 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file17, file24, "");
        org.apache.commons.io.LineIterator lineIterator27 = org.apache.commons.io.FileUtils.lineIterator(file17);
        org.apache.commons.io.FileUtils.writeStringToFile(file17, "C:\\Users\\Mathieu\\AppData\\Local\\Temp\\", false);
        java.nio.charset.Charset charset32 = null;
        org.apache.commons.io.FileUtils.write(file17, (java.lang.CharSequence) "", charset32, true);
        boolean boolean36 = org.apache.commons.io.FileUtils.waitFor(file17, 0);
        boolean boolean37 = org.apache.commons.io.FileUtils.isFileOlder(file7, file17);
        java.lang.String[] strArray40 = new java.lang.String[] { "C:\\Users\\Mathieu\\AppData\\Local\\Temp\\", "" };
        java.util.ArrayList<java.lang.String> strList41 = new java.util.ArrayList<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList41, strArray40);
        org.apache.commons.io.FileUtils.writeLines(file7, (java.util.Collection<java.lang.String>) strList41);
        java.lang.String[] strArray47 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file48 = org.apache.commons.io.FileUtils.getFile(strArray47);
        java.lang.String[] strArray51 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file52 = org.apache.commons.io.FileUtils.getFile(strArray51);
        boolean boolean53 = org.apache.commons.io.FileUtils.isFileOlder(file48, file52);
        java.lang.String str54 = org.apache.commons.io.FileUtils.readFileToString(file48);
        java.nio.charset.Charset charset55 = null;
        java.lang.String str56 = org.apache.commons.io.FileUtils.readFileToString(file48, charset55);
        java.math.BigInteger bigInteger57 = org.apache.commons.io.FileUtils.sizeOfAsBigInteger(file48);
        java.nio.charset.Charset charset58 = null;
        java.util.List<java.lang.String> strList59 = org.apache.commons.io.FileUtils.readLines(file48, charset58);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.writeLines(file7, "hi!", (java.util.Collection<java.lang.String>) strList59, "C:\\Users\\Mathieu", true);
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: hi!");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(file13);
        org.junit.Assert.assertEquals(file13.getParent(), "hi!");
        org.junit.Assert.assertEquals(file13.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(file17);
        org.junit.Assert.assertEquals(file17.getParent(), "hi!");
        org.junit.Assert.assertEquals(file17.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(file24);
        org.junit.Assert.assertEquals(file24.getParent(), "hi!");
        org.junit.Assert.assertEquals(file24.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(lineIterator27);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(file48);
        org.junit.Assert.assertEquals(file48.getParent(), "hi!");
        org.junit.Assert.assertEquals(file48.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(file52);
        org.junit.Assert.assertEquals(file52.getParent(), "hi!");
        org.junit.Assert.assertEquals(file52.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "C:\\Users\\Mathieu\\AppData\\Local\\Temp\\\r\n\r\n" + "'", str54, "C:\\Users\\Mathieu\\AppData\\Local\\Temp\\\r\n\r\n");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "C:\\Users\\Mathieu\\AppData\\Local\\Temp\\\r\n\r\n" + "'", str56, "C:\\Users\\Mathieu\\AppData\\Local\\Temp\\\r\n\r\n");
        org.junit.Assert.assertNotNull(bigInteger57);
        org.junit.Assert.assertNotNull(strList59);
    }

    @Test
    public void test397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test397");
        java.io.File file0 = org.apache.commons.io.FileUtils.getTempDirectory();
        java.lang.String[] strArray3 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file4 = org.apache.commons.io.FileUtils.getFile(strArray3);
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file8 = org.apache.commons.io.FileUtils.getFile(strArray7);
        boolean boolean9 = org.apache.commons.io.FileUtils.isFileOlder(file4, file8);
        boolean boolean11 = org.apache.commons.io.FileUtils.waitFor(file8, (int) '4');
        org.apache.commons.io.LineIterator lineIterator12 = org.apache.commons.io.FileUtils.lineIterator(file8);
        boolean boolean14 = org.apache.commons.io.FileUtils.isFileOlder(file8, (-1L));
        java.nio.charset.Charset charset15 = null;
        java.lang.String str16 = org.apache.commons.io.FileUtils.readFileToString(file8, charset15);
        java.io.FileOutputStream fileOutputStream18 = org.apache.commons.io.FileUtils.openOutputStream(file8, false);
        java.io.FileOutputStream fileOutputStream20 = org.apache.commons.io.FileUtils.openOutputStream(file8, true);
        boolean boolean21 = org.apache.commons.io.FileUtils.isFileOlder(file0, file8);
        java.lang.String[] strArray28 = new java.lang.String[] { "C:\\Users\\Mathieu", "C:\\Users\\Mathieu", "", "1 GB", "hi!", "" };
        java.util.Iterator<java.io.File> fileItor30 = org.apache.commons.io.FileUtils.iterateFiles(file0, strArray28, true);
        java.lang.String[] strArray33 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file34 = org.apache.commons.io.FileUtils.getFile(strArray33);
        java.lang.String[] strArray37 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file38 = org.apache.commons.io.FileUtils.getFile(strArray37);
        boolean boolean39 = org.apache.commons.io.FileUtils.isFileOlder(file34, file38);
        java.lang.String str40 = org.apache.commons.io.FileUtils.readFileToString(file34);
        java.nio.charset.Charset charset41 = null;
        java.lang.String str42 = org.apache.commons.io.FileUtils.readFileToString(file34, charset41);
        java.math.BigInteger bigInteger43 = org.apache.commons.io.FileUtils.sizeOfAsBigInteger(file34);
        java.nio.charset.Charset charset44 = null;
        java.util.List<java.lang.String> strList45 = org.apache.commons.io.FileUtils.readLines(file34, charset44);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.writeLines(file0, (java.util.Collection<java.lang.String>) strList45);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: File 'C:\\Users\\Mathieu\\AppData\\Local\\Temp' exists but is a directory");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(file0);
        org.junit.Assert.assertEquals(file0.getParent(), "C:\\Users\\Mathieu\\AppData\\Local");
        org.junit.Assert.assertEquals(file0.toString(), "C:\\Users\\Mathieu\\AppData\\Local\\Temp");
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(file4);
        org.junit.Assert.assertEquals(file4.getParent(), "hi!");
        org.junit.Assert.assertEquals(file4.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(file8);
        org.junit.Assert.assertEquals(file8.getParent(), "hi!");
        org.junit.Assert.assertEquals(file8.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(lineIterator12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "C:\\Users\\Mathieu\\AppData\\Local\\Temp\\\r\n\r\n" + "'", str16, "C:\\Users\\Mathieu\\AppData\\Local\\Temp\\\r\n\r\n");
        org.junit.Assert.assertNotNull(fileOutputStream18);
        org.junit.Assert.assertNotNull(fileOutputStream20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(fileItor30);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(file34);
        org.junit.Assert.assertEquals(file34.getParent(), "hi!");
        org.junit.Assert.assertEquals(file34.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(file38);
        org.junit.Assert.assertEquals(file38.getParent(), "hi!");
        org.junit.Assert.assertEquals(file38.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(bigInteger43);
        org.junit.Assert.assertNotNull(strList45);
    }

    @Test
    public void test398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test398");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean12 = org.apache.commons.io.FileUtils.deleteQuietly(file7);
        org.apache.commons.io.FileUtils.forceDeleteOnExit(file7);
        java.math.BigInteger bigInteger14 = org.apache.commons.io.FileUtils.sizeOfAsBigInteger(file7);
        java.lang.String str15 = org.apache.commons.io.FileUtils.byteCountToDisplaySize(bigInteger14);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(bigInteger14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "0 bytes" + "'", str15, "0 bytes");
    }

    @Test
    public void test399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test399");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file14 = org.apache.commons.io.FileUtils.getFile(strArray13);
        boolean boolean16 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file7, file14, "");
        org.apache.commons.io.LineIterator lineIterator17 = org.apache.commons.io.FileUtils.lineIterator(file7);
        org.apache.commons.io.FileUtils.writeStringToFile(file7, "C:\\Users\\Mathieu\\AppData\\Local\\Temp\\", false);
        java.nio.charset.Charset charset22 = null;
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "", charset22, true);
        boolean boolean26 = org.apache.commons.io.FileUtils.waitFor(file7, 0);
        org.apache.commons.io.FileUtils.writeStringToFile(file7, "C:\\Users\\Mathieu\\AppData\\Local\\Temp\\");
        long long29 = org.apache.commons.io.FileUtils.checksumCRC32(file7);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(file14);
        org.junit.Assert.assertEquals(file14.getParent(), "hi!");
        org.junit.Assert.assertEquals(file14.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(lineIterator17);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 4154702209L + "'", long29 == 4154702209L);
    }

    @Test
    public void test400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test400");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean12 = org.apache.commons.io.FileUtils.deleteQuietly(file7);
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset16 = null;
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "", charset16, true);
        java.nio.charset.Charset charset20 = null;
        org.apache.commons.io.FileUtils.writeStringToFile(file7, "", charset20, false);
        long long23 = org.apache.commons.io.FileUtils.sizeOf(file7);
        java.lang.String[] strArray26 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file27 = org.apache.commons.io.FileUtils.getFile(strArray26);
        java.lang.String[] strArray30 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file31 = org.apache.commons.io.FileUtils.getFile(strArray30);
        boolean boolean32 = org.apache.commons.io.FileUtils.isFileOlder(file27, file31);
        boolean boolean34 = org.apache.commons.io.FileUtils.waitFor(file31, (int) '4');
        org.apache.commons.io.LineIterator lineIterator35 = org.apache.commons.io.FileUtils.lineIterator(file31);
        boolean boolean36 = org.apache.commons.io.FileUtils.deleteQuietly(file31);
        org.apache.commons.io.FileUtils.write(file31, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset40 = null;
        org.apache.commons.io.FileUtils.write(file31, (java.lang.CharSequence) "", charset40, true);
        java.nio.charset.Charset charset44 = null;
        org.apache.commons.io.FileUtils.writeStringToFile(file31, "", charset44, false);
        long long47 = org.apache.commons.io.FileUtils.sizeOf(file31);
        org.apache.commons.io.FileUtils.writeStringToFile(file31, "");
        boolean boolean51 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file7, file31, "hi!");
        java.lang.String[] strArray54 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file55 = org.apache.commons.io.FileUtils.getFile(strArray54);
        java.lang.String[] strArray56 = new java.lang.String[] {};
        java.io.File file57 = org.apache.commons.io.FileUtils.getFile(strArray56);
        java.io.File file58 = org.apache.commons.io.FileUtils.getFile(file55, strArray56);
        java.lang.String[] strArray61 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file62 = org.apache.commons.io.FileUtils.getFile(strArray61);
        java.lang.String[] strArray65 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file66 = org.apache.commons.io.FileUtils.getFile(strArray65);
        boolean boolean67 = org.apache.commons.io.FileUtils.isFileOlder(file62, file66);
        boolean boolean69 = org.apache.commons.io.FileUtils.waitFor(file66, (int) '4');
        org.apache.commons.io.LineIterator lineIterator70 = org.apache.commons.io.FileUtils.lineIterator(file66);
        boolean boolean72 = org.apache.commons.io.FileUtils.isFileOlder(file66, (-1L));
        java.io.FileOutputStream fileOutputStream74 = org.apache.commons.io.FileUtils.openOutputStream(file66, false);
        long long75 = org.apache.commons.io.FileUtils.copyFile(file55, (java.io.OutputStream) fileOutputStream74);
        boolean boolean76 = org.apache.commons.io.FileUtils.isFileOlder(file7, file55);
        java.lang.String[] strArray79 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file80 = org.apache.commons.io.FileUtils.getFile(strArray79);
        java.lang.String[] strArray83 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file84 = org.apache.commons.io.FileUtils.getFile(strArray83);
        boolean boolean85 = org.apache.commons.io.FileUtils.isFileOlder(file80, file84);
        boolean boolean87 = org.apache.commons.io.FileUtils.waitFor(file84, (int) '4');
        org.apache.commons.io.LineIterator lineIterator88 = org.apache.commons.io.FileUtils.lineIterator(file84);
        boolean boolean90 = org.apache.commons.io.FileUtils.isFileOlder(file84, (-1L));
        long long91 = org.apache.commons.io.FileUtils.sizeOf(file84);
        java.io.File file92 = org.apache.commons.io.FileUtils.getUserDirectory();
        org.apache.commons.io.FileUtils.copyFileToDirectory(file84, file92, true);
        org.apache.commons.io.FileUtils.forceDeleteOnExit(file84);
        boolean boolean96 = org.apache.commons.io.FileUtils.isFileNewer(file55, file84);
        org.apache.commons.io.FileUtils.write(file55, (java.lang.CharSequence) "1 GB", false);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(file27);
        org.junit.Assert.assertEquals(file27.getParent(), "hi!");
        org.junit.Assert.assertEquals(file27.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(file31);
        org.junit.Assert.assertEquals(file31.getParent(), "hi!");
        org.junit.Assert.assertEquals(file31.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(lineIterator35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(file55);
        org.junit.Assert.assertEquals(file55.getParent(), "hi!");
        org.junit.Assert.assertEquals(file55.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNull(file57);
        org.junit.Assert.assertNotNull(file58);
        org.junit.Assert.assertEquals(file58.getParent(), "hi!");
        org.junit.Assert.assertEquals(file58.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(file62);
        org.junit.Assert.assertEquals(file62.getParent(), "hi!");
        org.junit.Assert.assertEquals(file62.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(file66);
        org.junit.Assert.assertEquals(file66.getParent(), "hi!");
        org.junit.Assert.assertEquals(file66.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(lineIterator70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(fileOutputStream74);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 0L + "'", long75 == 0L);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(strArray79);
        org.junit.Assert.assertNotNull(file80);
        org.junit.Assert.assertEquals(file80.getParent(), "hi!");
        org.junit.Assert.assertEquals(file80.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray83);
        org.junit.Assert.assertNotNull(file84);
        org.junit.Assert.assertEquals(file84.getParent(), "hi!");
        org.junit.Assert.assertEquals(file84.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(lineIterator88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + long91 + "' != '" + 0L + "'", long91 == 0L);
        org.junit.Assert.assertNotNull(file92);
        org.junit.Assert.assertEquals(file92.getParent(), "C:\\Users");
        org.junit.Assert.assertEquals(file92.toString(), "C:\\Users\\Mathieu");
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test401");
        java.math.BigInteger bigInteger0 = org.apache.commons.io.FileUtils.ONE_PB_BI;
        java.lang.String str1 = org.apache.commons.io.FileUtils.byteCountToDisplaySize(bigInteger0);
        org.junit.Assert.assertNotNull(bigInteger0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "1 PB" + "'", str1, "1 PB");
    }

    @Test
    public void test402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test402");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean13 = org.apache.commons.io.FileUtils.isFileOlder(file7, (-1L));
        java.nio.charset.Charset charset14 = null;
        java.lang.String str15 = org.apache.commons.io.FileUtils.readFileToString(file7, charset14);
        java.io.FileOutputStream fileOutputStream17 = org.apache.commons.io.FileUtils.openOutputStream(file7, false);
        org.apache.commons.io.LineIterator lineIterator18 = org.apache.commons.io.FileUtils.lineIterator(file7);
        org.apache.commons.io.FileUtils.writeStringToFile(file7, "-1 bytes", false);
        java.nio.charset.Charset charset23 = null;
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "32 bytes", charset23);
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "C:\\Users\\Mathieu\\AppData\\Local\\Temp\\", false);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter28 = null;
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter29 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Collection<java.io.File> fileCollection30 = org.apache.commons.io.FileUtils.listFilesAndDirs(file7, iOFileFilter28, iOFileFilter29);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'directory' is not a directory: hi!\\hi!");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1 GB" + "'", str15, "1 GB");
        org.junit.Assert.assertNotNull(fileOutputStream17);
        org.junit.Assert.assertNotNull(lineIterator18);
    }

    @Test
    public void test403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test403");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file14 = org.apache.commons.io.FileUtils.getFile(strArray13);
        boolean boolean16 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file7, file14, "");
        java.io.FileOutputStream fileOutputStream18 = org.apache.commons.io.FileUtils.openOutputStream(file7, false);
        java.lang.String[] strArray21 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file22 = org.apache.commons.io.FileUtils.getFile(strArray21);
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file26 = org.apache.commons.io.FileUtils.getFile(strArray25);
        boolean boolean27 = org.apache.commons.io.FileUtils.isFileOlder(file22, file26);
        boolean boolean29 = org.apache.commons.io.FileUtils.waitFor(file26, (int) '4');
        org.apache.commons.io.LineIterator lineIterator30 = org.apache.commons.io.FileUtils.lineIterator(file26);
        boolean boolean31 = org.apache.commons.io.FileUtils.deleteQuietly(file26);
        org.apache.commons.io.FileUtils.write(file26, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset35 = null;
        org.apache.commons.io.FileUtils.write(file26, (java.lang.CharSequence) "", charset35, true);
        java.nio.charset.Charset charset39 = null;
        org.apache.commons.io.FileUtils.writeStringToFile(file26, "", charset39, false);
        long long42 = org.apache.commons.io.FileUtils.sizeOf(file26);
        java.lang.String[] strArray45 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file46 = org.apache.commons.io.FileUtils.getFile(strArray45);
        java.lang.String[] strArray49 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file50 = org.apache.commons.io.FileUtils.getFile(strArray49);
        boolean boolean51 = org.apache.commons.io.FileUtils.isFileOlder(file46, file50);
        boolean boolean53 = org.apache.commons.io.FileUtils.waitFor(file50, (int) '4');
        org.apache.commons.io.LineIterator lineIterator54 = org.apache.commons.io.FileUtils.lineIterator(file50);
        boolean boolean55 = org.apache.commons.io.FileUtils.deleteQuietly(file50);
        org.apache.commons.io.FileUtils.write(file50, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset59 = null;
        org.apache.commons.io.FileUtils.write(file50, (java.lang.CharSequence) "", charset59, true);
        java.nio.charset.Charset charset63 = null;
        org.apache.commons.io.FileUtils.writeStringToFile(file50, "", charset63, false);
        long long66 = org.apache.commons.io.FileUtils.sizeOf(file50);
        org.apache.commons.io.FileUtils.writeStringToFile(file50, "");
        boolean boolean70 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file26, file50, "hi!");
        boolean boolean72 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file7, file50, "-1 bytes");
        java.nio.charset.Charset charset74 = null;
        org.apache.commons.io.FileUtils.writeStringToFile(file50, "C:\\Users\\Mathieu", charset74, true);
        java.lang.String[] strArray79 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file80 = org.apache.commons.io.FileUtils.getFile(strArray79);
        java.lang.String[] strArray83 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file84 = org.apache.commons.io.FileUtils.getFile(strArray83);
        boolean boolean85 = org.apache.commons.io.FileUtils.isFileOlder(file80, file84);
        java.lang.String str86 = org.apache.commons.io.FileUtils.readFileToString(file80);
        java.lang.String[] strArray89 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file90 = org.apache.commons.io.FileUtils.getFile(strArray89);
        java.io.File file91 = org.apache.commons.io.FileUtils.getFile(file80, strArray89);
        java.io.File file92 = org.apache.commons.io.FileUtils.getFile(file50, strArray89);
        java.io.File file93 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.copyFile(file50, file93, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: target");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(file14);
        org.junit.Assert.assertEquals(file14.getParent(), "hi!");
        org.junit.Assert.assertEquals(file14.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(fileOutputStream18);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(file22);
        org.junit.Assert.assertEquals(file22.getParent(), "hi!");
        org.junit.Assert.assertEquals(file22.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(file26);
        org.junit.Assert.assertEquals(file26.getParent(), "hi!");
        org.junit.Assert.assertEquals(file26.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(lineIterator30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(file46);
        org.junit.Assert.assertEquals(file46.getParent(), "hi!");
        org.junit.Assert.assertEquals(file46.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(file50);
        org.junit.Assert.assertEquals(file50.getParent(), "hi!");
        org.junit.Assert.assertEquals(file50.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(lineIterator54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 0L + "'", long66 == 0L);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(strArray79);
        org.junit.Assert.assertNotNull(file80);
        org.junit.Assert.assertEquals(file80.getParent(), "hi!");
        org.junit.Assert.assertEquals(file80.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray83);
        org.junit.Assert.assertNotNull(file84);
        org.junit.Assert.assertEquals(file84.getParent(), "hi!");
        org.junit.Assert.assertEquals(file84.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "C:\\Users\\Mathieu" + "'", str86, "C:\\Users\\Mathieu");
        org.junit.Assert.assertNotNull(strArray89);
        org.junit.Assert.assertNotNull(file90);
        org.junit.Assert.assertEquals(file90.getParent(), "hi!");
        org.junit.Assert.assertEquals(file90.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(file91);
        org.junit.Assert.assertEquals(file91.getParent(), "hi!\\hi!\\hi!");
        org.junit.Assert.assertEquals(file91.toString(), "hi!\\hi!\\hi!\\hi!");
        org.junit.Assert.assertNotNull(file92);
        org.junit.Assert.assertEquals(file92.getParent(), "hi!\\hi!\\hi!");
        org.junit.Assert.assertEquals(file92.toString(), "hi!\\hi!\\hi!\\hi!");
    }

    @Test
    public void test404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test404");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray4 = new java.lang.String[] {};
        java.io.File file5 = org.apache.commons.io.FileUtils.getFile(strArray4);
        java.io.File file6 = org.apache.commons.io.FileUtils.getFile(file3, strArray4);
        java.lang.String[] strArray9 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file10 = org.apache.commons.io.FileUtils.getFile(strArray9);
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file14 = org.apache.commons.io.FileUtils.getFile(strArray13);
        boolean boolean15 = org.apache.commons.io.FileUtils.isFileOlder(file10, file14);
        boolean boolean17 = org.apache.commons.io.FileUtils.waitFor(file14, (int) '4');
        org.apache.commons.io.LineIterator lineIterator18 = org.apache.commons.io.FileUtils.lineIterator(file14);
        boolean boolean19 = org.apache.commons.io.FileUtils.deleteQuietly(file14);
        org.apache.commons.io.FileUtils.write(file14, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset23 = null;
        org.apache.commons.io.FileUtils.writeStringToFile(file14, "1 GB", charset23);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.copyFileToDirectory(file3, file14, false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Destination 'hi!\\hi!' is not a directory");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNull(file5);
        org.junit.Assert.assertNotNull(file6);
        org.junit.Assert.assertEquals(file6.getParent(), "hi!");
        org.junit.Assert.assertEquals(file6.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(file10);
        org.junit.Assert.assertEquals(file10.getParent(), "hi!");
        org.junit.Assert.assertEquals(file10.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(file14);
        org.junit.Assert.assertEquals(file14.getParent(), "hi!");
        org.junit.Assert.assertEquals(file14.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(lineIterator18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test405");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file14 = org.apache.commons.io.FileUtils.getFile(strArray13);
        boolean boolean16 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file7, file14, "");
        java.io.FileOutputStream fileOutputStream18 = org.apache.commons.io.FileUtils.openOutputStream(file7, false);
        java.util.zip.Checksum checksum19 = null;
        java.util.zip.Checksum checksum20 = org.apache.commons.io.FileUtils.checksum(file7, checksum19);
        org.apache.commons.io.FileUtils.forceMkdirParent(file7);
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file25 = org.apache.commons.io.FileUtils.getFile(strArray24);
        java.lang.String[] strArray28 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file29 = org.apache.commons.io.FileUtils.getFile(strArray28);
        boolean boolean30 = org.apache.commons.io.FileUtils.isFileOlder(file25, file29);
        boolean boolean32 = org.apache.commons.io.FileUtils.waitFor(file29, (int) '4');
        org.apache.commons.io.LineIterator lineIterator33 = org.apache.commons.io.FileUtils.lineIterator(file29);
        boolean boolean34 = org.apache.commons.io.FileUtils.deleteQuietly(file29);
        org.apache.commons.io.FileUtils.write(file29, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset38 = null;
        org.apache.commons.io.FileUtils.write(file29, (java.lang.CharSequence) "", charset38, true);
        java.nio.charset.Charset charset42 = null;
        org.apache.commons.io.FileUtils.writeStringToFile(file29, "", charset42, false);
        long long45 = org.apache.commons.io.FileUtils.sizeOf(file29);
        org.apache.commons.io.FileUtils.writeStringToFile(file29, "");
        java.nio.charset.Charset charset48 = null;
        java.util.List<java.lang.String> strList49 = org.apache.commons.io.FileUtils.readLines(file29, charset48);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.moveDirectoryToDirectory(file7, file29, false);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Destination 'hi!\\hi!' is not a directory");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(file14);
        org.junit.Assert.assertEquals(file14.getParent(), "hi!");
        org.junit.Assert.assertEquals(file14.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(fileOutputStream18);
        org.junit.Assert.assertNull(checksum20);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(file25);
        org.junit.Assert.assertEquals(file25.getParent(), "hi!");
        org.junit.Assert.assertEquals(file25.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(file29);
        org.junit.Assert.assertEquals(file29.getParent(), "hi!");
        org.junit.Assert.assertEquals(file29.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(lineIterator33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertNotNull(strList49);
    }

    @Test
    public void test406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test406");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean9 = org.apache.commons.io.FileUtils.deleteQuietly(file7);
        java.nio.charset.Charset charset11 = null;
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "", charset11, true);
        java.lang.String[] strArray16 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file17 = org.apache.commons.io.FileUtils.getFile(strArray16);
        java.io.File file18 = org.apache.commons.io.FileUtils.getFile(strArray16);
        java.io.File file19 = org.apache.commons.io.FileUtils.getFile(file7, strArray16);
        java.io.File file20 = org.apache.commons.io.FileUtils.getFile(strArray16);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.forceDelete(file20);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Unable to delete file: hi!\\hi!");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(file17);
        org.junit.Assert.assertEquals(file17.getParent(), "hi!");
        org.junit.Assert.assertEquals(file17.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(file18);
        org.junit.Assert.assertEquals(file18.getParent(), "hi!");
        org.junit.Assert.assertEquals(file18.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(file19);
        org.junit.Assert.assertEquals(file19.getParent(), "hi!\\hi!\\hi!");
        org.junit.Assert.assertEquals(file19.toString(), "hi!\\hi!\\hi!\\hi!");
        org.junit.Assert.assertNotNull(file20);
        org.junit.Assert.assertEquals(file20.getParent(), "hi!");
        org.junit.Assert.assertEquals(file20.toString(), "hi!\\hi!");
    }

    @Test
    public void test407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test407");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean12 = org.apache.commons.io.FileUtils.deleteQuietly(file7);
        org.apache.commons.io.FileUtils.forceDeleteOnExit(file7);
        java.math.BigInteger bigInteger14 = org.apache.commons.io.FileUtils.sizeOfAsBigInteger(file7);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.deleteDirectory(file7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: hi!\\hi! is not a directory");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(bigInteger14);
    }

    @Test
    public void test408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test408");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean9 = org.apache.commons.io.FileUtils.deleteQuietly(file7);
        java.lang.String[] strArray12 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file13 = org.apache.commons.io.FileUtils.getFile(strArray12);
        java.lang.String[] strArray16 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file17 = org.apache.commons.io.FileUtils.getFile(strArray16);
        boolean boolean18 = org.apache.commons.io.FileUtils.isFileOlder(file13, file17);
        boolean boolean20 = org.apache.commons.io.FileUtils.waitFor(file17, (int) '4');
        java.lang.String[] strArray23 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file24 = org.apache.commons.io.FileUtils.getFile(strArray23);
        boolean boolean26 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file17, file24, "");
        org.apache.commons.io.LineIterator lineIterator27 = org.apache.commons.io.FileUtils.lineIterator(file17);
        org.apache.commons.io.FileUtils.writeStringToFile(file17, "C:\\Users\\Mathieu\\AppData\\Local\\Temp\\", false);
        java.nio.charset.Charset charset32 = null;
        org.apache.commons.io.FileUtils.write(file17, (java.lang.CharSequence) "", charset32, true);
        boolean boolean36 = org.apache.commons.io.FileUtils.waitFor(file17, 0);
        boolean boolean37 = org.apache.commons.io.FileUtils.isFileOlder(file7, file17);
        java.lang.String[] strArray40 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file41 = org.apache.commons.io.FileUtils.getFile(strArray40);
        java.lang.String[] strArray44 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file45 = org.apache.commons.io.FileUtils.getFile(strArray44);
        boolean boolean46 = org.apache.commons.io.FileUtils.isFileOlder(file41, file45);
        boolean boolean48 = org.apache.commons.io.FileUtils.waitFor(file45, (int) '4');
        org.apache.commons.io.LineIterator lineIterator49 = org.apache.commons.io.FileUtils.lineIterator(file45);
        boolean boolean50 = org.apache.commons.io.FileUtils.deleteQuietly(file45);
        org.apache.commons.io.FileUtils.write(file45, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset54 = null;
        org.apache.commons.io.FileUtils.write(file45, (java.lang.CharSequence) "", charset54, true);
        java.nio.charset.Charset charset58 = null;
        org.apache.commons.io.FileUtils.writeStringToFile(file45, "", charset58, false);
        java.io.FileOutputStream fileOutputStream61 = org.apache.commons.io.FileUtils.openOutputStream(file45);
        long long62 = org.apache.commons.io.FileUtils.copyFile(file7, (java.io.OutputStream) fileOutputStream61);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "1 PB", "0 bytes");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: 0 bytes");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(file13);
        org.junit.Assert.assertEquals(file13.getParent(), "hi!");
        org.junit.Assert.assertEquals(file13.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(file17);
        org.junit.Assert.assertEquals(file17.getParent(), "hi!");
        org.junit.Assert.assertEquals(file17.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(file24);
        org.junit.Assert.assertEquals(file24.getParent(), "hi!");
        org.junit.Assert.assertEquals(file24.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(lineIterator27);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(file41);
        org.junit.Assert.assertEquals(file41.getParent(), "hi!");
        org.junit.Assert.assertEquals(file41.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(file45);
        org.junit.Assert.assertEquals(file45.getParent(), "hi!");
        org.junit.Assert.assertEquals(file45.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(lineIterator49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(fileOutputStream61);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 0L + "'", long62 == 0L);
    }

    @Test
    public void test409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test409");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        java.lang.String[] strArray10 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file11 = org.apache.commons.io.FileUtils.getFile(strArray10);
        boolean boolean12 = org.apache.commons.io.FileUtils.isFileOlder(file7, file11);
        boolean boolean14 = org.apache.commons.io.FileUtils.waitFor(file11, (int) '4');
        org.apache.commons.io.LineIterator lineIterator15 = org.apache.commons.io.FileUtils.lineIterator(file11);
        boolean boolean16 = org.apache.commons.io.FileUtils.deleteQuietly(file11);
        org.apache.commons.io.FileUtils.write(file11, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset20 = null;
        org.apache.commons.io.FileUtils.write(file11, (java.lang.CharSequence) "", charset20, true);
        boolean boolean23 = org.apache.commons.io.FileUtils.contentEquals(file3, file11);
        boolean boolean24 = org.apache.commons.io.FileUtils.deleteQuietly(file3);
        java.nio.charset.Charset charset26 = null;
        org.apache.commons.io.FileUtils.write(file3, (java.lang.CharSequence) "\000\000d\001", charset26, true);
        java.lang.String[] strArray31 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file32 = org.apache.commons.io.FileUtils.getFile(strArray31);
        java.lang.String[] strArray35 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file36 = org.apache.commons.io.FileUtils.getFile(strArray35);
        boolean boolean37 = org.apache.commons.io.FileUtils.isFileOlder(file32, file36);
        boolean boolean39 = org.apache.commons.io.FileUtils.waitFor(file36, (int) '4');
        org.apache.commons.io.LineIterator lineIterator40 = org.apache.commons.io.FileUtils.lineIterator(file36);
        boolean boolean41 = org.apache.commons.io.FileUtils.deleteQuietly(file36);
        org.apache.commons.io.FileUtils.forceDeleteOnExit(file36);
        java.math.BigInteger bigInteger43 = org.apache.commons.io.FileUtils.sizeOfAsBigInteger(file36);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.copyFileToDirectory(file3, file36);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Destination 'hi!\\hi!' is not a directory");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(file11);
        org.junit.Assert.assertEquals(file11.getParent(), "hi!");
        org.junit.Assert.assertEquals(file11.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(lineIterator15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(file32);
        org.junit.Assert.assertEquals(file32.getParent(), "hi!");
        org.junit.Assert.assertEquals(file32.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(file36);
        org.junit.Assert.assertEquals(file36.getParent(), "hi!");
        org.junit.Assert.assertEquals(file36.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(lineIterator40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(bigInteger43);
    }

    @Test
    public void test410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test410");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean12 = org.apache.commons.io.FileUtils.deleteQuietly(file7);
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset16 = null;
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "", charset16, true);
        java.nio.charset.Charset charset20 = null;
        org.apache.commons.io.FileUtils.writeStringToFile(file7, "", charset20, false);
        long long23 = org.apache.commons.io.FileUtils.sizeOf(file7);
        java.lang.String[] strArray26 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file27 = org.apache.commons.io.FileUtils.getFile(strArray26);
        java.lang.String[] strArray30 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file31 = org.apache.commons.io.FileUtils.getFile(strArray30);
        boolean boolean32 = org.apache.commons.io.FileUtils.isFileOlder(file27, file31);
        boolean boolean34 = org.apache.commons.io.FileUtils.waitFor(file31, (int) '4');
        org.apache.commons.io.LineIterator lineIterator35 = org.apache.commons.io.FileUtils.lineIterator(file31);
        boolean boolean36 = org.apache.commons.io.FileUtils.deleteQuietly(file31);
        org.apache.commons.io.FileUtils.write(file31, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset40 = null;
        org.apache.commons.io.FileUtils.write(file31, (java.lang.CharSequence) "", charset40, true);
        java.nio.charset.Charset charset44 = null;
        org.apache.commons.io.FileUtils.writeStringToFile(file31, "", charset44, false);
        long long47 = org.apache.commons.io.FileUtils.sizeOf(file31);
        org.apache.commons.io.FileUtils.writeStringToFile(file31, "");
        boolean boolean51 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file7, file31, "hi!");
        java.lang.String[] strArray54 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file55 = org.apache.commons.io.FileUtils.getFile(strArray54);
        java.lang.String[] strArray58 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file59 = org.apache.commons.io.FileUtils.getFile(strArray58);
        boolean boolean60 = org.apache.commons.io.FileUtils.isFileOlder(file55, file59);
        boolean boolean62 = org.apache.commons.io.FileUtils.waitFor(file59, (int) '4');
        org.apache.commons.io.LineIterator lineIterator63 = org.apache.commons.io.FileUtils.lineIterator(file59);
        boolean boolean64 = org.apache.commons.io.FileUtils.deleteQuietly(file59);
        org.apache.commons.io.FileUtils.write(file59, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset68 = null;
        org.apache.commons.io.FileUtils.write(file59, (java.lang.CharSequence) "", charset68, true);
        byte[] byteArray71 = org.apache.commons.io.FileUtils.readFileToByteArray(file59);
        org.apache.commons.io.FileUtils.writeByteArrayToFile(file7, byteArray71, true);
        java.io.FileOutputStream fileOutputStream74 = org.apache.commons.io.FileUtils.openOutputStream(file7);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(file27);
        org.junit.Assert.assertEquals(file27.getParent(), "hi!");
        org.junit.Assert.assertEquals(file27.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(file31);
        org.junit.Assert.assertEquals(file31.getParent(), "hi!");
        org.junit.Assert.assertEquals(file31.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(lineIterator35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(file55);
        org.junit.Assert.assertEquals(file55.getParent(), "hi!");
        org.junit.Assert.assertEquals(file55.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(file59);
        org.junit.Assert.assertEquals(file59.getParent(), "hi!");
        org.junit.Assert.assertEquals(file59.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(lineIterator63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[104, 105, 33]");
        org.junit.Assert.assertNotNull(fileOutputStream74);
    }

    @Test
    public void test411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test411");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file14 = org.apache.commons.io.FileUtils.getFile(strArray13);
        boolean boolean16 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file7, file14, "");
        java.io.FileOutputStream fileOutputStream18 = org.apache.commons.io.FileUtils.openOutputStream(file7, false);
        java.util.zip.Checksum checksum19 = null;
        java.util.zip.Checksum checksum20 = org.apache.commons.io.FileUtils.checksum(file7, checksum19);
        java.nio.charset.Charset charset22 = null;
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "hi!", charset22);
        java.lang.String[] strArray26 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file27 = org.apache.commons.io.FileUtils.getFile(strArray26);
        java.lang.String[] strArray30 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file31 = org.apache.commons.io.FileUtils.getFile(strArray30);
        boolean boolean32 = org.apache.commons.io.FileUtils.isFileOlder(file27, file31);
        boolean boolean34 = org.apache.commons.io.FileUtils.waitFor(file31, (int) '4');
        java.lang.String[] strArray37 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file38 = org.apache.commons.io.FileUtils.getFile(strArray37);
        boolean boolean40 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file31, file38, "");
        org.apache.commons.io.FileUtils.writeStringToFile(file31, "", false);
        java.io.FileFilter fileFilter44 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.copyDirectory(file7, file31, fileFilter44);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Source 'hi!\\hi!' exists but is not a directory");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(file14);
        org.junit.Assert.assertEquals(file14.getParent(), "hi!");
        org.junit.Assert.assertEquals(file14.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(fileOutputStream18);
        org.junit.Assert.assertNull(checksum20);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(file27);
        org.junit.Assert.assertEquals(file27.getParent(), "hi!");
        org.junit.Assert.assertEquals(file27.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(file31);
        org.junit.Assert.assertEquals(file31.getParent(), "hi!");
        org.junit.Assert.assertEquals(file31.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(file38);
        org.junit.Assert.assertEquals(file38.getParent(), "hi!");
        org.junit.Assert.assertEquals(file38.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
    }

    @Test
    public void test412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test412");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean12 = org.apache.commons.io.FileUtils.deleteQuietly(file7);
        org.apache.commons.io.FileUtils.writeStringToFile(file7, "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file18 = org.apache.commons.io.FileUtils.getFile(strArray17);
        java.lang.String[] strArray21 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file22 = org.apache.commons.io.FileUtils.getFile(strArray21);
        boolean boolean23 = org.apache.commons.io.FileUtils.isFileOlder(file18, file22);
        boolean boolean25 = org.apache.commons.io.FileUtils.waitFor(file22, (int) '4');
        java.lang.String[] strArray28 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file29 = org.apache.commons.io.FileUtils.getFile(strArray28);
        boolean boolean31 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file22, file29, "");
        boolean boolean32 = org.apache.commons.io.FileUtils.isFileNewer(file7, file22);
        boolean boolean33 = org.apache.commons.io.FileUtils.isSymlink(file7);
        org.apache.commons.io.FileUtils.writeStringToFile(file7, "C:\\Users\\Mathieu\\AppData\\Local\\Temp\\", true);
        java.lang.String str37 = org.apache.commons.io.FileUtils.readFileToString(file7);
        java.lang.String[] strArray40 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file41 = org.apache.commons.io.FileUtils.getFile(strArray40);
        java.lang.String[] strArray44 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file45 = org.apache.commons.io.FileUtils.getFile(strArray44);
        boolean boolean46 = org.apache.commons.io.FileUtils.isFileOlder(file41, file45);
        boolean boolean48 = org.apache.commons.io.FileUtils.waitFor(file45, (int) '4');
        org.apache.commons.io.LineIterator lineIterator49 = org.apache.commons.io.FileUtils.lineIterator(file45);
        boolean boolean50 = org.apache.commons.io.FileUtils.deleteQuietly(file45);
        org.apache.commons.io.FileUtils.writeStringToFile(file45, "");
        org.apache.commons.io.FileUtils.forceMkdirParent(file45);
        java.lang.String[] strArray56 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file57 = org.apache.commons.io.FileUtils.getFile(strArray56);
        java.lang.String[] strArray60 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file61 = org.apache.commons.io.FileUtils.getFile(strArray60);
        boolean boolean62 = org.apache.commons.io.FileUtils.isFileOlder(file57, file61);
        boolean boolean64 = org.apache.commons.io.FileUtils.waitFor(file61, (int) '4');
        java.lang.String[] strArray67 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file68 = org.apache.commons.io.FileUtils.getFile(strArray67);
        boolean boolean70 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file61, file68, "");
        boolean boolean72 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file45, file61, "hi!");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.copyDirectory(file7, file45);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Source 'hi!\\hi!' exists but is not a directory");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(file18);
        org.junit.Assert.assertEquals(file18.getParent(), "hi!");
        org.junit.Assert.assertEquals(file18.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(file22);
        org.junit.Assert.assertEquals(file22.getParent(), "hi!");
        org.junit.Assert.assertEquals(file22.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(file29);
        org.junit.Assert.assertEquals(file29.getParent(), "hi!");
        org.junit.Assert.assertEquals(file29.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "C:\\Users\\Mathieu\\AppData\\Local\\Temp\\" + "'", str37, "C:\\Users\\Mathieu\\AppData\\Local\\Temp\\");
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(file41);
        org.junit.Assert.assertEquals(file41.getParent(), "hi!");
        org.junit.Assert.assertEquals(file41.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(file45);
        org.junit.Assert.assertEquals(file45.getParent(), "hi!");
        org.junit.Assert.assertEquals(file45.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(lineIterator49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(file57);
        org.junit.Assert.assertEquals(file57.getParent(), "hi!");
        org.junit.Assert.assertEquals(file57.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(file61);
        org.junit.Assert.assertEquals(file61.getParent(), "hi!");
        org.junit.Assert.assertEquals(file61.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(file68);
        org.junit.Assert.assertEquals(file68.getParent(), "hi!");
        org.junit.Assert.assertEquals(file68.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
    }

    @Test
    public void test413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test413");
        java.lang.Iterable<java.io.File> fileIterable0 = null;
        java.lang.String[] strArray3 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file4 = org.apache.commons.io.FileUtils.getFile(strArray3);
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file8 = org.apache.commons.io.FileUtils.getFile(strArray7);
        boolean boolean9 = org.apache.commons.io.FileUtils.isFileOlder(file4, file8);
        boolean boolean11 = org.apache.commons.io.FileUtils.waitFor(file8, (int) '4');
        java.lang.String[] strArray14 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file15 = org.apache.commons.io.FileUtils.getFile(strArray14);
        boolean boolean17 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file8, file15, "");
        org.apache.commons.io.LineIterator lineIterator18 = org.apache.commons.io.FileUtils.lineIterator(file8);
        org.apache.commons.io.FileUtils.writeStringToFile(file8, "C:\\Users\\Mathieu\\AppData\\Local\\Temp\\", false);
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file25 = org.apache.commons.io.FileUtils.getFile(strArray24);
        java.lang.String[] strArray28 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file29 = org.apache.commons.io.FileUtils.getFile(strArray28);
        boolean boolean30 = org.apache.commons.io.FileUtils.isFileOlder(file25, file29);
        java.lang.String str31 = org.apache.commons.io.FileUtils.readFileToString(file25);
        java.lang.String[] strArray34 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file35 = org.apache.commons.io.FileUtils.getFile(strArray34);
        java.io.File file36 = org.apache.commons.io.FileUtils.getFile(file25, strArray34);
        boolean boolean38 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file8, file36, "-1 bytes");
        java.lang.String[] strArray41 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file42 = org.apache.commons.io.FileUtils.getFile(strArray41);
        java.lang.String[] strArray45 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file46 = org.apache.commons.io.FileUtils.getFile(strArray45);
        boolean boolean47 = org.apache.commons.io.FileUtils.isFileOlder(file42, file46);
        boolean boolean49 = org.apache.commons.io.FileUtils.waitFor(file46, (int) '4');
        org.apache.commons.io.LineIterator lineIterator50 = org.apache.commons.io.FileUtils.lineIterator(file46);
        boolean boolean51 = org.apache.commons.io.FileUtils.deleteQuietly(file46);
        org.apache.commons.io.FileUtils.write(file46, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset55 = null;
        org.apache.commons.io.FileUtils.write(file46, (java.lang.CharSequence) "", charset55, true);
        java.nio.charset.Charset charset59 = null;
        org.apache.commons.io.FileUtils.writeStringToFile(file46, "", charset59, false);
        long long62 = org.apache.commons.io.FileUtils.sizeOf(file46);
        org.apache.commons.io.FileUtils.writeStringToFile(file46, "");
        java.nio.charset.Charset charset65 = null;
        java.util.List<java.lang.String> strList66 = org.apache.commons.io.FileUtils.readLines(file46, charset65);
        org.apache.commons.io.FileUtils.writeLines(file8, (java.util.Collection<java.lang.String>) strList66, "32 bytes");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.copyToDirectory(fileIterable0, file8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: sourceIterable");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(file4);
        org.junit.Assert.assertEquals(file4.getParent(), "hi!");
        org.junit.Assert.assertEquals(file4.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(file8);
        org.junit.Assert.assertEquals(file8.getParent(), "hi!");
        org.junit.Assert.assertEquals(file8.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(file15);
        org.junit.Assert.assertEquals(file15.getParent(), "hi!");
        org.junit.Assert.assertEquals(file15.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(lineIterator18);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(file25);
        org.junit.Assert.assertEquals(file25.getParent(), "hi!");
        org.junit.Assert.assertEquals(file25.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(file29);
        org.junit.Assert.assertEquals(file29.getParent(), "hi!");
        org.junit.Assert.assertEquals(file29.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "C:\\Users\\Mathieu\\AppData\\Local\\Temp\\" + "'", str31, "C:\\Users\\Mathieu\\AppData\\Local\\Temp\\");
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(file35);
        org.junit.Assert.assertEquals(file35.getParent(), "hi!");
        org.junit.Assert.assertEquals(file35.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(file36);
        org.junit.Assert.assertEquals(file36.getParent(), "hi!\\hi!\\hi!");
        org.junit.Assert.assertEquals(file36.toString(), "hi!\\hi!\\hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(file42);
        org.junit.Assert.assertEquals(file42.getParent(), "hi!");
        org.junit.Assert.assertEquals(file42.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(file46);
        org.junit.Assert.assertEquals(file46.getParent(), "hi!");
        org.junit.Assert.assertEquals(file46.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(lineIterator50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 0L + "'", long62 == 0L);
        org.junit.Assert.assertNotNull(strList66);
    }

    @Test
    public void test414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test414");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean12 = org.apache.commons.io.FileUtils.deleteQuietly(file7);
        org.apache.commons.io.FileUtils.writeStringToFile(file7, "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file18 = org.apache.commons.io.FileUtils.getFile(strArray17);
        java.lang.String[] strArray21 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file22 = org.apache.commons.io.FileUtils.getFile(strArray21);
        boolean boolean23 = org.apache.commons.io.FileUtils.isFileOlder(file18, file22);
        boolean boolean25 = org.apache.commons.io.FileUtils.waitFor(file22, (int) '4');
        java.lang.String[] strArray28 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file29 = org.apache.commons.io.FileUtils.getFile(strArray28);
        boolean boolean31 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file22, file29, "");
        boolean boolean32 = org.apache.commons.io.FileUtils.isFileNewer(file7, file22);
        java.io.FileOutputStream fileOutputStream33 = org.apache.commons.io.FileUtils.openOutputStream(file7);
        java.lang.String[] strArray36 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file37 = org.apache.commons.io.FileUtils.getFile(strArray36);
        java.lang.String[] strArray40 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file41 = org.apache.commons.io.FileUtils.getFile(strArray40);
        boolean boolean42 = org.apache.commons.io.FileUtils.isFileOlder(file37, file41);
        boolean boolean44 = org.apache.commons.io.FileUtils.waitFor(file41, (int) '4');
        org.apache.commons.io.LineIterator lineIterator45 = org.apache.commons.io.FileUtils.lineIterator(file41);
        boolean boolean46 = org.apache.commons.io.FileUtils.deleteQuietly(file41);
        org.apache.commons.io.FileUtils.write(file41, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset50 = null;
        org.apache.commons.io.FileUtils.write(file41, (java.lang.CharSequence) "", charset50, true);
        java.nio.charset.Charset charset53 = null;
        java.lang.String str54 = org.apache.commons.io.FileUtils.readFileToString(file41, charset53);
        boolean boolean55 = org.apache.commons.io.FileUtils.contentEquals(file7, file41);
        java.lang.String[] strArray58 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file59 = org.apache.commons.io.FileUtils.getFile(strArray58);
        java.io.File file60 = org.apache.commons.io.FileUtils.getFile(file7, strArray58);
        java.lang.String[] strArray63 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file64 = org.apache.commons.io.FileUtils.getFile(strArray63);
        java.lang.String[] strArray65 = new java.lang.String[] {};
        java.io.File file66 = org.apache.commons.io.FileUtils.getFile(strArray65);
        java.io.File file67 = org.apache.commons.io.FileUtils.getFile(file64, strArray65);
        java.lang.String[] strArray71 = new java.lang.String[] { "35 bytes", "1048576 EB", "hi!" };
        java.util.ArrayList<java.lang.String> strList72 = new java.util.ArrayList<java.lang.String>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList72, strArray71);
        org.apache.commons.io.FileUtils.writeLines(file67, (java.util.Collection<java.lang.String>) strList72, "1 GB1048576 EB1 GBC:\\Users\\Mathieu\\AppData\\Local\\Temp\\1 GBC:\\Users\\Mathieu1 GB1 GB1048576 EB1 GB");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.moveDirectoryToDirectory(file7, file67, false);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Destination 'hi!\\hi!' is not a directory");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(file18);
        org.junit.Assert.assertEquals(file18.getParent(), "hi!");
        org.junit.Assert.assertEquals(file18.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(file22);
        org.junit.Assert.assertEquals(file22.getParent(), "hi!");
        org.junit.Assert.assertEquals(file22.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(file29);
        org.junit.Assert.assertEquals(file29.getParent(), "hi!");
        org.junit.Assert.assertEquals(file29.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(fileOutputStream33);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(file37);
        org.junit.Assert.assertEquals(file37.getParent(), "hi!");
        org.junit.Assert.assertEquals(file37.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(file41);
        org.junit.Assert.assertEquals(file41.getParent(), "hi!");
        org.junit.Assert.assertEquals(file41.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(lineIterator45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "hi!" + "'", str54, "hi!");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(file59);
        org.junit.Assert.assertEquals(file59.getParent(), "hi!");
        org.junit.Assert.assertEquals(file59.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(file60);
        org.junit.Assert.assertEquals(file60.getParent(), "hi!\\hi!\\hi!");
        org.junit.Assert.assertEquals(file60.toString(), "hi!\\hi!\\hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(file64);
        org.junit.Assert.assertEquals(file64.getParent(), "hi!");
        org.junit.Assert.assertEquals(file64.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNull(file66);
        org.junit.Assert.assertNotNull(file67);
        org.junit.Assert.assertEquals(file67.getParent(), "hi!");
        org.junit.Assert.assertEquals(file67.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
    }

    @Test
    public void test415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test415");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        java.nio.charset.Charset charset12 = null;
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "-1 bytes1 GB1048576 EB1 GBC:\\Users\\Mathieu\\AppData\\Local\\Temp\\1 GBC:\\Users\\Mathieu1 GB1 GB1048576 EB1 GB", charset12, false);
        long long15 = org.apache.commons.io.FileUtils.checksumCRC32(file7);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 3574277109L + "'", long15 == 3574277109L);
    }

    @Test
    public void test416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test416");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean12 = org.apache.commons.io.FileUtils.deleteQuietly(file7);
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset16 = null;
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "", charset16, true);
        byte[] byteArray19 = org.apache.commons.io.FileUtils.readFileToByteArray(file7);
        boolean boolean21 = org.apache.commons.io.FileUtils.waitFor(file7, (int) 'a');
        byte[] byteArray22 = org.apache.commons.io.FileUtils.readFileToByteArray(file7);
        java.io.FileInputStream fileInputStream23 = org.apache.commons.io.FileUtils.openInputStream(file7);
        byte[] byteArray24 = org.apache.commons.io.FileUtils.readFileToByteArray(file7);
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file28 = org.apache.commons.io.FileUtils.getFile(strArray27);
        java.lang.String[] strArray31 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file32 = org.apache.commons.io.FileUtils.getFile(strArray31);
        boolean boolean33 = org.apache.commons.io.FileUtils.isFileOlder(file28, file32);
        boolean boolean35 = org.apache.commons.io.FileUtils.waitFor(file32, (int) '4');
        org.apache.commons.io.LineIterator lineIterator36 = org.apache.commons.io.FileUtils.lineIterator(file32);
        boolean boolean37 = org.apache.commons.io.FileUtils.deleteQuietly(file32);
        org.apache.commons.io.FileUtils.write(file32, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset41 = null;
        org.apache.commons.io.FileUtils.write(file32, (java.lang.CharSequence) "", charset41, true);
        java.nio.charset.Charset charset45 = null;
        org.apache.commons.io.FileUtils.writeStringToFile(file32, "", charset45, false);
        java.nio.charset.Charset charset49 = null;
        org.apache.commons.io.FileUtils.writeStringToFile(file32, "C:\\Users\\Mathieu\\AppData\\Local\\Temp\\", charset49);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.copyDirectory(file7, file32);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Source 'hi!\\hi!' exists but is not a directory");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[104, 105, 33]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[104, 105, 33]");
        org.junit.Assert.assertNotNull(fileInputStream23);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[104, 105, 33]");
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(file28);
        org.junit.Assert.assertEquals(file28.getParent(), "hi!");
        org.junit.Assert.assertEquals(file28.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(file32);
        org.junit.Assert.assertEquals(file32.getParent(), "hi!");
        org.junit.Assert.assertEquals(file32.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(lineIterator36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test417");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean12 = org.apache.commons.io.FileUtils.deleteQuietly(file7);
        org.apache.commons.io.FileUtils.writeStringToFile(file7, "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file18 = org.apache.commons.io.FileUtils.getFile(strArray17);
        java.lang.String[] strArray21 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file22 = org.apache.commons.io.FileUtils.getFile(strArray21);
        boolean boolean23 = org.apache.commons.io.FileUtils.isFileOlder(file18, file22);
        boolean boolean25 = org.apache.commons.io.FileUtils.waitFor(file22, (int) '4');
        java.lang.String[] strArray28 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file29 = org.apache.commons.io.FileUtils.getFile(strArray28);
        boolean boolean31 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file22, file29, "");
        boolean boolean32 = org.apache.commons.io.FileUtils.isFileNewer(file7, file22);
        boolean boolean33 = org.apache.commons.io.FileUtils.isSymlink(file7);
        java.lang.String[] strArray36 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file37 = org.apache.commons.io.FileUtils.getFile(strArray36);
        java.lang.String[] strArray40 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file41 = org.apache.commons.io.FileUtils.getFile(strArray40);
        boolean boolean42 = org.apache.commons.io.FileUtils.isFileOlder(file37, file41);
        boolean boolean44 = org.apache.commons.io.FileUtils.waitFor(file41, (int) '4');
        org.apache.commons.io.LineIterator lineIterator45 = org.apache.commons.io.FileUtils.lineIterator(file41);
        boolean boolean47 = org.apache.commons.io.FileUtils.isFileOlder(file41, (-1L));
        java.nio.charset.Charset charset48 = null;
        java.lang.String str49 = org.apache.commons.io.FileUtils.readFileToString(file41, charset48);
        java.io.FileOutputStream fileOutputStream51 = org.apache.commons.io.FileUtils.openOutputStream(file41, false);
        org.apache.commons.io.LineIterator lineIterator52 = org.apache.commons.io.FileUtils.lineIterator(file41);
        org.apache.commons.io.FileUtils.writeStringToFile(file41, "-1 bytes", false);
        java.io.FileOutputStream fileOutputStream56 = org.apache.commons.io.FileUtils.openOutputStream(file41);
        long long57 = org.apache.commons.io.FileUtils.copyFile(file7, (java.io.OutputStream) fileOutputStream56);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(file18);
        org.junit.Assert.assertEquals(file18.getParent(), "hi!");
        org.junit.Assert.assertEquals(file18.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(file22);
        org.junit.Assert.assertEquals(file22.getParent(), "hi!");
        org.junit.Assert.assertEquals(file22.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(file29);
        org.junit.Assert.assertEquals(file29.getParent(), "hi!");
        org.junit.Assert.assertEquals(file29.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(file37);
        org.junit.Assert.assertEquals(file37.getParent(), "hi!");
        org.junit.Assert.assertEquals(file37.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(file41);
        org.junit.Assert.assertEquals(file41.getParent(), "hi!");
        org.junit.Assert.assertEquals(file41.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(lineIterator45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(fileOutputStream51);
        org.junit.Assert.assertNotNull(lineIterator52);
        org.junit.Assert.assertNotNull(fileOutputStream56);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
    }

    @Test
    public void test418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test418");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean12 = org.apache.commons.io.FileUtils.deleteQuietly(file7);
        org.apache.commons.io.FileUtils.writeStringToFile(file7, "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file18 = org.apache.commons.io.FileUtils.getFile(strArray17);
        java.lang.String[] strArray21 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file22 = org.apache.commons.io.FileUtils.getFile(strArray21);
        boolean boolean23 = org.apache.commons.io.FileUtils.isFileOlder(file18, file22);
        boolean boolean25 = org.apache.commons.io.FileUtils.waitFor(file22, (int) '4');
        java.lang.String[] strArray28 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file29 = org.apache.commons.io.FileUtils.getFile(strArray28);
        boolean boolean31 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file22, file29, "");
        boolean boolean32 = org.apache.commons.io.FileUtils.isFileNewer(file7, file22);
        java.io.File file33 = null;
        boolean boolean34 = org.apache.commons.io.FileUtils.contentEquals(file22, file33);
        java.lang.String[] strArray37 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file38 = org.apache.commons.io.FileUtils.getFile(strArray37);
        java.lang.String[] strArray41 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file42 = org.apache.commons.io.FileUtils.getFile(strArray41);
        boolean boolean43 = org.apache.commons.io.FileUtils.isFileOlder(file38, file42);
        boolean boolean45 = org.apache.commons.io.FileUtils.waitFor(file42, (int) '4');
        org.apache.commons.io.LineIterator lineIterator46 = org.apache.commons.io.FileUtils.lineIterator(file42);
        boolean boolean47 = org.apache.commons.io.FileUtils.deleteQuietly(file42);
        org.apache.commons.io.FileUtils.writeStringToFile(file42, "");
        java.lang.String[] strArray52 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file53 = org.apache.commons.io.FileUtils.getFile(strArray52);
        java.lang.String[] strArray56 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file57 = org.apache.commons.io.FileUtils.getFile(strArray56);
        boolean boolean58 = org.apache.commons.io.FileUtils.isFileOlder(file53, file57);
        boolean boolean60 = org.apache.commons.io.FileUtils.waitFor(file57, (int) '4');
        java.lang.String[] strArray63 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file64 = org.apache.commons.io.FileUtils.getFile(strArray63);
        boolean boolean66 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file57, file64, "");
        boolean boolean67 = org.apache.commons.io.FileUtils.isFileNewer(file42, file57);
        boolean boolean68 = org.apache.commons.io.FileUtils.isSymlink(file42);
        org.apache.commons.io.FileUtils.writeStringToFile(file42, "C:\\Users\\Mathieu\\AppData\\Local\\Temp\\", true);
        java.lang.String[] strArray74 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file75 = org.apache.commons.io.FileUtils.getFile(strArray74);
        java.lang.String[] strArray78 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file79 = org.apache.commons.io.FileUtils.getFile(strArray78);
        boolean boolean80 = org.apache.commons.io.FileUtils.isFileOlder(file75, file79);
        boolean boolean82 = org.apache.commons.io.FileUtils.waitFor(file79, (int) '4');
        org.apache.commons.io.LineIterator lineIterator83 = org.apache.commons.io.FileUtils.lineIterator(file79);
        boolean boolean85 = org.apache.commons.io.FileUtils.isFileOlder(file79, (-1L));
        byte[] byteArray86 = new byte[] {};
        org.apache.commons.io.FileUtils.writeByteArrayToFile(file79, byteArray86);
        org.apache.commons.io.FileUtils.writeByteArrayToFile(file42, byteArray86);
        boolean boolean90 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file22, file42, "1048576 EB");
        org.apache.commons.io.FileUtils.writeStringToFile(file22, "52 bytes");
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(file18);
        org.junit.Assert.assertEquals(file18.getParent(), "hi!");
        org.junit.Assert.assertEquals(file18.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(file22);
        org.junit.Assert.assertEquals(file22.getParent(), "hi!");
        org.junit.Assert.assertEquals(file22.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(file29);
        org.junit.Assert.assertEquals(file29.getParent(), "hi!");
        org.junit.Assert.assertEquals(file29.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(file38);
        org.junit.Assert.assertEquals(file38.getParent(), "hi!");
        org.junit.Assert.assertEquals(file38.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(file42);
        org.junit.Assert.assertEquals(file42.getParent(), "hi!");
        org.junit.Assert.assertEquals(file42.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(lineIterator46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(file53);
        org.junit.Assert.assertEquals(file53.getParent(), "hi!");
        org.junit.Assert.assertEquals(file53.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(file57);
        org.junit.Assert.assertEquals(file57.getParent(), "hi!");
        org.junit.Assert.assertEquals(file57.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(file64);
        org.junit.Assert.assertEquals(file64.getParent(), "hi!");
        org.junit.Assert.assertEquals(file64.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(file75);
        org.junit.Assert.assertEquals(file75.getParent(), "hi!");
        org.junit.Assert.assertEquals(file75.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(file79);
        org.junit.Assert.assertEquals(file79.getParent(), "hi!");
        org.junit.Assert.assertEquals(file79.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(lineIterator83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[]");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
    }

    @Test
    public void test419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test419");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean12 = org.apache.commons.io.FileUtils.deleteQuietly(file7);
        org.apache.commons.io.FileUtils.forceDeleteOnExit(file7);
        java.math.BigInteger bigInteger14 = org.apache.commons.io.FileUtils.sizeOfAsBigInteger(file7);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "100 bytes", "52 bytes", "1048576 EB", "hi!", "hi!", "-1 bytes", "", "C:\\Users\\Mathieu\\AppData\\Local\\Temp\\", "1 PB", "1 PB" };
        java.util.ArrayList<java.lang.String> strList27 = new java.util.ArrayList<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList27, strArray26);
        org.apache.commons.io.FileUtils.writeLines(file7, (java.util.Collection<java.lang.String>) strList27, true);
        java.lang.String[] strArray34 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file35 = org.apache.commons.io.FileUtils.getFile(strArray34);
        java.lang.String[] strArray38 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file39 = org.apache.commons.io.FileUtils.getFile(strArray38);
        boolean boolean40 = org.apache.commons.io.FileUtils.isFileOlder(file35, file39);
        boolean boolean42 = org.apache.commons.io.FileUtils.waitFor(file39, (int) '4');
        org.apache.commons.io.LineIterator lineIterator43 = org.apache.commons.io.FileUtils.lineIterator(file39);
        boolean boolean44 = org.apache.commons.io.FileUtils.deleteQuietly(file39);
        org.apache.commons.io.FileUtils.writeStringToFile(file39, "");
        java.lang.String[] strArray49 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file50 = org.apache.commons.io.FileUtils.getFile(strArray49);
        java.lang.String[] strArray53 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file54 = org.apache.commons.io.FileUtils.getFile(strArray53);
        boolean boolean55 = org.apache.commons.io.FileUtils.isFileOlder(file50, file54);
        boolean boolean57 = org.apache.commons.io.FileUtils.waitFor(file54, (int) '4');
        java.lang.String[] strArray60 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file61 = org.apache.commons.io.FileUtils.getFile(strArray60);
        boolean boolean63 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file54, file61, "");
        java.io.FileOutputStream fileOutputStream65 = org.apache.commons.io.FileUtils.openOutputStream(file54, false);
        java.lang.String[] strArray72 = new java.lang.String[] { "", "1048576 EB", "C:\\Users\\Mathieu\\AppData\\Local\\Temp\\", "C:\\Users\\Mathieu", "", "1048576 EB" };
        java.util.ArrayList<java.lang.String> strList73 = new java.util.ArrayList<java.lang.String>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList73, strArray72);
        org.apache.commons.io.FileUtils.writeLines(file54, (java.util.Collection<java.lang.String>) strList73, "1 GB", false);
        org.apache.commons.io.FileUtils.writeLines(file39, (java.util.Collection<java.lang.String>) strList73, true);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.writeLines(file7, "1 GB", (java.util.Collection<java.lang.String>) strList73);
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: 1 GB");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(bigInteger14);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(file35);
        org.junit.Assert.assertEquals(file35.getParent(), "hi!");
        org.junit.Assert.assertEquals(file35.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(file39);
        org.junit.Assert.assertEquals(file39.getParent(), "hi!");
        org.junit.Assert.assertEquals(file39.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(lineIterator43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(file50);
        org.junit.Assert.assertEquals(file50.getParent(), "hi!");
        org.junit.Assert.assertEquals(file50.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(file54);
        org.junit.Assert.assertEquals(file54.getParent(), "hi!");
        org.junit.Assert.assertEquals(file54.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(file61);
        org.junit.Assert.assertEquals(file61.getParent(), "hi!");
        org.junit.Assert.assertEquals(file61.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(fileOutputStream65);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
    }

    @Test
    public void test420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test420");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file14 = org.apache.commons.io.FileUtils.getFile(strArray13);
        boolean boolean16 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file7, file14, "");
        java.io.FileOutputStream fileOutputStream18 = org.apache.commons.io.FileUtils.openOutputStream(file7, false);
        java.lang.String[] strArray21 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file22 = org.apache.commons.io.FileUtils.getFile(strArray21);
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file26 = org.apache.commons.io.FileUtils.getFile(strArray25);
        boolean boolean27 = org.apache.commons.io.FileUtils.isFileOlder(file22, file26);
        boolean boolean29 = org.apache.commons.io.FileUtils.waitFor(file26, (int) '4');
        org.apache.commons.io.LineIterator lineIterator30 = org.apache.commons.io.FileUtils.lineIterator(file26);
        boolean boolean31 = org.apache.commons.io.FileUtils.deleteQuietly(file26);
        org.apache.commons.io.FileUtils.write(file26, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset35 = null;
        org.apache.commons.io.FileUtils.write(file26, (java.lang.CharSequence) "", charset35, true);
        java.nio.charset.Charset charset39 = null;
        org.apache.commons.io.FileUtils.writeStringToFile(file26, "", charset39, false);
        long long42 = org.apache.commons.io.FileUtils.sizeOf(file26);
        java.lang.String[] strArray45 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file46 = org.apache.commons.io.FileUtils.getFile(strArray45);
        java.lang.String[] strArray49 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file50 = org.apache.commons.io.FileUtils.getFile(strArray49);
        boolean boolean51 = org.apache.commons.io.FileUtils.isFileOlder(file46, file50);
        boolean boolean53 = org.apache.commons.io.FileUtils.waitFor(file50, (int) '4');
        org.apache.commons.io.LineIterator lineIterator54 = org.apache.commons.io.FileUtils.lineIterator(file50);
        boolean boolean55 = org.apache.commons.io.FileUtils.deleteQuietly(file50);
        org.apache.commons.io.FileUtils.write(file50, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset59 = null;
        org.apache.commons.io.FileUtils.write(file50, (java.lang.CharSequence) "", charset59, true);
        java.nio.charset.Charset charset63 = null;
        org.apache.commons.io.FileUtils.writeStringToFile(file50, "", charset63, false);
        long long66 = org.apache.commons.io.FileUtils.sizeOf(file50);
        org.apache.commons.io.FileUtils.writeStringToFile(file50, "");
        boolean boolean70 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file26, file50, "hi!");
        boolean boolean72 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file7, file50, "-1 bytes");
        java.lang.String[] strArray75 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file76 = org.apache.commons.io.FileUtils.getFile(strArray75);
        java.lang.String str77 = org.apache.commons.io.FileUtils.readFileToString(file76);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.moveToDirectory(file50, file76, false);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Destination 'hi!\\hi!' is not a directory");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(file14);
        org.junit.Assert.assertEquals(file14.getParent(), "hi!");
        org.junit.Assert.assertEquals(file14.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(fileOutputStream18);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(file22);
        org.junit.Assert.assertEquals(file22.getParent(), "hi!");
        org.junit.Assert.assertEquals(file22.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(file26);
        org.junit.Assert.assertEquals(file26.getParent(), "hi!");
        org.junit.Assert.assertEquals(file26.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(lineIterator30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(file46);
        org.junit.Assert.assertEquals(file46.getParent(), "hi!");
        org.junit.Assert.assertEquals(file46.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(file50);
        org.junit.Assert.assertEquals(file50.getParent(), "hi!");
        org.junit.Assert.assertEquals(file50.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(lineIterator54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 0L + "'", long66 == 0L);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(file76);
        org.junit.Assert.assertEquals(file76.getParent(), "hi!");
        org.junit.Assert.assertEquals(file76.toString(), "hi!\\hi!");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
    }

    @Test
    public void test421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test421");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean12 = org.apache.commons.io.FileUtils.deleteQuietly(file7);
        org.apache.commons.io.FileUtils.writeStringToFile(file7, "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file18 = org.apache.commons.io.FileUtils.getFile(strArray17);
        java.lang.String[] strArray21 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file22 = org.apache.commons.io.FileUtils.getFile(strArray21);
        boolean boolean23 = org.apache.commons.io.FileUtils.isFileOlder(file18, file22);
        boolean boolean25 = org.apache.commons.io.FileUtils.waitFor(file22, (int) '4');
        java.lang.String[] strArray28 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file29 = org.apache.commons.io.FileUtils.getFile(strArray28);
        boolean boolean31 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file22, file29, "");
        boolean boolean32 = org.apache.commons.io.FileUtils.isFileNewer(file7, file22);
        java.io.FileOutputStream fileOutputStream33 = org.apache.commons.io.FileUtils.openOutputStream(file7);
        java.io.FileOutputStream fileOutputStream35 = org.apache.commons.io.FileUtils.openOutputStream(file7, false);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.forceMkdir(file7);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: File hi!\\hi! exists and is not a directory. Unable to create directory.");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(file18);
        org.junit.Assert.assertEquals(file18.getParent(), "hi!");
        org.junit.Assert.assertEquals(file18.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(file22);
        org.junit.Assert.assertEquals(file22.getParent(), "hi!");
        org.junit.Assert.assertEquals(file22.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(file29);
        org.junit.Assert.assertEquals(file29.getParent(), "hi!");
        org.junit.Assert.assertEquals(file29.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(fileOutputStream33);
        org.junit.Assert.assertNotNull(fileOutputStream35);
    }

    @Test
    public void test422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test422");
        java.io.File file0 = org.apache.commons.io.FileUtils.getTempDirectory();
        java.lang.String[] strArray3 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file4 = org.apache.commons.io.FileUtils.getFile(strArray3);
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file8 = org.apache.commons.io.FileUtils.getFile(strArray7);
        boolean boolean9 = org.apache.commons.io.FileUtils.isFileOlder(file4, file8);
        boolean boolean11 = org.apache.commons.io.FileUtils.waitFor(file8, (int) '4');
        org.apache.commons.io.LineIterator lineIterator12 = org.apache.commons.io.FileUtils.lineIterator(file8);
        boolean boolean14 = org.apache.commons.io.FileUtils.isFileOlder(file8, (-1L));
        java.nio.charset.Charset charset15 = null;
        java.lang.String str16 = org.apache.commons.io.FileUtils.readFileToString(file8, charset15);
        java.io.FileOutputStream fileOutputStream18 = org.apache.commons.io.FileUtils.openOutputStream(file8, false);
        java.io.FileOutputStream fileOutputStream20 = org.apache.commons.io.FileUtils.openOutputStream(file8, true);
        boolean boolean21 = org.apache.commons.io.FileUtils.isFileOlder(file0, file8);
        java.nio.charset.Charset charset23 = null;
        org.apache.commons.io.FileUtils.writeStringToFile(file8, "hi!", charset23, true);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.write(file8, (java.lang.CharSequence) "32 bytes", "C:\\Users\\Mathieu\\AppData\\Local\\Temp\\");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: C:\\Users\\Mathieu\\AppData\\Local\\Temp\\");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(file0);
        org.junit.Assert.assertEquals(file0.getParent(), "C:\\Users\\Mathieu\\AppData\\Local");
        org.junit.Assert.assertEquals(file0.toString(), "C:\\Users\\Mathieu\\AppData\\Local\\Temp");
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(file4);
        org.junit.Assert.assertEquals(file4.getParent(), "hi!");
        org.junit.Assert.assertEquals(file4.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(file8);
        org.junit.Assert.assertEquals(file8.getParent(), "hi!");
        org.junit.Assert.assertEquals(file8.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(lineIterator12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(fileOutputStream18);
        org.junit.Assert.assertNotNull(fileOutputStream20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
    }

    @Test
    public void test423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test423");
        java.lang.Iterable<java.io.File> fileIterable0 = null;
        java.lang.String[] strArray3 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file4 = org.apache.commons.io.FileUtils.getFile(strArray3);
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file8 = org.apache.commons.io.FileUtils.getFile(strArray7);
        boolean boolean9 = org.apache.commons.io.FileUtils.isFileOlder(file4, file8);
        boolean boolean11 = org.apache.commons.io.FileUtils.waitFor(file8, (int) '4');
        java.lang.String[] strArray14 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file15 = org.apache.commons.io.FileUtils.getFile(strArray14);
        boolean boolean17 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file8, file15, "");
        java.io.FileOutputStream fileOutputStream19 = org.apache.commons.io.FileUtils.openOutputStream(file8, false);
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file23 = org.apache.commons.io.FileUtils.getFile(strArray22);
        java.lang.String[] strArray26 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file27 = org.apache.commons.io.FileUtils.getFile(strArray26);
        boolean boolean28 = org.apache.commons.io.FileUtils.isFileOlder(file23, file27);
        boolean boolean30 = org.apache.commons.io.FileUtils.waitFor(file27, (int) '4');
        org.apache.commons.io.LineIterator lineIterator31 = org.apache.commons.io.FileUtils.lineIterator(file27);
        boolean boolean32 = org.apache.commons.io.FileUtils.deleteQuietly(file27);
        org.apache.commons.io.FileUtils.write(file27, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset36 = null;
        org.apache.commons.io.FileUtils.write(file27, (java.lang.CharSequence) "", charset36, true);
        java.nio.charset.Charset charset40 = null;
        org.apache.commons.io.FileUtils.writeStringToFile(file27, "", charset40, false);
        long long43 = org.apache.commons.io.FileUtils.sizeOf(file27);
        java.lang.String[] strArray46 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file47 = org.apache.commons.io.FileUtils.getFile(strArray46);
        java.lang.String[] strArray50 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file51 = org.apache.commons.io.FileUtils.getFile(strArray50);
        boolean boolean52 = org.apache.commons.io.FileUtils.isFileOlder(file47, file51);
        boolean boolean54 = org.apache.commons.io.FileUtils.waitFor(file51, (int) '4');
        org.apache.commons.io.LineIterator lineIterator55 = org.apache.commons.io.FileUtils.lineIterator(file51);
        boolean boolean56 = org.apache.commons.io.FileUtils.deleteQuietly(file51);
        org.apache.commons.io.FileUtils.write(file51, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset60 = null;
        org.apache.commons.io.FileUtils.write(file51, (java.lang.CharSequence) "", charset60, true);
        java.nio.charset.Charset charset64 = null;
        org.apache.commons.io.FileUtils.writeStringToFile(file51, "", charset64, false);
        long long67 = org.apache.commons.io.FileUtils.sizeOf(file51);
        org.apache.commons.io.FileUtils.writeStringToFile(file51, "");
        boolean boolean71 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file27, file51, "hi!");
        boolean boolean73 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file8, file51, "-1 bytes");
        java.nio.charset.Charset charset75 = null;
        org.apache.commons.io.FileUtils.writeStringToFile(file51, "C:\\Users\\Mathieu", charset75, true);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.copyToDirectory(fileIterable0, file51);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: sourceIterable");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(file4);
        org.junit.Assert.assertEquals(file4.getParent(), "hi!");
        org.junit.Assert.assertEquals(file4.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(file8);
        org.junit.Assert.assertEquals(file8.getParent(), "hi!");
        org.junit.Assert.assertEquals(file8.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(file15);
        org.junit.Assert.assertEquals(file15.getParent(), "hi!");
        org.junit.Assert.assertEquals(file15.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(fileOutputStream19);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(file23);
        org.junit.Assert.assertEquals(file23.getParent(), "hi!");
        org.junit.Assert.assertEquals(file23.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(file27);
        org.junit.Assert.assertEquals(file27.getParent(), "hi!");
        org.junit.Assert.assertEquals(file27.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(lineIterator31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(file47);
        org.junit.Assert.assertEquals(file47.getParent(), "hi!");
        org.junit.Assert.assertEquals(file47.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(file51);
        org.junit.Assert.assertEquals(file51.getParent(), "hi!");
        org.junit.Assert.assertEquals(file51.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(lineIterator55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 0L + "'", long67 == 0L);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
    }

    @Test
    public void test424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test424");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean13 = org.apache.commons.io.FileUtils.isFileOlder(file7, (-1L));
        java.nio.charset.Charset charset14 = null;
        java.lang.String str15 = org.apache.commons.io.FileUtils.readFileToString(file7, charset14);
        org.apache.commons.io.FileUtils.writeStringToFile(file7, "hi!", true);
        java.lang.String[] strArray21 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file22 = org.apache.commons.io.FileUtils.getFile(strArray21);
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file26 = org.apache.commons.io.FileUtils.getFile(strArray25);
        boolean boolean27 = org.apache.commons.io.FileUtils.isFileOlder(file22, file26);
        boolean boolean29 = org.apache.commons.io.FileUtils.waitFor(file26, (int) '4');
        org.apache.commons.io.LineIterator lineIterator30 = org.apache.commons.io.FileUtils.lineIterator(file26);
        boolean boolean31 = org.apache.commons.io.FileUtils.deleteQuietly(file26);
        org.apache.commons.io.FileUtils.writeStringToFile(file26, "");
        java.lang.String[] strArray36 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file37 = org.apache.commons.io.FileUtils.getFile(strArray36);
        java.lang.String[] strArray40 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file41 = org.apache.commons.io.FileUtils.getFile(strArray40);
        boolean boolean42 = org.apache.commons.io.FileUtils.isFileOlder(file37, file41);
        boolean boolean44 = org.apache.commons.io.FileUtils.waitFor(file41, (int) '4');
        java.lang.String[] strArray47 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file48 = org.apache.commons.io.FileUtils.getFile(strArray47);
        boolean boolean50 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file41, file48, "");
        boolean boolean51 = org.apache.commons.io.FileUtils.isFileNewer(file26, file41);
        boolean boolean52 = org.apache.commons.io.FileUtils.isSymlink(file26);
        boolean boolean53 = org.apache.commons.io.FileUtils.isFileOlder(file7, file26);
        java.util.Date date54 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean55 = org.apache.commons.io.FileUtils.isFileOlder(file7, date54);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No specified date");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "C:\\Users\\Mathieu" + "'", str15, "C:\\Users\\Mathieu");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(file22);
        org.junit.Assert.assertEquals(file22.getParent(), "hi!");
        org.junit.Assert.assertEquals(file22.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(file26);
        org.junit.Assert.assertEquals(file26.getParent(), "hi!");
        org.junit.Assert.assertEquals(file26.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(lineIterator30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(file37);
        org.junit.Assert.assertEquals(file37.getParent(), "hi!");
        org.junit.Assert.assertEquals(file37.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(file41);
        org.junit.Assert.assertEquals(file41.getParent(), "hi!");
        org.junit.Assert.assertEquals(file41.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(file48);
        org.junit.Assert.assertEquals(file48.getParent(), "hi!");
        org.junit.Assert.assertEquals(file48.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test425");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean12 = org.apache.commons.io.FileUtils.deleteQuietly(file7);
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset16 = null;
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "", charset16, true);
        java.nio.charset.Charset charset20 = null;
        org.apache.commons.io.FileUtils.writeStringToFile(file7, "", charset20, false);
        long long23 = org.apache.commons.io.FileUtils.sizeOf(file7);
        java.lang.String[] strArray26 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file27 = org.apache.commons.io.FileUtils.getFile(strArray26);
        java.lang.String[] strArray30 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file31 = org.apache.commons.io.FileUtils.getFile(strArray30);
        boolean boolean32 = org.apache.commons.io.FileUtils.isFileOlder(file27, file31);
        boolean boolean34 = org.apache.commons.io.FileUtils.waitFor(file31, (int) '4');
        org.apache.commons.io.LineIterator lineIterator35 = org.apache.commons.io.FileUtils.lineIterator(file31);
        boolean boolean36 = org.apache.commons.io.FileUtils.deleteQuietly(file31);
        org.apache.commons.io.FileUtils.write(file31, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset40 = null;
        org.apache.commons.io.FileUtils.write(file31, (java.lang.CharSequence) "", charset40, true);
        java.nio.charset.Charset charset44 = null;
        org.apache.commons.io.FileUtils.writeStringToFile(file31, "", charset44, false);
        long long47 = org.apache.commons.io.FileUtils.sizeOf(file31);
        org.apache.commons.io.FileUtils.writeStringToFile(file31, "");
        boolean boolean51 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file7, file31, "hi!");
        java.lang.String[] strArray54 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file55 = org.apache.commons.io.FileUtils.getFile(strArray54);
        java.lang.String[] strArray56 = new java.lang.String[] {};
        java.io.File file57 = org.apache.commons.io.FileUtils.getFile(strArray56);
        java.io.File file58 = org.apache.commons.io.FileUtils.getFile(file55, strArray56);
        java.lang.String[] strArray61 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file62 = org.apache.commons.io.FileUtils.getFile(strArray61);
        java.lang.String[] strArray65 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file66 = org.apache.commons.io.FileUtils.getFile(strArray65);
        boolean boolean67 = org.apache.commons.io.FileUtils.isFileOlder(file62, file66);
        boolean boolean69 = org.apache.commons.io.FileUtils.waitFor(file66, (int) '4');
        org.apache.commons.io.LineIterator lineIterator70 = org.apache.commons.io.FileUtils.lineIterator(file66);
        boolean boolean72 = org.apache.commons.io.FileUtils.isFileOlder(file66, (-1L));
        java.io.FileOutputStream fileOutputStream74 = org.apache.commons.io.FileUtils.openOutputStream(file66, false);
        long long75 = org.apache.commons.io.FileUtils.copyFile(file55, (java.io.OutputStream) fileOutputStream74);
        boolean boolean76 = org.apache.commons.io.FileUtils.isFileOlder(file7, file55);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.writeStringToFile(file55, "1048576 EB", "1 GB", false);
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: 1 GB");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(file27);
        org.junit.Assert.assertEquals(file27.getParent(), "hi!");
        org.junit.Assert.assertEquals(file27.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(file31);
        org.junit.Assert.assertEquals(file31.getParent(), "hi!");
        org.junit.Assert.assertEquals(file31.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(lineIterator35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(file55);
        org.junit.Assert.assertEquals(file55.getParent(), "hi!");
        org.junit.Assert.assertEquals(file55.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNull(file57);
        org.junit.Assert.assertNotNull(file58);
        org.junit.Assert.assertEquals(file58.getParent(), "hi!");
        org.junit.Assert.assertEquals(file58.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(file62);
        org.junit.Assert.assertEquals(file62.getParent(), "hi!");
        org.junit.Assert.assertEquals(file62.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(file66);
        org.junit.Assert.assertEquals(file66.getParent(), "hi!");
        org.junit.Assert.assertEquals(file66.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(lineIterator70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(fileOutputStream74);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 0L + "'", long75 == 0L);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test426");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean13 = org.apache.commons.io.FileUtils.isFileOlder(file7, (-1L));
        java.nio.charset.Charset charset14 = null;
        java.lang.String str15 = org.apache.commons.io.FileUtils.readFileToString(file7, charset14);
        java.io.FileOutputStream fileOutputStream17 = org.apache.commons.io.FileUtils.openOutputStream(file7, false);
        org.apache.commons.io.LineIterator lineIterator18 = org.apache.commons.io.FileUtils.lineIterator(file7);
        org.apache.commons.io.FileUtils.writeStringToFile(file7, "-1 bytes", false);
        java.nio.charset.Charset charset23 = null;
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "32 bytes", charset23);
        long long25 = org.apache.commons.io.FileUtils.checksumCRC32(file7);
        java.lang.String[] strArray28 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file29 = org.apache.commons.io.FileUtils.getFile(strArray28);
        java.lang.String[] strArray32 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file33 = org.apache.commons.io.FileUtils.getFile(strArray32);
        boolean boolean34 = org.apache.commons.io.FileUtils.isFileOlder(file29, file33);
        boolean boolean36 = org.apache.commons.io.FileUtils.waitFor(file33, (int) '4');
        org.apache.commons.io.LineIterator lineIterator37 = org.apache.commons.io.FileUtils.lineIterator(file33);
        boolean boolean39 = org.apache.commons.io.FileUtils.isFileOlder(file33, (-1L));
        byte[] byteArray40 = new byte[] {};
        org.apache.commons.io.FileUtils.writeByteArrayToFile(file33, byteArray40);
        java.lang.String[] strArray44 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file45 = org.apache.commons.io.FileUtils.getFile(strArray44);
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file49 = org.apache.commons.io.FileUtils.getFile(strArray48);
        boolean boolean50 = org.apache.commons.io.FileUtils.isFileOlder(file45, file49);
        boolean boolean52 = org.apache.commons.io.FileUtils.waitFor(file49, (int) '4');
        org.apache.commons.io.LineIterator lineIterator53 = org.apache.commons.io.FileUtils.lineIterator(file49);
        boolean boolean55 = org.apache.commons.io.FileUtils.isFileOlder(file49, (-1L));
        java.io.FileOutputStream fileOutputStream57 = org.apache.commons.io.FileUtils.openOutputStream(file49, false);
        long long58 = org.apache.commons.io.FileUtils.copyFile(file33, (java.io.OutputStream) fileOutputStream57);
        java.nio.charset.Charset charset59 = null;
        java.lang.String str60 = org.apache.commons.io.FileUtils.readFileToString(file33, charset59);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.copyDirectory(file7, file33, true);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Source 'hi!\\hi!' exists but is not a directory");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(fileOutputStream17);
        org.junit.Assert.assertNotNull(lineIterator18);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 562794089L + "'", long25 == 562794089L);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(file29);
        org.junit.Assert.assertEquals(file29.getParent(), "hi!");
        org.junit.Assert.assertEquals(file29.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(file33);
        org.junit.Assert.assertEquals(file33.getParent(), "hi!");
        org.junit.Assert.assertEquals(file33.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(lineIterator37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(file45);
        org.junit.Assert.assertEquals(file45.getParent(), "hi!");
        org.junit.Assert.assertEquals(file45.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(file49);
        org.junit.Assert.assertEquals(file49.getParent(), "hi!");
        org.junit.Assert.assertEquals(file49.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(lineIterator53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(fileOutputStream57);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 0L + "'", long58 == 0L);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
    }

    @Test
    public void test427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test427");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean12 = org.apache.commons.io.FileUtils.deleteQuietly(file7);
        org.apache.commons.io.FileUtils.writeStringToFile(file7, "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file18 = org.apache.commons.io.FileUtils.getFile(strArray17);
        java.lang.String[] strArray21 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file22 = org.apache.commons.io.FileUtils.getFile(strArray21);
        boolean boolean23 = org.apache.commons.io.FileUtils.isFileOlder(file18, file22);
        boolean boolean25 = org.apache.commons.io.FileUtils.waitFor(file22, (int) '4');
        java.lang.String[] strArray28 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file29 = org.apache.commons.io.FileUtils.getFile(strArray28);
        boolean boolean31 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file22, file29, "");
        boolean boolean32 = org.apache.commons.io.FileUtils.isFileNewer(file7, file22);
        java.io.File file33 = null;
        boolean boolean34 = org.apache.commons.io.FileUtils.contentEquals(file22, file33);
        org.apache.commons.io.FileUtils.touch(file22);
        java.lang.String str36 = org.apache.commons.io.FileUtils.readFileToString(file22);
        org.apache.commons.io.FileUtils.forceMkdirParent(file22);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.write(file22, (java.lang.CharSequence) "35 bytes", "1 PB");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: 1 PB");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(file18);
        org.junit.Assert.assertEquals(file18.getParent(), "hi!");
        org.junit.Assert.assertEquals(file18.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(file22);
        org.junit.Assert.assertEquals(file22.getParent(), "hi!");
        org.junit.Assert.assertEquals(file22.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(file29);
        org.junit.Assert.assertEquals(file29.getParent(), "hi!");
        org.junit.Assert.assertEquals(file29.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
    }

    @Test
    public void test428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test428");
        java.io.File file0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigInteger bigInteger1 = org.apache.commons.io.FileUtils.sizeOfDirectoryAsBigInteger(file0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.File.exists()\" because \"directory\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test429");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean13 = org.apache.commons.io.FileUtils.isFileOlder(file7, (-1L));
        long long14 = org.apache.commons.io.FileUtils.sizeOf(file7);
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file18 = org.apache.commons.io.FileUtils.getFile(strArray17);
        java.lang.String[] strArray21 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file22 = org.apache.commons.io.FileUtils.getFile(strArray21);
        boolean boolean23 = org.apache.commons.io.FileUtils.isFileOlder(file18, file22);
        boolean boolean25 = org.apache.commons.io.FileUtils.waitFor(file22, (int) '4');
        java.lang.String[] strArray28 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file29 = org.apache.commons.io.FileUtils.getFile(strArray28);
        boolean boolean31 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file22, file29, "");
        org.apache.commons.io.LineIterator lineIterator32 = org.apache.commons.io.FileUtils.lineIterator(file22);
        org.apache.commons.io.FileUtils.writeStringToFile(file22, "C:\\Users\\Mathieu\\AppData\\Local\\Temp\\", false);
        java.lang.String[] strArray38 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file39 = org.apache.commons.io.FileUtils.getFile(strArray38);
        java.lang.String[] strArray42 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file43 = org.apache.commons.io.FileUtils.getFile(strArray42);
        boolean boolean44 = org.apache.commons.io.FileUtils.isFileOlder(file39, file43);
        java.lang.String str45 = org.apache.commons.io.FileUtils.readFileToString(file39);
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file49 = org.apache.commons.io.FileUtils.getFile(strArray48);
        java.io.File file50 = org.apache.commons.io.FileUtils.getFile(file39, strArray48);
        boolean boolean52 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file22, file50, "-1 bytes");
        org.apache.commons.io.FileUtils.forceDeleteOnExit(file50);
        java.io.FileFilter fileFilter54 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.copyDirectory(file7, file50, fileFilter54);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Source 'hi!\\hi!' exists but is not a directory");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(file18);
        org.junit.Assert.assertEquals(file18.getParent(), "hi!");
        org.junit.Assert.assertEquals(file18.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(file22);
        org.junit.Assert.assertEquals(file22.getParent(), "hi!");
        org.junit.Assert.assertEquals(file22.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(file29);
        org.junit.Assert.assertEquals(file29.getParent(), "hi!");
        org.junit.Assert.assertEquals(file29.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(lineIterator32);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(file39);
        org.junit.Assert.assertEquals(file39.getParent(), "hi!");
        org.junit.Assert.assertEquals(file39.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(file43);
        org.junit.Assert.assertEquals(file43.getParent(), "hi!");
        org.junit.Assert.assertEquals(file43.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "C:\\Users\\Mathieu\\AppData\\Local\\Temp\\" + "'", str45, "C:\\Users\\Mathieu\\AppData\\Local\\Temp\\");
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(file49);
        org.junit.Assert.assertEquals(file49.getParent(), "hi!");
        org.junit.Assert.assertEquals(file49.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(file50);
        org.junit.Assert.assertEquals(file50.getParent(), "hi!\\hi!\\hi!");
        org.junit.Assert.assertEquals(file50.toString(), "hi!\\hi!\\hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test430");
        java.net.URL uRL0 = null;
        java.lang.String[] strArray3 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file4 = org.apache.commons.io.FileUtils.getFile(strArray3);
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file8 = org.apache.commons.io.FileUtils.getFile(strArray7);
        boolean boolean9 = org.apache.commons.io.FileUtils.isFileOlder(file4, file8);
        boolean boolean11 = org.apache.commons.io.FileUtils.waitFor(file8, (int) '4');
        org.apache.commons.io.LineIterator lineIterator12 = org.apache.commons.io.FileUtils.lineIterator(file8);
        boolean boolean13 = org.apache.commons.io.FileUtils.deleteQuietly(file8);
        org.apache.commons.io.FileUtils.writeStringToFile(file8, "");
        java.lang.String[] strArray18 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file19 = org.apache.commons.io.FileUtils.getFile(strArray18);
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file23 = org.apache.commons.io.FileUtils.getFile(strArray22);
        boolean boolean24 = org.apache.commons.io.FileUtils.isFileOlder(file19, file23);
        boolean boolean26 = org.apache.commons.io.FileUtils.waitFor(file23, (int) '4');
        java.lang.String[] strArray29 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file30 = org.apache.commons.io.FileUtils.getFile(strArray29);
        boolean boolean32 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file23, file30, "");
        boolean boolean33 = org.apache.commons.io.FileUtils.isFileNewer(file8, file23);
        java.io.File file34 = null;
        boolean boolean35 = org.apache.commons.io.FileUtils.contentEquals(file23, file34);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.copyURLToFile(uRL0, file34, 10, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.net.URL.openConnection()\" because \"source\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(file4);
        org.junit.Assert.assertEquals(file4.getParent(), "hi!");
        org.junit.Assert.assertEquals(file4.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(file8);
        org.junit.Assert.assertEquals(file8.getParent(), "hi!");
        org.junit.Assert.assertEquals(file8.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(lineIterator12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(file19);
        org.junit.Assert.assertEquals(file19.getParent(), "hi!");
        org.junit.Assert.assertEquals(file19.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(file23);
        org.junit.Assert.assertEquals(file23.getParent(), "hi!");
        org.junit.Assert.assertEquals(file23.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(file30);
        org.junit.Assert.assertEquals(file30.getParent(), "hi!");
        org.junit.Assert.assertEquals(file30.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test431");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean12 = org.apache.commons.io.FileUtils.deleteQuietly(file7);
        org.apache.commons.io.FileUtils.writeStringToFile(file7, "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file18 = org.apache.commons.io.FileUtils.getFile(strArray17);
        java.lang.String[] strArray21 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file22 = org.apache.commons.io.FileUtils.getFile(strArray21);
        boolean boolean23 = org.apache.commons.io.FileUtils.isFileOlder(file18, file22);
        boolean boolean25 = org.apache.commons.io.FileUtils.waitFor(file22, (int) '4');
        java.lang.String[] strArray28 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file29 = org.apache.commons.io.FileUtils.getFile(strArray28);
        boolean boolean31 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file22, file29, "");
        java.io.FileOutputStream fileOutputStream33 = org.apache.commons.io.FileUtils.openOutputStream(file22, false);
        java.lang.String[] strArray40 = new java.lang.String[] { "", "1048576 EB", "C:\\Users\\Mathieu\\AppData\\Local\\Temp\\", "C:\\Users\\Mathieu", "", "1048576 EB" };
        java.util.ArrayList<java.lang.String> strList41 = new java.util.ArrayList<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList41, strArray40);
        org.apache.commons.io.FileUtils.writeLines(file22, (java.util.Collection<java.lang.String>) strList41, "1 GB", false);
        org.apache.commons.io.FileUtils.writeLines(file7, (java.util.Collection<java.lang.String>) strList41, true);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.forceMkdir(file7);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: File hi!\\hi! exists and is not a directory. Unable to create directory.");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(file18);
        org.junit.Assert.assertEquals(file18.getParent(), "hi!");
        org.junit.Assert.assertEquals(file18.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(file22);
        org.junit.Assert.assertEquals(file22.getParent(), "hi!");
        org.junit.Assert.assertEquals(file22.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(file29);
        org.junit.Assert.assertEquals(file29.getParent(), "hi!");
        org.junit.Assert.assertEquals(file29.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(fileOutputStream33);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
    }

    @Test
    public void test432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test432");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file14 = org.apache.commons.io.FileUtils.getFile(strArray13);
        boolean boolean16 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file7, file14, "");
        java.io.FileOutputStream fileOutputStream18 = org.apache.commons.io.FileUtils.openOutputStream(file7, false);
        java.lang.String[] strArray21 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file22 = org.apache.commons.io.FileUtils.getFile(strArray21);
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file26 = org.apache.commons.io.FileUtils.getFile(strArray25);
        boolean boolean27 = org.apache.commons.io.FileUtils.isFileOlder(file22, file26);
        boolean boolean29 = org.apache.commons.io.FileUtils.waitFor(file26, (int) '4');
        org.apache.commons.io.LineIterator lineIterator30 = org.apache.commons.io.FileUtils.lineIterator(file26);
        boolean boolean31 = org.apache.commons.io.FileUtils.deleteQuietly(file26);
        org.apache.commons.io.FileUtils.write(file26, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset35 = null;
        org.apache.commons.io.FileUtils.write(file26, (java.lang.CharSequence) "", charset35, true);
        java.nio.charset.Charset charset39 = null;
        org.apache.commons.io.FileUtils.writeStringToFile(file26, "", charset39, false);
        long long42 = org.apache.commons.io.FileUtils.sizeOf(file26);
        java.lang.String[] strArray45 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file46 = org.apache.commons.io.FileUtils.getFile(strArray45);
        java.lang.String[] strArray49 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file50 = org.apache.commons.io.FileUtils.getFile(strArray49);
        boolean boolean51 = org.apache.commons.io.FileUtils.isFileOlder(file46, file50);
        boolean boolean53 = org.apache.commons.io.FileUtils.waitFor(file50, (int) '4');
        org.apache.commons.io.LineIterator lineIterator54 = org.apache.commons.io.FileUtils.lineIterator(file50);
        boolean boolean55 = org.apache.commons.io.FileUtils.deleteQuietly(file50);
        org.apache.commons.io.FileUtils.write(file50, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset59 = null;
        org.apache.commons.io.FileUtils.write(file50, (java.lang.CharSequence) "", charset59, true);
        java.nio.charset.Charset charset63 = null;
        org.apache.commons.io.FileUtils.writeStringToFile(file50, "", charset63, false);
        long long66 = org.apache.commons.io.FileUtils.sizeOf(file50);
        org.apache.commons.io.FileUtils.writeStringToFile(file50, "");
        boolean boolean70 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file26, file50, "hi!");
        boolean boolean72 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file7, file50, "-1 bytes");
        boolean boolean73 = org.apache.commons.io.FileUtils.isSymlink(file7);
        java.nio.charset.Charset charset75 = null;
        org.apache.commons.io.FileUtils.writeStringToFile(file7, "0 bytes", charset75, true);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(file14);
        org.junit.Assert.assertEquals(file14.getParent(), "hi!");
        org.junit.Assert.assertEquals(file14.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(fileOutputStream18);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(file22);
        org.junit.Assert.assertEquals(file22.getParent(), "hi!");
        org.junit.Assert.assertEquals(file22.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(file26);
        org.junit.Assert.assertEquals(file26.getParent(), "hi!");
        org.junit.Assert.assertEquals(file26.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(lineIterator30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(file46);
        org.junit.Assert.assertEquals(file46.getParent(), "hi!");
        org.junit.Assert.assertEquals(file46.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(file50);
        org.junit.Assert.assertEquals(file50.getParent(), "hi!");
        org.junit.Assert.assertEquals(file50.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(lineIterator54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 0L + "'", long66 == 0L);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test433");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean12 = org.apache.commons.io.FileUtils.deleteQuietly(file7);
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset16 = null;
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "", charset16, true);
        byte[] byteArray19 = org.apache.commons.io.FileUtils.readFileToByteArray(file7);
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file23 = org.apache.commons.io.FileUtils.getFile(strArray22);
        java.lang.String[] strArray26 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file27 = org.apache.commons.io.FileUtils.getFile(strArray26);
        boolean boolean28 = org.apache.commons.io.FileUtils.isFileOlder(file23, file27);
        boolean boolean30 = org.apache.commons.io.FileUtils.waitFor(file27, (int) '4');
        boolean boolean31 = org.apache.commons.io.FileUtils.isFileOlder(file7, file27);
        java.lang.String[] strArray34 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file35 = org.apache.commons.io.FileUtils.getFile(strArray34);
        java.lang.String[] strArray38 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file39 = org.apache.commons.io.FileUtils.getFile(strArray38);
        boolean boolean40 = org.apache.commons.io.FileUtils.isFileOlder(file35, file39);
        boolean boolean42 = org.apache.commons.io.FileUtils.waitFor(file39, (int) '4');
        java.lang.String[] strArray45 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file46 = org.apache.commons.io.FileUtils.getFile(strArray45);
        boolean boolean48 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file39, file46, "");
        org.apache.commons.io.LineIterator lineIterator49 = org.apache.commons.io.FileUtils.lineIterator(file39);
        org.apache.commons.io.FileUtils.writeStringToFile(file39, "C:\\Users\\Mathieu\\AppData\\Local\\Temp\\", false);
        java.nio.charset.Charset charset54 = null;
        org.apache.commons.io.FileUtils.write(file39, (java.lang.CharSequence) "", charset54, true);
        java.lang.String[] strArray59 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file60 = org.apache.commons.io.FileUtils.getFile(strArray59);
        java.lang.String[] strArray63 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file64 = org.apache.commons.io.FileUtils.getFile(strArray63);
        boolean boolean65 = org.apache.commons.io.FileUtils.isFileOlder(file60, file64);
        boolean boolean67 = org.apache.commons.io.FileUtils.waitFor(file64, (int) '4');
        org.apache.commons.io.LineIterator lineIterator68 = org.apache.commons.io.FileUtils.lineIterator(file64);
        boolean boolean69 = org.apache.commons.io.FileUtils.deleteQuietly(file64);
        org.apache.commons.io.FileUtils.write(file64, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset73 = null;
        org.apache.commons.io.FileUtils.write(file64, (java.lang.CharSequence) "", charset73, true);
        byte[] byteArray76 = org.apache.commons.io.FileUtils.readFileToByteArray(file64);
        org.apache.commons.io.FileUtils.writeByteArrayToFile(file39, byteArray76);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.writeByteArrayToFile(file7, byteArray76, (int) (short) 10, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[104, 105, 33]");
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(file23);
        org.junit.Assert.assertEquals(file23.getParent(), "hi!");
        org.junit.Assert.assertEquals(file23.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(file27);
        org.junit.Assert.assertEquals(file27.getParent(), "hi!");
        org.junit.Assert.assertEquals(file27.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(file35);
        org.junit.Assert.assertEquals(file35.getParent(), "hi!");
        org.junit.Assert.assertEquals(file35.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(file39);
        org.junit.Assert.assertEquals(file39.getParent(), "hi!");
        org.junit.Assert.assertEquals(file39.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(file46);
        org.junit.Assert.assertEquals(file46.getParent(), "hi!");
        org.junit.Assert.assertEquals(file46.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(lineIterator49);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(file60);
        org.junit.Assert.assertEquals(file60.getParent(), "hi!");
        org.junit.Assert.assertEquals(file60.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(file64);
        org.junit.Assert.assertEquals(file64.getParent(), "hi!");
        org.junit.Assert.assertEquals(file64.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(lineIterator68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[104, 105, 33]");
    }

    @Test
    public void test434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test434");
        java.io.File file0 = org.apache.commons.io.FileUtils.getTempDirectory();
        java.lang.String[] strArray3 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file4 = org.apache.commons.io.FileUtils.getFile(strArray3);
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file8 = org.apache.commons.io.FileUtils.getFile(strArray7);
        boolean boolean9 = org.apache.commons.io.FileUtils.isFileOlder(file4, file8);
        boolean boolean11 = org.apache.commons.io.FileUtils.waitFor(file8, (int) '4');
        org.apache.commons.io.LineIterator lineIterator12 = org.apache.commons.io.FileUtils.lineIterator(file8);
        boolean boolean14 = org.apache.commons.io.FileUtils.isFileOlder(file8, (-1L));
        java.nio.charset.Charset charset15 = null;
        java.lang.String str16 = org.apache.commons.io.FileUtils.readFileToString(file8, charset15);
        java.io.FileOutputStream fileOutputStream18 = org.apache.commons.io.FileUtils.openOutputStream(file8, false);
        java.io.FileOutputStream fileOutputStream20 = org.apache.commons.io.FileUtils.openOutputStream(file8, true);
        boolean boolean21 = org.apache.commons.io.FileUtils.isFileOlder(file0, file8);
        java.nio.charset.Charset charset22 = null;
        java.util.List<java.lang.String> strList23 = org.apache.commons.io.FileUtils.readLines(file8, charset22);
        org.junit.Assert.assertNotNull(file0);
        org.junit.Assert.assertEquals(file0.getParent(), "C:\\Users\\Mathieu\\AppData\\Local");
        org.junit.Assert.assertEquals(file0.toString(), "C:\\Users\\Mathieu\\AppData\\Local\\Temp");
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(file4);
        org.junit.Assert.assertEquals(file4.getParent(), "hi!");
        org.junit.Assert.assertEquals(file4.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(file8);
        org.junit.Assert.assertEquals(file8.getParent(), "hi!");
        org.junit.Assert.assertEquals(file8.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(lineIterator12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(fileOutputStream18);
        org.junit.Assert.assertNotNull(fileOutputStream20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(strList23);
    }

    @Test
    public void test435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test435");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean12 = org.apache.commons.io.FileUtils.deleteQuietly(file7);
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset16 = null;
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "", charset16, true);
        byte[] byteArray19 = org.apache.commons.io.FileUtils.readFileToByteArray(file7);
        boolean boolean21 = org.apache.commons.io.FileUtils.waitFor(file7, (int) 'a');
        org.apache.commons.io.LineIterator lineIterator22 = org.apache.commons.io.FileUtils.lineIterator(file7);
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file26 = org.apache.commons.io.FileUtils.getFile(strArray25);
        java.lang.String[] strArray29 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file30 = org.apache.commons.io.FileUtils.getFile(strArray29);
        boolean boolean31 = org.apache.commons.io.FileUtils.isFileOlder(file26, file30);
        boolean boolean33 = org.apache.commons.io.FileUtils.waitFor(file30, (int) '4');
        org.apache.commons.io.LineIterator lineIterator34 = org.apache.commons.io.FileUtils.lineIterator(file30);
        boolean boolean35 = org.apache.commons.io.FileUtils.deleteQuietly(file30);
        org.apache.commons.io.FileUtils.writeStringToFile(file30, "");
        java.lang.String[] strArray40 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file41 = org.apache.commons.io.FileUtils.getFile(strArray40);
        java.lang.String[] strArray44 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file45 = org.apache.commons.io.FileUtils.getFile(strArray44);
        boolean boolean46 = org.apache.commons.io.FileUtils.isFileOlder(file41, file45);
        boolean boolean48 = org.apache.commons.io.FileUtils.waitFor(file45, (int) '4');
        java.lang.String[] strArray51 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file52 = org.apache.commons.io.FileUtils.getFile(strArray51);
        boolean boolean54 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file45, file52, "");
        boolean boolean55 = org.apache.commons.io.FileUtils.isFileNewer(file30, file45);
        java.io.File file56 = null;
        boolean boolean57 = org.apache.commons.io.FileUtils.contentEquals(file45, file56);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.copyFileToDirectory(file7, file56);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: destinationDir");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[104, 105, 33]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(lineIterator22);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(file26);
        org.junit.Assert.assertEquals(file26.getParent(), "hi!");
        org.junit.Assert.assertEquals(file26.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(file30);
        org.junit.Assert.assertEquals(file30.getParent(), "hi!");
        org.junit.Assert.assertEquals(file30.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(lineIterator34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(file41);
        org.junit.Assert.assertEquals(file41.getParent(), "hi!");
        org.junit.Assert.assertEquals(file41.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(file45);
        org.junit.Assert.assertEquals(file45.getParent(), "hi!");
        org.junit.Assert.assertEquals(file45.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(file52);
        org.junit.Assert.assertEquals(file52.getParent(), "hi!");
        org.junit.Assert.assertEquals(file52.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test436");
        java.io.File file0 = null;
        java.lang.String[] strArray3 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file4 = org.apache.commons.io.FileUtils.getFile(strArray3);
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file8 = org.apache.commons.io.FileUtils.getFile(strArray7);
        boolean boolean9 = org.apache.commons.io.FileUtils.isFileOlder(file4, file8);
        boolean boolean11 = org.apache.commons.io.FileUtils.waitFor(file8, (int) '4');
        org.apache.commons.io.LineIterator lineIterator12 = org.apache.commons.io.FileUtils.lineIterator(file8);
        boolean boolean13 = org.apache.commons.io.FileUtils.deleteQuietly(file8);
        org.apache.commons.io.FileUtils.write(file8, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset17 = null;
        org.apache.commons.io.FileUtils.write(file8, (java.lang.CharSequence) "", charset17, true);
        java.nio.charset.Charset charset21 = null;
        org.apache.commons.io.FileUtils.writeStringToFile(file8, "", charset21, false);
        long long24 = org.apache.commons.io.FileUtils.sizeOf(file8);
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file28 = org.apache.commons.io.FileUtils.getFile(strArray27);
        java.lang.String[] strArray31 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file32 = org.apache.commons.io.FileUtils.getFile(strArray31);
        boolean boolean33 = org.apache.commons.io.FileUtils.isFileOlder(file28, file32);
        boolean boolean35 = org.apache.commons.io.FileUtils.waitFor(file32, (int) '4');
        org.apache.commons.io.LineIterator lineIterator36 = org.apache.commons.io.FileUtils.lineIterator(file32);
        boolean boolean37 = org.apache.commons.io.FileUtils.deleteQuietly(file32);
        org.apache.commons.io.FileUtils.write(file32, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset41 = null;
        org.apache.commons.io.FileUtils.write(file32, (java.lang.CharSequence) "", charset41, true);
        java.nio.charset.Charset charset45 = null;
        org.apache.commons.io.FileUtils.writeStringToFile(file32, "", charset45, false);
        long long48 = org.apache.commons.io.FileUtils.sizeOf(file32);
        org.apache.commons.io.FileUtils.writeStringToFile(file32, "");
        boolean boolean52 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file8, file32, "hi!");
        java.io.FileInputStream fileInputStream53 = org.apache.commons.io.FileUtils.openInputStream(file8);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean54 = org.apache.commons.io.FileUtils.isFileNewer(file0, file8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No specified file");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(file4);
        org.junit.Assert.assertEquals(file4.getParent(), "hi!");
        org.junit.Assert.assertEquals(file4.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(file8);
        org.junit.Assert.assertEquals(file8.getParent(), "hi!");
        org.junit.Assert.assertEquals(file8.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(lineIterator12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(file28);
        org.junit.Assert.assertEquals(file28.getParent(), "hi!");
        org.junit.Assert.assertEquals(file28.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(file32);
        org.junit.Assert.assertEquals(file32.getParent(), "hi!");
        org.junit.Assert.assertEquals(file32.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(lineIterator36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(fileInputStream53);
    }

    @Test
    public void test437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test437");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean12 = org.apache.commons.io.FileUtils.deleteQuietly(file7);
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "hi!");
        long long15 = org.apache.commons.io.FileUtils.sizeOf(file7);
        org.apache.commons.io.FileUtils.touch(file7);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 3L + "'", long15 == 3L);
    }

    @Test
    public void test438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test438");
        java.lang.Iterable<java.io.File> fileIterable0 = null;
        java.lang.String[] strArray3 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file4 = org.apache.commons.io.FileUtils.getFile(strArray3);
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file8 = org.apache.commons.io.FileUtils.getFile(strArray7);
        boolean boolean9 = org.apache.commons.io.FileUtils.isFileOlder(file4, file8);
        boolean boolean10 = org.apache.commons.io.FileUtils.deleteQuietly(file8);
        java.nio.charset.Charset charset12 = null;
        org.apache.commons.io.FileUtils.write(file8, (java.lang.CharSequence) "", charset12, true);
        boolean boolean16 = org.apache.commons.io.FileUtils.isFileNewer(file8, 2035464173L);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.copyToDirectory(fileIterable0, file8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: sourceIterable");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(file4);
        org.junit.Assert.assertEquals(file4.getParent(), "hi!");
        org.junit.Assert.assertEquals(file4.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(file8);
        org.junit.Assert.assertEquals(file8.getParent(), "hi!");
        org.junit.Assert.assertEquals(file8.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test439");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file14 = org.apache.commons.io.FileUtils.getFile(strArray13);
        boolean boolean16 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file7, file14, "");
        org.apache.commons.io.LineIterator lineIterator17 = org.apache.commons.io.FileUtils.lineIterator(file7);
        java.lang.String[] strArray20 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file21 = org.apache.commons.io.FileUtils.getFile(strArray20);
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file25 = org.apache.commons.io.FileUtils.getFile(strArray24);
        boolean boolean26 = org.apache.commons.io.FileUtils.isFileOlder(file21, file25);
        boolean boolean28 = org.apache.commons.io.FileUtils.waitFor(file25, (int) '4');
        org.apache.commons.io.LineIterator lineIterator29 = org.apache.commons.io.FileUtils.lineIterator(file25);
        boolean boolean30 = org.apache.commons.io.FileUtils.deleteQuietly(file25);
        org.apache.commons.io.FileUtils.write(file25, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset34 = null;
        org.apache.commons.io.FileUtils.write(file25, (java.lang.CharSequence) "", charset34, true);
        java.nio.charset.Charset charset38 = null;
        org.apache.commons.io.FileUtils.writeStringToFile(file25, "", charset38, false);
        long long41 = org.apache.commons.io.FileUtils.sizeOf(file25);
        org.apache.commons.io.FileUtils.writeStringToFile(file25, "");
        java.nio.charset.Charset charset44 = null;
        java.util.List<java.lang.String> strList45 = org.apache.commons.io.FileUtils.readLines(file25, charset44);
        org.apache.commons.io.FileUtils.writeLines(file7, (java.util.Collection<java.lang.String>) strList45);
        java.io.File file47 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.copyFileToDirectory(file7, file47);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: destinationDir");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(file14);
        org.junit.Assert.assertEquals(file14.getParent(), "hi!");
        org.junit.Assert.assertEquals(file14.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(lineIterator17);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(file21);
        org.junit.Assert.assertEquals(file21.getParent(), "hi!");
        org.junit.Assert.assertEquals(file21.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(file25);
        org.junit.Assert.assertEquals(file25.getParent(), "hi!");
        org.junit.Assert.assertEquals(file25.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(lineIterator29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertNotNull(strList45);
    }

    @Test
    public void test440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test440");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean9 = org.apache.commons.io.FileUtils.deleteQuietly(file7);
        byte[] byteArray10 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.writeByteArrayToFile(file7, byteArray10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"data\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test441");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        java.lang.String str9 = org.apache.commons.io.FileUtils.readFileToString(file3);
        org.apache.commons.io.FileUtils.writeStringToFile(file3, "", false);
        java.lang.String[] strArray15 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file16 = org.apache.commons.io.FileUtils.getFile(strArray15);
        java.lang.String[] strArray19 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file20 = org.apache.commons.io.FileUtils.getFile(strArray19);
        boolean boolean21 = org.apache.commons.io.FileUtils.isFileOlder(file16, file20);
        boolean boolean23 = org.apache.commons.io.FileUtils.waitFor(file20, (int) '4');
        org.apache.commons.io.LineIterator lineIterator24 = org.apache.commons.io.FileUtils.lineIterator(file20);
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file28 = org.apache.commons.io.FileUtils.getFile(strArray27);
        java.lang.String[] strArray31 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file32 = org.apache.commons.io.FileUtils.getFile(strArray31);
        boolean boolean33 = org.apache.commons.io.FileUtils.isFileOlder(file28, file32);
        boolean boolean35 = org.apache.commons.io.FileUtils.waitFor(file32, (int) '4');
        org.apache.commons.io.LineIterator lineIterator36 = org.apache.commons.io.FileUtils.lineIterator(file32);
        boolean boolean37 = org.apache.commons.io.FileUtils.deleteQuietly(file32);
        org.apache.commons.io.FileUtils.write(file32, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset41 = null;
        org.apache.commons.io.FileUtils.write(file32, (java.lang.CharSequence) "", charset41, true);
        byte[] byteArray44 = org.apache.commons.io.FileUtils.readFileToByteArray(file32);
        boolean boolean46 = org.apache.commons.io.FileUtils.waitFor(file32, (int) 'a');
        byte[] byteArray47 = org.apache.commons.io.FileUtils.readFileToByteArray(file32);
        org.apache.commons.io.FileUtils.writeByteArrayToFile(file20, byteArray47);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.moveDirectory(file3, file20);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Source 'hi!\\hi!' is not a directory");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(file16);
        org.junit.Assert.assertEquals(file16.getParent(), "hi!");
        org.junit.Assert.assertEquals(file16.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(file20);
        org.junit.Assert.assertEquals(file20.getParent(), "hi!");
        org.junit.Assert.assertEquals(file20.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(lineIterator24);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(file28);
        org.junit.Assert.assertEquals(file28.getParent(), "hi!");
        org.junit.Assert.assertEquals(file28.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(file32);
        org.junit.Assert.assertEquals(file32.getParent(), "hi!");
        org.junit.Assert.assertEquals(file32.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(lineIterator36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[104, 105, 33]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[104, 105, 33]");
    }

    @Test
    public void test442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test442");
        java.io.File file0 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean2 = org.apache.commons.io.FileUtils.waitFor(file0, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.File.exists()\" because \"file\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test443");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean13 = org.apache.commons.io.FileUtils.isFileOlder(file7, (-1L));
        java.nio.charset.Charset charset14 = null;
        java.lang.String str15 = org.apache.commons.io.FileUtils.readFileToString(file7, charset14);
        java.io.FileOutputStream fileOutputStream17 = org.apache.commons.io.FileUtils.openOutputStream(file7, false);
        org.apache.commons.io.LineIterator lineIterator18 = org.apache.commons.io.FileUtils.lineIterator(file7);
        java.lang.String[] strArray21 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file22 = org.apache.commons.io.FileUtils.getFile(strArray21);
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file26 = org.apache.commons.io.FileUtils.getFile(strArray25);
        boolean boolean27 = org.apache.commons.io.FileUtils.isFileOlder(file22, file26);
        boolean boolean29 = org.apache.commons.io.FileUtils.waitFor(file26, (int) '4');
        org.apache.commons.io.LineIterator lineIterator30 = org.apache.commons.io.FileUtils.lineIterator(file26);
        boolean boolean31 = org.apache.commons.io.FileUtils.deleteQuietly(file26);
        org.apache.commons.io.FileUtils.writeStringToFile(file26, "");
        java.lang.String[] strArray36 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file37 = org.apache.commons.io.FileUtils.getFile(strArray36);
        java.lang.String[] strArray40 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file41 = org.apache.commons.io.FileUtils.getFile(strArray40);
        boolean boolean42 = org.apache.commons.io.FileUtils.isFileOlder(file37, file41);
        boolean boolean44 = org.apache.commons.io.FileUtils.waitFor(file41, (int) '4');
        java.lang.String[] strArray47 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file48 = org.apache.commons.io.FileUtils.getFile(strArray47);
        boolean boolean50 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file41, file48, "");
        boolean boolean51 = org.apache.commons.io.FileUtils.isFileNewer(file26, file41);
        boolean boolean52 = org.apache.commons.io.FileUtils.contentEquals(file7, file26);
        boolean boolean54 = org.apache.commons.io.FileUtils.isFileNewer(file26, 0L);
        java.lang.String[] strArray57 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file58 = org.apache.commons.io.FileUtils.getFile(strArray57);
        java.lang.String[] strArray61 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file62 = org.apache.commons.io.FileUtils.getFile(strArray61);
        boolean boolean63 = org.apache.commons.io.FileUtils.isFileOlder(file58, file62);
        boolean boolean65 = org.apache.commons.io.FileUtils.waitFor(file62, (int) '4');
        org.apache.commons.io.LineIterator lineIterator66 = org.apache.commons.io.FileUtils.lineIterator(file62);
        boolean boolean67 = org.apache.commons.io.FileUtils.deleteQuietly(file62);
        org.apache.commons.io.FileUtils.writeStringToFile(file62, "");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.copyDirectoryToDirectory(file26, file62);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Source 'hi!\\hi!' is not a directory");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertNotNull(fileOutputStream17);
        org.junit.Assert.assertNotNull(lineIterator18);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(file22);
        org.junit.Assert.assertEquals(file22.getParent(), "hi!");
        org.junit.Assert.assertEquals(file22.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(file26);
        org.junit.Assert.assertEquals(file26.getParent(), "hi!");
        org.junit.Assert.assertEquals(file26.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(lineIterator30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(file37);
        org.junit.Assert.assertEquals(file37.getParent(), "hi!");
        org.junit.Assert.assertEquals(file37.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(file41);
        org.junit.Assert.assertEquals(file41.getParent(), "hi!");
        org.junit.Assert.assertEquals(file41.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(file48);
        org.junit.Assert.assertEquals(file48.getParent(), "hi!");
        org.junit.Assert.assertEquals(file48.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(file58);
        org.junit.Assert.assertEquals(file58.getParent(), "hi!");
        org.junit.Assert.assertEquals(file58.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(file62);
        org.junit.Assert.assertEquals(file62.getParent(), "hi!");
        org.junit.Assert.assertEquals(file62.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(lineIterator66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test444");
        java.io.File file0 = org.apache.commons.io.FileUtils.getTempDirectory();
        java.lang.String[] strArray3 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file4 = org.apache.commons.io.FileUtils.getFile(strArray3);
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file8 = org.apache.commons.io.FileUtils.getFile(strArray7);
        boolean boolean9 = org.apache.commons.io.FileUtils.isFileOlder(file4, file8);
        boolean boolean11 = org.apache.commons.io.FileUtils.waitFor(file8, (int) '4');
        org.apache.commons.io.LineIterator lineIterator12 = org.apache.commons.io.FileUtils.lineIterator(file8);
        boolean boolean14 = org.apache.commons.io.FileUtils.isFileOlder(file8, (-1L));
        java.nio.charset.Charset charset15 = null;
        java.lang.String str16 = org.apache.commons.io.FileUtils.readFileToString(file8, charset15);
        java.io.FileOutputStream fileOutputStream18 = org.apache.commons.io.FileUtils.openOutputStream(file8, false);
        java.io.FileOutputStream fileOutputStream20 = org.apache.commons.io.FileUtils.openOutputStream(file8, true);
        boolean boolean21 = org.apache.commons.io.FileUtils.isFileOlder(file0, file8);
        java.io.FileInputStream fileInputStream22 = org.apache.commons.io.FileUtils.openInputStream(file8);
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file26 = org.apache.commons.io.FileUtils.getFile(strArray25);
        java.lang.String[] strArray29 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file30 = org.apache.commons.io.FileUtils.getFile(strArray29);
        boolean boolean31 = org.apache.commons.io.FileUtils.isFileOlder(file26, file30);
        boolean boolean33 = org.apache.commons.io.FileUtils.waitFor(file30, (int) '4');
        org.apache.commons.io.LineIterator lineIterator34 = org.apache.commons.io.FileUtils.lineIterator(file30);
        boolean boolean36 = org.apache.commons.io.FileUtils.isFileOlder(file30, (-1L));
        java.nio.charset.Charset charset37 = null;
        java.lang.String str38 = org.apache.commons.io.FileUtils.readFileToString(file30, charset37);
        java.io.FileOutputStream fileOutputStream40 = org.apache.commons.io.FileUtils.openOutputStream(file30, false);
        org.apache.commons.io.LineIterator lineIterator41 = org.apache.commons.io.FileUtils.lineIterator(file30);
        java.lang.String[] strArray44 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file45 = org.apache.commons.io.FileUtils.getFile(strArray44);
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file49 = org.apache.commons.io.FileUtils.getFile(strArray48);
        boolean boolean50 = org.apache.commons.io.FileUtils.isFileOlder(file45, file49);
        boolean boolean52 = org.apache.commons.io.FileUtils.waitFor(file49, (int) '4');
        org.apache.commons.io.LineIterator lineIterator53 = org.apache.commons.io.FileUtils.lineIterator(file49);
        boolean boolean54 = org.apache.commons.io.FileUtils.deleteQuietly(file49);
        org.apache.commons.io.FileUtils.writeStringToFile(file49, "");
        java.lang.String[] strArray59 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file60 = org.apache.commons.io.FileUtils.getFile(strArray59);
        java.lang.String[] strArray63 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file64 = org.apache.commons.io.FileUtils.getFile(strArray63);
        boolean boolean65 = org.apache.commons.io.FileUtils.isFileOlder(file60, file64);
        boolean boolean67 = org.apache.commons.io.FileUtils.waitFor(file64, (int) '4');
        java.lang.String[] strArray70 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file71 = org.apache.commons.io.FileUtils.getFile(strArray70);
        boolean boolean73 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file64, file71, "");
        boolean boolean74 = org.apache.commons.io.FileUtils.isFileNewer(file49, file64);
        boolean boolean75 = org.apache.commons.io.FileUtils.contentEquals(file30, file49);
        org.apache.commons.io.FileUtils.copyInputStreamToFile((java.io.InputStream) fileInputStream22, file49);
        java.util.List<java.lang.String> strList77 = org.apache.commons.io.FileUtils.readLines(file49);
        org.junit.Assert.assertNotNull(file0);
        org.junit.Assert.assertEquals(file0.getParent(), "C:\\Users\\Mathieu\\AppData\\Local");
        org.junit.Assert.assertEquals(file0.toString(), "C:\\Users\\Mathieu\\AppData\\Local\\Temp");
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(file4);
        org.junit.Assert.assertEquals(file4.getParent(), "hi!");
        org.junit.Assert.assertEquals(file4.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(file8);
        org.junit.Assert.assertEquals(file8.getParent(), "hi!");
        org.junit.Assert.assertEquals(file8.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(lineIterator12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(fileOutputStream18);
        org.junit.Assert.assertNotNull(fileOutputStream20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(fileInputStream22);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(file26);
        org.junit.Assert.assertEquals(file26.getParent(), "hi!");
        org.junit.Assert.assertEquals(file26.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(file30);
        org.junit.Assert.assertEquals(file30.getParent(), "hi!");
        org.junit.Assert.assertEquals(file30.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(lineIterator34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(fileOutputStream40);
        org.junit.Assert.assertNotNull(lineIterator41);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(file45);
        org.junit.Assert.assertEquals(file45.getParent(), "hi!");
        org.junit.Assert.assertEquals(file45.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(file49);
        org.junit.Assert.assertEquals(file49.getParent(), "hi!");
        org.junit.Assert.assertEquals(file49.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(lineIterator53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(file60);
        org.junit.Assert.assertEquals(file60.getParent(), "hi!");
        org.junit.Assert.assertEquals(file60.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(file64);
        org.junit.Assert.assertEquals(file64.getParent(), "hi!");
        org.junit.Assert.assertEquals(file64.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertNotNull(file71);
        org.junit.Assert.assertEquals(file71.getParent(), "hi!");
        org.junit.Assert.assertEquals(file71.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(strList77);
    }

    @Test
    public void test445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test445");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        java.lang.String[] strArray10 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file11 = org.apache.commons.io.FileUtils.getFile(strArray10);
        boolean boolean12 = org.apache.commons.io.FileUtils.isFileOlder(file7, file11);
        boolean boolean14 = org.apache.commons.io.FileUtils.waitFor(file11, (int) '4');
        org.apache.commons.io.LineIterator lineIterator15 = org.apache.commons.io.FileUtils.lineIterator(file11);
        boolean boolean16 = org.apache.commons.io.FileUtils.deleteQuietly(file11);
        org.apache.commons.io.FileUtils.write(file11, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset20 = null;
        org.apache.commons.io.FileUtils.write(file11, (java.lang.CharSequence) "", charset20, true);
        boolean boolean23 = org.apache.commons.io.FileUtils.contentEquals(file3, file11);
        boolean boolean24 = org.apache.commons.io.FileUtils.deleteQuietly(file3);
        java.nio.charset.Charset charset26 = null;
        org.apache.commons.io.FileUtils.write(file3, (java.lang.CharSequence) "\000\000d\001", charset26, true);
        java.lang.Class<?> wildcardClass29 = file3.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(file11);
        org.junit.Assert.assertEquals(file11.getParent(), "hi!");
        org.junit.Assert.assertEquals(file11.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(lineIterator15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test446");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file14 = org.apache.commons.io.FileUtils.getFile(strArray13);
        boolean boolean16 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file7, file14, "");
        org.apache.commons.io.LineIterator lineIterator17 = org.apache.commons.io.FileUtils.lineIterator(file7);
        org.apache.commons.io.FileUtils.writeStringToFile(file7, "C:\\Users\\Mathieu\\AppData\\Local\\Temp\\", false);
        java.nio.charset.Charset charset22 = null;
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "", charset22, true);
        java.lang.Class<?> wildcardClass25 = file7.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(file14);
        org.junit.Assert.assertEquals(file14.getParent(), "hi!");
        org.junit.Assert.assertEquals(file14.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(lineIterator17);
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test447");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean12 = org.apache.commons.io.FileUtils.deleteQuietly(file7);
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset16 = null;
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "", charset16, true);
        java.nio.charset.Charset charset20 = null;
        org.apache.commons.io.FileUtils.writeStringToFile(file7, "", charset20, false);
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file26 = org.apache.commons.io.FileUtils.getFile(strArray25);
        java.lang.String[] strArray29 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file30 = org.apache.commons.io.FileUtils.getFile(strArray29);
        boolean boolean31 = org.apache.commons.io.FileUtils.isFileOlder(file26, file30);
        boolean boolean33 = org.apache.commons.io.FileUtils.waitFor(file30, (int) '4');
        org.apache.commons.io.LineIterator lineIterator34 = org.apache.commons.io.FileUtils.lineIterator(file30);
        boolean boolean35 = org.apache.commons.io.FileUtils.deleteQuietly(file30);
        org.apache.commons.io.FileUtils.write(file30, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset39 = null;
        org.apache.commons.io.FileUtils.write(file30, (java.lang.CharSequence) "", charset39, true);
        java.nio.charset.Charset charset43 = null;
        org.apache.commons.io.FileUtils.writeStringToFile(file30, "", charset43, false);
        long long46 = org.apache.commons.io.FileUtils.sizeOf(file30);
        org.apache.commons.io.FileUtils.writeStringToFile(file30, "");
        boolean boolean49 = org.apache.commons.io.FileUtils.isFileNewer(file7, file30);
        long long50 = org.apache.commons.io.FileUtils.checksumCRC32(file30);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(file26);
        org.junit.Assert.assertEquals(file26.getParent(), "hi!");
        org.junit.Assert.assertEquals(file26.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(file30);
        org.junit.Assert.assertEquals(file30.getParent(), "hi!");
        org.junit.Assert.assertEquals(file30.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(lineIterator34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
    }

    @Test
    public void test448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test448");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String str4 = org.apache.commons.io.FileUtils.readFileToString(file3);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.forceDelete(file3);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Unable to delete file: hi!\\hi!");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
    }

    @Test
    public void test449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test449");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        java.lang.String[] strArray10 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file11 = org.apache.commons.io.FileUtils.getFile(strArray10);
        boolean boolean12 = org.apache.commons.io.FileUtils.isFileOlder(file7, file11);
        boolean boolean14 = org.apache.commons.io.FileUtils.waitFor(file11, (int) '4');
        org.apache.commons.io.LineIterator lineIterator15 = org.apache.commons.io.FileUtils.lineIterator(file11);
        boolean boolean16 = org.apache.commons.io.FileUtils.deleteQuietly(file11);
        org.apache.commons.io.FileUtils.write(file11, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset20 = null;
        org.apache.commons.io.FileUtils.write(file11, (java.lang.CharSequence) "", charset20, true);
        boolean boolean23 = org.apache.commons.io.FileUtils.contentEquals(file3, file11);
        boolean boolean24 = org.apache.commons.io.FileUtils.deleteQuietly(file3);
        java.util.zip.Checksum checksum25 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.zip.Checksum checksum26 = org.apache.commons.io.FileUtils.checksum(file3, checksum25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.util.zip.Checksum.update(byte[], int, int)\" because \"this.cksum\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(file11);
        org.junit.Assert.assertEquals(file11.getParent(), "hi!");
        org.junit.Assert.assertEquals(file11.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(lineIterator15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test450");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean12 = org.apache.commons.io.FileUtils.deleteQuietly(file7);
        org.apache.commons.io.FileUtils.writeStringToFile(file7, "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file18 = org.apache.commons.io.FileUtils.getFile(strArray17);
        java.lang.String[] strArray21 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file22 = org.apache.commons.io.FileUtils.getFile(strArray21);
        boolean boolean23 = org.apache.commons.io.FileUtils.isFileOlder(file18, file22);
        boolean boolean25 = org.apache.commons.io.FileUtils.waitFor(file22, (int) '4');
        java.lang.String[] strArray28 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file29 = org.apache.commons.io.FileUtils.getFile(strArray28);
        boolean boolean31 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file22, file29, "");
        boolean boolean32 = org.apache.commons.io.FileUtils.isFileNewer(file7, file22);
        java.lang.String[] strArray35 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file36 = org.apache.commons.io.FileUtils.getFile(strArray35);
        java.lang.String[] strArray39 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file40 = org.apache.commons.io.FileUtils.getFile(strArray39);
        boolean boolean41 = org.apache.commons.io.FileUtils.isFileOlder(file36, file40);
        boolean boolean42 = org.apache.commons.io.FileUtils.deleteQuietly(file40);
        java.lang.String[] strArray45 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file46 = org.apache.commons.io.FileUtils.getFile(strArray45);
        java.lang.String[] strArray49 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file50 = org.apache.commons.io.FileUtils.getFile(strArray49);
        boolean boolean51 = org.apache.commons.io.FileUtils.isFileOlder(file46, file50);
        boolean boolean53 = org.apache.commons.io.FileUtils.waitFor(file50, (int) '4');
        java.lang.String[] strArray56 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file57 = org.apache.commons.io.FileUtils.getFile(strArray56);
        boolean boolean59 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file50, file57, "");
        org.apache.commons.io.LineIterator lineIterator60 = org.apache.commons.io.FileUtils.lineIterator(file50);
        org.apache.commons.io.FileUtils.writeStringToFile(file50, "C:\\Users\\Mathieu\\AppData\\Local\\Temp\\", false);
        java.nio.charset.Charset charset65 = null;
        org.apache.commons.io.FileUtils.write(file50, (java.lang.CharSequence) "", charset65, true);
        boolean boolean69 = org.apache.commons.io.FileUtils.waitFor(file50, 0);
        boolean boolean70 = org.apache.commons.io.FileUtils.isFileOlder(file40, file50);
        java.lang.String[] strArray73 = new java.lang.String[] { "C:\\Users\\Mathieu\\AppData\\Local\\Temp\\", "" };
        java.util.ArrayList<java.lang.String> strList74 = new java.util.ArrayList<java.lang.String>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList74, strArray73);
        org.apache.commons.io.FileUtils.writeLines(file40, (java.util.Collection<java.lang.String>) strList74);
        org.apache.commons.io.FileUtils.writeLines(file7, (java.util.Collection<java.lang.String>) strList74);
        org.apache.commons.io.FileUtils.forceDeleteOnExit(file7);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(file18);
        org.junit.Assert.assertEquals(file18.getParent(), "hi!");
        org.junit.Assert.assertEquals(file18.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(file22);
        org.junit.Assert.assertEquals(file22.getParent(), "hi!");
        org.junit.Assert.assertEquals(file22.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(file29);
        org.junit.Assert.assertEquals(file29.getParent(), "hi!");
        org.junit.Assert.assertEquals(file29.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(file36);
        org.junit.Assert.assertEquals(file36.getParent(), "hi!");
        org.junit.Assert.assertEquals(file36.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(file40);
        org.junit.Assert.assertEquals(file40.getParent(), "hi!");
        org.junit.Assert.assertEquals(file40.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(file46);
        org.junit.Assert.assertEquals(file46.getParent(), "hi!");
        org.junit.Assert.assertEquals(file46.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(file50);
        org.junit.Assert.assertEquals(file50.getParent(), "hi!");
        org.junit.Assert.assertEquals(file50.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(file57);
        org.junit.Assert.assertEquals(file57.getParent(), "hi!");
        org.junit.Assert.assertEquals(file57.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(lineIterator60);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
    }

    @Test
    public void test451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test451");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean13 = org.apache.commons.io.FileUtils.isFileOlder(file7, (-1L));
        java.nio.charset.Charset charset14 = null;
        java.lang.String str15 = org.apache.commons.io.FileUtils.readFileToString(file7, charset14);
        java.io.FileOutputStream fileOutputStream17 = org.apache.commons.io.FileUtils.openOutputStream(file7, false);
        org.apache.commons.io.LineIterator lineIterator18 = org.apache.commons.io.FileUtils.lineIterator(file7);
        org.apache.commons.io.FileUtils.writeStringToFile(file7, "-1 bytes", false);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.deleteDirectory(file7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: hi!\\hi! is not a directory");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "C:\\Users\\Mathieu\\AppData\\Local\\Temp\\\r\n\r\n" + "'", str15, "C:\\Users\\Mathieu\\AppData\\Local\\Temp\\\r\n\r\n");
        org.junit.Assert.assertNotNull(fileOutputStream17);
        org.junit.Assert.assertNotNull(lineIterator18);
    }

    @Test
    public void test452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test452");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file14 = org.apache.commons.io.FileUtils.getFile(strArray13);
        boolean boolean16 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file7, file14, "");
        org.apache.commons.io.FileUtils.writeStringToFile(file7, "", false);
        org.apache.commons.io.FileUtils.forceDeleteOnExit(file7);
        java.lang.String[] strArray23 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file24 = org.apache.commons.io.FileUtils.getFile(strArray23);
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file28 = org.apache.commons.io.FileUtils.getFile(strArray27);
        boolean boolean29 = org.apache.commons.io.FileUtils.isFileOlder(file24, file28);
        boolean boolean31 = org.apache.commons.io.FileUtils.waitFor(file28, (int) '4');
        java.lang.String[] strArray34 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file35 = org.apache.commons.io.FileUtils.getFile(strArray34);
        boolean boolean37 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file28, file35, "");
        java.io.FileOutputStream fileOutputStream39 = org.apache.commons.io.FileUtils.openOutputStream(file28, false);
        java.lang.String[] strArray46 = new java.lang.String[] { "", "1048576 EB", "C:\\Users\\Mathieu\\AppData\\Local\\Temp\\", "C:\\Users\\Mathieu", "", "1048576 EB" };
        java.util.ArrayList<java.lang.String> strList47 = new java.util.ArrayList<java.lang.String>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList47, strArray46);
        org.apache.commons.io.FileUtils.writeLines(file28, (java.util.Collection<java.lang.String>) strList47, "1 GB", false);
        org.apache.commons.io.FileUtils.writeLines(file7, (java.util.Collection<java.lang.String>) strList47, "");
        java.lang.String[] strArray56 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file57 = org.apache.commons.io.FileUtils.getFile(strArray56);
        java.lang.String[] strArray60 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file61 = org.apache.commons.io.FileUtils.getFile(strArray60);
        boolean boolean62 = org.apache.commons.io.FileUtils.isFileOlder(file57, file61);
        boolean boolean64 = org.apache.commons.io.FileUtils.waitFor(file61, (int) '4');
        java.lang.String[] strArray67 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file68 = org.apache.commons.io.FileUtils.getFile(strArray67);
        boolean boolean70 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file61, file68, "");
        org.apache.commons.io.FileUtils.writeStringToFile(file61, "", false);
        java.nio.charset.Charset charset75 = null;
        org.apache.commons.io.FileUtils.write(file61, (java.lang.CharSequence) "C:\\Users\\Mathieu", charset75);
        java.io.FileFilter fileFilter77 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.copyDirectory(file7, file61, fileFilter77, true);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Source 'hi!\\hi!' exists but is not a directory");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(file14);
        org.junit.Assert.assertEquals(file14.getParent(), "hi!");
        org.junit.Assert.assertEquals(file14.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(file24);
        org.junit.Assert.assertEquals(file24.getParent(), "hi!");
        org.junit.Assert.assertEquals(file24.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(file28);
        org.junit.Assert.assertEquals(file28.getParent(), "hi!");
        org.junit.Assert.assertEquals(file28.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(file35);
        org.junit.Assert.assertEquals(file35.getParent(), "hi!");
        org.junit.Assert.assertEquals(file35.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(fileOutputStream39);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(file57);
        org.junit.Assert.assertEquals(file57.getParent(), "hi!");
        org.junit.Assert.assertEquals(file57.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(file61);
        org.junit.Assert.assertEquals(file61.getParent(), "hi!");
        org.junit.Assert.assertEquals(file61.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(file68);
        org.junit.Assert.assertEquals(file68.getParent(), "hi!");
        org.junit.Assert.assertEquals(file68.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
    }

    @Test
    public void test453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test453");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file14 = org.apache.commons.io.FileUtils.getFile(strArray13);
        boolean boolean16 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file7, file14, "");
        org.apache.commons.io.LineIterator lineIterator17 = org.apache.commons.io.FileUtils.lineIterator(file7);
        java.lang.String[] strArray20 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file21 = org.apache.commons.io.FileUtils.getFile(strArray20);
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file25 = org.apache.commons.io.FileUtils.getFile(strArray24);
        boolean boolean26 = org.apache.commons.io.FileUtils.isFileOlder(file21, file25);
        boolean boolean28 = org.apache.commons.io.FileUtils.waitFor(file25, (int) '4');
        org.apache.commons.io.LineIterator lineIterator29 = org.apache.commons.io.FileUtils.lineIterator(file25);
        boolean boolean30 = org.apache.commons.io.FileUtils.deleteQuietly(file25);
        org.apache.commons.io.FileUtils.write(file25, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset34 = null;
        org.apache.commons.io.FileUtils.write(file25, (java.lang.CharSequence) "", charset34, true);
        java.nio.charset.Charset charset38 = null;
        org.apache.commons.io.FileUtils.writeStringToFile(file25, "", charset38, false);
        long long41 = org.apache.commons.io.FileUtils.sizeOf(file25);
        org.apache.commons.io.FileUtils.writeStringToFile(file25, "");
        java.nio.charset.Charset charset44 = null;
        java.util.List<java.lang.String> strList45 = org.apache.commons.io.FileUtils.readLines(file25, charset44);
        org.apache.commons.io.FileUtils.writeLines(file7, (java.util.Collection<java.lang.String>) strList45);
        java.lang.String[] strArray50 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file51 = org.apache.commons.io.FileUtils.getFile(strArray50);
        java.lang.String[] strArray52 = new java.lang.String[] {};
        java.io.File file53 = org.apache.commons.io.FileUtils.getFile(strArray52);
        java.io.File file54 = org.apache.commons.io.FileUtils.getFile(file51, strArray52);
        java.lang.String[] strArray58 = new java.lang.String[] { "35 bytes", "1048576 EB", "hi!" };
        java.util.ArrayList<java.lang.String> strList59 = new java.util.ArrayList<java.lang.String>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList59, strArray58);
        org.apache.commons.io.FileUtils.writeLines(file54, (java.util.Collection<java.lang.String>) strList59, "1 GB1048576 EB1 GBC:\\Users\\Mathieu\\AppData\\Local\\Temp\\1 GBC:\\Users\\Mathieu1 GB1 GB1048576 EB1 GB");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.writeLines(file7, "32 bytes", (java.util.Collection<java.lang.String>) strList59, true);
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: 32 bytes");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(file14);
        org.junit.Assert.assertEquals(file14.getParent(), "hi!");
        org.junit.Assert.assertEquals(file14.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(lineIterator17);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(file21);
        org.junit.Assert.assertEquals(file21.getParent(), "hi!");
        org.junit.Assert.assertEquals(file21.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(file25);
        org.junit.Assert.assertEquals(file25.getParent(), "hi!");
        org.junit.Assert.assertEquals(file25.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(lineIterator29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertNotNull(strList45);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(file51);
        org.junit.Assert.assertEquals(file51.getParent(), "hi!");
        org.junit.Assert.assertEquals(file51.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNull(file53);
        org.junit.Assert.assertNotNull(file54);
        org.junit.Assert.assertEquals(file54.getParent(), "hi!");
        org.junit.Assert.assertEquals(file54.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
    }

    @Test
    public void test454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test454");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean12 = org.apache.commons.io.FileUtils.deleteQuietly(file7);
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset16 = null;
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "", charset16, true);
        java.nio.charset.Charset charset19 = null;
        java.lang.String str20 = org.apache.commons.io.FileUtils.readFileToString(file7, charset19);
        java.nio.charset.Charset charset22 = null;
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "52 bytes", charset22, false);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
    }

    @Test
    public void test455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test455");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray4 = new java.lang.String[] {};
        java.io.File file5 = org.apache.commons.io.FileUtils.getFile(strArray4);
        java.io.File file6 = org.apache.commons.io.FileUtils.getFile(file3, strArray4);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileNewer(file3, (-1L));
        java.nio.charset.Charset charset9 = null;
        java.lang.String str10 = org.apache.commons.io.FileUtils.readFileToString(file3, charset9);
        org.apache.commons.io.FileUtils.writeStringToFile(file3, "1 GB1048576 EB1 GBC:\\Users\\Mathieu\\AppData\\Local\\Temp\\1 GBC:\\Users\\Mathieu1 GB1 GB1048576 EB1 GB", false);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNull(file5);
        org.junit.Assert.assertNotNull(file6);
        org.junit.Assert.assertEquals(file6.getParent(), "hi!");
        org.junit.Assert.assertEquals(file6.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "52 bytes" + "'", str10, "52 bytes");
    }

    @Test
    public void test456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test456");
        java.io.File file0 = org.apache.commons.io.FileUtils.getTempDirectory();
        boolean boolean2 = org.apache.commons.io.FileUtils.isFileOlder(file0, (long) 'a');
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.writeStringToFile(file0, "", "0 bytes", false);
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: 0 bytes");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(file0);
        org.junit.Assert.assertEquals(file0.getParent(), "C:\\Users\\Mathieu\\AppData\\Local");
        org.junit.Assert.assertEquals(file0.toString(), "C:\\Users\\Mathieu\\AppData\\Local\\Temp");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test457");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean13 = org.apache.commons.io.FileUtils.isFileOlder(file7, (-1L));
        long long14 = org.apache.commons.io.FileUtils.sizeOf(file7);
        java.io.File file15 = org.apache.commons.io.FileUtils.getUserDirectory();
        org.apache.commons.io.FileUtils.copyFileToDirectory(file7, file15, true);
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "hi!", true);
        byte[] byteArray21 = org.apache.commons.io.FileUtils.readFileToByteArray(file7);
        java.util.zip.Checksum checksum22 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.zip.Checksum checksum23 = org.apache.commons.io.FileUtils.checksum(file7, checksum22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.util.zip.Checksum.update(byte[], int, int)\" because \"this.cksum\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 96L + "'", long14 == 96L);
        org.junit.Assert.assertNotNull(file15);
        org.junit.Assert.assertEquals(file15.getParent(), "C:\\Users");
        org.junit.Assert.assertEquals(file15.toString(), "C:\\Users\\Mathieu");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[49, 32, 71, 66, 49, 48, 52, 56, 53, 55, 54, 32, 69, 66, 49, 32, 71, 66, 67, 58, 92, 85, 115, 101, 114, 115, 92, 77, 97, 116, 104, 105, 101, 117, 92, 65, 112, 112, 68, 97, 116, 97, 92, 76, 111, 99, 97, 108, 92, 84, 101, 109, 112, 92, 49, 32, 71, 66, 67, 58, 92, 85, 115, 101, 114, 115, 92, 77, 97, 116, 104, 105, 101, 117, 49, 32, 71, 66, 49, 32, 71, 66, 49, 48, 52, 56, 53, 55, 54, 32, 69, 66, 49, 32, 71, 66, 104, 105, 33]");
    }

    @Test
    public void test458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test458");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean12 = org.apache.commons.io.FileUtils.deleteQuietly(file7);
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset16 = null;
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "", charset16, true);
        java.nio.charset.Charset charset20 = null;
        org.apache.commons.io.FileUtils.writeStringToFile(file7, "", charset20, false);
        java.nio.charset.Charset charset24 = null;
        org.apache.commons.io.FileUtils.writeStringToFile(file7, "C:\\Users\\Mathieu\\AppData\\Local\\Temp\\", charset24);
        java.io.File file26 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.moveToDirectory(file7, file26, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: destination");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test459");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean12 = org.apache.commons.io.FileUtils.deleteQuietly(file7);
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset16 = null;
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "", charset16, true);
        java.nio.charset.Charset charset19 = null;
        java.lang.String str20 = org.apache.commons.io.FileUtils.readFileToString(file7, charset19);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "0 bytes", "1 GB1048576 EB1 GBC:\\Users\\Mathieu\\AppData\\Local\\Temp\\1 GBC:\\Users\\Mathieu1 GB1 GB1048576 EB1 GB", true);
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: 1 GB1048576 EB1 GBC:\\Users\\Mathieu\\AppData\\Local\\Temp\\1 GBC:\\Users\\Mathieu1 GB1 GB1048576 EB1 GB");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
    }

    @Test
    public void test460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test460");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean12 = org.apache.commons.io.FileUtils.deleteQuietly(file7);
        org.apache.commons.io.FileUtils.writeStringToFile(file7, "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file18 = org.apache.commons.io.FileUtils.getFile(strArray17);
        java.lang.String[] strArray21 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file22 = org.apache.commons.io.FileUtils.getFile(strArray21);
        boolean boolean23 = org.apache.commons.io.FileUtils.isFileOlder(file18, file22);
        boolean boolean25 = org.apache.commons.io.FileUtils.waitFor(file22, (int) '4');
        java.lang.String[] strArray28 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file29 = org.apache.commons.io.FileUtils.getFile(strArray28);
        boolean boolean31 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file22, file29, "");
        boolean boolean32 = org.apache.commons.io.FileUtils.isFileNewer(file7, file22);
        java.io.FileOutputStream fileOutputStream33 = org.apache.commons.io.FileUtils.openOutputStream(file7);
        java.lang.String[] strArray36 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file37 = org.apache.commons.io.FileUtils.getFile(strArray36);
        java.lang.String[] strArray40 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file41 = org.apache.commons.io.FileUtils.getFile(strArray40);
        boolean boolean42 = org.apache.commons.io.FileUtils.isFileOlder(file37, file41);
        boolean boolean44 = org.apache.commons.io.FileUtils.waitFor(file41, (int) '4');
        org.apache.commons.io.LineIterator lineIterator45 = org.apache.commons.io.FileUtils.lineIterator(file41);
        boolean boolean46 = org.apache.commons.io.FileUtils.deleteQuietly(file41);
        org.apache.commons.io.FileUtils.write(file41, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset50 = null;
        org.apache.commons.io.FileUtils.write(file41, (java.lang.CharSequence) "", charset50, true);
        java.nio.charset.Charset charset53 = null;
        java.lang.String str54 = org.apache.commons.io.FileUtils.readFileToString(file41, charset53);
        boolean boolean55 = org.apache.commons.io.FileUtils.contentEquals(file7, file41);
        java.lang.String[] strArray58 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file59 = org.apache.commons.io.FileUtils.getFile(strArray58);
        java.io.File file60 = org.apache.commons.io.FileUtils.getFile(file7, strArray58);
        java.lang.String[] strArray63 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file64 = org.apache.commons.io.FileUtils.getFile(strArray63);
        java.lang.String[] strArray67 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file68 = org.apache.commons.io.FileUtils.getFile(strArray67);
        boolean boolean69 = org.apache.commons.io.FileUtils.isFileOlder(file64, file68);
        boolean boolean71 = org.apache.commons.io.FileUtils.waitFor(file68, (int) '4');
        org.apache.commons.io.LineIterator lineIterator72 = org.apache.commons.io.FileUtils.lineIterator(file68);
        boolean boolean73 = org.apache.commons.io.FileUtils.deleteQuietly(file68);
        org.apache.commons.io.FileUtils.writeStringToFile(file68, "");
        java.lang.String[] strArray78 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file79 = org.apache.commons.io.FileUtils.getFile(strArray78);
        java.lang.String[] strArray82 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file83 = org.apache.commons.io.FileUtils.getFile(strArray82);
        boolean boolean84 = org.apache.commons.io.FileUtils.isFileOlder(file79, file83);
        boolean boolean86 = org.apache.commons.io.FileUtils.waitFor(file83, (int) '4');
        java.lang.String[] strArray89 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file90 = org.apache.commons.io.FileUtils.getFile(strArray89);
        boolean boolean92 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file83, file90, "");
        boolean boolean93 = org.apache.commons.io.FileUtils.isFileNewer(file68, file83);
        boolean boolean94 = org.apache.commons.io.FileUtils.isSymlink(file68);
        org.apache.commons.io.FileUtils.writeStringToFile(file68, "C:\\Users\\Mathieu\\AppData\\Local\\Temp\\", true);
        long long98 = org.apache.commons.io.FileUtils.checksumCRC32(file68);
        boolean boolean99 = org.apache.commons.io.FileUtils.contentEquals(file60, file68);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(file18);
        org.junit.Assert.assertEquals(file18.getParent(), "hi!");
        org.junit.Assert.assertEquals(file18.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(file22);
        org.junit.Assert.assertEquals(file22.getParent(), "hi!");
        org.junit.Assert.assertEquals(file22.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(file29);
        org.junit.Assert.assertEquals(file29.getParent(), "hi!");
        org.junit.Assert.assertEquals(file29.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(fileOutputStream33);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(file37);
        org.junit.Assert.assertEquals(file37.getParent(), "hi!");
        org.junit.Assert.assertEquals(file37.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(file41);
        org.junit.Assert.assertEquals(file41.getParent(), "hi!");
        org.junit.Assert.assertEquals(file41.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(lineIterator45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "hi!" + "'", str54, "hi!");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(file59);
        org.junit.Assert.assertEquals(file59.getParent(), "hi!");
        org.junit.Assert.assertEquals(file59.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(file60);
        org.junit.Assert.assertEquals(file60.getParent(), "hi!\\hi!\\hi!");
        org.junit.Assert.assertEquals(file60.toString(), "hi!\\hi!\\hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(file64);
        org.junit.Assert.assertEquals(file64.getParent(), "hi!");
        org.junit.Assert.assertEquals(file64.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(file68);
        org.junit.Assert.assertEquals(file68.getParent(), "hi!");
        org.junit.Assert.assertEquals(file68.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(lineIterator72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(file79);
        org.junit.Assert.assertEquals(file79.getParent(), "hi!");
        org.junit.Assert.assertEquals(file79.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertNotNull(file83);
        org.junit.Assert.assertEquals(file83.getParent(), "hi!");
        org.junit.Assert.assertEquals(file83.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(strArray89);
        org.junit.Assert.assertNotNull(file90);
        org.junit.Assert.assertEquals(file90.getParent(), "hi!");
        org.junit.Assert.assertEquals(file90.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + long98 + "' != '" + 4154702209L + "'", long98 == 4154702209L);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test461");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean12 = org.apache.commons.io.FileUtils.deleteQuietly(file7);
        org.apache.commons.io.FileUtils.forceDeleteOnExit(file7);
        java.math.BigInteger bigInteger14 = org.apache.commons.io.FileUtils.sizeOfAsBigInteger(file7);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "100 bytes", "52 bytes", "1048576 EB", "hi!", "hi!", "-1 bytes", "", "C:\\Users\\Mathieu\\AppData\\Local\\Temp\\", "1 PB", "1 PB" };
        java.util.ArrayList<java.lang.String> strList27 = new java.util.ArrayList<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList27, strArray26);
        org.apache.commons.io.FileUtils.writeLines(file7, (java.util.Collection<java.lang.String>) strList27, true);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.writeStringToFile(file7, "1048576 EB", "100 bytes");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: 100 bytes");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(bigInteger14);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
    }

    @Test
    public void test462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test462");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean12 = org.apache.commons.io.FileUtils.deleteQuietly(file7);
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset16 = null;
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "", charset16, true);
        byte[] byteArray19 = org.apache.commons.io.FileUtils.readFileToByteArray(file7);
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file23 = org.apache.commons.io.FileUtils.getFile(strArray22);
        java.lang.String[] strArray26 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file27 = org.apache.commons.io.FileUtils.getFile(strArray26);
        boolean boolean28 = org.apache.commons.io.FileUtils.isFileOlder(file23, file27);
        boolean boolean30 = org.apache.commons.io.FileUtils.waitFor(file27, (int) '4');
        org.apache.commons.io.LineIterator lineIterator31 = org.apache.commons.io.FileUtils.lineIterator(file27);
        boolean boolean32 = org.apache.commons.io.FileUtils.deleteQuietly(file27);
        org.apache.commons.io.FileUtils.write(file27, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset36 = null;
        org.apache.commons.io.FileUtils.write(file27, (java.lang.CharSequence) "", charset36, true);
        java.nio.charset.Charset charset40 = null;
        org.apache.commons.io.FileUtils.writeStringToFile(file27, "", charset40, false);
        boolean boolean43 = org.apache.commons.io.FileUtils.isFileNewer(file7, file27);
        java.nio.charset.Charset charset45 = null;
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "-1 bytes", charset45);
        long long47 = org.apache.commons.io.FileUtils.checksumCRC32(file7);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.writeStringToFile(file7, "", "1 GB1048576 EB1 GBC:\\Users\\Mathieu\\AppData\\Local\\Temp\\1 GBC:\\Users\\Mathieu1 GB1 GB1048576 EB1 GB", false);
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: 1 GB1048576 EB1 GBC:\\Users\\Mathieu\\AppData\\Local\\Temp\\1 GBC:\\Users\\Mathieu1 GB1 GB1048576 EB1 GB");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[104, 105, 33]");
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(file23);
        org.junit.Assert.assertEquals(file23.getParent(), "hi!");
        org.junit.Assert.assertEquals(file23.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(file27);
        org.junit.Assert.assertEquals(file27.getParent(), "hi!");
        org.junit.Assert.assertEquals(file27.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(lineIterator31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 2035464173L + "'", long47 == 2035464173L);
    }

    @Test
    public void test463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test463");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean12 = org.apache.commons.io.FileUtils.deleteQuietly(file7);
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset16 = null;
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "", charset16, true);
        java.nio.charset.Charset charset20 = null;
        org.apache.commons.io.FileUtils.writeStringToFile(file7, "", charset20, false);
        long long23 = org.apache.commons.io.FileUtils.sizeOf(file7);
        long long24 = org.apache.commons.io.FileUtils.sizeOf(file7);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
    }

    @Test
    public void test464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test464");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean12 = org.apache.commons.io.FileUtils.deleteQuietly(file7);
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset16 = null;
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "", charset16, true);
        byte[] byteArray19 = org.apache.commons.io.FileUtils.readFileToByteArray(file7);
        boolean boolean21 = org.apache.commons.io.FileUtils.waitFor(file7, (int) 'a');
        byte[] byteArray22 = org.apache.commons.io.FileUtils.readFileToByteArray(file7);
        java.io.FileInputStream fileInputStream23 = org.apache.commons.io.FileUtils.openInputStream(file7);
        java.io.File file24 = org.apache.commons.io.FileUtils.getUserDirectory();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.copyInputStreamToFile((java.io.InputStream) fileInputStream23, file24);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: File 'C:\\Users\\Mathieu' exists but is a directory");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[104, 105, 33]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[104, 105, 33]");
        org.junit.Assert.assertNotNull(fileInputStream23);
        org.junit.Assert.assertNotNull(file24);
        org.junit.Assert.assertEquals(file24.getParent(), "C:\\Users");
        org.junit.Assert.assertEquals(file24.toString(), "C:\\Users\\Mathieu");
    }

    @Test
    public void test465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test465");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file14 = org.apache.commons.io.FileUtils.getFile(strArray13);
        boolean boolean16 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file7, file14, "");
        org.apache.commons.io.FileUtils.writeStringToFile(file7, "1 GB");
        java.lang.String[] strArray21 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file22 = org.apache.commons.io.FileUtils.getFile(strArray21);
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file26 = org.apache.commons.io.FileUtils.getFile(strArray25);
        boolean boolean27 = org.apache.commons.io.FileUtils.isFileOlder(file22, file26);
        boolean boolean29 = org.apache.commons.io.FileUtils.waitFor(file26, (int) '4');
        java.lang.String[] strArray32 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file33 = org.apache.commons.io.FileUtils.getFile(strArray32);
        boolean boolean35 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file26, file33, "");
        org.apache.commons.io.LineIterator lineIterator36 = org.apache.commons.io.FileUtils.lineIterator(file26);
        org.apache.commons.io.FileUtils.writeStringToFile(file26, "C:\\Users\\Mathieu\\AppData\\Local\\Temp\\", false);
        java.lang.String[] strArray42 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file43 = org.apache.commons.io.FileUtils.getFile(strArray42);
        java.lang.String[] strArray46 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file47 = org.apache.commons.io.FileUtils.getFile(strArray46);
        boolean boolean48 = org.apache.commons.io.FileUtils.isFileOlder(file43, file47);
        java.lang.String str49 = org.apache.commons.io.FileUtils.readFileToString(file43);
        java.lang.String[] strArray52 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file53 = org.apache.commons.io.FileUtils.getFile(strArray52);
        java.io.File file54 = org.apache.commons.io.FileUtils.getFile(file43, strArray52);
        boolean boolean56 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file26, file54, "-1 bytes");
        java.lang.String[] strArray59 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file60 = org.apache.commons.io.FileUtils.getFile(strArray59);
        java.lang.String[] strArray63 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file64 = org.apache.commons.io.FileUtils.getFile(strArray63);
        boolean boolean65 = org.apache.commons.io.FileUtils.isFileOlder(file60, file64);
        boolean boolean67 = org.apache.commons.io.FileUtils.waitFor(file64, (int) '4');
        org.apache.commons.io.LineIterator lineIterator68 = org.apache.commons.io.FileUtils.lineIterator(file64);
        boolean boolean69 = org.apache.commons.io.FileUtils.deleteQuietly(file64);
        org.apache.commons.io.FileUtils.write(file64, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset73 = null;
        org.apache.commons.io.FileUtils.write(file64, (java.lang.CharSequence) "", charset73, true);
        java.nio.charset.Charset charset77 = null;
        org.apache.commons.io.FileUtils.writeStringToFile(file64, "", charset77, false);
        long long80 = org.apache.commons.io.FileUtils.sizeOf(file64);
        org.apache.commons.io.FileUtils.writeStringToFile(file64, "");
        java.nio.charset.Charset charset83 = null;
        java.util.List<java.lang.String> strList84 = org.apache.commons.io.FileUtils.readLines(file64, charset83);
        org.apache.commons.io.FileUtils.writeLines(file26, (java.util.Collection<java.lang.String>) strList84, "32 bytes");
        org.apache.commons.io.FileUtils.writeLines(file7, (java.util.Collection<java.lang.String>) strList84, true);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(file14);
        org.junit.Assert.assertEquals(file14.getParent(), "hi!");
        org.junit.Assert.assertEquals(file14.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(file22);
        org.junit.Assert.assertEquals(file22.getParent(), "hi!");
        org.junit.Assert.assertEquals(file22.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(file26);
        org.junit.Assert.assertEquals(file26.getParent(), "hi!");
        org.junit.Assert.assertEquals(file26.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(file33);
        org.junit.Assert.assertEquals(file33.getParent(), "hi!");
        org.junit.Assert.assertEquals(file33.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(lineIterator36);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(file43);
        org.junit.Assert.assertEquals(file43.getParent(), "hi!");
        org.junit.Assert.assertEquals(file43.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(file47);
        org.junit.Assert.assertEquals(file47.getParent(), "hi!");
        org.junit.Assert.assertEquals(file47.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "C:\\Users\\Mathieu\\AppData\\Local\\Temp\\" + "'", str49, "C:\\Users\\Mathieu\\AppData\\Local\\Temp\\");
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(file53);
        org.junit.Assert.assertEquals(file53.getParent(), "hi!");
        org.junit.Assert.assertEquals(file53.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(file54);
        org.junit.Assert.assertEquals(file54.getParent(), "hi!\\hi!\\hi!");
        org.junit.Assert.assertEquals(file54.toString(), "hi!\\hi!\\hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(file60);
        org.junit.Assert.assertEquals(file60.getParent(), "hi!");
        org.junit.Assert.assertEquals(file60.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(file64);
        org.junit.Assert.assertEquals(file64.getParent(), "hi!");
        org.junit.Assert.assertEquals(file64.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(lineIterator68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 0L + "'", long80 == 0L);
        org.junit.Assert.assertNotNull(strList84);
    }

    @Test
    public void test466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test466");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean12 = org.apache.commons.io.FileUtils.deleteQuietly(file7);
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset16 = null;
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "", charset16, true);
        java.nio.charset.Charset charset20 = null;
        org.apache.commons.io.FileUtils.writeStringToFile(file7, "", charset20, false);
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file26 = org.apache.commons.io.FileUtils.getFile(strArray25);
        java.lang.String[] strArray29 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file30 = org.apache.commons.io.FileUtils.getFile(strArray29);
        boolean boolean31 = org.apache.commons.io.FileUtils.isFileOlder(file26, file30);
        boolean boolean33 = org.apache.commons.io.FileUtils.waitFor(file30, (int) '4');
        org.apache.commons.io.LineIterator lineIterator34 = org.apache.commons.io.FileUtils.lineIterator(file30);
        boolean boolean35 = org.apache.commons.io.FileUtils.deleteQuietly(file30);
        org.apache.commons.io.FileUtils.write(file30, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset39 = null;
        org.apache.commons.io.FileUtils.write(file30, (java.lang.CharSequence) "", charset39, true);
        java.nio.charset.Charset charset43 = null;
        org.apache.commons.io.FileUtils.writeStringToFile(file30, "", charset43, false);
        long long46 = org.apache.commons.io.FileUtils.sizeOf(file30);
        org.apache.commons.io.FileUtils.writeStringToFile(file30, "");
        boolean boolean49 = org.apache.commons.io.FileUtils.isFileNewer(file7, file30);
        java.lang.String[] strArray52 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file53 = org.apache.commons.io.FileUtils.getFile(strArray52);
        java.lang.String[] strArray56 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file57 = org.apache.commons.io.FileUtils.getFile(strArray56);
        boolean boolean58 = org.apache.commons.io.FileUtils.isFileOlder(file53, file57);
        boolean boolean60 = org.apache.commons.io.FileUtils.waitFor(file57, (int) '4');
        org.apache.commons.io.LineIterator lineIterator61 = org.apache.commons.io.FileUtils.lineIterator(file57);
        boolean boolean62 = org.apache.commons.io.FileUtils.deleteQuietly(file57);
        org.apache.commons.io.FileUtils.write(file57, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset66 = null;
        org.apache.commons.io.FileUtils.write(file57, (java.lang.CharSequence) "", charset66, true);
        byte[] byteArray69 = org.apache.commons.io.FileUtils.readFileToByteArray(file57);
        java.lang.String[] strArray72 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file73 = org.apache.commons.io.FileUtils.getFile(strArray72);
        java.lang.String[] strArray76 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file77 = org.apache.commons.io.FileUtils.getFile(strArray76);
        boolean boolean78 = org.apache.commons.io.FileUtils.isFileOlder(file73, file77);
        boolean boolean80 = org.apache.commons.io.FileUtils.waitFor(file77, (int) '4');
        org.apache.commons.io.LineIterator lineIterator81 = org.apache.commons.io.FileUtils.lineIterator(file77);
        boolean boolean82 = org.apache.commons.io.FileUtils.deleteQuietly(file77);
        org.apache.commons.io.FileUtils.write(file77, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset86 = null;
        org.apache.commons.io.FileUtils.write(file77, (java.lang.CharSequence) "", charset86, true);
        java.nio.charset.Charset charset90 = null;
        org.apache.commons.io.FileUtils.writeStringToFile(file77, "", charset90, false);
        boolean boolean93 = org.apache.commons.io.FileUtils.isFileNewer(file57, file77);
        java.nio.charset.Charset charset95 = null;
        org.apache.commons.io.FileUtils.write(file57, (java.lang.CharSequence) "-1 bytes", charset95);
        long long97 = org.apache.commons.io.FileUtils.checksumCRC32(file57);
        java.io.FileOutputStream fileOutputStream98 = org.apache.commons.io.FileUtils.openOutputStream(file57);
        long long99 = org.apache.commons.io.FileUtils.copyFile(file30, (java.io.OutputStream) fileOutputStream98);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(file26);
        org.junit.Assert.assertEquals(file26.getParent(), "hi!");
        org.junit.Assert.assertEquals(file26.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(file30);
        org.junit.Assert.assertEquals(file30.getParent(), "hi!");
        org.junit.Assert.assertEquals(file30.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(lineIterator34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(file53);
        org.junit.Assert.assertEquals(file53.getParent(), "hi!");
        org.junit.Assert.assertEquals(file53.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(file57);
        org.junit.Assert.assertEquals(file57.getParent(), "hi!");
        org.junit.Assert.assertEquals(file57.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(lineIterator61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[104, 105, 33]");
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(file73);
        org.junit.Assert.assertEquals(file73.getParent(), "hi!");
        org.junit.Assert.assertEquals(file73.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertNotNull(file77);
        org.junit.Assert.assertEquals(file77.getParent(), "hi!");
        org.junit.Assert.assertEquals(file77.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(lineIterator81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + long97 + "' != '" + 2035464173L + "'", long97 == 2035464173L);
        org.junit.Assert.assertNotNull(fileOutputStream98);
        org.junit.Assert.assertTrue("'" + long99 + "' != '" + 0L + "'", long99 == 0L);
    }

    @Test
    public void test467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test467");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        java.lang.String str9 = org.apache.commons.io.FileUtils.readFileToString(file3);
        java.nio.charset.Charset charset10 = null;
        java.lang.String str11 = org.apache.commons.io.FileUtils.readFileToString(file3, charset10);
        java.math.BigInteger bigInteger12 = org.apache.commons.io.FileUtils.sizeOfAsBigInteger(file3);
        boolean boolean14 = org.apache.commons.io.FileUtils.waitFor(file3, 0);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigInteger bigInteger15 = org.apache.commons.io.FileUtils.sizeOfDirectoryAsBigInteger(file3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: hi!\\hi! is not a directory");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(bigInteger12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test468");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file14 = org.apache.commons.io.FileUtils.getFile(strArray13);
        boolean boolean16 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file7, file14, "");
        org.apache.commons.io.FileUtils.writeStringToFile(file7, "", false);
        org.apache.commons.io.FileUtils.forceDeleteOnExit(file7);
        java.lang.String[] strArray23 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file24 = org.apache.commons.io.FileUtils.getFile(strArray23);
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file28 = org.apache.commons.io.FileUtils.getFile(strArray27);
        java.lang.String[] strArray31 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file32 = org.apache.commons.io.FileUtils.getFile(strArray31);
        boolean boolean33 = org.apache.commons.io.FileUtils.isFileOlder(file28, file32);
        boolean boolean35 = org.apache.commons.io.FileUtils.waitFor(file32, (int) '4');
        org.apache.commons.io.LineIterator lineIterator36 = org.apache.commons.io.FileUtils.lineIterator(file32);
        boolean boolean37 = org.apache.commons.io.FileUtils.deleteQuietly(file32);
        org.apache.commons.io.FileUtils.write(file32, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset41 = null;
        org.apache.commons.io.FileUtils.write(file32, (java.lang.CharSequence) "", charset41, true);
        boolean boolean44 = org.apache.commons.io.FileUtils.contentEquals(file24, file32);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.copyDirectory(file7, file32, true);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Source 'hi!\\hi!' exists but is not a directory");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(file14);
        org.junit.Assert.assertEquals(file14.getParent(), "hi!");
        org.junit.Assert.assertEquals(file14.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(file24);
        org.junit.Assert.assertEquals(file24.getParent(), "hi!");
        org.junit.Assert.assertEquals(file24.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(file28);
        org.junit.Assert.assertEquals(file28.getParent(), "hi!");
        org.junit.Assert.assertEquals(file28.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(file32);
        org.junit.Assert.assertEquals(file32.getParent(), "hi!");
        org.junit.Assert.assertEquals(file32.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(lineIterator36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
    }

    @Test
    public void test469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test469");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file14 = org.apache.commons.io.FileUtils.getFile(strArray13);
        boolean boolean16 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file7, file14, "");
        org.apache.commons.io.LineIterator lineIterator17 = org.apache.commons.io.FileUtils.lineIterator(file7);
        org.apache.commons.io.FileUtils.writeStringToFile(file7, "C:\\Users\\Mathieu\\AppData\\Local\\Temp\\", false);
        java.nio.charset.Charset charset22 = null;
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "", charset22, true);
        boolean boolean26 = org.apache.commons.io.FileUtils.waitFor(file7, 0);
        java.nio.charset.Charset charset27 = null;
        java.lang.String str28 = org.apache.commons.io.FileUtils.readFileToString(file7, charset27);
        java.lang.String[] strArray31 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file32 = org.apache.commons.io.FileUtils.getFile(strArray31);
        java.lang.String[] strArray35 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file36 = org.apache.commons.io.FileUtils.getFile(strArray35);
        boolean boolean37 = org.apache.commons.io.FileUtils.isFileOlder(file32, file36);
        boolean boolean39 = org.apache.commons.io.FileUtils.waitFor(file36, (int) '4');
        org.apache.commons.io.LineIterator lineIterator40 = org.apache.commons.io.FileUtils.lineIterator(file36);
        boolean boolean41 = org.apache.commons.io.FileUtils.deleteQuietly(file36);
        org.apache.commons.io.FileUtils.write(file36, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset45 = null;
        org.apache.commons.io.FileUtils.write(file36, (java.lang.CharSequence) "", charset45, true);
        byte[] byteArray48 = org.apache.commons.io.FileUtils.readFileToByteArray(file36);
        java.lang.String[] strArray51 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file52 = org.apache.commons.io.FileUtils.getFile(strArray51);
        java.lang.String[] strArray55 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file56 = org.apache.commons.io.FileUtils.getFile(strArray55);
        boolean boolean57 = org.apache.commons.io.FileUtils.isFileOlder(file52, file56);
        boolean boolean59 = org.apache.commons.io.FileUtils.waitFor(file56, (int) '4');
        org.apache.commons.io.LineIterator lineIterator60 = org.apache.commons.io.FileUtils.lineIterator(file56);
        boolean boolean61 = org.apache.commons.io.FileUtils.deleteQuietly(file56);
        org.apache.commons.io.FileUtils.write(file56, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset65 = null;
        org.apache.commons.io.FileUtils.write(file56, (java.lang.CharSequence) "", charset65, true);
        java.nio.charset.Charset charset69 = null;
        org.apache.commons.io.FileUtils.writeStringToFile(file56, "", charset69, false);
        boolean boolean72 = org.apache.commons.io.FileUtils.isFileNewer(file36, file56);
        java.lang.String[] strArray75 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file76 = org.apache.commons.io.FileUtils.getFile(strArray75);
        java.lang.String[] strArray79 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file80 = org.apache.commons.io.FileUtils.getFile(strArray79);
        boolean boolean81 = org.apache.commons.io.FileUtils.isFileOlder(file76, file80);
        boolean boolean83 = org.apache.commons.io.FileUtils.waitFor(file80, (int) '4');
        org.apache.commons.io.LineIterator lineIterator84 = org.apache.commons.io.FileUtils.lineIterator(file80);
        boolean boolean85 = org.apache.commons.io.FileUtils.deleteQuietly(file80);
        org.apache.commons.io.FileUtils.write(file80, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset89 = null;
        org.apache.commons.io.FileUtils.write(file80, (java.lang.CharSequence) "", charset89, true);
        byte[] byteArray92 = org.apache.commons.io.FileUtils.readFileToByteArray(file80);
        org.apache.commons.io.FileUtils.writeByteArrayToFile(file36, byteArray92);
        org.apache.commons.io.FileUtils.writeByteArrayToFile(file7, byteArray92, (int) (byte) 0, (int) (short) 1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(file14);
        org.junit.Assert.assertEquals(file14.getParent(), "hi!");
        org.junit.Assert.assertEquals(file14.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(lineIterator17);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "C:\\Users\\Mathieu\\AppData\\Local\\Temp\\" + "'", str28, "C:\\Users\\Mathieu\\AppData\\Local\\Temp\\");
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(file32);
        org.junit.Assert.assertEquals(file32.getParent(), "hi!");
        org.junit.Assert.assertEquals(file32.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(file36);
        org.junit.Assert.assertEquals(file36.getParent(), "hi!");
        org.junit.Assert.assertEquals(file36.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(lineIterator40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[104, 105, 33]");
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(file52);
        org.junit.Assert.assertEquals(file52.getParent(), "hi!");
        org.junit.Assert.assertEquals(file52.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(file56);
        org.junit.Assert.assertEquals(file56.getParent(), "hi!");
        org.junit.Assert.assertEquals(file56.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(lineIterator60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(file76);
        org.junit.Assert.assertEquals(file76.getParent(), "hi!");
        org.junit.Assert.assertEquals(file76.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray79);
        org.junit.Assert.assertNotNull(file80);
        org.junit.Assert.assertEquals(file80.getParent(), "hi!");
        org.junit.Assert.assertEquals(file80.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(lineIterator84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(byteArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray92), "[104, 105, 33]");
    }

    @Test
    public void test470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test470");
        java.io.File file0 = null;
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file5 = org.apache.commons.io.FileUtils.getFile(strArray4);
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file9 = org.apache.commons.io.FileUtils.getFile(strArray8);
        boolean boolean10 = org.apache.commons.io.FileUtils.isFileOlder(file5, file9);
        boolean boolean11 = org.apache.commons.io.FileUtils.deleteQuietly(file9);
        java.lang.String[] strArray14 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file15 = org.apache.commons.io.FileUtils.getFile(strArray14);
        java.lang.String[] strArray18 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file19 = org.apache.commons.io.FileUtils.getFile(strArray18);
        boolean boolean20 = org.apache.commons.io.FileUtils.isFileOlder(file15, file19);
        boolean boolean22 = org.apache.commons.io.FileUtils.waitFor(file19, (int) '4');
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file26 = org.apache.commons.io.FileUtils.getFile(strArray25);
        boolean boolean28 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file19, file26, "");
        org.apache.commons.io.LineIterator lineIterator29 = org.apache.commons.io.FileUtils.lineIterator(file19);
        org.apache.commons.io.FileUtils.writeStringToFile(file19, "C:\\Users\\Mathieu\\AppData\\Local\\Temp\\", false);
        java.nio.charset.Charset charset34 = null;
        org.apache.commons.io.FileUtils.write(file19, (java.lang.CharSequence) "", charset34, true);
        boolean boolean38 = org.apache.commons.io.FileUtils.waitFor(file19, 0);
        boolean boolean39 = org.apache.commons.io.FileUtils.isFileOlder(file9, file19);
        java.lang.String[] strArray42 = new java.lang.String[] { "C:\\Users\\Mathieu\\AppData\\Local\\Temp\\", "" };
        java.util.ArrayList<java.lang.String> strList43 = new java.util.ArrayList<java.lang.String>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList43, strArray42);
        org.apache.commons.io.FileUtils.writeLines(file9, (java.util.Collection<java.lang.String>) strList43);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.writeLines(file0, "1 GB", (java.util.Collection<java.lang.String>) strList43, "1 PB", true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.File.exists()\" because \"file\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(file5);
        org.junit.Assert.assertEquals(file5.getParent(), "hi!");
        org.junit.Assert.assertEquals(file5.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(file9);
        org.junit.Assert.assertEquals(file9.getParent(), "hi!");
        org.junit.Assert.assertEquals(file9.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(file15);
        org.junit.Assert.assertEquals(file15.getParent(), "hi!");
        org.junit.Assert.assertEquals(file15.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(file19);
        org.junit.Assert.assertEquals(file19.getParent(), "hi!");
        org.junit.Assert.assertEquals(file19.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(file26);
        org.junit.Assert.assertEquals(file26.getParent(), "hi!");
        org.junit.Assert.assertEquals(file26.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(lineIterator29);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
    }

    @Test
    public void test471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test471");
        java.net.URL uRL0 = null;
        java.lang.String[] strArray3 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file4 = org.apache.commons.io.FileUtils.getFile(strArray3);
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file8 = org.apache.commons.io.FileUtils.getFile(strArray7);
        boolean boolean9 = org.apache.commons.io.FileUtils.isFileOlder(file4, file8);
        boolean boolean11 = org.apache.commons.io.FileUtils.waitFor(file8, (int) '4');
        java.lang.String[] strArray14 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file15 = org.apache.commons.io.FileUtils.getFile(strArray14);
        boolean boolean17 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file8, file15, "");
        java.lang.String[] strArray20 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file21 = org.apache.commons.io.FileUtils.getFile(strArray20);
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file25 = org.apache.commons.io.FileUtils.getFile(strArray24);
        boolean boolean26 = org.apache.commons.io.FileUtils.isFileOlder(file21, file25);
        boolean boolean28 = org.apache.commons.io.FileUtils.waitFor(file25, (int) '4');
        org.apache.commons.io.LineIterator lineIterator29 = org.apache.commons.io.FileUtils.lineIterator(file25);
        boolean boolean31 = org.apache.commons.io.FileUtils.isFileOlder(file25, (-1L));
        byte[] byteArray32 = new byte[] {};
        org.apache.commons.io.FileUtils.writeByteArrayToFile(file25, byteArray32);
        org.apache.commons.io.FileUtils.writeByteArrayToFile(file15, byteArray32);
        org.apache.commons.io.FileUtils.forceMkdirParent(file15);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.copyURLToFile(uRL0, file15, (int) '#', (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.net.URL.openConnection()\" because \"source\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(file4);
        org.junit.Assert.assertEquals(file4.getParent(), "hi!");
        org.junit.Assert.assertEquals(file4.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(file8);
        org.junit.Assert.assertEquals(file8.getParent(), "hi!");
        org.junit.Assert.assertEquals(file8.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(file15);
        org.junit.Assert.assertEquals(file15.getParent(), "hi!");
        org.junit.Assert.assertEquals(file15.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(file21);
        org.junit.Assert.assertEquals(file21.getParent(), "hi!");
        org.junit.Assert.assertEquals(file21.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(file25);
        org.junit.Assert.assertEquals(file25.getParent(), "hi!");
        org.junit.Assert.assertEquals(file25.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(lineIterator29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
    }

    @Test
    public void test472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test472");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file14 = org.apache.commons.io.FileUtils.getFile(strArray13);
        boolean boolean16 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file7, file14, "");
        org.apache.commons.io.LineIterator lineIterator17 = org.apache.commons.io.FileUtils.lineIterator(file7);
        org.apache.commons.io.FileUtils.writeStringToFile(file7, "C:\\Users\\Mathieu\\AppData\\Local\\Temp\\", false);
        boolean boolean22 = org.apache.commons.io.FileUtils.isFileOlder(file7, (long) (short) 0);
        java.io.FileOutputStream fileOutputStream24 = org.apache.commons.io.FileUtils.openOutputStream(file7, true);
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file28 = org.apache.commons.io.FileUtils.getFile(strArray27);
        java.lang.String[] strArray31 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file32 = org.apache.commons.io.FileUtils.getFile(strArray31);
        boolean boolean33 = org.apache.commons.io.FileUtils.isFileOlder(file28, file32);
        boolean boolean35 = org.apache.commons.io.FileUtils.waitFor(file32, (int) '4');
        org.apache.commons.io.LineIterator lineIterator36 = org.apache.commons.io.FileUtils.lineIterator(file32);
        boolean boolean37 = org.apache.commons.io.FileUtils.deleteQuietly(file32);
        java.nio.charset.Charset charset39 = null;
        org.apache.commons.io.FileUtils.writeStringToFile(file32, "hi!", charset39, true);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.copyFileToDirectory(file7, file32, false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Destination 'hi!\\hi!' is not a directory");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(file14);
        org.junit.Assert.assertEquals(file14.getParent(), "hi!");
        org.junit.Assert.assertEquals(file14.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(lineIterator17);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(fileOutputStream24);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(file28);
        org.junit.Assert.assertEquals(file28.getParent(), "hi!");
        org.junit.Assert.assertEquals(file28.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(file32);
        org.junit.Assert.assertEquals(file32.getParent(), "hi!");
        org.junit.Assert.assertEquals(file32.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(lineIterator36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test473");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file14 = org.apache.commons.io.FileUtils.getFile(strArray13);
        boolean boolean16 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file7, file14, "");
        java.io.FileOutputStream fileOutputStream18 = org.apache.commons.io.FileUtils.openOutputStream(file7, false);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "1048576 EB", "C:\\Users\\Mathieu\\AppData\\Local\\Temp\\", "C:\\Users\\Mathieu", "", "1048576 EB" };
        java.util.ArrayList<java.lang.String> strList26 = new java.util.ArrayList<java.lang.String>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList26, strArray25);
        org.apache.commons.io.FileUtils.writeLines(file7, (java.util.Collection<java.lang.String>) strList26, "1 GB", false);
        java.lang.Class<?> wildcardClass31 = strList26.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(file14);
        org.junit.Assert.assertEquals(file14.getParent(), "hi!");
        org.junit.Assert.assertEquals(file14.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(fileOutputStream18);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test474");
        java.io.File file0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.FileOutputStream fileOutputStream1 = org.apache.commons.io.FileUtils.openOutputStream(file0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.File.exists()\" because \"file\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test475");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray4 = new java.lang.String[] {};
        java.io.File file5 = org.apache.commons.io.FileUtils.getFile(strArray4);
        java.io.File file6 = org.apache.commons.io.FileUtils.getFile(file3, strArray4);
        java.lang.String[] strArray9 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file10 = org.apache.commons.io.FileUtils.getFile(strArray9);
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file14 = org.apache.commons.io.FileUtils.getFile(strArray13);
        boolean boolean15 = org.apache.commons.io.FileUtils.isFileOlder(file10, file14);
        boolean boolean17 = org.apache.commons.io.FileUtils.waitFor(file14, (int) '4');
        org.apache.commons.io.LineIterator lineIterator18 = org.apache.commons.io.FileUtils.lineIterator(file14);
        boolean boolean20 = org.apache.commons.io.FileUtils.isFileOlder(file14, (-1L));
        java.io.FileOutputStream fileOutputStream22 = org.apache.commons.io.FileUtils.openOutputStream(file14, false);
        long long23 = org.apache.commons.io.FileUtils.copyFile(file3, (java.io.OutputStream) fileOutputStream22);
        org.apache.commons.io.FileUtils.write(file3, (java.lang.CharSequence) "hi!\000\000d\001");
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNull(file5);
        org.junit.Assert.assertNotNull(file6);
        org.junit.Assert.assertEquals(file6.getParent(), "hi!");
        org.junit.Assert.assertEquals(file6.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(file10);
        org.junit.Assert.assertEquals(file10.getParent(), "hi!");
        org.junit.Assert.assertEquals(file10.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(file14);
        org.junit.Assert.assertEquals(file14.getParent(), "hi!");
        org.junit.Assert.assertEquals(file14.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(lineIterator18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(fileOutputStream22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
    }

    @Test
    public void test476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test476");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean12 = org.apache.commons.io.FileUtils.deleteQuietly(file7);
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset16 = null;
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "", charset16, true);
        java.nio.charset.Charset charset20 = null;
        org.apache.commons.io.FileUtils.writeStringToFile(file7, "", charset20, false);
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file26 = org.apache.commons.io.FileUtils.getFile(strArray25);
        java.lang.String[] strArray29 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file30 = org.apache.commons.io.FileUtils.getFile(strArray29);
        boolean boolean31 = org.apache.commons.io.FileUtils.isFileOlder(file26, file30);
        boolean boolean33 = org.apache.commons.io.FileUtils.waitFor(file30, (int) '4');
        org.apache.commons.io.LineIterator lineIterator34 = org.apache.commons.io.FileUtils.lineIterator(file30);
        boolean boolean35 = org.apache.commons.io.FileUtils.deleteQuietly(file30);
        org.apache.commons.io.FileUtils.write(file30, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset39 = null;
        org.apache.commons.io.FileUtils.write(file30, (java.lang.CharSequence) "", charset39, true);
        java.nio.charset.Charset charset43 = null;
        org.apache.commons.io.FileUtils.writeStringToFile(file30, "", charset43, false);
        long long46 = org.apache.commons.io.FileUtils.sizeOf(file30);
        org.apache.commons.io.FileUtils.writeStringToFile(file30, "");
        boolean boolean49 = org.apache.commons.io.FileUtils.isFileNewer(file7, file30);
        java.lang.String[] strArray52 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file53 = org.apache.commons.io.FileUtils.getFile(strArray52);
        java.lang.String[] strArray56 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file57 = org.apache.commons.io.FileUtils.getFile(strArray56);
        boolean boolean58 = org.apache.commons.io.FileUtils.isFileOlder(file53, file57);
        java.lang.String str59 = org.apache.commons.io.FileUtils.readFileToString(file53);
        java.lang.String[] strArray62 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file63 = org.apache.commons.io.FileUtils.getFile(strArray62);
        java.io.File file64 = org.apache.commons.io.FileUtils.getFile(file53, strArray62);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<java.io.File> fileItor66 = org.apache.commons.io.FileUtils.iterateFiles(file7, strArray62, true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'directory' is not a directory: hi!\\hi!");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(file26);
        org.junit.Assert.assertEquals(file26.getParent(), "hi!");
        org.junit.Assert.assertEquals(file26.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(file30);
        org.junit.Assert.assertEquals(file30.getParent(), "hi!");
        org.junit.Assert.assertEquals(file30.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(lineIterator34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(file53);
        org.junit.Assert.assertEquals(file53.getParent(), "hi!");
        org.junit.Assert.assertEquals(file53.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(file57);
        org.junit.Assert.assertEquals(file57.getParent(), "hi!");
        org.junit.Assert.assertEquals(file57.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(file63);
        org.junit.Assert.assertEquals(file63.getParent(), "hi!");
        org.junit.Assert.assertEquals(file63.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(file64);
        org.junit.Assert.assertEquals(file64.getParent(), "hi!\\hi!\\hi!");
        org.junit.Assert.assertEquals(file64.toString(), "hi!\\hi!\\hi!\\hi!");
    }

    @Test
    public void test477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test477");
        java.io.File file0 = null;
        java.lang.String[] strArray3 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file4 = org.apache.commons.io.FileUtils.getFile(strArray3);
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file8 = org.apache.commons.io.FileUtils.getFile(strArray7);
        boolean boolean9 = org.apache.commons.io.FileUtils.isFileOlder(file4, file8);
        boolean boolean11 = org.apache.commons.io.FileUtils.waitFor(file8, (int) '4');
        org.apache.commons.io.LineIterator lineIterator12 = org.apache.commons.io.FileUtils.lineIterator(file8);
        boolean boolean13 = org.apache.commons.io.FileUtils.deleteQuietly(file8);
        org.apache.commons.io.FileUtils.write(file8, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset17 = null;
        org.apache.commons.io.FileUtils.write(file8, (java.lang.CharSequence) "", charset17, true);
        java.nio.charset.Charset charset21 = null;
        org.apache.commons.io.FileUtils.writeStringToFile(file8, "", charset21, false);
        java.lang.String[] strArray26 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file27 = org.apache.commons.io.FileUtils.getFile(strArray26);
        java.lang.String[] strArray30 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file31 = org.apache.commons.io.FileUtils.getFile(strArray30);
        boolean boolean32 = org.apache.commons.io.FileUtils.isFileOlder(file27, file31);
        boolean boolean34 = org.apache.commons.io.FileUtils.waitFor(file31, (int) '4');
        java.lang.String[] strArray37 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file38 = org.apache.commons.io.FileUtils.getFile(strArray37);
        boolean boolean40 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file31, file38, "");
        java.io.FileOutputStream fileOutputStream42 = org.apache.commons.io.FileUtils.openOutputStream(file31, false);
        java.lang.String[] strArray49 = new java.lang.String[] { "", "1048576 EB", "C:\\Users\\Mathieu\\AppData\\Local\\Temp\\", "C:\\Users\\Mathieu", "", "1048576 EB" };
        java.util.ArrayList<java.lang.String> strList50 = new java.util.ArrayList<java.lang.String>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList50, strArray49);
        org.apache.commons.io.FileUtils.writeLines(file31, (java.util.Collection<java.lang.String>) strList50, "1 GB", false);
        org.apache.commons.io.FileUtils.writeLines(file8, (java.util.Collection<java.lang.String>) strList50, "35 bytes");
        java.lang.String[] strArray59 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file60 = org.apache.commons.io.FileUtils.getFile(strArray59);
        java.lang.String[] strArray63 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file64 = org.apache.commons.io.FileUtils.getFile(strArray63);
        boolean boolean65 = org.apache.commons.io.FileUtils.isFileOlder(file60, file64);
        boolean boolean67 = org.apache.commons.io.FileUtils.waitFor(file64, (int) '4');
        java.lang.String[] strArray70 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file71 = org.apache.commons.io.FileUtils.getFile(strArray70);
        boolean boolean73 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file64, file71, "");
        org.apache.commons.io.FileUtils.writeStringToFile(file64, "", false);
        org.apache.commons.io.FileUtils.forceDeleteOnExit(file64);
        boolean boolean78 = org.apache.commons.io.FileUtils.isFileOlder(file8, file64);
        java.io.FileFilter fileFilter79 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.copyDirectory(file0, file8, fileFilter79);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: source");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(file4);
        org.junit.Assert.assertEquals(file4.getParent(), "hi!");
        org.junit.Assert.assertEquals(file4.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(file8);
        org.junit.Assert.assertEquals(file8.getParent(), "hi!");
        org.junit.Assert.assertEquals(file8.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(lineIterator12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(file27);
        org.junit.Assert.assertEquals(file27.getParent(), "hi!");
        org.junit.Assert.assertEquals(file27.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(file31);
        org.junit.Assert.assertEquals(file31.getParent(), "hi!");
        org.junit.Assert.assertEquals(file31.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(file38);
        org.junit.Assert.assertEquals(file38.getParent(), "hi!");
        org.junit.Assert.assertEquals(file38.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(fileOutputStream42);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(file60);
        org.junit.Assert.assertEquals(file60.getParent(), "hi!");
        org.junit.Assert.assertEquals(file60.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(file64);
        org.junit.Assert.assertEquals(file64.getParent(), "hi!");
        org.junit.Assert.assertEquals(file64.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertNotNull(file71);
        org.junit.Assert.assertEquals(file71.getParent(), "hi!");
        org.junit.Assert.assertEquals(file71.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test478");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file14 = org.apache.commons.io.FileUtils.getFile(strArray13);
        boolean boolean16 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file7, file14, "");
        org.apache.commons.io.LineIterator lineIterator17 = org.apache.commons.io.FileUtils.lineIterator(file7);
        org.apache.commons.io.FileUtils.writeStringToFile(file7, "C:\\Users\\Mathieu\\AppData\\Local\\Temp\\", false);
        java.nio.charset.Charset charset22 = null;
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "", charset22, true);
        boolean boolean26 = org.apache.commons.io.FileUtils.waitFor(file7, 0);
        org.apache.commons.io.FileUtils.writeStringToFile(file7, "C:\\Users\\Mathieu\\AppData\\Local\\Temp\\");
        java.lang.String[] strArray31 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file32 = org.apache.commons.io.FileUtils.getFile(strArray31);
        java.lang.String[] strArray35 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file36 = org.apache.commons.io.FileUtils.getFile(strArray35);
        boolean boolean37 = org.apache.commons.io.FileUtils.isFileOlder(file32, file36);
        boolean boolean39 = org.apache.commons.io.FileUtils.waitFor(file36, (int) '4');
        java.lang.String[] strArray42 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file43 = org.apache.commons.io.FileUtils.getFile(strArray42);
        boolean boolean45 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file36, file43, "");
        java.io.FileInputStream fileInputStream46 = org.apache.commons.io.FileUtils.openInputStream(file43);
        java.lang.String[] strArray49 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file50 = org.apache.commons.io.FileUtils.getFile(strArray49);
        java.lang.String[] strArray53 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file54 = org.apache.commons.io.FileUtils.getFile(strArray53);
        boolean boolean55 = org.apache.commons.io.FileUtils.isFileOlder(file50, file54);
        boolean boolean57 = org.apache.commons.io.FileUtils.waitFor(file54, (int) '4');
        java.lang.String[] strArray60 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file61 = org.apache.commons.io.FileUtils.getFile(strArray60);
        boolean boolean63 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file54, file61, "");
        org.apache.commons.io.LineIterator lineIterator64 = org.apache.commons.io.FileUtils.lineIterator(file54);
        java.lang.String[] strArray67 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file68 = org.apache.commons.io.FileUtils.getFile(strArray67);
        java.lang.String[] strArray71 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file72 = org.apache.commons.io.FileUtils.getFile(strArray71);
        boolean boolean73 = org.apache.commons.io.FileUtils.isFileOlder(file68, file72);
        boolean boolean75 = org.apache.commons.io.FileUtils.waitFor(file72, (int) '4');
        org.apache.commons.io.LineIterator lineIterator76 = org.apache.commons.io.FileUtils.lineIterator(file72);
        boolean boolean77 = org.apache.commons.io.FileUtils.deleteQuietly(file72);
        org.apache.commons.io.FileUtils.write(file72, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset81 = null;
        org.apache.commons.io.FileUtils.write(file72, (java.lang.CharSequence) "", charset81, true);
        java.nio.charset.Charset charset85 = null;
        org.apache.commons.io.FileUtils.writeStringToFile(file72, "", charset85, false);
        long long88 = org.apache.commons.io.FileUtils.sizeOf(file72);
        org.apache.commons.io.FileUtils.writeStringToFile(file72, "");
        java.nio.charset.Charset charset91 = null;
        java.util.List<java.lang.String> strList92 = org.apache.commons.io.FileUtils.readLines(file72, charset91);
        org.apache.commons.io.FileUtils.writeLines(file54, (java.util.Collection<java.lang.String>) strList92);
        org.apache.commons.io.FileUtils.copyToFile((java.io.InputStream) fileInputStream46, file54);
        boolean boolean95 = org.apache.commons.io.FileUtils.isFileNewer(file7, file54);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(file14);
        org.junit.Assert.assertEquals(file14.getParent(), "hi!");
        org.junit.Assert.assertEquals(file14.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(lineIterator17);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(file32);
        org.junit.Assert.assertEquals(file32.getParent(), "hi!");
        org.junit.Assert.assertEquals(file32.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(file36);
        org.junit.Assert.assertEquals(file36.getParent(), "hi!");
        org.junit.Assert.assertEquals(file36.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(file43);
        org.junit.Assert.assertEquals(file43.getParent(), "hi!");
        org.junit.Assert.assertEquals(file43.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(fileInputStream46);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(file50);
        org.junit.Assert.assertEquals(file50.getParent(), "hi!");
        org.junit.Assert.assertEquals(file50.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(file54);
        org.junit.Assert.assertEquals(file54.getParent(), "hi!");
        org.junit.Assert.assertEquals(file54.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(file61);
        org.junit.Assert.assertEquals(file61.getParent(), "hi!");
        org.junit.Assert.assertEquals(file61.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(lineIterator64);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(file68);
        org.junit.Assert.assertEquals(file68.getParent(), "hi!");
        org.junit.Assert.assertEquals(file68.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(file72);
        org.junit.Assert.assertEquals(file72.getParent(), "hi!");
        org.junit.Assert.assertEquals(file72.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(lineIterator76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + long88 + "' != '" + 0L + "'", long88 == 0L);
        org.junit.Assert.assertNotNull(strList92);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test479");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file14 = org.apache.commons.io.FileUtils.getFile(strArray13);
        boolean boolean16 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file7, file14, "");
        java.io.FileOutputStream fileOutputStream18 = org.apache.commons.io.FileUtils.openOutputStream(file7, false);
        java.lang.String[] strArray21 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file22 = org.apache.commons.io.FileUtils.getFile(strArray21);
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file26 = org.apache.commons.io.FileUtils.getFile(strArray25);
        boolean boolean27 = org.apache.commons.io.FileUtils.isFileOlder(file22, file26);
        boolean boolean29 = org.apache.commons.io.FileUtils.waitFor(file26, (int) '4');
        org.apache.commons.io.LineIterator lineIterator30 = org.apache.commons.io.FileUtils.lineIterator(file26);
        boolean boolean31 = org.apache.commons.io.FileUtils.deleteQuietly(file26);
        org.apache.commons.io.FileUtils.write(file26, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset35 = null;
        org.apache.commons.io.FileUtils.write(file26, (java.lang.CharSequence) "", charset35, true);
        java.nio.charset.Charset charset39 = null;
        org.apache.commons.io.FileUtils.writeStringToFile(file26, "", charset39, false);
        long long42 = org.apache.commons.io.FileUtils.sizeOf(file26);
        java.lang.String[] strArray45 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file46 = org.apache.commons.io.FileUtils.getFile(strArray45);
        java.lang.String[] strArray49 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file50 = org.apache.commons.io.FileUtils.getFile(strArray49);
        boolean boolean51 = org.apache.commons.io.FileUtils.isFileOlder(file46, file50);
        boolean boolean53 = org.apache.commons.io.FileUtils.waitFor(file50, (int) '4');
        org.apache.commons.io.LineIterator lineIterator54 = org.apache.commons.io.FileUtils.lineIterator(file50);
        boolean boolean55 = org.apache.commons.io.FileUtils.deleteQuietly(file50);
        org.apache.commons.io.FileUtils.write(file50, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset59 = null;
        org.apache.commons.io.FileUtils.write(file50, (java.lang.CharSequence) "", charset59, true);
        java.nio.charset.Charset charset63 = null;
        org.apache.commons.io.FileUtils.writeStringToFile(file50, "", charset63, false);
        long long66 = org.apache.commons.io.FileUtils.sizeOf(file50);
        org.apache.commons.io.FileUtils.writeStringToFile(file50, "");
        boolean boolean70 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file26, file50, "hi!");
        boolean boolean72 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file7, file50, "-1 bytes");
        java.nio.charset.Charset charset74 = null;
        org.apache.commons.io.FileUtils.writeStringToFile(file50, "C:\\Users\\Mathieu", charset74, true);
        java.lang.String[] strArray79 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file80 = org.apache.commons.io.FileUtils.getFile(strArray79);
        java.lang.String[] strArray83 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file84 = org.apache.commons.io.FileUtils.getFile(strArray83);
        boolean boolean85 = org.apache.commons.io.FileUtils.isFileOlder(file80, file84);
        java.lang.String str86 = org.apache.commons.io.FileUtils.readFileToString(file80);
        java.lang.String[] strArray89 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file90 = org.apache.commons.io.FileUtils.getFile(strArray89);
        java.io.File file91 = org.apache.commons.io.FileUtils.getFile(file80, strArray89);
        java.io.File file92 = org.apache.commons.io.FileUtils.getFile(file50, strArray89);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.writeStringToFile(file92, "", "1048576 EB");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: 1048576 EB");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(file14);
        org.junit.Assert.assertEquals(file14.getParent(), "hi!");
        org.junit.Assert.assertEquals(file14.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(fileOutputStream18);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(file22);
        org.junit.Assert.assertEquals(file22.getParent(), "hi!");
        org.junit.Assert.assertEquals(file22.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(file26);
        org.junit.Assert.assertEquals(file26.getParent(), "hi!");
        org.junit.Assert.assertEquals(file26.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(lineIterator30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(file46);
        org.junit.Assert.assertEquals(file46.getParent(), "hi!");
        org.junit.Assert.assertEquals(file46.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(file50);
        org.junit.Assert.assertEquals(file50.getParent(), "hi!");
        org.junit.Assert.assertEquals(file50.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(lineIterator54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 0L + "'", long66 == 0L);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(strArray79);
        org.junit.Assert.assertNotNull(file80);
        org.junit.Assert.assertEquals(file80.getParent(), "hi!");
        org.junit.Assert.assertEquals(file80.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray83);
        org.junit.Assert.assertNotNull(file84);
        org.junit.Assert.assertEquals(file84.getParent(), "hi!");
        org.junit.Assert.assertEquals(file84.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "C:\\Users\\Mathieu" + "'", str86, "C:\\Users\\Mathieu");
        org.junit.Assert.assertNotNull(strArray89);
        org.junit.Assert.assertNotNull(file90);
        org.junit.Assert.assertEquals(file90.getParent(), "hi!");
        org.junit.Assert.assertEquals(file90.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(file91);
        org.junit.Assert.assertEquals(file91.getParent(), "hi!\\hi!\\hi!");
        org.junit.Assert.assertEquals(file91.toString(), "hi!\\hi!\\hi!\\hi!");
        org.junit.Assert.assertNotNull(file92);
        org.junit.Assert.assertEquals(file92.getParent(), "hi!\\hi!\\hi!");
        org.junit.Assert.assertEquals(file92.toString(), "hi!\\hi!\\hi!\\hi!");
    }

    @Test
    public void test480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test480");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean12 = org.apache.commons.io.FileUtils.deleteQuietly(file7);
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "hi!");
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "-1 bytes", false);
        byte[] byteArray18 = org.apache.commons.io.FileUtils.readFileToByteArray(file7);
        java.lang.String[] strArray21 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file22 = org.apache.commons.io.FileUtils.getFile(strArray21);
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file26 = org.apache.commons.io.FileUtils.getFile(strArray25);
        boolean boolean27 = org.apache.commons.io.FileUtils.isFileOlder(file22, file26);
        boolean boolean29 = org.apache.commons.io.FileUtils.waitFor(file26, (int) '4');
        org.apache.commons.io.LineIterator lineIterator30 = org.apache.commons.io.FileUtils.lineIterator(file26);
        boolean boolean31 = org.apache.commons.io.FileUtils.deleteQuietly(file26);
        org.apache.commons.io.FileUtils.writeStringToFile(file26, "");
        org.apache.commons.io.FileUtils.forceMkdirParent(file26);
        boolean boolean36 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file7, file26, "C:\\Users\\Mathieu\\AppData\\Local\\Temp\\");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.writeStringToFile(file26, "-1 bytes", "-1 bytes", true);
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: -1 bytes");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[45, 49, 32, 98, 121, 116, 101, 115]");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(file22);
        org.junit.Assert.assertEquals(file22.getParent(), "hi!");
        org.junit.Assert.assertEquals(file22.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(file26);
        org.junit.Assert.assertEquals(file26.getParent(), "hi!");
        org.junit.Assert.assertEquals(file26.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(lineIterator30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
    }

    @Test
    public void test481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test481");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean12 = org.apache.commons.io.FileUtils.deleteQuietly(file7);
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset16 = null;
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "", charset16, true);
        byte[] byteArray19 = org.apache.commons.io.FileUtils.readFileToByteArray(file7);
        boolean boolean21 = org.apache.commons.io.FileUtils.waitFor(file7, (int) 'a');
        org.apache.commons.io.LineIterator lineIterator22 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean24 = org.apache.commons.io.FileUtils.isFileOlder(file7, (long) (byte) 100);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter25 = null;
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter26 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<java.io.File> fileItor27 = org.apache.commons.io.FileUtils.iterateFilesAndDirs(file7, iOFileFilter25, iOFileFilter26);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'directory' is not a directory: hi!\\hi!");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[104, 105, 33]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(lineIterator22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test482");
        java.io.File file0 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean2 = org.apache.commons.io.FileUtils.isFileOlder(file0, (long) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No specified file");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test483");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean9 = org.apache.commons.io.FileUtils.deleteQuietly(file7);
        java.lang.String[] strArray12 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file13 = org.apache.commons.io.FileUtils.getFile(strArray12);
        java.lang.String[] strArray16 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file17 = org.apache.commons.io.FileUtils.getFile(strArray16);
        boolean boolean18 = org.apache.commons.io.FileUtils.isFileOlder(file13, file17);
        boolean boolean20 = org.apache.commons.io.FileUtils.waitFor(file17, (int) '4');
        java.lang.String[] strArray23 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file24 = org.apache.commons.io.FileUtils.getFile(strArray23);
        boolean boolean26 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file17, file24, "");
        org.apache.commons.io.LineIterator lineIterator27 = org.apache.commons.io.FileUtils.lineIterator(file17);
        org.apache.commons.io.FileUtils.writeStringToFile(file17, "C:\\Users\\Mathieu\\AppData\\Local\\Temp\\", false);
        java.nio.charset.Charset charset32 = null;
        org.apache.commons.io.FileUtils.write(file17, (java.lang.CharSequence) "", charset32, true);
        boolean boolean36 = org.apache.commons.io.FileUtils.waitFor(file17, 0);
        boolean boolean37 = org.apache.commons.io.FileUtils.isFileOlder(file7, file17);
        java.lang.String[] strArray40 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file41 = org.apache.commons.io.FileUtils.getFile(strArray40);
        java.lang.String[] strArray44 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file45 = org.apache.commons.io.FileUtils.getFile(strArray44);
        boolean boolean46 = org.apache.commons.io.FileUtils.isFileOlder(file41, file45);
        boolean boolean48 = org.apache.commons.io.FileUtils.waitFor(file45, (int) '4');
        org.apache.commons.io.LineIterator lineIterator49 = org.apache.commons.io.FileUtils.lineIterator(file45);
        boolean boolean50 = org.apache.commons.io.FileUtils.deleteQuietly(file45);
        org.apache.commons.io.FileUtils.write(file45, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset54 = null;
        org.apache.commons.io.FileUtils.write(file45, (java.lang.CharSequence) "", charset54, true);
        java.nio.charset.Charset charset58 = null;
        org.apache.commons.io.FileUtils.writeStringToFile(file45, "", charset58, false);
        java.io.FileOutputStream fileOutputStream61 = org.apache.commons.io.FileUtils.openOutputStream(file45);
        long long62 = org.apache.commons.io.FileUtils.copyFile(file7, (java.io.OutputStream) fileOutputStream61);
        java.lang.String[] strArray65 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file66 = org.apache.commons.io.FileUtils.getFile(strArray65);
        java.lang.String[] strArray69 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file70 = org.apache.commons.io.FileUtils.getFile(strArray69);
        boolean boolean71 = org.apache.commons.io.FileUtils.isFileOlder(file66, file70);
        boolean boolean72 = org.apache.commons.io.FileUtils.deleteQuietly(file70);
        boolean boolean74 = org.apache.commons.io.FileUtils.isFileNewer(file70, 0L);
        java.nio.charset.Charset charset75 = null;
        java.util.List<java.lang.String> strList76 = org.apache.commons.io.FileUtils.readLines(file70, charset75);
        org.apache.commons.io.FileUtils.forceDeleteOnExit(file70);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.moveDirectory(file7, file70);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Source 'hi!\\hi!' is not a directory");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(file13);
        org.junit.Assert.assertEquals(file13.getParent(), "hi!");
        org.junit.Assert.assertEquals(file13.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(file17);
        org.junit.Assert.assertEquals(file17.getParent(), "hi!");
        org.junit.Assert.assertEquals(file17.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(file24);
        org.junit.Assert.assertEquals(file24.getParent(), "hi!");
        org.junit.Assert.assertEquals(file24.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(lineIterator27);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(file41);
        org.junit.Assert.assertEquals(file41.getParent(), "hi!");
        org.junit.Assert.assertEquals(file41.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(file45);
        org.junit.Assert.assertEquals(file45.getParent(), "hi!");
        org.junit.Assert.assertEquals(file45.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(lineIterator49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(fileOutputStream61);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 0L + "'", long62 == 0L);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(file66);
        org.junit.Assert.assertEquals(file66.getParent(), "hi!");
        org.junit.Assert.assertEquals(file66.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertNotNull(file70);
        org.junit.Assert.assertEquals(file70.getParent(), "hi!");
        org.junit.Assert.assertEquals(file70.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(strList76);
    }

    @Test
    public void test484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test484");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean13 = org.apache.commons.io.FileUtils.isFileOlder(file7, (-1L));
        java.nio.charset.Charset charset14 = null;
        java.lang.String str15 = org.apache.commons.io.FileUtils.readFileToString(file7, charset14);
        java.io.FileOutputStream fileOutputStream17 = org.apache.commons.io.FileUtils.openOutputStream(file7, false);
        org.apache.commons.io.LineIterator lineIterator18 = org.apache.commons.io.FileUtils.lineIterator(file7);
        org.apache.commons.io.FileUtils.writeStringToFile(file7, "-1 bytes", false);
        java.nio.charset.Charset charset23 = null;
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "32 bytes", charset23);
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "C:\\Users\\Mathieu\\AppData\\Local\\Temp\\", false);
        java.lang.String[] strArray30 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file31 = org.apache.commons.io.FileUtils.getFile(strArray30);
        java.lang.String[] strArray34 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file35 = org.apache.commons.io.FileUtils.getFile(strArray34);
        boolean boolean36 = org.apache.commons.io.FileUtils.isFileOlder(file31, file35);
        boolean boolean38 = org.apache.commons.io.FileUtils.waitFor(file35, (int) '4');
        java.lang.String[] strArray41 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file42 = org.apache.commons.io.FileUtils.getFile(strArray41);
        boolean boolean44 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file35, file42, "");
        org.apache.commons.io.LineIterator lineIterator45 = org.apache.commons.io.FileUtils.lineIterator(file35);
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file49 = org.apache.commons.io.FileUtils.getFile(strArray48);
        java.lang.String[] strArray52 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file53 = org.apache.commons.io.FileUtils.getFile(strArray52);
        boolean boolean54 = org.apache.commons.io.FileUtils.isFileOlder(file49, file53);
        boolean boolean56 = org.apache.commons.io.FileUtils.waitFor(file53, (int) '4');
        org.apache.commons.io.LineIterator lineIterator57 = org.apache.commons.io.FileUtils.lineIterator(file53);
        boolean boolean58 = org.apache.commons.io.FileUtils.deleteQuietly(file53);
        org.apache.commons.io.FileUtils.write(file53, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset62 = null;
        org.apache.commons.io.FileUtils.write(file53, (java.lang.CharSequence) "", charset62, true);
        java.nio.charset.Charset charset66 = null;
        org.apache.commons.io.FileUtils.writeStringToFile(file53, "", charset66, false);
        long long69 = org.apache.commons.io.FileUtils.sizeOf(file53);
        org.apache.commons.io.FileUtils.writeStringToFile(file53, "");
        java.nio.charset.Charset charset72 = null;
        java.util.List<java.lang.String> strList73 = org.apache.commons.io.FileUtils.readLines(file53, charset72);
        org.apache.commons.io.FileUtils.writeLines(file35, (java.util.Collection<java.lang.String>) strList73);
        org.apache.commons.io.FileUtils.writeLines(file7, (java.util.Collection<java.lang.String>) strList73, true);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.deleteDirectory(file7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: hi!\\hi! is not a directory");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(fileOutputStream17);
        org.junit.Assert.assertNotNull(lineIterator18);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(file31);
        org.junit.Assert.assertEquals(file31.getParent(), "hi!");
        org.junit.Assert.assertEquals(file31.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(file35);
        org.junit.Assert.assertEquals(file35.getParent(), "hi!");
        org.junit.Assert.assertEquals(file35.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(file42);
        org.junit.Assert.assertEquals(file42.getParent(), "hi!");
        org.junit.Assert.assertEquals(file42.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(lineIterator45);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(file49);
        org.junit.Assert.assertEquals(file49.getParent(), "hi!");
        org.junit.Assert.assertEquals(file49.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(file53);
        org.junit.Assert.assertEquals(file53.getParent(), "hi!");
        org.junit.Assert.assertEquals(file53.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(lineIterator57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 0L + "'", long69 == 0L);
        org.junit.Assert.assertNotNull(strList73);
    }

    @Test
    public void test485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test485");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean12 = org.apache.commons.io.FileUtils.deleteQuietly(file7);
        org.apache.commons.io.FileUtils.writeStringToFile(file7, "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file18 = org.apache.commons.io.FileUtils.getFile(strArray17);
        java.lang.String[] strArray21 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file22 = org.apache.commons.io.FileUtils.getFile(strArray21);
        boolean boolean23 = org.apache.commons.io.FileUtils.isFileOlder(file18, file22);
        boolean boolean25 = org.apache.commons.io.FileUtils.waitFor(file22, (int) '4');
        java.lang.String[] strArray28 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file29 = org.apache.commons.io.FileUtils.getFile(strArray28);
        boolean boolean31 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file22, file29, "");
        boolean boolean32 = org.apache.commons.io.FileUtils.isFileNewer(file7, file22);
        java.io.File file33 = null;
        boolean boolean34 = org.apache.commons.io.FileUtils.contentEquals(file22, file33);
        org.apache.commons.io.FileUtils.touch(file22);
        java.lang.String[] strArray38 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file39 = org.apache.commons.io.FileUtils.getFile(strArray38);
        java.lang.String[] strArray42 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file43 = org.apache.commons.io.FileUtils.getFile(strArray42);
        boolean boolean44 = org.apache.commons.io.FileUtils.isFileOlder(file39, file43);
        boolean boolean46 = org.apache.commons.io.FileUtils.waitFor(file43, (int) '4');
        java.lang.String[] strArray49 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file50 = org.apache.commons.io.FileUtils.getFile(strArray49);
        boolean boolean52 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file43, file50, "");
        org.apache.commons.io.LineIterator lineIterator53 = org.apache.commons.io.FileUtils.lineIterator(file43);
        org.apache.commons.io.FileUtils.writeStringToFile(file43, "C:\\Users\\Mathieu\\AppData\\Local\\Temp\\", false);
        boolean boolean58 = org.apache.commons.io.FileUtils.isFileOlder(file43, (long) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.moveDirectoryToDirectory(file22, file43, true);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Destination 'hi!\\hi!' is not a directory");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(file18);
        org.junit.Assert.assertEquals(file18.getParent(), "hi!");
        org.junit.Assert.assertEquals(file18.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(file22);
        org.junit.Assert.assertEquals(file22.getParent(), "hi!");
        org.junit.Assert.assertEquals(file22.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(file29);
        org.junit.Assert.assertEquals(file29.getParent(), "hi!");
        org.junit.Assert.assertEquals(file29.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(file39);
        org.junit.Assert.assertEquals(file39.getParent(), "hi!");
        org.junit.Assert.assertEquals(file39.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(file43);
        org.junit.Assert.assertEquals(file43.getParent(), "hi!");
        org.junit.Assert.assertEquals(file43.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(file50);
        org.junit.Assert.assertEquals(file50.getParent(), "hi!");
        org.junit.Assert.assertEquals(file50.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(lineIterator53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test486");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean12 = org.apache.commons.io.FileUtils.deleteQuietly(file7);
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset16 = null;
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "", charset16, true);
        byte[] byteArray19 = org.apache.commons.io.FileUtils.readFileToByteArray(file7);
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file23 = org.apache.commons.io.FileUtils.getFile(strArray22);
        java.lang.String[] strArray26 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file27 = org.apache.commons.io.FileUtils.getFile(strArray26);
        boolean boolean28 = org.apache.commons.io.FileUtils.isFileOlder(file23, file27);
        boolean boolean30 = org.apache.commons.io.FileUtils.waitFor(file27, (int) '4');
        org.apache.commons.io.LineIterator lineIterator31 = org.apache.commons.io.FileUtils.lineIterator(file27);
        boolean boolean32 = org.apache.commons.io.FileUtils.deleteQuietly(file27);
        org.apache.commons.io.FileUtils.write(file27, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset36 = null;
        org.apache.commons.io.FileUtils.write(file27, (java.lang.CharSequence) "", charset36, true);
        java.nio.charset.Charset charset40 = null;
        org.apache.commons.io.FileUtils.writeStringToFile(file27, "", charset40, false);
        boolean boolean43 = org.apache.commons.io.FileUtils.isFileNewer(file7, file27);
        java.nio.charset.Charset charset45 = null;
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "-1 bytes", charset45);
        long long47 = org.apache.commons.io.FileUtils.checksumCRC32(file7);
        java.util.Date date48 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean49 = org.apache.commons.io.FileUtils.isFileOlder(file7, date48);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No specified date");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[104, 105, 33]");
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(file23);
        org.junit.Assert.assertEquals(file23.getParent(), "hi!");
        org.junit.Assert.assertEquals(file23.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(file27);
        org.junit.Assert.assertEquals(file27.getParent(), "hi!");
        org.junit.Assert.assertEquals(file27.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(lineIterator31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 2035464173L + "'", long47 == 2035464173L);
    }

    @Test
    public void test487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test487");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean12 = org.apache.commons.io.FileUtils.deleteQuietly(file7);
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset16 = null;
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "", charset16, true);
        java.nio.charset.Charset charset20 = null;
        org.apache.commons.io.FileUtils.writeStringToFile(file7, "", charset20, false);
        long long23 = org.apache.commons.io.FileUtils.sizeOf(file7);
        java.lang.String[] strArray26 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file27 = org.apache.commons.io.FileUtils.getFile(strArray26);
        java.lang.String[] strArray30 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file31 = org.apache.commons.io.FileUtils.getFile(strArray30);
        boolean boolean32 = org.apache.commons.io.FileUtils.isFileOlder(file27, file31);
        boolean boolean34 = org.apache.commons.io.FileUtils.waitFor(file31, (int) '4');
        org.apache.commons.io.LineIterator lineIterator35 = org.apache.commons.io.FileUtils.lineIterator(file31);
        boolean boolean36 = org.apache.commons.io.FileUtils.deleteQuietly(file31);
        org.apache.commons.io.FileUtils.write(file31, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset40 = null;
        org.apache.commons.io.FileUtils.write(file31, (java.lang.CharSequence) "", charset40, true);
        java.nio.charset.Charset charset44 = null;
        org.apache.commons.io.FileUtils.writeStringToFile(file31, "", charset44, false);
        long long47 = org.apache.commons.io.FileUtils.sizeOf(file31);
        org.apache.commons.io.FileUtils.writeStringToFile(file31, "");
        boolean boolean51 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file7, file31, "hi!");
        java.lang.String[] strArray54 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file55 = org.apache.commons.io.FileUtils.getFile(strArray54);
        java.lang.String[] strArray56 = new java.lang.String[] {};
        java.io.File file57 = org.apache.commons.io.FileUtils.getFile(strArray56);
        java.io.File file58 = org.apache.commons.io.FileUtils.getFile(file55, strArray56);
        java.lang.String[] strArray61 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file62 = org.apache.commons.io.FileUtils.getFile(strArray61);
        java.lang.String[] strArray65 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file66 = org.apache.commons.io.FileUtils.getFile(strArray65);
        boolean boolean67 = org.apache.commons.io.FileUtils.isFileOlder(file62, file66);
        boolean boolean69 = org.apache.commons.io.FileUtils.waitFor(file66, (int) '4');
        org.apache.commons.io.LineIterator lineIterator70 = org.apache.commons.io.FileUtils.lineIterator(file66);
        boolean boolean72 = org.apache.commons.io.FileUtils.isFileOlder(file66, (-1L));
        java.io.FileOutputStream fileOutputStream74 = org.apache.commons.io.FileUtils.openOutputStream(file66, false);
        long long75 = org.apache.commons.io.FileUtils.copyFile(file55, (java.io.OutputStream) fileOutputStream74);
        boolean boolean76 = org.apache.commons.io.FileUtils.isFileOlder(file7, file55);
        java.math.BigInteger bigInteger77 = org.apache.commons.io.FileUtils.sizeOfAsBigInteger(file7);
        byte[] byteArray84 = new byte[] { (byte) 100, (byte) 100, (byte) 10, (byte) 0, (byte) 0, (byte) 10 };
        org.apache.commons.io.FileUtils.writeByteArrayToFile(file7, byteArray84, true);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter87 = null;
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter88 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Collection<java.io.File> fileCollection89 = org.apache.commons.io.FileUtils.listFiles(file7, iOFileFilter87, iOFileFilter88);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Parameter 'directory' is not a directory: hi!\\hi!");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(file27);
        org.junit.Assert.assertEquals(file27.getParent(), "hi!");
        org.junit.Assert.assertEquals(file27.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(file31);
        org.junit.Assert.assertEquals(file31.getParent(), "hi!");
        org.junit.Assert.assertEquals(file31.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(lineIterator35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(file55);
        org.junit.Assert.assertEquals(file55.getParent(), "hi!");
        org.junit.Assert.assertEquals(file55.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNull(file57);
        org.junit.Assert.assertNotNull(file58);
        org.junit.Assert.assertEquals(file58.getParent(), "hi!");
        org.junit.Assert.assertEquals(file58.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(file62);
        org.junit.Assert.assertEquals(file62.getParent(), "hi!");
        org.junit.Assert.assertEquals(file62.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(file66);
        org.junit.Assert.assertEquals(file66.getParent(), "hi!");
        org.junit.Assert.assertEquals(file66.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(lineIterator70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(fileOutputStream74);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 0L + "'", long75 == 0L);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(bigInteger77);
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[100, 100, 10, 0, 0, 10]");
    }

    @Test
    public void test488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test488");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean12 = org.apache.commons.io.FileUtils.deleteQuietly(file7);
        java.lang.String[] strArray15 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file16 = org.apache.commons.io.FileUtils.getFile(strArray15);
        java.lang.String[] strArray19 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file20 = org.apache.commons.io.FileUtils.getFile(strArray19);
        boolean boolean21 = org.apache.commons.io.FileUtils.isFileOlder(file16, file20);
        boolean boolean23 = org.apache.commons.io.FileUtils.waitFor(file20, (int) '4');
        org.apache.commons.io.LineIterator lineIterator24 = org.apache.commons.io.FileUtils.lineIterator(file20);
        boolean boolean25 = org.apache.commons.io.FileUtils.deleteQuietly(file20);
        org.apache.commons.io.FileUtils.write(file20, (java.lang.CharSequence) "hi!");
        org.apache.commons.io.FileUtils.write(file20, (java.lang.CharSequence) "-1 bytes", false);
        byte[] byteArray31 = org.apache.commons.io.FileUtils.readFileToByteArray(file20);
        org.apache.commons.io.FileUtils.writeByteArrayToFile(file7, byteArray31);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(file16);
        org.junit.Assert.assertEquals(file16.getParent(), "hi!");
        org.junit.Assert.assertEquals(file16.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(file20);
        org.junit.Assert.assertEquals(file20.getParent(), "hi!");
        org.junit.Assert.assertEquals(file20.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(lineIterator24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[45, 49, 32, 98, 121, 116, 101, 115]");
    }

    @Test
    public void test489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test489");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean12 = org.apache.commons.io.FileUtils.deleteQuietly(file7);
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "hi!");
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "-1 bytes", false);
        byte[] byteArray18 = org.apache.commons.io.FileUtils.readFileToByteArray(file7);
        java.lang.String[] strArray21 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file22 = org.apache.commons.io.FileUtils.getFile(strArray21);
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file26 = org.apache.commons.io.FileUtils.getFile(strArray25);
        boolean boolean27 = org.apache.commons.io.FileUtils.isFileOlder(file22, file26);
        boolean boolean29 = org.apache.commons.io.FileUtils.waitFor(file26, (int) '4');
        org.apache.commons.io.LineIterator lineIterator30 = org.apache.commons.io.FileUtils.lineIterator(file26);
        boolean boolean31 = org.apache.commons.io.FileUtils.deleteQuietly(file26);
        org.apache.commons.io.FileUtils.writeStringToFile(file26, "");
        org.apache.commons.io.FileUtils.forceMkdirParent(file26);
        boolean boolean36 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file7, file26, "C:\\Users\\Mathieu\\AppData\\Local\\Temp\\");
        java.lang.String str37 = org.apache.commons.io.FileUtils.readFileToString(file7);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[45, 49, 32, 98, 121, 116, 101, 115]");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(file22);
        org.junit.Assert.assertEquals(file22.getParent(), "hi!");
        org.junit.Assert.assertEquals(file22.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(file26);
        org.junit.Assert.assertEquals(file26.getParent(), "hi!");
        org.junit.Assert.assertEquals(file26.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(lineIterator30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
    }

    @Test
    public void test490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test490");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean13 = org.apache.commons.io.FileUtils.waitFor(file7, (int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.String> strList15 = org.apache.commons.io.FileUtils.readLines(file7, "0 bytes");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: 0 bytes");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test491");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        java.lang.String[] strArray10 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file11 = org.apache.commons.io.FileUtils.getFile(strArray10);
        boolean boolean12 = org.apache.commons.io.FileUtils.isFileOlder(file7, file11);
        boolean boolean14 = org.apache.commons.io.FileUtils.waitFor(file11, (int) '4');
        org.apache.commons.io.LineIterator lineIterator15 = org.apache.commons.io.FileUtils.lineIterator(file11);
        boolean boolean16 = org.apache.commons.io.FileUtils.deleteQuietly(file11);
        org.apache.commons.io.FileUtils.write(file11, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset20 = null;
        org.apache.commons.io.FileUtils.write(file11, (java.lang.CharSequence) "", charset20, true);
        boolean boolean23 = org.apache.commons.io.FileUtils.contentEquals(file3, file11);
        org.apache.commons.io.FileUtils.forceMkdirParent(file3);
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file28 = org.apache.commons.io.FileUtils.getFile(strArray27);
        java.lang.String[] strArray31 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file32 = org.apache.commons.io.FileUtils.getFile(strArray31);
        boolean boolean33 = org.apache.commons.io.FileUtils.isFileOlder(file28, file32);
        boolean boolean35 = org.apache.commons.io.FileUtils.waitFor(file32, (int) '4');
        org.apache.commons.io.LineIterator lineIterator36 = org.apache.commons.io.FileUtils.lineIterator(file32);
        boolean boolean37 = org.apache.commons.io.FileUtils.deleteQuietly(file32);
        org.apache.commons.io.FileUtils.write(file32, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset41 = null;
        org.apache.commons.io.FileUtils.write(file32, (java.lang.CharSequence) "", charset41, true);
        byte[] byteArray44 = org.apache.commons.io.FileUtils.readFileToByteArray(file32);
        boolean boolean46 = org.apache.commons.io.FileUtils.waitFor(file32, (int) 'a');
        byte[] byteArray47 = org.apache.commons.io.FileUtils.readFileToByteArray(file32);
        java.io.FileInputStream fileInputStream48 = org.apache.commons.io.FileUtils.openInputStream(file32);
        byte[] byteArray49 = org.apache.commons.io.FileUtils.readFileToByteArray(file32);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.copyToDirectory(file3, file32);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Destination 'hi!\\hi!' is not a directory");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(file11);
        org.junit.Assert.assertEquals(file11.getParent(), "hi!");
        org.junit.Assert.assertEquals(file11.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(lineIterator15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(file28);
        org.junit.Assert.assertEquals(file28.getParent(), "hi!");
        org.junit.Assert.assertEquals(file28.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(file32);
        org.junit.Assert.assertEquals(file32.getParent(), "hi!");
        org.junit.Assert.assertEquals(file32.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(lineIterator36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[104, 105, 33]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[104, 105, 33]");
        org.junit.Assert.assertNotNull(fileInputStream48);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[104, 105, 33]");
    }

    @Test
    public void test492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test492");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean12 = org.apache.commons.io.FileUtils.deleteQuietly(file7);
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset16 = null;
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "", charset16, true);
        java.io.File file19 = org.apache.commons.io.FileUtils.getTempDirectory();
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file23 = org.apache.commons.io.FileUtils.getFile(strArray22);
        java.lang.String[] strArray26 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file27 = org.apache.commons.io.FileUtils.getFile(strArray26);
        boolean boolean28 = org.apache.commons.io.FileUtils.isFileOlder(file23, file27);
        boolean boolean30 = org.apache.commons.io.FileUtils.waitFor(file27, (int) '4');
        org.apache.commons.io.LineIterator lineIterator31 = org.apache.commons.io.FileUtils.lineIterator(file27);
        boolean boolean33 = org.apache.commons.io.FileUtils.isFileOlder(file27, (-1L));
        java.nio.charset.Charset charset34 = null;
        java.lang.String str35 = org.apache.commons.io.FileUtils.readFileToString(file27, charset34);
        java.io.FileOutputStream fileOutputStream37 = org.apache.commons.io.FileUtils.openOutputStream(file27, false);
        java.io.FileOutputStream fileOutputStream39 = org.apache.commons.io.FileUtils.openOutputStream(file27, true);
        boolean boolean40 = org.apache.commons.io.FileUtils.isFileOlder(file19, file27);
        java.io.FileInputStream fileInputStream41 = org.apache.commons.io.FileUtils.openInputStream(file27);
        java.lang.String[] strArray44 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file45 = org.apache.commons.io.FileUtils.getFile(strArray44);
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file49 = org.apache.commons.io.FileUtils.getFile(strArray48);
        boolean boolean50 = org.apache.commons.io.FileUtils.isFileOlder(file45, file49);
        boolean boolean52 = org.apache.commons.io.FileUtils.waitFor(file49, (int) '4');
        org.apache.commons.io.LineIterator lineIterator53 = org.apache.commons.io.FileUtils.lineIterator(file49);
        boolean boolean55 = org.apache.commons.io.FileUtils.isFileOlder(file49, (-1L));
        java.nio.charset.Charset charset56 = null;
        java.lang.String str57 = org.apache.commons.io.FileUtils.readFileToString(file49, charset56);
        java.io.FileOutputStream fileOutputStream59 = org.apache.commons.io.FileUtils.openOutputStream(file49, false);
        org.apache.commons.io.LineIterator lineIterator60 = org.apache.commons.io.FileUtils.lineIterator(file49);
        java.lang.String[] strArray63 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file64 = org.apache.commons.io.FileUtils.getFile(strArray63);
        java.lang.String[] strArray67 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file68 = org.apache.commons.io.FileUtils.getFile(strArray67);
        boolean boolean69 = org.apache.commons.io.FileUtils.isFileOlder(file64, file68);
        boolean boolean71 = org.apache.commons.io.FileUtils.waitFor(file68, (int) '4');
        org.apache.commons.io.LineIterator lineIterator72 = org.apache.commons.io.FileUtils.lineIterator(file68);
        boolean boolean73 = org.apache.commons.io.FileUtils.deleteQuietly(file68);
        org.apache.commons.io.FileUtils.writeStringToFile(file68, "");
        java.lang.String[] strArray78 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file79 = org.apache.commons.io.FileUtils.getFile(strArray78);
        java.lang.String[] strArray82 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file83 = org.apache.commons.io.FileUtils.getFile(strArray82);
        boolean boolean84 = org.apache.commons.io.FileUtils.isFileOlder(file79, file83);
        boolean boolean86 = org.apache.commons.io.FileUtils.waitFor(file83, (int) '4');
        java.lang.String[] strArray89 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file90 = org.apache.commons.io.FileUtils.getFile(strArray89);
        boolean boolean92 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file83, file90, "");
        boolean boolean93 = org.apache.commons.io.FileUtils.isFileNewer(file68, file83);
        boolean boolean94 = org.apache.commons.io.FileUtils.contentEquals(file49, file68);
        org.apache.commons.io.FileUtils.copyInputStreamToFile((java.io.InputStream) fileInputStream41, file68);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean96 = org.apache.commons.io.FileUtils.directoryContains(file7, file68);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Not a directory: hi!\\hi!");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(file19);
        org.junit.Assert.assertEquals(file19.getParent(), "C:\\Users\\Mathieu\\AppData\\Local");
        org.junit.Assert.assertEquals(file19.toString(), "C:\\Users\\Mathieu\\AppData\\Local\\Temp");
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(file23);
        org.junit.Assert.assertEquals(file23.getParent(), "hi!");
        org.junit.Assert.assertEquals(file23.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(file27);
        org.junit.Assert.assertEquals(file27.getParent(), "hi!");
        org.junit.Assert.assertEquals(file27.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(lineIterator31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertNotNull(fileOutputStream37);
        org.junit.Assert.assertNotNull(fileOutputStream39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(fileInputStream41);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(file45);
        org.junit.Assert.assertEquals(file45.getParent(), "hi!");
        org.junit.Assert.assertEquals(file45.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(file49);
        org.junit.Assert.assertEquals(file49.getParent(), "hi!");
        org.junit.Assert.assertEquals(file49.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(lineIterator53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(fileOutputStream59);
        org.junit.Assert.assertNotNull(lineIterator60);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(file64);
        org.junit.Assert.assertEquals(file64.getParent(), "hi!");
        org.junit.Assert.assertEquals(file64.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(file68);
        org.junit.Assert.assertEquals(file68.getParent(), "hi!");
        org.junit.Assert.assertEquals(file68.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(lineIterator72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(file79);
        org.junit.Assert.assertEquals(file79.getParent(), "hi!");
        org.junit.Assert.assertEquals(file79.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertNotNull(file83);
        org.junit.Assert.assertEquals(file83.getParent(), "hi!");
        org.junit.Assert.assertEquals(file83.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(strArray89);
        org.junit.Assert.assertNotNull(file90);
        org.junit.Assert.assertEquals(file90.getParent(), "hi!");
        org.junit.Assert.assertEquals(file90.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
    }

    @Test
    public void test493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test493");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean12 = org.apache.commons.io.FileUtils.deleteQuietly(file7);
        java.io.FileOutputStream fileOutputStream13 = org.apache.commons.io.FileUtils.openOutputStream(file7);
        java.io.FileInputStream fileInputStream14 = org.apache.commons.io.FileUtils.openInputStream(file7);
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file18 = org.apache.commons.io.FileUtils.getFile(strArray17);
        org.apache.commons.io.FileUtils.copyToFile((java.io.InputStream) fileInputStream14, file18);
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file23 = org.apache.commons.io.FileUtils.getFile(strArray22);
        java.lang.String[] strArray26 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file27 = org.apache.commons.io.FileUtils.getFile(strArray26);
        boolean boolean28 = org.apache.commons.io.FileUtils.isFileOlder(file23, file27);
        boolean boolean30 = org.apache.commons.io.FileUtils.waitFor(file27, (int) '4');
        org.apache.commons.io.LineIterator lineIterator31 = org.apache.commons.io.FileUtils.lineIterator(file27);
        boolean boolean33 = org.apache.commons.io.FileUtils.isFileOlder(file27, (-1L));
        long long34 = org.apache.commons.io.FileUtils.sizeOf(file27);
        java.io.File file35 = org.apache.commons.io.FileUtils.getUserDirectory();
        org.apache.commons.io.FileUtils.copyFileToDirectory(file27, file35, true);
        org.apache.commons.io.FileUtils.write(file27, (java.lang.CharSequence) "hi!", true);
        org.apache.commons.io.FileUtils.copyInputStreamToFile((java.io.InputStream) fileInputStream14, file27);
        java.lang.String[] strArray44 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file45 = org.apache.commons.io.FileUtils.getFile(strArray44);
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file49 = org.apache.commons.io.FileUtils.getFile(strArray48);
        boolean boolean50 = org.apache.commons.io.FileUtils.isFileOlder(file45, file49);
        boolean boolean52 = org.apache.commons.io.FileUtils.waitFor(file49, (int) '4');
        org.apache.commons.io.LineIterator lineIterator53 = org.apache.commons.io.FileUtils.lineIterator(file49);
        boolean boolean54 = org.apache.commons.io.FileUtils.deleteQuietly(file49);
        org.apache.commons.io.FileUtils.writeStringToFile(file49, "");
        java.lang.String[] strArray59 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file60 = org.apache.commons.io.FileUtils.getFile(strArray59);
        java.lang.String[] strArray63 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file64 = org.apache.commons.io.FileUtils.getFile(strArray63);
        boolean boolean65 = org.apache.commons.io.FileUtils.isFileOlder(file60, file64);
        boolean boolean67 = org.apache.commons.io.FileUtils.waitFor(file64, (int) '4');
        java.lang.String[] strArray70 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file71 = org.apache.commons.io.FileUtils.getFile(strArray70);
        boolean boolean73 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file64, file71, "");
        boolean boolean74 = org.apache.commons.io.FileUtils.isFileNewer(file49, file64);
        java.io.FileOutputStream fileOutputStream75 = org.apache.commons.io.FileUtils.openOutputStream(file49);
        java.io.FileOutputStream fileOutputStream77 = org.apache.commons.io.FileUtils.openOutputStream(file49, false);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.copyToDirectory(file27, file49);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Destination 'hi!\\hi!' is not a directory");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(fileOutputStream13);
        org.junit.Assert.assertNotNull(fileInputStream14);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(file18);
        org.junit.Assert.assertEquals(file18.getParent(), "hi!");
        org.junit.Assert.assertEquals(file18.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(file23);
        org.junit.Assert.assertEquals(file23.getParent(), "hi!");
        org.junit.Assert.assertEquals(file23.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(file27);
        org.junit.Assert.assertEquals(file27.getParent(), "hi!");
        org.junit.Assert.assertEquals(file27.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(lineIterator31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(file35);
        org.junit.Assert.assertEquals(file35.getParent(), "C:\\Users");
        org.junit.Assert.assertEquals(file35.toString(), "C:\\Users\\Mathieu");
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(file45);
        org.junit.Assert.assertEquals(file45.getParent(), "hi!");
        org.junit.Assert.assertEquals(file45.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(file49);
        org.junit.Assert.assertEquals(file49.getParent(), "hi!");
        org.junit.Assert.assertEquals(file49.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(lineIterator53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(file60);
        org.junit.Assert.assertEquals(file60.getParent(), "hi!");
        org.junit.Assert.assertEquals(file60.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(file64);
        org.junit.Assert.assertEquals(file64.getParent(), "hi!");
        org.junit.Assert.assertEquals(file64.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertNotNull(file71);
        org.junit.Assert.assertEquals(file71.getParent(), "hi!");
        org.junit.Assert.assertEquals(file71.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(fileOutputStream75);
        org.junit.Assert.assertNotNull(fileOutputStream77);
    }

    @Test
    public void test494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test494");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean13 = org.apache.commons.io.FileUtils.isFileOlder(file7, (-1L));
        byte[] byteArray14 = new byte[] {};
        org.apache.commons.io.FileUtils.writeByteArrayToFile(file7, byteArray14);
        java.nio.charset.Charset charset17 = null;
        org.apache.commons.io.FileUtils.writeStringToFile(file7, "", charset17);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigInteger bigInteger19 = org.apache.commons.io.FileUtils.sizeOfDirectoryAsBigInteger(file7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: hi!\\hi! is not a directory");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
    }

    @Test
    public void test495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test495");
        java.net.URL uRL0 = null;
        java.lang.String[] strArray3 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file4 = org.apache.commons.io.FileUtils.getFile(strArray3);
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file8 = org.apache.commons.io.FileUtils.getFile(strArray7);
        boolean boolean9 = org.apache.commons.io.FileUtils.isFileOlder(file4, file8);
        boolean boolean11 = org.apache.commons.io.FileUtils.waitFor(file8, (int) '4');
        java.lang.String[] strArray14 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file15 = org.apache.commons.io.FileUtils.getFile(strArray14);
        boolean boolean17 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file8, file15, "");
        java.io.FileInputStream fileInputStream18 = org.apache.commons.io.FileUtils.openInputStream(file15);
        java.lang.String[] strArray21 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file22 = org.apache.commons.io.FileUtils.getFile(strArray21);
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file26 = org.apache.commons.io.FileUtils.getFile(strArray25);
        boolean boolean27 = org.apache.commons.io.FileUtils.isFileOlder(file22, file26);
        boolean boolean28 = org.apache.commons.io.FileUtils.deleteQuietly(file26);
        java.lang.String[] strArray31 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file32 = org.apache.commons.io.FileUtils.getFile(strArray31);
        java.lang.String[] strArray35 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file36 = org.apache.commons.io.FileUtils.getFile(strArray35);
        boolean boolean37 = org.apache.commons.io.FileUtils.isFileOlder(file32, file36);
        boolean boolean39 = org.apache.commons.io.FileUtils.waitFor(file36, (int) '4');
        java.lang.String[] strArray42 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file43 = org.apache.commons.io.FileUtils.getFile(strArray42);
        boolean boolean45 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file36, file43, "");
        org.apache.commons.io.LineIterator lineIterator46 = org.apache.commons.io.FileUtils.lineIterator(file36);
        org.apache.commons.io.FileUtils.writeStringToFile(file36, "C:\\Users\\Mathieu\\AppData\\Local\\Temp\\", false);
        java.nio.charset.Charset charset51 = null;
        org.apache.commons.io.FileUtils.write(file36, (java.lang.CharSequence) "", charset51, true);
        boolean boolean55 = org.apache.commons.io.FileUtils.waitFor(file36, 0);
        boolean boolean56 = org.apache.commons.io.FileUtils.isFileOlder(file26, file36);
        java.lang.String[] strArray59 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file60 = org.apache.commons.io.FileUtils.getFile(strArray59);
        java.lang.String[] strArray63 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file64 = org.apache.commons.io.FileUtils.getFile(strArray63);
        boolean boolean65 = org.apache.commons.io.FileUtils.isFileOlder(file60, file64);
        boolean boolean67 = org.apache.commons.io.FileUtils.waitFor(file64, (int) '4');
        org.apache.commons.io.LineIterator lineIterator68 = org.apache.commons.io.FileUtils.lineIterator(file64);
        boolean boolean69 = org.apache.commons.io.FileUtils.deleteQuietly(file64);
        org.apache.commons.io.FileUtils.write(file64, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset73 = null;
        org.apache.commons.io.FileUtils.write(file64, (java.lang.CharSequence) "", charset73, true);
        java.nio.charset.Charset charset77 = null;
        org.apache.commons.io.FileUtils.writeStringToFile(file64, "", charset77, false);
        java.io.FileOutputStream fileOutputStream80 = org.apache.commons.io.FileUtils.openOutputStream(file64);
        long long81 = org.apache.commons.io.FileUtils.copyFile(file26, (java.io.OutputStream) fileOutputStream80);
        boolean boolean83 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file15, file26, "-1 bytes");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.copyURLToFile(uRL0, file15, 1, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.net.URL.openConnection()\" because \"source\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(file4);
        org.junit.Assert.assertEquals(file4.getParent(), "hi!");
        org.junit.Assert.assertEquals(file4.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(file8);
        org.junit.Assert.assertEquals(file8.getParent(), "hi!");
        org.junit.Assert.assertEquals(file8.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(file15);
        org.junit.Assert.assertEquals(file15.getParent(), "hi!");
        org.junit.Assert.assertEquals(file15.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(fileInputStream18);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(file22);
        org.junit.Assert.assertEquals(file22.getParent(), "hi!");
        org.junit.Assert.assertEquals(file22.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(file26);
        org.junit.Assert.assertEquals(file26.getParent(), "hi!");
        org.junit.Assert.assertEquals(file26.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(file32);
        org.junit.Assert.assertEquals(file32.getParent(), "hi!");
        org.junit.Assert.assertEquals(file32.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(file36);
        org.junit.Assert.assertEquals(file36.getParent(), "hi!");
        org.junit.Assert.assertEquals(file36.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(file43);
        org.junit.Assert.assertEquals(file43.getParent(), "hi!");
        org.junit.Assert.assertEquals(file43.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(lineIterator46);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(file60);
        org.junit.Assert.assertEquals(file60.getParent(), "hi!");
        org.junit.Assert.assertEquals(file60.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(file64);
        org.junit.Assert.assertEquals(file64.getParent(), "hi!");
        org.junit.Assert.assertEquals(file64.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(lineIterator68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(fileOutputStream80);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 0L + "'", long81 == 0L);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
    }

    @Test
    public void test496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test496");
        java.io.File file0 = null;
        java.util.Date date1 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean2 = org.apache.commons.io.FileUtils.isFileNewer(file0, date1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No specified date");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test497");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        java.lang.String[] strArray10 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file11 = org.apache.commons.io.FileUtils.getFile(strArray10);
        boolean boolean12 = org.apache.commons.io.FileUtils.isFileOlder(file7, file11);
        boolean boolean14 = org.apache.commons.io.FileUtils.waitFor(file11, (int) '4');
        org.apache.commons.io.LineIterator lineIterator15 = org.apache.commons.io.FileUtils.lineIterator(file11);
        boolean boolean16 = org.apache.commons.io.FileUtils.deleteQuietly(file11);
        org.apache.commons.io.FileUtils.write(file11, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset20 = null;
        org.apache.commons.io.FileUtils.write(file11, (java.lang.CharSequence) "", charset20, true);
        boolean boolean23 = org.apache.commons.io.FileUtils.contentEquals(file3, file11);
        boolean boolean24 = org.apache.commons.io.FileUtils.deleteQuietly(file3);
        java.nio.charset.Charset charset26 = null;
        org.apache.commons.io.FileUtils.write(file3, (java.lang.CharSequence) "\000\000d\001", charset26, true);
        java.lang.String[] strArray31 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file32 = org.apache.commons.io.FileUtils.getFile(strArray31);
        java.lang.String[] strArray35 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file36 = org.apache.commons.io.FileUtils.getFile(strArray35);
        boolean boolean37 = org.apache.commons.io.FileUtils.isFileOlder(file32, file36);
        boolean boolean39 = org.apache.commons.io.FileUtils.waitFor(file36, (int) '4');
        org.apache.commons.io.LineIterator lineIterator40 = org.apache.commons.io.FileUtils.lineIterator(file36);
        boolean boolean42 = org.apache.commons.io.FileUtils.isFileOlder(file36, (-1L));
        byte[] byteArray43 = new byte[] {};
        org.apache.commons.io.FileUtils.writeByteArrayToFile(file36, byteArray43);
        java.io.FileOutputStream fileOutputStream45 = org.apache.commons.io.FileUtils.openOutputStream(file36);
        long long46 = org.apache.commons.io.FileUtils.copyFile(file3, (java.io.OutputStream) fileOutputStream45);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(file11);
        org.junit.Assert.assertEquals(file11.getParent(), "hi!");
        org.junit.Assert.assertEquals(file11.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(lineIterator15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(file32);
        org.junit.Assert.assertEquals(file32.getParent(), "hi!");
        org.junit.Assert.assertEquals(file32.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(file36);
        org.junit.Assert.assertEquals(file36.getParent(), "hi!");
        org.junit.Assert.assertEquals(file36.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(lineIterator40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertNotNull(fileOutputStream45);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
    }

    @Test
    public void test498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test498");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean12 = org.apache.commons.io.FileUtils.deleteQuietly(file7);
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset16 = null;
        org.apache.commons.io.FileUtils.write(file7, (java.lang.CharSequence) "", charset16, true);
        java.nio.charset.Charset charset20 = null;
        org.apache.commons.io.FileUtils.writeStringToFile(file7, "", charset20, false);
        long long23 = org.apache.commons.io.FileUtils.sizeOf(file7);
        java.lang.String[] strArray26 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file27 = org.apache.commons.io.FileUtils.getFile(strArray26);
        java.lang.String[] strArray30 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file31 = org.apache.commons.io.FileUtils.getFile(strArray30);
        boolean boolean32 = org.apache.commons.io.FileUtils.isFileOlder(file27, file31);
        boolean boolean34 = org.apache.commons.io.FileUtils.waitFor(file31, (int) '4');
        org.apache.commons.io.LineIterator lineIterator35 = org.apache.commons.io.FileUtils.lineIterator(file31);
        boolean boolean36 = org.apache.commons.io.FileUtils.deleteQuietly(file31);
        org.apache.commons.io.FileUtils.write(file31, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset40 = null;
        org.apache.commons.io.FileUtils.write(file31, (java.lang.CharSequence) "", charset40, true);
        java.nio.charset.Charset charset44 = null;
        org.apache.commons.io.FileUtils.writeStringToFile(file31, "", charset44, false);
        long long47 = org.apache.commons.io.FileUtils.sizeOf(file31);
        org.apache.commons.io.FileUtils.writeStringToFile(file31, "");
        boolean boolean51 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file7, file31, "hi!");
        java.io.FileInputStream fileInputStream52 = org.apache.commons.io.FileUtils.openInputStream(file7);
        java.io.File file53 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.FileUtils.copyDirectory(file7, file53, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: target");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(file27);
        org.junit.Assert.assertEquals(file27.getParent(), "hi!");
        org.junit.Assert.assertEquals(file27.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(file31);
        org.junit.Assert.assertEquals(file31.getParent(), "hi!");
        org.junit.Assert.assertEquals(file31.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(lineIterator35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(fileInputStream52);
    }

    @Test
    public void test499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test499");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file14 = org.apache.commons.io.FileUtils.getFile(strArray13);
        boolean boolean16 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file7, file14, "");
        java.io.FileInputStream fileInputStream17 = org.apache.commons.io.FileUtils.openInputStream(file14);
        java.lang.String[] strArray20 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file21 = org.apache.commons.io.FileUtils.getFile(strArray20);
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file25 = org.apache.commons.io.FileUtils.getFile(strArray24);
        boolean boolean26 = org.apache.commons.io.FileUtils.isFileOlder(file21, file25);
        boolean boolean27 = org.apache.commons.io.FileUtils.deleteQuietly(file25);
        java.lang.String[] strArray30 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file31 = org.apache.commons.io.FileUtils.getFile(strArray30);
        java.lang.String[] strArray34 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file35 = org.apache.commons.io.FileUtils.getFile(strArray34);
        boolean boolean36 = org.apache.commons.io.FileUtils.isFileOlder(file31, file35);
        boolean boolean38 = org.apache.commons.io.FileUtils.waitFor(file35, (int) '4');
        java.lang.String[] strArray41 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file42 = org.apache.commons.io.FileUtils.getFile(strArray41);
        boolean boolean44 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file35, file42, "");
        org.apache.commons.io.LineIterator lineIterator45 = org.apache.commons.io.FileUtils.lineIterator(file35);
        org.apache.commons.io.FileUtils.writeStringToFile(file35, "C:\\Users\\Mathieu\\AppData\\Local\\Temp\\", false);
        java.nio.charset.Charset charset50 = null;
        org.apache.commons.io.FileUtils.write(file35, (java.lang.CharSequence) "", charset50, true);
        boolean boolean54 = org.apache.commons.io.FileUtils.waitFor(file35, 0);
        boolean boolean55 = org.apache.commons.io.FileUtils.isFileOlder(file25, file35);
        java.lang.String[] strArray58 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file59 = org.apache.commons.io.FileUtils.getFile(strArray58);
        java.lang.String[] strArray62 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file63 = org.apache.commons.io.FileUtils.getFile(strArray62);
        boolean boolean64 = org.apache.commons.io.FileUtils.isFileOlder(file59, file63);
        boolean boolean66 = org.apache.commons.io.FileUtils.waitFor(file63, (int) '4');
        org.apache.commons.io.LineIterator lineIterator67 = org.apache.commons.io.FileUtils.lineIterator(file63);
        boolean boolean68 = org.apache.commons.io.FileUtils.deleteQuietly(file63);
        org.apache.commons.io.FileUtils.write(file63, (java.lang.CharSequence) "hi!");
        java.nio.charset.Charset charset72 = null;
        org.apache.commons.io.FileUtils.write(file63, (java.lang.CharSequence) "", charset72, true);
        java.nio.charset.Charset charset76 = null;
        org.apache.commons.io.FileUtils.writeStringToFile(file63, "", charset76, false);
        java.io.FileOutputStream fileOutputStream79 = org.apache.commons.io.FileUtils.openOutputStream(file63);
        long long80 = org.apache.commons.io.FileUtils.copyFile(file25, (java.io.OutputStream) fileOutputStream79);
        boolean boolean82 = org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(file14, file25, "-1 bytes");
        org.apache.commons.io.FileUtils.writeStringToFile(file14, "32 bytes", false);
        org.apache.commons.io.FileUtils.forceMkdirParent(file14);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(file14);
        org.junit.Assert.assertEquals(file14.getParent(), "hi!");
        org.junit.Assert.assertEquals(file14.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(fileInputStream17);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(file21);
        org.junit.Assert.assertEquals(file21.getParent(), "hi!");
        org.junit.Assert.assertEquals(file21.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(file25);
        org.junit.Assert.assertEquals(file25.getParent(), "hi!");
        org.junit.Assert.assertEquals(file25.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(file31);
        org.junit.Assert.assertEquals(file31.getParent(), "hi!");
        org.junit.Assert.assertEquals(file31.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(file35);
        org.junit.Assert.assertEquals(file35.getParent(), "hi!");
        org.junit.Assert.assertEquals(file35.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(file42);
        org.junit.Assert.assertEquals(file42.getParent(), "hi!");
        org.junit.Assert.assertEquals(file42.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(lineIterator45);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(file59);
        org.junit.Assert.assertEquals(file59.getParent(), "hi!");
        org.junit.Assert.assertEquals(file59.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(file63);
        org.junit.Assert.assertEquals(file63.getParent(), "hi!");
        org.junit.Assert.assertEquals(file63.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(lineIterator67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(fileOutputStream79);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 0L + "'", long80 == 0L);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
    }

    @Test
    public void test500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test500");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file3 = org.apache.commons.io.FileUtils.getFile(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.io.File file7 = org.apache.commons.io.FileUtils.getFile(strArray6);
        boolean boolean8 = org.apache.commons.io.FileUtils.isFileOlder(file3, file7);
        boolean boolean10 = org.apache.commons.io.FileUtils.waitFor(file7, (int) '4');
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.FileUtils.lineIterator(file7);
        boolean boolean13 = org.apache.commons.io.FileUtils.waitFor(file7, (int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.String> strList15 = org.apache.commons.io.FileUtils.readLines(file7, "1 PB");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: 1 PB");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "hi!");
        org.junit.Assert.assertEquals(file3.toString(), "hi!\\hi!");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!");
        org.junit.Assert.assertEquals(file7.toString(), "hi!\\hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }
}
