import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest1 {

    public static boolean debug = false;

    @Test
    public void test0501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0501");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream5 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray("");
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray10);
        long long12 = org.apache.commons.io.IOUtils.copyLarge(inputStream4, outputStream5, 0L, 0L, byteArray10);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, byteArray10);
        java.io.BufferedInputStream bufferedInputStream15 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.nio.charset.Charset charset16 = null;
        java.util.List<java.lang.String> strList17 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset16);
        java.io.OutputStream outputStream18 = null;
        long long21 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream18, 0L, (long) 0);
        java.nio.charset.Charset charset22 = null;
        char[] charArray23 = org.apache.commons.io.IOUtils.toCharArray(inputStream1, charset22);
        java.io.Writer writer24 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray23, writer24);
        java.io.OutputStream outputStream26 = null;
        java.nio.charset.Charset charset27 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(charArray23, outputStream26, charset27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.OutputStream.write(byte[])\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream15);
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[]");
    }

    @Test
    public void test0502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0502");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        org.apache.commons.io.IOUtils.closeQuietly(inputStream1);
        java.io.InputStream inputStream7 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray8 = new byte[] {};
        int int9 = org.apache.commons.io.IOUtils.length(byteArray8);
        int int10 = org.apache.commons.io.IOUtils.read(inputStream7, byteArray8);
        java.lang.String str11 = org.apache.commons.io.IOUtils.toString(byteArray8);
        int int14 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray8, (int) (byte) 10, (int) (short) 0);
        java.io.Writer writer15 = null;
        java.nio.charset.Charset charset16 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(byteArray8, writer15, charset16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Writer.write(String)\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(inputStream7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test0503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0503");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray(inputStream1, (int) (short) 0);
        java.io.BufferedInputStream bufferedInputStream8 = org.apache.commons.io.IOUtils.buffer(inputStream1);
        org.apache.commons.io.function.IOConsumer<java.io.IOException> iOExceptionIOConsumer9 = null;
        org.apache.commons.io.IOUtils.close((java.io.Closeable) bufferedInputStream8, iOExceptionIOConsumer9);
        java.io.OutputStream outputStream11 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long13 = org.apache.commons.io.IOUtils.copy((java.io.InputStream) bufferedInputStream8, outputStream11, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Stream closed");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream8);
    }

    @Test
    public void test0504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0504");
        java.io.Reader reader0 = null;
        java.io.Reader reader1 = null;
        java.io.Writer writer2 = null;
        char[] charArray5 = new char[] {};
        int int6 = org.apache.commons.io.IOUtils.length(charArray5);
        java.io.Writer writer7 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray5, writer7);
        java.io.Writer writer9 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray5, writer9);
        long long11 = org.apache.commons.io.IOUtils.copyLarge(reader1, writer2, 0L, (long) (byte) 100, charArray5);
        java.io.Writer writer12 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray5, writer12);
        java.io.Writer writer14 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray5, writer14);
        // The following exception was thrown during execution in test generation
        try {
            int int18 = org.apache.commons.io.IOUtils.read(reader0, charArray5, (int) 'a', (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[], int, int)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
    }

    @Test
    public void test0505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0505");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.BufferedInputStream bufferedInputStream3 = org.apache.commons.io.IOUtils.buffer(inputStream1, 100);
        java.io.BufferedInputStream bufferedInputStream4 = org.apache.commons.io.IOUtils.buffer((java.io.InputStream) bufferedInputStream3);
        java.io.OutputStream outputStream5 = null;
        java.io.InputStream inputStream9 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray10 = new byte[] {};
        int int11 = org.apache.commons.io.IOUtils.length(byteArray10);
        int int12 = org.apache.commons.io.IOUtils.read(inputStream9, byteArray10);
        byte[] byteArray13 = org.apache.commons.io.IOUtils.toByteArray(inputStream9);
        byte[] byteArray14 = org.apache.commons.io.IOUtils.toByteArray(inputStream9);
        // The following exception was thrown during execution in test generation
        try {
            long long15 = org.apache.commons.io.IOUtils.copyLarge((java.io.InputStream) bufferedInputStream3, outputStream5, 10L, (long) 'a', byteArray14);
            org.junit.Assert.fail("Expected exception of type java.io.EOFException; message: Bytes to skip: 10 actual: 0");
        } catch (java.io.EOFException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(bufferedInputStream3);
        org.junit.Assert.assertNotNull(bufferedInputStream4);
        org.junit.Assert.assertNotNull(inputStream9);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
    }

    @Test
    public void test0506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0506");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        java.nio.charset.Charset charset10 = null;
        java.util.List<java.lang.String> strList11 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset10);
        java.io.Writer writer13 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList11, "\r\n", writer13);
        java.io.Writer writer16 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList11, "\n", writer16);
        java.io.OutputStream outputStream19 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList11, "", outputStream19, "\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ?");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(strList11);
    }

    @Test
    public void test0507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0507");
        java.io.OutputStream outputStream0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.BufferedOutputStream bufferedOutputStream2 = org.apache.commons.io.IOUtils.buffer(outputStream0, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: outputStream");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0508");
        java.io.Reader reader0 = null;
        java.io.Reader reader1 = null;
        java.io.Writer writer2 = null;
        char[] charArray5 = new char[] {};
        int int6 = org.apache.commons.io.IOUtils.length(charArray5);
        java.io.Writer writer7 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray5, writer7);
        java.io.Writer writer9 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray5, writer9);
        long long11 = org.apache.commons.io.IOUtils.copyLarge(reader1, writer2, 0L, (long) (byte) 100, charArray5);
        java.io.Writer writer12 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray5, writer12);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.readFully(reader0, charArray5, (int) '#', 4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[], int, int)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
    }

    @Test
    public void test0509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0509");
        char[] charArray0 = new char[] {};
        int int1 = org.apache.commons.io.IOUtils.length(charArray0);
        java.io.Writer writer2 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray0, writer2);
        java.io.Writer writer4 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray0, writer4);
        java.io.Writer writer6 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(charArray0, writer6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Writer.write(char[])\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray0);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray0), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray0), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
    }

    @Test
    public void test0510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0510");
        java.io.OutputStream outputStream1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write((java.lang.CharSequence) "hi!", outputStream1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.OutputStream.write(byte[])\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0511");
        java.io.Closeable closeable0 = null;
        org.apache.commons.io.function.IOConsumer<java.io.IOException> iOExceptionIOConsumer1 = null;
        org.apache.commons.io.IOUtils.close(closeable0, iOExceptionIOConsumer1);
    }

    @Test
    public void test0512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0512");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        java.io.OutputStream outputStream10 = null;
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream10, (long) (short) 0, (-1L));
        char[] charArray14 = org.apache.commons.io.IOUtils.toCharArray(inputStream1);
        java.io.Writer writer15 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(charArray14, writer15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Writer.write(char[])\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[]");
    }

    @Test
    public void test0513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0513");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.BufferedInputStream bufferedInputStream10 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        org.apache.commons.io.function.IOConsumer<java.io.IOException> iOExceptionIOConsumer11 = null;
        org.apache.commons.io.IOUtils.close((java.io.Closeable) bufferedInputStream10, iOExceptionIOConsumer11);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) bufferedInputStream10);
        // The following exception was thrown during execution in test generation
        try {
            char[] charArray14 = org.apache.commons.io.IOUtils.toCharArray((java.io.InputStream) bufferedInputStream10);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Stream closed");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream10);
    }

    @Test
    public void test0514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0514");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream3 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer4 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream3, iOExceptionConsumer4);
        java.io.OutputStream outputStream6 = null;
        java.io.InputStream inputStream8 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray9 = org.apache.commons.io.IOUtils.toByteArray(inputStream8);
        // The following exception was thrown during execution in test generation
        try {
            long long10 = org.apache.commons.io.IOUtils.copyLarge(inputStream3, outputStream6, byteArray9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.OutputStream.write(byte[], int, int)\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream3);
        org.junit.Assert.assertNotNull(inputStream8);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
    }

    @Test
    public void test0515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0515");
        // The following exception was thrown during execution in test generation
        try {
            java.io.InputStream inputStream2 = org.apache.commons.io.IOUtils.toInputStream("\r\n", "\r\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ??");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0516");
        java.io.Writer writer0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.BufferedWriter bufferedWriter2 = org.apache.commons.io.IOUtils.buffer(writer0, 3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0517");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        org.apache.commons.io.function.IOConsumer<java.io.IOException> iOExceptionIOConsumer10 = null;
        org.apache.commons.io.IOUtils.close((java.io.Closeable) outputStream2, iOExceptionIOConsumer10);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
    }

    @Test
    public void test0518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0518");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        org.apache.commons.io.IOUtils.closeQuietly(inputStream1);
        java.io.OutputStream outputStream6 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream6, (long) 6, (long) '/');
            org.junit.Assert.fail("Expected exception of type java.io.EOFException; message: Bytes to skip: 6 actual: 0");
        } catch (java.io.EOFException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test0519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0519");
        // The following exception was thrown during execution in test generation
        try {
            java.io.InputStream inputStream2 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "\n", "hi!");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: hi!");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0520");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.util.List<java.lang.String> strList4 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.OutputStream outputStream5 = null;
        long long6 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream5);
        java.io.OutputStream outputStream7 = null;
        java.io.InputStream inputStream11 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray12 = new byte[] {};
        int int13 = org.apache.commons.io.IOUtils.length(byteArray12);
        int int14 = org.apache.commons.io.IOUtils.read(inputStream11, byteArray12);
        long long15 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream7, (-1L), 1L, byteArray12);
        java.io.OutputStream outputStream16 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray12, outputStream16);
        java.io.Writer writer18 = null;
        java.nio.charset.Charset charset19 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(byteArray12, writer18, charset19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Writer.write(String)\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(inputStream11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
    }

    @Test
    public void test0521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0521");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.util.List<java.lang.String> strList4 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.OutputStream outputStream5 = null;
        long long6 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream5);
        java.io.Writer writer7 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer7);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream11 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray12 = new byte[] {};
        int int13 = org.apache.commons.io.IOUtils.length(byteArray12);
        int int14 = org.apache.commons.io.IOUtils.read(inputStream11, byteArray12);
        byte[] byteArray15 = org.apache.commons.io.IOUtils.toByteArray(inputStream11);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer16 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream11, iOExceptionConsumer16);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream11);
        java.io.BufferedInputStream bufferedInputStream20 = org.apache.commons.io.IOUtils.buffer(inputStream11, (int) (byte) 10);
        java.io.InputStream inputStream22 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream11, (int) (byte) 1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer23 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream11, iOExceptionConsumer23);
        java.io.OutputStream outputStream25 = null;
        java.io.InputStream inputStream27 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray28 = new byte[] {};
        int int29 = org.apache.commons.io.IOUtils.length(byteArray28);
        int int30 = org.apache.commons.io.IOUtils.read(inputStream27, byteArray28);
        byte[] byteArray31 = org.apache.commons.io.IOUtils.toByteArray(inputStream27);
        java.io.InputStream inputStream33 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray34 = new byte[] {};
        int int35 = org.apache.commons.io.IOUtils.length(byteArray34);
        int int36 = org.apache.commons.io.IOUtils.read(inputStream33, byteArray34);
        byte[] byteArray37 = org.apache.commons.io.IOUtils.toByteArray(inputStream33);
        int int38 = org.apache.commons.io.IOUtils.length(byteArray37);
        org.apache.commons.io.IOUtils.readFully(inputStream27, byteArray37);
        long long40 = org.apache.commons.io.IOUtils.copyLarge(inputStream11, outputStream25, byteArray37);
        boolean boolean41 = org.apache.commons.io.IOUtils.contentEquals(inputStream1, inputStream11);
        java.io.InputStream inputStream43 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "hi!");
        java.io.InputStream inputStream45 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray46 = new byte[] {};
        int int47 = org.apache.commons.io.IOUtils.length(byteArray46);
        int int48 = org.apache.commons.io.IOUtils.read(inputStream45, byteArray46);
        byte[] byteArray49 = org.apache.commons.io.IOUtils.toByteArray(inputStream45);
        byte[] byteArray51 = org.apache.commons.io.IOUtils.toByteArray(inputStream45, (int) (short) 0);
        java.io.BufferedInputStream bufferedInputStream52 = org.apache.commons.io.IOUtils.buffer(inputStream45);
        byte[] byteArray53 = org.apache.commons.io.IOUtils.toByteArray((java.io.InputStream) bufferedInputStream52);
        int int56 = org.apache.commons.io.IOUtils.read(inputStream43, byteArray53, 0, 0);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.readFully(inputStream11, byteArray53, 6, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Range [6, 6 + 1) out of bounds for length 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(inputStream11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream20);
        org.junit.Assert.assertNotNull(inputStream22);
        org.junit.Assert.assertNotNull(inputStream27);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(inputStream33);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(inputStream43);
        org.junit.Assert.assertNotNull(inputStream45);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream52);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
    }

    @Test
    public void test0522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0522");
        java.io.Writer writer0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.BufferedWriter bufferedWriter2 = org.apache.commons.io.IOUtils.buffer(writer0, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0523");
        java.io.OutputStream outputStream1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write((java.lang.CharSequence) "hi!", outputStream1, "hi!");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: hi!");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0524");
        java.io.Reader reader0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.BufferedReader bufferedReader2 = org.apache.commons.io.IOUtils.toBufferedReader(reader0, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0525");
        java.io.Reader reader0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.BufferedReader bufferedReader2 = org.apache.commons.io.IOUtils.buffer(reader0, (int) '/');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0526");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.util.List<java.lang.String> strList4 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.OutputStream outputStream5 = null;
        long long6 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream5);
        java.io.OutputStream outputStream7 = null;
        java.io.InputStream inputStream11 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray12 = new byte[] {};
        int int13 = org.apache.commons.io.IOUtils.length(byteArray12);
        int int14 = org.apache.commons.io.IOUtils.read(inputStream11, byteArray12);
        byte[] byteArray15 = org.apache.commons.io.IOUtils.toByteArray(inputStream11);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer16 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream11, iOExceptionConsumer16);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream11);
        java.io.BufferedInputStream bufferedInputStream20 = org.apache.commons.io.IOUtils.buffer(inputStream11, (int) (byte) 10);
        java.io.InputStream inputStream22 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream11, (int) (byte) 1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer23 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream11, iOExceptionConsumer23);
        java.io.OutputStream outputStream25 = null;
        java.io.InputStream inputStream27 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray28 = new byte[] {};
        int int29 = org.apache.commons.io.IOUtils.length(byteArray28);
        int int30 = org.apache.commons.io.IOUtils.read(inputStream27, byteArray28);
        byte[] byteArray31 = org.apache.commons.io.IOUtils.toByteArray(inputStream27);
        java.io.InputStream inputStream33 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray34 = new byte[] {};
        int int35 = org.apache.commons.io.IOUtils.length(byteArray34);
        int int36 = org.apache.commons.io.IOUtils.read(inputStream33, byteArray34);
        byte[] byteArray37 = org.apache.commons.io.IOUtils.toByteArray(inputStream33);
        int int38 = org.apache.commons.io.IOUtils.length(byteArray37);
        org.apache.commons.io.IOUtils.readFully(inputStream27, byteArray37);
        long long40 = org.apache.commons.io.IOUtils.copyLarge(inputStream11, outputStream25, byteArray37);
        long long41 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream7, (long) (short) 0, 1L, byteArray37);
        org.apache.commons.io.function.IOConsumer<java.io.IOException> iOExceptionIOConsumer42 = null;
        org.apache.commons.io.IOUtils.close((java.io.Closeable) outputStream7, iOExceptionIOConsumer42);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(inputStream11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream20);
        org.junit.Assert.assertNotNull(inputStream22);
        org.junit.Assert.assertNotNull(inputStream27);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(inputStream33);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
    }

    @Test
    public void test0527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0527");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "\n");
        java.util.List<java.lang.String> strList2 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.OutputStream outputStream4 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList2, "hi!", outputStream4, "\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ?");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(strList2);
    }

    @Test
    public void test0528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0528");
        java.io.InputStream inputStream0 = null;
        java.io.OutputStream outputStream1 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long3 = org.apache.commons.io.IOUtils.copy(inputStream0, outputStream1, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.InputStream.read(byte[])\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0529");
        java.io.InputStream inputStream0 = null;
        java.nio.charset.Charset charset1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.String> strList2 = org.apache.commons.io.IOUtils.readLines(inputStream0, charset1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0530");
        java.nio.charset.Charset charset1 = null;
        java.io.InputStream inputStream2 = org.apache.commons.io.IOUtils.toInputStream("\r\n", charset1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.LineIterator lineIterator4 = org.apache.commons.io.IOUtils.lineIterator(inputStream2, "hi!");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: hi!");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream2);
    }

    @Test
    public void test0531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0531");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.BufferedInputStream bufferedInputStream10 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.io.InputStream inputStream12 = org.apache.commons.io.IOUtils.toBufferedInputStream((java.io.InputStream) bufferedInputStream10, (int) '#');
        java.io.Writer writer13 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.copy((java.io.InputStream) bufferedInputStream10, writer13, "");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream10);
        org.junit.Assert.assertNotNull(inputStream12);
    }

    @Test
    public void test0532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0532");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.util.List<java.lang.String> strList4 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.OutputStream outputStream5 = null;
        long long6 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream5);
        java.io.Writer writer7 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer7);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream11 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray12 = new byte[] {};
        int int13 = org.apache.commons.io.IOUtils.length(byteArray12);
        int int14 = org.apache.commons.io.IOUtils.read(inputStream11, byteArray12);
        byte[] byteArray15 = org.apache.commons.io.IOUtils.toByteArray(inputStream11);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer16 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream11, iOExceptionConsumer16);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream11);
        java.io.BufferedInputStream bufferedInputStream20 = org.apache.commons.io.IOUtils.buffer(inputStream11, (int) (byte) 10);
        java.io.InputStream inputStream22 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream11, (int) (byte) 1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer23 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream11, iOExceptionConsumer23);
        java.io.OutputStream outputStream25 = null;
        java.io.InputStream inputStream27 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray28 = new byte[] {};
        int int29 = org.apache.commons.io.IOUtils.length(byteArray28);
        int int30 = org.apache.commons.io.IOUtils.read(inputStream27, byteArray28);
        byte[] byteArray31 = org.apache.commons.io.IOUtils.toByteArray(inputStream27);
        java.io.InputStream inputStream33 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray34 = new byte[] {};
        int int35 = org.apache.commons.io.IOUtils.length(byteArray34);
        int int36 = org.apache.commons.io.IOUtils.read(inputStream33, byteArray34);
        byte[] byteArray37 = org.apache.commons.io.IOUtils.toByteArray(inputStream33);
        int int38 = org.apache.commons.io.IOUtils.length(byteArray37);
        org.apache.commons.io.IOUtils.readFully(inputStream27, byteArray37);
        long long40 = org.apache.commons.io.IOUtils.copyLarge(inputStream11, outputStream25, byteArray37);
        boolean boolean41 = org.apache.commons.io.IOUtils.contentEquals(inputStream1, inputStream11);
        byte[] byteArray42 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.readFully(inputStream11, byteArray42);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"buffer\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(inputStream11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream20);
        org.junit.Assert.assertNotNull(inputStream22);
        org.junit.Assert.assertNotNull(inputStream27);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(inputStream33);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
    }

    @Test
    public void test0533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0533");
        java.io.Reader reader0 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long2 = org.apache.commons.io.IOUtils.skip(reader0, (long) 5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[], int, int)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0534");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        java.io.Writer writer10 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer10);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer12 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) writer10, iOExceptionConsumer12);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
    }

    @Test
    public void test0535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0535");
        java.io.Reader reader0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.skipFully(reader0, (long) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Skip count must be non-negative, actual: -1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0536");
        java.io.OutputStream outputStream0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.BufferedOutputStream bufferedOutputStream2 = org.apache.commons.io.IOUtils.buffer(outputStream0, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: outputStream");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0537");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.util.List<java.lang.String> strList4 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.OutputStream outputStream5 = null;
        long long6 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream5);
        java.io.Writer writer7 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer7);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream11 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray12 = new byte[] {};
        int int13 = org.apache.commons.io.IOUtils.length(byteArray12);
        int int14 = org.apache.commons.io.IOUtils.read(inputStream11, byteArray12);
        byte[] byteArray15 = org.apache.commons.io.IOUtils.toByteArray(inputStream11);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer16 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream11, iOExceptionConsumer16);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream11);
        java.io.BufferedInputStream bufferedInputStream20 = org.apache.commons.io.IOUtils.buffer(inputStream11, (int) (byte) 10);
        java.io.InputStream inputStream22 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream11, (int) (byte) 1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer23 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream11, iOExceptionConsumer23);
        java.io.OutputStream outputStream25 = null;
        java.io.InputStream inputStream27 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray28 = new byte[] {};
        int int29 = org.apache.commons.io.IOUtils.length(byteArray28);
        int int30 = org.apache.commons.io.IOUtils.read(inputStream27, byteArray28);
        byte[] byteArray31 = org.apache.commons.io.IOUtils.toByteArray(inputStream27);
        java.io.InputStream inputStream33 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray34 = new byte[] {};
        int int35 = org.apache.commons.io.IOUtils.length(byteArray34);
        int int36 = org.apache.commons.io.IOUtils.read(inputStream33, byteArray34);
        byte[] byteArray37 = org.apache.commons.io.IOUtils.toByteArray(inputStream33);
        int int38 = org.apache.commons.io.IOUtils.length(byteArray37);
        org.apache.commons.io.IOUtils.readFully(inputStream27, byteArray37);
        long long40 = org.apache.commons.io.IOUtils.copyLarge(inputStream11, outputStream25, byteArray37);
        boolean boolean41 = org.apache.commons.io.IOUtils.contentEquals(inputStream1, inputStream11);
        java.io.BufferedInputStream bufferedInputStream42 = org.apache.commons.io.IOUtils.buffer(inputStream1);
        java.io.BufferedInputStream bufferedInputStream44 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (short) 100);
        java.io.Writer writer45 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.copy(inputStream1, writer45, "");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(inputStream11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream20);
        org.junit.Assert.assertNotNull(inputStream22);
        org.junit.Assert.assertNotNull(inputStream27);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(inputStream33);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(bufferedInputStream42);
        org.junit.Assert.assertNotNull(bufferedInputStream44);
    }

    @Test
    public void test0538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0538");
        java.io.InputStream inputStream0 = null;
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream0, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.InputStream.read(byte[], int, int)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0539");
        java.io.Reader reader0 = null;
        java.nio.charset.Charset charset2 = null;
        java.io.InputStream inputStream3 = org.apache.commons.io.IOUtils.toInputStream("hi!", charset2);
        java.nio.charset.Charset charset4 = null;
        char[] charArray5 = org.apache.commons.io.IOUtils.toCharArray(inputStream3, charset4);
        // The following exception was thrown during execution in test generation
        try {
            int int6 = org.apache.commons.io.IOUtils.read(reader0, charArray5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[], int, int)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream3);
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "hi!");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "hi!");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[h, i, !]");
    }

    @Test
    public void test0540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0540");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "hi!");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.LineIterator lineIterator3 = org.apache.commons.io.IOUtils.lineIterator(inputStream1, "hi!");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: hi!");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
    }

    @Test
    public void test0541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0541");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream5 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray("");
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray10);
        long long12 = org.apache.commons.io.IOUtils.copyLarge(inputStream4, outputStream5, 0L, 0L, byteArray10);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, byteArray10);
        java.io.BufferedInputStream bufferedInputStream15 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.io.InputStream inputStream17 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray18 = org.apache.commons.io.IOUtils.toByteArray(inputStream17);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream17);
        java.io.InputStream inputStream21 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream22 = null;
        java.io.InputStream inputStream25 = null;
        byte[] byteArray27 = org.apache.commons.io.IOUtils.toByteArray("");
        int int28 = org.apache.commons.io.IOUtils.read(inputStream25, byteArray27);
        long long29 = org.apache.commons.io.IOUtils.copyLarge(inputStream21, outputStream22, 0L, 0L, byteArray27);
        java.nio.charset.Charset charset30 = null;
        java.util.List<java.lang.String> strList31 = org.apache.commons.io.IOUtils.readLines(inputStream21, charset30);
        java.io.InputStream inputStream33 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream34 = null;
        java.io.InputStream inputStream37 = null;
        byte[] byteArray39 = org.apache.commons.io.IOUtils.toByteArray("");
        int int40 = org.apache.commons.io.IOUtils.read(inputStream37, byteArray39);
        long long41 = org.apache.commons.io.IOUtils.copyLarge(inputStream33, outputStream34, 0L, 0L, byteArray39);
        java.nio.charset.Charset charset42 = null;
        java.util.List<java.lang.String> strList43 = org.apache.commons.io.IOUtils.readLines(inputStream33, charset42);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream33);
        boolean boolean45 = org.apache.commons.io.IOUtils.contentEquals(inputStream21, inputStream33);
        java.io.OutputStream outputStream46 = null;
        java.io.InputStream inputStream48 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream49 = null;
        java.io.InputStream inputStream52 = null;
        byte[] byteArray54 = org.apache.commons.io.IOUtils.toByteArray("");
        int int55 = org.apache.commons.io.IOUtils.read(inputStream52, byteArray54);
        long long56 = org.apache.commons.io.IOUtils.copyLarge(inputStream48, outputStream49, 0L, 0L, byteArray54);
        long long57 = org.apache.commons.io.IOUtils.copyLarge(inputStream33, outputStream46, byteArray54);
        org.apache.commons.io.IOUtils.readFully(inputStream17, byteArray54);
        org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray54);
        java.lang.String str60 = org.apache.commons.io.IOUtils.toString(inputStream1);
        java.io.BufferedInputStream bufferedInputStream62 = org.apache.commons.io.IOUtils.buffer(inputStream1, 100);
        java.io.Writer writer63 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer63);
        // The following exception was thrown during execution in test generation
        try {
            java.io.BufferedInputStream bufferedInputStream66 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Buffer size <= 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream15);
        org.junit.Assert.assertNotNull(inputStream17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(inputStream21);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNotNull(strList31);
        org.junit.Assert.assertNotNull(inputStream33);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertNotNull(strList43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(inputStream48);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(bufferedInputStream62);
    }

    @Test
    public void test0542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0542");
        byte[] byteArray0 = null;
        java.io.OutputStream outputStream1 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray0, outputStream1);
    }

    @Test
    public void test0543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0543");
        java.nio.charset.Charset charset1 = null;
        java.io.InputStream inputStream2 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "", charset1);
        java.util.List<java.lang.String> strList3 = org.apache.commons.io.IOUtils.readLines(inputStream2);
        java.io.OutputStream outputStream5 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList3, "\n", outputStream5);
        java.io.Writer writer8 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList3, "", writer8);
        java.io.OutputStream outputStream11 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList3, "\n", outputStream11, "\r\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ??");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream2);
        org.junit.Assert.assertNotNull(strList3);
    }

    @Test
    public void test0544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0544");
        java.io.Reader reader0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.BufferedReader bufferedReader2 = org.apache.commons.io.IOUtils.buffer(reader0, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0545");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.LineIterator lineIterator7 = org.apache.commons.io.IOUtils.lineIterator(inputStream1, "");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
    }

    @Test
    public void test0546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0546");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.List<java.lang.String> strList3 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.OutputStream outputStream5 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList3, "", outputStream5, "");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(strList3);
    }

    @Test
    public void test0547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0547");
        java.io.Reader reader0 = null;
        java.io.Writer writer1 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long4 = org.apache.commons.io.IOUtils.copyLarge(reader0, writer1, (long) (byte) 100, 100L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[], int, int)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0548");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.util.List<java.lang.String> strList4 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.Writer writer6 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList4, "\r\n", writer6);
        java.io.OutputStream outputStream9 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList4, "hi!", outputStream9, "\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ?");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(strList4);
    }

    @Test
    public void test0549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0549");
        java.io.OutputStream outputStream0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.BufferedOutputStream bufferedOutputStream2 = org.apache.commons.io.IOUtils.buffer(outputStream0, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: outputStream");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0550");
        java.io.Reader reader0 = null;
        java.io.Writer writer1 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long4 = org.apache.commons.io.IOUtils.copyLarge(reader0, writer1, (long) (byte) 10, (long) 5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[], int, int)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0551");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        java.nio.charset.Charset charset10 = null;
        java.util.List<java.lang.String> strList11 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset10);
        java.io.OutputStream outputStream13 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList11, "hi!", outputStream13);
        java.io.OutputStream outputStream16 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList11, "hi!", outputStream16);
        java.io.OutputStream outputStream19 = null;
        java.nio.charset.Charset charset20 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList11, "\n", outputStream19, charset20);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(strList11);
    }

    @Test
    public void test0552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0552");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray(inputStream1, (int) (short) 0);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.skipFully(inputStream1, (long) 1);
            org.junit.Assert.fail("Expected exception of type java.io.EOFException; message: Bytes to skip: 1 actual: 0");
        } catch (java.io.EOFException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
    }

    @Test
    public void test0553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0553");
        java.io.Reader reader0 = null;
        java.io.Writer writer1 = null;
        java.io.Reader reader2 = null;
        java.io.Reader reader3 = null;
        char[] charArray4 = new char[] {};
        int int5 = org.apache.commons.io.IOUtils.length(charArray4);
        java.io.Writer writer6 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray4, writer6);
        int int8 = org.apache.commons.io.IOUtils.read(reader3, charArray4);
        java.io.Writer writer9 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray4, writer9);
        int int11 = org.apache.commons.io.IOUtils.read(reader2, charArray4);
        // The following exception was thrown during execution in test generation
        try {
            long long12 = org.apache.commons.io.IOUtils.copyLarge(reader0, writer1, charArray4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[])\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test0554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0554");
        java.nio.charset.Charset charset1 = null;
        java.io.InputStream inputStream2 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "", charset1);
        java.util.List<java.lang.String> strList3 = org.apache.commons.io.IOUtils.readLines(inputStream2);
        java.io.OutputStream outputStream5 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList3, "\n", outputStream5);
        java.io.Writer writer8 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList3, "\n", writer8);
        org.junit.Assert.assertNotNull(inputStream2);
        org.junit.Assert.assertNotNull(strList3);
    }

    @Test
    public void test0555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0555");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.BufferedInputStream bufferedInputStream10 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        byte[] byteArray11 = null;
        org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray11, (int) '4', 0);
        // The following exception was thrown during execution in test generation
        try {
            java.io.BufferedInputStream bufferedInputStream16 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Buffer size <= 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream10);
    }

    @Test
    public void test0556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0556");
        java.io.OutputStream outputStream0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.BufferedOutputStream bufferedOutputStream2 = org.apache.commons.io.IOUtils.buffer(outputStream0, 2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: outputStream");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0557");
        java.io.Reader reader0 = null;
        java.io.Writer writer1 = null;
        char[] charArray2 = new char[] {};
        int int3 = org.apache.commons.io.IOUtils.length(charArray2);
        int int4 = org.apache.commons.io.IOUtils.length(charArray2);
        // The following exception was thrown during execution in test generation
        try {
            long long5 = org.apache.commons.io.IOUtils.copyLarge(reader0, writer1, charArray2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[])\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray2), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray2), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test0558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0558");
        java.io.Reader reader0 = null;
        java.io.Reader reader1 = null;
        char[] charArray2 = new char[] {};
        int int3 = org.apache.commons.io.IOUtils.length(charArray2);
        java.io.Writer writer4 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray2, writer4);
        org.apache.commons.io.IOUtils.readFully(reader1, charArray2);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.readFully(reader0, charArray2, 100, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[], int, int)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray2), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray2), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test0559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0559");
        java.io.Reader reader0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.BufferedReader bufferedReader2 = org.apache.commons.io.IOUtils.buffer(reader0, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0560");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        java.io.OutputStream outputStream10 = null;
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream10, (long) (short) 0, (-1L));
        java.lang.String str14 = org.apache.commons.io.IOUtils.toString(inputStream1);
        java.io.BufferedInputStream bufferedInputStream15 = org.apache.commons.io.IOUtils.buffer(inputStream1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.skipFully(inputStream1, (long) ' ');
            org.junit.Assert.fail("Expected exception of type java.io.EOFException; message: Bytes to skip: 32 actual: 0");
        } catch (java.io.EOFException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(bufferedInputStream15);
    }

    @Test
    public void test0561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0561");
        java.io.OutputStream outputStream0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.BufferedOutputStream bufferedOutputStream2 = org.apache.commons.io.IOUtils.buffer(outputStream0, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: outputStream");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0562");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray(inputStream1, (int) (short) 0);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        long long10 = org.apache.commons.io.IOUtils.skip(inputStream1, (long) 10);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
    }

    @Test
    public void test0563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0563");
        java.io.OutputStream outputStream0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.BufferedOutputStream bufferedOutputStream2 = org.apache.commons.io.IOUtils.buffer(outputStream0, 3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: outputStream");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0564");
        java.nio.channels.ReadableByteChannel readableByteChannel0 = null;
        long long2 = org.apache.commons.io.IOUtils.skip(readableByteChannel0, (long) (byte) 0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
    }

    @Test
    public void test0565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0565");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream3 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer4 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream3, iOExceptionConsumer4);
        java.io.OutputStream outputStream6 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream3, outputStream6, 1L, (long) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.io.EOFException; message: Bytes to skip: 1 actual: 0");
        } catch (java.io.EOFException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream3);
    }

    @Test
    public void test0566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0566");
        java.io.Reader reader0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.BufferedReader bufferedReader2 = org.apache.commons.io.IOUtils.buffer(reader0, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0567");
        java.io.Reader reader0 = null;
        java.io.Reader reader1 = null;
        char[] charArray2 = new char[] {};
        int int3 = org.apache.commons.io.IOUtils.length(charArray2);
        org.apache.commons.io.IOUtils.readFully(reader1, charArray2);
        int int5 = org.apache.commons.io.IOUtils.length(charArray2);
        // The following exception was thrown during execution in test generation
        try {
            int int8 = org.apache.commons.io.IOUtils.read(reader0, charArray2, (int) (short) 100, 6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[], int, int)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray2), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray2), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test0568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0568");
        java.io.Reader reader0 = null;
        java.io.Writer writer1 = null;
        char[] charArray4 = new char[] {};
        long long5 = org.apache.commons.io.IOUtils.copyLarge(reader0, writer1, (long) (byte) 0, (long) 1, charArray4);
        java.io.OutputStream outputStream6 = null;
        java.nio.charset.Charset charset7 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(charArray4, outputStream6, charset7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.OutputStream.write(byte[])\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[]");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
    }

    @Test
    public void test0569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0569");
        java.io.Reader reader0 = null;
        java.io.InputStream inputStream2 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream3 = null;
        java.io.InputStream inputStream5 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream6 = null;
        java.io.InputStream inputStream9 = null;
        byte[] byteArray11 = org.apache.commons.io.IOUtils.toByteArray("");
        int int12 = org.apache.commons.io.IOUtils.read(inputStream9, byteArray11);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream5, outputStream6, 0L, 0L, byteArray11);
        long long14 = org.apache.commons.io.IOUtils.copyLarge(inputStream2, outputStream3, byteArray11);
        java.io.BufferedInputStream bufferedInputStream16 = org.apache.commons.io.IOUtils.buffer(inputStream2, (int) (byte) 10);
        java.nio.charset.Charset charset17 = null;
        java.util.List<java.lang.String> strList18 = org.apache.commons.io.IOUtils.readLines(inputStream2, charset17);
        java.io.OutputStream outputStream19 = null;
        long long22 = org.apache.commons.io.IOUtils.copyLarge(inputStream2, outputStream19, 0L, (long) 0);
        java.nio.charset.Charset charset23 = null;
        char[] charArray24 = org.apache.commons.io.IOUtils.toCharArray(inputStream2, charset23);
        java.io.Writer writer25 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray24, writer25);
        // The following exception was thrown during execution in test generation
        try {
            int int29 = org.apache.commons.io.IOUtils.read(reader0, charArray24, (int) ' ', (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[], int, int)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream2);
        org.junit.Assert.assertNotNull(inputStream5);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream16);
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[]");
    }

    @Test
    public void test0570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0570");
        java.io.InputStream inputStream0 = null;
        // The following exception was thrown during execution in test generation
        try {
            char[] charArray2 = org.apache.commons.io.IOUtils.toCharArray(inputStream0, "\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ?");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0571");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        java.nio.charset.Charset charset10 = null;
        java.util.List<java.lang.String> strList11 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset10);
        java.io.Writer writer13 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList11, "\r\n", writer13);
        java.io.OutputStream outputStream16 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList11, "\r\n", outputStream16);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(strList11);
    }

    @Test
    public void test0572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0572");
        java.io.Reader reader0 = null;
        java.io.Reader reader1 = null;
        java.io.Reader reader2 = null;
        java.io.Writer writer3 = null;
        char[] charArray6 = new char[] {};
        int int7 = org.apache.commons.io.IOUtils.length(charArray6);
        java.io.Writer writer8 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray6, writer8);
        java.io.Writer writer10 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray6, writer10);
        long long12 = org.apache.commons.io.IOUtils.copyLarge(reader2, writer3, 0L, (long) (byte) 100, charArray6);
        int int13 = org.apache.commons.io.IOUtils.read(reader1, charArray6);
        int int14 = org.apache.commons.io.IOUtils.length(charArray6);
        int int15 = org.apache.commons.io.IOUtils.read(reader0, charArray6);
        java.io.Writer writer16 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(charArray6, writer16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Writer.write(char[])\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test0573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0573");
        java.io.Reader reader0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.BufferedReader bufferedReader2 = org.apache.commons.io.IOUtils.buffer(reader0, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0574");
        java.nio.charset.Charset charset1 = null;
        java.io.InputStream inputStream2 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "", charset1);
        java.util.List<java.lang.String> strList3 = org.apache.commons.io.IOUtils.readLines(inputStream2);
        java.io.OutputStream outputStream5 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList3, "\n", outputStream5);
        java.io.Writer writer8 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList3, "", writer8);
        java.io.OutputStream outputStream11 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList3, "\r\n", outputStream11);
        org.junit.Assert.assertNotNull(inputStream2);
        org.junit.Assert.assertNotNull(strList3);
    }

    @Test
    public void test0575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0575");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream5 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray("");
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray10);
        long long12 = org.apache.commons.io.IOUtils.copyLarge(inputStream4, outputStream5, 0L, 0L, byteArray10);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, byteArray10);
        java.io.BufferedInputStream bufferedInputStream15 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        org.apache.commons.io.IOUtils.closeQuietly(inputStream1);
        java.nio.charset.Charset charset17 = null;
        java.util.List<java.lang.String> strList18 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset17);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.LineIterator lineIterator21 = org.apache.commons.io.IOUtils.lineIterator(inputStream1, "\r\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ??");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream15);
        org.junit.Assert.assertNotNull(strList18);
    }

    @Test
    public void test0576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0576");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        long long9 = org.apache.commons.io.IOUtils.skip(inputStream1, (long) (byte) 100);
        java.lang.String str10 = org.apache.commons.io.IOUtils.toString(inputStream1);
        java.io.Writer writer11 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer11);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.LineIterator lineIterator14 = org.apache.commons.io.IOUtils.lineIterator(inputStream1, "hi!");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: hi!");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
    }

    @Test
    public void test0577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0577");
        java.io.InputStream inputStream0 = null;
        java.io.OutputStream outputStream1 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long3 = org.apache.commons.io.IOUtils.copy(inputStream0, outputStream1, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.InputStream.read(byte[])\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0578");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream5 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray("");
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray10);
        long long12 = org.apache.commons.io.IOUtils.copyLarge(inputStream4, outputStream5, 0L, 0L, byteArray10);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, byteArray10);
        java.io.BufferedInputStream bufferedInputStream15 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.io.InputStream inputStream17 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray18 = org.apache.commons.io.IOUtils.toByteArray(inputStream17);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream17);
        java.io.InputStream inputStream21 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream22 = null;
        java.io.InputStream inputStream25 = null;
        byte[] byteArray27 = org.apache.commons.io.IOUtils.toByteArray("");
        int int28 = org.apache.commons.io.IOUtils.read(inputStream25, byteArray27);
        long long29 = org.apache.commons.io.IOUtils.copyLarge(inputStream21, outputStream22, 0L, 0L, byteArray27);
        java.nio.charset.Charset charset30 = null;
        java.util.List<java.lang.String> strList31 = org.apache.commons.io.IOUtils.readLines(inputStream21, charset30);
        java.io.InputStream inputStream33 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream34 = null;
        java.io.InputStream inputStream37 = null;
        byte[] byteArray39 = org.apache.commons.io.IOUtils.toByteArray("");
        int int40 = org.apache.commons.io.IOUtils.read(inputStream37, byteArray39);
        long long41 = org.apache.commons.io.IOUtils.copyLarge(inputStream33, outputStream34, 0L, 0L, byteArray39);
        java.nio.charset.Charset charset42 = null;
        java.util.List<java.lang.String> strList43 = org.apache.commons.io.IOUtils.readLines(inputStream33, charset42);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream33);
        boolean boolean45 = org.apache.commons.io.IOUtils.contentEquals(inputStream21, inputStream33);
        java.io.OutputStream outputStream46 = null;
        java.io.InputStream inputStream48 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream49 = null;
        java.io.InputStream inputStream52 = null;
        byte[] byteArray54 = org.apache.commons.io.IOUtils.toByteArray("");
        int int55 = org.apache.commons.io.IOUtils.read(inputStream52, byteArray54);
        long long56 = org.apache.commons.io.IOUtils.copyLarge(inputStream48, outputStream49, 0L, 0L, byteArray54);
        long long57 = org.apache.commons.io.IOUtils.copyLarge(inputStream33, outputStream46, byteArray54);
        org.apache.commons.io.IOUtils.readFully(inputStream17, byteArray54);
        org.apache.commons.io.IOUtils.readFully((java.io.InputStream) bufferedInputStream15, byteArray54);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.LineIterator lineIterator61 = org.apache.commons.io.IOUtils.lineIterator((java.io.InputStream) bufferedInputStream15, "");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream15);
        org.junit.Assert.assertNotNull(inputStream17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(inputStream21);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNotNull(strList31);
        org.junit.Assert.assertNotNull(inputStream33);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertNotNull(strList43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(inputStream48);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
    }

    @Test
    public void test0579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0579");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.BufferedInputStream bufferedInputStream10 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.io.InputStream inputStream12 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, (int) (byte) 1);
        java.io.OutputStream outputStream13 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long15 = org.apache.commons.io.IOUtils.copy(inputStream12, outputStream13, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: -1");
        } catch (java.lang.NegativeArraySizeException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream10);
        org.junit.Assert.assertNotNull(inputStream12);
    }

    @Test
    public void test0580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0580");
        java.io.Reader reader0 = null;
        java.io.Reader reader1 = null;
        java.io.Reader reader2 = null;
        java.io.Writer writer3 = null;
        char[] charArray6 = new char[] {};
        int int7 = org.apache.commons.io.IOUtils.length(charArray6);
        java.io.Writer writer8 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray6, writer8);
        java.io.Writer writer10 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray6, writer10);
        long long12 = org.apache.commons.io.IOUtils.copyLarge(reader2, writer3, 0L, (long) (byte) 100, charArray6);
        int int13 = org.apache.commons.io.IOUtils.read(reader1, charArray6);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.readFully(reader0, charArray6, 100, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Length must not be negative: -1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test0581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0581");
        java.io.Reader reader0 = null;
        java.io.Reader reader1 = null;
        java.io.Reader reader2 = null;
        java.io.Reader reader3 = null;
        java.io.Reader reader4 = null;
        java.io.Writer writer5 = null;
        char[] charArray8 = new char[] {};
        int int9 = org.apache.commons.io.IOUtils.length(charArray8);
        java.io.Writer writer10 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray8, writer10);
        java.io.Writer writer12 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray8, writer12);
        long long14 = org.apache.commons.io.IOUtils.copyLarge(reader4, writer5, 0L, (long) (byte) 100, charArray8);
        int int15 = org.apache.commons.io.IOUtils.read(reader3, charArray8);
        int int16 = org.apache.commons.io.IOUtils.length(charArray8);
        int int17 = org.apache.commons.io.IOUtils.read(reader2, charArray8);
        int int18 = org.apache.commons.io.IOUtils.read(reader1, charArray8);
        // The following exception was thrown during execution in test generation
        try {
            int int21 = org.apache.commons.io.IOUtils.read(reader0, charArray8, (int) '\\', (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[], int, int)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test0582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0582");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream5 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray("");
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray10);
        long long12 = org.apache.commons.io.IOUtils.copyLarge(inputStream4, outputStream5, 0L, 0L, byteArray10);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, byteArray10);
        java.io.BufferedInputStream bufferedInputStream15 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.io.InputStream inputStream17 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray18 = org.apache.commons.io.IOUtils.toByteArray(inputStream17);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream17);
        java.io.InputStream inputStream21 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream22 = null;
        java.io.InputStream inputStream25 = null;
        byte[] byteArray27 = org.apache.commons.io.IOUtils.toByteArray("");
        int int28 = org.apache.commons.io.IOUtils.read(inputStream25, byteArray27);
        long long29 = org.apache.commons.io.IOUtils.copyLarge(inputStream21, outputStream22, 0L, 0L, byteArray27);
        java.nio.charset.Charset charset30 = null;
        java.util.List<java.lang.String> strList31 = org.apache.commons.io.IOUtils.readLines(inputStream21, charset30);
        java.io.InputStream inputStream33 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream34 = null;
        java.io.InputStream inputStream37 = null;
        byte[] byteArray39 = org.apache.commons.io.IOUtils.toByteArray("");
        int int40 = org.apache.commons.io.IOUtils.read(inputStream37, byteArray39);
        long long41 = org.apache.commons.io.IOUtils.copyLarge(inputStream33, outputStream34, 0L, 0L, byteArray39);
        java.nio.charset.Charset charset42 = null;
        java.util.List<java.lang.String> strList43 = org.apache.commons.io.IOUtils.readLines(inputStream33, charset42);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream33);
        boolean boolean45 = org.apache.commons.io.IOUtils.contentEquals(inputStream21, inputStream33);
        java.io.OutputStream outputStream46 = null;
        java.io.InputStream inputStream48 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream49 = null;
        java.io.InputStream inputStream52 = null;
        byte[] byteArray54 = org.apache.commons.io.IOUtils.toByteArray("");
        int int55 = org.apache.commons.io.IOUtils.read(inputStream52, byteArray54);
        long long56 = org.apache.commons.io.IOUtils.copyLarge(inputStream48, outputStream49, 0L, 0L, byteArray54);
        long long57 = org.apache.commons.io.IOUtils.copyLarge(inputStream33, outputStream46, byteArray54);
        org.apache.commons.io.IOUtils.readFully(inputStream17, byteArray54);
        org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray54);
        java.lang.String str60 = org.apache.commons.io.IOUtils.toString(inputStream1);
        java.io.BufferedInputStream bufferedInputStream62 = org.apache.commons.io.IOUtils.buffer(inputStream1, 100);
        java.io.OutputStream outputStream63 = null;
        java.io.InputStream inputStream66 = null;
        byte[] byteArray68 = org.apache.commons.io.IOUtils.toByteArray("");
        int int69 = org.apache.commons.io.IOUtils.read(inputStream66, byteArray68);
        java.lang.String str70 = org.apache.commons.io.IOUtils.toString(byteArray68);
        long long71 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream63, (-1L), (long) (short) -1, byteArray68);
        java.io.OutputStream outputStream72 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(byteArray68, outputStream72);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.OutputStream.write(byte[])\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream15);
        org.junit.Assert.assertNotNull(inputStream17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(inputStream21);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNotNull(strList31);
        org.junit.Assert.assertNotNull(inputStream33);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertNotNull(strList43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(inputStream48);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(bufferedInputStream62);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 0L + "'", long71 == 0L);
    }

    @Test
    public void test0583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0583");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        java.nio.charset.Charset charset10 = null;
        java.util.List<java.lang.String> strList11 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset10);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.nio.charset.Charset charset13 = null;
        java.lang.String str14 = org.apache.commons.io.IOUtils.toString(inputStream1, charset13);
        java.io.Writer writer15 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer15);
        byte[] byteArray17 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str19 = org.apache.commons.io.IOUtils.toString(byteArray17, "hi!");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: hi!");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
    }

    @Test
    public void test0584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0584");
        java.io.Reader reader0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.skipFully(reader0, (long) 3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[], int, int)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0585");
        java.io.Reader reader0 = null;
        char[] charArray1 = new char[] {};
        int int2 = org.apache.commons.io.IOUtils.length(charArray1);
        java.io.Writer writer3 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray1, writer3);
        int int5 = org.apache.commons.io.IOUtils.read(reader0, charArray1);
        java.io.Writer writer6 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray1, writer6);
        int int8 = org.apache.commons.io.IOUtils.length(charArray1);
        java.io.OutputStream outputStream9 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(charArray1, outputStream9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.OutputStream.write(byte[])\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray1);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray1), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray1), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray1), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test0586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0586");
        java.nio.charset.Charset charset1 = null;
        java.io.InputStream inputStream2 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "\r\n", charset1);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream2);
        org.junit.Assert.assertNotNull(inputStream2);
    }

    @Test
    public void test0587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0587");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray(inputStream1, (int) (short) 0);
        java.io.BufferedInputStream bufferedInputStream8 = org.apache.commons.io.IOUtils.buffer(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly(inputStream1);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream8);
    }

    @Test
    public void test0588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0588");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream5 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray("");
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray10);
        long long12 = org.apache.commons.io.IOUtils.copyLarge(inputStream4, outputStream5, 0L, 0L, byteArray10);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, byteArray10);
        java.io.BufferedInputStream bufferedInputStream15 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.io.InputStream inputStream17 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray18 = org.apache.commons.io.IOUtils.toByteArray(inputStream17);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream17);
        java.io.InputStream inputStream21 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream22 = null;
        java.io.InputStream inputStream25 = null;
        byte[] byteArray27 = org.apache.commons.io.IOUtils.toByteArray("");
        int int28 = org.apache.commons.io.IOUtils.read(inputStream25, byteArray27);
        long long29 = org.apache.commons.io.IOUtils.copyLarge(inputStream21, outputStream22, 0L, 0L, byteArray27);
        java.nio.charset.Charset charset30 = null;
        java.util.List<java.lang.String> strList31 = org.apache.commons.io.IOUtils.readLines(inputStream21, charset30);
        java.io.InputStream inputStream33 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream34 = null;
        java.io.InputStream inputStream37 = null;
        byte[] byteArray39 = org.apache.commons.io.IOUtils.toByteArray("");
        int int40 = org.apache.commons.io.IOUtils.read(inputStream37, byteArray39);
        long long41 = org.apache.commons.io.IOUtils.copyLarge(inputStream33, outputStream34, 0L, 0L, byteArray39);
        java.nio.charset.Charset charset42 = null;
        java.util.List<java.lang.String> strList43 = org.apache.commons.io.IOUtils.readLines(inputStream33, charset42);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream33);
        boolean boolean45 = org.apache.commons.io.IOUtils.contentEquals(inputStream21, inputStream33);
        java.io.OutputStream outputStream46 = null;
        java.io.InputStream inputStream48 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream49 = null;
        java.io.InputStream inputStream52 = null;
        byte[] byteArray54 = org.apache.commons.io.IOUtils.toByteArray("");
        int int55 = org.apache.commons.io.IOUtils.read(inputStream52, byteArray54);
        long long56 = org.apache.commons.io.IOUtils.copyLarge(inputStream48, outputStream49, 0L, 0L, byteArray54);
        long long57 = org.apache.commons.io.IOUtils.copyLarge(inputStream33, outputStream46, byteArray54);
        org.apache.commons.io.IOUtils.readFully(inputStream17, byteArray54);
        org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray54);
        java.lang.String str60 = org.apache.commons.io.IOUtils.toString(inputStream1);
        java.io.BufferedInputStream bufferedInputStream62 = org.apache.commons.io.IOUtils.buffer(inputStream1, 100);
        java.io.OutputStream outputStream63 = null;
        java.io.InputStream inputStream66 = null;
        byte[] byteArray68 = org.apache.commons.io.IOUtils.toByteArray("");
        int int69 = org.apache.commons.io.IOUtils.read(inputStream66, byteArray68);
        java.lang.String str70 = org.apache.commons.io.IOUtils.toString(byteArray68);
        long long71 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream63, (-1L), (long) (short) -1, byteArray68);
        java.io.Writer writer72 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(byteArray68, writer72);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Writer.write(String)\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream15);
        org.junit.Assert.assertNotNull(inputStream17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(inputStream21);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNotNull(strList31);
        org.junit.Assert.assertNotNull(inputStream33);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertNotNull(strList43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(inputStream48);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(bufferedInputStream62);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 0L + "'", long71 == 0L);
    }

    @Test
    public void test0589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0589");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream5 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream6 = null;
        java.io.InputStream inputStream9 = null;
        byte[] byteArray11 = org.apache.commons.io.IOUtils.toByteArray("");
        int int12 = org.apache.commons.io.IOUtils.read(inputStream9, byteArray11);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream5, outputStream6, 0L, 0L, byteArray11);
        java.nio.charset.Charset charset14 = null;
        java.util.List<java.lang.String> strList15 = org.apache.commons.io.IOUtils.readLines(inputStream5, charset14);
        java.io.InputStream inputStream17 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream18 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray23 = org.apache.commons.io.IOUtils.toByteArray("");
        int int24 = org.apache.commons.io.IOUtils.read(inputStream21, byteArray23);
        long long25 = org.apache.commons.io.IOUtils.copyLarge(inputStream17, outputStream18, 0L, 0L, byteArray23);
        java.nio.charset.Charset charset26 = null;
        java.util.List<java.lang.String> strList27 = org.apache.commons.io.IOUtils.readLines(inputStream17, charset26);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream17);
        boolean boolean29 = org.apache.commons.io.IOUtils.contentEquals(inputStream5, inputStream17);
        java.io.OutputStream outputStream30 = null;
        java.io.InputStream inputStream32 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream33 = null;
        java.io.InputStream inputStream36 = null;
        byte[] byteArray38 = org.apache.commons.io.IOUtils.toByteArray("");
        int int39 = org.apache.commons.io.IOUtils.read(inputStream36, byteArray38);
        long long40 = org.apache.commons.io.IOUtils.copyLarge(inputStream32, outputStream33, 0L, 0L, byteArray38);
        long long41 = org.apache.commons.io.IOUtils.copyLarge(inputStream17, outputStream30, byteArray38);
        org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray38);
        java.io.OutputStream outputStream43 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray38, outputStream43);
        java.io.OutputStream outputStream45 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(byteArray38, outputStream45);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.OutputStream.write(byte[])\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(inputStream5);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(strList15);
        org.junit.Assert.assertNotNull(inputStream17);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(strList27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(inputStream32);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
    }

    @Test
    public void test0590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0590");
        java.io.Reader reader0 = null;
        java.nio.charset.Charset charset2 = null;
        java.io.InputStream inputStream3 = org.apache.commons.io.IOUtils.toInputStream("hi!", charset2);
        java.nio.charset.Charset charset4 = null;
        char[] charArray5 = org.apache.commons.io.IOUtils.toCharArray(inputStream3, charset4);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.readFully(reader0, charArray5, (int) (short) 1, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Length must not be negative: -1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream3);
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "hi!");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "hi!");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[h, i, !]");
    }

    @Test
    public void test0591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0591");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream5 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray("");
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray10);
        long long12 = org.apache.commons.io.IOUtils.copyLarge(inputStream4, outputStream5, 0L, 0L, byteArray10);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, byteArray10);
        java.io.BufferedInputStream bufferedInputStream15 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        org.apache.commons.io.IOUtils.closeQuietly(inputStream1);
        java.nio.charset.Charset charset17 = null;
        java.util.List<java.lang.String> strList18 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset17);
        java.io.OutputStream outputStream19 = null;
        java.io.InputStream inputStream23 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream24 = null;
        java.io.InputStream inputStream26 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream27 = null;
        java.io.InputStream inputStream30 = null;
        byte[] byteArray32 = org.apache.commons.io.IOUtils.toByteArray("");
        int int33 = org.apache.commons.io.IOUtils.read(inputStream30, byteArray32);
        long long34 = org.apache.commons.io.IOUtils.copyLarge(inputStream26, outputStream27, 0L, 0L, byteArray32);
        long long35 = org.apache.commons.io.IOUtils.copyLarge(inputStream23, outputStream24, byteArray32);
        java.io.BufferedInputStream bufferedInputStream37 = org.apache.commons.io.IOUtils.buffer(inputStream23, (int) (byte) 10);
        java.io.InputStream inputStream39 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray40 = org.apache.commons.io.IOUtils.toByteArray(inputStream39);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream39);
        java.io.InputStream inputStream43 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream44 = null;
        java.io.InputStream inputStream47 = null;
        byte[] byteArray49 = org.apache.commons.io.IOUtils.toByteArray("");
        int int50 = org.apache.commons.io.IOUtils.read(inputStream47, byteArray49);
        long long51 = org.apache.commons.io.IOUtils.copyLarge(inputStream43, outputStream44, 0L, 0L, byteArray49);
        java.nio.charset.Charset charset52 = null;
        java.util.List<java.lang.String> strList53 = org.apache.commons.io.IOUtils.readLines(inputStream43, charset52);
        java.io.InputStream inputStream55 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream56 = null;
        java.io.InputStream inputStream59 = null;
        byte[] byteArray61 = org.apache.commons.io.IOUtils.toByteArray("");
        int int62 = org.apache.commons.io.IOUtils.read(inputStream59, byteArray61);
        long long63 = org.apache.commons.io.IOUtils.copyLarge(inputStream55, outputStream56, 0L, 0L, byteArray61);
        java.nio.charset.Charset charset64 = null;
        java.util.List<java.lang.String> strList65 = org.apache.commons.io.IOUtils.readLines(inputStream55, charset64);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream55);
        boolean boolean67 = org.apache.commons.io.IOUtils.contentEquals(inputStream43, inputStream55);
        java.io.OutputStream outputStream68 = null;
        java.io.InputStream inputStream70 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream71 = null;
        java.io.InputStream inputStream74 = null;
        byte[] byteArray76 = org.apache.commons.io.IOUtils.toByteArray("");
        int int77 = org.apache.commons.io.IOUtils.read(inputStream74, byteArray76);
        long long78 = org.apache.commons.io.IOUtils.copyLarge(inputStream70, outputStream71, 0L, 0L, byteArray76);
        long long79 = org.apache.commons.io.IOUtils.copyLarge(inputStream55, outputStream68, byteArray76);
        org.apache.commons.io.IOUtils.readFully(inputStream39, byteArray76);
        org.apache.commons.io.IOUtils.readFully((java.io.InputStream) bufferedInputStream37, byteArray76);
        java.lang.String str82 = org.apache.commons.io.IOUtils.toString(byteArray76);
        // The following exception was thrown during execution in test generation
        try {
            long long83 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream19, 1L, (long) (short) 0, byteArray76);
            org.junit.Assert.fail("Expected exception of type java.io.EOFException; message: Bytes to skip: 1 actual: 0");
        } catch (java.io.EOFException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream15);
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertNotNull(inputStream23);
        org.junit.Assert.assertNotNull(inputStream26);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream37);
        org.junit.Assert.assertNotNull(inputStream39);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertNotNull(inputStream43);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertNotNull(strList53);
        org.junit.Assert.assertNotNull(inputStream55);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 0L + "'", long63 == 0L);
        org.junit.Assert.assertNotNull(strList65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(inputStream70);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 0L + "'", long78 == 0L);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 0L + "'", long79 == 0L);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
    }

    @Test
    public void test0592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0592");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.util.List<java.lang.String> strList4 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.OutputStream outputStream6 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList4, "\n", outputStream6);
        java.io.OutputStream outputStream9 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList4, "\n", outputStream9);
        java.io.OutputStream outputStream12 = null;
        java.nio.charset.Charset charset13 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList4, "\r\n", outputStream12, charset13);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(strList4);
    }

    @Test
    public void test0593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0593");
        java.io.Writer writer1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write("\n", writer1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Writer.write(String)\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0594");
        char[] charArray0 = new char[] {};
        int int1 = org.apache.commons.io.IOUtils.length(charArray0);
        java.io.Writer writer2 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray0, writer2);
        java.io.OutputStream outputStream4 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(charArray0, outputStream4, "");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray0);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray0), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray0), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
    }

    @Test
    public void test0595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0595");
        java.io.Reader reader0 = null;
        java.io.Writer writer1 = null;
        char[] charArray4 = new char[] {};
        int int5 = org.apache.commons.io.IOUtils.length(charArray4);
        java.io.Writer writer6 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray4, writer6);
        java.io.Writer writer8 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray4, writer8);
        // The following exception was thrown during execution in test generation
        try {
            long long10 = org.apache.commons.io.IOUtils.copyLarge(reader0, writer1, 10L, (long) '4', charArray4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[], int, int)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test0596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0596");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.BufferedInputStream bufferedInputStream10 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.io.InputStream inputStream12 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, (int) (byte) 1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer13 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer13);
        java.io.BufferedInputStream bufferedInputStream16 = org.apache.commons.io.IOUtils.buffer(inputStream1, 6);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.skipFully(inputStream1, (long) ' ');
            org.junit.Assert.fail("Expected exception of type java.io.EOFException; message: Bytes to skip: 32 actual: 0");
        } catch (java.io.EOFException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream10);
        org.junit.Assert.assertNotNull(inputStream12);
        org.junit.Assert.assertNotNull(bufferedInputStream16);
    }

    @Test
    public void test0597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0597");
        java.io.Reader reader0 = null;
        java.nio.charset.Charset charset2 = null;
        java.io.InputStream inputStream3 = org.apache.commons.io.IOUtils.toInputStream("hi!", charset2);
        java.nio.charset.Charset charset4 = null;
        char[] charArray5 = org.apache.commons.io.IOUtils.toCharArray(inputStream3, charset4);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.readFully(reader0, charArray5, (int) (byte) 10, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Length must not be negative: -1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream3);
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "hi!");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "hi!");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[h, i, !]");
    }

    @Test
    public void test0598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0598");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        java.nio.charset.Charset charset10 = null;
        java.util.List<java.lang.String> strList11 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset10);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        char[] charArray13 = org.apache.commons.io.IOUtils.toCharArray(inputStream1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.LineIterator lineIterator15 = org.apache.commons.io.IOUtils.lineIterator(inputStream1, "\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ?");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[]");
    }

    @Test
    public void test0599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0599");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream5 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray("");
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray10);
        long long12 = org.apache.commons.io.IOUtils.copyLarge(inputStream4, outputStream5, 0L, 0L, byteArray10);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, byteArray10);
        long long15 = org.apache.commons.io.IOUtils.skip(inputStream1, (long) 'a');
        java.io.OutputStream outputStream16 = null;
        java.io.InputStream inputStream20 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream21 = null;
        java.io.InputStream inputStream23 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream24 = null;
        java.io.InputStream inputStream27 = null;
        byte[] byteArray29 = org.apache.commons.io.IOUtils.toByteArray("");
        int int30 = org.apache.commons.io.IOUtils.read(inputStream27, byteArray29);
        long long31 = org.apache.commons.io.IOUtils.copyLarge(inputStream23, outputStream24, 0L, 0L, byteArray29);
        long long32 = org.apache.commons.io.IOUtils.copyLarge(inputStream20, outputStream21, byteArray29);
        java.io.BufferedInputStream bufferedInputStream34 = org.apache.commons.io.IOUtils.buffer(inputStream20, (int) (byte) 10);
        java.io.InputStream inputStream36 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray37 = org.apache.commons.io.IOUtils.toByteArray(inputStream36);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream36);
        java.io.InputStream inputStream40 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream41 = null;
        java.io.InputStream inputStream44 = null;
        byte[] byteArray46 = org.apache.commons.io.IOUtils.toByteArray("");
        int int47 = org.apache.commons.io.IOUtils.read(inputStream44, byteArray46);
        long long48 = org.apache.commons.io.IOUtils.copyLarge(inputStream40, outputStream41, 0L, 0L, byteArray46);
        java.nio.charset.Charset charset49 = null;
        java.util.List<java.lang.String> strList50 = org.apache.commons.io.IOUtils.readLines(inputStream40, charset49);
        java.io.InputStream inputStream52 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream53 = null;
        java.io.InputStream inputStream56 = null;
        byte[] byteArray58 = org.apache.commons.io.IOUtils.toByteArray("");
        int int59 = org.apache.commons.io.IOUtils.read(inputStream56, byteArray58);
        long long60 = org.apache.commons.io.IOUtils.copyLarge(inputStream52, outputStream53, 0L, 0L, byteArray58);
        java.nio.charset.Charset charset61 = null;
        java.util.List<java.lang.String> strList62 = org.apache.commons.io.IOUtils.readLines(inputStream52, charset61);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream52);
        boolean boolean64 = org.apache.commons.io.IOUtils.contentEquals(inputStream40, inputStream52);
        java.io.OutputStream outputStream65 = null;
        java.io.InputStream inputStream67 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream68 = null;
        java.io.InputStream inputStream71 = null;
        byte[] byteArray73 = org.apache.commons.io.IOUtils.toByteArray("");
        int int74 = org.apache.commons.io.IOUtils.read(inputStream71, byteArray73);
        long long75 = org.apache.commons.io.IOUtils.copyLarge(inputStream67, outputStream68, 0L, 0L, byteArray73);
        long long76 = org.apache.commons.io.IOUtils.copyLarge(inputStream52, outputStream65, byteArray73);
        org.apache.commons.io.IOUtils.readFully(inputStream36, byteArray73);
        org.apache.commons.io.IOUtils.readFully((java.io.InputStream) bufferedInputStream34, byteArray73);
        java.lang.String str79 = org.apache.commons.io.IOUtils.toString(byteArray73);
        int int80 = org.apache.commons.io.IOUtils.length(byteArray73);
        // The following exception was thrown during execution in test generation
        try {
            long long81 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream16, (long) ' ', (long) (byte) 100, byteArray73);
            org.junit.Assert.fail("Expected exception of type java.io.EOFException; message: Bytes to skip: 32 actual: 0");
        } catch (java.io.EOFException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(inputStream20);
        org.junit.Assert.assertNotNull(inputStream23);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream34);
        org.junit.Assert.assertNotNull(inputStream36);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertNotNull(inputStream40);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertNotNull(strList50);
        org.junit.Assert.assertNotNull(inputStream52);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 0L + "'", long60 == 0L);
        org.junit.Assert.assertNotNull(strList62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(inputStream67);
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 0L + "'", long75 == 0L);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 0L + "'", long76 == 0L);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
    }

    @Test
    public void test0600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0600");
        java.io.Reader reader0 = null;
        java.io.Writer writer1 = null;
        java.io.Reader reader2 = null;
        char[] charArray3 = new char[] {};
        int int4 = org.apache.commons.io.IOUtils.length(charArray3);
        java.io.Writer writer5 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray3, writer5);
        java.io.Writer writer7 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray3, writer7);
        int int9 = org.apache.commons.io.IOUtils.read(reader2, charArray3);
        // The following exception was thrown during execution in test generation
        try {
            long long10 = org.apache.commons.io.IOUtils.copyLarge(reader0, writer1, charArray3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[])\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray3), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray3), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray3), "[]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test0601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0601");
        char[] charArray0 = new char[] {};
        int int1 = org.apache.commons.io.IOUtils.length(charArray0);
        java.io.Writer writer2 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray0, writer2);
        int int4 = org.apache.commons.io.IOUtils.length(charArray0);
        java.io.Writer writer5 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray0, writer5);
        int int7 = org.apache.commons.io.IOUtils.length(charArray0);
        java.lang.Class<?> wildcardClass8 = charArray0.getClass();
        org.junit.Assert.assertNotNull(charArray0);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray0), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray0), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0602");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.util.List<java.lang.String> strList4 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.OutputStream outputStream6 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList4, "\n", outputStream6);
        java.io.Writer writer9 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList4, "hi!", writer9);
        java.io.OutputStream outputStream12 = null;
        java.nio.charset.Charset charset13 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList4, "\n", outputStream12, charset13);
        java.io.OutputStream outputStream16 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList4, "hi!", outputStream16, "\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ?");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(strList4);
    }

    @Test
    public void test0603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0603");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.util.List<java.lang.String> strList4 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.BufferedInputStream bufferedInputStream5 = org.apache.commons.io.IOUtils.buffer(inputStream1);
        java.io.OutputStream outputStream6 = null;
        long long7 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream6);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray9 = org.apache.commons.io.IOUtils.toByteArray(inputStream1, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Unexpected read size. current: 0, expected: 35");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertNotNull(bufferedInputStream5);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
    }

    @Test
    public void test0604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0604");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.util.List<java.lang.String> strList4 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.OutputStream outputStream5 = null;
        long long6 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream5);
        java.io.OutputStream outputStream7 = null;
        java.io.InputStream inputStream11 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray12 = new byte[] {};
        int int13 = org.apache.commons.io.IOUtils.length(byteArray12);
        int int14 = org.apache.commons.io.IOUtils.read(inputStream11, byteArray12);
        long long15 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream7, (-1L), 1L, byteArray12);
        java.io.OutputStream outputStream16 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray12, outputStream16);
        int int18 = org.apache.commons.io.IOUtils.length(byteArray12);
        java.io.Writer writer19 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(byteArray12, writer19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Writer.write(String)\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(inputStream11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test0605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0605");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        java.nio.charset.Charset charset10 = null;
        java.util.List<java.lang.String> strList11 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset10);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.nio.charset.Charset charset13 = null;
        java.lang.String str14 = org.apache.commons.io.IOUtils.toString(inputStream1, charset13);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer15 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer15);
        java.io.InputStream inputStream17 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1);
        java.io.InputStream inputStream19 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream20 = null;
        java.io.InputStream inputStream22 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream23 = null;
        java.io.InputStream inputStream26 = null;
        byte[] byteArray28 = org.apache.commons.io.IOUtils.toByteArray("");
        int int29 = org.apache.commons.io.IOUtils.read(inputStream26, byteArray28);
        long long30 = org.apache.commons.io.IOUtils.copyLarge(inputStream22, outputStream23, 0L, 0L, byteArray28);
        long long31 = org.apache.commons.io.IOUtils.copyLarge(inputStream19, outputStream20, byteArray28);
        java.io.BufferedInputStream bufferedInputStream33 = org.apache.commons.io.IOUtils.buffer(inputStream19, (int) (byte) 10);
        java.io.InputStream inputStream35 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray36 = org.apache.commons.io.IOUtils.toByteArray(inputStream35);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream35);
        java.io.InputStream inputStream39 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream40 = null;
        java.io.InputStream inputStream43 = null;
        byte[] byteArray45 = org.apache.commons.io.IOUtils.toByteArray("");
        int int46 = org.apache.commons.io.IOUtils.read(inputStream43, byteArray45);
        long long47 = org.apache.commons.io.IOUtils.copyLarge(inputStream39, outputStream40, 0L, 0L, byteArray45);
        java.nio.charset.Charset charset48 = null;
        java.util.List<java.lang.String> strList49 = org.apache.commons.io.IOUtils.readLines(inputStream39, charset48);
        java.io.InputStream inputStream51 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream52 = null;
        java.io.InputStream inputStream55 = null;
        byte[] byteArray57 = org.apache.commons.io.IOUtils.toByteArray("");
        int int58 = org.apache.commons.io.IOUtils.read(inputStream55, byteArray57);
        long long59 = org.apache.commons.io.IOUtils.copyLarge(inputStream51, outputStream52, 0L, 0L, byteArray57);
        java.nio.charset.Charset charset60 = null;
        java.util.List<java.lang.String> strList61 = org.apache.commons.io.IOUtils.readLines(inputStream51, charset60);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream51);
        boolean boolean63 = org.apache.commons.io.IOUtils.contentEquals(inputStream39, inputStream51);
        java.io.OutputStream outputStream64 = null;
        java.io.InputStream inputStream66 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream67 = null;
        java.io.InputStream inputStream70 = null;
        byte[] byteArray72 = org.apache.commons.io.IOUtils.toByteArray("");
        int int73 = org.apache.commons.io.IOUtils.read(inputStream70, byteArray72);
        long long74 = org.apache.commons.io.IOUtils.copyLarge(inputStream66, outputStream67, 0L, 0L, byteArray72);
        long long75 = org.apache.commons.io.IOUtils.copyLarge(inputStream51, outputStream64, byteArray72);
        org.apache.commons.io.IOUtils.readFully(inputStream35, byteArray72);
        org.apache.commons.io.IOUtils.readFully((java.io.InputStream) bufferedInputStream33, byteArray72);
        java.lang.String str78 = org.apache.commons.io.IOUtils.toString(byteArray72);
        int int81 = org.apache.commons.io.IOUtils.read(inputStream17, byteArray72, 4, 0);
        // The following exception was thrown during execution in test generation
        try {
            java.io.BufferedInputStream bufferedInputStream83 = org.apache.commons.io.IOUtils.buffer(inputStream17, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Buffer size <= 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(inputStream17);
        org.junit.Assert.assertNotNull(inputStream19);
        org.junit.Assert.assertNotNull(inputStream22);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream33);
        org.junit.Assert.assertNotNull(inputStream35);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertNotNull(inputStream39);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertNotNull(strList49);
        org.junit.Assert.assertNotNull(inputStream51);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertNotNull(strList61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(inputStream66);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 0L + "'", long74 == 0L);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 0L + "'", long75 == 0L);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
    }

    @Test
    public void test0606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0606");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.lang.String str3 = org.apache.commons.io.IOUtils.toString(byteArray2);
        java.io.Writer writer4 = null;
        java.nio.charset.Charset charset5 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(byteArray2, writer4, charset5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Writer.write(String)\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
    }

    @Test
    public void test0607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0607");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.List<java.lang.String> strList3 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.OutputStream outputStream5 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList3, "", outputStream5, "\r\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ??");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(strList3);
    }

    @Test
    public void test0608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0608");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream5 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray("");
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray10);
        long long12 = org.apache.commons.io.IOUtils.copyLarge(inputStream4, outputStream5, 0L, 0L, byteArray10);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, byteArray10);
        java.io.BufferedInputStream bufferedInputStream15 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        org.apache.commons.io.IOUtils.closeQuietly(inputStream1);
        java.nio.charset.Charset charset17 = null;
        java.util.List<java.lang.String> strList18 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset17);
        java.io.Writer writer20 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList18, "", writer20);
        java.io.OutputStream outputStream23 = null;
        java.nio.charset.Charset charset24 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList18, "hi!", outputStream23, charset24);
        java.io.OutputStream outputStream27 = null;
        java.nio.charset.Charset charset28 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList18, "\r\n", outputStream27, charset28);
        java.io.OutputStream outputStream31 = null;
        java.nio.charset.Charset charset32 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList18, "hi!", outputStream31, charset32);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream15);
        org.junit.Assert.assertNotNull(strList18);
    }

    @Test
    public void test0609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0609");
        java.io.Reader reader0 = null;
        char[] charArray1 = new char[] {};
        int int2 = org.apache.commons.io.IOUtils.length(charArray1);
        java.io.Writer writer3 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray1, writer3);
        int int5 = org.apache.commons.io.IOUtils.read(reader0, charArray1);
        java.io.OutputStream outputStream6 = null;
        java.nio.charset.Charset charset7 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(charArray1, outputStream6, charset7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.OutputStream.write(byte[])\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray1);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray1), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray1), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray1), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test0610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0610");
        java.io.Reader reader0 = null;
        java.io.Writer writer1 = null;
        char[] charArray4 = new char[] {};
        // The following exception was thrown during execution in test generation
        try {
            long long5 = org.apache.commons.io.IOUtils.copyLarge(reader0, writer1, (long) 6, 1L, charArray4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[], int, int)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[]");
    }

    @Test
    public void test0611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0611");
        java.lang.ClassLoader classLoader1 = null;
        java.net.URL uRL2 = org.apache.commons.io.IOUtils.resourceToURL("", classLoader1);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str4 = org.apache.commons.io.IOUtils.toString(uRL2, "\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ?");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(uRL2);
        org.junit.Assert.assertEquals(uRL2.toString(), "file:/F:/Mathieu/git/commons-io/bin/org/apache/commons/io/");
    }

    @Test
    public void test0612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0612");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.util.List<java.lang.String> strList4 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.OutputStream outputStream5 = null;
        long long6 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream5);
        java.io.OutputStream outputStream7 = null;
        java.io.InputStream inputStream11 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray12 = new byte[] {};
        int int13 = org.apache.commons.io.IOUtils.length(byteArray12);
        int int14 = org.apache.commons.io.IOUtils.read(inputStream11, byteArray12);
        long long15 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream7, (-1L), 1L, byteArray12);
        java.io.Writer writer16 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(byteArray12, writer16, "");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(inputStream11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
    }

    @Test
    public void test0613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0613");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        java.io.OutputStream outputStream10 = null;
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream10, (long) (short) 0, (-1L));
        java.lang.String str14 = org.apache.commons.io.IOUtils.toString(inputStream1);
        java.io.BufferedInputStream bufferedInputStream16 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 100);
        java.io.OutputStream outputStream17 = null;
        byte[] byteArray18 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long19 = org.apache.commons.io.IOUtils.copyLarge((java.io.InputStream) bufferedInputStream16, outputStream17, byteArray18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"b\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(bufferedInputStream16);
    }

    @Test
    public void test0614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0614");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.BufferedInputStream bufferedInputStream10 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        byte[] byteArray11 = null;
        org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray11, (int) '4', 0);
        java.io.OutputStream outputStream15 = null;
        long long17 = org.apache.commons.io.IOUtils.copy(inputStream1, outputStream15, 0);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray19 = org.apache.commons.io.IOUtils.toByteArray(inputStream1, (long) 10);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Unexpected read size. current: 0, expected: 10");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream10);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
    }

    @Test
    public void test0615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0615");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.BufferedInputStream bufferedInputStream10 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.io.InputStream inputStream12 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, (int) (byte) 1);
        java.nio.charset.Charset charset13 = null;
        char[] charArray14 = org.apache.commons.io.IOUtils.toCharArray(inputStream1, charset13);
        java.io.OutputStream outputStream15 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(charArray14, outputStream15, "\r\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ??");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream10);
        org.junit.Assert.assertNotNull(inputStream12);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[]");
    }

    @Test
    public void test0616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0616");
        java.io.OutputStream outputStream1 = null;
        java.nio.charset.Charset charset2 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write("\r\n", outputStream1, charset2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.OutputStream.write(byte[])\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0617");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream3 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1);
        java.io.Writer writer4 = null;
        java.nio.charset.Charset charset5 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer4, charset5);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str8 = org.apache.commons.io.IOUtils.toString(inputStream1, "hi!");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: hi!");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream3);
    }

    @Test
    public void test0618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0618");
        java.lang.ClassLoader classLoader1 = null;
        java.net.URL uRL2 = org.apache.commons.io.IOUtils.resourceToURL("", classLoader1);
        java.lang.Class<?> wildcardClass3 = uRL2.getClass();
        org.junit.Assert.assertNotNull(uRL2);
        org.junit.Assert.assertEquals(uRL2.toString(), "file:/F:/Mathieu/git/commons-io/bin/org/apache/commons/io/");
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0619");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.util.List<java.lang.String> strList4 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.OutputStream outputStream5 = null;
        long long6 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream5);
        java.io.Writer writer7 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer7);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream11 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray12 = new byte[] {};
        int int13 = org.apache.commons.io.IOUtils.length(byteArray12);
        int int14 = org.apache.commons.io.IOUtils.read(inputStream11, byteArray12);
        byte[] byteArray15 = org.apache.commons.io.IOUtils.toByteArray(inputStream11);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer16 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream11, iOExceptionConsumer16);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream11);
        java.io.BufferedInputStream bufferedInputStream20 = org.apache.commons.io.IOUtils.buffer(inputStream11, (int) (byte) 10);
        java.io.InputStream inputStream22 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream11, (int) (byte) 1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer23 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream11, iOExceptionConsumer23);
        java.io.OutputStream outputStream25 = null;
        java.io.InputStream inputStream27 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray28 = new byte[] {};
        int int29 = org.apache.commons.io.IOUtils.length(byteArray28);
        int int30 = org.apache.commons.io.IOUtils.read(inputStream27, byteArray28);
        byte[] byteArray31 = org.apache.commons.io.IOUtils.toByteArray(inputStream27);
        java.io.InputStream inputStream33 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray34 = new byte[] {};
        int int35 = org.apache.commons.io.IOUtils.length(byteArray34);
        int int36 = org.apache.commons.io.IOUtils.read(inputStream33, byteArray34);
        byte[] byteArray37 = org.apache.commons.io.IOUtils.toByteArray(inputStream33);
        int int38 = org.apache.commons.io.IOUtils.length(byteArray37);
        org.apache.commons.io.IOUtils.readFully(inputStream27, byteArray37);
        long long40 = org.apache.commons.io.IOUtils.copyLarge(inputStream11, outputStream25, byteArray37);
        boolean boolean41 = org.apache.commons.io.IOUtils.contentEquals(inputStream1, inputStream11);
        java.io.BufferedInputStream bufferedInputStream43 = org.apache.commons.io.IOUtils.buffer(inputStream1, 5);
        java.io.Writer writer44 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.copy((java.io.InputStream) bufferedInputStream43, writer44, "\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ?");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(inputStream11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream20);
        org.junit.Assert.assertNotNull(inputStream22);
        org.junit.Assert.assertNotNull(inputStream27);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(inputStream33);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(bufferedInputStream43);
    }

    @Test
    public void test0620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0620");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream5 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray("");
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray10);
        long long12 = org.apache.commons.io.IOUtils.copyLarge(inputStream4, outputStream5, 0L, 0L, byteArray10);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, byteArray10);
        java.io.BufferedInputStream bufferedInputStream15 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.io.InputStream inputStream17 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray18 = org.apache.commons.io.IOUtils.toByteArray(inputStream17);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream17);
        java.io.InputStream inputStream21 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream22 = null;
        java.io.InputStream inputStream25 = null;
        byte[] byteArray27 = org.apache.commons.io.IOUtils.toByteArray("");
        int int28 = org.apache.commons.io.IOUtils.read(inputStream25, byteArray27);
        long long29 = org.apache.commons.io.IOUtils.copyLarge(inputStream21, outputStream22, 0L, 0L, byteArray27);
        java.nio.charset.Charset charset30 = null;
        java.util.List<java.lang.String> strList31 = org.apache.commons.io.IOUtils.readLines(inputStream21, charset30);
        java.io.InputStream inputStream33 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream34 = null;
        java.io.InputStream inputStream37 = null;
        byte[] byteArray39 = org.apache.commons.io.IOUtils.toByteArray("");
        int int40 = org.apache.commons.io.IOUtils.read(inputStream37, byteArray39);
        long long41 = org.apache.commons.io.IOUtils.copyLarge(inputStream33, outputStream34, 0L, 0L, byteArray39);
        java.nio.charset.Charset charset42 = null;
        java.util.List<java.lang.String> strList43 = org.apache.commons.io.IOUtils.readLines(inputStream33, charset42);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream33);
        boolean boolean45 = org.apache.commons.io.IOUtils.contentEquals(inputStream21, inputStream33);
        java.io.OutputStream outputStream46 = null;
        java.io.InputStream inputStream48 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream49 = null;
        java.io.InputStream inputStream52 = null;
        byte[] byteArray54 = org.apache.commons.io.IOUtils.toByteArray("");
        int int55 = org.apache.commons.io.IOUtils.read(inputStream52, byteArray54);
        long long56 = org.apache.commons.io.IOUtils.copyLarge(inputStream48, outputStream49, 0L, 0L, byteArray54);
        long long57 = org.apache.commons.io.IOUtils.copyLarge(inputStream33, outputStream46, byteArray54);
        org.apache.commons.io.IOUtils.readFully(inputStream17, byteArray54);
        org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray54);
        java.io.Writer writer60 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(byteArray54, writer60, "hi!");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: hi!");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream15);
        org.junit.Assert.assertNotNull(inputStream17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(inputStream21);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNotNull(strList31);
        org.junit.Assert.assertNotNull(inputStream33);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertNotNull(strList43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(inputStream48);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
    }

    @Test
    public void test0621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0621");
        // The following exception was thrown during execution in test generation
        try {
            java.io.InputStream inputStream2 = org.apache.commons.io.IOUtils.toInputStream("\r\n", "");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0622");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream3 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1, (int) '/');
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Unexpected read size. current: 0, expected: 47");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream3);
    }

    @Test
    public void test0623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0623");
        char[] charArray5 = new char[] { '4', '/', ' ', '/', '/' };
        java.io.OutputStream outputStream6 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(charArray5, outputStream6, "hi!");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: hi!");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "4/ //");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "4/ //");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[4, /,  , /, /]");
    }

    @Test
    public void test0624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0624");
        java.io.Reader reader0 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long2 = org.apache.commons.io.IOUtils.skip(reader0, (long) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[], int, int)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0625");
        byte[] byteArray1 = org.apache.commons.io.IOUtils.toByteArray("");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str3 = org.apache.commons.io.IOUtils.toString(byteArray1, "");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
    }

    @Test
    public void test0626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0626");
        java.io.InputStream inputStream0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str2 = org.apache.commons.io.IOUtils.toString(inputStream0, "\r\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ??");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0627");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "hi!");
        java.io.Writer writer2 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.copy(inputStream1, writer2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Writer.write(char[], int, int)\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
    }

    @Test
    public void test0628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0628");
        java.io.Reader reader0 = null;
        java.io.Writer writer1 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long4 = org.apache.commons.io.IOUtils.copyLarge(reader0, writer1, (long) (short) 100, 0L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[], int, int)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0629");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        java.io.InputStream inputStream11 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray12 = org.apache.commons.io.IOUtils.toByteArray(inputStream11);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream11);
        java.io.InputStream inputStream15 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream16 = null;
        java.io.InputStream inputStream19 = null;
        byte[] byteArray21 = org.apache.commons.io.IOUtils.toByteArray("");
        int int22 = org.apache.commons.io.IOUtils.read(inputStream19, byteArray21);
        long long23 = org.apache.commons.io.IOUtils.copyLarge(inputStream15, outputStream16, 0L, 0L, byteArray21);
        java.nio.charset.Charset charset24 = null;
        java.util.List<java.lang.String> strList25 = org.apache.commons.io.IOUtils.readLines(inputStream15, charset24);
        java.io.InputStream inputStream27 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream28 = null;
        java.io.InputStream inputStream31 = null;
        byte[] byteArray33 = org.apache.commons.io.IOUtils.toByteArray("");
        int int34 = org.apache.commons.io.IOUtils.read(inputStream31, byteArray33);
        long long35 = org.apache.commons.io.IOUtils.copyLarge(inputStream27, outputStream28, 0L, 0L, byteArray33);
        java.nio.charset.Charset charset36 = null;
        java.util.List<java.lang.String> strList37 = org.apache.commons.io.IOUtils.readLines(inputStream27, charset36);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream27);
        boolean boolean39 = org.apache.commons.io.IOUtils.contentEquals(inputStream15, inputStream27);
        java.io.OutputStream outputStream40 = null;
        java.io.InputStream inputStream42 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream43 = null;
        java.io.InputStream inputStream46 = null;
        byte[] byteArray48 = org.apache.commons.io.IOUtils.toByteArray("");
        int int49 = org.apache.commons.io.IOUtils.read(inputStream46, byteArray48);
        long long50 = org.apache.commons.io.IOUtils.copyLarge(inputStream42, outputStream43, 0L, 0L, byteArray48);
        long long51 = org.apache.commons.io.IOUtils.copyLarge(inputStream27, outputStream40, byteArray48);
        org.apache.commons.io.IOUtils.readFully(inputStream11, byteArray48);
        java.io.OutputStream outputStream53 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray48, outputStream53);
        int int55 = org.apache.commons.io.IOUtils.length(byteArray48);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray48, (int) (byte) 10, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Range [10, 10 + 10) out of bounds for length 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(inputStream11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertNotNull(inputStream15);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(strList25);
        org.junit.Assert.assertNotNull(inputStream27);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertNotNull(strList37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(inputStream42);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
    }

    @Test
    public void test0630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0630");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        java.io.OutputStream outputStream10 = null;
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream10, (long) (short) 0, (-1L));
        java.lang.String str14 = org.apache.commons.io.IOUtils.toString(inputStream1);
        java.io.BufferedInputStream bufferedInputStream15 = org.apache.commons.io.IOUtils.buffer(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.InputStream) bufferedInputStream15);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(bufferedInputStream15);
    }

    @Test
    public void test0631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0631");
        java.nio.channels.ReadableByteChannel readableByteChannel0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.skipFully(readableByteChannel0, (long) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.nio.channels.ReadableByteChannel.read(java.nio.ByteBuffer)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0632");
        java.io.InputStream inputStream0 = null;
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream0, (long) 2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.InputStream.read(byte[], int, int)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0633");
        java.io.Reader reader0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.skipFully(reader0, 10L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[], int, int)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0634");
        char[] charArray0 = new char[] {};
        int int1 = org.apache.commons.io.IOUtils.length(charArray0);
        java.io.Writer writer2 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray0, writer2);
        int int4 = org.apache.commons.io.IOUtils.length(charArray0);
        java.io.Writer writer5 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray0, writer5);
        int int7 = org.apache.commons.io.IOUtils.length(charArray0);
        java.io.OutputStream outputStream8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(charArray0, outputStream8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.OutputStream.write(byte[])\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray0);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray0), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray0), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test0635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0635");
        char[] charArray0 = new char[] {};
        java.io.Writer writer1 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray0, writer1);
        java.io.OutputStream outputStream3 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(charArray0, outputStream3, "\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ?");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray0);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray0), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray0), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray0), "[]");
    }

    @Test
    public void test0636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0636");
        java.io.OutputStream outputStream0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.BufferedOutputStream bufferedOutputStream2 = org.apache.commons.io.IOUtils.buffer(outputStream0, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: outputStream");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0637");
        java.io.InputStream inputStream0 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long2 = org.apache.commons.io.IOUtils.skip(inputStream0, (-1L));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Skip count must be non-negative, actual: -1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0638");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray(inputStream1, (int) (short) 0);
        long long9 = org.apache.commons.io.IOUtils.skip(inputStream1, 100L);
        java.io.InputStream inputStream10 = null;
        java.io.InputStream inputStream11 = null;
        java.io.OutputStream outputStream12 = null;
        byte[] byteArray15 = new byte[] {};
        int int16 = org.apache.commons.io.IOUtils.length(byteArray15);
        java.io.OutputStream outputStream17 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray15, outputStream17);
        long long19 = org.apache.commons.io.IOUtils.copyLarge(inputStream11, outputStream12, 0L, (long) (byte) -1, byteArray15);
        java.io.OutputStream outputStream20 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray15, outputStream20);
        org.apache.commons.io.IOUtils.readFully(inputStream10, byteArray15);
        int int23 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray15);
        java.io.OutputStream outputStream24 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray15, outputStream24);
        java.lang.String str26 = org.apache.commons.io.IOUtils.toString(byteArray15);
        java.io.Writer writer27 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(byteArray15, writer27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Writer.write(String)\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
    }

    @Test
    public void test0639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0639");
        java.io.Reader reader0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.BufferedReader bufferedReader2 = org.apache.commons.io.IOUtils.toBufferedReader(reader0, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0640");
        java.io.Reader reader0 = null;
        java.io.Writer writer1 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long4 = org.apache.commons.io.IOUtils.copyLarge(reader0, writer1, (long) (short) 1, (long) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[], int, int)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0641");
        java.io.Reader reader0 = null;
        java.io.Writer writer1 = null;
        java.io.Reader reader4 = null;
        char[] charArray5 = new char[] {};
        int int6 = org.apache.commons.io.IOUtils.length(charArray5);
        java.io.Writer writer7 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray5, writer7);
        int int9 = org.apache.commons.io.IOUtils.read(reader4, charArray5);
        java.io.Writer writer10 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray5, writer10);
        int int12 = org.apache.commons.io.IOUtils.length(charArray5);
        // The following exception was thrown during execution in test generation
        try {
            long long13 = org.apache.commons.io.IOUtils.copyLarge(reader0, writer1, (long) (short) 100, (-1L), charArray5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[], int, int)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test0642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0642");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray(inputStream1, (int) (short) 0);
        java.io.BufferedInputStream bufferedInputStream8 = org.apache.commons.io.IOUtils.buffer(inputStream1);
        java.io.InputStream inputStream9 = org.apache.commons.io.IOUtils.toBufferedInputStream((java.io.InputStream) bufferedInputStream8);
        java.io.OutputStream outputStream10 = null;
        java.io.InputStream inputStream12 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream13 = null;
        java.io.InputStream inputStream15 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream16 = null;
        java.io.InputStream inputStream19 = null;
        byte[] byteArray21 = org.apache.commons.io.IOUtils.toByteArray("");
        int int22 = org.apache.commons.io.IOUtils.read(inputStream19, byteArray21);
        long long23 = org.apache.commons.io.IOUtils.copyLarge(inputStream15, outputStream16, 0L, 0L, byteArray21);
        long long24 = org.apache.commons.io.IOUtils.copyLarge(inputStream12, outputStream13, byteArray21);
        java.io.BufferedInputStream bufferedInputStream26 = org.apache.commons.io.IOUtils.buffer(inputStream12, (int) (byte) 10);
        java.io.InputStream inputStream28 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray29 = org.apache.commons.io.IOUtils.toByteArray(inputStream28);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream28);
        java.io.InputStream inputStream32 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream33 = null;
        java.io.InputStream inputStream36 = null;
        byte[] byteArray38 = org.apache.commons.io.IOUtils.toByteArray("");
        int int39 = org.apache.commons.io.IOUtils.read(inputStream36, byteArray38);
        long long40 = org.apache.commons.io.IOUtils.copyLarge(inputStream32, outputStream33, 0L, 0L, byteArray38);
        java.nio.charset.Charset charset41 = null;
        java.util.List<java.lang.String> strList42 = org.apache.commons.io.IOUtils.readLines(inputStream32, charset41);
        java.io.InputStream inputStream44 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream45 = null;
        java.io.InputStream inputStream48 = null;
        byte[] byteArray50 = org.apache.commons.io.IOUtils.toByteArray("");
        int int51 = org.apache.commons.io.IOUtils.read(inputStream48, byteArray50);
        long long52 = org.apache.commons.io.IOUtils.copyLarge(inputStream44, outputStream45, 0L, 0L, byteArray50);
        java.nio.charset.Charset charset53 = null;
        java.util.List<java.lang.String> strList54 = org.apache.commons.io.IOUtils.readLines(inputStream44, charset53);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream44);
        boolean boolean56 = org.apache.commons.io.IOUtils.contentEquals(inputStream32, inputStream44);
        java.io.OutputStream outputStream57 = null;
        java.io.InputStream inputStream59 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream60 = null;
        java.io.InputStream inputStream63 = null;
        byte[] byteArray65 = org.apache.commons.io.IOUtils.toByteArray("");
        int int66 = org.apache.commons.io.IOUtils.read(inputStream63, byteArray65);
        long long67 = org.apache.commons.io.IOUtils.copyLarge(inputStream59, outputStream60, 0L, 0L, byteArray65);
        long long68 = org.apache.commons.io.IOUtils.copyLarge(inputStream44, outputStream57, byteArray65);
        org.apache.commons.io.IOUtils.readFully(inputStream28, byteArray65);
        org.apache.commons.io.IOUtils.readFully((java.io.InputStream) bufferedInputStream26, byteArray65);
        java.lang.String str71 = org.apache.commons.io.IOUtils.toString(byteArray65);
        // The following exception was thrown during execution in test generation
        try {
            long long72 = org.apache.commons.io.IOUtils.copyLarge(inputStream9, outputStream10, byteArray65);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.OutputStream.write(byte[], int, int)\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream8);
        org.junit.Assert.assertNotNull(inputStream9);
        org.junit.Assert.assertNotNull(inputStream12);
        org.junit.Assert.assertNotNull(inputStream15);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream26);
        org.junit.Assert.assertNotNull(inputStream28);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(inputStream32);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertNotNull(strList42);
        org.junit.Assert.assertNotNull(inputStream44);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertNotNull(strList54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(inputStream59);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 0L + "'", long67 == 0L);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 0L + "'", long68 == 0L);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
    }

    @Test
    public void test0643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0643");
        java.io.Reader reader0 = null;
        char[] charArray1 = new char[] {};
        int int2 = org.apache.commons.io.IOUtils.length(charArray1);
        java.io.Writer writer3 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray1, writer3);
        int int5 = org.apache.commons.io.IOUtils.length(charArray1);
        java.io.Writer writer6 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray1, writer6);
        int int8 = org.apache.commons.io.IOUtils.length(charArray1);
        int int9 = org.apache.commons.io.IOUtils.read(reader0, charArray1);
        java.io.OutputStream outputStream10 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(charArray1, outputStream10, "\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ?");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray1);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray1), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray1), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray1), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test0644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0644");
        java.io.Reader reader0 = null;
        java.io.Reader reader1 = null;
        java.io.Reader reader2 = null;
        java.io.Writer writer3 = null;
        char[] charArray6 = new char[] {};
        int int7 = org.apache.commons.io.IOUtils.length(charArray6);
        java.io.Writer writer8 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray6, writer8);
        java.io.Writer writer10 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray6, writer10);
        long long12 = org.apache.commons.io.IOUtils.copyLarge(reader2, writer3, 0L, (long) (byte) 100, charArray6);
        int int13 = org.apache.commons.io.IOUtils.read(reader1, charArray6);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.readFully(reader0, charArray6, 2, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Length must not be negative: -1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test0645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0645");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray(inputStream1, (int) (short) 0);
        long long9 = org.apache.commons.io.IOUtils.skip(inputStream1, 100L);
        java.io.InputStream inputStream10 = null;
        java.io.InputStream inputStream11 = null;
        java.io.OutputStream outputStream12 = null;
        byte[] byteArray15 = new byte[] {};
        int int16 = org.apache.commons.io.IOUtils.length(byteArray15);
        java.io.OutputStream outputStream17 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray15, outputStream17);
        long long19 = org.apache.commons.io.IOUtils.copyLarge(inputStream11, outputStream12, 0L, (long) (byte) -1, byteArray15);
        java.io.OutputStream outputStream20 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray15, outputStream20);
        org.apache.commons.io.IOUtils.readFully(inputStream10, byteArray15);
        int int23 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray15);
        java.io.InputStream inputStream24 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1);
        java.io.BufferedInputStream bufferedInputStream26 = org.apache.commons.io.IOUtils.buffer(inputStream24, 1);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray28 = org.apache.commons.io.IOUtils.toByteArray(inputStream24, (long) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Unexpected read size. current: 0, expected: 10");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(inputStream24);
        org.junit.Assert.assertNotNull(bufferedInputStream26);
    }

    @Test
    public void test0646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0646");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.BufferedInputStream bufferedInputStream10 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.io.InputStream inputStream12 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, (int) (byte) 1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer13 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer13);
        java.io.OutputStream outputStream15 = null;
        java.io.InputStream inputStream17 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray18 = new byte[] {};
        int int19 = org.apache.commons.io.IOUtils.length(byteArray18);
        int int20 = org.apache.commons.io.IOUtils.read(inputStream17, byteArray18);
        byte[] byteArray21 = org.apache.commons.io.IOUtils.toByteArray(inputStream17);
        java.io.InputStream inputStream23 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray24 = new byte[] {};
        int int25 = org.apache.commons.io.IOUtils.length(byteArray24);
        int int26 = org.apache.commons.io.IOUtils.read(inputStream23, byteArray24);
        byte[] byteArray27 = org.apache.commons.io.IOUtils.toByteArray(inputStream23);
        int int28 = org.apache.commons.io.IOUtils.length(byteArray27);
        org.apache.commons.io.IOUtils.readFully(inputStream17, byteArray27);
        long long30 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream15, byteArray27);
        java.io.Writer writer31 = null;
        java.nio.charset.Charset charset32 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer31, charset32);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream10);
        org.junit.Assert.assertNotNull(inputStream12);
        org.junit.Assert.assertNotNull(inputStream17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertNotNull(inputStream23);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
    }

    @Test
    public void test0647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0647");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        java.io.BufferedInputStream bufferedInputStream10 = org.apache.commons.io.IOUtils.buffer(inputStream1);
        long long12 = org.apache.commons.io.IOUtils.skip((java.io.InputStream) bufferedInputStream10, (long) (byte) 0);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) bufferedInputStream10);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.String> strList15 = org.apache.commons.io.IOUtils.readLines((java.io.InputStream) bufferedInputStream10, "");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
    }

    @Test
    public void test0648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0648");
        java.io.Reader reader0 = null;
        char[] charArray1 = new char[] {};
        int int2 = org.apache.commons.io.IOUtils.length(charArray1);
        int int3 = org.apache.commons.io.IOUtils.length(charArray1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.readFully(reader0, charArray1, (int) (byte) 1, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[], int, int)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray1);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray1), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray1), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray1), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test0649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0649");
        java.util.Collection<java.lang.String> strCollection0 = null;
        java.io.OutputStream outputStream2 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.writeLines(strCollection0, "hi!", outputStream2, "hi!");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: hi!");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0650");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream5 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray("");
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray10);
        long long12 = org.apache.commons.io.IOUtils.copyLarge(inputStream4, outputStream5, 0L, 0L, byteArray10);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, byteArray10);
        java.io.BufferedInputStream bufferedInputStream15 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.nio.charset.Charset charset16 = null;
        java.util.List<java.lang.String> strList17 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset16);
        java.io.OutputStream outputStream18 = null;
        long long21 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream18, 0L, (long) 0);
        java.nio.charset.Charset charset22 = null;
        char[] charArray23 = org.apache.commons.io.IOUtils.toCharArray(inputStream1, charset22);
        java.io.OutputStream outputStream24 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(charArray23, outputStream24, "hi!");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: hi!");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream15);
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[]");
    }

    @Test
    public void test0651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0651");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.BufferedInputStream bufferedInputStream10 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        byte[] byteArray11 = null;
        org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray11, (int) '4', 0);
        java.io.OutputStream outputStream15 = null;
        long long17 = org.apache.commons.io.IOUtils.copy(inputStream1, outputStream15, 0);
        char[] charArray18 = org.apache.commons.io.IOUtils.toCharArray(inputStream1);
        java.io.OutputStream outputStream19 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(charArray18, outputStream19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.OutputStream.write(byte[])\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream10);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(charArray18);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray18), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray18), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray18), "[]");
    }

    @Test
    public void test0652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0652");
        java.io.Writer writer0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.BufferedWriter bufferedWriter2 = org.apache.commons.io.IOUtils.buffer(writer0, 2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0653");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream("\n");
        byte[] byteArray3 = org.apache.commons.io.IOUtils.toByteArray(inputStream1, (int) (byte) 0);
        java.io.InputStream inputStream5 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray6 = new byte[] {};
        int int7 = org.apache.commons.io.IOUtils.length(byteArray6);
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray6);
        byte[] byteArray9 = org.apache.commons.io.IOUtils.toByteArray(inputStream5);
        byte[] byteArray11 = org.apache.commons.io.IOUtils.toByteArray(inputStream5, (int) (short) 0);
        byte[] byteArray12 = new byte[] {};
        int int13 = org.apache.commons.io.IOUtils.length(byteArray12);
        org.apache.commons.io.IOUtils.readFully(inputStream5, byteArray12);
        org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray12);
        java.lang.String str16 = org.apache.commons.io.IOUtils.toString(byteArray12);
        java.lang.String str17 = org.apache.commons.io.IOUtils.toString(byteArray12);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str19 = org.apache.commons.io.IOUtils.toString(byteArray12, "");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertNotNull(inputStream5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
    }

    @Test
    public void test0654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0654");
        java.io.Reader reader0 = null;
        java.io.Reader reader1 = null;
        char[] charArray5 = new char[] { '#', '#', '#' };
        org.apache.commons.io.IOUtils.readFully(reader1, charArray5, (int) ' ', (int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.readFully(reader0, charArray5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[], int, int)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "###");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "###");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[#, #, #]");
    }

    @Test
    public void test0655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0655");
        java.io.Reader reader0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.BufferedReader bufferedReader2 = org.apache.commons.io.IOUtils.toBufferedReader(reader0, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0656");
        java.io.Reader reader0 = null;
        java.io.Writer writer1 = null;
        java.io.Reader reader2 = null;
        java.io.Reader reader3 = null;
        java.io.Writer writer4 = null;
        char[] charArray7 = new char[] {};
        int int8 = org.apache.commons.io.IOUtils.length(charArray7);
        java.io.Writer writer9 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray7, writer9);
        java.io.Writer writer11 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray7, writer11);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(reader3, writer4, 0L, (long) (byte) 100, charArray7);
        int int14 = org.apache.commons.io.IOUtils.read(reader2, charArray7);
        int int15 = org.apache.commons.io.IOUtils.length(charArray7);
        // The following exception was thrown during execution in test generation
        try {
            long long16 = org.apache.commons.io.IOUtils.copyLarge(reader0, writer1, charArray7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[])\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test0657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0657");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream5 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream6 = null;
        java.io.InputStream inputStream9 = null;
        byte[] byteArray11 = org.apache.commons.io.IOUtils.toByteArray("");
        int int12 = org.apache.commons.io.IOUtils.read(inputStream9, byteArray11);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream5, outputStream6, 0L, 0L, byteArray11);
        java.nio.charset.Charset charset14 = null;
        java.util.List<java.lang.String> strList15 = org.apache.commons.io.IOUtils.readLines(inputStream5, charset14);
        java.io.InputStream inputStream17 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream18 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray23 = org.apache.commons.io.IOUtils.toByteArray("");
        int int24 = org.apache.commons.io.IOUtils.read(inputStream21, byteArray23);
        long long25 = org.apache.commons.io.IOUtils.copyLarge(inputStream17, outputStream18, 0L, 0L, byteArray23);
        java.nio.charset.Charset charset26 = null;
        java.util.List<java.lang.String> strList27 = org.apache.commons.io.IOUtils.readLines(inputStream17, charset26);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream17);
        boolean boolean29 = org.apache.commons.io.IOUtils.contentEquals(inputStream5, inputStream17);
        java.io.OutputStream outputStream30 = null;
        java.io.InputStream inputStream32 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream33 = null;
        java.io.InputStream inputStream36 = null;
        byte[] byteArray38 = org.apache.commons.io.IOUtils.toByteArray("");
        int int39 = org.apache.commons.io.IOUtils.read(inputStream36, byteArray38);
        long long40 = org.apache.commons.io.IOUtils.copyLarge(inputStream32, outputStream33, 0L, 0L, byteArray38);
        long long41 = org.apache.commons.io.IOUtils.copyLarge(inputStream17, outputStream30, byteArray38);
        org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray38);
        java.io.OutputStream outputStream43 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray38, outputStream43);
        int int45 = org.apache.commons.io.IOUtils.length(byteArray38);
        java.io.Writer writer46 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(byteArray38, writer46, "\r\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ??");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(inputStream5);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(strList15);
        org.junit.Assert.assertNotNull(inputStream17);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(strList27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(inputStream32);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
    }

    @Test
    public void test0658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0658");
        java.io.Reader reader0 = null;
        java.io.Reader reader1 = null;
        java.io.Writer writer2 = null;
        char[] charArray5 = new char[] {};
        long long6 = org.apache.commons.io.IOUtils.copyLarge(reader1, writer2, (long) (byte) 0, (long) 1, charArray5);
        // The following exception was thrown during execution in test generation
        try {
            int int9 = org.apache.commons.io.IOUtils.read(reader0, charArray5, (int) (short) -1, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[], int, int)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[]");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
    }

    @Test
    public void test0659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0659");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream3 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1);
        java.io.Writer writer4 = null;
        java.nio.charset.Charset charset5 = null;
        org.apache.commons.io.IOUtils.copy(inputStream3, writer4, charset5);
        org.apache.commons.io.function.IOConsumer<java.io.IOException> iOExceptionIOConsumer7 = null;
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream3, iOExceptionIOConsumer7);
        java.io.Writer writer9 = null;
        java.nio.charset.Charset charset10 = null;
        org.apache.commons.io.IOUtils.copy(inputStream3, writer9, charset10);
        java.io.Writer writer12 = null;
        java.nio.charset.Charset charset13 = null;
        org.apache.commons.io.IOUtils.copy(inputStream3, writer12, charset13);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.LineIterator lineIterator16 = org.apache.commons.io.IOUtils.lineIterator(inputStream3, "hi!");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: hi!");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream3);
    }

    @Test
    public void test0660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0660");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream5 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray("");
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray10);
        long long12 = org.apache.commons.io.IOUtils.copyLarge(inputStream4, outputStream5, 0L, 0L, byteArray10);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, byteArray10);
        java.io.BufferedInputStream bufferedInputStream15 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.nio.charset.Charset charset16 = null;
        java.util.List<java.lang.String> strList17 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset16);
        java.io.OutputStream outputStream18 = null;
        long long21 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream18, 0L, (long) 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.String> strList23 = org.apache.commons.io.IOUtils.readLines(inputStream1, "\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ?");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream15);
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
    }

    @Test
    public void test0661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0661");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.util.List<java.lang.String> strList4 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.OutputStream outputStream5 = null;
        long long6 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream5);
        java.io.Writer writer7 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer7);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream11 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray12 = new byte[] {};
        int int13 = org.apache.commons.io.IOUtils.length(byteArray12);
        int int14 = org.apache.commons.io.IOUtils.read(inputStream11, byteArray12);
        byte[] byteArray15 = org.apache.commons.io.IOUtils.toByteArray(inputStream11);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer16 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream11, iOExceptionConsumer16);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream11);
        java.io.BufferedInputStream bufferedInputStream20 = org.apache.commons.io.IOUtils.buffer(inputStream11, (int) (byte) 10);
        java.io.InputStream inputStream22 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream11, (int) (byte) 1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer23 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream11, iOExceptionConsumer23);
        java.io.OutputStream outputStream25 = null;
        java.io.InputStream inputStream27 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray28 = new byte[] {};
        int int29 = org.apache.commons.io.IOUtils.length(byteArray28);
        int int30 = org.apache.commons.io.IOUtils.read(inputStream27, byteArray28);
        byte[] byteArray31 = org.apache.commons.io.IOUtils.toByteArray(inputStream27);
        java.io.InputStream inputStream33 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray34 = new byte[] {};
        int int35 = org.apache.commons.io.IOUtils.length(byteArray34);
        int int36 = org.apache.commons.io.IOUtils.read(inputStream33, byteArray34);
        byte[] byteArray37 = org.apache.commons.io.IOUtils.toByteArray(inputStream33);
        int int38 = org.apache.commons.io.IOUtils.length(byteArray37);
        org.apache.commons.io.IOUtils.readFully(inputStream27, byteArray37);
        long long40 = org.apache.commons.io.IOUtils.copyLarge(inputStream11, outputStream25, byteArray37);
        boolean boolean41 = org.apache.commons.io.IOUtils.contentEquals(inputStream1, inputStream11);
        java.io.BufferedInputStream bufferedInputStream42 = org.apache.commons.io.IOUtils.buffer(inputStream1);
        java.io.InputStream inputStream44 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray45 = org.apache.commons.io.IOUtils.toByteArray(inputStream44);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream44);
        java.io.InputStream inputStream48 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream49 = null;
        java.io.InputStream inputStream52 = null;
        byte[] byteArray54 = org.apache.commons.io.IOUtils.toByteArray("");
        int int55 = org.apache.commons.io.IOUtils.read(inputStream52, byteArray54);
        long long56 = org.apache.commons.io.IOUtils.copyLarge(inputStream48, outputStream49, 0L, 0L, byteArray54);
        java.nio.charset.Charset charset57 = null;
        java.util.List<java.lang.String> strList58 = org.apache.commons.io.IOUtils.readLines(inputStream48, charset57);
        java.io.InputStream inputStream60 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream61 = null;
        java.io.InputStream inputStream64 = null;
        byte[] byteArray66 = org.apache.commons.io.IOUtils.toByteArray("");
        int int67 = org.apache.commons.io.IOUtils.read(inputStream64, byteArray66);
        long long68 = org.apache.commons.io.IOUtils.copyLarge(inputStream60, outputStream61, 0L, 0L, byteArray66);
        java.nio.charset.Charset charset69 = null;
        java.util.List<java.lang.String> strList70 = org.apache.commons.io.IOUtils.readLines(inputStream60, charset69);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream60);
        boolean boolean72 = org.apache.commons.io.IOUtils.contentEquals(inputStream48, inputStream60);
        java.io.OutputStream outputStream73 = null;
        java.io.InputStream inputStream75 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream76 = null;
        java.io.InputStream inputStream79 = null;
        byte[] byteArray81 = org.apache.commons.io.IOUtils.toByteArray("");
        int int82 = org.apache.commons.io.IOUtils.read(inputStream79, byteArray81);
        long long83 = org.apache.commons.io.IOUtils.copyLarge(inputStream75, outputStream76, 0L, 0L, byteArray81);
        long long84 = org.apache.commons.io.IOUtils.copyLarge(inputStream60, outputStream73, byteArray81);
        org.apache.commons.io.IOUtils.readFully(inputStream44, byteArray81);
        java.io.OutputStream outputStream86 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray81, outputStream86);
        int int88 = org.apache.commons.io.IOUtils.length(byteArray81);
        int int89 = org.apache.commons.io.IOUtils.read((java.io.InputStream) bufferedInputStream42, byteArray81);
        // The following exception was thrown during execution in test generation
        try {
            long long91 = org.apache.commons.io.IOUtils.skip((java.io.InputStream) bufferedInputStream42, (-1L));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Skip count must be non-negative, actual: -1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(inputStream11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream20);
        org.junit.Assert.assertNotNull(inputStream22);
        org.junit.Assert.assertNotNull(inputStream27);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(inputStream33);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(bufferedInputStream42);
        org.junit.Assert.assertNotNull(inputStream44);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
        org.junit.Assert.assertNotNull(inputStream48);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertNotNull(strList58);
        org.junit.Assert.assertNotNull(inputStream60);
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 0L + "'", long68 == 0L);
        org.junit.Assert.assertNotNull(strList70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(inputStream75);
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 0L + "'", long83 == 0L);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 0L + "'", long84 == 0L);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
    }

    @Test
    public void test0662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0662");
        java.io.Reader reader0 = null;
        char[] charArray1 = new char[] {};
        int int2 = org.apache.commons.io.IOUtils.length(charArray1);
        java.io.Writer writer3 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray1, writer3);
        int int5 = org.apache.commons.io.IOUtils.read(reader0, charArray1);
        java.io.OutputStream outputStream6 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(charArray1, outputStream6, "");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray1);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray1), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray1), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray1), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test0663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0663");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray5 = new byte[] {};
        int int6 = org.apache.commons.io.IOUtils.length(byteArray5);
        int int7 = org.apache.commons.io.IOUtils.read(inputStream4, byteArray5);
        byte[] byteArray8 = org.apache.commons.io.IOUtils.toByteArray(inputStream4);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer9 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream4, iOExceptionConsumer9);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream4);
        java.io.BufferedInputStream bufferedInputStream13 = org.apache.commons.io.IOUtils.buffer(inputStream4, (int) (byte) 10);
        boolean boolean14 = org.apache.commons.io.IOUtils.contentEquals(inputStream1, inputStream4);
        java.io.InputStream inputStream16 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream17 = null;
        java.io.InputStream inputStream19 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream20 = null;
        java.io.InputStream inputStream23 = null;
        byte[] byteArray25 = org.apache.commons.io.IOUtils.toByteArray("");
        int int26 = org.apache.commons.io.IOUtils.read(inputStream23, byteArray25);
        long long27 = org.apache.commons.io.IOUtils.copyLarge(inputStream19, outputStream20, 0L, 0L, byteArray25);
        long long28 = org.apache.commons.io.IOUtils.copyLarge(inputStream16, outputStream17, byteArray25);
        java.io.BufferedInputStream bufferedInputStream30 = org.apache.commons.io.IOUtils.buffer(inputStream16, (int) (byte) 10);
        org.apache.commons.io.IOUtils.closeQuietly(inputStream16);
        java.io.InputStream inputStream33 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray34 = new byte[] {};
        int int35 = org.apache.commons.io.IOUtils.length(byteArray34);
        int int36 = org.apache.commons.io.IOUtils.read(inputStream33, byteArray34);
        byte[] byteArray37 = org.apache.commons.io.IOUtils.toByteArray(inputStream33);
        byte[] byteArray39 = org.apache.commons.io.IOUtils.toByteArray(inputStream33, (int) (short) 0);
        long long41 = org.apache.commons.io.IOUtils.skip(inputStream33, 100L);
        java.io.InputStream inputStream43 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray44 = new byte[] {};
        int int45 = org.apache.commons.io.IOUtils.length(byteArray44);
        int int46 = org.apache.commons.io.IOUtils.read(inputStream43, byteArray44);
        byte[] byteArray47 = org.apache.commons.io.IOUtils.toByteArray(inputStream43);
        byte[] byteArray49 = org.apache.commons.io.IOUtils.toByteArray(inputStream43, (int) (short) 0);
        org.apache.commons.io.IOUtils.readFully(inputStream33, byteArray49);
        org.apache.commons.io.IOUtils.readFully(inputStream16, byteArray49);
        // The following exception was thrown during execution in test generation
        try {
            int int54 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray49, (int) ' ', (int) '\\');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Range [32, 32 + 92) out of bounds for length 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(inputStream16);
        org.junit.Assert.assertNotNull(inputStream19);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream30);
        org.junit.Assert.assertNotNull(inputStream33);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertNotNull(inputStream43);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
    }

    @Test
    public void test0664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0664");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray(inputStream1, (int) (short) 0);
        long long9 = org.apache.commons.io.IOUtils.skip(inputStream1, 100L);
        java.io.InputStream inputStream10 = null;
        java.io.InputStream inputStream11 = null;
        java.io.OutputStream outputStream12 = null;
        byte[] byteArray15 = new byte[] {};
        int int16 = org.apache.commons.io.IOUtils.length(byteArray15);
        java.io.OutputStream outputStream17 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray15, outputStream17);
        long long19 = org.apache.commons.io.IOUtils.copyLarge(inputStream11, outputStream12, 0L, (long) (byte) -1, byteArray15);
        java.io.OutputStream outputStream20 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray15, outputStream20);
        org.apache.commons.io.IOUtils.readFully(inputStream10, byteArray15);
        int int23 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray15);
        java.io.InputStream inputStream24 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1);
        java.io.BufferedInputStream bufferedInputStream26 = org.apache.commons.io.IOUtils.buffer(inputStream24, 1);
        java.io.Writer writer27 = null;
        org.apache.commons.io.IOUtils.copy((java.io.InputStream) bufferedInputStream26, writer27);
        java.io.OutputStream outputStream29 = null;
        java.io.InputStream inputStream31 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray32 = org.apache.commons.io.IOUtils.toByteArray(inputStream31);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream31);
        java.util.List<java.lang.String> strList34 = org.apache.commons.io.IOUtils.readLines(inputStream31);
        java.io.OutputStream outputStream35 = null;
        long long36 = org.apache.commons.io.IOUtils.copyLarge(inputStream31, outputStream35);
        java.io.OutputStream outputStream37 = null;
        java.io.InputStream inputStream41 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray42 = new byte[] {};
        int int43 = org.apache.commons.io.IOUtils.length(byteArray42);
        int int44 = org.apache.commons.io.IOUtils.read(inputStream41, byteArray42);
        byte[] byteArray45 = org.apache.commons.io.IOUtils.toByteArray(inputStream41);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer46 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream41, iOExceptionConsumer46);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream41);
        java.io.BufferedInputStream bufferedInputStream50 = org.apache.commons.io.IOUtils.buffer(inputStream41, (int) (byte) 10);
        java.io.InputStream inputStream52 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream41, (int) (byte) 1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer53 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream41, iOExceptionConsumer53);
        java.io.OutputStream outputStream55 = null;
        java.io.InputStream inputStream57 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray58 = new byte[] {};
        int int59 = org.apache.commons.io.IOUtils.length(byteArray58);
        int int60 = org.apache.commons.io.IOUtils.read(inputStream57, byteArray58);
        byte[] byteArray61 = org.apache.commons.io.IOUtils.toByteArray(inputStream57);
        java.io.InputStream inputStream63 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray64 = new byte[] {};
        int int65 = org.apache.commons.io.IOUtils.length(byteArray64);
        int int66 = org.apache.commons.io.IOUtils.read(inputStream63, byteArray64);
        byte[] byteArray67 = org.apache.commons.io.IOUtils.toByteArray(inputStream63);
        int int68 = org.apache.commons.io.IOUtils.length(byteArray67);
        org.apache.commons.io.IOUtils.readFully(inputStream57, byteArray67);
        long long70 = org.apache.commons.io.IOUtils.copyLarge(inputStream41, outputStream55, byteArray67);
        long long71 = org.apache.commons.io.IOUtils.copyLarge(inputStream31, outputStream37, (long) (short) 0, 1L, byteArray67);
        // The following exception was thrown during execution in test generation
        try {
            long long72 = org.apache.commons.io.IOUtils.copyLarge((java.io.InputStream) bufferedInputStream26, outputStream29, byteArray67);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.OutputStream.write(byte[], int, int)\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(inputStream24);
        org.junit.Assert.assertNotNull(bufferedInputStream26);
        org.junit.Assert.assertNotNull(inputStream31);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertNotNull(strList34);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertNotNull(inputStream41);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream50);
        org.junit.Assert.assertNotNull(inputStream52);
        org.junit.Assert.assertNotNull(inputStream57);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[]");
        org.junit.Assert.assertNotNull(inputStream63);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 0L + "'", long70 == 0L);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 0L + "'", long71 == 0L);
    }

    @Test
    public void test0665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0665");
        java.io.Reader reader0 = null;
        org.apache.commons.io.IOUtils.skipFully(reader0, (long) (short) 0);
    }

    @Test
    public void test0666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0666");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer9 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer9);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.String> strList12 = org.apache.commons.io.IOUtils.readLines(inputStream1, "\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ?");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
    }

    @Test
    public void test0667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0667");
        char[] charArray6 = new char[] { 'a', 'a', '#', '/', '\\', ' ' };
        java.io.Writer writer7 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.writeChunked(charArray6, writer7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Writer.write(char[], int, int)\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "aa#/\\ ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "aa#/\\ ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a, a, #, /, \\,  ]");
    }

    @Test
    public void test0668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0668");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.List<java.lang.String> strList3 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray("hi!");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray5);
            org.junit.Assert.fail("Expected exception of type java.io.EOFException; message: Length to read: 3 actual: 0");
        } catch (java.io.EOFException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(strList3);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[104, 105, 33]");
    }

    @Test
    public void test0669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0669");
        java.io.Reader reader0 = null;
        java.io.Writer writer1 = null;
        java.io.InputStream inputStream5 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray6 = new byte[] {};
        int int7 = org.apache.commons.io.IOUtils.length(byteArray6);
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray6);
        byte[] byteArray9 = org.apache.commons.io.IOUtils.toByteArray(inputStream5);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer10 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream5, iOExceptionConsumer10);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream5);
        java.io.BufferedInputStream bufferedInputStream14 = org.apache.commons.io.IOUtils.buffer(inputStream5, (int) (byte) 10);
        byte[] byteArray15 = null;
        org.apache.commons.io.IOUtils.readFully(inputStream5, byteArray15, (int) '4', 0);
        java.io.OutputStream outputStream19 = null;
        long long21 = org.apache.commons.io.IOUtils.copy(inputStream5, outputStream19, 0);
        char[] charArray22 = org.apache.commons.io.IOUtils.toCharArray(inputStream5);
        // The following exception was thrown during execution in test generation
        try {
            long long23 = org.apache.commons.io.IOUtils.copyLarge(reader0, writer1, (long) 4, (long) (short) 1, charArray22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[], int, int)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream14);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray22), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray22), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray22), "[]");
    }

    @Test
    public void test0670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0670");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        byte[] byteArray3 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.lang.String str4 = org.apache.commons.io.IOUtils.toString(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer5 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer5);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
    }

    @Test
    public void test0671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0671");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        java.nio.charset.Charset charset10 = null;
        java.util.List<java.lang.String> strList11 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset10);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream14 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, (int) (byte) 0);
        java.io.Writer writer15 = null;
        java.nio.charset.Charset charset16 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer15, charset16);
        java.io.InputStream inputStream19 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray20 = new byte[] {};
        int int21 = org.apache.commons.io.IOUtils.length(byteArray20);
        int int22 = org.apache.commons.io.IOUtils.read(inputStream19, byteArray20);
        java.nio.charset.Charset charset23 = null;
        java.lang.String str24 = org.apache.commons.io.IOUtils.toString(inputStream19, charset23);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream19);
        byte[] byteArray26 = org.apache.commons.io.IOUtils.toByteArray(inputStream19);
        // The following exception was thrown during execution in test generation
        try {
            int int29 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray26, 5, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Length must not be negative: -1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertNotNull(inputStream14);
        org.junit.Assert.assertNotNull(inputStream19);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
    }

    @Test
    public void test0672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0672");
        java.io.Reader reader0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.skipFully(reader0, (long) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[], int, int)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0673");
        java.io.Writer writer0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.BufferedWriter bufferedWriter2 = org.apache.commons.io.IOUtils.buffer(writer0, 6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0674");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        org.apache.commons.io.IOUtils.closeQuietly(inputStream1);
        java.io.InputStream inputStream7 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray8 = new byte[] {};
        int int9 = org.apache.commons.io.IOUtils.length(byteArray8);
        int int10 = org.apache.commons.io.IOUtils.read(inputStream7, byteArray8);
        java.lang.String str11 = org.apache.commons.io.IOUtils.toString(byteArray8);
        int int14 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray8, (int) (byte) 10, (int) (short) 0);
        char[] charArray15 = org.apache.commons.io.IOUtils.toCharArray(inputStream1);
        java.util.List<java.lang.String> strList16 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(inputStream7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[]");
        org.junit.Assert.assertNotNull(strList16);
    }

    @Test
    public void test0675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0675");
        java.lang.ClassLoader classLoader1 = null;
        java.net.URL uRL2 = org.apache.commons.io.IOUtils.resourceToURL("", classLoader1);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str4 = org.apache.commons.io.IOUtils.toString(uRL2, "\r\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ??");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(uRL2);
        org.junit.Assert.assertEquals(uRL2.toString(), "file:/F:/Mathieu/git/commons-io/bin/org/apache/commons/io/");
    }

    @Test
    public void test0676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0676");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        byte[] byteArray3 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.io.OutputStream outputStream4 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long7 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream4, 100L, (long) '#');
            org.junit.Assert.fail("Expected exception of type java.io.EOFException; message: Bytes to skip: 100 actual: 0");
        } catch (java.io.EOFException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
    }

    @Test
    public void test0677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0677");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        java.io.InputStream inputStream5 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray(inputStream1, 100);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Unexpected read size. current: 0, expected: 100");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(inputStream5);
    }

    @Test
    public void test0678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0678");
        java.io.Reader reader0 = null;
        java.io.Reader reader1 = null;
        java.io.Reader reader2 = null;
        java.io.Writer writer3 = null;
        char[] charArray6 = new char[] {};
        int int7 = org.apache.commons.io.IOUtils.length(charArray6);
        java.io.Writer writer8 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray6, writer8);
        java.io.Writer writer10 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray6, writer10);
        long long12 = org.apache.commons.io.IOUtils.copyLarge(reader2, writer3, 0L, (long) (byte) 100, charArray6);
        int int13 = org.apache.commons.io.IOUtils.read(reader1, charArray6);
        int int14 = org.apache.commons.io.IOUtils.length(charArray6);
        int int15 = org.apache.commons.io.IOUtils.read(reader0, charArray6);
        java.io.OutputStream outputStream16 = null;
        java.nio.charset.Charset charset17 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(charArray6, outputStream16, charset17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.OutputStream.write(byte[])\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test0679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0679");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream5 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray("");
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray10);
        long long12 = org.apache.commons.io.IOUtils.copyLarge(inputStream4, outputStream5, 0L, 0L, byteArray10);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, byteArray10);
        java.io.BufferedInputStream bufferedInputStream15 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.nio.charset.Charset charset16 = null;
        java.util.List<java.lang.String> strList17 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset16);
        java.io.OutputStream outputStream18 = null;
        long long21 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream18, 0L, (long) 0);
        java.io.BufferedInputStream bufferedInputStream22 = org.apache.commons.io.IOUtils.buffer(inputStream1);
        java.nio.charset.Charset charset23 = null;
        java.lang.String str24 = org.apache.commons.io.IOUtils.toString((java.io.InputStream) bufferedInputStream22, charset23);
        java.io.OutputStream outputStream25 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long28 = org.apache.commons.io.IOUtils.copyLarge((java.io.InputStream) bufferedInputStream22, outputStream25, (long) (short) 10, 1L);
            org.junit.Assert.fail("Expected exception of type java.io.EOFException; message: Bytes to skip: 10 actual: 0");
        } catch (java.io.EOFException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream15);
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
    }

    @Test
    public void test0680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0680");
        java.io.Reader reader0 = null;
        java.io.Writer writer1 = null;
        char[] charArray4 = new char[] {};
        long long5 = org.apache.commons.io.IOUtils.copyLarge(reader0, writer1, (long) (byte) 0, (long) 1, charArray4);
        java.io.Writer writer6 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray4, writer6);
        java.io.OutputStream outputStream8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(charArray4, outputStream8, "");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[]");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
    }

    @Test
    public void test0681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0681");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.BufferedInputStream bufferedInputStream10 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.io.InputStream inputStream12 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, (int) (byte) 1);
        java.nio.charset.Charset charset13 = null;
        char[] charArray14 = org.apache.commons.io.IOUtils.toCharArray(inputStream1, charset13);
        java.io.OutputStream outputStream15 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(charArray14, outputStream15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.OutputStream.write(byte[])\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream10);
        org.junit.Assert.assertNotNull(inputStream12);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[]");
    }

    @Test
    public void test0682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0682");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.util.List<java.lang.String> strList4 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.OutputStream outputStream5 = null;
        long long6 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream5);
        java.io.Writer writer7 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer7);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream11 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray12 = new byte[] {};
        int int13 = org.apache.commons.io.IOUtils.length(byteArray12);
        int int14 = org.apache.commons.io.IOUtils.read(inputStream11, byteArray12);
        byte[] byteArray15 = org.apache.commons.io.IOUtils.toByteArray(inputStream11);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer16 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream11, iOExceptionConsumer16);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream11);
        java.io.BufferedInputStream bufferedInputStream20 = org.apache.commons.io.IOUtils.buffer(inputStream11, (int) (byte) 10);
        java.io.InputStream inputStream22 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream11, (int) (byte) 1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer23 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream11, iOExceptionConsumer23);
        java.io.OutputStream outputStream25 = null;
        java.io.InputStream inputStream27 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray28 = new byte[] {};
        int int29 = org.apache.commons.io.IOUtils.length(byteArray28);
        int int30 = org.apache.commons.io.IOUtils.read(inputStream27, byteArray28);
        byte[] byteArray31 = org.apache.commons.io.IOUtils.toByteArray(inputStream27);
        java.io.InputStream inputStream33 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray34 = new byte[] {};
        int int35 = org.apache.commons.io.IOUtils.length(byteArray34);
        int int36 = org.apache.commons.io.IOUtils.read(inputStream33, byteArray34);
        byte[] byteArray37 = org.apache.commons.io.IOUtils.toByteArray(inputStream33);
        int int38 = org.apache.commons.io.IOUtils.length(byteArray37);
        org.apache.commons.io.IOUtils.readFully(inputStream27, byteArray37);
        long long40 = org.apache.commons.io.IOUtils.copyLarge(inputStream11, outputStream25, byteArray37);
        boolean boolean41 = org.apache.commons.io.IOUtils.contentEquals(inputStream1, inputStream11);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str43 = org.apache.commons.io.IOUtils.toString(inputStream11, "");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(inputStream11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream20);
        org.junit.Assert.assertNotNull(inputStream22);
        org.junit.Assert.assertNotNull(inputStream27);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(inputStream33);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
    }

    @Test
    public void test0683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0683");
        java.io.Reader reader0 = null;
        java.io.Writer writer1 = null;
        char[] charArray4 = new char[] {};
        int int5 = org.apache.commons.io.IOUtils.length(charArray4);
        java.io.Writer writer6 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray4, writer6);
        int int8 = org.apache.commons.io.IOUtils.length(charArray4);
        java.io.Writer writer9 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray4, writer9);
        // The following exception was thrown during execution in test generation
        try {
            long long11 = org.apache.commons.io.IOUtils.copyLarge(reader0, writer1, (long) (byte) 100, (long) (byte) 1, charArray4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[], int, int)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test0684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0684");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream5 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray("");
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray10);
        long long12 = org.apache.commons.io.IOUtils.copyLarge(inputStream4, outputStream5, 0L, 0L, byteArray10);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, byteArray10);
        java.io.BufferedInputStream bufferedInputStream15 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.nio.charset.Charset charset16 = null;
        java.util.List<java.lang.String> strList17 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset16);
        java.io.OutputStream outputStream18 = null;
        long long21 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream18, 0L, (long) 0);
        java.nio.charset.Charset charset22 = null;
        char[] charArray23 = org.apache.commons.io.IOUtils.toCharArray(inputStream1, charset22);
        java.io.Writer writer24 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray23, writer24);
        java.io.Writer writer26 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray23, writer26);
        java.io.OutputStream outputStream28 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(charArray23, outputStream28, "\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ?");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream15);
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[]");
    }

    @Test
    public void test0685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0685");
        java.io.Writer writer0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.BufferedWriter bufferedWriter2 = org.apache.commons.io.IOUtils.buffer(writer0, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0686");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream5 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray("");
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray10);
        long long12 = org.apache.commons.io.IOUtils.copyLarge(inputStream4, outputStream5, 0L, 0L, byteArray10);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, byteArray10);
        java.io.BufferedInputStream bufferedInputStream15 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.nio.charset.Charset charset16 = null;
        java.util.List<java.lang.String> strList17 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset16);
        java.io.OutputStream outputStream18 = null;
        long long21 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream18, 0L, (long) 0);
        java.nio.charset.Charset charset22 = null;
        char[] charArray23 = org.apache.commons.io.IOUtils.toCharArray(inputStream1, charset22);
        java.io.Writer writer24 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray23, writer24);
        java.io.Writer writer26 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray23, writer26);
        java.io.OutputStream outputStream28 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(charArray23, outputStream28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.OutputStream.write(byte[])\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream15);
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[]");
    }

    @Test
    public void test0687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0687");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.nio.charset.Charset charset6 = null;
        java.util.List<java.lang.String> strList7 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset6);
        java.nio.charset.Charset charset8 = null;
        org.apache.commons.io.LineIterator lineIterator9 = org.apache.commons.io.IOUtils.lineIterator(inputStream1, charset8);
        java.io.InputStream inputStream11 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, 6);
        java.io.InputStream inputStream13 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray14 = new byte[] {};
        int int15 = org.apache.commons.io.IOUtils.length(byteArray14);
        int int16 = org.apache.commons.io.IOUtils.read(inputStream13, byteArray14);
        byte[] byteArray17 = org.apache.commons.io.IOUtils.toByteArray(inputStream13);
        byte[] byteArray18 = org.apache.commons.io.IOUtils.toByteArray(inputStream13);
        int int21 = org.apache.commons.io.IOUtils.read(inputStream11, byteArray18, (int) '#', 0);
        java.io.Writer writer22 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(byteArray18, writer22, "hi!");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: hi!");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertNotNull(lineIterator9);
        org.junit.Assert.assertNotNull(inputStream11);
        org.junit.Assert.assertNotNull(inputStream13);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
    }

    @Test
    public void test0688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0688");
        byte[] byteArray0 = null;
        java.io.Writer writer1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(byteArray0, writer1, "\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ?");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0689");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.io.InputStream inputStream7 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, (int) (byte) 0);
        byte[] byteArray9 = org.apache.commons.io.IOUtils.toByteArray("hi!");
        int int10 = org.apache.commons.io.IOUtils.read(inputStream7, byteArray9);
        java.io.OutputStream outputStream11 = null;
        java.io.InputStream inputStream13 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream14 = null;
        java.io.InputStream inputStream16 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream17 = null;
        java.io.InputStream inputStream20 = null;
        byte[] byteArray22 = org.apache.commons.io.IOUtils.toByteArray("");
        int int23 = org.apache.commons.io.IOUtils.read(inputStream20, byteArray22);
        long long24 = org.apache.commons.io.IOUtils.copyLarge(inputStream16, outputStream17, 0L, 0L, byteArray22);
        long long25 = org.apache.commons.io.IOUtils.copyLarge(inputStream13, outputStream14, byteArray22);
        java.io.BufferedInputStream bufferedInputStream27 = org.apache.commons.io.IOUtils.buffer(inputStream13, (int) (byte) 10);
        java.io.InputStream inputStream29 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray30 = org.apache.commons.io.IOUtils.toByteArray(inputStream29);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream29);
        java.io.InputStream inputStream33 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream34 = null;
        java.io.InputStream inputStream37 = null;
        byte[] byteArray39 = org.apache.commons.io.IOUtils.toByteArray("");
        int int40 = org.apache.commons.io.IOUtils.read(inputStream37, byteArray39);
        long long41 = org.apache.commons.io.IOUtils.copyLarge(inputStream33, outputStream34, 0L, 0L, byteArray39);
        java.nio.charset.Charset charset42 = null;
        java.util.List<java.lang.String> strList43 = org.apache.commons.io.IOUtils.readLines(inputStream33, charset42);
        java.io.InputStream inputStream45 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream46 = null;
        java.io.InputStream inputStream49 = null;
        byte[] byteArray51 = org.apache.commons.io.IOUtils.toByteArray("");
        int int52 = org.apache.commons.io.IOUtils.read(inputStream49, byteArray51);
        long long53 = org.apache.commons.io.IOUtils.copyLarge(inputStream45, outputStream46, 0L, 0L, byteArray51);
        java.nio.charset.Charset charset54 = null;
        java.util.List<java.lang.String> strList55 = org.apache.commons.io.IOUtils.readLines(inputStream45, charset54);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream45);
        boolean boolean57 = org.apache.commons.io.IOUtils.contentEquals(inputStream33, inputStream45);
        java.io.OutputStream outputStream58 = null;
        java.io.InputStream inputStream60 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream61 = null;
        java.io.InputStream inputStream64 = null;
        byte[] byteArray66 = org.apache.commons.io.IOUtils.toByteArray("");
        int int67 = org.apache.commons.io.IOUtils.read(inputStream64, byteArray66);
        long long68 = org.apache.commons.io.IOUtils.copyLarge(inputStream60, outputStream61, 0L, 0L, byteArray66);
        long long69 = org.apache.commons.io.IOUtils.copyLarge(inputStream45, outputStream58, byteArray66);
        org.apache.commons.io.IOUtils.readFully(inputStream29, byteArray66);
        org.apache.commons.io.IOUtils.readFully(inputStream13, byteArray66);
        java.lang.String str72 = org.apache.commons.io.IOUtils.toString(byteArray66);
        // The following exception was thrown during execution in test generation
        try {
            long long73 = org.apache.commons.io.IOUtils.copyLarge(inputStream7, outputStream11, byteArray66);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.OutputStream.write(byte[], int, int)\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(inputStream7);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[104, 105, 33]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(inputStream13);
        org.junit.Assert.assertNotNull(inputStream16);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream27);
        org.junit.Assert.assertNotNull(inputStream29);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertNotNull(inputStream33);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertNotNull(strList43);
        org.junit.Assert.assertNotNull(inputStream45);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertNotNull(strList55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(inputStream60);
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 0L + "'", long68 == 0L);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 0L + "'", long69 == 0L);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
    }

    @Test
    public void test0690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0690");
        java.io.Reader reader0 = null;
        java.io.Writer writer1 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long4 = org.apache.commons.io.IOUtils.copyLarge(reader0, writer1, (long) (byte) -1, (long) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[], int, int)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0691");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.BufferedInputStream bufferedInputStream10 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.io.InputStream inputStream12 = org.apache.commons.io.IOUtils.toBufferedInputStream((java.io.InputStream) bufferedInputStream10, (int) '#');
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream12);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str15 = org.apache.commons.io.IOUtils.toString(inputStream12, "hi!");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: hi!");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream10);
        org.junit.Assert.assertNotNull(inputStream12);
    }

    @Test
    public void test0692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0692");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        java.io.OutputStream outputStream10 = null;
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream10, (long) (short) 0, (-1L));
        java.lang.String str14 = org.apache.commons.io.IOUtils.toString(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly(inputStream1);
        java.io.InputStream inputStream17 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray18 = new byte[] {};
        int int19 = org.apache.commons.io.IOUtils.length(byteArray18);
        int int20 = org.apache.commons.io.IOUtils.read(inputStream17, byteArray18);
        byte[] byteArray21 = org.apache.commons.io.IOUtils.toByteArray(inputStream17);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray21, 100, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Range [100, 100 + 52) out of bounds for length 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(inputStream17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
    }

    @Test
    public void test0693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0693");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream4);
        java.io.InputStream inputStream7 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray8 = new byte[] {};
        int int9 = org.apache.commons.io.IOUtils.length(byteArray8);
        int int10 = org.apache.commons.io.IOUtils.read(inputStream7, byteArray8);
        byte[] byteArray11 = org.apache.commons.io.IOUtils.toByteArray(inputStream7);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer12 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream7, iOExceptionConsumer12);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream7);
        java.io.BufferedInputStream bufferedInputStream16 = org.apache.commons.io.IOUtils.buffer(inputStream7, (int) (byte) 10);
        boolean boolean17 = org.apache.commons.io.IOUtils.contentEquals(inputStream4, inputStream7);
        java.io.InputStream inputStream19 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray20 = new byte[] {};
        int int21 = org.apache.commons.io.IOUtils.length(byteArray20);
        int int22 = org.apache.commons.io.IOUtils.read(inputStream19, byteArray20);
        byte[] byteArray23 = org.apache.commons.io.IOUtils.toByteArray(inputStream19);
        byte[] byteArray25 = org.apache.commons.io.IOUtils.toByteArray(inputStream19, (int) (short) 0);
        long long27 = org.apache.commons.io.IOUtils.skip(inputStream19, 100L);
        java.io.InputStream inputStream28 = null;
        java.io.InputStream inputStream29 = null;
        java.io.OutputStream outputStream30 = null;
        byte[] byteArray33 = new byte[] {};
        int int34 = org.apache.commons.io.IOUtils.length(byteArray33);
        java.io.OutputStream outputStream35 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray33, outputStream35);
        long long37 = org.apache.commons.io.IOUtils.copyLarge(inputStream29, outputStream30, 0L, (long) (byte) -1, byteArray33);
        java.io.OutputStream outputStream38 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray33, outputStream38);
        org.apache.commons.io.IOUtils.readFully(inputStream28, byteArray33);
        int int41 = org.apache.commons.io.IOUtils.read(inputStream19, byteArray33);
        int int42 = org.apache.commons.io.IOUtils.read(inputStream7, byteArray33);
        int int45 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray33, 1, (int) (short) 0);
        java.io.InputStream inputStream47 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, (int) (short) 10);
        java.io.OutputStream outputStream48 = null;
        java.io.InputStream inputStream52 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray53 = org.apache.commons.io.IOUtils.toByteArray(inputStream52);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream52);
        java.io.InputStream inputStream56 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream57 = null;
        java.io.InputStream inputStream60 = null;
        byte[] byteArray62 = org.apache.commons.io.IOUtils.toByteArray("");
        int int63 = org.apache.commons.io.IOUtils.read(inputStream60, byteArray62);
        long long64 = org.apache.commons.io.IOUtils.copyLarge(inputStream56, outputStream57, 0L, 0L, byteArray62);
        java.nio.charset.Charset charset65 = null;
        java.util.List<java.lang.String> strList66 = org.apache.commons.io.IOUtils.readLines(inputStream56, charset65);
        java.io.InputStream inputStream68 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream69 = null;
        java.io.InputStream inputStream72 = null;
        byte[] byteArray74 = org.apache.commons.io.IOUtils.toByteArray("");
        int int75 = org.apache.commons.io.IOUtils.read(inputStream72, byteArray74);
        long long76 = org.apache.commons.io.IOUtils.copyLarge(inputStream68, outputStream69, 0L, 0L, byteArray74);
        java.nio.charset.Charset charset77 = null;
        java.util.List<java.lang.String> strList78 = org.apache.commons.io.IOUtils.readLines(inputStream68, charset77);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream68);
        boolean boolean80 = org.apache.commons.io.IOUtils.contentEquals(inputStream56, inputStream68);
        java.io.OutputStream outputStream81 = null;
        java.io.InputStream inputStream83 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream84 = null;
        java.io.InputStream inputStream87 = null;
        byte[] byteArray89 = org.apache.commons.io.IOUtils.toByteArray("");
        int int90 = org.apache.commons.io.IOUtils.read(inputStream87, byteArray89);
        long long91 = org.apache.commons.io.IOUtils.copyLarge(inputStream83, outputStream84, 0L, 0L, byteArray89);
        long long92 = org.apache.commons.io.IOUtils.copyLarge(inputStream68, outputStream81, byteArray89);
        org.apache.commons.io.IOUtils.readFully(inputStream52, byteArray89);
        // The following exception was thrown during execution in test generation
        try {
            long long94 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream48, (long) 5, (long) (short) 1, byteArray89);
            org.junit.Assert.fail("Expected exception of type java.io.EOFException; message: Bytes to skip: 5 actual: 0");
        } catch (java.io.EOFException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(inputStream7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(inputStream19);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(inputStream47);
        org.junit.Assert.assertNotNull(inputStream52);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[]");
        org.junit.Assert.assertNotNull(inputStream56);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L);
        org.junit.Assert.assertNotNull(strList66);
        org.junit.Assert.assertNotNull(inputStream68);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 0L + "'", long76 == 0L);
        org.junit.Assert.assertNotNull(strList78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(inputStream83);
        org.junit.Assert.assertNotNull(byteArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray89), "[]");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertTrue("'" + long91 + "' != '" + 0L + "'", long91 == 0L);
        org.junit.Assert.assertTrue("'" + long92 + "' != '" + 0L + "'", long92 == 0L);
    }

    @Test
    public void test0694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0694");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        int int6 = org.apache.commons.io.IOUtils.length(byteArray5);
        java.io.Writer writer7 = null;
        java.nio.charset.Charset charset8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(byteArray5, writer7, charset8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Writer.write(String)\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test0695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0695");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        java.nio.charset.Charset charset10 = null;
        java.util.List<java.lang.String> strList11 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset10);
        java.io.Writer writer13 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList11, "\r\n", writer13);
        java.io.Writer writer16 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList11, "\n", writer16);
        java.io.Writer writer19 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList11, "hi!", writer19);
        java.io.Writer writer22 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList11, "\r\n", writer22);
        java.io.OutputStream outputStream25 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList11, "hi!", outputStream25, "");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(strList11);
    }

    @Test
    public void test0696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0696");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray5 = new byte[] {};
        int int6 = org.apache.commons.io.IOUtils.length(byteArray5);
        int int7 = org.apache.commons.io.IOUtils.read(inputStream4, byteArray5);
        byte[] byteArray8 = org.apache.commons.io.IOUtils.toByteArray(inputStream4);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer9 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream4, iOExceptionConsumer9);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream4);
        java.io.BufferedInputStream bufferedInputStream13 = org.apache.commons.io.IOUtils.buffer(inputStream4, (int) (byte) 10);
        boolean boolean14 = org.apache.commons.io.IOUtils.contentEquals(inputStream1, inputStream4);
        java.io.InputStream inputStream16 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray17 = new byte[] {};
        int int18 = org.apache.commons.io.IOUtils.length(byteArray17);
        int int19 = org.apache.commons.io.IOUtils.read(inputStream16, byteArray17);
        byte[] byteArray20 = org.apache.commons.io.IOUtils.toByteArray(inputStream16);
        byte[] byteArray22 = org.apache.commons.io.IOUtils.toByteArray(inputStream16, (int) (short) 0);
        long long24 = org.apache.commons.io.IOUtils.skip(inputStream16, 100L);
        java.io.InputStream inputStream25 = null;
        java.io.InputStream inputStream26 = null;
        java.io.OutputStream outputStream27 = null;
        byte[] byteArray30 = new byte[] {};
        int int31 = org.apache.commons.io.IOUtils.length(byteArray30);
        java.io.OutputStream outputStream32 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray30, outputStream32);
        long long34 = org.apache.commons.io.IOUtils.copyLarge(inputStream26, outputStream27, 0L, (long) (byte) -1, byteArray30);
        java.io.OutputStream outputStream35 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray30, outputStream35);
        org.apache.commons.io.IOUtils.readFully(inputStream25, byteArray30);
        int int38 = org.apache.commons.io.IOUtils.read(inputStream16, byteArray30);
        int int39 = org.apache.commons.io.IOUtils.read(inputStream4, byteArray30);
        java.io.Writer writer40 = null;
        java.nio.charset.Charset charset41 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(byteArray30, writer40, charset41);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Writer.write(String)\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(inputStream16);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
    }

    @Test
    public void test0697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0697");
        java.net.URL uRL1 = org.apache.commons.io.IOUtils.resourceToURL("");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str3 = org.apache.commons.io.IOUtils.toString(uRL1, "\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ?");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(uRL1);
        org.junit.Assert.assertEquals(uRL1.toString(), "file:/F:/Mathieu/git/commons-io/bin/org/apache/commons/io/");
    }

    @Test
    public void test0698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0698");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        java.io.OutputStream outputStream10 = null;
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream10, (long) (short) 0, (-1L));
        java.lang.String str14 = org.apache.commons.io.IOUtils.toString(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly(inputStream1);
        org.apache.commons.io.function.IOConsumer<java.io.IOException> iOExceptionIOConsumer16 = null;
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1, iOExceptionIOConsumer16);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray19 = org.apache.commons.io.IOUtils.toByteArray(inputStream1, (long) 2);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Unexpected read size. current: 0, expected: 2");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
    }

    @Test
    public void test0699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0699");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray(inputStream1, (int) (short) 0);
        long long9 = org.apache.commons.io.IOUtils.skip(inputStream1, 100L);
        java.io.InputStream inputStream11 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray12 = new byte[] {};
        int int13 = org.apache.commons.io.IOUtils.length(byteArray12);
        int int14 = org.apache.commons.io.IOUtils.read(inputStream11, byteArray12);
        byte[] byteArray15 = org.apache.commons.io.IOUtils.toByteArray(inputStream11);
        byte[] byteArray17 = org.apache.commons.io.IOUtils.toByteArray(inputStream11, (int) (short) 0);
        org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray17);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray20 = org.apache.commons.io.IOUtils.toByteArray(inputStream1, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Size must be equal or greater than zero: -1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(inputStream11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
    }

    @Test
    public void test0700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0700");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.BufferedInputStream bufferedInputStream10 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        org.apache.commons.io.function.IOConsumer<java.io.IOException> iOExceptionIOConsumer11 = null;
        org.apache.commons.io.IOUtils.close((java.io.Closeable) bufferedInputStream10, iOExceptionIOConsumer11);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) bufferedInputStream10);
        org.apache.commons.io.IOUtils.skipFully((java.io.InputStream) bufferedInputStream10, (long) (short) 0);
        java.nio.charset.Charset charset16 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str17 = org.apache.commons.io.IOUtils.toString((java.io.InputStream) bufferedInputStream10, charset16);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Stream closed");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream10);
    }

    @Test
    public void test0701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0701");
        java.lang.String[] strArray4 = new java.lang.String[] { "", "", "\r\n", "\r\n" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        java.io.OutputStream outputStream8 = null;
        java.nio.charset.Charset charset9 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList5, "\n", outputStream8, charset9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.OutputStream.write(byte[])\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test0702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0702");
        java.io.OutputStream outputStream0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.BufferedOutputStream bufferedOutputStream2 = org.apache.commons.io.IOUtils.buffer(outputStream0, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: outputStream");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0703");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.BufferedInputStream bufferedInputStream10 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        org.apache.commons.io.function.IOConsumer<java.io.IOException> iOExceptionIOConsumer11 = null;
        org.apache.commons.io.IOUtils.close((java.io.Closeable) bufferedInputStream10, iOExceptionIOConsumer11);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) bufferedInputStream10);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str14 = org.apache.commons.io.IOUtils.toString((java.io.InputStream) bufferedInputStream10);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Stream closed");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream10);
    }

    @Test
    public void test0704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0704");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        java.io.OutputStream outputStream10 = null;
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream10, (long) (short) 0, (-1L));
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.skipFully(inputStream1, (long) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Bytes to skip must not be negative: -1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
    }

    @Test
    public void test0705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0705");
        java.io.Reader reader0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.BufferedReader bufferedReader2 = org.apache.commons.io.IOUtils.buffer(reader0, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0706");
        java.io.OutputStream outputStream0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.BufferedOutputStream bufferedOutputStream2 = org.apache.commons.io.IOUtils.buffer(outputStream0, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: outputStream");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0707");
        java.nio.channels.ReadableByteChannel readableByteChannel0 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long2 = org.apache.commons.io.IOUtils.skip(readableByteChannel0, (long) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.nio.channels.ReadableByteChannel.read(java.nio.ByteBuffer)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0708");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.OutputStream outputStream9 = null;
        long long10 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream9);
        // The following exception was thrown during execution in test generation
        try {
            java.io.InputStream inputStream12 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Negative initial size: -1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
    }

    @Test
    public void test0709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0709");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        java.io.OutputStream outputStream10 = null;
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream10, (long) (short) 0, (-1L));
        java.lang.String str14 = org.apache.commons.io.IOUtils.toString(inputStream1);
        java.io.BufferedInputStream bufferedInputStream16 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 100);
        java.io.Writer writer17 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.copy((java.io.InputStream) bufferedInputStream16, writer17, "\r\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ??");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(bufferedInputStream16);
    }

    @Test
    public void test0710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0710");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray(inputStream1, (int) (short) 0);
        long long9 = org.apache.commons.io.IOUtils.skip(inputStream1, 100L);
        java.io.InputStream inputStream11 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray12 = new byte[] {};
        int int13 = org.apache.commons.io.IOUtils.length(byteArray12);
        int int14 = org.apache.commons.io.IOUtils.read(inputStream11, byteArray12);
        byte[] byteArray15 = org.apache.commons.io.IOUtils.toByteArray(inputStream11);
        byte[] byteArray17 = org.apache.commons.io.IOUtils.toByteArray(inputStream11, (int) (short) 0);
        org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray17);
        java.io.OutputStream outputStream19 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long22 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream19, (long) (byte) 1, (long) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.io.EOFException; message: Bytes to skip: 1 actual: 0");
        } catch (java.io.EOFException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(inputStream11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
    }

    @Test
    public void test0711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0711");
        java.lang.CharSequence charSequence0 = null;
        java.io.Writer writer1 = null;
        org.apache.commons.io.IOUtils.write(charSequence0, writer1);
    }

    @Test
    public void test0712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0712");
        java.io.Reader reader0 = null;
        java.io.Writer writer1 = null;
        char[] charArray4 = new char[] {};
        int int5 = org.apache.commons.io.IOUtils.length(charArray4);
        java.io.Writer writer6 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray4, writer6);
        java.io.Writer writer8 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray4, writer8);
        long long10 = org.apache.commons.io.IOUtils.copyLarge(reader0, writer1, 0L, (long) (byte) 100, charArray4);
        java.io.Writer writer11 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray4, writer11);
        java.io.OutputStream outputStream13 = null;
        java.nio.charset.Charset charset14 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(charArray4, outputStream13, charset14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.OutputStream.write(byte[])\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
    }

    @Test
    public void test0713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0713");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.BufferedInputStream bufferedInputStream10 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.io.InputStream inputStream12 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, (int) (byte) 1);
        java.io.OutputStream outputStream13 = null;
        int int14 = org.apache.commons.io.IOUtils.copy(inputStream12, outputStream13);
        java.io.BufferedInputStream bufferedInputStream16 = org.apache.commons.io.IOUtils.buffer(inputStream12, (int) (byte) 10);
        org.apache.commons.io.function.IOConsumer<java.io.IOException> iOExceptionIOConsumer17 = null;
        org.apache.commons.io.IOUtils.close((java.io.Closeable) bufferedInputStream16, iOExceptionIOConsumer17);
        java.io.OutputStream outputStream19 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int20 = org.apache.commons.io.IOUtils.copy((java.io.InputStream) bufferedInputStream16, outputStream19);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Stream closed");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream10);
        org.junit.Assert.assertNotNull(inputStream12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(bufferedInputStream16);
    }

    @Test
    public void test0714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0714");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        java.io.OutputStream outputStream10 = null;
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream10, (long) (short) 0, (-1L));
        char[] charArray14 = org.apache.commons.io.IOUtils.toCharArray(inputStream1);
        java.io.OutputStream outputStream15 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(charArray14, outputStream15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.OutputStream.write(byte[])\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[]");
    }

    @Test
    public void test0715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0715");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream3 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream3, 3);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Unexpected read size. current: 0, expected: 3");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream3);
    }

    @Test
    public void test0716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0716");
        char[] charArray0 = new char[] {};
        int int1 = org.apache.commons.io.IOUtils.length(charArray0);
        int int2 = org.apache.commons.io.IOUtils.length(charArray0);
        java.io.OutputStream outputStream3 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(charArray0, outputStream3, "hi!");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: hi!");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray0);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray0), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray0), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
    }

    @Test
    public void test0717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0717");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray(inputStream1, (int) (short) 0);
        long long9 = org.apache.commons.io.IOUtils.skip(inputStream1, 100L);
        java.io.InputStream inputStream10 = null;
        java.io.InputStream inputStream11 = null;
        java.io.OutputStream outputStream12 = null;
        byte[] byteArray15 = new byte[] {};
        int int16 = org.apache.commons.io.IOUtils.length(byteArray15);
        java.io.OutputStream outputStream17 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray15, outputStream17);
        long long19 = org.apache.commons.io.IOUtils.copyLarge(inputStream11, outputStream12, 0L, (long) (byte) -1, byteArray15);
        java.io.OutputStream outputStream20 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray15, outputStream20);
        org.apache.commons.io.IOUtils.readFully(inputStream10, byteArray15);
        int int23 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray15);
        java.io.InputStream inputStream24 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1);
        java.io.OutputStream outputStream25 = null;
        int int26 = org.apache.commons.io.IOUtils.copy(inputStream24, outputStream25);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(inputStream24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
    }

    @Test
    public void test0718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0718");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.BufferedInputStream bufferedInputStream10 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.io.InputStream inputStream12 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, (int) (byte) 1);
        java.io.OutputStream outputStream13 = null;
        int int14 = org.apache.commons.io.IOUtils.copy(inputStream12, outputStream13);
        java.io.BufferedInputStream bufferedInputStream16 = org.apache.commons.io.IOUtils.buffer(inputStream12, (int) (byte) 10);
        java.io.BufferedInputStream bufferedInputStream18 = org.apache.commons.io.IOUtils.buffer(inputStream12, 1);
        java.io.OutputStream outputStream19 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long22 = org.apache.commons.io.IOUtils.copyLarge((java.io.InputStream) bufferedInputStream18, outputStream19, (long) 10, (long) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.io.EOFException; message: Bytes to skip: 10 actual: 0");
        } catch (java.io.EOFException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream10);
        org.junit.Assert.assertNotNull(inputStream12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(bufferedInputStream16);
        org.junit.Assert.assertNotNull(bufferedInputStream18);
    }

    @Test
    public void test0719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0719");
        java.io.InputStream inputStream0 = null;
        // The following exception was thrown during execution in test generation
        try {
            char[] charArray1 = org.apache.commons.io.IOUtils.toCharArray(inputStream0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0720");
        char[] charArray0 = new char[] {};
        int int1 = org.apache.commons.io.IOUtils.length(charArray0);
        java.io.Writer writer2 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray0, writer2);
        int int4 = org.apache.commons.io.IOUtils.length(charArray0);
        java.io.Writer writer5 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray0, writer5);
        java.io.OutputStream outputStream7 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(charArray0, outputStream7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.OutputStream.write(byte[])\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray0);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray0), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray0), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test0721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0721");
        java.io.InputStream inputStream0 = null;
        java.io.InputStream inputStream1 = null;
        java.io.OutputStream outputStream2 = null;
        byte[] byteArray5 = new byte[] {};
        int int6 = org.apache.commons.io.IOUtils.length(byteArray5);
        java.io.OutputStream outputStream7 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray5, outputStream7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, (long) (byte) -1, byteArray5);
        java.io.OutputStream outputStream10 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray5, outputStream10);
        org.apache.commons.io.IOUtils.readFully(inputStream0, byteArray5);
        java.io.Writer writer13 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(byteArray5, writer13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Writer.write(String)\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
    }

    @Test
    public void test0722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0722");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.io.InputStream inputStream7 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray8 = new byte[] {};
        int int9 = org.apache.commons.io.IOUtils.length(byteArray8);
        int int10 = org.apache.commons.io.IOUtils.read(inputStream7, byteArray8);
        byte[] byteArray11 = org.apache.commons.io.IOUtils.toByteArray(inputStream7);
        int int12 = org.apache.commons.io.IOUtils.length(byteArray11);
        org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray11);
        java.lang.String str14 = org.apache.commons.io.IOUtils.toString(inputStream1);
        java.io.OutputStream outputStream15 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long18 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream15, (long) '/', 1L);
            org.junit.Assert.fail("Expected exception of type java.io.EOFException; message: Bytes to skip: 47 actual: 0");
        } catch (java.io.EOFException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(inputStream7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
    }

    @Test
    public void test0723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0723");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream3 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1);
        java.io.Writer writer4 = null;
        java.nio.charset.Charset charset5 = null;
        org.apache.commons.io.IOUtils.copy(inputStream3, writer4, charset5);
        org.apache.commons.io.function.IOConsumer<java.io.IOException> iOExceptionIOConsumer7 = null;
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream3, iOExceptionIOConsumer7);
        java.io.Writer writer9 = null;
        java.nio.charset.Charset charset10 = null;
        org.apache.commons.io.IOUtils.copy(inputStream3, writer9, charset10);
        java.io.Writer writer12 = null;
        java.nio.charset.Charset charset13 = null;
        org.apache.commons.io.IOUtils.copy(inputStream3, writer12, charset13);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str16 = org.apache.commons.io.IOUtils.toString(inputStream3, "hi!");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: hi!");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream3);
    }

    @Test
    public void test0724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0724");
        java.nio.channels.ReadableByteChannel readableByteChannel0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.skipFully(readableByteChannel0, (long) 5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.nio.channels.ReadableByteChannel.read(java.nio.ByteBuffer)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0725");
        java.io.Writer writer0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.BufferedWriter bufferedWriter2 = org.apache.commons.io.IOUtils.buffer(writer0, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0726");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "hi!");
        java.io.Writer writer2 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.copy(inputStream1, writer2, "hi!");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: hi!");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
    }

    @Test
    public void test0727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0727");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream5 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray("");
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray10);
        long long12 = org.apache.commons.io.IOUtils.copyLarge(inputStream4, outputStream5, 0L, 0L, byteArray10);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, byteArray10);
        java.io.BufferedInputStream bufferedInputStream15 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.skipFully((java.io.InputStream) bufferedInputStream15, (long) 3);
            org.junit.Assert.fail("Expected exception of type java.io.EOFException; message: Bytes to skip: 3 actual: 0");
        } catch (java.io.EOFException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream15);
    }

    @Test
    public void test0728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0728");
        java.io.Reader reader0 = null;
        java.io.Writer writer1 = null;
        java.io.Reader reader4 = null;
        char[] charArray5 = new char[] {};
        int int6 = org.apache.commons.io.IOUtils.length(charArray5);
        int int7 = org.apache.commons.io.IOUtils.read(reader4, charArray5);
        // The following exception was thrown during execution in test generation
        try {
            long long8 = org.apache.commons.io.IOUtils.copyLarge(reader0, writer1, (long) '/', (long) (short) 10, charArray5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[], int, int)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test0729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0729");
        java.io.Reader reader0 = null;
        java.io.InputStream inputStream2 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream3 = null;
        java.io.InputStream inputStream6 = null;
        byte[] byteArray8 = org.apache.commons.io.IOUtils.toByteArray("");
        int int9 = org.apache.commons.io.IOUtils.read(inputStream6, byteArray8);
        long long10 = org.apache.commons.io.IOUtils.copyLarge(inputStream2, outputStream3, 0L, 0L, byteArray8);
        java.io.OutputStream outputStream11 = null;
        long long14 = org.apache.commons.io.IOUtils.copyLarge(inputStream2, outputStream11, (long) (short) 0, (-1L));
        char[] charArray15 = org.apache.commons.io.IOUtils.toCharArray(inputStream2);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.readFully(reader0, charArray15, (int) (byte) 1, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[], int, int)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream2);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[]");
    }

    @Test
    public void test0730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0730");
        java.nio.channels.ReadableByteChannel readableByteChannel0 = null;
        org.apache.commons.io.IOUtils.skipFully(readableByteChannel0, 0L);
    }

    @Test
    public void test0731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0731");
        java.io.Reader reader0 = null;
        char[] charArray1 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int4 = org.apache.commons.io.IOUtils.read(reader0, charArray1, (int) (short) -1, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[], int, int)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0732");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        java.io.Writer writer10 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer10);
        java.nio.charset.Charset charset12 = null;
        char[] charArray13 = org.apache.commons.io.IOUtils.toCharArray(inputStream1, charset12);
        java.io.OutputStream outputStream14 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(charArray13, outputStream14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.OutputStream.write(byte[])\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[]");
    }

    @Test
    public void test0733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0733");
        java.io.Reader reader0 = null;
        java.nio.charset.Charset charset2 = null;
        java.io.InputStream inputStream3 = org.apache.commons.io.IOUtils.toInputStream("", charset2);
        java.nio.charset.Charset charset4 = null;
        java.lang.String str5 = org.apache.commons.io.IOUtils.toString(inputStream3, charset4);
        java.nio.charset.Charset charset6 = null;
        char[] charArray7 = org.apache.commons.io.IOUtils.toCharArray(inputStream3, charset6);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.readFully(reader0, charArray7, (int) (byte) -1, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[], int, int)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[]");
    }

    @Test
    public void test0734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0734");
        java.io.Reader reader0 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long2 = org.apache.commons.io.IOUtils.skip(reader0, (long) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Skip count must be non-negative, actual: -1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0735");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.BufferedInputStream bufferedInputStream10 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.io.InputStream inputStream12 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, (int) (byte) 1);
        byte[] byteArray14 = org.apache.commons.io.IOUtils.toByteArray("hi!");
        // The following exception was thrown during execution in test generation
        try {
            int int17 = org.apache.commons.io.IOUtils.read(inputStream12, byteArray14, (int) ' ', (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Length must not be negative: -1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream10);
        org.junit.Assert.assertNotNull(inputStream12);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[104, 105, 33]");
    }

    @Test
    public void test0736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0736");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream5 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray("");
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray10);
        long long12 = org.apache.commons.io.IOUtils.copyLarge(inputStream4, outputStream5, 0L, 0L, byteArray10);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, byteArray10);
        java.io.BufferedInputStream bufferedInputStream15 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.skipFully(inputStream1, (long) 4);
            org.junit.Assert.fail("Expected exception of type java.io.EOFException; message: Bytes to skip: 4 actual: 0");
        } catch (java.io.EOFException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream15);
    }

    @Test
    public void test0737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0737");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream5 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray("");
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray10);
        long long12 = org.apache.commons.io.IOUtils.copyLarge(inputStream4, outputStream5, 0L, 0L, byteArray10);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, byteArray10);
        java.io.BufferedInputStream bufferedInputStream15 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.nio.charset.Charset charset16 = null;
        java.util.List<java.lang.String> strList17 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset16);
        java.io.OutputStream outputStream18 = null;
        long long21 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream18, 0L, (long) 0);
        java.io.OutputStream outputStream22 = null;
        long long25 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream22, (long) (short) -1, (long) 10);
        byte[] byteArray26 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.io.OutputStream outputStream27 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(byteArray26, outputStream27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.OutputStream.write(byte[])\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream15);
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
    }

    @Test
    public void test0738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0738");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        java.nio.charset.Charset charset10 = null;
        java.util.List<java.lang.String> strList11 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset10);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.nio.charset.Charset charset13 = null;
        java.lang.String str14 = org.apache.commons.io.IOUtils.toString(inputStream1, charset13);
        java.io.OutputStream outputStream15 = null;
        java.io.InputStream inputStream16 = null;
        java.io.OutputStream outputStream17 = null;
        byte[] byteArray20 = new byte[] {};
        int int21 = org.apache.commons.io.IOUtils.length(byteArray20);
        java.io.OutputStream outputStream22 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray20, outputStream22);
        long long24 = org.apache.commons.io.IOUtils.copyLarge(inputStream16, outputStream17, 0L, (long) (byte) -1, byteArray20);
        long long25 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream15, byteArray20);
        java.io.InputStream inputStream27 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray28 = new byte[] {};
        int int29 = org.apache.commons.io.IOUtils.length(byteArray28);
        int int30 = org.apache.commons.io.IOUtils.read(inputStream27, byteArray28);
        byte[] byteArray31 = org.apache.commons.io.IOUtils.toByteArray(inputStream27);
        byte[] byteArray33 = org.apache.commons.io.IOUtils.toByteArray(inputStream27, (int) (short) 0);
        long long35 = org.apache.commons.io.IOUtils.skip(inputStream27, 100L);
        java.io.InputStream inputStream37 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray38 = new byte[] {};
        int int39 = org.apache.commons.io.IOUtils.length(byteArray38);
        int int40 = org.apache.commons.io.IOUtils.read(inputStream37, byteArray38);
        byte[] byteArray41 = org.apache.commons.io.IOUtils.toByteArray(inputStream37);
        byte[] byteArray43 = org.apache.commons.io.IOUtils.toByteArray(inputStream37, (int) (short) 0);
        org.apache.commons.io.IOUtils.readFully(inputStream27, byteArray43);
        // The following exception was thrown during execution in test generation
        try {
            int int47 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray43, 100, (int) '\\');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Range [100, 100 + 92) out of bounds for length 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(inputStream27);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertNotNull(inputStream37);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
    }

    @Test
    public void test0739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0739");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream5 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray("");
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray10);
        long long12 = org.apache.commons.io.IOUtils.copyLarge(inputStream4, outputStream5, 0L, 0L, byteArray10);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, byteArray10);
        java.io.BufferedInputStream bufferedInputStream15 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.io.InputStream inputStream17 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray18 = org.apache.commons.io.IOUtils.toByteArray(inputStream17);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream17);
        java.io.InputStream inputStream21 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream22 = null;
        java.io.InputStream inputStream25 = null;
        byte[] byteArray27 = org.apache.commons.io.IOUtils.toByteArray("");
        int int28 = org.apache.commons.io.IOUtils.read(inputStream25, byteArray27);
        long long29 = org.apache.commons.io.IOUtils.copyLarge(inputStream21, outputStream22, 0L, 0L, byteArray27);
        java.nio.charset.Charset charset30 = null;
        java.util.List<java.lang.String> strList31 = org.apache.commons.io.IOUtils.readLines(inputStream21, charset30);
        java.io.InputStream inputStream33 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream34 = null;
        java.io.InputStream inputStream37 = null;
        byte[] byteArray39 = org.apache.commons.io.IOUtils.toByteArray("");
        int int40 = org.apache.commons.io.IOUtils.read(inputStream37, byteArray39);
        long long41 = org.apache.commons.io.IOUtils.copyLarge(inputStream33, outputStream34, 0L, 0L, byteArray39);
        java.nio.charset.Charset charset42 = null;
        java.util.List<java.lang.String> strList43 = org.apache.commons.io.IOUtils.readLines(inputStream33, charset42);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream33);
        boolean boolean45 = org.apache.commons.io.IOUtils.contentEquals(inputStream21, inputStream33);
        java.io.OutputStream outputStream46 = null;
        java.io.InputStream inputStream48 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream49 = null;
        java.io.InputStream inputStream52 = null;
        byte[] byteArray54 = org.apache.commons.io.IOUtils.toByteArray("");
        int int55 = org.apache.commons.io.IOUtils.read(inputStream52, byteArray54);
        long long56 = org.apache.commons.io.IOUtils.copyLarge(inputStream48, outputStream49, 0L, 0L, byteArray54);
        long long57 = org.apache.commons.io.IOUtils.copyLarge(inputStream33, outputStream46, byteArray54);
        org.apache.commons.io.IOUtils.readFully(inputStream17, byteArray54);
        org.apache.commons.io.IOUtils.readFully((java.io.InputStream) bufferedInputStream15, byteArray54);
        java.lang.String str60 = org.apache.commons.io.IOUtils.toString(byteArray54);
        java.io.OutputStream outputStream61 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(byteArray54, outputStream61);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.OutputStream.write(byte[])\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream15);
        org.junit.Assert.assertNotNull(inputStream17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(inputStream21);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNotNull(strList31);
        org.junit.Assert.assertNotNull(inputStream33);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertNotNull(strList43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(inputStream48);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
    }

    @Test
    public void test0740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0740");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        org.apache.commons.io.IOUtils.closeQuietly(inputStream1);
        java.io.InputStream inputStream7 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray8 = new byte[] {};
        int int9 = org.apache.commons.io.IOUtils.length(byteArray8);
        int int10 = org.apache.commons.io.IOUtils.read(inputStream7, byteArray8);
        java.lang.String str11 = org.apache.commons.io.IOUtils.toString(byteArray8);
        int int14 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray8, (int) (byte) 10, (int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.LineIterator lineIterator16 = org.apache.commons.io.IOUtils.lineIterator(inputStream1, "\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ?");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(inputStream7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test0741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0741");
        java.io.InputStream inputStream0 = null;
        java.io.OutputStream outputStream1 = null;
        byte[] byteArray4 = new byte[] {};
        int int5 = org.apache.commons.io.IOUtils.length(byteArray4);
        java.io.OutputStream outputStream6 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray4, outputStream6);
        long long8 = org.apache.commons.io.IOUtils.copyLarge(inputStream0, outputStream1, 0L, (long) (byte) -1, byteArray4);
        java.io.OutputStream outputStream9 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray4, outputStream9);
        int int11 = org.apache.commons.io.IOUtils.length(byteArray4);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str13 = org.apache.commons.io.IOUtils.toString(byteArray4, "\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ?");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test0742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0742");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream5 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray("");
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray10);
        long long12 = org.apache.commons.io.IOUtils.copyLarge(inputStream4, outputStream5, 0L, 0L, byteArray10);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, byteArray10);
        java.io.BufferedInputStream bufferedInputStream15 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        org.apache.commons.io.IOUtils.closeQuietly(inputStream1);
        java.nio.charset.Charset charset17 = null;
        java.util.List<java.lang.String> strList18 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset17);
        java.io.Writer writer20 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList18, "", writer20);
        java.io.OutputStream outputStream23 = null;
        java.nio.charset.Charset charset24 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList18, "hi!", outputStream23, charset24);
        java.io.OutputStream outputStream27 = null;
        java.nio.charset.Charset charset28 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList18, "\r\n", outputStream27, charset28);
        java.io.Writer writer31 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList18, "", writer31);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream15);
        org.junit.Assert.assertNotNull(strList18);
    }

    @Test
    public void test0743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0743");
        java.io.OutputStream outputStream1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write((java.lang.CharSequence) "\r\n", outputStream1, "\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ?");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0744");
        java.io.OutputStream outputStream1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write((java.lang.CharSequence) "\n", outputStream1, "hi!");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: hi!");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0745");
        java.io.Reader reader0 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long2 = org.apache.commons.io.IOUtils.skip(reader0, 1L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[], int, int)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0746");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.BufferedInputStream bufferedInputStream3 = org.apache.commons.io.IOUtils.buffer(inputStream1, 100);
        java.io.InputStream inputStream5 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "hi!");
        java.io.InputStream inputStream7 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray8 = new byte[] {};
        int int9 = org.apache.commons.io.IOUtils.length(byteArray8);
        int int10 = org.apache.commons.io.IOUtils.read(inputStream7, byteArray8);
        byte[] byteArray11 = org.apache.commons.io.IOUtils.toByteArray(inputStream7);
        byte[] byteArray13 = org.apache.commons.io.IOUtils.toByteArray(inputStream7, (int) (short) 0);
        java.io.BufferedInputStream bufferedInputStream14 = org.apache.commons.io.IOUtils.buffer(inputStream7);
        byte[] byteArray15 = org.apache.commons.io.IOUtils.toByteArray((java.io.InputStream) bufferedInputStream14);
        int int18 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray15, 0, 0);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.readFully((java.io.InputStream) bufferedInputStream3, byteArray15, (-1), (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Length must not be negative: -1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(bufferedInputStream3);
        org.junit.Assert.assertNotNull(inputStream5);
        org.junit.Assert.assertNotNull(inputStream7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream14);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test0747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0747");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        byte[] byteArray6 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray8 = org.apache.commons.io.IOUtils.readFully(inputStream1, 6);
            org.junit.Assert.fail("Expected exception of type java.io.EOFException; message: Length to read: 6 actual: 0");
        } catch (java.io.EOFException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
    }

    @Test
    public void test0748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0748");
        java.io.InputStream inputStream0 = null;
        java.io.Writer writer1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.copy(inputStream0, writer1, "hi!");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: hi!");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0749");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream3 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1);
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream3);
        java.io.BufferedInputStream bufferedInputStream6 = org.apache.commons.io.IOUtils.buffer(inputStream4, 3);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str8 = org.apache.commons.io.IOUtils.toString((java.io.InputStream) bufferedInputStream6, "\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ?");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream3);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(bufferedInputStream6);
    }

    @Test
    public void test0750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0750");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream3 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1);
        java.io.Writer writer4 = null;
        java.nio.charset.Charset charset5 = null;
        org.apache.commons.io.IOUtils.copy(inputStream3, writer4, charset5);
        org.apache.commons.io.function.IOConsumer<java.io.IOException> iOExceptionIOConsumer7 = null;
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream3, iOExceptionIOConsumer7);
        java.io.Writer writer9 = null;
        java.nio.charset.Charset charset10 = null;
        org.apache.commons.io.IOUtils.copy(inputStream3, writer9, charset10);
        java.io.Writer writer12 = null;
        org.apache.commons.io.IOUtils.copy(inputStream3, writer12);
        java.nio.charset.Charset charset14 = null;
        java.util.List<java.lang.String> strList15 = org.apache.commons.io.IOUtils.readLines(inputStream3, charset14);
        java.io.OutputStream outputStream17 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList15, "hi!", outputStream17);
        java.io.Writer writer20 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList15, "\n", writer20);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream3);
        org.junit.Assert.assertNotNull(strList15);
    }

    @Test
    public void test0751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0751");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.nio.charset.Charset charset4 = null;
        org.apache.commons.io.LineIterator lineIterator5 = org.apache.commons.io.IOUtils.lineIterator(inputStream1, charset4);
        java.lang.Class<?> wildcardClass6 = lineIterator5.getClass();
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(lineIterator5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0752");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream5 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray("");
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray10);
        long long12 = org.apache.commons.io.IOUtils.copyLarge(inputStream4, outputStream5, 0L, 0L, byteArray10);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, byteArray10);
        java.io.BufferedInputStream bufferedInputStream15 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        org.apache.commons.io.IOUtils.closeQuietly(inputStream1);
        java.nio.charset.Charset charset17 = null;
        java.util.List<java.lang.String> strList18 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset17);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.io.OutputStream outputStream20 = null;
        int int21 = org.apache.commons.io.IOUtils.copy(inputStream1, outputStream20);
        java.io.OutputStream outputStream22 = null;
        java.io.InputStream inputStream24 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream25 = null;
        java.io.InputStream inputStream27 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream28 = null;
        java.io.InputStream inputStream31 = null;
        byte[] byteArray33 = org.apache.commons.io.IOUtils.toByteArray("");
        int int34 = org.apache.commons.io.IOUtils.read(inputStream31, byteArray33);
        long long35 = org.apache.commons.io.IOUtils.copyLarge(inputStream27, outputStream28, 0L, 0L, byteArray33);
        long long36 = org.apache.commons.io.IOUtils.copyLarge(inputStream24, outputStream25, byteArray33);
        java.lang.String str37 = org.apache.commons.io.IOUtils.toString(byteArray33);
        long long38 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream22, byteArray33);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray40 = org.apache.commons.io.IOUtils.toByteArray(inputStream1, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Unexpected read size. current: 0, expected: 100");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream15);
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(inputStream24);
        org.junit.Assert.assertNotNull(inputStream27);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
    }

    @Test
    public void test0753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0753");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream5 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray("");
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray10);
        long long12 = org.apache.commons.io.IOUtils.copyLarge(inputStream4, outputStream5, 0L, 0L, byteArray10);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, byteArray10);
        java.io.BufferedInputStream bufferedInputStream15 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.io.InputStream inputStream17 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray18 = org.apache.commons.io.IOUtils.toByteArray(inputStream17);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream17);
        java.io.InputStream inputStream21 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream22 = null;
        java.io.InputStream inputStream25 = null;
        byte[] byteArray27 = org.apache.commons.io.IOUtils.toByteArray("");
        int int28 = org.apache.commons.io.IOUtils.read(inputStream25, byteArray27);
        long long29 = org.apache.commons.io.IOUtils.copyLarge(inputStream21, outputStream22, 0L, 0L, byteArray27);
        java.nio.charset.Charset charset30 = null;
        java.util.List<java.lang.String> strList31 = org.apache.commons.io.IOUtils.readLines(inputStream21, charset30);
        java.io.InputStream inputStream33 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream34 = null;
        java.io.InputStream inputStream37 = null;
        byte[] byteArray39 = org.apache.commons.io.IOUtils.toByteArray("");
        int int40 = org.apache.commons.io.IOUtils.read(inputStream37, byteArray39);
        long long41 = org.apache.commons.io.IOUtils.copyLarge(inputStream33, outputStream34, 0L, 0L, byteArray39);
        java.nio.charset.Charset charset42 = null;
        java.util.List<java.lang.String> strList43 = org.apache.commons.io.IOUtils.readLines(inputStream33, charset42);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream33);
        boolean boolean45 = org.apache.commons.io.IOUtils.contentEquals(inputStream21, inputStream33);
        java.io.OutputStream outputStream46 = null;
        java.io.InputStream inputStream48 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream49 = null;
        java.io.InputStream inputStream52 = null;
        byte[] byteArray54 = org.apache.commons.io.IOUtils.toByteArray("");
        int int55 = org.apache.commons.io.IOUtils.read(inputStream52, byteArray54);
        long long56 = org.apache.commons.io.IOUtils.copyLarge(inputStream48, outputStream49, 0L, 0L, byteArray54);
        long long57 = org.apache.commons.io.IOUtils.copyLarge(inputStream33, outputStream46, byteArray54);
        org.apache.commons.io.IOUtils.readFully(inputStream17, byteArray54);
        org.apache.commons.io.IOUtils.readFully((java.io.InputStream) bufferedInputStream15, byteArray54);
        java.io.Writer writer60 = null;
        java.nio.charset.Charset charset61 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(byteArray54, writer60, charset61);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Writer.write(String)\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream15);
        org.junit.Assert.assertNotNull(inputStream17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(inputStream21);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNotNull(strList31);
        org.junit.Assert.assertNotNull(inputStream33);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertNotNull(strList43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(inputStream48);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
    }

    @Test
    public void test0754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0754");
        java.io.Reader reader0 = null;
        java.io.Writer writer1 = null;
        char[] charArray4 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long5 = org.apache.commons.io.IOUtils.copyLarge(reader0, writer1, (long) (byte) 1, (long) 0, charArray4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[], int, int)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0755");
        java.nio.charset.Charset charset1 = null;
        java.io.InputStream inputStream2 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "", charset1);
        java.util.List<java.lang.String> strList3 = org.apache.commons.io.IOUtils.readLines(inputStream2);
        java.io.InputStream inputStream5 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray6 = new byte[] {};
        int int7 = org.apache.commons.io.IOUtils.length(byteArray6);
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray6);
        byte[] byteArray9 = org.apache.commons.io.IOUtils.toByteArray(inputStream5);
        int int10 = org.apache.commons.io.IOUtils.length(byteArray9);
        org.apache.commons.io.IOUtils.readFully(inputStream2, byteArray9);
        java.io.Writer writer12 = null;
        java.nio.charset.Charset charset13 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(byteArray9, writer12, charset13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Writer.write(String)\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream2);
        org.junit.Assert.assertNotNull(strList3);
        org.junit.Assert.assertNotNull(inputStream5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test0756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0756");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray(inputStream1, (int) (short) 0);
        long long9 = org.apache.commons.io.IOUtils.skip(inputStream1, 100L);
        java.io.InputStream inputStream10 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.skipFully(inputStream10, (long) 100);
            org.junit.Assert.fail("Expected exception of type java.io.EOFException; message: Bytes to skip: 100 actual: 0");
        } catch (java.io.EOFException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(inputStream10);
    }

    @Test
    public void test0757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0757");
        java.io.Reader reader0 = null;
        java.io.Reader reader1 = null;
        java.io.Reader reader2 = null;
        java.io.Reader reader3 = null;
        java.io.Writer writer4 = null;
        char[] charArray7 = new char[] {};
        int int8 = org.apache.commons.io.IOUtils.length(charArray7);
        java.io.Writer writer9 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray7, writer9);
        java.io.Writer writer11 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray7, writer11);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(reader3, writer4, 0L, (long) (byte) 100, charArray7);
        int int14 = org.apache.commons.io.IOUtils.read(reader2, charArray7);
        int int15 = org.apache.commons.io.IOUtils.length(charArray7);
        int int16 = org.apache.commons.io.IOUtils.read(reader1, charArray7);
        int int17 = org.apache.commons.io.IOUtils.read(reader0, charArray7);
        java.io.OutputStream outputStream18 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(charArray7, outputStream18, "");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test0758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0758");
        char[] charArray0 = new char[] {};
        int int1 = org.apache.commons.io.IOUtils.length(charArray0);
        int int2 = org.apache.commons.io.IOUtils.length(charArray0);
        java.io.OutputStream outputStream3 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(charArray0, outputStream3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.OutputStream.write(byte[])\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray0);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray0), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray0), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
    }

    @Test
    public void test0759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0759");
        java.io.Reader reader0 = null;
        java.io.Writer writer1 = null;
        char[] charArray4 = new char[] {};
        int int5 = org.apache.commons.io.IOUtils.length(charArray4);
        java.io.Writer writer6 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray4, writer6);
        java.io.Writer writer8 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray4, writer8);
        long long10 = org.apache.commons.io.IOUtils.copyLarge(reader0, writer1, 0L, (long) (byte) 100, charArray4);
        java.io.Writer writer11 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray4, writer11);
        java.io.OutputStream outputStream13 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(charArray4, outputStream13, "\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ?");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
    }

    @Test
    public void test0760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0760");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray(inputStream1, (int) (short) 0);
        java.io.BufferedInputStream bufferedInputStream8 = org.apache.commons.io.IOUtils.buffer(inputStream1);
        java.io.InputStream inputStream9 = org.apache.commons.io.IOUtils.toBufferedInputStream((java.io.InputStream) bufferedInputStream8);
        java.io.OutputStream outputStream10 = null;
        long long12 = org.apache.commons.io.IOUtils.copy(inputStream9, outputStream10, 1);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream8);
        org.junit.Assert.assertNotNull(inputStream9);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
    }

    @Test
    public void test0761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0761");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray(inputStream1, (int) (short) 0);
        long long9 = org.apache.commons.io.IOUtils.skip(inputStream1, 100L);
        java.io.InputStream inputStream10 = null;
        java.io.InputStream inputStream11 = null;
        java.io.OutputStream outputStream12 = null;
        byte[] byteArray15 = new byte[] {};
        int int16 = org.apache.commons.io.IOUtils.length(byteArray15);
        java.io.OutputStream outputStream17 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray15, outputStream17);
        long long19 = org.apache.commons.io.IOUtils.copyLarge(inputStream11, outputStream12, 0L, (long) (byte) -1, byteArray15);
        java.io.OutputStream outputStream20 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray15, outputStream20);
        org.apache.commons.io.IOUtils.readFully(inputStream10, byteArray15);
        int int23 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray15);
        java.io.Writer writer24 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(byteArray15, writer24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Writer.write(String)\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
    }

    @Test
    public void test0762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0762");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream5 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray("");
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray10);
        long long12 = org.apache.commons.io.IOUtils.copyLarge(inputStream4, outputStream5, 0L, 0L, byteArray10);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, byteArray10);
        java.io.BufferedInputStream bufferedInputStream15 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        org.apache.commons.io.IOUtils.closeQuietly(inputStream1);
        java.nio.charset.Charset charset17 = null;
        java.util.List<java.lang.String> strList18 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset17);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.io.OutputStream outputStream20 = null;
        int int21 = org.apache.commons.io.IOUtils.copy(inputStream1, outputStream20);
        java.io.InputStream inputStream23 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray24 = new byte[] {};
        int int25 = org.apache.commons.io.IOUtils.length(byteArray24);
        int int26 = org.apache.commons.io.IOUtils.read(inputStream23, byteArray24);
        byte[] byteArray27 = org.apache.commons.io.IOUtils.toByteArray(inputStream23);
        byte[] byteArray29 = org.apache.commons.io.IOUtils.toByteArray(inputStream23, (int) (short) 0);
        byte[] byteArray30 = new byte[] {};
        int int31 = org.apache.commons.io.IOUtils.length(byteArray30);
        org.apache.commons.io.IOUtils.readFully(inputStream23, byteArray30);
        int int33 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray30);
        java.lang.String str34 = org.apache.commons.io.IOUtils.toString(byteArray30);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str36 = org.apache.commons.io.IOUtils.toString(byteArray30, "\r\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ??");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream15);
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(inputStream23);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
    }

    @Test
    public void test0763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0763");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        org.apache.commons.io.IOUtils.closeQuietly(inputStream1);
        java.io.InputStream inputStream7 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray8 = new byte[] {};
        int int9 = org.apache.commons.io.IOUtils.length(byteArray8);
        int int10 = org.apache.commons.io.IOUtils.read(inputStream7, byteArray8);
        java.lang.String str11 = org.apache.commons.io.IOUtils.toString(byteArray8);
        int int14 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray8, (int) (byte) 10, (int) (short) 0);
        char[] charArray15 = org.apache.commons.io.IOUtils.toCharArray(inputStream1);
        java.io.OutputStream outputStream16 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(charArray15, outputStream16, "\r\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ??");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(inputStream7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[]");
    }

    @Test
    public void test0764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0764");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        java.io.InputStream inputStream6 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray7 = new byte[] {};
        int int8 = org.apache.commons.io.IOUtils.length(byteArray7);
        int int9 = org.apache.commons.io.IOUtils.read(inputStream6, byteArray7);
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray(inputStream6);
        byte[] byteArray12 = org.apache.commons.io.IOUtils.toByteArray(inputStream6, (int) (short) 0);
        int int13 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray12);
        java.io.OutputStream outputStream14 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray12, outputStream14);
        java.io.Writer writer16 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(byteArray12, writer16, "\r\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ??");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(inputStream6);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test0765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0765");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.BufferedInputStream bufferedInputStream10 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.io.InputStream inputStream12 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, (int) (byte) 1);
        java.nio.charset.Charset charset13 = null;
        char[] charArray14 = org.apache.commons.io.IOUtils.toCharArray(inputStream1, charset13);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream17 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray18 = new byte[] {};
        int int19 = org.apache.commons.io.IOUtils.length(byteArray18);
        int int20 = org.apache.commons.io.IOUtils.read(inputStream17, byteArray18);
        byte[] byteArray21 = org.apache.commons.io.IOUtils.toByteArray(inputStream17);
        byte[] byteArray23 = org.apache.commons.io.IOUtils.toByteArray(inputStream17, (int) (short) 0);
        byte[] byteArray24 = new byte[] {};
        int int25 = org.apache.commons.io.IOUtils.length(byteArray24);
        org.apache.commons.io.IOUtils.readFully(inputStream17, byteArray24);
        java.lang.String str27 = org.apache.commons.io.IOUtils.toString(byteArray24);
        int int28 = org.apache.commons.io.IOUtils.length(byteArray24);
        org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray24);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.String> strList31 = org.apache.commons.io.IOUtils.readLines(inputStream1, "\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ?");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream10);
        org.junit.Assert.assertNotNull(inputStream12);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[]");
        org.junit.Assert.assertNotNull(inputStream17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
    }

    @Test
    public void test0766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0766");
        java.nio.charset.Charset charset1 = null;
        java.io.InputStream inputStream2 = org.apache.commons.io.IOUtils.toInputStream("", charset1);
        java.nio.charset.Charset charset3 = null;
        java.lang.String str4 = org.apache.commons.io.IOUtils.toString(inputStream2, charset3);
        java.nio.charset.Charset charset5 = null;
        char[] charArray6 = org.apache.commons.io.IOUtils.toCharArray(inputStream2, charset5);
        java.io.OutputStream outputStream7 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(charArray6, outputStream7, "\r\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ??");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[]");
    }

    @Test
    public void test0767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0767");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        java.nio.charset.Charset charset10 = null;
        java.util.List<java.lang.String> strList11 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset10);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.nio.charset.Charset charset13 = null;
        java.lang.String str14 = org.apache.commons.io.IOUtils.toString(inputStream1, charset13);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer15 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer15);
        java.nio.charset.Charset charset17 = null;
        org.apache.commons.io.LineIterator lineIterator18 = org.apache.commons.io.IOUtils.lineIterator(inputStream1, charset17);
        java.io.OutputStream outputStream19 = null;
        int int20 = org.apache.commons.io.IOUtils.copy(inputStream1, outputStream19);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer21 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer21);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(lineIterator18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    }

    @Test
    public void test0768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0768");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.BufferedInputStream bufferedInputStream10 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.io.InputStream inputStream12 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, (int) (byte) 1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer13 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer13);
        java.io.OutputStream outputStream15 = null;
        java.io.InputStream inputStream17 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray18 = new byte[] {};
        int int19 = org.apache.commons.io.IOUtils.length(byteArray18);
        int int20 = org.apache.commons.io.IOUtils.read(inputStream17, byteArray18);
        byte[] byteArray21 = org.apache.commons.io.IOUtils.toByteArray(inputStream17);
        java.io.InputStream inputStream23 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray24 = new byte[] {};
        int int25 = org.apache.commons.io.IOUtils.length(byteArray24);
        int int26 = org.apache.commons.io.IOUtils.read(inputStream23, byteArray24);
        byte[] byteArray27 = org.apache.commons.io.IOUtils.toByteArray(inputStream23);
        int int28 = org.apache.commons.io.IOUtils.length(byteArray27);
        org.apache.commons.io.IOUtils.readFully(inputStream17, byteArray27);
        long long30 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream15, byteArray27);
        java.nio.charset.Charset charset31 = null;
        java.lang.String str32 = org.apache.commons.io.IOUtils.toString(inputStream1, charset31);
        java.io.Writer writer33 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.copy(inputStream1, writer33, "\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ?");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream10);
        org.junit.Assert.assertNotNull(inputStream12);
        org.junit.Assert.assertNotNull(inputStream17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertNotNull(inputStream23);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
    }

    @Test
    public void test0769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0769");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray(inputStream1, (int) (short) 0);
        java.lang.String str8 = org.apache.commons.io.IOUtils.toString(inputStream1);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
    }

    @Test
    public void test0770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0770");
        java.io.Reader reader0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.BufferedReader bufferedReader2 = org.apache.commons.io.IOUtils.toBufferedReader(reader0, 3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0771");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.util.List<java.lang.String> strList4 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.OutputStream outputStream5 = null;
        long long6 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream5);
        java.io.Writer writer7 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer7);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream11 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray12 = new byte[] {};
        int int13 = org.apache.commons.io.IOUtils.length(byteArray12);
        int int14 = org.apache.commons.io.IOUtils.read(inputStream11, byteArray12);
        byte[] byteArray15 = org.apache.commons.io.IOUtils.toByteArray(inputStream11);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer16 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream11, iOExceptionConsumer16);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream11);
        java.io.BufferedInputStream bufferedInputStream20 = org.apache.commons.io.IOUtils.buffer(inputStream11, (int) (byte) 10);
        java.io.InputStream inputStream22 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream11, (int) (byte) 1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer23 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream11, iOExceptionConsumer23);
        java.io.OutputStream outputStream25 = null;
        java.io.InputStream inputStream27 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray28 = new byte[] {};
        int int29 = org.apache.commons.io.IOUtils.length(byteArray28);
        int int30 = org.apache.commons.io.IOUtils.read(inputStream27, byteArray28);
        byte[] byteArray31 = org.apache.commons.io.IOUtils.toByteArray(inputStream27);
        java.io.InputStream inputStream33 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray34 = new byte[] {};
        int int35 = org.apache.commons.io.IOUtils.length(byteArray34);
        int int36 = org.apache.commons.io.IOUtils.read(inputStream33, byteArray34);
        byte[] byteArray37 = org.apache.commons.io.IOUtils.toByteArray(inputStream33);
        int int38 = org.apache.commons.io.IOUtils.length(byteArray37);
        org.apache.commons.io.IOUtils.readFully(inputStream27, byteArray37);
        long long40 = org.apache.commons.io.IOUtils.copyLarge(inputStream11, outputStream25, byteArray37);
        boolean boolean41 = org.apache.commons.io.IOUtils.contentEquals(inputStream1, inputStream11);
        java.io.BufferedInputStream bufferedInputStream43 = org.apache.commons.io.IOUtils.buffer(inputStream1, 5);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer44 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) bufferedInputStream43, iOExceptionConsumer44);
        java.nio.charset.Charset charset46 = null;
        // The following exception was thrown during execution in test generation
        try {
            char[] charArray47 = org.apache.commons.io.IOUtils.toCharArray((java.io.InputStream) bufferedInputStream43, charset46);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Stream closed");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(inputStream11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream20);
        org.junit.Assert.assertNotNull(inputStream22);
        org.junit.Assert.assertNotNull(inputStream27);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(inputStream33);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(bufferedInputStream43);
    }

    @Test
    public void test0772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0772");
        // The following exception was thrown during execution in test generation
        try {
            java.io.InputStream inputStream2 = org.apache.commons.io.IOUtils.toInputStream("\r\n", "hi!");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: hi!");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0773");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream5 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray("");
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray10);
        long long12 = org.apache.commons.io.IOUtils.copyLarge(inputStream4, outputStream5, 0L, 0L, byteArray10);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, byteArray10);
        java.io.BufferedInputStream bufferedInputStream15 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.nio.charset.Charset charset16 = null;
        java.util.List<java.lang.String> strList17 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset16);
        java.io.OutputStream outputStream18 = null;
        long long21 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream18, 0L, (long) 0);
        java.io.BufferedInputStream bufferedInputStream22 = org.apache.commons.io.IOUtils.buffer(inputStream1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.String> strList24 = org.apache.commons.io.IOUtils.readLines((java.io.InputStream) bufferedInputStream22, "\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ?");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream15);
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream22);
    }

    @Test
    public void test0774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0774");
        java.io.OutputStream outputStream0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.BufferedOutputStream bufferedOutputStream2 = org.apache.commons.io.IOUtils.buffer(outputStream0, 4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: outputStream");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0775");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream5 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray("");
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray10);
        long long12 = org.apache.commons.io.IOUtils.copyLarge(inputStream4, outputStream5, 0L, 0L, byteArray10);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, byteArray10);
        long long15 = org.apache.commons.io.IOUtils.skip(inputStream1, (long) 'a');
        java.io.InputStream inputStream17 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray18 = new byte[] {};
        int int19 = org.apache.commons.io.IOUtils.length(byteArray18);
        int int20 = org.apache.commons.io.IOUtils.read(inputStream17, byteArray18);
        byte[] byteArray21 = org.apache.commons.io.IOUtils.toByteArray(inputStream17);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer22 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream17, iOExceptionConsumer22);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream17);
        java.io.BufferedInputStream bufferedInputStream26 = org.apache.commons.io.IOUtils.buffer(inputStream17, (int) (byte) 10);
        java.io.InputStream inputStream28 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream17, (int) (byte) 1);
        java.io.OutputStream outputStream29 = null;
        int int30 = org.apache.commons.io.IOUtils.copy(inputStream28, outputStream29);
        java.io.BufferedInputStream bufferedInputStream32 = org.apache.commons.io.IOUtils.buffer(inputStream28, (int) (byte) 10);
        byte[] byteArray34 = org.apache.commons.io.IOUtils.toByteArray(inputStream28, 0);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray34, (int) (byte) 0, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Range [0, 0 + 1) out of bounds for length 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(inputStream17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream26);
        org.junit.Assert.assertNotNull(inputStream28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(bufferedInputStream32);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
    }

    @Test
    public void test0776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0776");
        java.nio.channels.ReadableByteChannel readableByteChannel0 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long2 = org.apache.commons.io.IOUtils.skip(readableByteChannel0, (long) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.nio.channels.ReadableByteChannel.read(java.nio.ByteBuffer)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0777");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        java.io.Writer writer10 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer10);
        java.util.List<java.lang.String> strList12 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.InputStream inputStream13 = null;
        java.io.OutputStream outputStream14 = null;
        byte[] byteArray17 = new byte[] {};
        int int18 = org.apache.commons.io.IOUtils.length(byteArray17);
        java.io.OutputStream outputStream19 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray17, outputStream19);
        long long21 = org.apache.commons.io.IOUtils.copyLarge(inputStream13, outputStream14, 0L, (long) (byte) -1, byteArray17);
        java.io.OutputStream outputStream22 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray17, outputStream22);
        int int24 = org.apache.commons.io.IOUtils.length(byteArray17);
        java.io.OutputStream outputStream25 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray17, outputStream25);
        int int27 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray17);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str29 = org.apache.commons.io.IOUtils.toString(byteArray17, "hi!");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: hi!");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(strList12);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
    }

    @Test
    public void test0778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0778");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.BufferedInputStream bufferedInputStream10 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        org.apache.commons.io.function.IOConsumer<java.io.IOException> iOExceptionIOConsumer11 = null;
        org.apache.commons.io.IOUtils.close((java.io.Closeable) bufferedInputStream10, iOExceptionIOConsumer11);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) bufferedInputStream10);
        org.apache.commons.io.IOUtils.skipFully((java.io.InputStream) bufferedInputStream10, (long) (short) 0);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer16 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) bufferedInputStream10, iOExceptionConsumer16);
        java.nio.charset.Charset charset18 = null;
        // The following exception was thrown during execution in test generation
        try {
            char[] charArray19 = org.apache.commons.io.IOUtils.toCharArray((java.io.InputStream) bufferedInputStream10, charset18);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Stream closed");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream10);
    }

    @Test
    public void test0779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0779");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        java.io.OutputStream outputStream5 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(byteArray2, outputStream5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.OutputStream.write(byte[])\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test0780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0780");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.util.List<java.lang.String> strList4 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.OutputStream outputStream6 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList4, "\n", outputStream6);
        java.io.Writer writer9 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList4, "hi!", writer9);
        java.io.OutputStream outputStream12 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList4, "\r\n", outputStream12, "\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ?");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(strList4);
    }

    @Test
    public void test0781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0781");
        java.io.Reader reader0 = null;
        java.io.Writer writer1 = null;
        char[] charArray5 = new char[] { 'a', '\\', '4' };
        int int6 = org.apache.commons.io.IOUtils.length(charArray5);
        // The following exception was thrown during execution in test generation
        try {
            long long7 = org.apache.commons.io.IOUtils.copyLarge(reader0, writer1, charArray5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[])\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "a\\4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "a\\4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[a, \\, 4]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
    }

    @Test
    public void test0782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0782");
        java.nio.charset.Charset charset1 = null;
        java.io.InputStream inputStream2 = org.apache.commons.io.IOUtils.toInputStream("", charset1);
        java.nio.charset.Charset charset3 = null;
        java.lang.String str4 = org.apache.commons.io.IOUtils.toString(inputStream2, charset3);
        java.nio.charset.Charset charset5 = null;
        char[] charArray6 = org.apache.commons.io.IOUtils.toCharArray(inputStream2, charset5);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray8 = org.apache.commons.io.IOUtils.toByteArray(inputStream2, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Size must be equal or greater than zero: -1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[]");
    }

    @Test
    public void test0783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0783");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.util.List<java.lang.String> strList4 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.OutputStream outputStream5 = null;
        long long6 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream5);
        java.io.Writer writer7 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer7);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream11 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray12 = new byte[] {};
        int int13 = org.apache.commons.io.IOUtils.length(byteArray12);
        int int14 = org.apache.commons.io.IOUtils.read(inputStream11, byteArray12);
        byte[] byteArray15 = org.apache.commons.io.IOUtils.toByteArray(inputStream11);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer16 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream11, iOExceptionConsumer16);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream11);
        java.io.BufferedInputStream bufferedInputStream20 = org.apache.commons.io.IOUtils.buffer(inputStream11, (int) (byte) 10);
        java.io.InputStream inputStream22 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream11, (int) (byte) 1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer23 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream11, iOExceptionConsumer23);
        java.io.OutputStream outputStream25 = null;
        java.io.InputStream inputStream27 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray28 = new byte[] {};
        int int29 = org.apache.commons.io.IOUtils.length(byteArray28);
        int int30 = org.apache.commons.io.IOUtils.read(inputStream27, byteArray28);
        byte[] byteArray31 = org.apache.commons.io.IOUtils.toByteArray(inputStream27);
        java.io.InputStream inputStream33 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray34 = new byte[] {};
        int int35 = org.apache.commons.io.IOUtils.length(byteArray34);
        int int36 = org.apache.commons.io.IOUtils.read(inputStream33, byteArray34);
        byte[] byteArray37 = org.apache.commons.io.IOUtils.toByteArray(inputStream33);
        int int38 = org.apache.commons.io.IOUtils.length(byteArray37);
        org.apache.commons.io.IOUtils.readFully(inputStream27, byteArray37);
        long long40 = org.apache.commons.io.IOUtils.copyLarge(inputStream11, outputStream25, byteArray37);
        boolean boolean41 = org.apache.commons.io.IOUtils.contentEquals(inputStream1, inputStream11);
        java.io.BufferedInputStream bufferedInputStream42 = org.apache.commons.io.IOUtils.buffer(inputStream1);
        java.io.InputStream inputStream44 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray45 = org.apache.commons.io.IOUtils.toByteArray(inputStream44);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream44);
        java.io.InputStream inputStream48 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream49 = null;
        java.io.InputStream inputStream52 = null;
        byte[] byteArray54 = org.apache.commons.io.IOUtils.toByteArray("");
        int int55 = org.apache.commons.io.IOUtils.read(inputStream52, byteArray54);
        long long56 = org.apache.commons.io.IOUtils.copyLarge(inputStream48, outputStream49, 0L, 0L, byteArray54);
        java.nio.charset.Charset charset57 = null;
        java.util.List<java.lang.String> strList58 = org.apache.commons.io.IOUtils.readLines(inputStream48, charset57);
        java.io.InputStream inputStream60 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream61 = null;
        java.io.InputStream inputStream64 = null;
        byte[] byteArray66 = org.apache.commons.io.IOUtils.toByteArray("");
        int int67 = org.apache.commons.io.IOUtils.read(inputStream64, byteArray66);
        long long68 = org.apache.commons.io.IOUtils.copyLarge(inputStream60, outputStream61, 0L, 0L, byteArray66);
        java.nio.charset.Charset charset69 = null;
        java.util.List<java.lang.String> strList70 = org.apache.commons.io.IOUtils.readLines(inputStream60, charset69);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream60);
        boolean boolean72 = org.apache.commons.io.IOUtils.contentEquals(inputStream48, inputStream60);
        java.io.OutputStream outputStream73 = null;
        java.io.InputStream inputStream75 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream76 = null;
        java.io.InputStream inputStream79 = null;
        byte[] byteArray81 = org.apache.commons.io.IOUtils.toByteArray("");
        int int82 = org.apache.commons.io.IOUtils.read(inputStream79, byteArray81);
        long long83 = org.apache.commons.io.IOUtils.copyLarge(inputStream75, outputStream76, 0L, 0L, byteArray81);
        long long84 = org.apache.commons.io.IOUtils.copyLarge(inputStream60, outputStream73, byteArray81);
        org.apache.commons.io.IOUtils.readFully(inputStream44, byteArray81);
        java.io.OutputStream outputStream86 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray81, outputStream86);
        int int88 = org.apache.commons.io.IOUtils.length(byteArray81);
        int int89 = org.apache.commons.io.IOUtils.read((java.io.InputStream) bufferedInputStream42, byteArray81);
        int int90 = org.apache.commons.io.IOUtils.length(byteArray81);
        int int91 = org.apache.commons.io.IOUtils.length(byteArray81);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(inputStream11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream20);
        org.junit.Assert.assertNotNull(inputStream22);
        org.junit.Assert.assertNotNull(inputStream27);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(inputStream33);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(bufferedInputStream42);
        org.junit.Assert.assertNotNull(inputStream44);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
        org.junit.Assert.assertNotNull(inputStream48);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertNotNull(strList58);
        org.junit.Assert.assertNotNull(inputStream60);
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 0L + "'", long68 == 0L);
        org.junit.Assert.assertNotNull(strList70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(inputStream75);
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 0L + "'", long83 == 0L);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 0L + "'", long84 == 0L);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
    }

    @Test
    public void test0784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0784");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream5 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray("");
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray10);
        long long12 = org.apache.commons.io.IOUtils.copyLarge(inputStream4, outputStream5, 0L, 0L, byteArray10);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, byteArray10);
        java.io.BufferedInputStream bufferedInputStream15 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.nio.charset.Charset charset16 = null;
        java.util.List<java.lang.String> strList17 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset16);
        java.io.OutputStream outputStream18 = null;
        long long21 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream18, 0L, (long) 0);
        java.io.BufferedInputStream bufferedInputStream22 = org.apache.commons.io.IOUtils.buffer(inputStream1);
        java.io.BufferedInputStream bufferedInputStream23 = org.apache.commons.io.IOUtils.buffer(inputStream1);
        java.io.OutputStream outputStream24 = null;
        java.io.InputStream inputStream28 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream29 = null;
        java.io.InputStream inputStream31 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream32 = null;
        java.io.InputStream inputStream35 = null;
        byte[] byteArray37 = org.apache.commons.io.IOUtils.toByteArray("");
        int int38 = org.apache.commons.io.IOUtils.read(inputStream35, byteArray37);
        long long39 = org.apache.commons.io.IOUtils.copyLarge(inputStream31, outputStream32, 0L, 0L, byteArray37);
        long long40 = org.apache.commons.io.IOUtils.copyLarge(inputStream28, outputStream29, byteArray37);
        java.io.BufferedInputStream bufferedInputStream42 = org.apache.commons.io.IOUtils.buffer(inputStream28, (int) (byte) 10);
        java.io.InputStream inputStream44 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray45 = org.apache.commons.io.IOUtils.toByteArray(inputStream44);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream44);
        java.io.InputStream inputStream48 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream49 = null;
        java.io.InputStream inputStream52 = null;
        byte[] byteArray54 = org.apache.commons.io.IOUtils.toByteArray("");
        int int55 = org.apache.commons.io.IOUtils.read(inputStream52, byteArray54);
        long long56 = org.apache.commons.io.IOUtils.copyLarge(inputStream48, outputStream49, 0L, 0L, byteArray54);
        java.nio.charset.Charset charset57 = null;
        java.util.List<java.lang.String> strList58 = org.apache.commons.io.IOUtils.readLines(inputStream48, charset57);
        java.io.InputStream inputStream60 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream61 = null;
        java.io.InputStream inputStream64 = null;
        byte[] byteArray66 = org.apache.commons.io.IOUtils.toByteArray("");
        int int67 = org.apache.commons.io.IOUtils.read(inputStream64, byteArray66);
        long long68 = org.apache.commons.io.IOUtils.copyLarge(inputStream60, outputStream61, 0L, 0L, byteArray66);
        java.nio.charset.Charset charset69 = null;
        java.util.List<java.lang.String> strList70 = org.apache.commons.io.IOUtils.readLines(inputStream60, charset69);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream60);
        boolean boolean72 = org.apache.commons.io.IOUtils.contentEquals(inputStream48, inputStream60);
        java.io.OutputStream outputStream73 = null;
        java.io.InputStream inputStream75 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream76 = null;
        java.io.InputStream inputStream79 = null;
        byte[] byteArray81 = org.apache.commons.io.IOUtils.toByteArray("");
        int int82 = org.apache.commons.io.IOUtils.read(inputStream79, byteArray81);
        long long83 = org.apache.commons.io.IOUtils.copyLarge(inputStream75, outputStream76, 0L, 0L, byteArray81);
        long long84 = org.apache.commons.io.IOUtils.copyLarge(inputStream60, outputStream73, byteArray81);
        org.apache.commons.io.IOUtils.readFully(inputStream44, byteArray81);
        org.apache.commons.io.IOUtils.readFully(inputStream28, byteArray81);
        int int87 = org.apache.commons.io.IOUtils.length(byteArray81);
        // The following exception was thrown during execution in test generation
        try {
            long long88 = org.apache.commons.io.IOUtils.copyLarge((java.io.InputStream) bufferedInputStream23, outputStream24, (long) 10, (long) 3, byteArray81);
            org.junit.Assert.fail("Expected exception of type java.io.EOFException; message: Bytes to skip: 10 actual: 0");
        } catch (java.io.EOFException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream15);
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream22);
        org.junit.Assert.assertNotNull(bufferedInputStream23);
        org.junit.Assert.assertNotNull(inputStream28);
        org.junit.Assert.assertNotNull(inputStream31);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream42);
        org.junit.Assert.assertNotNull(inputStream44);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
        org.junit.Assert.assertNotNull(inputStream48);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertNotNull(strList58);
        org.junit.Assert.assertNotNull(inputStream60);
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 0L + "'", long68 == 0L);
        org.junit.Assert.assertNotNull(strList70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(inputStream75);
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 0L + "'", long83 == 0L);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 0L + "'", long84 == 0L);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
    }

    @Test
    public void test0785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0785");
        // The following exception was thrown during execution in test generation
        try {
            java.io.InputStream inputStream2 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "\r\n", "\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ?");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0786");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.BufferedInputStream bufferedInputStream10 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.io.InputStream inputStream12 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, (int) (byte) 1);
        java.io.OutputStream outputStream13 = null;
        int int14 = org.apache.commons.io.IOUtils.copy(inputStream12, outputStream13);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream12);
        java.io.Writer writer16 = null;
        org.apache.commons.io.IOUtils.copy(inputStream12, writer16);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.String> strList19 = org.apache.commons.io.IOUtils.readLines(inputStream12, "\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ?");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream10);
        org.junit.Assert.assertNotNull(inputStream12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test0787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0787");
        java.io.Reader reader0 = null;
        java.io.Writer writer1 = null;
        java.io.Reader reader4 = null;
        char[] charArray5 = new char[] {};
        int int6 = org.apache.commons.io.IOUtils.length(charArray5);
        java.io.Writer writer7 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray5, writer7);
        int int9 = org.apache.commons.io.IOUtils.length(charArray5);
        java.io.Writer writer10 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray5, writer10);
        int int12 = org.apache.commons.io.IOUtils.length(charArray5);
        int int13 = org.apache.commons.io.IOUtils.read(reader4, charArray5);
        // The following exception was thrown during execution in test generation
        try {
            long long14 = org.apache.commons.io.IOUtils.copyLarge(reader0, writer1, (long) '4', (long) 2, charArray5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[], int, int)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test0788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0788");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream5 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray("");
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray10);
        long long12 = org.apache.commons.io.IOUtils.copyLarge(inputStream4, outputStream5, 0L, 0L, byteArray10);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, byteArray10);
        java.io.BufferedInputStream bufferedInputStream15 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.io.InputStream inputStream17 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray18 = org.apache.commons.io.IOUtils.toByteArray(inputStream17);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream17);
        java.io.InputStream inputStream21 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream22 = null;
        java.io.InputStream inputStream25 = null;
        byte[] byteArray27 = org.apache.commons.io.IOUtils.toByteArray("");
        int int28 = org.apache.commons.io.IOUtils.read(inputStream25, byteArray27);
        long long29 = org.apache.commons.io.IOUtils.copyLarge(inputStream21, outputStream22, 0L, 0L, byteArray27);
        java.nio.charset.Charset charset30 = null;
        java.util.List<java.lang.String> strList31 = org.apache.commons.io.IOUtils.readLines(inputStream21, charset30);
        java.io.InputStream inputStream33 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream34 = null;
        java.io.InputStream inputStream37 = null;
        byte[] byteArray39 = org.apache.commons.io.IOUtils.toByteArray("");
        int int40 = org.apache.commons.io.IOUtils.read(inputStream37, byteArray39);
        long long41 = org.apache.commons.io.IOUtils.copyLarge(inputStream33, outputStream34, 0L, 0L, byteArray39);
        java.nio.charset.Charset charset42 = null;
        java.util.List<java.lang.String> strList43 = org.apache.commons.io.IOUtils.readLines(inputStream33, charset42);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream33);
        boolean boolean45 = org.apache.commons.io.IOUtils.contentEquals(inputStream21, inputStream33);
        java.io.OutputStream outputStream46 = null;
        java.io.InputStream inputStream48 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream49 = null;
        java.io.InputStream inputStream52 = null;
        byte[] byteArray54 = org.apache.commons.io.IOUtils.toByteArray("");
        int int55 = org.apache.commons.io.IOUtils.read(inputStream52, byteArray54);
        long long56 = org.apache.commons.io.IOUtils.copyLarge(inputStream48, outputStream49, 0L, 0L, byteArray54);
        long long57 = org.apache.commons.io.IOUtils.copyLarge(inputStream33, outputStream46, byteArray54);
        org.apache.commons.io.IOUtils.readFully(inputStream17, byteArray54);
        org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray54);
        java.lang.String str60 = org.apache.commons.io.IOUtils.toString(inputStream1);
        java.io.BufferedInputStream bufferedInputStream62 = org.apache.commons.io.IOUtils.buffer(inputStream1, 100);
        java.io.Writer writer63 = null;
        java.nio.charset.Charset charset64 = null;
        org.apache.commons.io.IOUtils.copy((java.io.InputStream) bufferedInputStream62, writer63, charset64);
        java.io.OutputStream outputStream66 = null;
        java.io.InputStream inputStream69 = null;
        java.io.OutputStream outputStream70 = null;
        byte[] byteArray73 = new byte[] {};
        int int74 = org.apache.commons.io.IOUtils.length(byteArray73);
        java.io.OutputStream outputStream75 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray73, outputStream75);
        long long77 = org.apache.commons.io.IOUtils.copyLarge(inputStream69, outputStream70, 0L, (long) (byte) -1, byteArray73);
        java.io.OutputStream outputStream78 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray73, outputStream78);
        // The following exception was thrown during execution in test generation
        try {
            long long80 = org.apache.commons.io.IOUtils.copyLarge((java.io.InputStream) bufferedInputStream62, outputStream66, (long) (byte) 1, (long) 6, byteArray73);
            org.junit.Assert.fail("Expected exception of type java.io.EOFException; message: Bytes to skip: 1 actual: 0");
        } catch (java.io.EOFException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream15);
        org.junit.Assert.assertNotNull(inputStream17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(inputStream21);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNotNull(strList31);
        org.junit.Assert.assertNotNull(inputStream33);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertNotNull(strList43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(inputStream48);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(bufferedInputStream62);
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 0L + "'", long77 == 0L);
    }

    @Test
    public void test0789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0789");
        java.io.Reader reader0 = null;
        java.io.Writer writer1 = null;
        java.io.Reader reader4 = null;
        char[] charArray5 = new char[] {};
        int int6 = org.apache.commons.io.IOUtils.length(charArray5);
        java.io.Writer writer7 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray5, writer7);
        org.apache.commons.io.IOUtils.readFully(reader4, charArray5);
        // The following exception was thrown during execution in test generation
        try {
            long long10 = org.apache.commons.io.IOUtils.copyLarge(reader0, writer1, (long) (byte) 1, (long) (byte) -1, charArray5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[], int, int)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test0790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0790");
        java.io.Reader reader0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.skipFully(reader0, (long) (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Skip count must be non-negative, actual: -1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0791");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        org.apache.commons.io.IOUtils.closeQuietly(inputStream1);
        java.io.InputStream inputStream7 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray8 = new byte[] {};
        int int9 = org.apache.commons.io.IOUtils.length(byteArray8);
        int int10 = org.apache.commons.io.IOUtils.read(inputStream7, byteArray8);
        java.lang.String str11 = org.apache.commons.io.IOUtils.toString(byteArray8);
        int int14 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray8, (int) (byte) 10, (int) (short) 0);
        java.io.OutputStream outputStream15 = null;
        long long17 = org.apache.commons.io.IOUtils.copy(inputStream1, outputStream15, (int) (byte) 100);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) outputStream15);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(inputStream7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
    }

    @Test
    public void test0792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0792");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream5 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray("");
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray10);
        long long12 = org.apache.commons.io.IOUtils.copyLarge(inputStream4, outputStream5, 0L, 0L, byteArray10);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, byteArray10);
        java.io.BufferedInputStream bufferedInputStream15 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.nio.charset.Charset charset16 = null;
        java.util.List<java.lang.String> strList17 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset16);
        java.io.OutputStream outputStream18 = null;
        long long21 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream18, 0L, (long) 0);
        java.io.BufferedInputStream bufferedInputStream22 = org.apache.commons.io.IOUtils.buffer(inputStream1);
        org.apache.commons.io.function.IOConsumer<java.io.IOException> iOExceptionIOConsumer23 = null;
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1, iOExceptionIOConsumer23);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.String> strList26 = org.apache.commons.io.IOUtils.readLines(inputStream1, "");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream15);
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream22);
    }

    @Test
    public void test0793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0793");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream5 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray("");
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray10);
        long long12 = org.apache.commons.io.IOUtils.copyLarge(inputStream4, outputStream5, 0L, 0L, byteArray10);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, byteArray10);
        java.io.BufferedInputStream bufferedInputStream15 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        byte[] byteArray16 = org.apache.commons.io.IOUtils.toByteArray((java.io.InputStream) bufferedInputStream15);
        java.io.InputStream inputStream17 = null;
        java.io.OutputStream outputStream18 = null;
        byte[] byteArray21 = new byte[] {};
        int int22 = org.apache.commons.io.IOUtils.length(byteArray21);
        java.io.OutputStream outputStream23 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray21, outputStream23);
        long long25 = org.apache.commons.io.IOUtils.copyLarge(inputStream17, outputStream18, 0L, (long) (byte) -1, byteArray21);
        java.io.OutputStream outputStream26 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray21, outputStream26);
        int int28 = org.apache.commons.io.IOUtils.length(byteArray21);
        org.apache.commons.io.IOUtils.readFully((java.io.InputStream) bufferedInputStream15, byteArray21);
        java.io.OutputStream outputStream30 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray21, outputStream30);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream15);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
    }

    @Test
    public void test0794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0794");
        java.net.URL uRL0 = null;
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray1 = org.apache.commons.io.IOUtils.toByteArray(uRL0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.net.URL.openConnection()\" because \"url\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0795");
        java.io.Reader reader0 = null;
        java.io.Writer writer1 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long4 = org.apache.commons.io.IOUtils.copyLarge(reader0, writer1, (long) 1, (long) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[], int, int)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0796");
        char[] charArray0 = new char[] {};
        int int1 = org.apache.commons.io.IOUtils.length(charArray0);
        int int2 = org.apache.commons.io.IOUtils.length(charArray0);
        java.io.OutputStream outputStream3 = null;
        java.nio.charset.Charset charset4 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(charArray0, outputStream3, charset4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.OutputStream.write(byte[])\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray0);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray0), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray0), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
    }

    @Test
    public void test0797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0797");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.util.List<java.lang.String> strList4 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.OutputStream outputStream5 = null;
        long long6 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream5);
        java.io.Writer writer7 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer7);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream11 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray12 = new byte[] {};
        int int13 = org.apache.commons.io.IOUtils.length(byteArray12);
        int int14 = org.apache.commons.io.IOUtils.read(inputStream11, byteArray12);
        byte[] byteArray15 = org.apache.commons.io.IOUtils.toByteArray(inputStream11);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer16 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream11, iOExceptionConsumer16);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream11);
        java.io.BufferedInputStream bufferedInputStream20 = org.apache.commons.io.IOUtils.buffer(inputStream11, (int) (byte) 10);
        java.io.InputStream inputStream22 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream11, (int) (byte) 1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer23 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream11, iOExceptionConsumer23);
        java.io.OutputStream outputStream25 = null;
        java.io.InputStream inputStream27 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray28 = new byte[] {};
        int int29 = org.apache.commons.io.IOUtils.length(byteArray28);
        int int30 = org.apache.commons.io.IOUtils.read(inputStream27, byteArray28);
        byte[] byteArray31 = org.apache.commons.io.IOUtils.toByteArray(inputStream27);
        java.io.InputStream inputStream33 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray34 = new byte[] {};
        int int35 = org.apache.commons.io.IOUtils.length(byteArray34);
        int int36 = org.apache.commons.io.IOUtils.read(inputStream33, byteArray34);
        byte[] byteArray37 = org.apache.commons.io.IOUtils.toByteArray(inputStream33);
        int int38 = org.apache.commons.io.IOUtils.length(byteArray37);
        org.apache.commons.io.IOUtils.readFully(inputStream27, byteArray37);
        long long40 = org.apache.commons.io.IOUtils.copyLarge(inputStream11, outputStream25, byteArray37);
        boolean boolean41 = org.apache.commons.io.IOUtils.contentEquals(inputStream1, inputStream11);
        java.io.OutputStream outputStream42 = null;
        int int43 = org.apache.commons.io.IOUtils.copy(inputStream11, outputStream42);
        java.io.OutputStream outputStream44 = null;
        java.io.InputStream inputStream46 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream47 = null;
        java.io.InputStream inputStream50 = null;
        byte[] byteArray52 = org.apache.commons.io.IOUtils.toByteArray("");
        int int53 = org.apache.commons.io.IOUtils.read(inputStream50, byteArray52);
        long long54 = org.apache.commons.io.IOUtils.copyLarge(inputStream46, outputStream47, 0L, 0L, byteArray52);
        java.nio.charset.Charset charset55 = null;
        java.util.List<java.lang.String> strList56 = org.apache.commons.io.IOUtils.readLines(inputStream46, charset55);
        java.io.InputStream inputStream58 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream59 = null;
        java.io.InputStream inputStream62 = null;
        byte[] byteArray64 = org.apache.commons.io.IOUtils.toByteArray("");
        int int65 = org.apache.commons.io.IOUtils.read(inputStream62, byteArray64);
        long long66 = org.apache.commons.io.IOUtils.copyLarge(inputStream58, outputStream59, 0L, 0L, byteArray64);
        java.nio.charset.Charset charset67 = null;
        java.util.List<java.lang.String> strList68 = org.apache.commons.io.IOUtils.readLines(inputStream58, charset67);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream58);
        boolean boolean70 = org.apache.commons.io.IOUtils.contentEquals(inputStream46, inputStream58);
        java.io.OutputStream outputStream71 = null;
        java.io.InputStream inputStream73 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream74 = null;
        java.io.InputStream inputStream77 = null;
        byte[] byteArray79 = org.apache.commons.io.IOUtils.toByteArray("");
        int int80 = org.apache.commons.io.IOUtils.read(inputStream77, byteArray79);
        long long81 = org.apache.commons.io.IOUtils.copyLarge(inputStream73, outputStream74, 0L, 0L, byteArray79);
        long long82 = org.apache.commons.io.IOUtils.copyLarge(inputStream58, outputStream71, byteArray79);
        long long83 = org.apache.commons.io.IOUtils.copyLarge(inputStream11, outputStream44, byteArray79);
        int int84 = org.apache.commons.io.IOUtils.length(byteArray79);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(inputStream11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream20);
        org.junit.Assert.assertNotNull(inputStream22);
        org.junit.Assert.assertNotNull(inputStream27);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(inputStream33);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(inputStream46);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertNotNull(strList56);
        org.junit.Assert.assertNotNull(inputStream58);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 0L + "'", long66 == 0L);
        org.junit.Assert.assertNotNull(strList68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(inputStream73);
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 0L + "'", long81 == 0L);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 0L + "'", long82 == 0L);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 0L + "'", long83 == 0L);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
    }

    @Test
    public void test0798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0798");
        java.lang.CharSequence charSequence0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.InputStream inputStream2 = org.apache.commons.io.IOUtils.toInputStream(charSequence0, "");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0799");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.util.List<java.lang.String> strList4 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.OutputStream outputStream5 = null;
        long long6 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream5);
        java.io.Writer writer7 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer7);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream11 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray12 = new byte[] {};
        int int13 = org.apache.commons.io.IOUtils.length(byteArray12);
        int int14 = org.apache.commons.io.IOUtils.read(inputStream11, byteArray12);
        byte[] byteArray15 = org.apache.commons.io.IOUtils.toByteArray(inputStream11);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer16 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream11, iOExceptionConsumer16);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream11);
        java.io.BufferedInputStream bufferedInputStream20 = org.apache.commons.io.IOUtils.buffer(inputStream11, (int) (byte) 10);
        java.io.InputStream inputStream22 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream11, (int) (byte) 1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer23 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream11, iOExceptionConsumer23);
        java.io.OutputStream outputStream25 = null;
        java.io.InputStream inputStream27 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray28 = new byte[] {};
        int int29 = org.apache.commons.io.IOUtils.length(byteArray28);
        int int30 = org.apache.commons.io.IOUtils.read(inputStream27, byteArray28);
        byte[] byteArray31 = org.apache.commons.io.IOUtils.toByteArray(inputStream27);
        java.io.InputStream inputStream33 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray34 = new byte[] {};
        int int35 = org.apache.commons.io.IOUtils.length(byteArray34);
        int int36 = org.apache.commons.io.IOUtils.read(inputStream33, byteArray34);
        byte[] byteArray37 = org.apache.commons.io.IOUtils.toByteArray(inputStream33);
        int int38 = org.apache.commons.io.IOUtils.length(byteArray37);
        org.apache.commons.io.IOUtils.readFully(inputStream27, byteArray37);
        long long40 = org.apache.commons.io.IOUtils.copyLarge(inputStream11, outputStream25, byteArray37);
        boolean boolean41 = org.apache.commons.io.IOUtils.contentEquals(inputStream1, inputStream11);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray43 = org.apache.commons.io.IOUtils.toByteArray(inputStream1, 1);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Unexpected read size. current: 0, expected: 1");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(inputStream11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream20);
        org.junit.Assert.assertNotNull(inputStream22);
        org.junit.Assert.assertNotNull(inputStream27);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(inputStream33);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
    }

    @Test
    public void test0800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0800");
        // The following exception was thrown during execution in test generation
        try {
            java.io.InputStream inputStream2 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "\r\n", "\r\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ??");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0801");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.BufferedInputStream bufferedInputStream10 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.io.InputStream inputStream12 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, (int) (byte) 1);
        java.io.OutputStream outputStream13 = null;
        int int14 = org.apache.commons.io.IOUtils.copy(inputStream12, outputStream13);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream12);
        java.io.Writer writer16 = null;
        org.apache.commons.io.IOUtils.copy(inputStream12, writer16);
        java.io.Writer writer18 = null;
        java.nio.charset.Charset charset19 = null;
        org.apache.commons.io.IOUtils.copy(inputStream12, writer18, charset19);
        java.io.Writer writer21 = null;
        java.nio.charset.Charset charset22 = null;
        org.apache.commons.io.IOUtils.copy(inputStream12, writer21, charset22);
        // The following exception was thrown during execution in test generation
        try {
            java.io.InputStream inputStream25 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream12, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Negative initial size: -1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream10);
        org.junit.Assert.assertNotNull(inputStream12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test0802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0802");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream5 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray("");
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray10);
        long long12 = org.apache.commons.io.IOUtils.copyLarge(inputStream4, outputStream5, 0L, 0L, byteArray10);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, byteArray10);
        java.io.BufferedInputStream bufferedInputStream15 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.io.InputStream inputStream17 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray18 = org.apache.commons.io.IOUtils.toByteArray(inputStream17);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream17);
        java.io.InputStream inputStream21 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream22 = null;
        java.io.InputStream inputStream25 = null;
        byte[] byteArray27 = org.apache.commons.io.IOUtils.toByteArray("");
        int int28 = org.apache.commons.io.IOUtils.read(inputStream25, byteArray27);
        long long29 = org.apache.commons.io.IOUtils.copyLarge(inputStream21, outputStream22, 0L, 0L, byteArray27);
        java.nio.charset.Charset charset30 = null;
        java.util.List<java.lang.String> strList31 = org.apache.commons.io.IOUtils.readLines(inputStream21, charset30);
        java.io.InputStream inputStream33 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream34 = null;
        java.io.InputStream inputStream37 = null;
        byte[] byteArray39 = org.apache.commons.io.IOUtils.toByteArray("");
        int int40 = org.apache.commons.io.IOUtils.read(inputStream37, byteArray39);
        long long41 = org.apache.commons.io.IOUtils.copyLarge(inputStream33, outputStream34, 0L, 0L, byteArray39);
        java.nio.charset.Charset charset42 = null;
        java.util.List<java.lang.String> strList43 = org.apache.commons.io.IOUtils.readLines(inputStream33, charset42);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream33);
        boolean boolean45 = org.apache.commons.io.IOUtils.contentEquals(inputStream21, inputStream33);
        java.io.OutputStream outputStream46 = null;
        java.io.InputStream inputStream48 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream49 = null;
        java.io.InputStream inputStream52 = null;
        byte[] byteArray54 = org.apache.commons.io.IOUtils.toByteArray("");
        int int55 = org.apache.commons.io.IOUtils.read(inputStream52, byteArray54);
        long long56 = org.apache.commons.io.IOUtils.copyLarge(inputStream48, outputStream49, 0L, 0L, byteArray54);
        long long57 = org.apache.commons.io.IOUtils.copyLarge(inputStream33, outputStream46, byteArray54);
        org.apache.commons.io.IOUtils.readFully(inputStream17, byteArray54);
        org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray54);
        int int60 = org.apache.commons.io.IOUtils.length(byteArray54);
        java.io.OutputStream outputStream61 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(byteArray54, outputStream61);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.OutputStream.write(byte[])\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream15);
        org.junit.Assert.assertNotNull(inputStream17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(inputStream21);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNotNull(strList31);
        org.junit.Assert.assertNotNull(inputStream33);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertNotNull(strList43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(inputStream48);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
    }

    @Test
    public void test0803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0803");
        java.io.Reader reader0 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long2 = org.apache.commons.io.IOUtils.skip(reader0, 10L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[], int, int)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0804");
        java.io.Reader reader0 = null;
        java.io.Writer writer1 = null;
        java.io.InputStream inputStream5 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream6 = null;
        java.io.InputStream inputStream8 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream9 = null;
        java.io.InputStream inputStream12 = null;
        byte[] byteArray14 = org.apache.commons.io.IOUtils.toByteArray("");
        int int15 = org.apache.commons.io.IOUtils.read(inputStream12, byteArray14);
        long long16 = org.apache.commons.io.IOUtils.copyLarge(inputStream8, outputStream9, 0L, 0L, byteArray14);
        long long17 = org.apache.commons.io.IOUtils.copyLarge(inputStream5, outputStream6, byteArray14);
        java.io.BufferedInputStream bufferedInputStream19 = org.apache.commons.io.IOUtils.buffer(inputStream5, (int) (byte) 10);
        java.nio.charset.Charset charset20 = null;
        java.util.List<java.lang.String> strList21 = org.apache.commons.io.IOUtils.readLines(inputStream5, charset20);
        java.io.OutputStream outputStream22 = null;
        long long25 = org.apache.commons.io.IOUtils.copyLarge(inputStream5, outputStream22, 0L, (long) 0);
        java.nio.charset.Charset charset26 = null;
        char[] charArray27 = org.apache.commons.io.IOUtils.toCharArray(inputStream5, charset26);
        java.io.Writer writer28 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray27, writer28);
        java.io.Writer writer30 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray27, writer30);
        java.io.Writer writer32 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray27, writer32);
        // The following exception was thrown during execution in test generation
        try {
            long long34 = org.apache.commons.io.IOUtils.copyLarge(reader0, writer1, (long) 3, 0L, charArray27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[], int, int)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream5);
        org.junit.Assert.assertNotNull(inputStream8);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream19);
        org.junit.Assert.assertNotNull(strList21);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[]");
    }

    @Test
    public void test0805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0805");
        java.io.Reader reader0 = null;
        java.io.Reader reader1 = null;
        java.io.Writer writer2 = null;
        char[] charArray5 = new char[] {};
        int int6 = org.apache.commons.io.IOUtils.length(charArray5);
        java.io.Writer writer7 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray5, writer7);
        java.io.Writer writer9 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray5, writer9);
        long long11 = org.apache.commons.io.IOUtils.copyLarge(reader1, writer2, 0L, (long) (byte) 100, charArray5);
        int int12 = org.apache.commons.io.IOUtils.read(reader0, charArray5);
        java.io.OutputStream outputStream13 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(charArray5, outputStream13, "");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test0806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0806");
        java.io.Reader reader0 = null;
        java.io.Writer writer1 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long4 = org.apache.commons.io.IOUtils.copyLarge(reader0, writer1, (long) 4, 0L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[], int, int)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0807");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream5 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray("");
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray10);
        long long12 = org.apache.commons.io.IOUtils.copyLarge(inputStream4, outputStream5, 0L, 0L, byteArray10);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, byteArray10);
        java.io.BufferedInputStream bufferedInputStream15 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.nio.charset.Charset charset16 = null;
        java.util.List<java.lang.String> strList17 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset16);
        java.io.OutputStream outputStream18 = null;
        long long21 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream18, 0L, (long) 0);
        java.nio.charset.Charset charset22 = null;
        char[] charArray23 = org.apache.commons.io.IOUtils.toCharArray(inputStream1, charset22);
        java.io.InputStream inputStream25 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream25);
        java.io.InputStream inputStream27 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream25);
        java.lang.String str28 = org.apache.commons.io.IOUtils.toString(inputStream25);
        java.io.InputStream inputStream29 = null;
        byte[] byteArray31 = org.apache.commons.io.IOUtils.toByteArray("");
        int int32 = org.apache.commons.io.IOUtils.read(inputStream29, byteArray31);
        org.apache.commons.io.IOUtils.readFully(inputStream25, byteArray31);
        int int34 = org.apache.commons.io.IOUtils.length(byteArray31);
        org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray31);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.String> strList37 = org.apache.commons.io.IOUtils.readLines(inputStream1, "\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ?");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream15);
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[]");
        org.junit.Assert.assertNotNull(inputStream25);
        org.junit.Assert.assertNotNull(inputStream27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
    }

    @Test
    public void test0808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0808");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.BufferedInputStream bufferedInputStream10 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        byte[] byteArray11 = null;
        org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray11, (int) '4', 0);
        java.io.BufferedInputStream bufferedInputStream15 = org.apache.commons.io.IOUtils.buffer(inputStream1);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str17 = org.apache.commons.io.IOUtils.toString((java.io.InputStream) bufferedInputStream15, "");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream10);
        org.junit.Assert.assertNotNull(bufferedInputStream15);
    }

    @Test
    public void test0809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0809");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream5 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray("");
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray10);
        long long12 = org.apache.commons.io.IOUtils.copyLarge(inputStream4, outputStream5, 0L, 0L, byteArray10);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, byteArray10);
        java.io.BufferedInputStream bufferedInputStream15 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        org.apache.commons.io.IOUtils.closeQuietly(inputStream1);
        java.nio.charset.Charset charset17 = null;
        java.util.List<java.lang.String> strList18 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset17);
        java.io.OutputStream outputStream19 = null;
        int int20 = org.apache.commons.io.IOUtils.copy(inputStream1, outputStream19);
        java.io.OutputStream outputStream21 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long24 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream21, 100L, (long) 3);
            org.junit.Assert.fail("Expected exception of type java.io.EOFException; message: Bytes to skip: 100 actual: 0");
        } catch (java.io.EOFException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream15);
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    }

    @Test
    public void test0810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0810");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream5 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray("");
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray10);
        long long12 = org.apache.commons.io.IOUtils.copyLarge(inputStream4, outputStream5, 0L, 0L, byteArray10);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, byteArray10);
        java.io.BufferedInputStream bufferedInputStream15 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        org.apache.commons.io.IOUtils.closeQuietly(inputStream1);
        java.nio.charset.Charset charset17 = null;
        java.util.List<java.lang.String> strList18 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset17);
        java.io.OutputStream outputStream20 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList18, "", outputStream20, "");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream15);
        org.junit.Assert.assertNotNull(strList18);
    }

    @Test
    public void test0811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0811");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.BufferedInputStream bufferedInputStream10 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.io.InputStream inputStream12 = org.apache.commons.io.IOUtils.toBufferedInputStream((java.io.InputStream) bufferedInputStream10, (int) '#');
        long long14 = org.apache.commons.io.IOUtils.skip(inputStream12, (long) 6);
        java.nio.charset.Charset charset15 = null;
        org.apache.commons.io.LineIterator lineIterator16 = org.apache.commons.io.IOUtils.lineIterator(inputStream12, charset15);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray18 = org.apache.commons.io.IOUtils.readFully(inputStream12, 2);
            org.junit.Assert.fail("Expected exception of type java.io.EOFException; message: Length to read: 2 actual: 0");
        } catch (java.io.EOFException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream10);
        org.junit.Assert.assertNotNull(inputStream12);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(lineIterator16);
    }

    @Test
    public void test0812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0812");
        java.nio.channels.ReadableByteChannel readableByteChannel0 = null;
        long long2 = org.apache.commons.io.IOUtils.skip(readableByteChannel0, 0L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
    }

    @Test
    public void test0813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0813");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        org.apache.commons.io.IOUtils.closeQuietly(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream8 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream9 = null;
        java.io.InputStream inputStream12 = null;
        byte[] byteArray14 = org.apache.commons.io.IOUtils.toByteArray("");
        int int15 = org.apache.commons.io.IOUtils.read(inputStream12, byteArray14);
        long long16 = org.apache.commons.io.IOUtils.copyLarge(inputStream8, outputStream9, 0L, 0L, byteArray14);
        java.nio.charset.Charset charset17 = null;
        java.util.List<java.lang.String> strList18 = org.apache.commons.io.IOUtils.readLines(inputStream8, charset17);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream8);
        java.nio.charset.Charset charset20 = null;
        java.lang.String str21 = org.apache.commons.io.IOUtils.toString(inputStream8, charset20);
        java.io.Writer writer22 = null;
        org.apache.commons.io.IOUtils.copy(inputStream8, writer22);
        byte[] byteArray24 = org.apache.commons.io.IOUtils.toByteArray(inputStream8);
        int int25 = org.apache.commons.io.IOUtils.length(byteArray24);
        int int26 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray24);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.skipFully(inputStream1, 100L);
            org.junit.Assert.fail("Expected exception of type java.io.EOFException; message: Bytes to skip: 100 actual: 0");
        } catch (java.io.EOFException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(inputStream8);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
    }

    @Test
    public void test0814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0814");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.BufferedInputStream bufferedInputStream10 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.io.InputStream inputStream12 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, (int) (byte) 1);
        java.io.OutputStream outputStream13 = null;
        int int14 = org.apache.commons.io.IOUtils.copy(inputStream12, outputStream13);
        java.io.BufferedInputStream bufferedInputStream16 = org.apache.commons.io.IOUtils.buffer(inputStream12, (int) (byte) 10);
        java.io.InputStream inputStream18 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray19 = new byte[] {};
        int int20 = org.apache.commons.io.IOUtils.length(byteArray19);
        int int21 = org.apache.commons.io.IOUtils.read(inputStream18, byteArray19);
        byte[] byteArray22 = org.apache.commons.io.IOUtils.toByteArray(inputStream18);
        byte[] byteArray24 = org.apache.commons.io.IOUtils.toByteArray(inputStream18, (int) (short) 0);
        long long26 = org.apache.commons.io.IOUtils.skip(inputStream18, 100L);
        java.io.InputStream inputStream28 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray29 = org.apache.commons.io.IOUtils.toByteArray(inputStream28);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream28);
        java.util.List<java.lang.String> strList31 = org.apache.commons.io.IOUtils.readLines(inputStream28);
        java.io.OutputStream outputStream32 = null;
        long long33 = org.apache.commons.io.IOUtils.copyLarge(inputStream28, outputStream32);
        java.io.OutputStream outputStream34 = null;
        java.io.InputStream inputStream38 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray39 = new byte[] {};
        int int40 = org.apache.commons.io.IOUtils.length(byteArray39);
        int int41 = org.apache.commons.io.IOUtils.read(inputStream38, byteArray39);
        long long42 = org.apache.commons.io.IOUtils.copyLarge(inputStream28, outputStream34, (-1L), 1L, byteArray39);
        int int43 = org.apache.commons.io.IOUtils.read(inputStream18, byteArray39);
        org.apache.commons.io.IOUtils.readFully((java.io.InputStream) bufferedInputStream16, byteArray39);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray46 = org.apache.commons.io.IOUtils.toByteArray((java.io.InputStream) bufferedInputStream16, (long) '/');
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Unexpected read size. current: 0, expected: 47");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream10);
        org.junit.Assert.assertNotNull(inputStream12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(bufferedInputStream16);
        org.junit.Assert.assertNotNull(inputStream18);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(inputStream28);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(strList31);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertNotNull(inputStream38);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
    }

    @Test
    public void test0815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0815");
        java.io.OutputStream outputStream1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write((java.lang.CharSequence) "\r\n", outputStream1, "hi!");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: hi!");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0816");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        java.nio.charset.Charset charset5 = null;
        java.lang.String str6 = org.apache.commons.io.IOUtils.toString(inputStream1, charset5);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        byte[] byteArray8 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.io.InputStream inputStream10 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray11 = new byte[] {};
        int int12 = org.apache.commons.io.IOUtils.length(byteArray11);
        int int13 = org.apache.commons.io.IOUtils.read(inputStream10, byteArray11);
        byte[] byteArray14 = org.apache.commons.io.IOUtils.toByteArray(inputStream10);
        byte[] byteArray15 = org.apache.commons.io.IOUtils.toByteArray(inputStream10);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray15, (int) (byte) -1, 6);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Range [-1, -1 + 6) out of bounds for length 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(inputStream10);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
    }

    @Test
    public void test0817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0817");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.nio.charset.Charset charset4 = null;
        org.apache.commons.io.LineIterator lineIterator5 = org.apache.commons.io.IOUtils.lineIterator(inputStream1, charset4);
        java.lang.String str6 = org.apache.commons.io.IOUtils.toString(inputStream1);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray8 = org.apache.commons.io.IOUtils.readFully(inputStream1, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.io.EOFException; message: Length to read: 97 actual: 0");
        } catch (java.io.EOFException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(lineIterator5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
    }

    @Test
    public void test0818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0818");
        java.io.Reader reader0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.skipFully(reader0, (long) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[], int, int)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0819");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        java.nio.charset.Charset charset10 = null;
        java.util.List<java.lang.String> strList11 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset10);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.lang.String str13 = org.apache.commons.io.IOUtils.toString(inputStream1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.String> strList15 = org.apache.commons.io.IOUtils.readLines(inputStream1, "\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ?");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
    }

    @Test
    public void test0820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0820");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream("hi!");
        org.apache.commons.io.function.IOConsumer<java.io.IOException> iOExceptionIOConsumer2 = null;
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1, iOExceptionIOConsumer2);
        java.io.OutputStream outputStream4 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long6 = org.apache.commons.io.IOUtils.copy(inputStream1, outputStream4, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.OutputStream.write(byte[], int, int)\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
    }

    @Test
    public void test0821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0821");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream3 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer4 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream3, iOExceptionConsumer4);
        // The following exception was thrown during execution in test generation
        try {
            long long7 = org.apache.commons.io.IOUtils.skip(inputStream3, (long) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Skip count must be non-negative, actual: -1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream3);
    }

    @Test
    public void test0822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0822");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream5 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream6 = null;
        java.io.InputStream inputStream9 = null;
        byte[] byteArray11 = org.apache.commons.io.IOUtils.toByteArray("");
        int int12 = org.apache.commons.io.IOUtils.read(inputStream9, byteArray11);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream5, outputStream6, 0L, 0L, byteArray11);
        java.nio.charset.Charset charset14 = null;
        java.util.List<java.lang.String> strList15 = org.apache.commons.io.IOUtils.readLines(inputStream5, charset14);
        java.io.InputStream inputStream17 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream18 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray23 = org.apache.commons.io.IOUtils.toByteArray("");
        int int24 = org.apache.commons.io.IOUtils.read(inputStream21, byteArray23);
        long long25 = org.apache.commons.io.IOUtils.copyLarge(inputStream17, outputStream18, 0L, 0L, byteArray23);
        java.nio.charset.Charset charset26 = null;
        java.util.List<java.lang.String> strList27 = org.apache.commons.io.IOUtils.readLines(inputStream17, charset26);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream17);
        boolean boolean29 = org.apache.commons.io.IOUtils.contentEquals(inputStream5, inputStream17);
        java.io.OutputStream outputStream30 = null;
        java.io.InputStream inputStream32 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream33 = null;
        java.io.InputStream inputStream36 = null;
        byte[] byteArray38 = org.apache.commons.io.IOUtils.toByteArray("");
        int int39 = org.apache.commons.io.IOUtils.read(inputStream36, byteArray38);
        long long40 = org.apache.commons.io.IOUtils.copyLarge(inputStream32, outputStream33, 0L, 0L, byteArray38);
        long long41 = org.apache.commons.io.IOUtils.copyLarge(inputStream17, outputStream30, byteArray38);
        org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray38);
        java.io.OutputStream outputStream43 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray38, outputStream43);
        int int45 = org.apache.commons.io.IOUtils.length(byteArray38);
        java.io.Writer writer46 = null;
        java.nio.charset.Charset charset47 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(byteArray38, writer46, charset47);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Writer.write(String)\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(inputStream5);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(strList15);
        org.junit.Assert.assertNotNull(inputStream17);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(strList27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(inputStream32);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
    }

    @Test
    public void test0823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0823");
        byte[] byteArray1 = org.apache.commons.io.IOUtils.toByteArray("hi!");
        java.io.OutputStream outputStream2 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.writeChunked(byteArray1, outputStream2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.OutputStream.write(byte[], int, int)\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[104, 105, 33]");
    }

    @Test
    public void test0824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0824");
        java.io.InputStream inputStream0 = null;
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray("");
        int int3 = org.apache.commons.io.IOUtils.read(inputStream0, byteArray2);
        java.lang.String str4 = org.apache.commons.io.IOUtils.toString(byteArray2);
        java.io.Writer writer5 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(byteArray2, writer5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Writer.write(String)\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
    }

    @Test
    public void test0825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0825");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer9 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer9);
        java.io.BufferedInputStream bufferedInputStream11 = org.apache.commons.io.IOUtils.buffer(inputStream1);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray13 = org.apache.commons.io.IOUtils.toByteArray((java.io.InputStream) bufferedInputStream11, 4);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Unexpected read size. current: 0, expected: 4");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream11);
    }

    @Test
    public void test0826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0826");
        java.io.Reader reader0 = null;
        java.io.Writer writer1 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long4 = org.apache.commons.io.IOUtils.copyLarge(reader0, writer1, (long) 'a', (long) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[], int, int)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0827");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.util.List<java.lang.String> strList4 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.OutputStream outputStream5 = null;
        long long6 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream5);
        java.io.Writer writer7 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer7);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream11 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray12 = new byte[] {};
        int int13 = org.apache.commons.io.IOUtils.length(byteArray12);
        int int14 = org.apache.commons.io.IOUtils.read(inputStream11, byteArray12);
        byte[] byteArray15 = org.apache.commons.io.IOUtils.toByteArray(inputStream11);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer16 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream11, iOExceptionConsumer16);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream11);
        java.io.BufferedInputStream bufferedInputStream20 = org.apache.commons.io.IOUtils.buffer(inputStream11, (int) (byte) 10);
        java.io.InputStream inputStream22 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream11, (int) (byte) 1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer23 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream11, iOExceptionConsumer23);
        java.io.OutputStream outputStream25 = null;
        java.io.InputStream inputStream27 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray28 = new byte[] {};
        int int29 = org.apache.commons.io.IOUtils.length(byteArray28);
        int int30 = org.apache.commons.io.IOUtils.read(inputStream27, byteArray28);
        byte[] byteArray31 = org.apache.commons.io.IOUtils.toByteArray(inputStream27);
        java.io.InputStream inputStream33 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray34 = new byte[] {};
        int int35 = org.apache.commons.io.IOUtils.length(byteArray34);
        int int36 = org.apache.commons.io.IOUtils.read(inputStream33, byteArray34);
        byte[] byteArray37 = org.apache.commons.io.IOUtils.toByteArray(inputStream33);
        int int38 = org.apache.commons.io.IOUtils.length(byteArray37);
        org.apache.commons.io.IOUtils.readFully(inputStream27, byteArray37);
        long long40 = org.apache.commons.io.IOUtils.copyLarge(inputStream11, outputStream25, byteArray37);
        boolean boolean41 = org.apache.commons.io.IOUtils.contentEquals(inputStream1, inputStream11);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream11);
        java.io.OutputStream outputStream43 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long45 = org.apache.commons.io.IOUtils.copy(inputStream11, outputStream43, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: -1");
        } catch (java.lang.NegativeArraySizeException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(inputStream11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream20);
        org.junit.Assert.assertNotNull(inputStream22);
        org.junit.Assert.assertNotNull(inputStream27);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(inputStream33);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
    }

    @Test
    public void test0828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0828");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream5 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray("");
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray10);
        long long12 = org.apache.commons.io.IOUtils.copyLarge(inputStream4, outputStream5, 0L, 0L, byteArray10);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, byteArray10);
        java.io.BufferedInputStream bufferedInputStream15 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.io.InputStream inputStream17 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray18 = org.apache.commons.io.IOUtils.toByteArray(inputStream17);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream17);
        java.io.InputStream inputStream21 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream22 = null;
        java.io.InputStream inputStream25 = null;
        byte[] byteArray27 = org.apache.commons.io.IOUtils.toByteArray("");
        int int28 = org.apache.commons.io.IOUtils.read(inputStream25, byteArray27);
        long long29 = org.apache.commons.io.IOUtils.copyLarge(inputStream21, outputStream22, 0L, 0L, byteArray27);
        java.nio.charset.Charset charset30 = null;
        java.util.List<java.lang.String> strList31 = org.apache.commons.io.IOUtils.readLines(inputStream21, charset30);
        java.io.InputStream inputStream33 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream34 = null;
        java.io.InputStream inputStream37 = null;
        byte[] byteArray39 = org.apache.commons.io.IOUtils.toByteArray("");
        int int40 = org.apache.commons.io.IOUtils.read(inputStream37, byteArray39);
        long long41 = org.apache.commons.io.IOUtils.copyLarge(inputStream33, outputStream34, 0L, 0L, byteArray39);
        java.nio.charset.Charset charset42 = null;
        java.util.List<java.lang.String> strList43 = org.apache.commons.io.IOUtils.readLines(inputStream33, charset42);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream33);
        boolean boolean45 = org.apache.commons.io.IOUtils.contentEquals(inputStream21, inputStream33);
        java.io.OutputStream outputStream46 = null;
        java.io.InputStream inputStream48 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream49 = null;
        java.io.InputStream inputStream52 = null;
        byte[] byteArray54 = org.apache.commons.io.IOUtils.toByteArray("");
        int int55 = org.apache.commons.io.IOUtils.read(inputStream52, byteArray54);
        long long56 = org.apache.commons.io.IOUtils.copyLarge(inputStream48, outputStream49, 0L, 0L, byteArray54);
        long long57 = org.apache.commons.io.IOUtils.copyLarge(inputStream33, outputStream46, byteArray54);
        org.apache.commons.io.IOUtils.readFully(inputStream17, byteArray54);
        org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray54);
        java.lang.String str60 = org.apache.commons.io.IOUtils.toString(inputStream1);
        java.io.BufferedInputStream bufferedInputStream62 = org.apache.commons.io.IOUtils.buffer(inputStream1, 100);
        java.io.OutputStream outputStream63 = null;
        java.io.InputStream inputStream66 = null;
        byte[] byteArray68 = org.apache.commons.io.IOUtils.toByteArray("");
        int int69 = org.apache.commons.io.IOUtils.read(inputStream66, byteArray68);
        java.lang.String str70 = org.apache.commons.io.IOUtils.toString(byteArray68);
        long long71 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream63, (-1L), (long) (short) -1, byteArray68);
        java.io.InputStream inputStream72 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1);
        java.io.Writer writer73 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.copy(inputStream1, writer73, "");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream15);
        org.junit.Assert.assertNotNull(inputStream17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(inputStream21);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNotNull(strList31);
        org.junit.Assert.assertNotNull(inputStream33);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertNotNull(strList43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(inputStream48);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(bufferedInputStream62);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 0L + "'", long71 == 0L);
        org.junit.Assert.assertNotNull(inputStream72);
    }

    @Test
    public void test0829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0829");
        java.io.Reader reader0 = null;
        java.io.Writer writer1 = null;
        java.io.InputStream inputStream3 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream4 = null;
        java.io.InputStream inputStream6 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream7 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray12 = org.apache.commons.io.IOUtils.toByteArray("");
        int int13 = org.apache.commons.io.IOUtils.read(inputStream10, byteArray12);
        long long14 = org.apache.commons.io.IOUtils.copyLarge(inputStream6, outputStream7, 0L, 0L, byteArray12);
        long long15 = org.apache.commons.io.IOUtils.copyLarge(inputStream3, outputStream4, byteArray12);
        java.io.BufferedInputStream bufferedInputStream17 = org.apache.commons.io.IOUtils.buffer(inputStream3, (int) (byte) 10);
        java.nio.charset.Charset charset18 = null;
        java.util.List<java.lang.String> strList19 = org.apache.commons.io.IOUtils.readLines(inputStream3, charset18);
        java.io.OutputStream outputStream20 = null;
        long long23 = org.apache.commons.io.IOUtils.copyLarge(inputStream3, outputStream20, 0L, (long) 0);
        java.nio.charset.Charset charset24 = null;
        char[] charArray25 = org.apache.commons.io.IOUtils.toCharArray(inputStream3, charset24);
        // The following exception was thrown during execution in test generation
        try {
            long long26 = org.apache.commons.io.IOUtils.copyLarge(reader0, writer1, charArray25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[])\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream3);
        org.junit.Assert.assertNotNull(inputStream6);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream17);
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[]");
    }

    @Test
    public void test0830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0830");
        java.io.Reader reader0 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long2 = org.apache.commons.io.IOUtils.skip(reader0, (long) 6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[], int, int)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0831");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.BufferedInputStream bufferedInputStream3 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) ' ');
        java.io.OutputStream outputStream4 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long7 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream4, (long) '\\', (long) 1);
            org.junit.Assert.fail("Expected exception of type java.io.EOFException; message: Bytes to skip: 92 actual: 0");
        } catch (java.io.EOFException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(bufferedInputStream3);
    }

    @Test
    public void test0832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0832");
        java.io.Reader reader0 = null;
        java.io.Writer writer1 = null;
        long long4 = org.apache.commons.io.IOUtils.copyLarge(reader0, writer1, (long) (short) 0, 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
    }

    @Test
    public void test0833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0833");
        java.io.Reader reader0 = null;
        java.io.Writer writer1 = null;
        long long4 = org.apache.commons.io.IOUtils.copyLarge(reader0, writer1, (long) 0, 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
    }

    @Test
    public void test0834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0834");
        java.lang.CharSequence charSequence0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.InputStream inputStream2 = org.apache.commons.io.IOUtils.toInputStream(charSequence0, "\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ?");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0835");
        java.io.OutputStream outputStream0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.BufferedOutputStream bufferedOutputStream2 = org.apache.commons.io.IOUtils.buffer(outputStream0, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: outputStream");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0836");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        org.apache.commons.io.IOUtils.closeQuietly(inputStream1);
        org.apache.commons.io.function.IOConsumer<java.io.IOException> iOExceptionIOConsumer6 = null;
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1, iOExceptionIOConsumer6);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test0837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0837");
        // The following exception was thrown during execution in test generation
        try {
            java.io.InputStream inputStream2 = org.apache.commons.io.IOUtils.toInputStream("hi!", "hi!");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: hi!");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0838");
        java.io.OutputStream outputStream0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.BufferedOutputStream bufferedOutputStream2 = org.apache.commons.io.IOUtils.buffer(outputStream0, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: outputStream");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0839");
        java.io.Reader reader0 = null;
        char[] charArray1 = new char[] {};
        int int2 = org.apache.commons.io.IOUtils.length(charArray1);
        org.apache.commons.io.IOUtils.readFully(reader0, charArray1);
        java.io.Writer writer4 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(charArray1, writer4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Writer.write(char[])\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray1);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray1), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray1), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray1), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
    }

    @Test
    public void test0840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0840");
        java.io.OutputStream outputStream1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write("\r\n", outputStream1, "\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ?");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0841");
        java.io.Reader reader0 = null;
        java.io.Writer writer1 = null;
        java.io.InputStream inputStream5 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray6 = new byte[] {};
        int int7 = org.apache.commons.io.IOUtils.length(byteArray6);
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray6);
        byte[] byteArray9 = org.apache.commons.io.IOUtils.toByteArray(inputStream5);
        java.nio.charset.Charset charset10 = null;
        java.util.List<java.lang.String> strList11 = org.apache.commons.io.IOUtils.readLines(inputStream5, charset10);
        java.nio.charset.Charset charset12 = null;
        org.apache.commons.io.LineIterator lineIterator13 = org.apache.commons.io.IOUtils.lineIterator(inputStream5, charset12);
        java.io.InputStream inputStream15 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream5, 6);
        java.nio.charset.Charset charset16 = null;
        char[] charArray17 = org.apache.commons.io.IOUtils.toCharArray(inputStream5, charset16);
        // The following exception was thrown during execution in test generation
        try {
            long long18 = org.apache.commons.io.IOUtils.copyLarge(reader0, writer1, (long) 5, (long) 0, charArray17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[], int, int)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertNotNull(lineIterator13);
        org.junit.Assert.assertNotNull(inputStream15);
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[]");
    }

    @Test
    public void test0842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0842");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        java.nio.charset.Charset charset10 = null;
        java.util.List<java.lang.String> strList11 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset10);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream14 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, (int) (byte) 0);
        java.io.Writer writer15 = null;
        java.nio.charset.Charset charset16 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer15, charset16);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.String> strList19 = org.apache.commons.io.IOUtils.readLines(inputStream1, "hi!");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: hi!");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertNotNull(inputStream14);
    }

    @Test
    public void test0843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0843");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray(inputStream1, (int) (short) 0);
        java.io.BufferedInputStream bufferedInputStream8 = org.apache.commons.io.IOUtils.buffer(inputStream1);
        java.io.Writer writer9 = null;
        java.nio.charset.Charset charset10 = null;
        org.apache.commons.io.IOUtils.copy((java.io.InputStream) bufferedInputStream8, writer9, charset10);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.LineIterator lineIterator13 = org.apache.commons.io.IOUtils.lineIterator((java.io.InputStream) bufferedInputStream8, "\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ?");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream8);
    }

    @Test
    public void test0844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0844");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.util.List<java.lang.String> strList4 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.OutputStream outputStream5 = null;
        long long6 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream5);
        java.io.OutputStream outputStream7 = null;
        java.io.InputStream inputStream11 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray12 = new byte[] {};
        int int13 = org.apache.commons.io.IOUtils.length(byteArray12);
        int int14 = org.apache.commons.io.IOUtils.read(inputStream11, byteArray12);
        long long15 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream7, (-1L), 1L, byteArray12);
        java.io.OutputStream outputStream16 = null;
        java.io.InputStream inputStream20 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream21 = null;
        java.io.InputStream inputStream24 = null;
        byte[] byteArray26 = org.apache.commons.io.IOUtils.toByteArray("");
        int int27 = org.apache.commons.io.IOUtils.read(inputStream24, byteArray26);
        long long28 = org.apache.commons.io.IOUtils.copyLarge(inputStream20, outputStream21, 0L, 0L, byteArray26);
        java.io.OutputStream outputStream29 = null;
        long long32 = org.apache.commons.io.IOUtils.copyLarge(inputStream20, outputStream29, (long) (short) 0, (-1L));
        java.lang.String str33 = org.apache.commons.io.IOUtils.toString(inputStream20);
        java.io.InputStream inputStream34 = null;
        java.io.OutputStream outputStream35 = null;
        byte[] byteArray38 = new byte[] {};
        int int39 = org.apache.commons.io.IOUtils.length(byteArray38);
        java.io.OutputStream outputStream40 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray38, outputStream40);
        long long42 = org.apache.commons.io.IOUtils.copyLarge(inputStream34, outputStream35, 0L, (long) (byte) -1, byteArray38);
        java.io.OutputStream outputStream43 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray38, outputStream43);
        int int45 = org.apache.commons.io.IOUtils.length(byteArray38);
        int int46 = org.apache.commons.io.IOUtils.read(inputStream20, byteArray38);
        long long47 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream16, (long) (byte) -1, (long) 10, byteArray38);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) outputStream16);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(inputStream11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(inputStream20);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
    }

    @Test
    public void test0845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0845");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray(inputStream1, (int) (short) 0);
        java.io.BufferedInputStream bufferedInputStream8 = org.apache.commons.io.IOUtils.buffer(inputStream1);
        java.io.InputStream inputStream9 = org.apache.commons.io.IOUtils.toBufferedInputStream((java.io.InputStream) bufferedInputStream8);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.String> strList11 = org.apache.commons.io.IOUtils.readLines((java.io.InputStream) bufferedInputStream8, "hi!");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: hi!");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream8);
        org.junit.Assert.assertNotNull(inputStream9);
    }

    @Test
    public void test0846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0846");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        java.nio.charset.Charset charset10 = null;
        java.util.List<java.lang.String> strList11 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset10);
        java.io.InputStream inputStream13 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream14 = null;
        java.io.InputStream inputStream17 = null;
        byte[] byteArray19 = org.apache.commons.io.IOUtils.toByteArray("");
        int int20 = org.apache.commons.io.IOUtils.read(inputStream17, byteArray19);
        long long21 = org.apache.commons.io.IOUtils.copyLarge(inputStream13, outputStream14, 0L, 0L, byteArray19);
        java.nio.charset.Charset charset22 = null;
        java.util.List<java.lang.String> strList23 = org.apache.commons.io.IOUtils.readLines(inputStream13, charset22);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream13);
        boolean boolean25 = org.apache.commons.io.IOUtils.contentEquals(inputStream1, inputStream13);
        java.io.OutputStream outputStream26 = null;
        java.io.InputStream inputStream28 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream29 = null;
        java.io.InputStream inputStream32 = null;
        byte[] byteArray34 = org.apache.commons.io.IOUtils.toByteArray("");
        int int35 = org.apache.commons.io.IOUtils.read(inputStream32, byteArray34);
        long long36 = org.apache.commons.io.IOUtils.copyLarge(inputStream28, outputStream29, 0L, 0L, byteArray34);
        long long37 = org.apache.commons.io.IOUtils.copyLarge(inputStream13, outputStream26, byteArray34);
        java.io.OutputStream outputStream38 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray34, outputStream38);
        java.io.OutputStream outputStream40 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(byteArray34, outputStream40);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.OutputStream.write(byte[])\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertNotNull(inputStream13);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(strList23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(inputStream28);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
    }

    @Test
    public void test0847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0847");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.BufferedInputStream bufferedInputStream10 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.io.InputStream inputStream12 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, (int) (byte) 1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer13 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer13);
        java.io.BufferedInputStream bufferedInputStream16 = org.apache.commons.io.IOUtils.buffer(inputStream1, 6);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) bufferedInputStream16);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray19 = org.apache.commons.io.IOUtils.toByteArray((java.io.InputStream) bufferedInputStream16, (-1L));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Size must be equal or greater than zero: -1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream10);
        org.junit.Assert.assertNotNull(inputStream12);
        org.junit.Assert.assertNotNull(bufferedInputStream16);
    }

    @Test
    public void test0848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0848");
        java.io.OutputStream outputStream1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write((java.lang.CharSequence) "", outputStream1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.OutputStream.write(byte[])\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0849");
        java.io.Reader reader0 = null;
        char[] charArray1 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int2 = org.apache.commons.io.IOUtils.read(reader0, charArray1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"buffer\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0850");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.util.List<java.lang.String> strList4 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.OutputStream outputStream5 = null;
        long long6 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream5);
        java.io.Writer writer7 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer7);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream11 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray12 = new byte[] {};
        int int13 = org.apache.commons.io.IOUtils.length(byteArray12);
        int int14 = org.apache.commons.io.IOUtils.read(inputStream11, byteArray12);
        byte[] byteArray15 = org.apache.commons.io.IOUtils.toByteArray(inputStream11);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer16 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream11, iOExceptionConsumer16);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream11);
        java.io.BufferedInputStream bufferedInputStream20 = org.apache.commons.io.IOUtils.buffer(inputStream11, (int) (byte) 10);
        java.io.InputStream inputStream22 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream11, (int) (byte) 1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer23 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream11, iOExceptionConsumer23);
        java.io.OutputStream outputStream25 = null;
        java.io.InputStream inputStream27 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray28 = new byte[] {};
        int int29 = org.apache.commons.io.IOUtils.length(byteArray28);
        int int30 = org.apache.commons.io.IOUtils.read(inputStream27, byteArray28);
        byte[] byteArray31 = org.apache.commons.io.IOUtils.toByteArray(inputStream27);
        java.io.InputStream inputStream33 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray34 = new byte[] {};
        int int35 = org.apache.commons.io.IOUtils.length(byteArray34);
        int int36 = org.apache.commons.io.IOUtils.read(inputStream33, byteArray34);
        byte[] byteArray37 = org.apache.commons.io.IOUtils.toByteArray(inputStream33);
        int int38 = org.apache.commons.io.IOUtils.length(byteArray37);
        org.apache.commons.io.IOUtils.readFully(inputStream27, byteArray37);
        long long40 = org.apache.commons.io.IOUtils.copyLarge(inputStream11, outputStream25, byteArray37);
        boolean boolean41 = org.apache.commons.io.IOUtils.contentEquals(inputStream1, inputStream11);
        java.io.BufferedInputStream bufferedInputStream43 = org.apache.commons.io.IOUtils.buffer(inputStream1, 5);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer44 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) bufferedInputStream43, iOExceptionConsumer44);
        java.io.BufferedInputStream bufferedInputStream47 = org.apache.commons.io.IOUtils.buffer((java.io.InputStream) bufferedInputStream43, 2);
        java.nio.charset.Charset charset48 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str49 = org.apache.commons.io.IOUtils.toString((java.io.InputStream) bufferedInputStream43, charset48);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Stream closed");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(inputStream11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream20);
        org.junit.Assert.assertNotNull(inputStream22);
        org.junit.Assert.assertNotNull(inputStream27);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(inputStream33);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(bufferedInputStream43);
        org.junit.Assert.assertNotNull(bufferedInputStream47);
    }

    @Test
    public void test0851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0851");
        java.io.Reader reader0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.BufferedReader bufferedReader2 = org.apache.commons.io.IOUtils.buffer(reader0, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0852");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        java.nio.charset.Charset charset5 = null;
        java.lang.String str6 = org.apache.commons.io.IOUtils.toString(inputStream1, charset5);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
    }

    @Test
    public void test0853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0853");
        java.io.Reader reader0 = null;
        java.io.Writer writer1 = null;
        java.nio.charset.Charset charset5 = null;
        java.io.InputStream inputStream6 = org.apache.commons.io.IOUtils.toInputStream("", charset5);
        java.nio.charset.Charset charset7 = null;
        java.lang.String str8 = org.apache.commons.io.IOUtils.toString(inputStream6, charset7);
        char[] charArray9 = org.apache.commons.io.IOUtils.toCharArray(inputStream6);
        // The following exception was thrown during execution in test generation
        try {
            long long10 = org.apache.commons.io.IOUtils.copyLarge(reader0, writer1, (long) ' ', (long) '\\', charArray9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[], int, int)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[]");
    }

    @Test
    public void test0854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0854");
        java.io.Reader reader0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.BufferedReader bufferedReader2 = org.apache.commons.io.IOUtils.buffer(reader0, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0855");
        java.io.Reader reader0 = null;
        java.io.Writer writer1 = null;
        java.io.Reader reader2 = null;
        char[] charArray3 = new char[] {};
        int int4 = org.apache.commons.io.IOUtils.length(charArray3);
        java.io.Writer writer5 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray3, writer5);
        int int7 = org.apache.commons.io.IOUtils.read(reader2, charArray3);
        java.io.Writer writer8 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray3, writer8);
        int int10 = org.apache.commons.io.IOUtils.length(charArray3);
        // The following exception was thrown during execution in test generation
        try {
            long long11 = org.apache.commons.io.IOUtils.copyLarge(reader0, writer1, charArray3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[])\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray3), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray3), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray3), "[]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test0856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0856");
        char[] charArray0 = null;
        java.io.OutputStream outputStream1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(charArray0, outputStream1, "");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0857");
        java.io.Reader reader0 = null;
        char[] charArray1 = new char[] {};
        int int2 = org.apache.commons.io.IOUtils.length(charArray1);
        java.io.Writer writer3 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray1, writer3);
        int int5 = org.apache.commons.io.IOUtils.length(charArray1);
        java.io.Writer writer6 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray1, writer6);
        int int8 = org.apache.commons.io.IOUtils.length(charArray1);
        int int9 = org.apache.commons.io.IOUtils.read(reader0, charArray1);
        java.io.Writer writer10 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(charArray1, writer10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Writer.write(char[])\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray1);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray1), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray1), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray1), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test0858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0858");
        java.io.Reader reader0 = null;
        java.io.Writer writer1 = null;
        char[] charArray4 = new char[] {};
        int int5 = org.apache.commons.io.IOUtils.length(charArray4);
        java.io.Writer writer6 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray4, writer6);
        java.io.Writer writer8 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray4, writer8);
        long long10 = org.apache.commons.io.IOUtils.copyLarge(reader0, writer1, 0L, (long) (byte) 100, charArray4);
        java.io.OutputStream outputStream11 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(charArray4, outputStream11, "hi!");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: hi!");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
    }

    @Test
    public void test0859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0859");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.BufferedInputStream bufferedInputStream10 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.io.InputStream inputStream12 = org.apache.commons.io.IOUtils.toBufferedInputStream((java.io.InputStream) bufferedInputStream10, (int) '#');
        long long14 = org.apache.commons.io.IOUtils.skip(inputStream12, (long) 6);
        java.nio.charset.Charset charset15 = null;
        org.apache.commons.io.LineIterator lineIterator16 = org.apache.commons.io.IOUtils.lineIterator(inputStream12, charset15);
        java.io.InputStream inputStream18 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray19 = org.apache.commons.io.IOUtils.toByteArray(inputStream18);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream18);
        java.util.List<java.lang.String> strList21 = org.apache.commons.io.IOUtils.readLines(inputStream18);
        java.io.OutputStream outputStream22 = null;
        long long25 = org.apache.commons.io.IOUtils.copyLarge(inputStream18, outputStream22, (long) 0, 0L);
        java.io.InputStream inputStream27 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream18, 100);
        boolean boolean28 = org.apache.commons.io.IOUtils.contentEquals(inputStream12, inputStream18);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream10);
        org.junit.Assert.assertNotNull(inputStream12);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(lineIterator16);
        org.junit.Assert.assertNotNull(inputStream18);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertNotNull(strList21);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(inputStream27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
    }

    @Test
    public void test0860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0860");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.util.List<java.lang.String> strList4 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.OutputStream outputStream5 = null;
        long long6 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream5);
        java.io.Writer writer7 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer7);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream11 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray12 = new byte[] {};
        int int13 = org.apache.commons.io.IOUtils.length(byteArray12);
        int int14 = org.apache.commons.io.IOUtils.read(inputStream11, byteArray12);
        byte[] byteArray15 = org.apache.commons.io.IOUtils.toByteArray(inputStream11);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer16 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream11, iOExceptionConsumer16);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream11);
        java.io.BufferedInputStream bufferedInputStream20 = org.apache.commons.io.IOUtils.buffer(inputStream11, (int) (byte) 10);
        java.io.InputStream inputStream22 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream11, (int) (byte) 1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer23 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream11, iOExceptionConsumer23);
        java.io.OutputStream outputStream25 = null;
        java.io.InputStream inputStream27 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray28 = new byte[] {};
        int int29 = org.apache.commons.io.IOUtils.length(byteArray28);
        int int30 = org.apache.commons.io.IOUtils.read(inputStream27, byteArray28);
        byte[] byteArray31 = org.apache.commons.io.IOUtils.toByteArray(inputStream27);
        java.io.InputStream inputStream33 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray34 = new byte[] {};
        int int35 = org.apache.commons.io.IOUtils.length(byteArray34);
        int int36 = org.apache.commons.io.IOUtils.read(inputStream33, byteArray34);
        byte[] byteArray37 = org.apache.commons.io.IOUtils.toByteArray(inputStream33);
        int int38 = org.apache.commons.io.IOUtils.length(byteArray37);
        org.apache.commons.io.IOUtils.readFully(inputStream27, byteArray37);
        long long40 = org.apache.commons.io.IOUtils.copyLarge(inputStream11, outputStream25, byteArray37);
        boolean boolean41 = org.apache.commons.io.IOUtils.contentEquals(inputStream1, inputStream11);
        java.io.BufferedInputStream bufferedInputStream43 = org.apache.commons.io.IOUtils.buffer(inputStream1, 5);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer44 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) bufferedInputStream43, iOExceptionConsumer44);
        java.io.BufferedInputStream bufferedInputStream47 = org.apache.commons.io.IOUtils.buffer((java.io.InputStream) bufferedInputStream43, 2);
        java.io.Writer writer48 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.copy((java.io.InputStream) bufferedInputStream43, writer48);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Stream closed");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(inputStream11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream20);
        org.junit.Assert.assertNotNull(inputStream22);
        org.junit.Assert.assertNotNull(inputStream27);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(inputStream33);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(bufferedInputStream43);
        org.junit.Assert.assertNotNull(bufferedInputStream47);
    }

    @Test
    public void test0861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0861");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.BufferedInputStream bufferedInputStream10 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.io.InputStream inputStream12 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, (int) (byte) 1);
        java.io.OutputStream outputStream13 = null;
        int int14 = org.apache.commons.io.IOUtils.copy(inputStream12, outputStream13);
        java.io.BufferedInputStream bufferedInputStream16 = org.apache.commons.io.IOUtils.buffer(inputStream12, (int) (byte) 10);
        char[] charArray17 = org.apache.commons.io.IOUtils.toCharArray((java.io.InputStream) bufferedInputStream16);
        java.io.InputStream inputStream19 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray20 = org.apache.commons.io.IOUtils.toByteArray(inputStream19);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream19);
        java.util.List<java.lang.String> strList22 = org.apache.commons.io.IOUtils.readLines(inputStream19);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer23 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream19, iOExceptionConsumer23);
        java.io.InputStream inputStream26 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray27 = org.apache.commons.io.IOUtils.toByteArray(inputStream26);
        int int28 = org.apache.commons.io.IOUtils.read(inputStream19, byteArray27);
        org.apache.commons.io.IOUtils.readFully((java.io.InputStream) bufferedInputStream16, byteArray27, (int) ' ', 0);
        java.io.Writer writer32 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(byteArray27, writer32, "");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream10);
        org.junit.Assert.assertNotNull(inputStream12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(bufferedInputStream16);
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[]");
        org.junit.Assert.assertNotNull(inputStream19);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertNotNull(strList22);
        org.junit.Assert.assertNotNull(inputStream26);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
    }

    @Test
    public void test0862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0862");
        java.io.InputStream inputStream0 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long2 = org.apache.commons.io.IOUtils.skip(inputStream0, (long) 6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.InputStream.read(byte[], int, int)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0863");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream3 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1);
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream3);
        java.io.BufferedInputStream bufferedInputStream6 = org.apache.commons.io.IOUtils.buffer(inputStream4, 3);
        java.io.OutputStream outputStream7 = null;
        long long8 = org.apache.commons.io.IOUtils.copyLarge(inputStream4, outputStream7);
        java.io.Writer writer9 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.copy(inputStream4, writer9, "");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream3);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(bufferedInputStream6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
    }

    @Test
    public void test0864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0864");
        java.io.Reader reader0 = null;
        java.io.Writer writer1 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long4 = org.apache.commons.io.IOUtils.copyLarge(reader0, writer1, 0L, (long) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[], int, int)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0865");
        java.io.Reader reader0 = null;
        java.io.Reader reader1 = null;
        java.io.Writer writer2 = null;
        char[] charArray5 = new char[] {};
        int int6 = org.apache.commons.io.IOUtils.length(charArray5);
        java.io.Writer writer7 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray5, writer7);
        java.io.Writer writer9 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray5, writer9);
        long long11 = org.apache.commons.io.IOUtils.copyLarge(reader1, writer2, 0L, (long) (byte) 100, charArray5);
        java.io.Writer writer12 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray5, writer12);
        java.io.Writer writer14 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray5, writer14);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.readFully(reader0, charArray5, (int) 'a', (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[], int, int)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
    }

    @Test
    public void test0866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0866");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.util.List<java.lang.String> strList4 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.OutputStream outputStream5 = null;
        long long6 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream5);
        java.io.Writer writer7 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer7);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream11 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray12 = new byte[] {};
        int int13 = org.apache.commons.io.IOUtils.length(byteArray12);
        int int14 = org.apache.commons.io.IOUtils.read(inputStream11, byteArray12);
        byte[] byteArray15 = org.apache.commons.io.IOUtils.toByteArray(inputStream11);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer16 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream11, iOExceptionConsumer16);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream11);
        java.io.BufferedInputStream bufferedInputStream20 = org.apache.commons.io.IOUtils.buffer(inputStream11, (int) (byte) 10);
        java.io.InputStream inputStream22 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream11, (int) (byte) 1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer23 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream11, iOExceptionConsumer23);
        java.io.OutputStream outputStream25 = null;
        java.io.InputStream inputStream27 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray28 = new byte[] {};
        int int29 = org.apache.commons.io.IOUtils.length(byteArray28);
        int int30 = org.apache.commons.io.IOUtils.read(inputStream27, byteArray28);
        byte[] byteArray31 = org.apache.commons.io.IOUtils.toByteArray(inputStream27);
        java.io.InputStream inputStream33 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray34 = new byte[] {};
        int int35 = org.apache.commons.io.IOUtils.length(byteArray34);
        int int36 = org.apache.commons.io.IOUtils.read(inputStream33, byteArray34);
        byte[] byteArray37 = org.apache.commons.io.IOUtils.toByteArray(inputStream33);
        int int38 = org.apache.commons.io.IOUtils.length(byteArray37);
        org.apache.commons.io.IOUtils.readFully(inputStream27, byteArray37);
        long long40 = org.apache.commons.io.IOUtils.copyLarge(inputStream11, outputStream25, byteArray37);
        boolean boolean41 = org.apache.commons.io.IOUtils.contentEquals(inputStream1, inputStream11);
        // The following exception was thrown during execution in test generation
        try {
            char[] charArray43 = org.apache.commons.io.IOUtils.toCharArray(inputStream1, "hi!");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: hi!");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(inputStream11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream20);
        org.junit.Assert.assertNotNull(inputStream22);
        org.junit.Assert.assertNotNull(inputStream27);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(inputStream33);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
    }

    @Test
    public void test0867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0867");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        java.nio.charset.Charset charset10 = null;
        java.util.List<java.lang.String> strList11 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset10);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.lang.String str13 = org.apache.commons.io.IOUtils.toString(inputStream1);
        java.io.InputStream inputStream15 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray16 = new byte[] {};
        int int17 = org.apache.commons.io.IOUtils.length(byteArray16);
        int int18 = org.apache.commons.io.IOUtils.read(inputStream15, byteArray16);
        byte[] byteArray19 = org.apache.commons.io.IOUtils.toByteArray(inputStream15);
        byte[] byteArray21 = org.apache.commons.io.IOUtils.toByteArray(inputStream15, (int) (short) 0);
        java.io.OutputStream outputStream22 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray21, outputStream22);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray21, 0, 6);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Range [0, 0 + 6) out of bounds for length 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(inputStream15);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
    }

    @Test
    public void test0868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0868");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream5 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray("");
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray10);
        long long12 = org.apache.commons.io.IOUtils.copyLarge(inputStream4, outputStream5, 0L, 0L, byteArray10);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, byteArray10);
        java.io.BufferedInputStream bufferedInputStream15 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        org.apache.commons.io.IOUtils.closeQuietly(inputStream1);
        java.nio.charset.Charset charset17 = null;
        java.util.List<java.lang.String> strList18 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset17);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.io.OutputStream outputStream20 = null;
        int int21 = org.apache.commons.io.IOUtils.copy(inputStream1, outputStream20);
        java.io.InputStream inputStream23 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray24 = new byte[] {};
        int int25 = org.apache.commons.io.IOUtils.length(byteArray24);
        int int26 = org.apache.commons.io.IOUtils.read(inputStream23, byteArray24);
        byte[] byteArray27 = org.apache.commons.io.IOUtils.toByteArray(inputStream23);
        byte[] byteArray29 = org.apache.commons.io.IOUtils.toByteArray(inputStream23, (int) (short) 0);
        byte[] byteArray30 = new byte[] {};
        int int31 = org.apache.commons.io.IOUtils.length(byteArray30);
        org.apache.commons.io.IOUtils.readFully(inputStream23, byteArray30);
        int int33 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray30);
        java.io.Writer writer34 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.copy(inputStream1, writer34, "");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream15);
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(inputStream23);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
    }

    @Test
    public void test0869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0869");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream5 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray("");
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray10);
        long long12 = org.apache.commons.io.IOUtils.copyLarge(inputStream4, outputStream5, 0L, 0L, byteArray10);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, byteArray10);
        java.io.BufferedInputStream bufferedInputStream15 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.io.InputStream inputStream17 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray18 = org.apache.commons.io.IOUtils.toByteArray(inputStream17);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream17);
        java.io.InputStream inputStream21 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream22 = null;
        java.io.InputStream inputStream25 = null;
        byte[] byteArray27 = org.apache.commons.io.IOUtils.toByteArray("");
        int int28 = org.apache.commons.io.IOUtils.read(inputStream25, byteArray27);
        long long29 = org.apache.commons.io.IOUtils.copyLarge(inputStream21, outputStream22, 0L, 0L, byteArray27);
        java.nio.charset.Charset charset30 = null;
        java.util.List<java.lang.String> strList31 = org.apache.commons.io.IOUtils.readLines(inputStream21, charset30);
        java.io.InputStream inputStream33 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream34 = null;
        java.io.InputStream inputStream37 = null;
        byte[] byteArray39 = org.apache.commons.io.IOUtils.toByteArray("");
        int int40 = org.apache.commons.io.IOUtils.read(inputStream37, byteArray39);
        long long41 = org.apache.commons.io.IOUtils.copyLarge(inputStream33, outputStream34, 0L, 0L, byteArray39);
        java.nio.charset.Charset charset42 = null;
        java.util.List<java.lang.String> strList43 = org.apache.commons.io.IOUtils.readLines(inputStream33, charset42);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream33);
        boolean boolean45 = org.apache.commons.io.IOUtils.contentEquals(inputStream21, inputStream33);
        java.io.OutputStream outputStream46 = null;
        java.io.InputStream inputStream48 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream49 = null;
        java.io.InputStream inputStream52 = null;
        byte[] byteArray54 = org.apache.commons.io.IOUtils.toByteArray("");
        int int55 = org.apache.commons.io.IOUtils.read(inputStream52, byteArray54);
        long long56 = org.apache.commons.io.IOUtils.copyLarge(inputStream48, outputStream49, 0L, 0L, byteArray54);
        long long57 = org.apache.commons.io.IOUtils.copyLarge(inputStream33, outputStream46, byteArray54);
        org.apache.commons.io.IOUtils.readFully(inputStream17, byteArray54);
        org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray54);
        java.lang.String str60 = org.apache.commons.io.IOUtils.toString(inputStream1);
        java.io.BufferedInputStream bufferedInputStream62 = org.apache.commons.io.IOUtils.buffer(inputStream1, 100);
        // The following exception was thrown during execution in test generation
        try {
            char[] charArray64 = org.apache.commons.io.IOUtils.toCharArray((java.io.InputStream) bufferedInputStream62, "");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream15);
        org.junit.Assert.assertNotNull(inputStream17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(inputStream21);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNotNull(strList31);
        org.junit.Assert.assertNotNull(inputStream33);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertNotNull(strList43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(inputStream48);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(bufferedInputStream62);
    }

    @Test
    public void test0870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0870");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray(inputStream1, (int) (short) 0);
        java.io.BufferedInputStream bufferedInputStream8 = org.apache.commons.io.IOUtils.buffer(inputStream1);
        byte[] byteArray9 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int12 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray9, 0, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"b\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream8);
    }

    @Test
    public void test0871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0871");
        java.nio.charset.Charset charset1 = null;
        java.io.InputStream inputStream2 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "", charset1);
        java.util.List<java.lang.String> strList3 = org.apache.commons.io.IOUtils.readLines(inputStream2);
        java.io.OutputStream outputStream5 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList3, "\n", outputStream5);
        java.io.Writer writer8 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList3, "", writer8);
        java.io.OutputStream outputStream11 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList3, "\r\n", outputStream11, "\r\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ??");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream2);
        org.junit.Assert.assertNotNull(strList3);
    }

    @Test
    public void test0872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0872");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream5 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray("");
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray10);
        long long12 = org.apache.commons.io.IOUtils.copyLarge(inputStream4, outputStream5, 0L, 0L, byteArray10);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, byteArray10);
        java.io.BufferedInputStream bufferedInputStream15 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.nio.charset.Charset charset16 = null;
        java.util.List<java.lang.String> strList17 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset16);
        java.io.Writer writer19 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList17, "", writer19);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream15);
        org.junit.Assert.assertNotNull(strList17);
    }

    @Test
    public void test0873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0873");
        char[] charArray3 = new char[] { 'a', '\\', '4' };
        int int4 = org.apache.commons.io.IOUtils.length(charArray3);
        java.io.OutputStream outputStream5 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(charArray3, outputStream5, "");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray3), "a\\4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray3), "a\\4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray3), "[a, \\, 4]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3);
    }

    @Test
    public void test0874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0874");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        java.io.OutputStream outputStream10 = null;
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream10, (long) (short) 0, (-1L));
        char[] charArray14 = org.apache.commons.io.IOUtils.toCharArray(inputStream1);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream17 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray18 = new byte[] {};
        int int19 = org.apache.commons.io.IOUtils.length(byteArray18);
        int int20 = org.apache.commons.io.IOUtils.read(inputStream17, byteArray18);
        byte[] byteArray21 = org.apache.commons.io.IOUtils.toByteArray(inputStream17);
        byte[] byteArray23 = org.apache.commons.io.IOUtils.toByteArray(inputStream17, (int) (short) 0);
        java.io.BufferedInputStream bufferedInputStream24 = org.apache.commons.io.IOUtils.buffer(inputStream17);
        byte[] byteArray25 = org.apache.commons.io.IOUtils.toByteArray((java.io.InputStream) bufferedInputStream24);
        int int26 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray25);
        java.lang.String str27 = org.apache.commons.io.IOUtils.toString(inputStream1);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[]");
        org.junit.Assert.assertNotNull(inputStream17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
    }

    @Test
    public void test0875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0875");
        java.nio.channels.ReadableByteChannel readableByteChannel0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.skipFully(readableByteChannel0, (long) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.nio.channels.ReadableByteChannel.read(java.nio.ByteBuffer)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0876");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray(inputStream1, (int) (short) 0);
        long long9 = org.apache.commons.io.IOUtils.skip(inputStream1, 100L);
        java.io.InputStream inputStream10 = null;
        java.io.InputStream inputStream11 = null;
        java.io.OutputStream outputStream12 = null;
        byte[] byteArray15 = new byte[] {};
        int int16 = org.apache.commons.io.IOUtils.length(byteArray15);
        java.io.OutputStream outputStream17 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray15, outputStream17);
        long long19 = org.apache.commons.io.IOUtils.copyLarge(inputStream11, outputStream12, 0L, (long) (byte) -1, byteArray15);
        java.io.OutputStream outputStream20 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray15, outputStream20);
        org.apache.commons.io.IOUtils.readFully(inputStream10, byteArray15);
        int int23 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray15);
        java.io.InputStream inputStream24 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1);
        java.io.BufferedInputStream bufferedInputStream25 = org.apache.commons.io.IOUtils.buffer(inputStream1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.skipFully(inputStream1, (long) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.io.EOFException; message: Bytes to skip: 1 actual: 0");
        } catch (java.io.EOFException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(inputStream24);
        org.junit.Assert.assertNotNull(bufferedInputStream25);
    }

    @Test
    public void test0877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0877");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream5 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray("");
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray10);
        long long12 = org.apache.commons.io.IOUtils.copyLarge(inputStream4, outputStream5, 0L, 0L, byteArray10);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, byteArray10);
        java.io.BufferedInputStream bufferedInputStream15 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        org.apache.commons.io.IOUtils.closeQuietly(inputStream1);
        java.nio.charset.Charset charset17 = null;
        java.util.List<java.lang.String> strList18 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset17);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.nio.charset.Charset charset20 = null;
        java.lang.String str21 = org.apache.commons.io.IOUtils.toString(inputStream1, charset20);
        java.io.OutputStream outputStream22 = null;
        java.io.InputStream inputStream26 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream26);
        byte[] byteArray28 = org.apache.commons.io.IOUtils.toByteArray(inputStream26);
        byte[] byteArray29 = org.apache.commons.io.IOUtils.toByteArray(inputStream26);
        // The following exception was thrown during execution in test generation
        try {
            long long30 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream22, (long) '4', (long) 'a', byteArray29);
            org.junit.Assert.fail("Expected exception of type java.io.EOFException; message: Bytes to skip: 52 actual: 0");
        } catch (java.io.EOFException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream15);
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(inputStream26);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
    }

    @Test
    public void test0878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0878");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.util.List<java.lang.String> strList4 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.OutputStream outputStream5 = null;
        long long6 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream5);
        java.io.OutputStream outputStream7 = null;
        java.io.InputStream inputStream11 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray12 = new byte[] {};
        int int13 = org.apache.commons.io.IOUtils.length(byteArray12);
        int int14 = org.apache.commons.io.IOUtils.read(inputStream11, byteArray12);
        long long15 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream7, (-1L), 1L, byteArray12);
        java.io.OutputStream outputStream16 = null;
        java.io.InputStream inputStream20 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream21 = null;
        java.io.InputStream inputStream24 = null;
        byte[] byteArray26 = org.apache.commons.io.IOUtils.toByteArray("");
        int int27 = org.apache.commons.io.IOUtils.read(inputStream24, byteArray26);
        long long28 = org.apache.commons.io.IOUtils.copyLarge(inputStream20, outputStream21, 0L, 0L, byteArray26);
        java.io.OutputStream outputStream29 = null;
        long long32 = org.apache.commons.io.IOUtils.copyLarge(inputStream20, outputStream29, (long) (short) 0, (-1L));
        java.lang.String str33 = org.apache.commons.io.IOUtils.toString(inputStream20);
        java.io.InputStream inputStream34 = null;
        java.io.OutputStream outputStream35 = null;
        byte[] byteArray38 = new byte[] {};
        int int39 = org.apache.commons.io.IOUtils.length(byteArray38);
        java.io.OutputStream outputStream40 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray38, outputStream40);
        long long42 = org.apache.commons.io.IOUtils.copyLarge(inputStream34, outputStream35, 0L, (long) (byte) -1, byteArray38);
        java.io.OutputStream outputStream43 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray38, outputStream43);
        int int45 = org.apache.commons.io.IOUtils.length(byteArray38);
        int int46 = org.apache.commons.io.IOUtils.read(inputStream20, byteArray38);
        long long47 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream16, (long) (byte) -1, (long) 10, byteArray38);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str49 = org.apache.commons.io.IOUtils.toString(byteArray38, "");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(inputStream11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(inputStream20);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
    }

    @Test
    public void test0879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0879");
        java.io.Reader reader0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.BufferedReader bufferedReader2 = org.apache.commons.io.IOUtils.buffer(reader0, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0880");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.util.List<java.lang.String> strList4 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly(inputStream1);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(strList4);
    }

    @Test
    public void test0881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0881");
        java.io.Reader reader0 = null;
        char[] charArray5 = new char[] { '4', 'a', '#', 'a' };
        int int6 = org.apache.commons.io.IOUtils.length(charArray5);
        int int7 = org.apache.commons.io.IOUtils.length(charArray5);
        int int8 = org.apache.commons.io.IOUtils.length(charArray5);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.readFully(reader0, charArray5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[], int, int)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "4a#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "4a#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[4, a, #, a]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 4 + "'", int6 == 4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4 + "'", int7 == 4);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 4 + "'", int8 == 4);
    }

    @Test
    public void test0882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0882");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.util.List<java.lang.String> strList4 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.OutputStream outputStream5 = null;
        long long6 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream5);
        java.io.Writer writer7 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer7);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream11 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray12 = new byte[] {};
        int int13 = org.apache.commons.io.IOUtils.length(byteArray12);
        int int14 = org.apache.commons.io.IOUtils.read(inputStream11, byteArray12);
        byte[] byteArray15 = org.apache.commons.io.IOUtils.toByteArray(inputStream11);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer16 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream11, iOExceptionConsumer16);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream11);
        java.io.BufferedInputStream bufferedInputStream20 = org.apache.commons.io.IOUtils.buffer(inputStream11, (int) (byte) 10);
        java.io.InputStream inputStream22 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream11, (int) (byte) 1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer23 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream11, iOExceptionConsumer23);
        java.io.OutputStream outputStream25 = null;
        java.io.InputStream inputStream27 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray28 = new byte[] {};
        int int29 = org.apache.commons.io.IOUtils.length(byteArray28);
        int int30 = org.apache.commons.io.IOUtils.read(inputStream27, byteArray28);
        byte[] byteArray31 = org.apache.commons.io.IOUtils.toByteArray(inputStream27);
        java.io.InputStream inputStream33 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray34 = new byte[] {};
        int int35 = org.apache.commons.io.IOUtils.length(byteArray34);
        int int36 = org.apache.commons.io.IOUtils.read(inputStream33, byteArray34);
        byte[] byteArray37 = org.apache.commons.io.IOUtils.toByteArray(inputStream33);
        int int38 = org.apache.commons.io.IOUtils.length(byteArray37);
        org.apache.commons.io.IOUtils.readFully(inputStream27, byteArray37);
        long long40 = org.apache.commons.io.IOUtils.copyLarge(inputStream11, outputStream25, byteArray37);
        boolean boolean41 = org.apache.commons.io.IOUtils.contentEquals(inputStream1, inputStream11);
        java.io.BufferedInputStream bufferedInputStream43 = org.apache.commons.io.IOUtils.buffer(inputStream1, 5);
        java.io.InputStream inputStream45 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream46 = null;
        java.io.InputStream inputStream49 = null;
        byte[] byteArray51 = org.apache.commons.io.IOUtils.toByteArray("");
        int int52 = org.apache.commons.io.IOUtils.read(inputStream49, byteArray51);
        long long53 = org.apache.commons.io.IOUtils.copyLarge(inputStream45, outputStream46, 0L, 0L, byteArray51);
        java.nio.charset.Charset charset54 = null;
        java.util.List<java.lang.String> strList55 = org.apache.commons.io.IOUtils.readLines(inputStream45, charset54);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream45);
        java.nio.charset.Charset charset57 = null;
        java.lang.String str58 = org.apache.commons.io.IOUtils.toString(inputStream45, charset57);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer59 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream45, iOExceptionConsumer59);
        boolean boolean61 = org.apache.commons.io.IOUtils.contentEquals((java.io.InputStream) bufferedInputStream43, inputStream45);
        java.io.InputStream inputStream63 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream64 = null;
        java.io.InputStream inputStream66 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream67 = null;
        java.io.InputStream inputStream70 = null;
        byte[] byteArray72 = org.apache.commons.io.IOUtils.toByteArray("");
        int int73 = org.apache.commons.io.IOUtils.read(inputStream70, byteArray72);
        long long74 = org.apache.commons.io.IOUtils.copyLarge(inputStream66, outputStream67, 0L, 0L, byteArray72);
        long long75 = org.apache.commons.io.IOUtils.copyLarge(inputStream63, outputStream64, byteArray72);
        java.lang.String str76 = org.apache.commons.io.IOUtils.toString(byteArray72);
        org.apache.commons.io.IOUtils.readFully(inputStream45, byteArray72);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str79 = org.apache.commons.io.IOUtils.toString(byteArray72, "\r\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ??");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(inputStream11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream20);
        org.junit.Assert.assertNotNull(inputStream22);
        org.junit.Assert.assertNotNull(inputStream27);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(inputStream33);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(bufferedInputStream43);
        org.junit.Assert.assertNotNull(inputStream45);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertNotNull(strList55);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(inputStream63);
        org.junit.Assert.assertNotNull(inputStream66);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 0L + "'", long74 == 0L);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 0L + "'", long75 == 0L);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
    }

    @Test
    public void test0883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0883");
        java.io.Reader reader0 = null;
        java.io.Reader reader1 = null;
        java.io.Writer writer2 = null;
        char[] charArray5 = new char[] {};
        int int6 = org.apache.commons.io.IOUtils.length(charArray5);
        java.io.Writer writer7 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray5, writer7);
        java.io.Writer writer9 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray5, writer9);
        long long11 = org.apache.commons.io.IOUtils.copyLarge(reader1, writer2, 0L, (long) (byte) 100, charArray5);
        // The following exception was thrown during execution in test generation
        try {
            int int14 = org.apache.commons.io.IOUtils.read(reader0, charArray5, (int) (short) 10, (int) '\\');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[], int, int)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
    }

    @Test
    public void test0884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0884");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.io.InputStream inputStream7 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, (int) (byte) 0);
        java.nio.charset.Charset charset8 = null;
        org.apache.commons.io.LineIterator lineIterator9 = org.apache.commons.io.IOUtils.lineIterator(inputStream7, charset8);
        java.io.BufferedInputStream bufferedInputStream10 = org.apache.commons.io.IOUtils.buffer(inputStream7);
        java.lang.Class<?> wildcardClass11 = inputStream7.getClass();
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(inputStream7);
        org.junit.Assert.assertNotNull(lineIterator9);
        org.junit.Assert.assertNotNull(bufferedInputStream10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0885");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        java.nio.charset.Charset charset10 = null;
        java.util.List<java.lang.String> strList11 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset10);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.lang.String str13 = org.apache.commons.io.IOUtils.toString(inputStream1);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str15 = org.apache.commons.io.IOUtils.toString(inputStream1, "");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
    }

    @Test
    public void test0886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0886");
        java.io.Reader reader0 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long2 = org.apache.commons.io.IOUtils.skip(reader0, (long) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[], int, int)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0887");
        java.io.Reader reader0 = null;
        java.io.InputStream inputStream2 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray3 = new byte[] {};
        int int4 = org.apache.commons.io.IOUtils.length(byteArray3);
        int int5 = org.apache.commons.io.IOUtils.read(inputStream2, byteArray3);
        byte[] byteArray6 = org.apache.commons.io.IOUtils.toByteArray(inputStream2);
        java.nio.charset.Charset charset7 = null;
        java.util.List<java.lang.String> strList8 = org.apache.commons.io.IOUtils.readLines(inputStream2, charset7);
        java.nio.charset.Charset charset9 = null;
        org.apache.commons.io.LineIterator lineIterator10 = org.apache.commons.io.IOUtils.lineIterator(inputStream2, charset9);
        java.io.InputStream inputStream12 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream2, 6);
        java.nio.charset.Charset charset13 = null;
        char[] charArray14 = org.apache.commons.io.IOUtils.toCharArray(inputStream2, charset13);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.readFully(reader0, charArray14, (int) '\\', (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Length must not be negative: -1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertNotNull(lineIterator10);
        org.junit.Assert.assertNotNull(inputStream12);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[]");
    }

    @Test
    public void test0888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0888");
        java.io.Reader reader0 = null;
        java.io.Writer writer1 = null;
        java.io.InputStream inputStream5 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray6 = org.apache.commons.io.IOUtils.toByteArray(inputStream5);
        java.io.InputStream inputStream8 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray9 = new byte[] {};
        int int10 = org.apache.commons.io.IOUtils.length(byteArray9);
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray9);
        byte[] byteArray12 = org.apache.commons.io.IOUtils.toByteArray(inputStream8);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer13 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream8, iOExceptionConsumer13);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream8);
        java.io.BufferedInputStream bufferedInputStream17 = org.apache.commons.io.IOUtils.buffer(inputStream8, (int) (byte) 10);
        boolean boolean18 = org.apache.commons.io.IOUtils.contentEquals(inputStream5, inputStream8);
        java.io.OutputStream outputStream19 = null;
        long long22 = org.apache.commons.io.IOUtils.copyLarge(inputStream5, outputStream19, (long) (short) 0, (long) 2);
        char[] charArray23 = org.apache.commons.io.IOUtils.toCharArray(inputStream5);
        // The following exception was thrown during execution in test generation
        try {
            long long24 = org.apache.commons.io.IOUtils.copyLarge(reader0, writer1, 100L, (long) (-1), charArray23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[], int, int)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(inputStream8);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[]");
    }

    @Test
    public void test0889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0889");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.io.InputStream inputStream7 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray8 = new byte[] {};
        int int9 = org.apache.commons.io.IOUtils.length(byteArray8);
        int int10 = org.apache.commons.io.IOUtils.read(inputStream7, byteArray8);
        byte[] byteArray11 = org.apache.commons.io.IOUtils.toByteArray(inputStream7);
        int int12 = org.apache.commons.io.IOUtils.length(byteArray11);
        org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray11);
        java.io.InputStream inputStream14 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.skipFully(inputStream1, (long) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.io.EOFException; message: Bytes to skip: 1 actual: 0");
        } catch (java.io.EOFException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(inputStream7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(inputStream14);
    }

    @Test
    public void test0890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0890");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray5 = new byte[] {};
        int int6 = org.apache.commons.io.IOUtils.length(byteArray5);
        int int7 = org.apache.commons.io.IOUtils.read(inputStream4, byteArray5);
        byte[] byteArray8 = org.apache.commons.io.IOUtils.toByteArray(inputStream4);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer9 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream4, iOExceptionConsumer9);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream4);
        java.io.BufferedInputStream bufferedInputStream13 = org.apache.commons.io.IOUtils.buffer(inputStream4, (int) (byte) 10);
        boolean boolean14 = org.apache.commons.io.IOUtils.contentEquals(inputStream1, inputStream4);
        java.io.InputStream inputStream16 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray17 = new byte[] {};
        int int18 = org.apache.commons.io.IOUtils.length(byteArray17);
        int int19 = org.apache.commons.io.IOUtils.read(inputStream16, byteArray17);
        byte[] byteArray20 = org.apache.commons.io.IOUtils.toByteArray(inputStream16);
        byte[] byteArray22 = org.apache.commons.io.IOUtils.toByteArray(inputStream16, (int) (short) 0);
        long long24 = org.apache.commons.io.IOUtils.skip(inputStream16, 100L);
        java.io.InputStream inputStream25 = null;
        java.io.InputStream inputStream26 = null;
        java.io.OutputStream outputStream27 = null;
        byte[] byteArray30 = new byte[] {};
        int int31 = org.apache.commons.io.IOUtils.length(byteArray30);
        java.io.OutputStream outputStream32 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray30, outputStream32);
        long long34 = org.apache.commons.io.IOUtils.copyLarge(inputStream26, outputStream27, 0L, (long) (byte) -1, byteArray30);
        java.io.OutputStream outputStream35 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray30, outputStream35);
        org.apache.commons.io.IOUtils.readFully(inputStream25, byteArray30);
        int int38 = org.apache.commons.io.IOUtils.read(inputStream16, byteArray30);
        int int39 = org.apache.commons.io.IOUtils.read(inputStream4, byteArray30);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer40 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream4, iOExceptionConsumer40);
        java.nio.charset.Charset charset42 = null;
        char[] charArray43 = org.apache.commons.io.IOUtils.toCharArray(inputStream4, charset42);
        java.io.OutputStream outputStream44 = null;
        java.nio.charset.Charset charset45 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(charArray43, outputStream44, charset45);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.OutputStream.write(byte[])\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(inputStream16);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(charArray43);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray43), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray43), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray43), "[]");
    }

    @Test
    public void test0891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0891");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.BufferedInputStream bufferedInputStream3 = org.apache.commons.io.IOUtils.buffer(inputStream1, 100);
        java.io.BufferedInputStream bufferedInputStream4 = org.apache.commons.io.IOUtils.buffer((java.io.InputStream) bufferedInputStream3);
        java.io.InputStream inputStream6 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray(inputStream6);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream6);
        java.util.List<java.lang.String> strList9 = org.apache.commons.io.IOUtils.readLines(inputStream6);
        java.io.OutputStream outputStream10 = null;
        long long11 = org.apache.commons.io.IOUtils.copyLarge(inputStream6, outputStream10);
        java.io.OutputStream outputStream12 = null;
        java.io.InputStream inputStream16 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray17 = new byte[] {};
        int int18 = org.apache.commons.io.IOUtils.length(byteArray17);
        int int19 = org.apache.commons.io.IOUtils.read(inputStream16, byteArray17);
        long long20 = org.apache.commons.io.IOUtils.copyLarge(inputStream6, outputStream12, (-1L), 1L, byteArray17);
        java.io.OutputStream outputStream21 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray17, outputStream21);
        int int23 = org.apache.commons.io.IOUtils.length(byteArray17);
        java.io.OutputStream outputStream24 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray17, outputStream24);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.readFully((java.io.InputStream) bufferedInputStream3, byteArray17, (int) '\\', (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Length must not be negative: -1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(bufferedInputStream3);
        org.junit.Assert.assertNotNull(bufferedInputStream4);
        org.junit.Assert.assertNotNull(inputStream6);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(inputStream16);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
    }

    @Test
    public void test0892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0892");
        java.io.OutputStream outputStream1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write("hi!", outputStream1, "hi!");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: hi!");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0893");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream3 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1);
        byte[] byteArray8 = new byte[] { (byte) -1, (byte) 100, (byte) 1, (byte) -1 };
        int int9 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray8);
        java.io.OutputStream outputStream10 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.writeChunked(byteArray8, outputStream10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.OutputStream.write(byte[], int, int)\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream3);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-1, 100, 1, -1]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test0894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0894");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream5 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream6 = null;
        java.io.InputStream inputStream9 = null;
        byte[] byteArray11 = org.apache.commons.io.IOUtils.toByteArray("");
        int int12 = org.apache.commons.io.IOUtils.read(inputStream9, byteArray11);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream5, outputStream6, 0L, 0L, byteArray11);
        java.nio.charset.Charset charset14 = null;
        java.util.List<java.lang.String> strList15 = org.apache.commons.io.IOUtils.readLines(inputStream5, charset14);
        java.io.InputStream inputStream17 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream18 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray23 = org.apache.commons.io.IOUtils.toByteArray("");
        int int24 = org.apache.commons.io.IOUtils.read(inputStream21, byteArray23);
        long long25 = org.apache.commons.io.IOUtils.copyLarge(inputStream17, outputStream18, 0L, 0L, byteArray23);
        java.nio.charset.Charset charset26 = null;
        java.util.List<java.lang.String> strList27 = org.apache.commons.io.IOUtils.readLines(inputStream17, charset26);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream17);
        boolean boolean29 = org.apache.commons.io.IOUtils.contentEquals(inputStream5, inputStream17);
        java.io.OutputStream outputStream30 = null;
        java.io.InputStream inputStream32 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream33 = null;
        java.io.InputStream inputStream36 = null;
        byte[] byteArray38 = org.apache.commons.io.IOUtils.toByteArray("");
        int int39 = org.apache.commons.io.IOUtils.read(inputStream36, byteArray38);
        long long40 = org.apache.commons.io.IOUtils.copyLarge(inputStream32, outputStream33, 0L, 0L, byteArray38);
        long long41 = org.apache.commons.io.IOUtils.copyLarge(inputStream17, outputStream30, byteArray38);
        org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray38);
        java.io.OutputStream outputStream43 = null;
        long long44 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream43);
        // The following exception was thrown during execution in test generation
        try {
            char[] charArray46 = org.apache.commons.io.IOUtils.toCharArray(inputStream1, "\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ?");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(inputStream5);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(strList15);
        org.junit.Assert.assertNotNull(inputStream17);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(strList27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(inputStream32);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
    }

    @Test
    public void test0895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0895");
        java.io.Reader reader0 = null;
        java.io.Writer writer1 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long4 = org.apache.commons.io.IOUtils.copyLarge(reader0, writer1, (long) (short) -1, (long) '\\');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[], int, int)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0896");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream5 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray("");
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray10);
        long long12 = org.apache.commons.io.IOUtils.copyLarge(inputStream4, outputStream5, 0L, 0L, byteArray10);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, byteArray10);
        java.io.BufferedInputStream bufferedInputStream15 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.nio.charset.Charset charset16 = null;
        java.util.List<java.lang.String> strList17 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset16);
        java.io.OutputStream outputStream18 = null;
        long long21 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream18, 0L, (long) 0);
        java.io.OutputStream outputStream22 = null;
        long long25 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream22, (long) (short) -1, (long) 10);
        java.io.OutputStream outputStream26 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long29 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream26, (long) 10, (long) '#');
            org.junit.Assert.fail("Expected exception of type java.io.EOFException; message: Bytes to skip: 10 actual: 0");
        } catch (java.io.EOFException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream15);
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
    }

    @Test
    public void test0897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0897");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.BufferedInputStream bufferedInputStream10 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.io.InputStream inputStream12 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, (int) (byte) 1);
        java.nio.charset.Charset charset13 = null;
        char[] charArray14 = org.apache.commons.io.IOUtils.toCharArray(inputStream1, charset13);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream17 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray18 = new byte[] {};
        int int19 = org.apache.commons.io.IOUtils.length(byteArray18);
        int int20 = org.apache.commons.io.IOUtils.read(inputStream17, byteArray18);
        byte[] byteArray21 = org.apache.commons.io.IOUtils.toByteArray(inputStream17);
        byte[] byteArray23 = org.apache.commons.io.IOUtils.toByteArray(inputStream17, (int) (short) 0);
        byte[] byteArray24 = new byte[] {};
        int int25 = org.apache.commons.io.IOUtils.length(byteArray24);
        org.apache.commons.io.IOUtils.readFully(inputStream17, byteArray24);
        java.lang.String str27 = org.apache.commons.io.IOUtils.toString(byteArray24);
        int int28 = org.apache.commons.io.IOUtils.length(byteArray24);
        org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray24);
        java.io.Writer writer30 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(byteArray24, writer30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Writer.write(String)\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream10);
        org.junit.Assert.assertNotNull(inputStream12);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[]");
        org.junit.Assert.assertNotNull(inputStream17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
    }

    @Test
    public void test0898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0898");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream5 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray("");
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray10);
        long long12 = org.apache.commons.io.IOUtils.copyLarge(inputStream4, outputStream5, 0L, 0L, byteArray10);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, byteArray10);
        java.io.BufferedInputStream bufferedInputStream15 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        byte[] byteArray16 = org.apache.commons.io.IOUtils.toByteArray((java.io.InputStream) bufferedInputStream15);
        java.io.InputStream inputStream17 = null;
        java.io.OutputStream outputStream18 = null;
        byte[] byteArray21 = new byte[] {};
        int int22 = org.apache.commons.io.IOUtils.length(byteArray21);
        java.io.OutputStream outputStream23 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray21, outputStream23);
        long long25 = org.apache.commons.io.IOUtils.copyLarge(inputStream17, outputStream18, 0L, (long) (byte) -1, byteArray21);
        java.io.OutputStream outputStream26 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray21, outputStream26);
        int int28 = org.apache.commons.io.IOUtils.length(byteArray21);
        org.apache.commons.io.IOUtils.readFully((java.io.InputStream) bufferedInputStream15, byteArray21);
        int int30 = org.apache.commons.io.IOUtils.length(byteArray21);
        java.io.Writer writer31 = null;
        java.nio.charset.Charset charset32 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(byteArray21, writer31, charset32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Writer.write(String)\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream15);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
    }

    @Test
    public void test0899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0899");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream5 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray("");
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray10);
        long long12 = org.apache.commons.io.IOUtils.copyLarge(inputStream4, outputStream5, 0L, 0L, byteArray10);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, byteArray10);
        java.io.BufferedInputStream bufferedInputStream15 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        org.apache.commons.io.IOUtils.closeQuietly(inputStream1);
        java.nio.charset.Charset charset17 = null;
        java.util.List<java.lang.String> strList18 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset17);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.String> strList20 = org.apache.commons.io.IOUtils.readLines(inputStream1, "\r\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ??");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream15);
        org.junit.Assert.assertNotNull(strList18);
    }

    @Test
    public void test0900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0900");
        java.io.Reader reader0 = null;
        java.io.Reader reader1 = null;
        char[] charArray2 = new char[] {};
        int int3 = org.apache.commons.io.IOUtils.length(charArray2);
        java.io.Writer writer4 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray2, writer4);
        int int6 = org.apache.commons.io.IOUtils.read(reader1, charArray2);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.readFully(reader0, charArray2, 1, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[], int, int)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray2), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray2), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test0901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0901");
        byte[] byteArray1 = org.apache.commons.io.IOUtils.toByteArray("\n");
        java.io.OutputStream outputStream2 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(byteArray1, outputStream2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.OutputStream.write(byte[])\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[10]");
    }

    @Test
    public void test0902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0902");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.util.List<java.lang.String> strList4 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.OutputStream outputStream5 = null;
        long long6 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream5);
        java.io.OutputStream outputStream7 = null;
        java.io.InputStream inputStream11 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray12 = new byte[] {};
        int int13 = org.apache.commons.io.IOUtils.length(byteArray12);
        int int14 = org.apache.commons.io.IOUtils.read(inputStream11, byteArray12);
        long long15 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream7, (-1L), 1L, byteArray12);
        java.io.OutputStream outputStream16 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(byteArray12, outputStream16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.OutputStream.write(byte[])\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(inputStream11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
    }

    @Test
    public void test0903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0903");
        java.io.Reader reader0 = null;
        java.io.Writer writer1 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long4 = org.apache.commons.io.IOUtils.copyLarge(reader0, writer1, (long) (byte) 0, (long) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[], int, int)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0904");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.BufferedInputStream bufferedInputStream10 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.io.InputStream inputStream12 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, (int) (byte) 1);
        java.io.OutputStream outputStream13 = null;
        int int14 = org.apache.commons.io.IOUtils.copy(inputStream12, outputStream13);
        java.io.BufferedInputStream bufferedInputStream16 = org.apache.commons.io.IOUtils.buffer(inputStream12, (int) (byte) 10);
        byte[] byteArray18 = org.apache.commons.io.IOUtils.toByteArray(inputStream12, 0);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str20 = org.apache.commons.io.IOUtils.toString(byteArray18, "hi!");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: hi!");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream10);
        org.junit.Assert.assertNotNull(inputStream12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(bufferedInputStream16);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
    }

    @Test
    public void test0905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0905");
        java.io.Reader reader0 = null;
        java.io.Writer writer1 = null;
        java.io.InputStream inputStream5 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray6 = org.apache.commons.io.IOUtils.toByteArray(inputStream5);
        java.io.InputStream inputStream8 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray9 = new byte[] {};
        int int10 = org.apache.commons.io.IOUtils.length(byteArray9);
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray9);
        byte[] byteArray12 = org.apache.commons.io.IOUtils.toByteArray(inputStream8);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer13 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream8, iOExceptionConsumer13);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream8);
        java.io.BufferedInputStream bufferedInputStream17 = org.apache.commons.io.IOUtils.buffer(inputStream8, (int) (byte) 10);
        boolean boolean18 = org.apache.commons.io.IOUtils.contentEquals(inputStream5, inputStream8);
        java.io.InputStream inputStream20 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray21 = new byte[] {};
        int int22 = org.apache.commons.io.IOUtils.length(byteArray21);
        int int23 = org.apache.commons.io.IOUtils.read(inputStream20, byteArray21);
        byte[] byteArray24 = org.apache.commons.io.IOUtils.toByteArray(inputStream20);
        byte[] byteArray26 = org.apache.commons.io.IOUtils.toByteArray(inputStream20, (int) (short) 0);
        long long28 = org.apache.commons.io.IOUtils.skip(inputStream20, 100L);
        java.io.InputStream inputStream29 = null;
        java.io.InputStream inputStream30 = null;
        java.io.OutputStream outputStream31 = null;
        byte[] byteArray34 = new byte[] {};
        int int35 = org.apache.commons.io.IOUtils.length(byteArray34);
        java.io.OutputStream outputStream36 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray34, outputStream36);
        long long38 = org.apache.commons.io.IOUtils.copyLarge(inputStream30, outputStream31, 0L, (long) (byte) -1, byteArray34);
        java.io.OutputStream outputStream39 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray34, outputStream39);
        org.apache.commons.io.IOUtils.readFully(inputStream29, byteArray34);
        int int42 = org.apache.commons.io.IOUtils.read(inputStream20, byteArray34);
        int int43 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray34);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer44 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream8, iOExceptionConsumer44);
        java.nio.charset.Charset charset46 = null;
        char[] charArray47 = org.apache.commons.io.IOUtils.toCharArray(inputStream8, charset46);
        // The following exception was thrown during execution in test generation
        try {
            long long48 = org.apache.commons.io.IOUtils.copyLarge(reader0, writer1, (long) 1, (long) (-1), charArray47);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[], int, int)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(inputStream8);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(inputStream20);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(charArray47);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray47), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray47), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray47), "[]");
    }

    @Test
    public void test0906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0906");
        java.io.Reader reader0 = null;
        char[] charArray1 = new char[] {};
        int int2 = org.apache.commons.io.IOUtils.length(charArray1);
        // The following exception was thrown during execution in test generation
        try {
            int int5 = org.apache.commons.io.IOUtils.read(reader0, charArray1, 5, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[], int, int)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray1);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray1), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray1), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray1), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
    }

    @Test
    public void test0907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0907");
        java.io.Reader reader0 = null;
        java.nio.charset.Charset charset2 = null;
        java.io.InputStream inputStream3 = org.apache.commons.io.IOUtils.toInputStream("", charset2);
        java.nio.charset.Charset charset4 = null;
        java.lang.String str5 = org.apache.commons.io.IOUtils.toString(inputStream3, charset4);
        java.nio.charset.Charset charset6 = null;
        char[] charArray7 = org.apache.commons.io.IOUtils.toCharArray(inputStream3, charset6);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.readFully(reader0, charArray7, (-1), 5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[], int, int)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[]");
    }

    @Test
    public void test0908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0908");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream5 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray("");
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray10);
        long long12 = org.apache.commons.io.IOUtils.copyLarge(inputStream4, outputStream5, 0L, 0L, byteArray10);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, byteArray10);
        java.io.BufferedInputStream bufferedInputStream15 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        org.apache.commons.io.IOUtils.closeQuietly(inputStream1);
        java.nio.charset.Charset charset17 = null;
        java.util.List<java.lang.String> strList18 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset17);
        java.io.OutputStream outputStream20 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList18, "hi!", outputStream20);
        java.io.Writer writer23 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList18, "\r\n", writer23);
        java.io.OutputStream outputStream26 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList18, "\n", outputStream26);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream15);
        org.junit.Assert.assertNotNull(strList18);
    }

    @Test
    public void test0909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0909");
        java.io.Reader reader0 = null;
        java.io.Writer writer1 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long4 = org.apache.commons.io.IOUtils.copyLarge(reader0, writer1, (long) 'a', (-1L));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[], int, int)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0910");
        java.io.Reader reader0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.BufferedReader bufferedReader2 = org.apache.commons.io.IOUtils.toBufferedReader(reader0, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0911");
        java.io.Reader reader0 = null;
        char[] charArray1 = new char[] {};
        int int2 = org.apache.commons.io.IOUtils.length(charArray1);
        org.apache.commons.io.IOUtils.readFully(reader0, charArray1);
        int int4 = org.apache.commons.io.IOUtils.length(charArray1);
        java.io.Writer writer5 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(charArray1, writer5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Writer.write(char[])\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray1);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray1), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray1), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray1), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test0912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0912");
        java.io.Writer writer0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.BufferedWriter bufferedWriter2 = org.apache.commons.io.IOUtils.buffer(writer0, (int) '\\');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0913");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray(inputStream1, (int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.skipFully(inputStream1, (long) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.io.EOFException; message: Bytes to skip: 100 actual: 0");
        } catch (java.io.EOFException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
    }

    @Test
    public void test0914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0914");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray(inputStream1, (int) (short) 0);
        long long9 = org.apache.commons.io.IOUtils.skip(inputStream1, 100L);
        java.io.InputStream inputStream10 = null;
        java.io.InputStream inputStream11 = null;
        java.io.OutputStream outputStream12 = null;
        byte[] byteArray15 = new byte[] {};
        int int16 = org.apache.commons.io.IOUtils.length(byteArray15);
        java.io.OutputStream outputStream17 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray15, outputStream17);
        long long19 = org.apache.commons.io.IOUtils.copyLarge(inputStream11, outputStream12, 0L, (long) (byte) -1, byteArray15);
        java.io.OutputStream outputStream20 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray15, outputStream20);
        org.apache.commons.io.IOUtils.readFully(inputStream10, byteArray15);
        int int23 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray15);
        java.io.InputStream inputStream24 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1);
        java.io.OutputStream outputStream25 = null;
        java.io.InputStream inputStream29 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray30 = org.apache.commons.io.IOUtils.toByteArray(inputStream29);
        java.io.InputStream inputStream32 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray33 = new byte[] {};
        int int34 = org.apache.commons.io.IOUtils.length(byteArray33);
        int int35 = org.apache.commons.io.IOUtils.read(inputStream32, byteArray33);
        byte[] byteArray36 = org.apache.commons.io.IOUtils.toByteArray(inputStream32);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer37 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream32, iOExceptionConsumer37);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream32);
        java.io.BufferedInputStream bufferedInputStream41 = org.apache.commons.io.IOUtils.buffer(inputStream32, (int) (byte) 10);
        boolean boolean42 = org.apache.commons.io.IOUtils.contentEquals(inputStream29, inputStream32);
        java.io.InputStream inputStream44 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray45 = new byte[] {};
        int int46 = org.apache.commons.io.IOUtils.length(byteArray45);
        int int47 = org.apache.commons.io.IOUtils.read(inputStream44, byteArray45);
        byte[] byteArray48 = org.apache.commons.io.IOUtils.toByteArray(inputStream44);
        byte[] byteArray50 = org.apache.commons.io.IOUtils.toByteArray(inputStream44, (int) (short) 0);
        long long52 = org.apache.commons.io.IOUtils.skip(inputStream44, 100L);
        java.io.InputStream inputStream53 = null;
        java.io.InputStream inputStream54 = null;
        java.io.OutputStream outputStream55 = null;
        byte[] byteArray58 = new byte[] {};
        int int59 = org.apache.commons.io.IOUtils.length(byteArray58);
        java.io.OutputStream outputStream60 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray58, outputStream60);
        long long62 = org.apache.commons.io.IOUtils.copyLarge(inputStream54, outputStream55, 0L, (long) (byte) -1, byteArray58);
        java.io.OutputStream outputStream63 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray58, outputStream63);
        org.apache.commons.io.IOUtils.readFully(inputStream53, byteArray58);
        int int66 = org.apache.commons.io.IOUtils.read(inputStream44, byteArray58);
        int int67 = org.apache.commons.io.IOUtils.read(inputStream32, byteArray58);
        // The following exception was thrown during execution in test generation
        try {
            long long68 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream25, 10L, (long) 4, byteArray58);
            org.junit.Assert.fail("Expected exception of type java.io.EOFException; message: Bytes to skip: 10 actual: 0");
        } catch (java.io.EOFException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(inputStream24);
        org.junit.Assert.assertNotNull(inputStream29);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertNotNull(inputStream32);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(inputStream44);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[]");
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 0L + "'", long62 == 0L);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
    }

    @Test
    public void test0915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0915");
        java.nio.channels.ReadableByteChannel readableByteChannel0 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long2 = org.apache.commons.io.IOUtils.skip(readableByteChannel0, 1L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.nio.channels.ReadableByteChannel.read(java.nio.ByteBuffer)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0916");
        java.nio.charset.Charset charset1 = null;
        java.io.InputStream inputStream2 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "", charset1);
        java.io.Writer writer3 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.copy(inputStream2, writer3, "\r\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ??");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream2);
    }

    @Test
    public void test0917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0917");
        java.io.OutputStream outputStream1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write("\n", outputStream1, "\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ?");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0918");
        java.io.OutputStream outputStream0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.BufferedOutputStream bufferedOutputStream2 = org.apache.commons.io.IOUtils.buffer(outputStream0, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: outputStream");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0919");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream5 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray("");
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray10);
        long long12 = org.apache.commons.io.IOUtils.copyLarge(inputStream4, outputStream5, 0L, 0L, byteArray10);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, byteArray10);
        java.io.BufferedInputStream bufferedInputStream15 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.io.InputStream inputStream17 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray18 = org.apache.commons.io.IOUtils.toByteArray(inputStream17);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream17);
        java.io.InputStream inputStream21 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream22 = null;
        java.io.InputStream inputStream25 = null;
        byte[] byteArray27 = org.apache.commons.io.IOUtils.toByteArray("");
        int int28 = org.apache.commons.io.IOUtils.read(inputStream25, byteArray27);
        long long29 = org.apache.commons.io.IOUtils.copyLarge(inputStream21, outputStream22, 0L, 0L, byteArray27);
        java.nio.charset.Charset charset30 = null;
        java.util.List<java.lang.String> strList31 = org.apache.commons.io.IOUtils.readLines(inputStream21, charset30);
        java.io.InputStream inputStream33 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream34 = null;
        java.io.InputStream inputStream37 = null;
        byte[] byteArray39 = org.apache.commons.io.IOUtils.toByteArray("");
        int int40 = org.apache.commons.io.IOUtils.read(inputStream37, byteArray39);
        long long41 = org.apache.commons.io.IOUtils.copyLarge(inputStream33, outputStream34, 0L, 0L, byteArray39);
        java.nio.charset.Charset charset42 = null;
        java.util.List<java.lang.String> strList43 = org.apache.commons.io.IOUtils.readLines(inputStream33, charset42);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream33);
        boolean boolean45 = org.apache.commons.io.IOUtils.contentEquals(inputStream21, inputStream33);
        java.io.OutputStream outputStream46 = null;
        java.io.InputStream inputStream48 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream49 = null;
        java.io.InputStream inputStream52 = null;
        byte[] byteArray54 = org.apache.commons.io.IOUtils.toByteArray("");
        int int55 = org.apache.commons.io.IOUtils.read(inputStream52, byteArray54);
        long long56 = org.apache.commons.io.IOUtils.copyLarge(inputStream48, outputStream49, 0L, 0L, byteArray54);
        long long57 = org.apache.commons.io.IOUtils.copyLarge(inputStream33, outputStream46, byteArray54);
        org.apache.commons.io.IOUtils.readFully(inputStream17, byteArray54);
        org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray54);
        java.io.Writer writer60 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(byteArray54, writer60, "");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream15);
        org.junit.Assert.assertNotNull(inputStream17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(inputStream21);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNotNull(strList31);
        org.junit.Assert.assertNotNull(inputStream33);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertNotNull(strList43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(inputStream48);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
    }

    @Test
    public void test0920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0920");
        java.nio.charset.Charset charset1 = null;
        java.io.InputStream inputStream2 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "", charset1);
        java.util.List<java.lang.String> strList3 = org.apache.commons.io.IOUtils.readLines(inputStream2);
        java.io.InputStream inputStream5 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray6 = new byte[] {};
        int int7 = org.apache.commons.io.IOUtils.length(byteArray6);
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray6);
        byte[] byteArray9 = org.apache.commons.io.IOUtils.toByteArray(inputStream5);
        int int10 = org.apache.commons.io.IOUtils.length(byteArray9);
        org.apache.commons.io.IOUtils.readFully(inputStream2, byteArray9);
        java.io.OutputStream outputStream12 = null;
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream2, outputStream12);
        org.junit.Assert.assertNotNull(inputStream2);
        org.junit.Assert.assertNotNull(strList3);
        org.junit.Assert.assertNotNull(inputStream5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
    }

    @Test
    public void test0921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0921");
        char[] charArray4 = new char[] { '4', 'a', '#', 'a' };
        int int5 = org.apache.commons.io.IOUtils.length(charArray4);
        int int6 = org.apache.commons.io.IOUtils.length(charArray4);
        java.io.OutputStream outputStream7 = null;
        java.nio.charset.Charset charset8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(charArray4, outputStream7, charset8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.OutputStream.write(byte[])\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "4a#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "4a#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[4, a, #, a]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 4 + "'", int6 == 4);
    }

    @Test
    public void test0922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0922");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.util.List<java.lang.String> strList4 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.OutputStream outputStream6 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList4, "\n", outputStream6);
        java.io.Writer writer9 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList4, "hi!", writer9);
        java.io.OutputStream outputStream12 = null;
        java.nio.charset.Charset charset13 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList4, "\n", outputStream12, charset13);
        java.io.Writer writer16 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList4, "\n", writer16);
        java.io.OutputStream outputStream19 = null;
        java.nio.charset.Charset charset20 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList4, "\r\n", outputStream19, charset20);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(strList4);
    }

    @Test
    public void test0923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0923");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray(inputStream1, (int) (short) 0);
        java.io.Writer writer8 = null;
        java.nio.charset.Charset charset9 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer8, charset9);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.String> strList12 = org.apache.commons.io.IOUtils.readLines(inputStream1, "\r\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ??");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
    }

    @Test
    public void test0924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0924");
        java.io.Reader reader0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.BufferedReader bufferedReader2 = org.apache.commons.io.IOUtils.buffer(reader0, 6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0925");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray(inputStream1, (int) (short) 0);
        byte[] byteArray8 = new byte[] {};
        int int9 = org.apache.commons.io.IOUtils.length(byteArray8);
        org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray8);
        java.lang.String str11 = org.apache.commons.io.IOUtils.toString(byteArray8);
        java.io.Writer writer12 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(byteArray8, writer12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Writer.write(String)\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
    }

    @Test
    public void test0926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0926");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.nio.charset.Charset charset6 = null;
        java.util.List<java.lang.String> strList7 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset6);
        java.nio.charset.Charset charset8 = null;
        org.apache.commons.io.LineIterator lineIterator9 = org.apache.commons.io.IOUtils.lineIterator(inputStream1, charset8);
        java.io.InputStream inputStream11 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, 6);
        java.io.BufferedInputStream bufferedInputStream13 = org.apache.commons.io.IOUtils.buffer(inputStream11, 3);
        java.io.InputStream inputStream15 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray16 = org.apache.commons.io.IOUtils.toByteArray(inputStream15);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream15);
        java.util.List<java.lang.String> strList18 = org.apache.commons.io.IOUtils.readLines(inputStream15);
        java.io.OutputStream outputStream19 = null;
        long long20 = org.apache.commons.io.IOUtils.copyLarge(inputStream15, outputStream19);
        java.io.Writer writer21 = null;
        org.apache.commons.io.IOUtils.copy(inputStream15, writer21);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream15);
        java.io.InputStream inputStream25 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray26 = new byte[] {};
        int int27 = org.apache.commons.io.IOUtils.length(byteArray26);
        int int28 = org.apache.commons.io.IOUtils.read(inputStream25, byteArray26);
        byte[] byteArray29 = org.apache.commons.io.IOUtils.toByteArray(inputStream25);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer30 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream25, iOExceptionConsumer30);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream25);
        java.io.BufferedInputStream bufferedInputStream34 = org.apache.commons.io.IOUtils.buffer(inputStream25, (int) (byte) 10);
        java.io.InputStream inputStream36 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream25, (int) (byte) 1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer37 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream25, iOExceptionConsumer37);
        java.io.OutputStream outputStream39 = null;
        java.io.InputStream inputStream41 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray42 = new byte[] {};
        int int43 = org.apache.commons.io.IOUtils.length(byteArray42);
        int int44 = org.apache.commons.io.IOUtils.read(inputStream41, byteArray42);
        byte[] byteArray45 = org.apache.commons.io.IOUtils.toByteArray(inputStream41);
        java.io.InputStream inputStream47 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray48 = new byte[] {};
        int int49 = org.apache.commons.io.IOUtils.length(byteArray48);
        int int50 = org.apache.commons.io.IOUtils.read(inputStream47, byteArray48);
        byte[] byteArray51 = org.apache.commons.io.IOUtils.toByteArray(inputStream47);
        int int52 = org.apache.commons.io.IOUtils.length(byteArray51);
        org.apache.commons.io.IOUtils.readFully(inputStream41, byteArray51);
        long long54 = org.apache.commons.io.IOUtils.copyLarge(inputStream25, outputStream39, byteArray51);
        boolean boolean55 = org.apache.commons.io.IOUtils.contentEquals(inputStream15, inputStream25);
        java.io.BufferedInputStream bufferedInputStream56 = org.apache.commons.io.IOUtils.buffer(inputStream15);
        java.io.BufferedInputStream bufferedInputStream58 = org.apache.commons.io.IOUtils.buffer(inputStream15, (int) (short) 100);
        boolean boolean59 = org.apache.commons.io.IOUtils.contentEquals(inputStream11, inputStream15);
        java.io.Writer writer60 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.copy(inputStream11, writer60, "\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ?");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertNotNull(lineIterator9);
        org.junit.Assert.assertNotNull(inputStream11);
        org.junit.Assert.assertNotNull(bufferedInputStream13);
        org.junit.Assert.assertNotNull(inputStream15);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(inputStream25);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream34);
        org.junit.Assert.assertNotNull(inputStream36);
        org.junit.Assert.assertNotNull(inputStream41);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
        org.junit.Assert.assertNotNull(inputStream47);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(bufferedInputStream56);
        org.junit.Assert.assertNotNull(bufferedInputStream58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
    }

    @Test
    public void test0927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0927");
        byte[] byteArray0 = null;
        java.io.OutputStream outputStream1 = null;
        org.apache.commons.io.IOUtils.write(byteArray0, outputStream1);
    }

    @Test
    public void test0928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0928");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.BufferedInputStream bufferedInputStream3 = org.apache.commons.io.IOUtils.buffer(inputStream1, 100);
        java.io.BufferedInputStream bufferedInputStream4 = org.apache.commons.io.IOUtils.buffer((java.io.InputStream) bufferedInputStream3);
        java.io.OutputStream outputStream5 = null;
        java.io.InputStream inputStream7 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream7);
        java.io.InputStream inputStream9 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream7);
        java.lang.String str10 = org.apache.commons.io.IOUtils.toString(inputStream7);
        java.io.InputStream inputStream11 = null;
        byte[] byteArray13 = org.apache.commons.io.IOUtils.toByteArray("");
        int int14 = org.apache.commons.io.IOUtils.read(inputStream11, byteArray13);
        org.apache.commons.io.IOUtils.readFully(inputStream7, byteArray13);
        java.io.InputStream inputStream17 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray18 = new byte[] {};
        int int19 = org.apache.commons.io.IOUtils.length(byteArray18);
        int int20 = org.apache.commons.io.IOUtils.read(inputStream17, byteArray18);
        byte[] byteArray21 = org.apache.commons.io.IOUtils.toByteArray(inputStream17);
        byte[] byteArray23 = org.apache.commons.io.IOUtils.toByteArray(inputStream17, (int) (short) 0);
        java.io.Writer writer24 = null;
        java.nio.charset.Charset charset25 = null;
        org.apache.commons.io.IOUtils.copy(inputStream17, writer24, charset25);
        java.io.InputStream inputStream28 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream29 = null;
        java.io.InputStream inputStream31 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream32 = null;
        java.io.InputStream inputStream35 = null;
        byte[] byteArray37 = org.apache.commons.io.IOUtils.toByteArray("");
        int int38 = org.apache.commons.io.IOUtils.read(inputStream35, byteArray37);
        long long39 = org.apache.commons.io.IOUtils.copyLarge(inputStream31, outputStream32, 0L, 0L, byteArray37);
        long long40 = org.apache.commons.io.IOUtils.copyLarge(inputStream28, outputStream29, byteArray37);
        java.lang.String str41 = org.apache.commons.io.IOUtils.toString(byteArray37);
        int int42 = org.apache.commons.io.IOUtils.read(inputStream17, byteArray37);
        org.apache.commons.io.IOUtils.readFully(inputStream7, byteArray37);
        // The following exception was thrown during execution in test generation
        try {
            long long44 = org.apache.commons.io.IOUtils.copyLarge((java.io.InputStream) bufferedInputStream4, outputStream5, byteArray37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.OutputStream.write(byte[], int, int)\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(bufferedInputStream3);
        org.junit.Assert.assertNotNull(bufferedInputStream4);
        org.junit.Assert.assertNotNull(inputStream7);
        org.junit.Assert.assertNotNull(inputStream9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(inputStream17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertNotNull(inputStream28);
        org.junit.Assert.assertNotNull(inputStream31);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
    }

    @Test
    public void test0929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0929");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream5 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray("");
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray10);
        long long12 = org.apache.commons.io.IOUtils.copyLarge(inputStream4, outputStream5, 0L, 0L, byteArray10);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, byteArray10);
        java.io.BufferedInputStream bufferedInputStream15 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.io.InputStream inputStream17 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray18 = org.apache.commons.io.IOUtils.toByteArray(inputStream17);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream17);
        java.io.InputStream inputStream21 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream22 = null;
        java.io.InputStream inputStream25 = null;
        byte[] byteArray27 = org.apache.commons.io.IOUtils.toByteArray("");
        int int28 = org.apache.commons.io.IOUtils.read(inputStream25, byteArray27);
        long long29 = org.apache.commons.io.IOUtils.copyLarge(inputStream21, outputStream22, 0L, 0L, byteArray27);
        java.nio.charset.Charset charset30 = null;
        java.util.List<java.lang.String> strList31 = org.apache.commons.io.IOUtils.readLines(inputStream21, charset30);
        java.io.InputStream inputStream33 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream34 = null;
        java.io.InputStream inputStream37 = null;
        byte[] byteArray39 = org.apache.commons.io.IOUtils.toByteArray("");
        int int40 = org.apache.commons.io.IOUtils.read(inputStream37, byteArray39);
        long long41 = org.apache.commons.io.IOUtils.copyLarge(inputStream33, outputStream34, 0L, 0L, byteArray39);
        java.nio.charset.Charset charset42 = null;
        java.util.List<java.lang.String> strList43 = org.apache.commons.io.IOUtils.readLines(inputStream33, charset42);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream33);
        boolean boolean45 = org.apache.commons.io.IOUtils.contentEquals(inputStream21, inputStream33);
        java.io.OutputStream outputStream46 = null;
        java.io.InputStream inputStream48 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream49 = null;
        java.io.InputStream inputStream52 = null;
        byte[] byteArray54 = org.apache.commons.io.IOUtils.toByteArray("");
        int int55 = org.apache.commons.io.IOUtils.read(inputStream52, byteArray54);
        long long56 = org.apache.commons.io.IOUtils.copyLarge(inputStream48, outputStream49, 0L, 0L, byteArray54);
        long long57 = org.apache.commons.io.IOUtils.copyLarge(inputStream33, outputStream46, byteArray54);
        org.apache.commons.io.IOUtils.readFully(inputStream17, byteArray54);
        org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray54);
        java.lang.String str60 = org.apache.commons.io.IOUtils.toString(inputStream1);
        java.io.BufferedInputStream bufferedInputStream62 = org.apache.commons.io.IOUtils.buffer(inputStream1, 100);
        java.io.OutputStream outputStream63 = null;
        java.io.InputStream inputStream67 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray68 = new byte[] {};
        int int69 = org.apache.commons.io.IOUtils.length(byteArray68);
        int int70 = org.apache.commons.io.IOUtils.read(inputStream67, byteArray68);
        byte[] byteArray71 = org.apache.commons.io.IOUtils.toByteArray(inputStream67);
        byte[] byteArray73 = org.apache.commons.io.IOUtils.toByteArray(inputStream67, (int) (short) 0);
        long long75 = org.apache.commons.io.IOUtils.skip(inputStream67, 100L);
        java.io.InputStream inputStream76 = null;
        java.io.InputStream inputStream77 = null;
        java.io.OutputStream outputStream78 = null;
        byte[] byteArray81 = new byte[] {};
        int int82 = org.apache.commons.io.IOUtils.length(byteArray81);
        java.io.OutputStream outputStream83 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray81, outputStream83);
        long long85 = org.apache.commons.io.IOUtils.copyLarge(inputStream77, outputStream78, 0L, (long) (byte) -1, byteArray81);
        java.io.OutputStream outputStream86 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray81, outputStream86);
        org.apache.commons.io.IOUtils.readFully(inputStream76, byteArray81);
        int int89 = org.apache.commons.io.IOUtils.read(inputStream67, byteArray81);
        long long90 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream63, 0L, 1L, byteArray81);
        java.lang.String str91 = org.apache.commons.io.IOUtils.toString(byteArray81);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream15);
        org.junit.Assert.assertNotNull(inputStream17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(inputStream21);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNotNull(strList31);
        org.junit.Assert.assertNotNull(inputStream33);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertNotNull(strList43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(inputStream48);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(bufferedInputStream62);
        org.junit.Assert.assertNotNull(inputStream67);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[]");
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[]");
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 0L + "'", long75 == 0L);
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 0L + "'", long85 == 0L);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + 0L + "'", long90 == 0L);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "" + "'", str91, "");
    }

    @Test
    public void test0930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0930");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream5 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray("");
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray10);
        long long12 = org.apache.commons.io.IOUtils.copyLarge(inputStream4, outputStream5, 0L, 0L, byteArray10);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, byteArray10);
        java.io.BufferedInputStream bufferedInputStream15 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        org.apache.commons.io.IOUtils.closeQuietly(inputStream1);
        java.nio.charset.Charset charset17 = null;
        java.util.List<java.lang.String> strList18 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset17);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.io.OutputStream outputStream20 = null;
        int int21 = org.apache.commons.io.IOUtils.copy(inputStream1, outputStream20);
        java.io.InputStream inputStream23 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray24 = new byte[] {};
        int int25 = org.apache.commons.io.IOUtils.length(byteArray24);
        int int26 = org.apache.commons.io.IOUtils.read(inputStream23, byteArray24);
        byte[] byteArray27 = org.apache.commons.io.IOUtils.toByteArray(inputStream23);
        byte[] byteArray29 = org.apache.commons.io.IOUtils.toByteArray(inputStream23, (int) (short) 0);
        byte[] byteArray30 = new byte[] {};
        int int31 = org.apache.commons.io.IOUtils.length(byteArray30);
        org.apache.commons.io.IOUtils.readFully(inputStream23, byteArray30);
        int int33 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray30);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream15);
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(inputStream23);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
    }

    @Test
    public void test0931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0931");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream5 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray("");
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray10);
        long long12 = org.apache.commons.io.IOUtils.copyLarge(inputStream4, outputStream5, 0L, 0L, byteArray10);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, byteArray10);
        java.io.BufferedInputStream bufferedInputStream15 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer16 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer16);
        byte[] byteArray23 = new byte[] { (byte) 10, (byte) 1, (byte) 0, (byte) 100, (byte) 0 };
        int int24 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray23);
        java.io.OutputStream outputStream25 = null;
        java.io.InputStream inputStream29 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray30 = new byte[] {};
        int int31 = org.apache.commons.io.IOUtils.length(byteArray30);
        int int32 = org.apache.commons.io.IOUtils.read(inputStream29, byteArray30);
        // The following exception was thrown during execution in test generation
        try {
            long long33 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream25, (long) 100, (long) (short) 1, byteArray30);
            org.junit.Assert.fail("Expected exception of type java.io.EOFException; message: Bytes to skip: 100 actual: 0");
        } catch (java.io.EOFException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream15);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[10, 1, 0, 100, 0]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(inputStream29);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
    }

    @Test
    public void test0932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0932");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        java.io.InputStream inputStream5 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray(inputStream1, (long) 5);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Unexpected read size. current: 0, expected: 5");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(inputStream5);
    }

    @Test
    public void test0933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0933");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        java.nio.charset.Charset charset10 = null;
        java.util.List<java.lang.String> strList11 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset10);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.skipFully(inputStream1, (long) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.io.EOFException; message: Bytes to skip: 10 actual: 0");
        } catch (java.io.EOFException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(strList11);
    }

    @Test
    public void test0934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0934");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray(inputStream1, (int) (short) 0);
        long long9 = org.apache.commons.io.IOUtils.skip(inputStream1, 100L);
        java.io.InputStream inputStream10 = null;
        java.io.InputStream inputStream11 = null;
        java.io.OutputStream outputStream12 = null;
        byte[] byteArray15 = new byte[] {};
        int int16 = org.apache.commons.io.IOUtils.length(byteArray15);
        java.io.OutputStream outputStream17 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray15, outputStream17);
        long long19 = org.apache.commons.io.IOUtils.copyLarge(inputStream11, outputStream12, 0L, (long) (byte) -1, byteArray15);
        java.io.OutputStream outputStream20 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray15, outputStream20);
        org.apache.commons.io.IOUtils.readFully(inputStream10, byteArray15);
        int int23 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray15);
        java.io.InputStream inputStream24 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1);
        long long26 = org.apache.commons.io.IOUtils.skip(inputStream24, 0L);
        java.io.OutputStream outputStream27 = null;
        java.io.InputStream inputStream31 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray32 = org.apache.commons.io.IOUtils.toByteArray(inputStream31);
        java.io.InputStream inputStream34 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray35 = new byte[] {};
        int int36 = org.apache.commons.io.IOUtils.length(byteArray35);
        int int37 = org.apache.commons.io.IOUtils.read(inputStream34, byteArray35);
        byte[] byteArray38 = org.apache.commons.io.IOUtils.toByteArray(inputStream34);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer39 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream34, iOExceptionConsumer39);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream34);
        java.io.BufferedInputStream bufferedInputStream43 = org.apache.commons.io.IOUtils.buffer(inputStream34, (int) (byte) 10);
        boolean boolean44 = org.apache.commons.io.IOUtils.contentEquals(inputStream31, inputStream34);
        java.io.InputStream inputStream46 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray47 = new byte[] {};
        int int48 = org.apache.commons.io.IOUtils.length(byteArray47);
        int int49 = org.apache.commons.io.IOUtils.read(inputStream46, byteArray47);
        byte[] byteArray50 = org.apache.commons.io.IOUtils.toByteArray(inputStream46);
        byte[] byteArray52 = org.apache.commons.io.IOUtils.toByteArray(inputStream46, (int) (short) 0);
        long long54 = org.apache.commons.io.IOUtils.skip(inputStream46, 100L);
        java.io.InputStream inputStream55 = null;
        java.io.InputStream inputStream56 = null;
        java.io.OutputStream outputStream57 = null;
        byte[] byteArray60 = new byte[] {};
        int int61 = org.apache.commons.io.IOUtils.length(byteArray60);
        java.io.OutputStream outputStream62 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray60, outputStream62);
        long long64 = org.apache.commons.io.IOUtils.copyLarge(inputStream56, outputStream57, 0L, (long) (byte) -1, byteArray60);
        java.io.OutputStream outputStream65 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray60, outputStream65);
        org.apache.commons.io.IOUtils.readFully(inputStream55, byteArray60);
        int int68 = org.apache.commons.io.IOUtils.read(inputStream46, byteArray60);
        int int69 = org.apache.commons.io.IOUtils.read(inputStream34, byteArray60);
        java.io.OutputStream outputStream70 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray60, outputStream70);
        // The following exception was thrown during execution in test generation
        try {
            long long72 = org.apache.commons.io.IOUtils.copyLarge(inputStream24, outputStream27, (long) '4', 10L, byteArray60);
            org.junit.Assert.fail("Expected exception of type java.io.EOFException; message: Bytes to skip: 52 actual: 0");
        } catch (java.io.EOFException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(inputStream24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(inputStream31);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertNotNull(inputStream34);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(inputStream46);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[]");
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
    }

    @Test
    public void test0935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0935");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        java.nio.charset.Charset charset10 = null;
        java.util.List<java.lang.String> strList11 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset10);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.nio.charset.Charset charset13 = null;
        java.lang.String str14 = org.apache.commons.io.IOUtils.toString(inputStream1, charset13);
        java.io.Writer writer15 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer15);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) writer15);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
    }

    @Test
    public void test0936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0936");
        java.nio.channels.ReadableByteChannel readableByteChannel0 = null;
        long long2 = org.apache.commons.io.IOUtils.skip(readableByteChannel0, (long) 0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
    }

    @Test
    public void test0937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0937");
        java.nio.channels.ReadableByteChannel readableByteChannel0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.skipFully(readableByteChannel0, (long) '/');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.nio.channels.ReadableByteChannel.read(java.nio.ByteBuffer)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0938");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray(inputStream1, (int) (short) 0);
        long long9 = org.apache.commons.io.IOUtils.skip(inputStream1, 100L);
        java.io.InputStream inputStream10 = null;
        java.io.InputStream inputStream11 = null;
        java.io.OutputStream outputStream12 = null;
        byte[] byteArray15 = new byte[] {};
        int int16 = org.apache.commons.io.IOUtils.length(byteArray15);
        java.io.OutputStream outputStream17 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray15, outputStream17);
        long long19 = org.apache.commons.io.IOUtils.copyLarge(inputStream11, outputStream12, 0L, (long) (byte) -1, byteArray15);
        java.io.OutputStream outputStream20 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray15, outputStream20);
        org.apache.commons.io.IOUtils.readFully(inputStream10, byteArray15);
        int int23 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray15);
        java.io.InputStream inputStream24 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1);
        java.io.BufferedInputStream bufferedInputStream25 = org.apache.commons.io.IOUtils.buffer(inputStream1);
        java.io.OutputStream outputStream26 = null;
        long long27 = org.apache.commons.io.IOUtils.copyLarge((java.io.InputStream) bufferedInputStream25, outputStream26);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(inputStream24);
        org.junit.Assert.assertNotNull(bufferedInputStream25);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
    }

    @Test
    public void test0939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0939");
        // The following exception was thrown during execution in test generation
        try {
            java.io.InputStream inputStream2 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "hi!", "\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ?");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0940");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.BufferedInputStream bufferedInputStream3 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) ' ');
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer4 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer4);
        java.io.InputStream inputStream7 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, 5);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(bufferedInputStream3);
        org.junit.Assert.assertNotNull(inputStream7);
    }

    @Test
    public void test0941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0941");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.BufferedInputStream bufferedInputStream10 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.io.InputStream inputStream12 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, (int) (byte) 1);
        java.io.OutputStream outputStream13 = null;
        int int14 = org.apache.commons.io.IOUtils.copy(inputStream12, outputStream13);
        java.io.BufferedInputStream bufferedInputStream16 = org.apache.commons.io.IOUtils.buffer(inputStream12, (int) (byte) 10);
        java.io.BufferedInputStream bufferedInputStream18 = org.apache.commons.io.IOUtils.buffer(inputStream12, 1);
        java.io.Writer writer19 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.copy((java.io.InputStream) bufferedInputStream18, writer19, "\r\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ??");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream10);
        org.junit.Assert.assertNotNull(inputStream12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(bufferedInputStream16);
        org.junit.Assert.assertNotNull(bufferedInputStream18);
    }

    @Test
    public void test0942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0942");
        java.io.Writer writer0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.BufferedWriter bufferedWriter2 = org.apache.commons.io.IOUtils.buffer(writer0, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0943");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream5 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray("");
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray10);
        long long12 = org.apache.commons.io.IOUtils.copyLarge(inputStream4, outputStream5, 0L, 0L, byteArray10);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, byteArray10);
        java.io.BufferedInputStream bufferedInputStream15 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.io.InputStream inputStream17 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray18 = org.apache.commons.io.IOUtils.toByteArray(inputStream17);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream17);
        java.io.InputStream inputStream21 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream22 = null;
        java.io.InputStream inputStream25 = null;
        byte[] byteArray27 = org.apache.commons.io.IOUtils.toByteArray("");
        int int28 = org.apache.commons.io.IOUtils.read(inputStream25, byteArray27);
        long long29 = org.apache.commons.io.IOUtils.copyLarge(inputStream21, outputStream22, 0L, 0L, byteArray27);
        java.nio.charset.Charset charset30 = null;
        java.util.List<java.lang.String> strList31 = org.apache.commons.io.IOUtils.readLines(inputStream21, charset30);
        java.io.InputStream inputStream33 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream34 = null;
        java.io.InputStream inputStream37 = null;
        byte[] byteArray39 = org.apache.commons.io.IOUtils.toByteArray("");
        int int40 = org.apache.commons.io.IOUtils.read(inputStream37, byteArray39);
        long long41 = org.apache.commons.io.IOUtils.copyLarge(inputStream33, outputStream34, 0L, 0L, byteArray39);
        java.nio.charset.Charset charset42 = null;
        java.util.List<java.lang.String> strList43 = org.apache.commons.io.IOUtils.readLines(inputStream33, charset42);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream33);
        boolean boolean45 = org.apache.commons.io.IOUtils.contentEquals(inputStream21, inputStream33);
        java.io.OutputStream outputStream46 = null;
        java.io.InputStream inputStream48 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream49 = null;
        java.io.InputStream inputStream52 = null;
        byte[] byteArray54 = org.apache.commons.io.IOUtils.toByteArray("");
        int int55 = org.apache.commons.io.IOUtils.read(inputStream52, byteArray54);
        long long56 = org.apache.commons.io.IOUtils.copyLarge(inputStream48, outputStream49, 0L, 0L, byteArray54);
        long long57 = org.apache.commons.io.IOUtils.copyLarge(inputStream33, outputStream46, byteArray54);
        org.apache.commons.io.IOUtils.readFully(inputStream17, byteArray54);
        org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray54);
        java.lang.String str60 = org.apache.commons.io.IOUtils.toString(inputStream1);
        java.io.BufferedInputStream bufferedInputStream62 = org.apache.commons.io.IOUtils.buffer(inputStream1, 100);
        java.io.OutputStream outputStream63 = null;
        java.io.InputStream inputStream67 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray68 = new byte[] {};
        int int69 = org.apache.commons.io.IOUtils.length(byteArray68);
        int int70 = org.apache.commons.io.IOUtils.read(inputStream67, byteArray68);
        byte[] byteArray71 = org.apache.commons.io.IOUtils.toByteArray(inputStream67);
        byte[] byteArray73 = org.apache.commons.io.IOUtils.toByteArray(inputStream67, (int) (short) 0);
        long long75 = org.apache.commons.io.IOUtils.skip(inputStream67, 100L);
        java.io.InputStream inputStream76 = null;
        java.io.InputStream inputStream77 = null;
        java.io.OutputStream outputStream78 = null;
        byte[] byteArray81 = new byte[] {};
        int int82 = org.apache.commons.io.IOUtils.length(byteArray81);
        java.io.OutputStream outputStream83 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray81, outputStream83);
        long long85 = org.apache.commons.io.IOUtils.copyLarge(inputStream77, outputStream78, 0L, (long) (byte) -1, byteArray81);
        java.io.OutputStream outputStream86 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray81, outputStream86);
        org.apache.commons.io.IOUtils.readFully(inputStream76, byteArray81);
        int int89 = org.apache.commons.io.IOUtils.read(inputStream67, byteArray81);
        long long90 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream63, 0L, 1L, byteArray81);
        java.io.BufferedInputStream bufferedInputStream91 = org.apache.commons.io.IOUtils.buffer(inputStream1);
        java.io.Writer writer92 = null;
        org.apache.commons.io.IOUtils.copy((java.io.InputStream) bufferedInputStream91, writer92);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.String> strList95 = org.apache.commons.io.IOUtils.readLines((java.io.InputStream) bufferedInputStream91, "");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream15);
        org.junit.Assert.assertNotNull(inputStream17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(inputStream21);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNotNull(strList31);
        org.junit.Assert.assertNotNull(inputStream33);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertNotNull(strList43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(inputStream48);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(bufferedInputStream62);
        org.junit.Assert.assertNotNull(inputStream67);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[]");
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[]");
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 0L + "'", long75 == 0L);
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 0L + "'", long85 == 0L);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + 0L + "'", long90 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream91);
    }

    @Test
    public void test0944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0944");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        java.io.OutputStream outputStream10 = null;
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream10, (long) (short) 0, (-1L));
        java.lang.String str14 = org.apache.commons.io.IOUtils.toString(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly(inputStream1);
        java.io.BufferedInputStream bufferedInputStream17 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) '\\');
        java.io.OutputStream outputStream18 = null;
        java.io.InputStream inputStream22 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray23 = new byte[] {};
        int int24 = org.apache.commons.io.IOUtils.length(byteArray23);
        int int25 = org.apache.commons.io.IOUtils.read(inputStream22, byteArray23);
        byte[] byteArray26 = org.apache.commons.io.IOUtils.toByteArray(inputStream22);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer27 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream22, iOExceptionConsumer27);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream22);
        java.io.BufferedInputStream bufferedInputStream31 = org.apache.commons.io.IOUtils.buffer(inputStream22, (int) (byte) 10);
        java.io.InputStream inputStream33 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream22, (int) (byte) 1);
        java.io.OutputStream outputStream34 = null;
        int int35 = org.apache.commons.io.IOUtils.copy(inputStream33, outputStream34);
        java.io.BufferedInputStream bufferedInputStream37 = org.apache.commons.io.IOUtils.buffer(inputStream33, (int) (byte) 10);
        char[] charArray38 = org.apache.commons.io.IOUtils.toCharArray((java.io.InputStream) bufferedInputStream37);
        java.io.InputStream inputStream40 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray41 = org.apache.commons.io.IOUtils.toByteArray(inputStream40);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream40);
        java.util.List<java.lang.String> strList43 = org.apache.commons.io.IOUtils.readLines(inputStream40);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer44 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream40, iOExceptionConsumer44);
        java.io.InputStream inputStream47 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray48 = org.apache.commons.io.IOUtils.toByteArray(inputStream47);
        int int49 = org.apache.commons.io.IOUtils.read(inputStream40, byteArray48);
        org.apache.commons.io.IOUtils.readFully((java.io.InputStream) bufferedInputStream37, byteArray48, (int) ' ', 0);
        // The following exception was thrown during execution in test generation
        try {
            long long53 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream18, 100L, (long) 2, byteArray48);
            org.junit.Assert.fail("Expected exception of type java.io.EOFException; message: Bytes to skip: 100 actual: 0");
        } catch (java.io.EOFException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(bufferedInputStream17);
        org.junit.Assert.assertNotNull(inputStream22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream31);
        org.junit.Assert.assertNotNull(inputStream33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(bufferedInputStream37);
        org.junit.Assert.assertNotNull(charArray38);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray38), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray38), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray38), "[]");
        org.junit.Assert.assertNotNull(inputStream40);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(strList43);
        org.junit.Assert.assertNotNull(inputStream47);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
    }

    @Test
    public void test0945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0945");
        java.io.Reader reader0 = null;
        java.io.Writer writer1 = null;
        java.io.Reader reader4 = null;
        char[] charArray5 = new char[] {};
        int int6 = org.apache.commons.io.IOUtils.length(charArray5);
        int int7 = org.apache.commons.io.IOUtils.read(reader4, charArray5);
        int int8 = org.apache.commons.io.IOUtils.length(charArray5);
        // The following exception was thrown during execution in test generation
        try {
            long long9 = org.apache.commons.io.IOUtils.copyLarge(reader0, writer1, (long) '4', (long) 0, charArray5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[], int, int)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test0946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0946");
        java.io.InputStream inputStream0 = null;
        java.io.OutputStream outputStream1 = null;
        byte[] byteArray4 = new byte[] {};
        int int5 = org.apache.commons.io.IOUtils.length(byteArray4);
        java.io.OutputStream outputStream6 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray4, outputStream6);
        long long8 = org.apache.commons.io.IOUtils.copyLarge(inputStream0, outputStream1, 0L, (long) (byte) -1, byteArray4);
        java.io.OutputStream outputStream9 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray4, outputStream9);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str12 = org.apache.commons.io.IOUtils.toString(byteArray4, "\r\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ??");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
    }

    @Test
    public void test0947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0947");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream4);
        java.io.InputStream inputStream7 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray8 = new byte[] {};
        int int9 = org.apache.commons.io.IOUtils.length(byteArray8);
        int int10 = org.apache.commons.io.IOUtils.read(inputStream7, byteArray8);
        byte[] byteArray11 = org.apache.commons.io.IOUtils.toByteArray(inputStream7);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer12 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream7, iOExceptionConsumer12);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream7);
        java.io.BufferedInputStream bufferedInputStream16 = org.apache.commons.io.IOUtils.buffer(inputStream7, (int) (byte) 10);
        boolean boolean17 = org.apache.commons.io.IOUtils.contentEquals(inputStream4, inputStream7);
        java.io.InputStream inputStream19 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray20 = new byte[] {};
        int int21 = org.apache.commons.io.IOUtils.length(byteArray20);
        int int22 = org.apache.commons.io.IOUtils.read(inputStream19, byteArray20);
        byte[] byteArray23 = org.apache.commons.io.IOUtils.toByteArray(inputStream19);
        byte[] byteArray25 = org.apache.commons.io.IOUtils.toByteArray(inputStream19, (int) (short) 0);
        long long27 = org.apache.commons.io.IOUtils.skip(inputStream19, 100L);
        java.io.InputStream inputStream28 = null;
        java.io.InputStream inputStream29 = null;
        java.io.OutputStream outputStream30 = null;
        byte[] byteArray33 = new byte[] {};
        int int34 = org.apache.commons.io.IOUtils.length(byteArray33);
        java.io.OutputStream outputStream35 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray33, outputStream35);
        long long37 = org.apache.commons.io.IOUtils.copyLarge(inputStream29, outputStream30, 0L, (long) (byte) -1, byteArray33);
        java.io.OutputStream outputStream38 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray33, outputStream38);
        org.apache.commons.io.IOUtils.readFully(inputStream28, byteArray33);
        int int41 = org.apache.commons.io.IOUtils.read(inputStream19, byteArray33);
        int int42 = org.apache.commons.io.IOUtils.read(inputStream7, byteArray33);
        int int45 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray33, 1, (int) (short) 0);
        java.io.InputStream inputStream47 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, (int) (short) 10);
        java.util.List<java.lang.String> strList48 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.lang.Class<?> wildcardClass49 = strList48.getClass();
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(inputStream7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(inputStream19);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(inputStream47);
        org.junit.Assert.assertNotNull(strList48);
        org.junit.Assert.assertNotNull(wildcardClass49);
    }

    @Test
    public void test0948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0948");
        java.io.Reader reader0 = null;
        char[] charArray1 = new char[] {};
        java.io.Writer writer2 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray1, writer2);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.readFully(reader0, charArray1, 3, 5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[], int, int)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray1);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray1), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray1), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray1), "[]");
    }

    @Test
    public void test0949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0949");
        java.io.InputStream inputStream0 = null;
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream0, (long) 5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.InputStream.read(byte[], int, int)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0950");
        java.io.Reader reader0 = null;
        java.io.Writer writer1 = null;
        java.io.Reader reader2 = null;
        java.io.Reader reader3 = null;
        java.io.Writer writer4 = null;
        char[] charArray7 = new char[] {};
        int int8 = org.apache.commons.io.IOUtils.length(charArray7);
        java.io.Writer writer9 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray7, writer9);
        java.io.Writer writer11 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray7, writer11);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(reader3, writer4, 0L, (long) (byte) 100, charArray7);
        int int14 = org.apache.commons.io.IOUtils.read(reader2, charArray7);
        java.io.Writer writer15 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray7, writer15);
        // The following exception was thrown during execution in test generation
        try {
            long long17 = org.apache.commons.io.IOUtils.copyLarge(reader0, writer1, charArray7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[])\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test0951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0951");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        java.io.OutputStream outputStream10 = null;
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream10, (long) (short) 0, (-1L));
        java.lang.String str14 = org.apache.commons.io.IOUtils.toString(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly(inputStream1);
        org.apache.commons.io.function.IOConsumer<java.io.IOException> iOExceptionIOConsumer16 = null;
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1, iOExceptionIOConsumer16);
        java.io.InputStream inputStream19 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray20 = new byte[] {};
        int int21 = org.apache.commons.io.IOUtils.length(byteArray20);
        int int22 = org.apache.commons.io.IOUtils.read(inputStream19, byteArray20);
        byte[] byteArray23 = org.apache.commons.io.IOUtils.toByteArray(inputStream19);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer24 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream19, iOExceptionConsumer24);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream19);
        java.io.BufferedInputStream bufferedInputStream28 = org.apache.commons.io.IOUtils.buffer(inputStream19, (int) (byte) 10);
        java.io.InputStream inputStream30 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream19, (int) (byte) 1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer31 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream19, iOExceptionConsumer31);
        java.io.OutputStream outputStream33 = null;
        java.io.InputStream inputStream35 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray36 = new byte[] {};
        int int37 = org.apache.commons.io.IOUtils.length(byteArray36);
        int int38 = org.apache.commons.io.IOUtils.read(inputStream35, byteArray36);
        byte[] byteArray39 = org.apache.commons.io.IOUtils.toByteArray(inputStream35);
        java.io.InputStream inputStream41 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray42 = new byte[] {};
        int int43 = org.apache.commons.io.IOUtils.length(byteArray42);
        int int44 = org.apache.commons.io.IOUtils.read(inputStream41, byteArray42);
        byte[] byteArray45 = org.apache.commons.io.IOUtils.toByteArray(inputStream41);
        int int46 = org.apache.commons.io.IOUtils.length(byteArray45);
        org.apache.commons.io.IOUtils.readFully(inputStream35, byteArray45);
        long long48 = org.apache.commons.io.IOUtils.copyLarge(inputStream19, outputStream33, byteArray45);
        int int49 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray45);
        java.io.OutputStream outputStream50 = null;
        java.io.InputStream inputStream54 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream54);
        byte[] byteArray56 = org.apache.commons.io.IOUtils.toByteArray(inputStream54);
        // The following exception was thrown during execution in test generation
        try {
            long long57 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream50, (long) (byte) 100, (long) (byte) 1, byteArray56);
            org.junit.Assert.fail("Expected exception of type java.io.EOFException; message: Bytes to skip: 100 actual: 0");
        } catch (java.io.EOFException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(inputStream19);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream28);
        org.junit.Assert.assertNotNull(inputStream30);
        org.junit.Assert.assertNotNull(inputStream35);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertNotNull(inputStream41);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(inputStream54);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[]");
    }

    @Test
    public void test0952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0952");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream3 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1);
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream3);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.LineIterator lineIterator6 = org.apache.commons.io.IOUtils.lineIterator(inputStream4, "");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream3);
        org.junit.Assert.assertNotNull(inputStream4);
    }

    @Test
    public void test0953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0953");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream3 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1);
        byte[] byteArray8 = new byte[] { (byte) -1, (byte) 100, (byte) 1, (byte) -1 };
        int int9 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray8);
        java.io.OutputStream outputStream10 = null;
        byte[] byteArray14 = org.apache.commons.io.IOUtils.toByteArray("");
        // The following exception was thrown during execution in test generation
        try {
            long long15 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream10, (long) (short) 100, (long) 3, byteArray14);
            org.junit.Assert.fail("Expected exception of type java.io.EOFException; message: Bytes to skip: 100 actual: 0");
        } catch (java.io.EOFException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream3);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-1, 100, 1, -1]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
    }

    @Test
    public void test0954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0954");
        java.io.Reader reader0 = null;
        java.io.Reader reader1 = null;
        char[] charArray2 = new char[] {};
        int int3 = org.apache.commons.io.IOUtils.length(charArray2);
        java.io.Writer writer4 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray2, writer4);
        int int6 = org.apache.commons.io.IOUtils.length(charArray2);
        java.io.Writer writer7 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray2, writer7);
        int int9 = org.apache.commons.io.IOUtils.length(charArray2);
        int int10 = org.apache.commons.io.IOUtils.read(reader1, charArray2);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.readFully(reader0, charArray2, 5, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Length must not be negative: -1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray2), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray2), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test0955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0955");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.BufferedInputStream bufferedInputStream10 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        byte[] byteArray11 = null;
        org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray11, (int) '4', 0);
        java.io.OutputStream outputStream15 = null;
        long long17 = org.apache.commons.io.IOUtils.copy(inputStream1, outputStream15, 0);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer18 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) outputStream15, iOExceptionConsumer18);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream10);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
    }

    @Test
    public void test0956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0956");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream("\r\n");
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        // The following exception was thrown during execution in test generation
        try {
            java.io.BufferedInputStream bufferedInputStream4 = org.apache.commons.io.IOUtils.buffer(inputStream1, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Buffer size <= 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
    }

    @Test
    public void test0957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0957");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        java.nio.charset.Charset charset5 = null;
        org.apache.commons.io.LineIterator lineIterator6 = org.apache.commons.io.IOUtils.lineIterator(inputStream1, charset5);
        java.io.InputStream inputStream8 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray9 = new byte[] {};
        int int10 = org.apache.commons.io.IOUtils.length(byteArray9);
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray9);
        byte[] byteArray12 = org.apache.commons.io.IOUtils.toByteArray(inputStream8);
        boolean boolean13 = org.apache.commons.io.IOUtils.contentEquals(inputStream1, inputStream8);
        java.io.Writer writer14 = null;
        org.apache.commons.io.IOUtils.copy(inputStream8, writer14);
        // The following exception was thrown during execution in test generation
        try {
            char[] charArray17 = org.apache.commons.io.IOUtils.toCharArray(inputStream8, "\r\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ??");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(lineIterator6);
        org.junit.Assert.assertNotNull(inputStream8);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test0958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0958");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream5 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray("");
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray10);
        long long12 = org.apache.commons.io.IOUtils.copyLarge(inputStream4, outputStream5, 0L, 0L, byteArray10);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, byteArray10);
        java.io.BufferedInputStream bufferedInputStream15 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.io.InputStream inputStream17 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray18 = org.apache.commons.io.IOUtils.toByteArray(inputStream17);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream17);
        java.io.InputStream inputStream21 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream22 = null;
        java.io.InputStream inputStream25 = null;
        byte[] byteArray27 = org.apache.commons.io.IOUtils.toByteArray("");
        int int28 = org.apache.commons.io.IOUtils.read(inputStream25, byteArray27);
        long long29 = org.apache.commons.io.IOUtils.copyLarge(inputStream21, outputStream22, 0L, 0L, byteArray27);
        java.nio.charset.Charset charset30 = null;
        java.util.List<java.lang.String> strList31 = org.apache.commons.io.IOUtils.readLines(inputStream21, charset30);
        java.io.InputStream inputStream33 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream34 = null;
        java.io.InputStream inputStream37 = null;
        byte[] byteArray39 = org.apache.commons.io.IOUtils.toByteArray("");
        int int40 = org.apache.commons.io.IOUtils.read(inputStream37, byteArray39);
        long long41 = org.apache.commons.io.IOUtils.copyLarge(inputStream33, outputStream34, 0L, 0L, byteArray39);
        java.nio.charset.Charset charset42 = null;
        java.util.List<java.lang.String> strList43 = org.apache.commons.io.IOUtils.readLines(inputStream33, charset42);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream33);
        boolean boolean45 = org.apache.commons.io.IOUtils.contentEquals(inputStream21, inputStream33);
        java.io.OutputStream outputStream46 = null;
        java.io.InputStream inputStream48 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream49 = null;
        java.io.InputStream inputStream52 = null;
        byte[] byteArray54 = org.apache.commons.io.IOUtils.toByteArray("");
        int int55 = org.apache.commons.io.IOUtils.read(inputStream52, byteArray54);
        long long56 = org.apache.commons.io.IOUtils.copyLarge(inputStream48, outputStream49, 0L, 0L, byteArray54);
        long long57 = org.apache.commons.io.IOUtils.copyLarge(inputStream33, outputStream46, byteArray54);
        org.apache.commons.io.IOUtils.readFully(inputStream17, byteArray54);
        org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray54);
        java.lang.String str60 = org.apache.commons.io.IOUtils.toString(inputStream1);
        java.io.BufferedInputStream bufferedInputStream62 = org.apache.commons.io.IOUtils.buffer(inputStream1, 100);
        java.io.Writer writer63 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer63);
        java.lang.Class<?> wildcardClass65 = inputStream1.getClass();
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream15);
        org.junit.Assert.assertNotNull(inputStream17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(inputStream21);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNotNull(strList31);
        org.junit.Assert.assertNotNull(inputStream33);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertNotNull(strList43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(inputStream48);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(bufferedInputStream62);
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    public void test0959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0959");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        byte[] byteArray3 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        byte[] byteArray4 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.io.OutputStream outputStream5 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(byteArray4, outputStream5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.OutputStream.write(byte[])\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
    }

    @Test
    public void test0960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0960");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        java.io.OutputStream outputStream10 = null;
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream10, (long) (short) 0, (-1L));
        char[] charArray14 = org.apache.commons.io.IOUtils.toCharArray(inputStream1);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream17 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray18 = new byte[] {};
        int int19 = org.apache.commons.io.IOUtils.length(byteArray18);
        int int20 = org.apache.commons.io.IOUtils.read(inputStream17, byteArray18);
        byte[] byteArray21 = org.apache.commons.io.IOUtils.toByteArray(inputStream17);
        byte[] byteArray23 = org.apache.commons.io.IOUtils.toByteArray(inputStream17, (int) (short) 0);
        java.io.BufferedInputStream bufferedInputStream24 = org.apache.commons.io.IOUtils.buffer(inputStream17);
        byte[] byteArray25 = org.apache.commons.io.IOUtils.toByteArray((java.io.InputStream) bufferedInputStream24);
        int int26 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray25);
        java.util.List<java.lang.String> strList27 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.Writer writer29 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList27, "", writer29);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[]");
        org.junit.Assert.assertNotNull(inputStream17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(strList27);
    }

    @Test
    public void test0961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0961");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        java.io.OutputStream outputStream10 = null;
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream10, (long) (short) 0, (-1L));
        java.io.OutputStream outputStream14 = null;
        long long15 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream14);
        java.io.InputStream inputStream17 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray18 = org.apache.commons.io.IOUtils.toByteArray(inputStream17);
        java.io.InputStream inputStream20 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray21 = new byte[] {};
        int int22 = org.apache.commons.io.IOUtils.length(byteArray21);
        int int23 = org.apache.commons.io.IOUtils.read(inputStream20, byteArray21);
        byte[] byteArray24 = org.apache.commons.io.IOUtils.toByteArray(inputStream20);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer25 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream20, iOExceptionConsumer25);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream20);
        java.io.BufferedInputStream bufferedInputStream29 = org.apache.commons.io.IOUtils.buffer(inputStream20, (int) (byte) 10);
        boolean boolean30 = org.apache.commons.io.IOUtils.contentEquals(inputStream17, inputStream20);
        java.io.InputStream inputStream32 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray33 = new byte[] {};
        int int34 = org.apache.commons.io.IOUtils.length(byteArray33);
        int int35 = org.apache.commons.io.IOUtils.read(inputStream32, byteArray33);
        byte[] byteArray36 = org.apache.commons.io.IOUtils.toByteArray(inputStream32);
        byte[] byteArray38 = org.apache.commons.io.IOUtils.toByteArray(inputStream32, (int) (short) 0);
        long long40 = org.apache.commons.io.IOUtils.skip(inputStream32, 100L);
        java.io.InputStream inputStream41 = null;
        java.io.InputStream inputStream42 = null;
        java.io.OutputStream outputStream43 = null;
        byte[] byteArray46 = new byte[] {};
        int int47 = org.apache.commons.io.IOUtils.length(byteArray46);
        java.io.OutputStream outputStream48 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray46, outputStream48);
        long long50 = org.apache.commons.io.IOUtils.copyLarge(inputStream42, outputStream43, 0L, (long) (byte) -1, byteArray46);
        java.io.OutputStream outputStream51 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray46, outputStream51);
        org.apache.commons.io.IOUtils.readFully(inputStream41, byteArray46);
        int int54 = org.apache.commons.io.IOUtils.read(inputStream32, byteArray46);
        int int55 = org.apache.commons.io.IOUtils.read(inputStream20, byteArray46);
        java.io.OutputStream outputStream56 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray46, outputStream56);
        org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray46);
        java.io.OutputStream outputStream59 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(byteArray46, outputStream59);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.OutputStream.write(byte[])\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(inputStream17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(inputStream20);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(inputStream32);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
    }

    @Test
    public void test0962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0962");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.BufferedInputStream bufferedInputStream10 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        byte[] byteArray11 = null;
        org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray11, (int) '4', 0);
        java.io.OutputStream outputStream15 = null;
        long long17 = org.apache.commons.io.IOUtils.copy(inputStream1, outputStream15, 0);
        char[] charArray18 = org.apache.commons.io.IOUtils.toCharArray(inputStream1);
        java.io.OutputStream outputStream19 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long22 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream19, (long) '\\', (long) '\\');
            org.junit.Assert.fail("Expected exception of type java.io.EOFException; message: Bytes to skip: 92 actual: 0");
        } catch (java.io.EOFException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream10);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(charArray18);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray18), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray18), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray18), "[]");
    }

    @Test
    public void test0963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0963");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray5 = new byte[] {};
        int int6 = org.apache.commons.io.IOUtils.length(byteArray5);
        int int7 = org.apache.commons.io.IOUtils.read(inputStream4, byteArray5);
        byte[] byteArray8 = org.apache.commons.io.IOUtils.toByteArray(inputStream4);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer9 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream4, iOExceptionConsumer9);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream4);
        java.io.BufferedInputStream bufferedInputStream13 = org.apache.commons.io.IOUtils.buffer(inputStream4, (int) (byte) 10);
        boolean boolean14 = org.apache.commons.io.IOUtils.contentEquals(inputStream1, inputStream4);
        java.io.InputStream inputStream16 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray17 = new byte[] {};
        int int18 = org.apache.commons.io.IOUtils.length(byteArray17);
        int int19 = org.apache.commons.io.IOUtils.read(inputStream16, byteArray17);
        byte[] byteArray20 = org.apache.commons.io.IOUtils.toByteArray(inputStream16);
        byte[] byteArray22 = org.apache.commons.io.IOUtils.toByteArray(inputStream16, (int) (short) 0);
        long long24 = org.apache.commons.io.IOUtils.skip(inputStream16, 100L);
        java.io.InputStream inputStream25 = null;
        java.io.InputStream inputStream26 = null;
        java.io.OutputStream outputStream27 = null;
        byte[] byteArray30 = new byte[] {};
        int int31 = org.apache.commons.io.IOUtils.length(byteArray30);
        java.io.OutputStream outputStream32 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray30, outputStream32);
        long long34 = org.apache.commons.io.IOUtils.copyLarge(inputStream26, outputStream27, 0L, (long) (byte) -1, byteArray30);
        java.io.OutputStream outputStream35 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray30, outputStream35);
        org.apache.commons.io.IOUtils.readFully(inputStream25, byteArray30);
        int int38 = org.apache.commons.io.IOUtils.read(inputStream16, byteArray30);
        int int39 = org.apache.commons.io.IOUtils.read(inputStream4, byteArray30);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer40 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream4, iOExceptionConsumer40);
        java.nio.charset.Charset charset42 = null;
        char[] charArray43 = org.apache.commons.io.IOUtils.toCharArray(inputStream4, charset42);
        java.io.OutputStream outputStream44 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(charArray43, outputStream44);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.OutputStream.write(byte[])\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(inputStream16);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(charArray43);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray43), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray43), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray43), "[]");
    }

    @Test
    public void test0964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0964");
        java.io.Reader reader0 = null;
        java.io.Writer writer1 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long4 = org.apache.commons.io.IOUtils.copyLarge(reader0, writer1, (long) 10, 100L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[], int, int)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0965");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream3 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1);
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream3);
        java.io.BufferedInputStream bufferedInputStream6 = org.apache.commons.io.IOUtils.buffer(inputStream4, 3);
        java.io.InputStream inputStream8 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream8);
        java.io.InputStream inputStream10 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream8);
        java.lang.String str11 = org.apache.commons.io.IOUtils.toString(inputStream8);
        java.io.InputStream inputStream12 = null;
        byte[] byteArray14 = org.apache.commons.io.IOUtils.toByteArray("");
        int int15 = org.apache.commons.io.IOUtils.read(inputStream12, byteArray14);
        org.apache.commons.io.IOUtils.readFully(inputStream8, byteArray14);
        java.io.InputStream inputStream18 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray19 = new byte[] {};
        int int20 = org.apache.commons.io.IOUtils.length(byteArray19);
        int int21 = org.apache.commons.io.IOUtils.read(inputStream18, byteArray19);
        byte[] byteArray22 = org.apache.commons.io.IOUtils.toByteArray(inputStream18);
        byte[] byteArray24 = org.apache.commons.io.IOUtils.toByteArray(inputStream18, (int) (short) 0);
        java.io.Writer writer25 = null;
        java.nio.charset.Charset charset26 = null;
        org.apache.commons.io.IOUtils.copy(inputStream18, writer25, charset26);
        java.io.InputStream inputStream29 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream30 = null;
        java.io.InputStream inputStream32 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream33 = null;
        java.io.InputStream inputStream36 = null;
        byte[] byteArray38 = org.apache.commons.io.IOUtils.toByteArray("");
        int int39 = org.apache.commons.io.IOUtils.read(inputStream36, byteArray38);
        long long40 = org.apache.commons.io.IOUtils.copyLarge(inputStream32, outputStream33, 0L, 0L, byteArray38);
        long long41 = org.apache.commons.io.IOUtils.copyLarge(inputStream29, outputStream30, byteArray38);
        java.lang.String str42 = org.apache.commons.io.IOUtils.toString(byteArray38);
        int int43 = org.apache.commons.io.IOUtils.read(inputStream18, byteArray38);
        org.apache.commons.io.IOUtils.readFully(inputStream8, byteArray38);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.readFully(inputStream4, byteArray38, 3, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Range [3, 3 + 52) out of bounds for length 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream3);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(bufferedInputStream6);
        org.junit.Assert.assertNotNull(inputStream8);
        org.junit.Assert.assertNotNull(inputStream10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(inputStream18);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertNotNull(inputStream29);
        org.junit.Assert.assertNotNull(inputStream32);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
    }

    @Test
    public void test0966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0966");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream5 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray("");
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray10);
        long long12 = org.apache.commons.io.IOUtils.copyLarge(inputStream4, outputStream5, 0L, 0L, byteArray10);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, byteArray10);
        java.io.BufferedInputStream bufferedInputStream15 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.nio.charset.Charset charset16 = null;
        java.util.List<java.lang.String> strList17 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset16);
        java.io.OutputStream outputStream18 = null;
        long long21 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream18, 0L, (long) 0);
        java.nio.charset.Charset charset22 = null;
        char[] charArray23 = org.apache.commons.io.IOUtils.toCharArray(inputStream1, charset22);
        java.io.InputStream inputStream25 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream25);
        java.io.InputStream inputStream27 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream25);
        java.lang.String str28 = org.apache.commons.io.IOUtils.toString(inputStream25);
        java.io.InputStream inputStream29 = null;
        byte[] byteArray31 = org.apache.commons.io.IOUtils.toByteArray("");
        int int32 = org.apache.commons.io.IOUtils.read(inputStream29, byteArray31);
        org.apache.commons.io.IOUtils.readFully(inputStream25, byteArray31);
        int int34 = org.apache.commons.io.IOUtils.length(byteArray31);
        org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray31);
        java.io.OutputStream outputStream36 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(byteArray31, outputStream36);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.OutputStream.write(byte[])\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream15);
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[]");
        org.junit.Assert.assertNotNull(inputStream25);
        org.junit.Assert.assertNotNull(inputStream27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
    }

    @Test
    public void test0967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0967");
        java.io.Reader reader0 = null;
        java.io.Reader reader1 = null;
        java.io.Reader reader2 = null;
        java.io.Reader reader3 = null;
        java.io.Writer writer4 = null;
        char[] charArray7 = new char[] {};
        int int8 = org.apache.commons.io.IOUtils.length(charArray7);
        java.io.Writer writer9 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray7, writer9);
        java.io.Writer writer11 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray7, writer11);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(reader3, writer4, 0L, (long) (byte) 100, charArray7);
        int int14 = org.apache.commons.io.IOUtils.read(reader2, charArray7);
        int int15 = org.apache.commons.io.IOUtils.length(charArray7);
        java.io.Writer writer16 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray7, writer16);
        org.apache.commons.io.IOUtils.readFully(reader1, charArray7);
        // The following exception was thrown during execution in test generation
        try {
            int int21 = org.apache.commons.io.IOUtils.read(reader0, charArray7, (int) (byte) -1, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Length must not be negative: -1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test0968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0968");
        java.nio.charset.Charset charset1 = null;
        java.io.InputStream inputStream2 = org.apache.commons.io.IOUtils.toInputStream("", charset1);
        java.nio.charset.Charset charset3 = null;
        java.lang.String str4 = org.apache.commons.io.IOUtils.toString(inputStream2, charset3);
        java.nio.charset.Charset charset5 = null;
        char[] charArray6 = org.apache.commons.io.IOUtils.toCharArray(inputStream2, charset5);
        java.io.Writer writer7 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.copy(inputStream2, writer7, "");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[]");
    }

    @Test
    public void test0969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0969");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        java.io.Writer writer10 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer10);
        java.util.List<java.lang.String> strList12 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.Writer writer14 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList12, "\r\n", writer14);
        java.io.Writer writer17 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList12, "hi!", writer17);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(strList12);
    }

    @Test
    public void test0970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0970");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.BufferedInputStream bufferedInputStream10 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        byte[] byteArray11 = null;
        org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray11, (int) '4', 0);
        java.io.BufferedInputStream bufferedInputStream15 = org.apache.commons.io.IOUtils.buffer(inputStream1);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray17 = org.apache.commons.io.IOUtils.readFully(inputStream1, 2);
            org.junit.Assert.fail("Expected exception of type java.io.EOFException; message: Length to read: 2 actual: 0");
        } catch (java.io.EOFException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream10);
        org.junit.Assert.assertNotNull(bufferedInputStream15);
    }

    @Test
    public void test0971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0971");
        java.io.Reader reader0 = null;
        java.io.Writer writer1 = null;
        java.io.Reader reader2 = null;
        java.io.Reader reader3 = null;
        java.io.Reader reader4 = null;
        java.io.Reader reader5 = null;
        java.io.Writer writer6 = null;
        char[] charArray9 = new char[] {};
        int int10 = org.apache.commons.io.IOUtils.length(charArray9);
        java.io.Writer writer11 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray9, writer11);
        java.io.Writer writer13 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray9, writer13);
        long long15 = org.apache.commons.io.IOUtils.copyLarge(reader5, writer6, 0L, (long) (byte) 100, charArray9);
        int int16 = org.apache.commons.io.IOUtils.read(reader4, charArray9);
        int int17 = org.apache.commons.io.IOUtils.length(charArray9);
        int int18 = org.apache.commons.io.IOUtils.read(reader3, charArray9);
        int int19 = org.apache.commons.io.IOUtils.read(reader2, charArray9);
        // The following exception was thrown during execution in test generation
        try {
            long long20 = org.apache.commons.io.IOUtils.copyLarge(reader0, writer1, charArray9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[])\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test0972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0972");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.BufferedInputStream bufferedInputStream10 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        byte[] byteArray11 = null;
        org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray11, (int) '4', 0);
        java.io.OutputStream outputStream15 = null;
        long long17 = org.apache.commons.io.IOUtils.copy(inputStream1, outputStream15, 0);
        char[] charArray18 = org.apache.commons.io.IOUtils.toCharArray(inputStream1);
        java.io.Writer writer19 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(charArray18, writer19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Writer.write(char[])\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream10);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(charArray18);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray18), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray18), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray18), "[]");
    }

    @Test
    public void test0973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0973");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray5 = new byte[] {};
        int int6 = org.apache.commons.io.IOUtils.length(byteArray5);
        int int7 = org.apache.commons.io.IOUtils.read(inputStream4, byteArray5);
        byte[] byteArray8 = org.apache.commons.io.IOUtils.toByteArray(inputStream4);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer9 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream4, iOExceptionConsumer9);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream4);
        java.io.BufferedInputStream bufferedInputStream13 = org.apache.commons.io.IOUtils.buffer(inputStream4, (int) (byte) 10);
        boolean boolean14 = org.apache.commons.io.IOUtils.contentEquals(inputStream1, inputStream4);
        java.io.Writer writer15 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.copy(inputStream4, writer15, "");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test0974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0974");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream5 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray("");
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray10);
        long long12 = org.apache.commons.io.IOUtils.copyLarge(inputStream4, outputStream5, 0L, 0L, byteArray10);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, byteArray10);
        java.io.BufferedInputStream bufferedInputStream15 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        org.apache.commons.io.IOUtils.closeQuietly(inputStream1);
        java.nio.charset.Charset charset17 = null;
        java.lang.String str18 = org.apache.commons.io.IOUtils.toString(inputStream1, charset17);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
    }

    @Test
    public void test0975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0975");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray(inputStream1, (int) (short) 0);
        byte[] byteArray8 = new byte[] {};
        int int9 = org.apache.commons.io.IOUtils.length(byteArray8);
        org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray8);
        java.lang.String str11 = org.apache.commons.io.IOUtils.toString(byteArray8);
        int int12 = org.apache.commons.io.IOUtils.length(byteArray8);
        java.io.OutputStream outputStream13 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(byteArray8, outputStream13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.OutputStream.write(byte[])\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test0976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0976");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream3 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1);
        java.lang.String str4 = org.apache.commons.io.IOUtils.toString(inputStream1);
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray7);
        int int10 = org.apache.commons.io.IOUtils.length(byteArray7);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str12 = org.apache.commons.io.IOUtils.toString(byteArray7, "");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test0977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0977");
        java.io.OutputStream outputStream0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.BufferedOutputStream bufferedOutputStream2 = org.apache.commons.io.IOUtils.buffer(outputStream0, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: outputStream");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0978");
        java.io.OutputStream outputStream0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.BufferedOutputStream bufferedOutputStream2 = org.apache.commons.io.IOUtils.buffer(outputStream0, (int) '/');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: outputStream");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0979");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "hi!");
        java.io.InputStream inputStream3 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray4 = new byte[] {};
        int int5 = org.apache.commons.io.IOUtils.length(byteArray4);
        int int6 = org.apache.commons.io.IOUtils.read(inputStream3, byteArray4);
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray(inputStream3);
        byte[] byteArray9 = org.apache.commons.io.IOUtils.toByteArray(inputStream3, (int) (short) 0);
        java.io.BufferedInputStream bufferedInputStream10 = org.apache.commons.io.IOUtils.buffer(inputStream3);
        byte[] byteArray11 = org.apache.commons.io.IOUtils.toByteArray((java.io.InputStream) bufferedInputStream10);
        int int14 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray11, 0, 0);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray16 = org.apache.commons.io.IOUtils.toByteArray(inputStream1, (int) '\\');
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Unexpected read size. current: 3, expected: 92");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream3);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream10);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test0980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0980");
        java.io.Reader reader0 = null;
        char[] charArray1 = new char[] {};
        int int2 = org.apache.commons.io.IOUtils.length(charArray1);
        int int3 = org.apache.commons.io.IOUtils.read(reader0, charArray1);
        int int4 = org.apache.commons.io.IOUtils.length(charArray1);
        java.io.OutputStream outputStream5 = null;
        java.nio.charset.Charset charset6 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(charArray1, outputStream5, charset6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.OutputStream.write(byte[])\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray1);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray1), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray1), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray1), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test0981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0981");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        java.io.InputStream inputStream6 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray7 = new byte[] {};
        int int8 = org.apache.commons.io.IOUtils.length(byteArray7);
        int int9 = org.apache.commons.io.IOUtils.read(inputStream6, byteArray7);
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray(inputStream6);
        byte[] byteArray12 = org.apache.commons.io.IOUtils.toByteArray(inputStream6, (int) (short) 0);
        int int13 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray12);
        java.io.OutputStream outputStream14 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray12, outputStream14);
        java.io.OutputStream outputStream16 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(byteArray12, outputStream16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.OutputStream.write(byte[])\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(inputStream6);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test0982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0982");
        java.io.Reader reader0 = null;
        java.io.Reader reader1 = null;
        char[] charArray2 = new char[] {};
        int int3 = org.apache.commons.io.IOUtils.length(charArray2);
        java.io.Writer writer4 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray2, writer4);
        int int6 = org.apache.commons.io.IOUtils.read(reader1, charArray2);
        java.io.Writer writer7 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray2, writer7);
        int int9 = org.apache.commons.io.IOUtils.read(reader0, charArray2);
        java.io.Writer writer10 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(charArray2, writer10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Writer.write(char[])\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray2), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray2), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test0983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0983");
        java.io.InputStream inputStream0 = null;
        java.io.InputStream inputStream2 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray3 = new byte[] {};
        int int4 = org.apache.commons.io.IOUtils.length(byteArray3);
        int int5 = org.apache.commons.io.IOUtils.read(inputStream2, byteArray3);
        byte[] byteArray6 = org.apache.commons.io.IOUtils.toByteArray(inputStream2);
        java.io.InputStream inputStream8 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray9 = new byte[] {};
        int int10 = org.apache.commons.io.IOUtils.length(byteArray9);
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray9);
        byte[] byteArray12 = org.apache.commons.io.IOUtils.toByteArray(inputStream8);
        int int13 = org.apache.commons.io.IOUtils.length(byteArray12);
        org.apache.commons.io.IOUtils.readFully(inputStream2, byteArray12);
        java.lang.String str15 = org.apache.commons.io.IOUtils.toString(inputStream2);
        java.nio.charset.Charset charset17 = null;
        java.io.InputStream inputStream18 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "", charset17);
        java.io.OutputStream outputStream19 = null;
        java.io.InputStream inputStream21 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream22 = null;
        java.io.InputStream inputStream24 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream25 = null;
        java.io.InputStream inputStream28 = null;
        byte[] byteArray30 = org.apache.commons.io.IOUtils.toByteArray("");
        int int31 = org.apache.commons.io.IOUtils.read(inputStream28, byteArray30);
        long long32 = org.apache.commons.io.IOUtils.copyLarge(inputStream24, outputStream25, 0L, 0L, byteArray30);
        long long33 = org.apache.commons.io.IOUtils.copyLarge(inputStream21, outputStream22, byteArray30);
        java.io.BufferedInputStream bufferedInputStream35 = org.apache.commons.io.IOUtils.buffer(inputStream21, (int) (byte) 10);
        java.io.InputStream inputStream37 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray38 = org.apache.commons.io.IOUtils.toByteArray(inputStream37);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream37);
        java.io.InputStream inputStream41 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream42 = null;
        java.io.InputStream inputStream45 = null;
        byte[] byteArray47 = org.apache.commons.io.IOUtils.toByteArray("");
        int int48 = org.apache.commons.io.IOUtils.read(inputStream45, byteArray47);
        long long49 = org.apache.commons.io.IOUtils.copyLarge(inputStream41, outputStream42, 0L, 0L, byteArray47);
        java.nio.charset.Charset charset50 = null;
        java.util.List<java.lang.String> strList51 = org.apache.commons.io.IOUtils.readLines(inputStream41, charset50);
        java.io.InputStream inputStream53 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream54 = null;
        java.io.InputStream inputStream57 = null;
        byte[] byteArray59 = org.apache.commons.io.IOUtils.toByteArray("");
        int int60 = org.apache.commons.io.IOUtils.read(inputStream57, byteArray59);
        long long61 = org.apache.commons.io.IOUtils.copyLarge(inputStream53, outputStream54, 0L, 0L, byteArray59);
        java.nio.charset.Charset charset62 = null;
        java.util.List<java.lang.String> strList63 = org.apache.commons.io.IOUtils.readLines(inputStream53, charset62);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream53);
        boolean boolean65 = org.apache.commons.io.IOUtils.contentEquals(inputStream41, inputStream53);
        java.io.OutputStream outputStream66 = null;
        java.io.InputStream inputStream68 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream69 = null;
        java.io.InputStream inputStream72 = null;
        byte[] byteArray74 = org.apache.commons.io.IOUtils.toByteArray("");
        int int75 = org.apache.commons.io.IOUtils.read(inputStream72, byteArray74);
        long long76 = org.apache.commons.io.IOUtils.copyLarge(inputStream68, outputStream69, 0L, 0L, byteArray74);
        long long77 = org.apache.commons.io.IOUtils.copyLarge(inputStream53, outputStream66, byteArray74);
        org.apache.commons.io.IOUtils.readFully(inputStream37, byteArray74);
        org.apache.commons.io.IOUtils.readFully(inputStream21, byteArray74);
        int int80 = org.apache.commons.io.IOUtils.length(byteArray74);
        long long81 = org.apache.commons.io.IOUtils.copyLarge(inputStream18, outputStream19, byteArray74);
        int int82 = org.apache.commons.io.IOUtils.read(inputStream2, byteArray74);
        // The following exception was thrown during execution in test generation
        try {
            int int85 = org.apache.commons.io.IOUtils.read(inputStream0, byteArray74, (int) (short) 100, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.InputStream.read(byte[], int, int)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(inputStream8);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(inputStream18);
        org.junit.Assert.assertNotNull(inputStream21);
        org.junit.Assert.assertNotNull(inputStream24);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream35);
        org.junit.Assert.assertNotNull(inputStream37);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertNotNull(inputStream41);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertNotNull(strList51);
        org.junit.Assert.assertNotNull(inputStream53);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
        org.junit.Assert.assertNotNull(strList63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(inputStream68);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 0L + "'", long76 == 0L);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 0L + "'", long77 == 0L);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 0L + "'", long81 == 0L);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
    }

    @Test
    public void test0984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0984");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        java.io.BufferedInputStream bufferedInputStream6 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) ' ');
        java.io.Writer writer7 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.copy((java.io.InputStream) bufferedInputStream6, writer7, "\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ?");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(bufferedInputStream6);
    }

    @Test
    public void test0985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0985");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream5 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray("");
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray10);
        long long12 = org.apache.commons.io.IOUtils.copyLarge(inputStream4, outputStream5, 0L, 0L, byteArray10);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, byteArray10);
        java.io.BufferedInputStream bufferedInputStream15 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.io.OutputStream outputStream16 = null;
        long long17 = org.apache.commons.io.IOUtils.copyLarge((java.io.InputStream) bufferedInputStream15, outputStream16);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) bufferedInputStream15);
        // The following exception was thrown during execution in test generation
        try {
            char[] charArray19 = org.apache.commons.io.IOUtils.toCharArray((java.io.InputStream) bufferedInputStream15);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Stream closed");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
    }

    @Test
    public void test0986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0986");
        java.nio.charset.Charset charset1 = null;
        java.io.InputStream inputStream2 = org.apache.commons.io.IOUtils.toInputStream("hi!", charset1);
        java.nio.charset.Charset charset3 = null;
        char[] charArray4 = org.apache.commons.io.IOUtils.toCharArray(inputStream2, charset3);
        java.io.InputStream inputStream5 = null;
        byte[] byteArray6 = new byte[] {};
        int int7 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray6);
        // The following exception was thrown during execution in test generation
        try {
            int int10 = org.apache.commons.io.IOUtils.read(inputStream2, byteArray6, (int) (byte) 0, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Range [0, 0 + 10) out of bounds for length 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream2);
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "hi!");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "hi!");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[h, i, !]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test0987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0987");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray(inputStream1, (int) (short) 0);
        byte[] byteArray8 = new byte[] {};
        int int9 = org.apache.commons.io.IOUtils.length(byteArray8);
        org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray8);
        java.io.Writer writer11 = null;
        java.nio.charset.Charset charset12 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(byteArray8, writer11, charset12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Writer.write(String)\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test0988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0988");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray(inputStream1, (int) (short) 0);
        java.io.BufferedInputStream bufferedInputStream8 = org.apache.commons.io.IOUtils.buffer(inputStream1);
        org.apache.commons.io.function.IOConsumer<java.io.IOException> iOExceptionIOConsumer9 = null;
        org.apache.commons.io.IOUtils.close((java.io.Closeable) bufferedInputStream8, iOExceptionIOConsumer9);
        // The following exception was thrown during execution in test generation
        try {
            java.io.InputStream inputStream12 = org.apache.commons.io.IOUtils.toBufferedInputStream((java.io.InputStream) bufferedInputStream8, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Stream closed");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream8);
    }

    @Test
    public void test0989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0989");
        java.io.InputStream inputStream0 = null;
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray1 = org.apache.commons.io.IOUtils.toByteArray(inputStream0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.InputStream.read(byte[])\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0990");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.BufferedInputStream bufferedInputStream10 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        byte[] byteArray11 = null;
        org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray11, (int) '4', 0);
        java.util.List<java.lang.String> strList15 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray17 = org.apache.commons.io.IOUtils.toByteArray(inputStream1, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Size must be equal or greater than zero: -1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream10);
        org.junit.Assert.assertNotNull(strList15);
    }

    @Test
    public void test0991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0991");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream3 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1);
        java.io.Writer writer4 = null;
        java.nio.charset.Charset charset5 = null;
        org.apache.commons.io.IOUtils.copy(inputStream3, writer4, charset5);
        org.apache.commons.io.function.IOConsumer<java.io.IOException> iOExceptionIOConsumer7 = null;
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream3, iOExceptionIOConsumer7);
        java.io.Writer writer9 = null;
        java.nio.charset.Charset charset10 = null;
        org.apache.commons.io.IOUtils.copy(inputStream3, writer9, charset10);
        java.io.Writer writer12 = null;
        org.apache.commons.io.IOUtils.copy(inputStream3, writer12);
        // The following exception was thrown during execution in test generation
        try {
            char[] charArray15 = org.apache.commons.io.IOUtils.toCharArray(inputStream3, "");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream3);
    }

    @Test
    public void test0992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0992");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray(inputStream1, (int) (short) 0);
        long long9 = org.apache.commons.io.IOUtils.skip(inputStream1, 100L);
        java.lang.Class<?> wildcardClass10 = inputStream1.getClass();
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0993");
        java.io.Reader reader0 = null;
        char[] charArray1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.readFully(reader0, charArray1, 3, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[], int, int)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0994");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        java.io.InputStream inputStream5 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1);
        byte[] byteArray6 = org.apache.commons.io.IOUtils.toByteArray(inputStream5);
        // The following exception was thrown during execution in test generation
        try {
            char[] charArray8 = org.apache.commons.io.IOUtils.toCharArray(inputStream5, "\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ?");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(inputStream5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
    }

    @Test
    public void test0995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0995");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream5 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray("");
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray10);
        long long12 = org.apache.commons.io.IOUtils.copyLarge(inputStream4, outputStream5, 0L, 0L, byteArray10);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, byteArray10);
        java.io.BufferedInputStream bufferedInputStream15 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.io.InputStream inputStream17 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray18 = org.apache.commons.io.IOUtils.toByteArray(inputStream17);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream17);
        java.io.InputStream inputStream21 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream22 = null;
        java.io.InputStream inputStream25 = null;
        byte[] byteArray27 = org.apache.commons.io.IOUtils.toByteArray("");
        int int28 = org.apache.commons.io.IOUtils.read(inputStream25, byteArray27);
        long long29 = org.apache.commons.io.IOUtils.copyLarge(inputStream21, outputStream22, 0L, 0L, byteArray27);
        java.nio.charset.Charset charset30 = null;
        java.util.List<java.lang.String> strList31 = org.apache.commons.io.IOUtils.readLines(inputStream21, charset30);
        java.io.InputStream inputStream33 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream34 = null;
        java.io.InputStream inputStream37 = null;
        byte[] byteArray39 = org.apache.commons.io.IOUtils.toByteArray("");
        int int40 = org.apache.commons.io.IOUtils.read(inputStream37, byteArray39);
        long long41 = org.apache.commons.io.IOUtils.copyLarge(inputStream33, outputStream34, 0L, 0L, byteArray39);
        java.nio.charset.Charset charset42 = null;
        java.util.List<java.lang.String> strList43 = org.apache.commons.io.IOUtils.readLines(inputStream33, charset42);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream33);
        boolean boolean45 = org.apache.commons.io.IOUtils.contentEquals(inputStream21, inputStream33);
        java.io.OutputStream outputStream46 = null;
        java.io.InputStream inputStream48 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream49 = null;
        java.io.InputStream inputStream52 = null;
        byte[] byteArray54 = org.apache.commons.io.IOUtils.toByteArray("");
        int int55 = org.apache.commons.io.IOUtils.read(inputStream52, byteArray54);
        long long56 = org.apache.commons.io.IOUtils.copyLarge(inputStream48, outputStream49, 0L, 0L, byteArray54);
        long long57 = org.apache.commons.io.IOUtils.copyLarge(inputStream33, outputStream46, byteArray54);
        org.apache.commons.io.IOUtils.readFully(inputStream17, byteArray54);
        org.apache.commons.io.IOUtils.readFully((java.io.InputStream) bufferedInputStream15, byteArray54);
        java.nio.charset.Charset charset60 = null;
        java.lang.String str61 = org.apache.commons.io.IOUtils.toString((java.io.InputStream) bufferedInputStream15, charset60);
        java.lang.String str62 = org.apache.commons.io.IOUtils.toString((java.io.InputStream) bufferedInputStream15);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream15);
        org.junit.Assert.assertNotNull(inputStream17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(inputStream21);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNotNull(strList31);
        org.junit.Assert.assertNotNull(inputStream33);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertNotNull(strList43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(inputStream48);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
    }

    @Test
    public void test0996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0996");
        java.nio.charset.Charset charset1 = null;
        java.io.InputStream inputStream2 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "", charset1);
        java.util.List<java.lang.String> strList3 = org.apache.commons.io.IOUtils.readLines(inputStream2);
        java.io.InputStream inputStream5 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray6 = new byte[] {};
        int int7 = org.apache.commons.io.IOUtils.length(byteArray6);
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray6);
        byte[] byteArray9 = org.apache.commons.io.IOUtils.toByteArray(inputStream5);
        int int10 = org.apache.commons.io.IOUtils.length(byteArray9);
        org.apache.commons.io.IOUtils.readFully(inputStream2, byteArray9);
        byte[] byteArray13 = org.apache.commons.io.IOUtils.toByteArray(inputStream2, 0L);
        java.io.Writer writer14 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.copy(inputStream2, writer14, "\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ?");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream2);
        org.junit.Assert.assertNotNull(strList3);
        org.junit.Assert.assertNotNull(inputStream5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
    }

    @Test
    public void test0997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0997");
        java.nio.channels.ReadableByteChannel readableByteChannel0 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long2 = org.apache.commons.io.IOUtils.skip(readableByteChannel0, (long) (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Skip count must be non-negative, actual: -1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0998");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.BufferedInputStream bufferedInputStream10 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.io.InputStream inputStream12 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, (int) (byte) 1);
        java.io.OutputStream outputStream13 = null;
        int int14 = org.apache.commons.io.IOUtils.copy(inputStream12, outputStream13);
        java.io.OutputStream outputStream15 = null;
        int int16 = org.apache.commons.io.IOUtils.copy(inputStream12, outputStream15);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer17 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) outputStream15, iOExceptionConsumer17);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream10);
        org.junit.Assert.assertNotNull(inputStream12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test0999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0999");
        // The following exception was thrown during execution in test generation
        try {
            java.io.InputStream inputStream2 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "", "\r\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ??");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test1000");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        byte[] byteArray3 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str5 = org.apache.commons.io.IOUtils.toString(inputStream1, "hi!");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: hi!");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
    }
}

