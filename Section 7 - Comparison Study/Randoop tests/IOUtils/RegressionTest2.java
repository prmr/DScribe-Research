import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest2 {

    public static boolean debug = false;

    @Test
    public void test1001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1001");
        char[] charArray0 = null;
        java.io.Writer writer1 = null;
        org.apache.commons.io.IOUtils.write(charArray0, writer1);
    }

    @Test
    public void test1002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1002");
        java.io.Reader reader0 = null;
        java.io.Reader reader1 = null;
        char[] charArray2 = new char[] {};
        int int3 = org.apache.commons.io.IOUtils.length(charArray2);
        int int4 = org.apache.commons.io.IOUtils.read(reader1, charArray2);
        java.io.Writer writer5 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray2, writer5);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.readFully(reader0, charArray2, (int) 'a', (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[], int, int)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray2), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray2), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test1003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1003");
        java.io.Reader reader0 = null;
        java.io.Writer writer1 = null;
        java.nio.charset.Charset charset3 = null;
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream("", charset3);
        java.nio.charset.Charset charset5 = null;
        java.lang.String str6 = org.apache.commons.io.IOUtils.toString(inputStream4, charset5);
        char[] charArray7 = org.apache.commons.io.IOUtils.toCharArray(inputStream4);
        // The following exception was thrown during execution in test generation
        try {
            long long8 = org.apache.commons.io.IOUtils.copyLarge(reader0, writer1, charArray7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[])\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[]");
    }

    @Test
    public void test1004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1004");
        java.io.OutputStream outputStream1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write((java.lang.CharSequence) "", outputStream1, "\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ?");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1005");
        java.io.Reader reader0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.skipFully(reader0, (long) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[], int, int)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1006");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.BufferedInputStream bufferedInputStream10 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.io.InputStream inputStream12 = org.apache.commons.io.IOUtils.toBufferedInputStream((java.io.InputStream) bufferedInputStream10, (int) '#');
        long long14 = org.apache.commons.io.IOUtils.skip(inputStream12, (long) 6);
        java.nio.charset.Charset charset15 = null;
        org.apache.commons.io.LineIterator lineIterator16 = org.apache.commons.io.IOUtils.lineIterator(inputStream12, charset15);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) lineIterator16);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) lineIterator16);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream10);
        org.junit.Assert.assertNotNull(inputStream12);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(lineIterator16);
    }

    @Test
    public void test1007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1007");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.BufferedInputStream bufferedInputStream10 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        org.apache.commons.io.function.IOConsumer<java.io.IOException> iOExceptionIOConsumer11 = null;
        org.apache.commons.io.IOUtils.close((java.io.Closeable) bufferedInputStream10, iOExceptionIOConsumer11);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) bufferedInputStream10);
        org.apache.commons.io.IOUtils.skipFully((java.io.InputStream) bufferedInputStream10, (long) (short) 0);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) bufferedInputStream10);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream10);
    }

    @Test
    public void test1008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1008");
        java.nio.channels.ReadableByteChannel readableByteChannel0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.skipFully(readableByteChannel0, (long) 4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.nio.channels.ReadableByteChannel.read(java.nio.ByteBuffer)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1009");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        java.nio.charset.Charset charset10 = null;
        java.util.List<java.lang.String> strList11 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset10);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.io.Writer writer13 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.copy(inputStream1, writer13, "hi!");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: hi!");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(strList11);
    }

    @Test
    public void test1010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1010");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.BufferedInputStream bufferedInputStream10 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        byte[] byteArray11 = null;
        org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray11, (int) '4', 0);
        java.io.BufferedInputStream bufferedInputStream15 = org.apache.commons.io.IOUtils.buffer(inputStream1);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray17 = org.apache.commons.io.IOUtils.toByteArray(inputStream1, (long) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Unexpected read size. current: 0, expected: 1");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream10);
        org.junit.Assert.assertNotNull(bufferedInputStream15);
    }

    @Test
    public void test1011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1011");
        java.io.Writer writer0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.BufferedWriter bufferedWriter2 = org.apache.commons.io.IOUtils.buffer(writer0, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1012");
        java.io.Reader reader0 = null;
        java.io.Writer writer1 = null;
        char[] charArray4 = new char[] {};
        int int5 = org.apache.commons.io.IOUtils.length(charArray4);
        java.io.Writer writer6 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray4, writer6);
        java.io.Writer writer8 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray4, writer8);
        long long10 = org.apache.commons.io.IOUtils.copyLarge(reader0, writer1, 0L, (long) (byte) 100, charArray4);
        java.io.Writer writer11 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray4, writer11);
        java.io.OutputStream outputStream13 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(charArray4, outputStream13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.OutputStream.write(byte[])\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
    }

    @Test
    public void test1013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1013");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray(inputStream1, (int) (short) 0);
        java.io.BufferedInputStream bufferedInputStream8 = org.apache.commons.io.IOUtils.buffer(inputStream1);
        java.io.Writer writer9 = null;
        java.nio.charset.Charset charset10 = null;
        org.apache.commons.io.IOUtils.copy((java.io.InputStream) bufferedInputStream8, writer9, charset10);
        java.nio.charset.Charset charset12 = null;
        org.apache.commons.io.LineIterator lineIterator13 = org.apache.commons.io.IOUtils.lineIterator((java.io.InputStream) bufferedInputStream8, charset12);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) lineIterator13);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream8);
        org.junit.Assert.assertNotNull(lineIterator13);
    }

    @Test
    public void test1014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1014");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        java.nio.charset.Charset charset5 = null;
        org.apache.commons.io.LineIterator lineIterator6 = org.apache.commons.io.IOUtils.lineIterator(inputStream1, charset5);
        java.io.InputStream inputStream8 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray9 = new byte[] {};
        int int10 = org.apache.commons.io.IOUtils.length(byteArray9);
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray9);
        byte[] byteArray12 = org.apache.commons.io.IOUtils.toByteArray(inputStream8);
        boolean boolean13 = org.apache.commons.io.IOUtils.contentEquals(inputStream1, inputStream8);
        java.io.InputStream inputStream15 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray16 = new byte[] {};
        int int17 = org.apache.commons.io.IOUtils.length(byteArray16);
        int int18 = org.apache.commons.io.IOUtils.read(inputStream15, byteArray16);
        byte[] byteArray19 = org.apache.commons.io.IOUtils.toByteArray(inputStream15);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer20 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream15, iOExceptionConsumer20);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream15);
        java.io.BufferedInputStream bufferedInputStream24 = org.apache.commons.io.IOUtils.buffer(inputStream15, (int) (byte) 10);
        java.io.InputStream inputStream26 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream15, (int) (byte) 1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer27 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream15, iOExceptionConsumer27);
        java.io.OutputStream outputStream29 = null;
        java.io.InputStream inputStream31 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray32 = new byte[] {};
        int int33 = org.apache.commons.io.IOUtils.length(byteArray32);
        int int34 = org.apache.commons.io.IOUtils.read(inputStream31, byteArray32);
        byte[] byteArray35 = org.apache.commons.io.IOUtils.toByteArray(inputStream31);
        java.io.InputStream inputStream37 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray38 = new byte[] {};
        int int39 = org.apache.commons.io.IOUtils.length(byteArray38);
        int int40 = org.apache.commons.io.IOUtils.read(inputStream37, byteArray38);
        byte[] byteArray41 = org.apache.commons.io.IOUtils.toByteArray(inputStream37);
        int int42 = org.apache.commons.io.IOUtils.length(byteArray41);
        org.apache.commons.io.IOUtils.readFully(inputStream31, byteArray41);
        long long44 = org.apache.commons.io.IOUtils.copyLarge(inputStream15, outputStream29, byteArray41);
        byte[] byteArray45 = org.apache.commons.io.IOUtils.toByteArray(inputStream15);
        org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray45);
        byte[] byteArray47 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.io.OutputStream outputStream48 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(byteArray47, outputStream48);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.OutputStream.write(byte[])\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(lineIterator6);
        org.junit.Assert.assertNotNull(inputStream8);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(inputStream15);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream24);
        org.junit.Assert.assertNotNull(inputStream26);
        org.junit.Assert.assertNotNull(inputStream31);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(inputStream37);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
    }

    @Test
    public void test1015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1015");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream("\n");
        byte[] byteArray3 = org.apache.commons.io.IOUtils.toByteArray(inputStream1, (int) (byte) 0);
        java.io.InputStream inputStream5 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray6 = new byte[] {};
        int int7 = org.apache.commons.io.IOUtils.length(byteArray6);
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray6);
        byte[] byteArray9 = org.apache.commons.io.IOUtils.toByteArray(inputStream5);
        byte[] byteArray11 = org.apache.commons.io.IOUtils.toByteArray(inputStream5, (int) (short) 0);
        byte[] byteArray12 = new byte[] {};
        int int13 = org.apache.commons.io.IOUtils.length(byteArray12);
        org.apache.commons.io.IOUtils.readFully(inputStream5, byteArray12);
        org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray12);
        java.io.OutputStream outputStream16 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(byteArray12, outputStream16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.OutputStream.write(byte[])\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertNotNull(inputStream5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test1016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1016");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "\n");
        java.util.List<java.lang.String> strList2 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.OutputStream outputStream4 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList2, "\n", outputStream4, "\r\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ??");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(strList2);
    }

    @Test
    public void test1017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1017");
        java.io.Reader reader0 = null;
        java.io.Reader reader1 = null;
        char[] charArray2 = new char[] {};
        int int3 = org.apache.commons.io.IOUtils.length(charArray2);
        java.io.Writer writer4 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray2, writer4);
        int int6 = org.apache.commons.io.IOUtils.read(reader1, charArray2);
        // The following exception was thrown during execution in test generation
        try {
            int int9 = org.apache.commons.io.IOUtils.read(reader0, charArray2, (int) '#', 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[], int, int)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray2), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray2), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test1018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1018");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.io.InputStream inputStream7 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, (int) (byte) 0);
        java.nio.charset.Charset charset8 = null;
        org.apache.commons.io.LineIterator lineIterator9 = org.apache.commons.io.IOUtils.lineIterator(inputStream7, charset8);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer10 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) lineIterator9, iOExceptionConsumer10);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(inputStream7);
        org.junit.Assert.assertNotNull(lineIterator9);
    }

    @Test
    public void test1019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1019");
        java.io.Reader reader0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.skipFully(reader0, (long) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[], int, int)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1020");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.BufferedInputStream bufferedInputStream10 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.io.InputStream inputStream12 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, (int) (byte) 1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer13 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer13);
        java.io.OutputStream outputStream15 = null;
        java.io.InputStream inputStream17 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray18 = new byte[] {};
        int int19 = org.apache.commons.io.IOUtils.length(byteArray18);
        int int20 = org.apache.commons.io.IOUtils.read(inputStream17, byteArray18);
        byte[] byteArray21 = org.apache.commons.io.IOUtils.toByteArray(inputStream17);
        java.io.InputStream inputStream23 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray24 = new byte[] {};
        int int25 = org.apache.commons.io.IOUtils.length(byteArray24);
        int int26 = org.apache.commons.io.IOUtils.read(inputStream23, byteArray24);
        byte[] byteArray27 = org.apache.commons.io.IOUtils.toByteArray(inputStream23);
        int int28 = org.apache.commons.io.IOUtils.length(byteArray27);
        org.apache.commons.io.IOUtils.readFully(inputStream17, byteArray27);
        long long30 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream15, byteArray27);
        java.io.InputStream inputStream32 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream33 = null;
        java.io.InputStream inputStream36 = null;
        byte[] byteArray38 = org.apache.commons.io.IOUtils.toByteArray("");
        int int39 = org.apache.commons.io.IOUtils.read(inputStream36, byteArray38);
        long long40 = org.apache.commons.io.IOUtils.copyLarge(inputStream32, outputStream33, 0L, 0L, byteArray38);
        java.nio.charset.Charset charset41 = null;
        java.util.List<java.lang.String> strList42 = org.apache.commons.io.IOUtils.readLines(inputStream32, charset41);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream32);
        java.nio.charset.Charset charset44 = null;
        java.lang.String str45 = org.apache.commons.io.IOUtils.toString(inputStream32, charset44);
        java.io.Writer writer46 = null;
        org.apache.commons.io.IOUtils.copy(inputStream32, writer46);
        byte[] byteArray48 = org.apache.commons.io.IOUtils.toByteArray(inputStream32);
        int int49 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray48);
        java.io.InputStream inputStream50 = null;
        byte[] byteArray52 = org.apache.commons.io.IOUtils.toByteArray("");
        int int53 = org.apache.commons.io.IOUtils.read(inputStream50, byteArray52);
        // The following exception was thrown during execution in test generation
        try {
            int int56 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray52, 4, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Range [4, 4 + 97) out of bounds for length 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream10);
        org.junit.Assert.assertNotNull(inputStream12);
        org.junit.Assert.assertNotNull(inputStream17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertNotNull(inputStream23);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(inputStream32);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertNotNull(strList42);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
    }

    @Test
    public void test1021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1021");
        byte[] byteArray1 = org.apache.commons.io.IOUtils.toByteArray("hi!");
        java.io.Writer writer2 = null;
        java.nio.charset.Charset charset3 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(byteArray1, writer2, charset3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Writer.write(String)\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[104, 105, 33]");
    }

    @Test
    public void test1022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1022");
        java.io.Reader reader0 = null;
        org.apache.commons.io.IOUtils.skipFully(reader0, (long) (byte) 0);
    }

    @Test
    public void test1023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1023");
        java.io.Reader reader0 = null;
        java.io.Writer writer1 = null;
        java.io.Reader reader4 = null;
        java.io.Reader reader5 = null;
        java.io.Reader reader6 = null;
        java.io.Writer writer7 = null;
        char[] charArray10 = new char[] {};
        int int11 = org.apache.commons.io.IOUtils.length(charArray10);
        java.io.Writer writer12 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray10, writer12);
        java.io.Writer writer14 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray10, writer14);
        long long16 = org.apache.commons.io.IOUtils.copyLarge(reader6, writer7, 0L, (long) (byte) 100, charArray10);
        int int17 = org.apache.commons.io.IOUtils.read(reader5, charArray10);
        int int18 = org.apache.commons.io.IOUtils.length(charArray10);
        int int19 = org.apache.commons.io.IOUtils.read(reader4, charArray10);
        long long20 = org.apache.commons.io.IOUtils.copyLarge(reader0, writer1, (long) (byte) -1, (long) 6, charArray10);
        java.io.Writer writer21 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(charArray10, writer21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Writer.write(char[])\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
    }

    @Test
    public void test1024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1024");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.nio.charset.Charset charset4 = null;
        org.apache.commons.io.LineIterator lineIterator5 = org.apache.commons.io.IOUtils.lineIterator(inputStream1, charset4);
        java.nio.charset.Charset charset6 = null;
        java.util.List<java.lang.String> strList7 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset6);
        byte[] byteArray8 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.io.InputStream inputStream10 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream11 = null;
        java.io.InputStream inputStream14 = null;
        byte[] byteArray16 = org.apache.commons.io.IOUtils.toByteArray("");
        int int17 = org.apache.commons.io.IOUtils.read(inputStream14, byteArray16);
        long long18 = org.apache.commons.io.IOUtils.copyLarge(inputStream10, outputStream11, 0L, 0L, byteArray16);
        // The following exception was thrown during execution in test generation
        try {
            int int21 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray16, 3, (int) '/');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Range [3, 3 + 47) out of bounds for length 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(lineIterator5);
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(inputStream10);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
    }

    @Test
    public void test1025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1025");
        byte[] byteArray0 = null;
        java.io.Writer writer1 = null;
        java.nio.charset.Charset charset2 = null;
        org.apache.commons.io.IOUtils.write(byteArray0, writer1, charset2);
    }

    @Test
    public void test1026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1026");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.nio.charset.Charset charset4 = null;
        org.apache.commons.io.LineIterator lineIterator5 = org.apache.commons.io.IOUtils.lineIterator(inputStream1, charset4);
        java.nio.charset.Charset charset6 = null;
        java.util.List<java.lang.String> strList7 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset6);
        java.io.OutputStream outputStream9 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList7, "", outputStream9);
        java.io.Writer writer12 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList7, "", writer12);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(lineIterator5);
        org.junit.Assert.assertNotNull(strList7);
    }

    @Test
    public void test1027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1027");
        java.io.Reader reader0 = null;
        java.io.Writer writer1 = null;
        java.io.Reader reader4 = null;
        java.io.Reader reader5 = null;
        java.io.Reader reader6 = null;
        java.io.Reader reader7 = null;
        java.io.Writer writer8 = null;
        char[] charArray11 = new char[] {};
        int int12 = org.apache.commons.io.IOUtils.length(charArray11);
        java.io.Writer writer13 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray11, writer13);
        java.io.Writer writer15 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray11, writer15);
        long long17 = org.apache.commons.io.IOUtils.copyLarge(reader7, writer8, 0L, (long) (byte) 100, charArray11);
        int int18 = org.apache.commons.io.IOUtils.read(reader6, charArray11);
        int int19 = org.apache.commons.io.IOUtils.length(charArray11);
        int int20 = org.apache.commons.io.IOUtils.read(reader5, charArray11);
        org.apache.commons.io.IOUtils.readFully(reader4, charArray11);
        java.io.Writer writer22 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray11, writer22);
        // The following exception was thrown during execution in test generation
        try {
            long long24 = org.apache.commons.io.IOUtils.copyLarge(reader0, writer1, (long) 100, (long) (byte) 10, charArray11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[], int, int)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    }

    @Test
    public void test1028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1028");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "\r\n");
        byte[] byteArray3 = org.apache.commons.io.IOUtils.toByteArray(inputStream1, 1L);
        java.io.OutputStream outputStream4 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long5 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.OutputStream.write(byte[], int, int)\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[13]");
    }

    @Test
    public void test1029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1029");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        java.io.Writer writer10 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer10);
        java.util.List<java.lang.String> strList12 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.InputStream inputStream14 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, 4);
        java.io.BufferedInputStream bufferedInputStream15 = org.apache.commons.io.IOUtils.buffer(inputStream14);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray17 = org.apache.commons.io.IOUtils.toByteArray(inputStream14, (int) '/');
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Unexpected read size. current: 0, expected: 47");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(strList12);
        org.junit.Assert.assertNotNull(inputStream14);
        org.junit.Assert.assertNotNull(bufferedInputStream15);
    }

    @Test
    public void test1030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1030");
        java.io.Reader reader0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.BufferedReader bufferedReader2 = org.apache.commons.io.IOUtils.buffer(reader0, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1031");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray(inputStream1, (int) (short) 0);
        long long9 = org.apache.commons.io.IOUtils.skip(inputStream1, 100L);
        java.io.InputStream inputStream10 = null;
        java.io.InputStream inputStream11 = null;
        java.io.OutputStream outputStream12 = null;
        byte[] byteArray15 = new byte[] {};
        int int16 = org.apache.commons.io.IOUtils.length(byteArray15);
        java.io.OutputStream outputStream17 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray15, outputStream17);
        long long19 = org.apache.commons.io.IOUtils.copyLarge(inputStream11, outputStream12, 0L, (long) (byte) -1, byteArray15);
        java.io.OutputStream outputStream20 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray15, outputStream20);
        org.apache.commons.io.IOUtils.readFully(inputStream10, byteArray15);
        int int23 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray15);
        java.io.InputStream inputStream24 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1);
        long long26 = org.apache.commons.io.IOUtils.skip(inputStream24, 0L);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.skipFully(inputStream24, (long) 4);
            org.junit.Assert.fail("Expected exception of type java.io.EOFException; message: Bytes to skip: 4 actual: 0");
        } catch (java.io.EOFException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(inputStream24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
    }

    @Test
    public void test1032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1032");
        java.io.Reader reader0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.BufferedReader bufferedReader2 = org.apache.commons.io.IOUtils.buffer(reader0, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1033");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.BufferedInputStream bufferedInputStream10 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.io.InputStream inputStream12 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, (int) (byte) 1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer13 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer13);
        java.io.OutputStream outputStream15 = null;
        java.io.InputStream inputStream17 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray18 = new byte[] {};
        int int19 = org.apache.commons.io.IOUtils.length(byteArray18);
        int int20 = org.apache.commons.io.IOUtils.read(inputStream17, byteArray18);
        byte[] byteArray21 = org.apache.commons.io.IOUtils.toByteArray(inputStream17);
        java.io.InputStream inputStream23 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray24 = new byte[] {};
        int int25 = org.apache.commons.io.IOUtils.length(byteArray24);
        int int26 = org.apache.commons.io.IOUtils.read(inputStream23, byteArray24);
        byte[] byteArray27 = org.apache.commons.io.IOUtils.toByteArray(inputStream23);
        int int28 = org.apache.commons.io.IOUtils.length(byteArray27);
        org.apache.commons.io.IOUtils.readFully(inputStream17, byteArray27);
        long long30 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream15, byteArray27);
        byte[] byteArray31 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.io.OutputStream outputStream32 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(byteArray31, outputStream32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.OutputStream.write(byte[])\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream10);
        org.junit.Assert.assertNotNull(inputStream12);
        org.junit.Assert.assertNotNull(inputStream17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertNotNull(inputStream23);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
    }

    @Test
    public void test1034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1034");
        java.io.Reader reader0 = null;
        java.io.Writer writer1 = null;
        java.io.Reader reader4 = null;
        java.io.Writer writer5 = null;
        java.io.Reader reader8 = null;
        java.io.Reader reader9 = null;
        java.io.Reader reader10 = null;
        java.io.Writer writer11 = null;
        char[] charArray14 = new char[] {};
        int int15 = org.apache.commons.io.IOUtils.length(charArray14);
        java.io.Writer writer16 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray14, writer16);
        java.io.Writer writer18 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray14, writer18);
        long long20 = org.apache.commons.io.IOUtils.copyLarge(reader10, writer11, 0L, (long) (byte) 100, charArray14);
        int int21 = org.apache.commons.io.IOUtils.read(reader9, charArray14);
        int int22 = org.apache.commons.io.IOUtils.length(charArray14);
        int int23 = org.apache.commons.io.IOUtils.read(reader8, charArray14);
        long long24 = org.apache.commons.io.IOUtils.copyLarge(reader4, writer5, (long) (byte) -1, (long) 6, charArray14);
        // The following exception was thrown during execution in test generation
        try {
            long long25 = org.apache.commons.io.IOUtils.copyLarge(reader0, writer1, (long) '/', (long) '#', charArray14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[], int, int)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
    }

    @Test
    public void test1035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1035");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.util.List<java.lang.String> strList4 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.OutputStream outputStream5 = null;
        long long6 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream5);
        java.io.Writer writer7 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer7);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream11 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray12 = new byte[] {};
        int int13 = org.apache.commons.io.IOUtils.length(byteArray12);
        int int14 = org.apache.commons.io.IOUtils.read(inputStream11, byteArray12);
        byte[] byteArray15 = org.apache.commons.io.IOUtils.toByteArray(inputStream11);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer16 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream11, iOExceptionConsumer16);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream11);
        java.io.BufferedInputStream bufferedInputStream20 = org.apache.commons.io.IOUtils.buffer(inputStream11, (int) (byte) 10);
        java.io.InputStream inputStream22 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream11, (int) (byte) 1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer23 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream11, iOExceptionConsumer23);
        java.io.OutputStream outputStream25 = null;
        java.io.InputStream inputStream27 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray28 = new byte[] {};
        int int29 = org.apache.commons.io.IOUtils.length(byteArray28);
        int int30 = org.apache.commons.io.IOUtils.read(inputStream27, byteArray28);
        byte[] byteArray31 = org.apache.commons.io.IOUtils.toByteArray(inputStream27);
        java.io.InputStream inputStream33 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray34 = new byte[] {};
        int int35 = org.apache.commons.io.IOUtils.length(byteArray34);
        int int36 = org.apache.commons.io.IOUtils.read(inputStream33, byteArray34);
        byte[] byteArray37 = org.apache.commons.io.IOUtils.toByteArray(inputStream33);
        int int38 = org.apache.commons.io.IOUtils.length(byteArray37);
        org.apache.commons.io.IOUtils.readFully(inputStream27, byteArray37);
        long long40 = org.apache.commons.io.IOUtils.copyLarge(inputStream11, outputStream25, byteArray37);
        boolean boolean41 = org.apache.commons.io.IOUtils.contentEquals(inputStream1, inputStream11);
        java.io.BufferedInputStream bufferedInputStream43 = org.apache.commons.io.IOUtils.buffer(inputStream1, 5);
        java.io.InputStream inputStream45 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream46 = null;
        java.io.InputStream inputStream49 = null;
        byte[] byteArray51 = org.apache.commons.io.IOUtils.toByteArray("");
        int int52 = org.apache.commons.io.IOUtils.read(inputStream49, byteArray51);
        long long53 = org.apache.commons.io.IOUtils.copyLarge(inputStream45, outputStream46, 0L, 0L, byteArray51);
        java.nio.charset.Charset charset54 = null;
        java.util.List<java.lang.String> strList55 = org.apache.commons.io.IOUtils.readLines(inputStream45, charset54);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream45);
        java.nio.charset.Charset charset57 = null;
        java.lang.String str58 = org.apache.commons.io.IOUtils.toString(inputStream45, charset57);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer59 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream45, iOExceptionConsumer59);
        boolean boolean61 = org.apache.commons.io.IOUtils.contentEquals((java.io.InputStream) bufferedInputStream43, inputStream45);
        java.io.InputStream inputStream63 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream64 = null;
        java.io.InputStream inputStream66 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream67 = null;
        java.io.InputStream inputStream70 = null;
        byte[] byteArray72 = org.apache.commons.io.IOUtils.toByteArray("");
        int int73 = org.apache.commons.io.IOUtils.read(inputStream70, byteArray72);
        long long74 = org.apache.commons.io.IOUtils.copyLarge(inputStream66, outputStream67, 0L, 0L, byteArray72);
        long long75 = org.apache.commons.io.IOUtils.copyLarge(inputStream63, outputStream64, byteArray72);
        java.lang.String str76 = org.apache.commons.io.IOUtils.toString(byteArray72);
        org.apache.commons.io.IOUtils.readFully(inputStream45, byteArray72);
        java.io.Writer writer78 = null;
        java.nio.charset.Charset charset79 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(byteArray72, writer78, charset79);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Writer.write(String)\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(inputStream11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream20);
        org.junit.Assert.assertNotNull(inputStream22);
        org.junit.Assert.assertNotNull(inputStream27);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(inputStream33);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(bufferedInputStream43);
        org.junit.Assert.assertNotNull(inputStream45);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertNotNull(strList55);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(inputStream63);
        org.junit.Assert.assertNotNull(inputStream66);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 0L + "'", long74 == 0L);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 0L + "'", long75 == 0L);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
    }

    @Test
    public void test1036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1036");
        java.io.Reader reader0 = null;
        java.io.Reader reader1 = null;
        java.io.Reader reader2 = null;
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream4);
        java.io.InputStream inputStream7 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray8 = new byte[] {};
        int int9 = org.apache.commons.io.IOUtils.length(byteArray8);
        int int10 = org.apache.commons.io.IOUtils.read(inputStream7, byteArray8);
        byte[] byteArray11 = org.apache.commons.io.IOUtils.toByteArray(inputStream7);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer12 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream7, iOExceptionConsumer12);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream7);
        java.io.BufferedInputStream bufferedInputStream16 = org.apache.commons.io.IOUtils.buffer(inputStream7, (int) (byte) 10);
        boolean boolean17 = org.apache.commons.io.IOUtils.contentEquals(inputStream4, inputStream7);
        java.io.OutputStream outputStream18 = null;
        long long21 = org.apache.commons.io.IOUtils.copyLarge(inputStream4, outputStream18, (long) (short) 0, (long) 2);
        char[] charArray22 = org.apache.commons.io.IOUtils.toCharArray(inputStream4);
        int int25 = org.apache.commons.io.IOUtils.read(reader2, charArray22, (int) 'a', 0);
        org.apache.commons.io.IOUtils.readFully(reader1, charArray22);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.readFully(reader0, charArray22, (int) (byte) 100, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[], int, int)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(inputStream7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray22), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray22), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray22), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
    }

    @Test
    public void test1037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1037");
        java.io.InputStream inputStream0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.String> strList2 = org.apache.commons.io.IOUtils.readLines(inputStream0, "\r\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ??");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1038");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.BufferedInputStream bufferedInputStream10 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        org.apache.commons.io.function.IOConsumer<java.io.IOException> iOExceptionIOConsumer11 = null;
        org.apache.commons.io.IOUtils.close((java.io.Closeable) bufferedInputStream10, iOExceptionIOConsumer11);
        java.nio.charset.Charset charset13 = null;
        org.apache.commons.io.LineIterator lineIterator14 = org.apache.commons.io.IOUtils.lineIterator((java.io.InputStream) bufferedInputStream10, charset13);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.InputStream) bufferedInputStream10);
        java.io.InputStream inputStream17 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray18 = new byte[] {};
        int int19 = org.apache.commons.io.IOUtils.length(byteArray18);
        int int20 = org.apache.commons.io.IOUtils.read(inputStream17, byteArray18);
        byte[] byteArray21 = org.apache.commons.io.IOUtils.toByteArray(inputStream17);
        byte[] byteArray23 = org.apache.commons.io.IOUtils.toByteArray(inputStream17, (int) (short) 0);
        byte[] byteArray24 = new byte[] {};
        int int25 = org.apache.commons.io.IOUtils.length(byteArray24);
        org.apache.commons.io.IOUtils.readFully(inputStream17, byteArray24);
        int int29 = org.apache.commons.io.IOUtils.read((java.io.InputStream) bufferedInputStream10, byteArray24, 1, (int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str31 = org.apache.commons.io.IOUtils.toString(byteArray24, "");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream10);
        org.junit.Assert.assertNotNull(lineIterator14);
        org.junit.Assert.assertNotNull(inputStream17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
    }

    @Test
    public void test1039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1039");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        java.io.BufferedInputStream bufferedInputStream10 = org.apache.commons.io.IOUtils.buffer(inputStream1);
        byte[] byteArray11 = org.apache.commons.io.IOUtils.toByteArray((java.io.InputStream) bufferedInputStream10);
        java.io.Writer writer12 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(byteArray11, writer12, "");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream10);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
    }

    @Test
    public void test1040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1040");
        char[] charArray0 = new char[] {};
        int int1 = org.apache.commons.io.IOUtils.length(charArray0);
        java.io.Writer writer2 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray0, writer2);
        int int4 = org.apache.commons.io.IOUtils.length(charArray0);
        java.io.OutputStream outputStream5 = null;
        java.nio.charset.Charset charset6 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(charArray0, outputStream5, charset6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.OutputStream.write(byte[])\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray0);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray0), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray0), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test1041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1041");
        java.io.Reader reader0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.skipFully(reader0, 1L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[], int, int)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1042");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        java.io.BufferedInputStream bufferedInputStream10 = org.apache.commons.io.IOUtils.buffer(inputStream1);
        byte[] byteArray11 = org.apache.commons.io.IOUtils.toByteArray((java.io.InputStream) bufferedInputStream10);
        java.io.Writer writer12 = null;
        java.nio.charset.Charset charset13 = null;
        org.apache.commons.io.IOUtils.copy((java.io.InputStream) bufferedInputStream10, writer12, charset13);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray16 = org.apache.commons.io.IOUtils.toByteArray((java.io.InputStream) bufferedInputStream10, (long) 1);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Unexpected read size. current: 0, expected: 1");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream10);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
    }

    @Test
    public void test1043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1043");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray(inputStream1, (int) (short) 0);
        long long9 = org.apache.commons.io.IOUtils.skip(inputStream1, 100L);
        java.io.InputStream inputStream11 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray12 = new byte[] {};
        int int13 = org.apache.commons.io.IOUtils.length(byteArray12);
        int int14 = org.apache.commons.io.IOUtils.read(inputStream11, byteArray12);
        byte[] byteArray15 = org.apache.commons.io.IOUtils.toByteArray(inputStream11);
        byte[] byteArray17 = org.apache.commons.io.IOUtils.toByteArray(inputStream11, (int) (short) 0);
        org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray17);
        java.lang.String str19 = org.apache.commons.io.IOUtils.toString(byteArray17);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(inputStream11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
    }

    @Test
    public void test1044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1044");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        java.nio.charset.Charset charset5 = null;
        org.apache.commons.io.LineIterator lineIterator6 = org.apache.commons.io.IOUtils.lineIterator(inputStream1, charset5);
        java.io.InputStream inputStream8 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray9 = new byte[] {};
        int int10 = org.apache.commons.io.IOUtils.length(byteArray9);
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray9);
        byte[] byteArray12 = org.apache.commons.io.IOUtils.toByteArray(inputStream8);
        boolean boolean13 = org.apache.commons.io.IOUtils.contentEquals(inputStream1, inputStream8);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.BufferedInputStream bufferedInputStream16 = org.apache.commons.io.IOUtils.buffer(inputStream1, 3);
        long long18 = org.apache.commons.io.IOUtils.skip((java.io.InputStream) bufferedInputStream16, 0L);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(lineIterator6);
        org.junit.Assert.assertNotNull(inputStream8);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(bufferedInputStream16);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
    }

    @Test
    public void test1045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1045");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.BufferedInputStream bufferedInputStream10 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.io.InputStream inputStream12 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, (int) (byte) 1);
        java.io.OutputStream outputStream13 = null;
        int int14 = org.apache.commons.io.IOUtils.copy(inputStream12, outputStream13);
        java.io.BufferedInputStream bufferedInputStream16 = org.apache.commons.io.IOUtils.buffer(inputStream12, (int) (byte) 10);
        java.io.InputStream inputStream18 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray19 = new byte[] {};
        int int20 = org.apache.commons.io.IOUtils.length(byteArray19);
        int int21 = org.apache.commons.io.IOUtils.read(inputStream18, byteArray19);
        byte[] byteArray22 = org.apache.commons.io.IOUtils.toByteArray(inputStream18);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer23 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream18, iOExceptionConsumer23);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream18);
        java.io.BufferedInputStream bufferedInputStream27 = org.apache.commons.io.IOUtils.buffer(inputStream18, (int) (byte) 10);
        java.io.InputStream inputStream29 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream18, (int) (byte) 1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer30 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream18, iOExceptionConsumer30);
        java.io.OutputStream outputStream32 = null;
        java.io.InputStream inputStream34 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray35 = new byte[] {};
        int int36 = org.apache.commons.io.IOUtils.length(byteArray35);
        int int37 = org.apache.commons.io.IOUtils.read(inputStream34, byteArray35);
        byte[] byteArray38 = org.apache.commons.io.IOUtils.toByteArray(inputStream34);
        java.io.InputStream inputStream40 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray41 = new byte[] {};
        int int42 = org.apache.commons.io.IOUtils.length(byteArray41);
        int int43 = org.apache.commons.io.IOUtils.read(inputStream40, byteArray41);
        byte[] byteArray44 = org.apache.commons.io.IOUtils.toByteArray(inputStream40);
        int int45 = org.apache.commons.io.IOUtils.length(byteArray44);
        org.apache.commons.io.IOUtils.readFully(inputStream34, byteArray44);
        long long47 = org.apache.commons.io.IOUtils.copyLarge(inputStream18, outputStream32, byteArray44);
        java.io.InputStream inputStream49 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream50 = null;
        java.io.InputStream inputStream53 = null;
        byte[] byteArray55 = org.apache.commons.io.IOUtils.toByteArray("");
        int int56 = org.apache.commons.io.IOUtils.read(inputStream53, byteArray55);
        long long57 = org.apache.commons.io.IOUtils.copyLarge(inputStream49, outputStream50, 0L, 0L, byteArray55);
        java.nio.charset.Charset charset58 = null;
        java.util.List<java.lang.String> strList59 = org.apache.commons.io.IOUtils.readLines(inputStream49, charset58);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream49);
        java.nio.charset.Charset charset61 = null;
        java.lang.String str62 = org.apache.commons.io.IOUtils.toString(inputStream49, charset61);
        java.io.Writer writer63 = null;
        org.apache.commons.io.IOUtils.copy(inputStream49, writer63);
        byte[] byteArray65 = org.apache.commons.io.IOUtils.toByteArray(inputStream49);
        int int66 = org.apache.commons.io.IOUtils.read(inputStream18, byteArray65);
        org.apache.commons.io.IOUtils.readFully(inputStream12, byteArray65);
        java.io.Writer writer68 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(byteArray65, writer68, "\r\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ??");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream10);
        org.junit.Assert.assertNotNull(inputStream12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(bufferedInputStream16);
        org.junit.Assert.assertNotNull(inputStream18);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream27);
        org.junit.Assert.assertNotNull(inputStream29);
        org.junit.Assert.assertNotNull(inputStream34);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertNotNull(inputStream40);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertNotNull(inputStream49);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertNotNull(strList59);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
    }

    @Test
    public void test1046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1046");
        java.io.Reader reader0 = null;
        java.io.Writer writer1 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long4 = org.apache.commons.io.IOUtils.copyLarge(reader0, writer1, 0L, (long) 2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[], int, int)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1047");
        char[] charArray4 = new char[] { '4', 'a', '#', 'a' };
        int int5 = org.apache.commons.io.IOUtils.length(charArray4);
        java.io.Writer writer6 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.writeChunked(charArray4, writer6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Writer.write(char[], int, int)\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "4a#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "4a#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[4, a, #, a]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
    }

    @Test
    public void test1048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1048");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.util.List<java.lang.String> strList4 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.BufferedInputStream bufferedInputStream5 = org.apache.commons.io.IOUtils.buffer(inputStream1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.String> strList7 = org.apache.commons.io.IOUtils.readLines(inputStream1, "hi!");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: hi!");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertNotNull(bufferedInputStream5);
    }

    @Test
    public void test1049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1049");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        java.io.Writer writer10 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer10);
        java.util.List<java.lang.String> strList12 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.InputStream inputStream13 = null;
        java.io.OutputStream outputStream14 = null;
        byte[] byteArray17 = new byte[] {};
        int int18 = org.apache.commons.io.IOUtils.length(byteArray17);
        java.io.OutputStream outputStream19 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray17, outputStream19);
        long long21 = org.apache.commons.io.IOUtils.copyLarge(inputStream13, outputStream14, 0L, (long) (byte) -1, byteArray17);
        java.io.OutputStream outputStream22 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray17, outputStream22);
        int int24 = org.apache.commons.io.IOUtils.length(byteArray17);
        java.io.OutputStream outputStream25 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray17, outputStream25);
        int int27 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray17);
        java.io.OutputStream outputStream28 = null;
        java.io.InputStream inputStream30 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray31 = new byte[] {};
        int int32 = org.apache.commons.io.IOUtils.length(byteArray31);
        int int33 = org.apache.commons.io.IOUtils.read(inputStream30, byteArray31);
        byte[] byteArray34 = org.apache.commons.io.IOUtils.toByteArray(inputStream30);
        byte[] byteArray36 = org.apache.commons.io.IOUtils.toByteArray(inputStream30, (int) (short) 0);
        long long38 = org.apache.commons.io.IOUtils.skip(inputStream30, 100L);
        java.io.InputStream inputStream39 = null;
        java.io.InputStream inputStream40 = null;
        java.io.OutputStream outputStream41 = null;
        byte[] byteArray44 = new byte[] {};
        int int45 = org.apache.commons.io.IOUtils.length(byteArray44);
        java.io.OutputStream outputStream46 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray44, outputStream46);
        long long48 = org.apache.commons.io.IOUtils.copyLarge(inputStream40, outputStream41, 0L, (long) (byte) -1, byteArray44);
        java.io.OutputStream outputStream49 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray44, outputStream49);
        org.apache.commons.io.IOUtils.readFully(inputStream39, byteArray44);
        int int52 = org.apache.commons.io.IOUtils.read(inputStream30, byteArray44);
        java.io.OutputStream outputStream53 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray44, outputStream53);
        java.lang.String str55 = org.apache.commons.io.IOUtils.toString(byteArray44);
        long long56 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream28, byteArray44);
        int int57 = org.apache.commons.io.IOUtils.length(byteArray44);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str59 = org.apache.commons.io.IOUtils.toString(byteArray44, "hi!");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: hi!");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(strList12);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(inputStream30);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
    }

    @Test
    public void test1050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1050");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.util.List<java.lang.String> strList4 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.OutputStream outputStream5 = null;
        int int6 = org.apache.commons.io.IOUtils.copy(inputStream1, outputStream5);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test1051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1051");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.nio.charset.Charset charset4 = null;
        org.apache.commons.io.LineIterator lineIterator5 = org.apache.commons.io.IOUtils.lineIterator(inputStream1, charset4);
        java.nio.charset.Charset charset6 = null;
        java.util.List<java.lang.String> strList7 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset6);
        byte[] byteArray8 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str10 = org.apache.commons.io.IOUtils.toString(byteArray8, "");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(lineIterator5);
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
    }

    @Test
    public void test1052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1052");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        java.nio.charset.Charset charset10 = null;
        java.util.List<java.lang.String> strList11 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset10);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.nio.charset.Charset charset13 = null;
        java.lang.String str14 = org.apache.commons.io.IOUtils.toString(inputStream1, charset13);
        java.io.Writer writer15 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer15);
        byte[] byteArray17 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray19 = org.apache.commons.io.IOUtils.toByteArray(inputStream1, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Unexpected read size. current: 0, expected: 100");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
    }

    @Test
    public void test1053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1053");
        java.io.Reader reader0 = null;
        java.io.Writer writer1 = null;
        java.io.Reader reader2 = null;
        java.io.Writer writer3 = null;
        char[] charArray6 = new char[] {};
        int int7 = org.apache.commons.io.IOUtils.length(charArray6);
        java.io.Writer writer8 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray6, writer8);
        java.io.Writer writer10 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray6, writer10);
        long long12 = org.apache.commons.io.IOUtils.copyLarge(reader2, writer3, 0L, (long) (byte) 100, charArray6);
        java.io.Writer writer13 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray6, writer13);
        // The following exception was thrown during execution in test generation
        try {
            long long15 = org.apache.commons.io.IOUtils.copyLarge(reader0, writer1, charArray6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[])\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
    }

    @Test
    public void test1054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1054");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.BufferedInputStream bufferedInputStream3 = org.apache.commons.io.IOUtils.buffer(inputStream1, 100);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.LineIterator lineIterator5 = org.apache.commons.io.IOUtils.lineIterator(inputStream1, "\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ?");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(bufferedInputStream3);
    }

    @Test
    public void test1055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1055");
        java.io.Reader reader0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.skipFully(reader0, (long) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[], int, int)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1056");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream3 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1);
        byte[] byteArray8 = new byte[] { (byte) -1, (byte) 100, (byte) 1, (byte) -1 };
        int int9 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray8);
        java.nio.charset.Charset charset10 = null;
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.IOUtils.lineIterator(inputStream1, charset10);
        java.lang.Class<?> wildcardClass12 = inputStream1.getClass();
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream3);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-1, 100, 1, -1]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test1057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1057");
        java.io.Reader reader0 = null;
        java.io.Writer writer1 = null;
        java.io.Reader reader4 = null;
        java.io.Reader reader5 = null;
        java.io.Reader reader6 = null;
        java.io.Writer writer7 = null;
        char[] charArray10 = new char[] {};
        int int11 = org.apache.commons.io.IOUtils.length(charArray10);
        java.io.Writer writer12 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray10, writer12);
        java.io.Writer writer14 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray10, writer14);
        long long16 = org.apache.commons.io.IOUtils.copyLarge(reader6, writer7, 0L, (long) (byte) 100, charArray10);
        int int17 = org.apache.commons.io.IOUtils.read(reader5, charArray10);
        int int18 = org.apache.commons.io.IOUtils.length(charArray10);
        int int19 = org.apache.commons.io.IOUtils.read(reader4, charArray10);
        long long20 = org.apache.commons.io.IOUtils.copyLarge(reader0, writer1, (long) (byte) -1, (long) 6, charArray10);
        java.io.OutputStream outputStream21 = null;
        java.nio.charset.Charset charset22 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(charArray10, outputStream21, charset22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.OutputStream.write(byte[])\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
    }

    @Test
    public void test1058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1058");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray(inputStream1, (int) (short) 0);
        long long9 = org.apache.commons.io.IOUtils.skip(inputStream1, 100L);
        java.io.InputStream inputStream10 = null;
        java.io.InputStream inputStream11 = null;
        java.io.OutputStream outputStream12 = null;
        byte[] byteArray15 = new byte[] {};
        int int16 = org.apache.commons.io.IOUtils.length(byteArray15);
        java.io.OutputStream outputStream17 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray15, outputStream17);
        long long19 = org.apache.commons.io.IOUtils.copyLarge(inputStream11, outputStream12, 0L, (long) (byte) -1, byteArray15);
        java.io.OutputStream outputStream20 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray15, outputStream20);
        org.apache.commons.io.IOUtils.readFully(inputStream10, byteArray15);
        int int23 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray15);
        java.io.OutputStream outputStream24 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray15, outputStream24);
        java.lang.String str26 = org.apache.commons.io.IOUtils.toString(byteArray15);
        java.io.OutputStream outputStream27 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray15, outputStream27);
        java.lang.String str29 = org.apache.commons.io.IOUtils.toString(byteArray15);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
    }

    @Test
    public void test1059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1059");
        java.nio.channels.ReadableByteChannel readableByteChannel0 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long2 = org.apache.commons.io.IOUtils.skip(readableByteChannel0, (long) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.nio.channels.ReadableByteChannel.read(java.nio.ByteBuffer)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1060");
        java.io.Reader reader0 = null;
        java.io.Reader reader1 = null;
        char[] charArray2 = new char[] {};
        int int3 = org.apache.commons.io.IOUtils.length(charArray2);
        java.io.Writer writer4 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray2, writer4);
        int int6 = org.apache.commons.io.IOUtils.read(reader1, charArray2);
        java.io.Writer writer7 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray2, writer7);
        // The following exception was thrown during execution in test generation
        try {
            int int11 = org.apache.commons.io.IOUtils.read(reader0, charArray2, (int) '/', (int) '\\');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[], int, int)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray2), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray2), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test1061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1061");
        java.nio.charset.Charset charset1 = null;
        java.io.InputStream inputStream2 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "", charset1);
        java.util.List<java.lang.String> strList3 = org.apache.commons.io.IOUtils.readLines(inputStream2);
        java.io.InputStream inputStream5 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray6 = new byte[] {};
        int int7 = org.apache.commons.io.IOUtils.length(byteArray6);
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray6);
        byte[] byteArray9 = org.apache.commons.io.IOUtils.toByteArray(inputStream5);
        int int10 = org.apache.commons.io.IOUtils.length(byteArray9);
        org.apache.commons.io.IOUtils.readFully(inputStream2, byteArray9);
        byte[] byteArray13 = org.apache.commons.io.IOUtils.toByteArray(inputStream2, 0L);
        java.io.Writer writer14 = null;
        java.nio.charset.Charset charset15 = null;
        org.apache.commons.io.IOUtils.copy(inputStream2, writer14, charset15);
        java.io.InputStream inputStream18 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray19 = org.apache.commons.io.IOUtils.toByteArray(inputStream18);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream18);
        java.util.List<java.lang.String> strList21 = org.apache.commons.io.IOUtils.readLines(inputStream18);
        java.io.OutputStream outputStream22 = null;
        long long23 = org.apache.commons.io.IOUtils.copyLarge(inputStream18, outputStream22);
        java.io.OutputStream outputStream24 = null;
        java.io.InputStream inputStream28 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray29 = new byte[] {};
        int int30 = org.apache.commons.io.IOUtils.length(byteArray29);
        int int31 = org.apache.commons.io.IOUtils.read(inputStream28, byteArray29);
        long long32 = org.apache.commons.io.IOUtils.copyLarge(inputStream18, outputStream24, (-1L), 1L, byteArray29);
        java.io.OutputStream outputStream33 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray29, outputStream33);
        int int35 = org.apache.commons.io.IOUtils.length(byteArray29);
        // The following exception was thrown during execution in test generation
        try {
            int int38 = org.apache.commons.io.IOUtils.read(inputStream2, byteArray29, (int) '#', (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Range [35, 35 + 100) out of bounds for length 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream2);
        org.junit.Assert.assertNotNull(strList3);
        org.junit.Assert.assertNotNull(inputStream5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertNotNull(inputStream18);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertNotNull(strList21);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(inputStream28);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
    }

    @Test
    public void test1062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1062");
        java.util.Collection<java.lang.String> strCollection0 = null;
        java.io.OutputStream outputStream2 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.writeLines(strCollection0, "\r\n", outputStream2, "");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1063");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.BufferedInputStream bufferedInputStream3 = org.apache.commons.io.IOUtils.buffer(inputStream1, 100);
        java.io.InputStream inputStream4 = null;
        java.io.OutputStream outputStream5 = null;
        byte[] byteArray8 = new byte[] {};
        int int9 = org.apache.commons.io.IOUtils.length(byteArray8);
        java.io.OutputStream outputStream10 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray8, outputStream10);
        long long12 = org.apache.commons.io.IOUtils.copyLarge(inputStream4, outputStream5, 0L, (long) (byte) -1, byteArray8);
        org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray8);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(bufferedInputStream3);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
    }

    @Test
    public void test1064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1064");
        java.nio.charset.Charset charset1 = null;
        java.io.InputStream inputStream2 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "", charset1);
        java.util.List<java.lang.String> strList3 = org.apache.commons.io.IOUtils.readLines(inputStream2);
        java.io.OutputStream outputStream5 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList3, "\n", outputStream5);
        java.io.Writer writer8 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList3, "\r\n", writer8);
        java.io.OutputStream outputStream11 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList3, "", outputStream11);
        org.junit.Assert.assertNotNull(inputStream2);
        org.junit.Assert.assertNotNull(strList3);
    }

    @Test
    public void test1065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1065");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly(inputStream1);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.nio.charset.Charset charset11 = null;
        org.apache.commons.io.LineIterator lineIterator12 = org.apache.commons.io.IOUtils.lineIterator(inputStream1, charset11);
        java.nio.charset.Charset charset13 = null;
        java.util.List<java.lang.String> strList14 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset13);
        java.io.OutputStream outputStream16 = null;
        java.nio.charset.Charset charset17 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList14, "", outputStream16, charset17);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(lineIterator12);
        org.junit.Assert.assertNotNull(strList14);
    }

    @Test
    public void test1066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1066");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        java.nio.charset.Charset charset10 = null;
        java.util.List<java.lang.String> strList11 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset10);
        java.io.Writer writer13 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList11, "\r\n", writer13);
        java.io.Writer writer16 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList11, "\n", writer16);
        java.io.Writer writer19 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList11, "\r\n", writer19);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(strList11);
    }

    @Test
    public void test1067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1067");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.io.Writer writer6 = null;
        java.nio.charset.Charset charset7 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(byteArray5, writer6, charset7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Writer.write(String)\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
    }

    @Test
    public void test1068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1068");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        java.nio.charset.Charset charset10 = null;
        java.util.List<java.lang.String> strList11 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset10);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.BufferedInputStream bufferedInputStream13 = org.apache.commons.io.IOUtils.buffer(inputStream1);
        java.io.OutputStream outputStream14 = null;
        long long15 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream14);
        byte[] byteArray16 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.skipFully(inputStream1, (long) 4);
            org.junit.Assert.fail("Expected exception of type java.io.EOFException; message: Bytes to skip: 4 actual: 0");
        } catch (java.io.EOFException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertNotNull(bufferedInputStream13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
    }

    @Test
    public void test1069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1069");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        java.nio.charset.Charset charset10 = null;
        java.util.List<java.lang.String> strList11 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset10);
        java.io.InputStream inputStream13 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray14 = new byte[] {};
        int int15 = org.apache.commons.io.IOUtils.length(byteArray14);
        int int16 = org.apache.commons.io.IOUtils.read(inputStream13, byteArray14);
        byte[] byteArray17 = org.apache.commons.io.IOUtils.toByteArray(inputStream13);
        byte[] byteArray19 = org.apache.commons.io.IOUtils.toByteArray(inputStream13, (int) (short) 0);
        java.io.BufferedInputStream bufferedInputStream20 = org.apache.commons.io.IOUtils.buffer(inputStream13);
        byte[] byteArray21 = org.apache.commons.io.IOUtils.toByteArray((java.io.InputStream) bufferedInputStream20);
        int int22 = org.apache.commons.io.IOUtils.length(byteArray21);
        // The following exception was thrown during execution in test generation
        try {
            int int25 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray21, (int) ' ', 2);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Range [32, 32 + 2) out of bounds for length 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertNotNull(inputStream13);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream20);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
    }

    @Test
    public void test1070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1070");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream5 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray("");
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray10);
        long long12 = org.apache.commons.io.IOUtils.copyLarge(inputStream4, outputStream5, 0L, 0L, byteArray10);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, byteArray10);
        java.io.BufferedInputStream bufferedInputStream15 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.io.InputStream inputStream17 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray18 = org.apache.commons.io.IOUtils.toByteArray(inputStream17);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream17);
        java.io.InputStream inputStream21 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream22 = null;
        java.io.InputStream inputStream25 = null;
        byte[] byteArray27 = org.apache.commons.io.IOUtils.toByteArray("");
        int int28 = org.apache.commons.io.IOUtils.read(inputStream25, byteArray27);
        long long29 = org.apache.commons.io.IOUtils.copyLarge(inputStream21, outputStream22, 0L, 0L, byteArray27);
        java.nio.charset.Charset charset30 = null;
        java.util.List<java.lang.String> strList31 = org.apache.commons.io.IOUtils.readLines(inputStream21, charset30);
        java.io.InputStream inputStream33 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream34 = null;
        java.io.InputStream inputStream37 = null;
        byte[] byteArray39 = org.apache.commons.io.IOUtils.toByteArray("");
        int int40 = org.apache.commons.io.IOUtils.read(inputStream37, byteArray39);
        long long41 = org.apache.commons.io.IOUtils.copyLarge(inputStream33, outputStream34, 0L, 0L, byteArray39);
        java.nio.charset.Charset charset42 = null;
        java.util.List<java.lang.String> strList43 = org.apache.commons.io.IOUtils.readLines(inputStream33, charset42);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream33);
        boolean boolean45 = org.apache.commons.io.IOUtils.contentEquals(inputStream21, inputStream33);
        java.io.OutputStream outputStream46 = null;
        java.io.InputStream inputStream48 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream49 = null;
        java.io.InputStream inputStream52 = null;
        byte[] byteArray54 = org.apache.commons.io.IOUtils.toByteArray("");
        int int55 = org.apache.commons.io.IOUtils.read(inputStream52, byteArray54);
        long long56 = org.apache.commons.io.IOUtils.copyLarge(inputStream48, outputStream49, 0L, 0L, byteArray54);
        long long57 = org.apache.commons.io.IOUtils.copyLarge(inputStream33, outputStream46, byteArray54);
        org.apache.commons.io.IOUtils.readFully(inputStream17, byteArray54);
        org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray54);
        java.lang.String str60 = org.apache.commons.io.IOUtils.toString(byteArray54);
        java.lang.String str61 = org.apache.commons.io.IOUtils.toString(byteArray54);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream15);
        org.junit.Assert.assertNotNull(inputStream17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(inputStream21);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNotNull(strList31);
        org.junit.Assert.assertNotNull(inputStream33);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertNotNull(strList43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(inputStream48);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
    }

    @Test
    public void test1071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1071");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray5 = new byte[] {};
        int int6 = org.apache.commons.io.IOUtils.length(byteArray5);
        int int7 = org.apache.commons.io.IOUtils.read(inputStream4, byteArray5);
        byte[] byteArray8 = org.apache.commons.io.IOUtils.toByteArray(inputStream4);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer9 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream4, iOExceptionConsumer9);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream4);
        java.io.BufferedInputStream bufferedInputStream13 = org.apache.commons.io.IOUtils.buffer(inputStream4, (int) (byte) 10);
        boolean boolean14 = org.apache.commons.io.IOUtils.contentEquals(inputStream1, inputStream4);
        java.io.OutputStream outputStream15 = null;
        long long18 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream15, (long) (short) 0, (long) 2);
        java.io.OutputStream outputStream19 = null;
        int int20 = org.apache.commons.io.IOUtils.copy(inputStream1, outputStream19);
        java.io.OutputStream outputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        int int23 = org.apache.commons.io.IOUtils.length(byteArray22);
        java.io.OutputStream outputStream24 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray22, outputStream24);
        long long26 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream21, byteArray22);
        java.io.OutputStream outputStream27 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(byteArray22, outputStream27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.OutputStream.write(byte[])\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
    }

    @Test
    public void test1072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1072");
        java.io.OutputStream outputStream1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write((java.lang.CharSequence) "", outputStream1, "hi!");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: hi!");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1073");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream("\n");
        java.io.OutputStream outputStream2 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long3 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.OutputStream.write(byte[], int, int)\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
    }

    @Test
    public void test1074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1074");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        java.nio.charset.Charset charset10 = null;
        java.util.List<java.lang.String> strList11 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset10);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.nio.charset.Charset charset13 = null;
        java.lang.String str14 = org.apache.commons.io.IOUtils.toString(inputStream1, charset13);
        java.io.Writer writer15 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer15);
        java.io.InputStream inputStream18 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray19 = new byte[] {};
        int int20 = org.apache.commons.io.IOUtils.length(byteArray19);
        int int21 = org.apache.commons.io.IOUtils.read(inputStream18, byteArray19);
        java.nio.charset.Charset charset22 = null;
        org.apache.commons.io.LineIterator lineIterator23 = org.apache.commons.io.IOUtils.lineIterator(inputStream18, charset22);
        java.io.InputStream inputStream25 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray26 = new byte[] {};
        int int27 = org.apache.commons.io.IOUtils.length(byteArray26);
        int int28 = org.apache.commons.io.IOUtils.read(inputStream25, byteArray26);
        byte[] byteArray29 = org.apache.commons.io.IOUtils.toByteArray(inputStream25);
        boolean boolean30 = org.apache.commons.io.IOUtils.contentEquals(inputStream18, inputStream25);
        java.io.Writer writer31 = null;
        org.apache.commons.io.IOUtils.copy(inputStream25, writer31);
        java.io.OutputStream outputStream33 = null;
        java.io.InputStream inputStream34 = null;
        java.io.OutputStream outputStream35 = null;
        byte[] byteArray38 = new byte[] {};
        int int39 = org.apache.commons.io.IOUtils.length(byteArray38);
        java.io.OutputStream outputStream40 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray38, outputStream40);
        long long42 = org.apache.commons.io.IOUtils.copyLarge(inputStream34, outputStream35, 0L, (long) (byte) -1, byteArray38);
        long long43 = org.apache.commons.io.IOUtils.copyLarge(inputStream25, outputStream33, byteArray38);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray38, 1, 3);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Range [1, 1 + 3) out of bounds for length 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(inputStream18);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(lineIterator23);
        org.junit.Assert.assertNotNull(inputStream25);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
    }

    @Test
    public void test1075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1075");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.nio.charset.Charset charset6 = null;
        java.util.List<java.lang.String> strList7 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset6);
        java.io.OutputStream outputStream8 = null;
        java.io.InputStream inputStream10 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray11 = new byte[] {};
        int int12 = org.apache.commons.io.IOUtils.length(byteArray11);
        int int13 = org.apache.commons.io.IOUtils.read(inputStream10, byteArray11);
        java.lang.String str14 = org.apache.commons.io.IOUtils.toString(byteArray11);
        long long15 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream8, byteArray11);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer16 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) outputStream8, iOExceptionConsumer16);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertNotNull(inputStream10);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
    }

    @Test
    public void test1076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1076");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray(inputStream1, (int) (short) 0);
        java.io.BufferedInputStream bufferedInputStream8 = org.apache.commons.io.IOUtils.buffer(inputStream1);
        byte[] byteArray9 = org.apache.commons.io.IOUtils.toByteArray((java.io.InputStream) bufferedInputStream8);
        int int10 = org.apache.commons.io.IOUtils.length(byteArray9);
        java.io.Writer writer11 = null;
        java.nio.charset.Charset charset12 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(byteArray9, writer11, charset12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Writer.write(String)\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream8);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test1077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1077");
        java.io.Reader reader0 = null;
        java.io.Writer writer1 = null;
        java.io.Reader reader4 = null;
        java.io.Reader reader5 = null;
        java.io.Reader reader6 = null;
        java.io.Writer writer7 = null;
        char[] charArray10 = new char[] {};
        int int11 = org.apache.commons.io.IOUtils.length(charArray10);
        java.io.Writer writer12 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray10, writer12);
        java.io.Writer writer14 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray10, writer14);
        long long16 = org.apache.commons.io.IOUtils.copyLarge(reader6, writer7, 0L, (long) (byte) 100, charArray10);
        int int17 = org.apache.commons.io.IOUtils.read(reader5, charArray10);
        int int18 = org.apache.commons.io.IOUtils.length(charArray10);
        int int19 = org.apache.commons.io.IOUtils.read(reader4, charArray10);
        long long20 = org.apache.commons.io.IOUtils.copyLarge(reader0, writer1, (long) (byte) -1, (long) 6, charArray10);
        java.lang.Class<?> wildcardClass21 = charArray10.getClass();
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test1078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1078");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        java.nio.charset.Charset charset10 = null;
        java.util.List<java.lang.String> strList11 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset10);
        java.nio.charset.Charset charset12 = null;
        char[] charArray13 = org.apache.commons.io.IOUtils.toCharArray(inputStream1, charset12);
        java.io.Writer writer14 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer14);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[]");
    }

    @Test
    public void test1079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1079");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream3 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1);
        java.lang.String str4 = org.apache.commons.io.IOUtils.toString(inputStream1);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray6 = org.apache.commons.io.IOUtils.readFully(inputStream1, (int) '\\');
            org.junit.Assert.fail("Expected exception of type java.io.EOFException; message: Length to read: 92 actual: 0");
        } catch (java.io.EOFException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
    }

    @Test
    public void test1080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1080");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray(inputStream1, (int) (short) 0);
        java.io.BufferedInputStream bufferedInputStream8 = org.apache.commons.io.IOUtils.buffer(inputStream1);
        byte[] byteArray9 = org.apache.commons.io.IOUtils.toByteArray((java.io.InputStream) bufferedInputStream8);
        java.lang.String str10 = org.apache.commons.io.IOUtils.toString(byteArray9);
        int int11 = org.apache.commons.io.IOUtils.length(byteArray9);
        java.io.OutputStream outputStream12 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray9, outputStream12);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream8);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test1081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1081");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream5 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray("");
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray10);
        long long12 = org.apache.commons.io.IOUtils.copyLarge(inputStream4, outputStream5, 0L, 0L, byteArray10);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, byteArray10);
        java.io.BufferedInputStream bufferedInputStream15 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        org.apache.commons.io.IOUtils.closeQuietly(inputStream1);
        java.nio.charset.Charset charset17 = null;
        java.util.List<java.lang.String> strList18 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset17);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream20 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly(inputStream1);
        char[] charArray22 = org.apache.commons.io.IOUtils.toCharArray(inputStream1);
        java.io.OutputStream outputStream23 = null;
        long long25 = org.apache.commons.io.IOUtils.copy(inputStream1, outputStream23, 10);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream15);
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertNotNull(inputStream20);
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray22), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray22), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray22), "[]");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
    }

    @Test
    public void test1082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1082");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.lang.String str3 = org.apache.commons.io.IOUtils.toString(byteArray2);
        java.lang.String str4 = org.apache.commons.io.IOUtils.toString(byteArray2);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str6 = org.apache.commons.io.IOUtils.toString(byteArray2, "hi!");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: hi!");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
    }

    @Test
    public void test1083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1083");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.nio.charset.Charset charset6 = null;
        java.util.List<java.lang.String> strList7 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset6);
        java.util.List<java.lang.String> strList8 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertNotNull(strList8);
    }

    @Test
    public void test1084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1084");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.util.List<java.lang.String> strList4 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.OutputStream outputStream5 = null;
        long long6 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream5);
        java.io.Writer writer7 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer7);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream11 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray12 = new byte[] {};
        int int13 = org.apache.commons.io.IOUtils.length(byteArray12);
        int int14 = org.apache.commons.io.IOUtils.read(inputStream11, byteArray12);
        byte[] byteArray15 = org.apache.commons.io.IOUtils.toByteArray(inputStream11);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer16 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream11, iOExceptionConsumer16);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream11);
        java.io.BufferedInputStream bufferedInputStream20 = org.apache.commons.io.IOUtils.buffer(inputStream11, (int) (byte) 10);
        java.io.InputStream inputStream22 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream11, (int) (byte) 1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer23 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream11, iOExceptionConsumer23);
        java.io.OutputStream outputStream25 = null;
        java.io.InputStream inputStream27 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray28 = new byte[] {};
        int int29 = org.apache.commons.io.IOUtils.length(byteArray28);
        int int30 = org.apache.commons.io.IOUtils.read(inputStream27, byteArray28);
        byte[] byteArray31 = org.apache.commons.io.IOUtils.toByteArray(inputStream27);
        java.io.InputStream inputStream33 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray34 = new byte[] {};
        int int35 = org.apache.commons.io.IOUtils.length(byteArray34);
        int int36 = org.apache.commons.io.IOUtils.read(inputStream33, byteArray34);
        byte[] byteArray37 = org.apache.commons.io.IOUtils.toByteArray(inputStream33);
        int int38 = org.apache.commons.io.IOUtils.length(byteArray37);
        org.apache.commons.io.IOUtils.readFully(inputStream27, byteArray37);
        long long40 = org.apache.commons.io.IOUtils.copyLarge(inputStream11, outputStream25, byteArray37);
        boolean boolean41 = org.apache.commons.io.IOUtils.contentEquals(inputStream1, inputStream11);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.skipFully(inputStream11, (-1L));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Bytes to skip must not be negative: -1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(inputStream11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream20);
        org.junit.Assert.assertNotNull(inputStream22);
        org.junit.Assert.assertNotNull(inputStream27);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(inputStream33);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
    }

    @Test
    public void test1085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1085");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream5 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray("");
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray10);
        long long12 = org.apache.commons.io.IOUtils.copyLarge(inputStream4, outputStream5, 0L, 0L, byteArray10);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, byteArray10);
        java.io.BufferedInputStream bufferedInputStream15 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.io.InputStream inputStream17 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray18 = org.apache.commons.io.IOUtils.toByteArray(inputStream17);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream17);
        java.io.InputStream inputStream21 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream22 = null;
        java.io.InputStream inputStream25 = null;
        byte[] byteArray27 = org.apache.commons.io.IOUtils.toByteArray("");
        int int28 = org.apache.commons.io.IOUtils.read(inputStream25, byteArray27);
        long long29 = org.apache.commons.io.IOUtils.copyLarge(inputStream21, outputStream22, 0L, 0L, byteArray27);
        java.nio.charset.Charset charset30 = null;
        java.util.List<java.lang.String> strList31 = org.apache.commons.io.IOUtils.readLines(inputStream21, charset30);
        java.io.InputStream inputStream33 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream34 = null;
        java.io.InputStream inputStream37 = null;
        byte[] byteArray39 = org.apache.commons.io.IOUtils.toByteArray("");
        int int40 = org.apache.commons.io.IOUtils.read(inputStream37, byteArray39);
        long long41 = org.apache.commons.io.IOUtils.copyLarge(inputStream33, outputStream34, 0L, 0L, byteArray39);
        java.nio.charset.Charset charset42 = null;
        java.util.List<java.lang.String> strList43 = org.apache.commons.io.IOUtils.readLines(inputStream33, charset42);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream33);
        boolean boolean45 = org.apache.commons.io.IOUtils.contentEquals(inputStream21, inputStream33);
        java.io.OutputStream outputStream46 = null;
        java.io.InputStream inputStream48 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream49 = null;
        java.io.InputStream inputStream52 = null;
        byte[] byteArray54 = org.apache.commons.io.IOUtils.toByteArray("");
        int int55 = org.apache.commons.io.IOUtils.read(inputStream52, byteArray54);
        long long56 = org.apache.commons.io.IOUtils.copyLarge(inputStream48, outputStream49, 0L, 0L, byteArray54);
        long long57 = org.apache.commons.io.IOUtils.copyLarge(inputStream33, outputStream46, byteArray54);
        org.apache.commons.io.IOUtils.readFully(inputStream17, byteArray54);
        org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray54);
        java.lang.String str60 = org.apache.commons.io.IOUtils.toString(inputStream1);
        java.io.BufferedInputStream bufferedInputStream62 = org.apache.commons.io.IOUtils.buffer(inputStream1, 100);
        java.io.OutputStream outputStream63 = null;
        java.io.InputStream inputStream67 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray68 = new byte[] {};
        int int69 = org.apache.commons.io.IOUtils.length(byteArray68);
        int int70 = org.apache.commons.io.IOUtils.read(inputStream67, byteArray68);
        byte[] byteArray71 = org.apache.commons.io.IOUtils.toByteArray(inputStream67);
        byte[] byteArray73 = org.apache.commons.io.IOUtils.toByteArray(inputStream67, (int) (short) 0);
        long long75 = org.apache.commons.io.IOUtils.skip(inputStream67, 100L);
        java.io.InputStream inputStream76 = null;
        java.io.InputStream inputStream77 = null;
        java.io.OutputStream outputStream78 = null;
        byte[] byteArray81 = new byte[] {};
        int int82 = org.apache.commons.io.IOUtils.length(byteArray81);
        java.io.OutputStream outputStream83 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray81, outputStream83);
        long long85 = org.apache.commons.io.IOUtils.copyLarge(inputStream77, outputStream78, 0L, (long) (byte) -1, byteArray81);
        java.io.OutputStream outputStream86 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray81, outputStream86);
        org.apache.commons.io.IOUtils.readFully(inputStream76, byteArray81);
        int int89 = org.apache.commons.io.IOUtils.read(inputStream67, byteArray81);
        long long90 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream63, 0L, 1L, byteArray81);
        java.io.BufferedInputStream bufferedInputStream91 = org.apache.commons.io.IOUtils.buffer(inputStream1);
        java.io.Writer writer92 = null;
        org.apache.commons.io.IOUtils.copy((java.io.InputStream) bufferedInputStream91, writer92);
        java.util.List<java.lang.String> strList94 = org.apache.commons.io.IOUtils.readLines((java.io.InputStream) bufferedInputStream91);
        java.io.OutputStream outputStream96 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList94, "", outputStream96);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream15);
        org.junit.Assert.assertNotNull(inputStream17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(inputStream21);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNotNull(strList31);
        org.junit.Assert.assertNotNull(inputStream33);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertNotNull(strList43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(inputStream48);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(bufferedInputStream62);
        org.junit.Assert.assertNotNull(inputStream67);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[]");
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[]");
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 0L + "'", long75 == 0L);
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 0L + "'", long85 == 0L);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + 0L + "'", long90 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream91);
        org.junit.Assert.assertNotNull(strList94);
    }

    @Test
    public void test1086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1086");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.BufferedInputStream bufferedInputStream3 = org.apache.commons.io.IOUtils.buffer(inputStream1, 100);
        java.io.BufferedInputStream bufferedInputStream4 = org.apache.commons.io.IOUtils.buffer((java.io.InputStream) bufferedInputStream3);
        java.nio.charset.Charset charset5 = null;
        java.lang.String str6 = org.apache.commons.io.IOUtils.toString((java.io.InputStream) bufferedInputStream4, charset5);
        java.io.OutputStream outputStream7 = null;
        long long9 = org.apache.commons.io.IOUtils.copy((java.io.InputStream) bufferedInputStream4, outputStream7, 5);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(bufferedInputStream3);
        org.junit.Assert.assertNotNull(bufferedInputStream4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
    }

    @Test
    public void test1087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1087");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        java.nio.charset.Charset charset5 = null;
        org.apache.commons.io.LineIterator lineIterator6 = org.apache.commons.io.IOUtils.lineIterator(inputStream1, charset5);
        org.apache.commons.io.function.IOConsumer<java.io.IOException> iOExceptionIOConsumer7 = null;
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1, iOExceptionIOConsumer7);
        java.nio.charset.Charset charset9 = null;
        java.lang.String str10 = org.apache.commons.io.IOUtils.toString(inputStream1, charset9);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(lineIterator6);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
    }

    @Test
    public void test1088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1088");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.util.List<java.lang.String> strList4 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.OutputStream outputStream5 = null;
        long long6 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream5);
        java.io.Writer writer7 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer7);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray11 = org.apache.commons.io.IOUtils.readFully(inputStream1, 4);
            org.junit.Assert.fail("Expected exception of type java.io.EOFException; message: Length to read: 4 actual: 0");
        } catch (java.io.EOFException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
    }

    @Test
    public void test1089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1089");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        java.lang.String str5 = org.apache.commons.io.IOUtils.toString(byteArray2);
        int int6 = org.apache.commons.io.IOUtils.length(byteArray2);
        java.io.OutputStream outputStream7 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray2, outputStream7);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test1090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1090");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly(inputStream1);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.BufferedInputStream bufferedInputStream12 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) '#');
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray14 = org.apache.commons.io.IOUtils.readFully(inputStream1, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.io.EOFException; message: Length to read: 10 actual: 0");
        } catch (java.io.EOFException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream12);
    }

    @Test
    public void test1091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1091");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.BufferedInputStream bufferedInputStream10 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        byte[] byteArray11 = null;
        org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray11, (int) '4', 0);
        java.util.List<java.lang.String> strList15 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.Writer writer17 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList15, "\r\n", writer17);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream10);
        org.junit.Assert.assertNotNull(strList15);
    }

    @Test
    public void test1092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1092");
        java.io.Reader reader0 = null;
        char[] charArray1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.readFully(reader0, charArray1, 2, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[], int, int)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1093");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.io.InputStream inputStream7 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, (int) (byte) 0);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream7);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray10 = org.apache.commons.io.IOUtils.readFully(inputStream7, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.io.EOFException; message: Length to read: 97 actual: 0");
        } catch (java.io.EOFException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(inputStream7);
    }

    @Test
    public void test1094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1094");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream5 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray("");
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray10);
        long long12 = org.apache.commons.io.IOUtils.copyLarge(inputStream4, outputStream5, 0L, 0L, byteArray10);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, byteArray10);
        java.io.BufferedInputStream bufferedInputStream15 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer16 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer16);
        byte[] byteArray23 = new byte[] { (byte) 10, (byte) 1, (byte) 0, (byte) 100, (byte) 0 };
        int int24 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray23);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str26 = org.apache.commons.io.IOUtils.toString(byteArray23, "\r\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ??");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream15);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[10, 1, 0, 100, 0]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
    }

    @Test
    public void test1095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1095");
        java.io.Reader reader0 = null;
        java.io.Reader reader1 = null;
        java.io.Writer writer2 = null;
        char[] charArray5 = new char[] {};
        int int6 = org.apache.commons.io.IOUtils.length(charArray5);
        java.io.Writer writer7 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray5, writer7);
        java.io.Writer writer9 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray5, writer9);
        long long11 = org.apache.commons.io.IOUtils.copyLarge(reader1, writer2, 0L, (long) (byte) 100, charArray5);
        java.io.Writer writer12 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray5, writer12);
        java.io.Writer writer14 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray5, writer14);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.readFully(reader0, charArray5, (int) (short) 1, 5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[], int, int)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
    }

    @Test
    public void test1096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1096");
        byte[] byteArray0 = null;
        java.io.Writer writer1 = null;
        org.apache.commons.io.IOUtils.write(byteArray0, writer1);
    }

    @Test
    public void test1097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1097");
        java.util.Collection<java.lang.String> strCollection0 = null;
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.io.IOUtils.writeLines(strCollection0, "\r\n", outputStream2);
    }

    @Test
    public void test1098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1098");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        org.apache.commons.io.IOUtils.closeQuietly(inputStream1);
        java.io.InputStream inputStream7 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray8 = new byte[] {};
        int int9 = org.apache.commons.io.IOUtils.length(byteArray8);
        int int10 = org.apache.commons.io.IOUtils.read(inputStream7, byteArray8);
        java.lang.String str11 = org.apache.commons.io.IOUtils.toString(byteArray8);
        int int14 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray8, (int) (byte) 10, (int) (short) 0);
        java.io.OutputStream outputStream15 = null;
        long long17 = org.apache.commons.io.IOUtils.copy(inputStream1, outputStream15, (int) (byte) 100);
        java.io.InputStream inputStream18 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.LineIterator lineIterator20 = org.apache.commons.io.IOUtils.lineIterator(inputStream18, "\r\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ??");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(inputStream7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(inputStream18);
    }

    @Test
    public void test1099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1099");
        java.io.OutputStream outputStream1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write((java.lang.CharSequence) "", outputStream1, "");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1100");
        java.io.Writer writer0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.BufferedWriter bufferedWriter2 = org.apache.commons.io.IOUtils.buffer(writer0, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1101");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        java.nio.charset.Charset charset10 = null;
        java.util.List<java.lang.String> strList11 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset10);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.nio.charset.Charset charset13 = null;
        java.lang.String str14 = org.apache.commons.io.IOUtils.toString(inputStream1, charset13);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer15 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer15);
        java.nio.charset.Charset charset17 = null;
        org.apache.commons.io.LineIterator lineIterator18 = org.apache.commons.io.IOUtils.lineIterator(inputStream1, charset17);
        java.io.OutputStream outputStream19 = null;
        int int20 = org.apache.commons.io.IOUtils.copy(inputStream1, outputStream19);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer21 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer21);
        java.io.InputStream inputStream24 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray25 = new byte[] {};
        int int26 = org.apache.commons.io.IOUtils.length(byteArray25);
        int int27 = org.apache.commons.io.IOUtils.read(inputStream24, byteArray25);
        org.apache.commons.io.IOUtils.closeQuietly(inputStream24);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream24);
        java.io.InputStream inputStream31 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray32 = new byte[] {};
        int int33 = org.apache.commons.io.IOUtils.length(byteArray32);
        int int34 = org.apache.commons.io.IOUtils.read(inputStream31, byteArray32);
        java.nio.charset.Charset charset35 = null;
        org.apache.commons.io.LineIterator lineIterator36 = org.apache.commons.io.IOUtils.lineIterator(inputStream31, charset35);
        org.apache.commons.io.function.IOConsumer<java.io.IOException> iOExceptionIOConsumer37 = null;
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream31, iOExceptionIOConsumer37);
        java.io.InputStream inputStream40 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream41 = null;
        java.io.InputStream inputStream44 = null;
        byte[] byteArray46 = org.apache.commons.io.IOUtils.toByteArray("");
        int int47 = org.apache.commons.io.IOUtils.read(inputStream44, byteArray46);
        long long48 = org.apache.commons.io.IOUtils.copyLarge(inputStream40, outputStream41, 0L, 0L, byteArray46);
        java.io.OutputStream outputStream49 = null;
        long long52 = org.apache.commons.io.IOUtils.copyLarge(inputStream40, outputStream49, (long) (short) 0, (-1L));
        char[] charArray53 = org.apache.commons.io.IOUtils.toCharArray(inputStream40);
        java.io.InputStream inputStream55 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream56 = null;
        java.io.InputStream inputStream58 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream59 = null;
        java.io.InputStream inputStream62 = null;
        byte[] byteArray64 = org.apache.commons.io.IOUtils.toByteArray("");
        int int65 = org.apache.commons.io.IOUtils.read(inputStream62, byteArray64);
        long long66 = org.apache.commons.io.IOUtils.copyLarge(inputStream58, outputStream59, 0L, 0L, byteArray64);
        long long67 = org.apache.commons.io.IOUtils.copyLarge(inputStream55, outputStream56, byteArray64);
        java.io.BufferedInputStream bufferedInputStream69 = org.apache.commons.io.IOUtils.buffer(inputStream55, (int) (byte) 10);
        java.nio.charset.Charset charset70 = null;
        java.util.List<java.lang.String> strList71 = org.apache.commons.io.IOUtils.readLines(inputStream55, charset70);
        java.io.OutputStream outputStream72 = null;
        long long75 = org.apache.commons.io.IOUtils.copyLarge(inputStream55, outputStream72, 0L, (long) 0);
        java.io.OutputStream outputStream76 = null;
        long long79 = org.apache.commons.io.IOUtils.copyLarge(inputStream55, outputStream76, (long) (short) -1, (long) 10);
        byte[] byteArray80 = org.apache.commons.io.IOUtils.toByteArray(inputStream55);
        java.io.InputStream inputStream82 = org.apache.commons.io.IOUtils.toInputStream("\n");
        byte[] byteArray84 = org.apache.commons.io.IOUtils.toByteArray(inputStream82, (int) (byte) 0);
        java.io.InputStream inputStream86 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray87 = new byte[] {};
        int int88 = org.apache.commons.io.IOUtils.length(byteArray87);
        int int89 = org.apache.commons.io.IOUtils.read(inputStream86, byteArray87);
        byte[] byteArray90 = org.apache.commons.io.IOUtils.toByteArray(inputStream86);
        byte[] byteArray92 = org.apache.commons.io.IOUtils.toByteArray(inputStream86, (int) (short) 0);
        byte[] byteArray93 = new byte[] {};
        int int94 = org.apache.commons.io.IOUtils.length(byteArray93);
        org.apache.commons.io.IOUtils.readFully(inputStream86, byteArray93);
        org.apache.commons.io.IOUtils.readFully(inputStream82, byteArray93);
        java.io.Closeable[] closeableArray97 = new java.io.Closeable[] { inputStream1, inputStream24, inputStream31, inputStream40, inputStream55, inputStream82 };
        org.apache.commons.io.IOUtils.closeQuietly(closeableArray97);
        int int99 = org.apache.commons.io.IOUtils.length((java.lang.Object[]) closeableArray97);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(lineIterator18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(inputStream24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(inputStream31);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(lineIterator36);
        org.junit.Assert.assertNotNull(inputStream40);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertNotNull(charArray53);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray53), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray53), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray53), "[]");
        org.junit.Assert.assertNotNull(inputStream55);
        org.junit.Assert.assertNotNull(inputStream58);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 0L + "'", long66 == 0L);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 0L + "'", long67 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream69);
        org.junit.Assert.assertNotNull(strList71);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 0L + "'", long75 == 0L);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 0L + "'", long79 == 0L);
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[]");
        org.junit.Assert.assertNotNull(inputStream82);
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[]");
        org.junit.Assert.assertNotNull(inputStream86);
        org.junit.Assert.assertNotNull(byteArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertNotNull(byteArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray90), "[]");
        org.junit.Assert.assertNotNull(byteArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray92), "[]");
        org.junit.Assert.assertNotNull(byteArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray93), "[]");
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
        org.junit.Assert.assertNotNull(closeableArray97);
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + 6 + "'", int99 == 6);
    }

    @Test
    public void test1102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1102");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray(inputStream1, (int) (short) 0);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.lang.String str9 = org.apache.commons.io.IOUtils.toString(inputStream1);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
    }

    @Test
    public void test1103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1103");
        java.io.Reader reader0 = null;
        java.io.Writer writer1 = null;
        char[] charArray2 = new char[] {};
        int int3 = org.apache.commons.io.IOUtils.length(charArray2);
        java.io.Writer writer4 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray2, writer4);
        int int6 = org.apache.commons.io.IOUtils.length(charArray2);
        int int7 = org.apache.commons.io.IOUtils.length(charArray2);
        // The following exception was thrown during execution in test generation
        try {
            long long8 = org.apache.commons.io.IOUtils.copyLarge(reader0, writer1, charArray2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[])\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray2), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray2), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test1104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1104");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.BufferedInputStream bufferedInputStream10 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.io.InputStream inputStream12 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, (int) (byte) 1);
        java.io.OutputStream outputStream13 = null;
        int int14 = org.apache.commons.io.IOUtils.copy(inputStream12, outputStream13);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream12);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str17 = org.apache.commons.io.IOUtils.toString(inputStream12, "hi!");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: hi!");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream10);
        org.junit.Assert.assertNotNull(inputStream12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test1105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1105");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.BufferedInputStream bufferedInputStream10 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        char[] charArray11 = org.apache.commons.io.IOUtils.toCharArray(inputStream1);
        java.io.Writer writer12 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.copy(inputStream1, writer12, "\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ?");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream10);
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[]");
    }

    @Test
    public void test1106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1106");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream5 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray("");
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray10);
        long long12 = org.apache.commons.io.IOUtils.copyLarge(inputStream4, outputStream5, 0L, 0L, byteArray10);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, byteArray10);
        java.io.BufferedInputStream bufferedInputStream15 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.io.InputStream inputStream17 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray18 = org.apache.commons.io.IOUtils.toByteArray(inputStream17);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream17);
        java.io.InputStream inputStream21 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream22 = null;
        java.io.InputStream inputStream25 = null;
        byte[] byteArray27 = org.apache.commons.io.IOUtils.toByteArray("");
        int int28 = org.apache.commons.io.IOUtils.read(inputStream25, byteArray27);
        long long29 = org.apache.commons.io.IOUtils.copyLarge(inputStream21, outputStream22, 0L, 0L, byteArray27);
        java.nio.charset.Charset charset30 = null;
        java.util.List<java.lang.String> strList31 = org.apache.commons.io.IOUtils.readLines(inputStream21, charset30);
        java.io.InputStream inputStream33 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream34 = null;
        java.io.InputStream inputStream37 = null;
        byte[] byteArray39 = org.apache.commons.io.IOUtils.toByteArray("");
        int int40 = org.apache.commons.io.IOUtils.read(inputStream37, byteArray39);
        long long41 = org.apache.commons.io.IOUtils.copyLarge(inputStream33, outputStream34, 0L, 0L, byteArray39);
        java.nio.charset.Charset charset42 = null;
        java.util.List<java.lang.String> strList43 = org.apache.commons.io.IOUtils.readLines(inputStream33, charset42);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream33);
        boolean boolean45 = org.apache.commons.io.IOUtils.contentEquals(inputStream21, inputStream33);
        java.io.OutputStream outputStream46 = null;
        java.io.InputStream inputStream48 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream49 = null;
        java.io.InputStream inputStream52 = null;
        byte[] byteArray54 = org.apache.commons.io.IOUtils.toByteArray("");
        int int55 = org.apache.commons.io.IOUtils.read(inputStream52, byteArray54);
        long long56 = org.apache.commons.io.IOUtils.copyLarge(inputStream48, outputStream49, 0L, 0L, byteArray54);
        long long57 = org.apache.commons.io.IOUtils.copyLarge(inputStream33, outputStream46, byteArray54);
        org.apache.commons.io.IOUtils.readFully(inputStream17, byteArray54);
        org.apache.commons.io.IOUtils.readFully((java.io.InputStream) bufferedInputStream15, byteArray54);
        java.nio.charset.Charset charset60 = null;
        java.lang.String str61 = org.apache.commons.io.IOUtils.toString((java.io.InputStream) bufferedInputStream15, charset60);
        byte[] byteArray62 = org.apache.commons.io.IOUtils.toByteArray((java.io.InputStream) bufferedInputStream15);
        java.nio.charset.Charset charset63 = null;
        java.util.List<java.lang.String> strList64 = org.apache.commons.io.IOUtils.readLines((java.io.InputStream) bufferedInputStream15, charset63);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream15);
        org.junit.Assert.assertNotNull(inputStream17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(inputStream21);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNotNull(strList31);
        org.junit.Assert.assertNotNull(inputStream33);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertNotNull(strList43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(inputStream48);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[]");
        org.junit.Assert.assertNotNull(strList64);
    }

    @Test
    public void test1107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1107");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray(inputStream1, (int) (short) 0);
        java.io.BufferedInputStream bufferedInputStream8 = org.apache.commons.io.IOUtils.buffer(inputStream1);
        java.nio.charset.Charset charset9 = null;
        org.apache.commons.io.LineIterator lineIterator10 = org.apache.commons.io.IOUtils.lineIterator(inputStream1, charset9);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer11 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) lineIterator10, iOExceptionConsumer11);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream8);
        org.junit.Assert.assertNotNull(lineIterator10);
    }

    @Test
    public void test1108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1108");
        java.io.InputStream inputStream0 = null;
        // The following exception was thrown during execution in test generation
        try {
            char[] charArray2 = org.apache.commons.io.IOUtils.toCharArray(inputStream0, "");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1109");
        java.io.Reader reader0 = null;
        java.io.InputStream inputStream2 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray3 = org.apache.commons.io.IOUtils.toByteArray(inputStream2);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream2);
        java.util.List<java.lang.String> strList5 = org.apache.commons.io.IOUtils.readLines(inputStream2);
        java.io.OutputStream outputStream6 = null;
        long long7 = org.apache.commons.io.IOUtils.copyLarge(inputStream2, outputStream6);
        java.io.Writer writer8 = null;
        org.apache.commons.io.IOUtils.copy(inputStream2, writer8);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream2);
        java.io.InputStream inputStream12 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray13 = new byte[] {};
        int int14 = org.apache.commons.io.IOUtils.length(byteArray13);
        int int15 = org.apache.commons.io.IOUtils.read(inputStream12, byteArray13);
        byte[] byteArray16 = org.apache.commons.io.IOUtils.toByteArray(inputStream12);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer17 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream12, iOExceptionConsumer17);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream12);
        java.io.BufferedInputStream bufferedInputStream21 = org.apache.commons.io.IOUtils.buffer(inputStream12, (int) (byte) 10);
        java.io.InputStream inputStream23 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream12, (int) (byte) 1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer24 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream12, iOExceptionConsumer24);
        java.io.OutputStream outputStream26 = null;
        java.io.InputStream inputStream28 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray29 = new byte[] {};
        int int30 = org.apache.commons.io.IOUtils.length(byteArray29);
        int int31 = org.apache.commons.io.IOUtils.read(inputStream28, byteArray29);
        byte[] byteArray32 = org.apache.commons.io.IOUtils.toByteArray(inputStream28);
        java.io.InputStream inputStream34 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray35 = new byte[] {};
        int int36 = org.apache.commons.io.IOUtils.length(byteArray35);
        int int37 = org.apache.commons.io.IOUtils.read(inputStream34, byteArray35);
        byte[] byteArray38 = org.apache.commons.io.IOUtils.toByteArray(inputStream34);
        int int39 = org.apache.commons.io.IOUtils.length(byteArray38);
        org.apache.commons.io.IOUtils.readFully(inputStream28, byteArray38);
        long long41 = org.apache.commons.io.IOUtils.copyLarge(inputStream12, outputStream26, byteArray38);
        boolean boolean42 = org.apache.commons.io.IOUtils.contentEquals(inputStream2, inputStream12);
        java.io.BufferedInputStream bufferedInputStream44 = org.apache.commons.io.IOUtils.buffer(inputStream2, 5);
        java.io.InputStream inputStream46 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream47 = null;
        java.io.InputStream inputStream50 = null;
        byte[] byteArray52 = org.apache.commons.io.IOUtils.toByteArray("");
        int int53 = org.apache.commons.io.IOUtils.read(inputStream50, byteArray52);
        long long54 = org.apache.commons.io.IOUtils.copyLarge(inputStream46, outputStream47, 0L, 0L, byteArray52);
        java.nio.charset.Charset charset55 = null;
        java.util.List<java.lang.String> strList56 = org.apache.commons.io.IOUtils.readLines(inputStream46, charset55);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream46);
        java.nio.charset.Charset charset58 = null;
        java.lang.String str59 = org.apache.commons.io.IOUtils.toString(inputStream46, charset58);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer60 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream46, iOExceptionConsumer60);
        boolean boolean62 = org.apache.commons.io.IOUtils.contentEquals((java.io.InputStream) bufferedInputStream44, inputStream46);
        byte[] byteArray64 = org.apache.commons.io.IOUtils.toByteArray(inputStream46, 0);
        java.nio.charset.Charset charset65 = null;
        char[] charArray66 = org.apache.commons.io.IOUtils.toCharArray(inputStream46, charset65);
        org.apache.commons.io.IOUtils.readFully(reader0, charArray66);
        java.io.OutputStream outputStream68 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(charArray66, outputStream68);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.OutputStream.write(byte[])\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertNotNull(strList5);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(inputStream12);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream21);
        org.junit.Assert.assertNotNull(inputStream23);
        org.junit.Assert.assertNotNull(inputStream28);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertNotNull(inputStream34);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(bufferedInputStream44);
        org.junit.Assert.assertNotNull(inputStream46);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertNotNull(strList56);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[]");
        org.junit.Assert.assertNotNull(charArray66);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray66), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray66), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray66), "[]");
    }

    @Test
    public void test1110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1110");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        java.nio.charset.Charset charset10 = null;
        java.util.List<java.lang.String> strList11 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset10);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.nio.charset.Charset charset13 = null;
        java.lang.String str14 = org.apache.commons.io.IOUtils.toString(inputStream1, charset13);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer15 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer15);
        java.io.InputStream inputStream17 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.String> strList19 = org.apache.commons.io.IOUtils.readLines(inputStream1, "hi!");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: hi!");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(inputStream17);
    }

    @Test
    public void test1111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1111");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.io.InputStream inputStream7 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, (int) (byte) 0);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream7);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.skipFully(inputStream7, (long) '/');
            org.junit.Assert.fail("Expected exception of type java.io.EOFException; message: Bytes to skip: 47 actual: 0");
        } catch (java.io.EOFException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(inputStream7);
    }

    @Test
    public void test1112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1112");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        java.io.OutputStream outputStream10 = null;
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream10, (long) (short) 0, (-1L));
        java.lang.String str14 = org.apache.commons.io.IOUtils.toString(inputStream1);
        java.io.BufferedInputStream bufferedInputStream15 = org.apache.commons.io.IOUtils.buffer(inputStream1);
        java.io.BufferedInputStream bufferedInputStream16 = org.apache.commons.io.IOUtils.buffer(inputStream1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.LineIterator lineIterator18 = org.apache.commons.io.IOUtils.lineIterator((java.io.InputStream) bufferedInputStream16, "");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(bufferedInputStream15);
        org.junit.Assert.assertNotNull(bufferedInputStream16);
    }

    @Test
    public void test1113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1113");
        java.io.Reader reader0 = null;
        char[] charArray1 = new char[] {};
        int int2 = org.apache.commons.io.IOUtils.length(charArray1);
        org.apache.commons.io.IOUtils.readFully(reader0, charArray1);
        int int4 = org.apache.commons.io.IOUtils.length(charArray1);
        java.io.OutputStream outputStream5 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(charArray1, outputStream5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.OutputStream.write(byte[])\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray1);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray1), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray1), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray1), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test1114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1114");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.util.List<java.lang.String> strList4 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.OutputStream outputStream5 = null;
        long long6 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream5);
        java.io.Writer writer7 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer7);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream11 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray12 = new byte[] {};
        int int13 = org.apache.commons.io.IOUtils.length(byteArray12);
        int int14 = org.apache.commons.io.IOUtils.read(inputStream11, byteArray12);
        byte[] byteArray15 = org.apache.commons.io.IOUtils.toByteArray(inputStream11);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer16 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream11, iOExceptionConsumer16);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream11);
        java.io.BufferedInputStream bufferedInputStream20 = org.apache.commons.io.IOUtils.buffer(inputStream11, (int) (byte) 10);
        java.io.InputStream inputStream22 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream11, (int) (byte) 1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer23 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream11, iOExceptionConsumer23);
        java.io.OutputStream outputStream25 = null;
        java.io.InputStream inputStream27 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray28 = new byte[] {};
        int int29 = org.apache.commons.io.IOUtils.length(byteArray28);
        int int30 = org.apache.commons.io.IOUtils.read(inputStream27, byteArray28);
        byte[] byteArray31 = org.apache.commons.io.IOUtils.toByteArray(inputStream27);
        java.io.InputStream inputStream33 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray34 = new byte[] {};
        int int35 = org.apache.commons.io.IOUtils.length(byteArray34);
        int int36 = org.apache.commons.io.IOUtils.read(inputStream33, byteArray34);
        byte[] byteArray37 = org.apache.commons.io.IOUtils.toByteArray(inputStream33);
        int int38 = org.apache.commons.io.IOUtils.length(byteArray37);
        org.apache.commons.io.IOUtils.readFully(inputStream27, byteArray37);
        long long40 = org.apache.commons.io.IOUtils.copyLarge(inputStream11, outputStream25, byteArray37);
        boolean boolean41 = org.apache.commons.io.IOUtils.contentEquals(inputStream1, inputStream11);
        java.io.BufferedInputStream bufferedInputStream42 = org.apache.commons.io.IOUtils.buffer(inputStream1);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(inputStream11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream20);
        org.junit.Assert.assertNotNull(inputStream22);
        org.junit.Assert.assertNotNull(inputStream27);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(inputStream33);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(bufferedInputStream42);
    }

    @Test
    public void test1115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1115");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream5 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray("");
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray10);
        long long12 = org.apache.commons.io.IOUtils.copyLarge(inputStream4, outputStream5, 0L, 0L, byteArray10);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, byteArray10);
        java.io.BufferedInputStream bufferedInputStream15 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.nio.charset.Charset charset16 = null;
        java.util.List<java.lang.String> strList17 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset16);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray19 = org.apache.commons.io.IOUtils.readFully(inputStream1, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.io.EOFException; message: Length to read: 1 actual: 0");
        } catch (java.io.EOFException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream15);
        org.junit.Assert.assertNotNull(strList17);
    }

    @Test
    public void test1116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1116");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream3 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1);
        java.lang.String str4 = org.apache.commons.io.IOUtils.toString(inputStream1);
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray7);
        java.lang.String str10 = org.apache.commons.io.IOUtils.toString(byteArray7);
        java.io.Writer writer11 = null;
        java.nio.charset.Charset charset12 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(byteArray7, writer11, charset12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Writer.write(String)\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
    }

    @Test
    public void test1117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1117");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream("\n");
        byte[] byteArray3 = org.apache.commons.io.IOUtils.toByteArray(inputStream1, (int) (byte) 0);
        java.io.InputStream inputStream5 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray6 = new byte[] {};
        int int7 = org.apache.commons.io.IOUtils.length(byteArray6);
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray6);
        byte[] byteArray9 = org.apache.commons.io.IOUtils.toByteArray(inputStream5);
        byte[] byteArray11 = org.apache.commons.io.IOUtils.toByteArray(inputStream5, (int) (short) 0);
        byte[] byteArray12 = new byte[] {};
        int int13 = org.apache.commons.io.IOUtils.length(byteArray12);
        org.apache.commons.io.IOUtils.readFully(inputStream5, byteArray12);
        org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray12);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.LineIterator lineIterator17 = org.apache.commons.io.IOUtils.lineIterator(inputStream1, "");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertNotNull(inputStream5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test1118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1118");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        java.io.Writer writer10 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer10);
        java.util.List<java.lang.String> strList12 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.InputStream inputStream14 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, 4);
        java.io.InputStream inputStream16 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream14, 100);
        java.io.OutputStream outputStream17 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long20 = org.apache.commons.io.IOUtils.copyLarge(inputStream14, outputStream17, (long) (short) 10, (long) '/');
            org.junit.Assert.fail("Expected exception of type java.io.EOFException; message: Bytes to skip: 10 actual: 0");
        } catch (java.io.EOFException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(strList12);
        org.junit.Assert.assertNotNull(inputStream14);
        org.junit.Assert.assertNotNull(inputStream16);
    }

    @Test
    public void test1119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1119");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.BufferedInputStream bufferedInputStream10 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.io.InputStream inputStream12 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, (int) (byte) 1);
        java.nio.charset.Charset charset13 = null;
        org.apache.commons.io.LineIterator lineIterator14 = org.apache.commons.io.IOUtils.lineIterator(inputStream12, charset13);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray16 = org.apache.commons.io.IOUtils.readFully(inputStream12, (int) '/');
            org.junit.Assert.fail("Expected exception of type java.io.EOFException; message: Length to read: 47 actual: 0");
        } catch (java.io.EOFException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream10);
        org.junit.Assert.assertNotNull(inputStream12);
        org.junit.Assert.assertNotNull(lineIterator14);
    }

    @Test
    public void test1120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1120");
        java.io.OutputStream outputStream1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write((java.lang.CharSequence) "\n", outputStream1, "");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1121");
        java.io.Reader reader0 = null;
        java.io.InputStream inputStream2 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray3 = new byte[] {};
        int int4 = org.apache.commons.io.IOUtils.length(byteArray3);
        int int5 = org.apache.commons.io.IOUtils.read(inputStream2, byteArray3);
        byte[] byteArray6 = org.apache.commons.io.IOUtils.toByteArray(inputStream2);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer7 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream2, iOExceptionConsumer7);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream2);
        java.io.BufferedInputStream bufferedInputStream11 = org.apache.commons.io.IOUtils.buffer(inputStream2, (int) (byte) 10);
        java.io.InputStream inputStream13 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream2, (int) (byte) 1);
        java.io.OutputStream outputStream14 = null;
        int int15 = org.apache.commons.io.IOUtils.copy(inputStream13, outputStream14);
        java.io.BufferedInputStream bufferedInputStream17 = org.apache.commons.io.IOUtils.buffer(inputStream13, (int) (byte) 10);
        char[] charArray18 = org.apache.commons.io.IOUtils.toCharArray((java.io.InputStream) bufferedInputStream17);
        int int19 = org.apache.commons.io.IOUtils.length(charArray18);
        org.apache.commons.io.IOUtils.readFully(reader0, charArray18);
        java.io.OutputStream outputStream21 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(charArray18, outputStream21, "");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream11);
        org.junit.Assert.assertNotNull(inputStream13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(bufferedInputStream17);
        org.junit.Assert.assertNotNull(charArray18);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray18), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray18), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray18), "[]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test1122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1122");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray(inputStream1, (int) (short) 0);
        long long9 = org.apache.commons.io.IOUtils.skip(inputStream1, 100L);
        java.io.InputStream inputStream11 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray12 = new byte[] {};
        int int13 = org.apache.commons.io.IOUtils.length(byteArray12);
        int int14 = org.apache.commons.io.IOUtils.read(inputStream11, byteArray12);
        byte[] byteArray15 = org.apache.commons.io.IOUtils.toByteArray(inputStream11);
        byte[] byteArray17 = org.apache.commons.io.IOUtils.toByteArray(inputStream11, (int) (short) 0);
        org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray17);
        java.io.OutputStream outputStream19 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(byteArray17, outputStream19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.OutputStream.write(byte[])\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(inputStream11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
    }

    @Test
    public void test1123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1123");
        char[] charArray3 = new char[] { 'a', '\\', '4' };
        int int4 = org.apache.commons.io.IOUtils.length(charArray3);
        java.io.OutputStream outputStream5 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(charArray3, outputStream5, "\r\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ??");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray3), "a\\4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray3), "a\\4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray3), "[a, \\, 4]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3);
    }

    @Test
    public void test1124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1124");
        java.io.Reader reader0 = null;
        java.io.Writer writer1 = null;
        java.io.InputStream inputStream5 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray6 = org.apache.commons.io.IOUtils.toByteArray(inputStream5);
        java.io.InputStream inputStream8 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray9 = new byte[] {};
        int int10 = org.apache.commons.io.IOUtils.length(byteArray9);
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray9);
        byte[] byteArray12 = org.apache.commons.io.IOUtils.toByteArray(inputStream8);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer13 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream8, iOExceptionConsumer13);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream8);
        java.io.BufferedInputStream bufferedInputStream17 = org.apache.commons.io.IOUtils.buffer(inputStream8, (int) (byte) 10);
        boolean boolean18 = org.apache.commons.io.IOUtils.contentEquals(inputStream5, inputStream8);
        java.io.OutputStream outputStream19 = null;
        long long22 = org.apache.commons.io.IOUtils.copyLarge(inputStream5, outputStream19, (long) (short) 0, (long) 2);
        char[] charArray23 = org.apache.commons.io.IOUtils.toCharArray(inputStream5);
        // The following exception was thrown during execution in test generation
        try {
            long long24 = org.apache.commons.io.IOUtils.copyLarge(reader0, writer1, (long) (byte) 10, (long) (-1), charArray23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[], int, int)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(inputStream8);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[]");
    }

    @Test
    public void test1125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1125");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        org.apache.commons.io.IOUtils.closeQuietly(inputStream1);
        java.io.InputStream inputStream7 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray8 = new byte[] {};
        int int9 = org.apache.commons.io.IOUtils.length(byteArray8);
        int int10 = org.apache.commons.io.IOUtils.read(inputStream7, byteArray8);
        java.lang.String str11 = org.apache.commons.io.IOUtils.toString(byteArray8);
        int int14 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray8, (int) (byte) 10, (int) (short) 0);
        char[] charArray15 = org.apache.commons.io.IOUtils.toCharArray(inputStream1);
        java.io.Writer writer16 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(charArray15, writer16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Writer.write(char[])\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(inputStream7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[]");
    }

    @Test
    public void test1126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1126");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream5 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray("");
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray10);
        long long12 = org.apache.commons.io.IOUtils.copyLarge(inputStream4, outputStream5, 0L, 0L, byteArray10);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, byteArray10);
        java.io.BufferedInputStream bufferedInputStream15 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        byte[] byteArray16 = org.apache.commons.io.IOUtils.toByteArray((java.io.InputStream) bufferedInputStream15);
        java.io.InputStream inputStream17 = null;
        java.io.OutputStream outputStream18 = null;
        byte[] byteArray21 = new byte[] {};
        int int22 = org.apache.commons.io.IOUtils.length(byteArray21);
        java.io.OutputStream outputStream23 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray21, outputStream23);
        long long25 = org.apache.commons.io.IOUtils.copyLarge(inputStream17, outputStream18, 0L, (long) (byte) -1, byteArray21);
        java.io.OutputStream outputStream26 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray21, outputStream26);
        int int28 = org.apache.commons.io.IOUtils.length(byteArray21);
        org.apache.commons.io.IOUtils.readFully((java.io.InputStream) bufferedInputStream15, byteArray21);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray31 = org.apache.commons.io.IOUtils.toByteArray((java.io.InputStream) bufferedInputStream15, (long) ' ');
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Unexpected read size. current: 0, expected: 32");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream15);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
    }

    @Test
    public void test1127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1127");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.BufferedInputStream bufferedInputStream10 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.io.InputStream inputStream12 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, (int) (byte) 1);
        java.io.OutputStream outputStream13 = null;
        int int14 = org.apache.commons.io.IOUtils.copy(inputStream12, outputStream13);
        java.io.BufferedInputStream bufferedInputStream16 = org.apache.commons.io.IOUtils.buffer(inputStream12, (int) (byte) 10);
        byte[] byteArray18 = org.apache.commons.io.IOUtils.toByteArray(inputStream12, 0);
        java.io.Writer writer19 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(byteArray18, writer19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Writer.write(String)\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream10);
        org.junit.Assert.assertNotNull(inputStream12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(bufferedInputStream16);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
    }

    @Test
    public void test1128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1128");
        java.io.Writer writer0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.BufferedWriter bufferedWriter2 = org.apache.commons.io.IOUtils.buffer(writer0, (int) '/');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1129");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream5 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray("");
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray10);
        long long12 = org.apache.commons.io.IOUtils.copyLarge(inputStream4, outputStream5, 0L, 0L, byteArray10);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, byteArray10);
        java.io.BufferedInputStream bufferedInputStream15 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.io.OutputStream outputStream16 = null;
        long long17 = org.apache.commons.io.IOUtils.copyLarge((java.io.InputStream) bufferedInputStream15, outputStream16);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) bufferedInputStream15);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray20 = org.apache.commons.io.IOUtils.toByteArray((java.io.InputStream) bufferedInputStream15, (long) '/');
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Stream closed");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
    }

    @Test
    public void test1130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1130");
        java.io.Reader reader0 = null;
        java.io.Writer writer1 = null;
        java.io.InputStream inputStream5 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray6 = new byte[] {};
        int int7 = org.apache.commons.io.IOUtils.length(byteArray6);
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray6);
        byte[] byteArray9 = org.apache.commons.io.IOUtils.toByteArray(inputStream5);
        java.nio.charset.Charset charset10 = null;
        java.util.List<java.lang.String> strList11 = org.apache.commons.io.IOUtils.readLines(inputStream5, charset10);
        java.nio.charset.Charset charset12 = null;
        org.apache.commons.io.LineIterator lineIterator13 = org.apache.commons.io.IOUtils.lineIterator(inputStream5, charset12);
        java.io.InputStream inputStream15 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream5, 6);
        java.nio.charset.Charset charset16 = null;
        char[] charArray17 = org.apache.commons.io.IOUtils.toCharArray(inputStream5, charset16);
        java.io.Writer writer18 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray17, writer18);
        // The following exception was thrown during execution in test generation
        try {
            long long20 = org.apache.commons.io.IOUtils.copyLarge(reader0, writer1, 1L, (long) '\\', charArray17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[], int, int)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertNotNull(lineIterator13);
        org.junit.Assert.assertNotNull(inputStream15);
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[]");
    }

    @Test
    public void test1131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1131");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.nio.charset.Charset charset4 = null;
        org.apache.commons.io.LineIterator lineIterator5 = org.apache.commons.io.IOUtils.lineIterator(inputStream1, charset4);
        char[] charArray6 = org.apache.commons.io.IOUtils.toCharArray(inputStream1);
        java.io.Writer writer7 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray6, writer7);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(lineIterator5);
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[]");
    }

    @Test
    public void test1132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1132");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream5 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream6 = null;
        java.io.InputStream inputStream9 = null;
        byte[] byteArray11 = org.apache.commons.io.IOUtils.toByteArray("");
        int int12 = org.apache.commons.io.IOUtils.read(inputStream9, byteArray11);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream5, outputStream6, 0L, 0L, byteArray11);
        java.nio.charset.Charset charset14 = null;
        java.util.List<java.lang.String> strList15 = org.apache.commons.io.IOUtils.readLines(inputStream5, charset14);
        java.io.InputStream inputStream17 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream18 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray23 = org.apache.commons.io.IOUtils.toByteArray("");
        int int24 = org.apache.commons.io.IOUtils.read(inputStream21, byteArray23);
        long long25 = org.apache.commons.io.IOUtils.copyLarge(inputStream17, outputStream18, 0L, 0L, byteArray23);
        java.nio.charset.Charset charset26 = null;
        java.util.List<java.lang.String> strList27 = org.apache.commons.io.IOUtils.readLines(inputStream17, charset26);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream17);
        boolean boolean29 = org.apache.commons.io.IOUtils.contentEquals(inputStream5, inputStream17);
        java.io.OutputStream outputStream30 = null;
        java.io.InputStream inputStream32 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream33 = null;
        java.io.InputStream inputStream36 = null;
        byte[] byteArray38 = org.apache.commons.io.IOUtils.toByteArray("");
        int int39 = org.apache.commons.io.IOUtils.read(inputStream36, byteArray38);
        long long40 = org.apache.commons.io.IOUtils.copyLarge(inputStream32, outputStream33, 0L, 0L, byteArray38);
        long long41 = org.apache.commons.io.IOUtils.copyLarge(inputStream17, outputStream30, byteArray38);
        org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray38);
        java.io.OutputStream outputStream43 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray38, outputStream43);
        int int45 = org.apache.commons.io.IOUtils.length(byteArray38);
        java.io.OutputStream outputStream46 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(byteArray38, outputStream46);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.OutputStream.write(byte[])\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(inputStream5);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(strList15);
        org.junit.Assert.assertNotNull(inputStream17);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(strList27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(inputStream32);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
    }

    @Test
    public void test1133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1133");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.List<java.lang.String> strList3 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        long long5 = org.apache.commons.io.IOUtils.skip(inputStream1, (long) '/');
        java.io.Writer writer6 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer6);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.LineIterator lineIterator9 = org.apache.commons.io.IOUtils.lineIterator(inputStream1, "hi!");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: hi!");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(strList3);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
    }

    @Test
    public void test1134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1134");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray(inputStream1, (int) (short) 0);
        java.io.BufferedInputStream bufferedInputStream8 = org.apache.commons.io.IOUtils.buffer(inputStream1);
        java.io.Writer writer9 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.copy(inputStream1, writer9, "\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ?");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream8);
    }

    @Test
    public void test1135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1135");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.BufferedInputStream bufferedInputStream10 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.io.InputStream inputStream12 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, (int) (byte) 1);
        java.nio.charset.Charset charset13 = null;
        char[] charArray14 = org.apache.commons.io.IOUtils.toCharArray(inputStream1, charset13);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream17 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray18 = new byte[] {};
        int int19 = org.apache.commons.io.IOUtils.length(byteArray18);
        int int20 = org.apache.commons.io.IOUtils.read(inputStream17, byteArray18);
        byte[] byteArray21 = org.apache.commons.io.IOUtils.toByteArray(inputStream17);
        byte[] byteArray23 = org.apache.commons.io.IOUtils.toByteArray(inputStream17, (int) (short) 0);
        byte[] byteArray24 = new byte[] {};
        int int25 = org.apache.commons.io.IOUtils.length(byteArray24);
        org.apache.commons.io.IOUtils.readFully(inputStream17, byteArray24);
        java.lang.String str27 = org.apache.commons.io.IOUtils.toString(byteArray24);
        int int28 = org.apache.commons.io.IOUtils.length(byteArray24);
        org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray24);
        java.lang.String str30 = org.apache.commons.io.IOUtils.toString(byteArray24);
        java.io.Writer writer31 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(byteArray24, writer31, "\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ?");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream10);
        org.junit.Assert.assertNotNull(inputStream12);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[]");
        org.junit.Assert.assertNotNull(inputStream17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
    }

    @Test
    public void test1136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1136");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.nio.charset.Charset charset4 = null;
        org.apache.commons.io.LineIterator lineIterator5 = org.apache.commons.io.IOUtils.lineIterator(inputStream1, charset4);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) lineIterator5);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(lineIterator5);
    }

    @Test
    public void test1137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1137");
        byte[] byteArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str1 = org.apache.commons.io.IOUtils.toString(byteArray0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"bytes\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1138");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.util.List<java.lang.String> strList4 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer5 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer5);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.Writer writer8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.copy(inputStream1, writer8, "hi!");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: hi!");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(strList4);
    }

    @Test
    public void test1139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1139");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.util.List<java.lang.String> strList4 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.OutputStream outputStream5 = null;
        long long6 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream5);
        java.io.Writer writer7 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer7);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream11 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray12 = new byte[] {};
        int int13 = org.apache.commons.io.IOUtils.length(byteArray12);
        int int14 = org.apache.commons.io.IOUtils.read(inputStream11, byteArray12);
        byte[] byteArray15 = org.apache.commons.io.IOUtils.toByteArray(inputStream11);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer16 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream11, iOExceptionConsumer16);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream11);
        java.io.BufferedInputStream bufferedInputStream20 = org.apache.commons.io.IOUtils.buffer(inputStream11, (int) (byte) 10);
        java.io.InputStream inputStream22 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream11, (int) (byte) 1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer23 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream11, iOExceptionConsumer23);
        java.io.OutputStream outputStream25 = null;
        java.io.InputStream inputStream27 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray28 = new byte[] {};
        int int29 = org.apache.commons.io.IOUtils.length(byteArray28);
        int int30 = org.apache.commons.io.IOUtils.read(inputStream27, byteArray28);
        byte[] byteArray31 = org.apache.commons.io.IOUtils.toByteArray(inputStream27);
        java.io.InputStream inputStream33 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray34 = new byte[] {};
        int int35 = org.apache.commons.io.IOUtils.length(byteArray34);
        int int36 = org.apache.commons.io.IOUtils.read(inputStream33, byteArray34);
        byte[] byteArray37 = org.apache.commons.io.IOUtils.toByteArray(inputStream33);
        int int38 = org.apache.commons.io.IOUtils.length(byteArray37);
        org.apache.commons.io.IOUtils.readFully(inputStream27, byteArray37);
        long long40 = org.apache.commons.io.IOUtils.copyLarge(inputStream11, outputStream25, byteArray37);
        boolean boolean41 = org.apache.commons.io.IOUtils.contentEquals(inputStream1, inputStream11);
        java.io.BufferedInputStream bufferedInputStream42 = org.apache.commons.io.IOUtils.buffer(inputStream1);
        java.io.BufferedInputStream bufferedInputStream44 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (short) 100);
        java.io.InputStream inputStream46 = org.apache.commons.io.IOUtils.toInputStream("\n");
        byte[] byteArray48 = org.apache.commons.io.IOUtils.toByteArray(inputStream46, (int) (byte) 0);
        java.io.InputStream inputStream50 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray51 = new byte[] {};
        int int52 = org.apache.commons.io.IOUtils.length(byteArray51);
        int int53 = org.apache.commons.io.IOUtils.read(inputStream50, byteArray51);
        byte[] byteArray54 = org.apache.commons.io.IOUtils.toByteArray(inputStream50);
        byte[] byteArray56 = org.apache.commons.io.IOUtils.toByteArray(inputStream50, (int) (short) 0);
        byte[] byteArray57 = new byte[] {};
        int int58 = org.apache.commons.io.IOUtils.length(byteArray57);
        org.apache.commons.io.IOUtils.readFully(inputStream50, byteArray57);
        org.apache.commons.io.IOUtils.readFully(inputStream46, byteArray57);
        boolean boolean61 = org.apache.commons.io.IOUtils.contentEquals(inputStream1, inputStream46);
        java.io.Writer writer62 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer62);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(inputStream11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream20);
        org.junit.Assert.assertNotNull(inputStream22);
        org.junit.Assert.assertNotNull(inputStream27);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(inputStream33);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(bufferedInputStream42);
        org.junit.Assert.assertNotNull(bufferedInputStream44);
        org.junit.Assert.assertNotNull(inputStream46);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertNotNull(inputStream50);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test1140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1140");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        java.io.OutputStream outputStream10 = null;
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream10, (long) (short) 0, (-1L));
        java.util.List<java.lang.String> strList14 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.OutputStream outputStream16 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList14, "hi!", outputStream16, "\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ?");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(strList14);
    }

    @Test
    public void test1141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1141");
        byte[] byteArray0 = new byte[] {};
        int int1 = org.apache.commons.io.IOUtils.length(byteArray0);
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray0, outputStream2);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str5 = org.apache.commons.io.IOUtils.toString(byteArray0, "");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
    }

    @Test
    public void test1142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1142");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.util.List<java.lang.String> strList4 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.OutputStream outputStream5 = null;
        long long6 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream5);
        java.io.Writer writer7 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer7);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream11 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray12 = new byte[] {};
        int int13 = org.apache.commons.io.IOUtils.length(byteArray12);
        int int14 = org.apache.commons.io.IOUtils.read(inputStream11, byteArray12);
        byte[] byteArray15 = org.apache.commons.io.IOUtils.toByteArray(inputStream11);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer16 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream11, iOExceptionConsumer16);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream11);
        java.io.BufferedInputStream bufferedInputStream20 = org.apache.commons.io.IOUtils.buffer(inputStream11, (int) (byte) 10);
        java.io.InputStream inputStream22 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream11, (int) (byte) 1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer23 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream11, iOExceptionConsumer23);
        java.io.OutputStream outputStream25 = null;
        java.io.InputStream inputStream27 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray28 = new byte[] {};
        int int29 = org.apache.commons.io.IOUtils.length(byteArray28);
        int int30 = org.apache.commons.io.IOUtils.read(inputStream27, byteArray28);
        byte[] byteArray31 = org.apache.commons.io.IOUtils.toByteArray(inputStream27);
        java.io.InputStream inputStream33 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray34 = new byte[] {};
        int int35 = org.apache.commons.io.IOUtils.length(byteArray34);
        int int36 = org.apache.commons.io.IOUtils.read(inputStream33, byteArray34);
        byte[] byteArray37 = org.apache.commons.io.IOUtils.toByteArray(inputStream33);
        int int38 = org.apache.commons.io.IOUtils.length(byteArray37);
        org.apache.commons.io.IOUtils.readFully(inputStream27, byteArray37);
        long long40 = org.apache.commons.io.IOUtils.copyLarge(inputStream11, outputStream25, byteArray37);
        boolean boolean41 = org.apache.commons.io.IOUtils.contentEquals(inputStream1, inputStream11);
        java.io.BufferedInputStream bufferedInputStream43 = org.apache.commons.io.IOUtils.buffer(inputStream1, 5);
        long long45 = org.apache.commons.io.IOUtils.skip(inputStream1, (long) '/');
        java.io.InputStream inputStream47 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream48 = null;
        java.io.InputStream inputStream50 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream51 = null;
        java.io.InputStream inputStream54 = null;
        byte[] byteArray56 = org.apache.commons.io.IOUtils.toByteArray("");
        int int57 = org.apache.commons.io.IOUtils.read(inputStream54, byteArray56);
        long long58 = org.apache.commons.io.IOUtils.copyLarge(inputStream50, outputStream51, 0L, 0L, byteArray56);
        long long59 = org.apache.commons.io.IOUtils.copyLarge(inputStream47, outputStream48, byteArray56);
        java.io.BufferedInputStream bufferedInputStream61 = org.apache.commons.io.IOUtils.buffer(inputStream47, (int) (byte) 10);
        org.apache.commons.io.IOUtils.closeQuietly(inputStream47);
        java.io.InputStream inputStream64 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray65 = new byte[] {};
        int int66 = org.apache.commons.io.IOUtils.length(byteArray65);
        int int67 = org.apache.commons.io.IOUtils.read(inputStream64, byteArray65);
        byte[] byteArray68 = org.apache.commons.io.IOUtils.toByteArray(inputStream64);
        byte[] byteArray70 = org.apache.commons.io.IOUtils.toByteArray(inputStream64, (int) (short) 0);
        long long72 = org.apache.commons.io.IOUtils.skip(inputStream64, 100L);
        java.io.InputStream inputStream74 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray75 = new byte[] {};
        int int76 = org.apache.commons.io.IOUtils.length(byteArray75);
        int int77 = org.apache.commons.io.IOUtils.read(inputStream74, byteArray75);
        byte[] byteArray78 = org.apache.commons.io.IOUtils.toByteArray(inputStream74);
        byte[] byteArray80 = org.apache.commons.io.IOUtils.toByteArray(inputStream74, (int) (short) 0);
        org.apache.commons.io.IOUtils.readFully(inputStream64, byteArray80);
        org.apache.commons.io.IOUtils.readFully(inputStream47, byteArray80);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray80, (int) '\\', 5);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Range [92, 92 + 5) out of bounds for length 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(inputStream11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream20);
        org.junit.Assert.assertNotNull(inputStream22);
        org.junit.Assert.assertNotNull(inputStream27);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(inputStream33);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(bufferedInputStream43);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertNotNull(inputStream47);
        org.junit.Assert.assertNotNull(inputStream50);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 0L + "'", long58 == 0L);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream61);
        org.junit.Assert.assertNotNull(inputStream64);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[]");
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[]");
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 0L + "'", long72 == 0L);
        org.junit.Assert.assertNotNull(inputStream74);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[]");
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[]");
    }

    @Test
    public void test1143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1143");
        java.io.Reader reader0 = null;
        java.io.Reader reader1 = null;
        java.io.Reader reader2 = null;
        char[] charArray3 = new char[] {};
        int int4 = org.apache.commons.io.IOUtils.length(charArray3);
        int int5 = org.apache.commons.io.IOUtils.read(reader2, charArray3);
        int int6 = org.apache.commons.io.IOUtils.length(charArray3);
        int int7 = org.apache.commons.io.IOUtils.read(reader1, charArray3);
        org.apache.commons.io.IOUtils.readFully(reader0, charArray3);
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray3), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray3), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray3), "[]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test1144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1144");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream3 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1);
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream3);
        java.io.BufferedInputStream bufferedInputStream6 = org.apache.commons.io.IOUtils.buffer(inputStream4, 3);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) bufferedInputStream6);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream3);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(bufferedInputStream6);
    }

    @Test
    public void test1145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1145");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.BufferedInputStream bufferedInputStream10 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.io.InputStream inputStream12 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, (int) (byte) 1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer13 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer13);
        java.io.OutputStream outputStream15 = null;
        java.io.InputStream inputStream17 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray18 = new byte[] {};
        int int19 = org.apache.commons.io.IOUtils.length(byteArray18);
        int int20 = org.apache.commons.io.IOUtils.read(inputStream17, byteArray18);
        byte[] byteArray21 = org.apache.commons.io.IOUtils.toByteArray(inputStream17);
        java.io.InputStream inputStream23 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray24 = new byte[] {};
        int int25 = org.apache.commons.io.IOUtils.length(byteArray24);
        int int26 = org.apache.commons.io.IOUtils.read(inputStream23, byteArray24);
        byte[] byteArray27 = org.apache.commons.io.IOUtils.toByteArray(inputStream23);
        int int28 = org.apache.commons.io.IOUtils.length(byteArray27);
        org.apache.commons.io.IOUtils.readFully(inputStream17, byteArray27);
        long long30 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream15, byteArray27);
        byte[] byteArray31 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str33 = org.apache.commons.io.IOUtils.toString(inputStream1, "\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ?");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream10);
        org.junit.Assert.assertNotNull(inputStream12);
        org.junit.Assert.assertNotNull(inputStream17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertNotNull(inputStream23);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
    }

    @Test
    public void test1146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1146");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        java.nio.charset.Charset charset10 = null;
        java.util.List<java.lang.String> strList11 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset10);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.nio.charset.Charset charset13 = null;
        java.lang.String str14 = org.apache.commons.io.IOUtils.toString(inputStream1, charset13);
        java.io.OutputStream outputStream15 = null;
        java.io.InputStream inputStream16 = null;
        java.io.OutputStream outputStream17 = null;
        byte[] byteArray20 = new byte[] {};
        int int21 = org.apache.commons.io.IOUtils.length(byteArray20);
        java.io.OutputStream outputStream22 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray20, outputStream22);
        long long24 = org.apache.commons.io.IOUtils.copyLarge(inputStream16, outputStream17, 0L, (long) (byte) -1, byteArray20);
        long long25 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream15, byteArray20);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str27 = org.apache.commons.io.IOUtils.toString(inputStream1, "\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ?");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
    }

    @Test
    public void test1147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1147");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.BufferedInputStream bufferedInputStream10 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        byte[] byteArray11 = null;
        org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray11, (int) '4', 0);
        java.io.OutputStream outputStream15 = null;
        long long17 = org.apache.commons.io.IOUtils.copy(inputStream1, outputStream15, 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.String> strList19 = org.apache.commons.io.IOUtils.readLines(inputStream1, "\r\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ??");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream10);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
    }

    @Test
    public void test1148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1148");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.BufferedInputStream bufferedInputStream10 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        byte[] byteArray11 = null;
        org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray11, (int) '4', 0);
        java.io.BufferedInputStream bufferedInputStream15 = org.apache.commons.io.IOUtils.buffer(inputStream1);
        java.io.InputStream inputStream16 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray18 = org.apache.commons.io.IOUtils.readFully(inputStream16, 2);
            org.junit.Assert.fail("Expected exception of type java.io.EOFException; message: Length to read: 2 actual: 0");
        } catch (java.io.EOFException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream10);
        org.junit.Assert.assertNotNull(bufferedInputStream15);
        org.junit.Assert.assertNotNull(inputStream16);
    }

    @Test
    public void test1149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1149");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        java.nio.charset.Charset charset5 = null;
        org.apache.commons.io.LineIterator lineIterator6 = org.apache.commons.io.IOUtils.lineIterator(inputStream1, charset5);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(lineIterator6);
    }

    @Test
    public void test1150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1150");
        java.io.Reader reader0 = null;
        java.io.Reader reader1 = null;
        java.io.Reader reader2 = null;
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream4);
        java.io.InputStream inputStream7 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray8 = new byte[] {};
        int int9 = org.apache.commons.io.IOUtils.length(byteArray8);
        int int10 = org.apache.commons.io.IOUtils.read(inputStream7, byteArray8);
        byte[] byteArray11 = org.apache.commons.io.IOUtils.toByteArray(inputStream7);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer12 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream7, iOExceptionConsumer12);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream7);
        java.io.BufferedInputStream bufferedInputStream16 = org.apache.commons.io.IOUtils.buffer(inputStream7, (int) (byte) 10);
        boolean boolean17 = org.apache.commons.io.IOUtils.contentEquals(inputStream4, inputStream7);
        java.io.OutputStream outputStream18 = null;
        long long21 = org.apache.commons.io.IOUtils.copyLarge(inputStream4, outputStream18, (long) (short) 0, (long) 2);
        char[] charArray22 = org.apache.commons.io.IOUtils.toCharArray(inputStream4);
        int int25 = org.apache.commons.io.IOUtils.read(reader2, charArray22, (int) 'a', 0);
        org.apache.commons.io.IOUtils.readFully(reader1, charArray22);
        // The following exception was thrown during execution in test generation
        try {
            int int29 = org.apache.commons.io.IOUtils.read(reader0, charArray22, (int) 'a', (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[], int, int)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(inputStream7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray22), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray22), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray22), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
    }

    @Test
    public void test1151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1151");
        java.io.Reader reader0 = null;
        java.io.Writer writer1 = null;
        java.io.Reader reader4 = null;
        java.io.Writer writer5 = null;
        char[] charArray8 = new char[] {};
        int int9 = org.apache.commons.io.IOUtils.length(charArray8);
        java.io.Writer writer10 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray8, writer10);
        java.io.Writer writer12 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray8, writer12);
        long long14 = org.apache.commons.io.IOUtils.copyLarge(reader4, writer5, 0L, (long) (byte) 100, charArray8);
        java.io.Writer writer15 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray8, writer15);
        java.io.Writer writer17 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray8, writer17);
        // The following exception was thrown during execution in test generation
        try {
            long long19 = org.apache.commons.io.IOUtils.copyLarge(reader0, writer1, 1L, 10L, charArray8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[], int, int)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
    }

    @Test
    public void test1152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1152");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray5 = new byte[] {};
        int int6 = org.apache.commons.io.IOUtils.length(byteArray5);
        int int7 = org.apache.commons.io.IOUtils.read(inputStream4, byteArray5);
        byte[] byteArray8 = org.apache.commons.io.IOUtils.toByteArray(inputStream4);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer9 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream4, iOExceptionConsumer9);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream4);
        java.io.BufferedInputStream bufferedInputStream13 = org.apache.commons.io.IOUtils.buffer(inputStream4, (int) (byte) 10);
        boolean boolean14 = org.apache.commons.io.IOUtils.contentEquals(inputStream1, inputStream4);
        java.io.OutputStream outputStream15 = null;
        long long18 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream15, (long) (short) 0, (long) 2);
        java.io.OutputStream outputStream19 = null;
        int int20 = org.apache.commons.io.IOUtils.copy(inputStream1, outputStream19);
        java.io.OutputStream outputStream21 = null;
        int int22 = org.apache.commons.io.IOUtils.copy(inputStream1, outputStream21);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
    }

    @Test
    public void test1153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1153");
        java.io.OutputStream outputStream0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.BufferedOutputStream bufferedOutputStream2 = org.apache.commons.io.IOUtils.buffer(outputStream0, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: outputStream");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1154");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream5 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray("");
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray10);
        long long12 = org.apache.commons.io.IOUtils.copyLarge(inputStream4, outputStream5, 0L, 0L, byteArray10);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, byteArray10);
        java.io.BufferedInputStream bufferedInputStream15 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.nio.charset.Charset charset16 = null;
        java.util.List<java.lang.String> strList17 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset16);
        java.io.OutputStream outputStream18 = null;
        long long21 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream18, 0L, (long) 0);
        java.io.BufferedInputStream bufferedInputStream22 = org.apache.commons.io.IOUtils.buffer(inputStream1);
        java.io.BufferedInputStream bufferedInputStream23 = org.apache.commons.io.IOUtils.buffer(inputStream1);
        java.io.BufferedInputStream bufferedInputStream25 = org.apache.commons.io.IOUtils.buffer((java.io.InputStream) bufferedInputStream23, 4);
        java.nio.charset.Charset charset26 = null;
        org.apache.commons.io.LineIterator lineIterator27 = org.apache.commons.io.IOUtils.lineIterator((java.io.InputStream) bufferedInputStream23, charset26);
        java.io.OutputStream outputStream28 = null;
        java.io.InputStream inputStream32 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "\r\n");
        byte[] byteArray34 = org.apache.commons.io.IOUtils.toByteArray(inputStream32, 1L);
        // The following exception was thrown during execution in test generation
        try {
            long long35 = org.apache.commons.io.IOUtils.copyLarge((java.io.InputStream) bufferedInputStream23, outputStream28, (long) (short) 100, (long) 6, byteArray34);
            org.junit.Assert.fail("Expected exception of type java.io.EOFException; message: Bytes to skip: 100 actual: 0");
        } catch (java.io.EOFException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream15);
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream22);
        org.junit.Assert.assertNotNull(bufferedInputStream23);
        org.junit.Assert.assertNotNull(bufferedInputStream25);
        org.junit.Assert.assertNotNull(lineIterator27);
        org.junit.Assert.assertNotNull(inputStream32);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[13]");
    }

    @Test
    public void test1155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1155");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        java.io.InputStream inputStream6 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray7 = new byte[] {};
        int int8 = org.apache.commons.io.IOUtils.length(byteArray7);
        int int9 = org.apache.commons.io.IOUtils.read(inputStream6, byteArray7);
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray(inputStream6);
        byte[] byteArray12 = org.apache.commons.io.IOUtils.toByteArray(inputStream6, (int) (short) 0);
        int int13 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray12);
        java.io.InputStream inputStream15 = org.apache.commons.io.IOUtils.toInputStream("\n");
        byte[] byteArray17 = org.apache.commons.io.IOUtils.toByteArray(inputStream15, (int) (byte) 0);
        int int18 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray17);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer20 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer20);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(inputStream6);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(inputStream15);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test1156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1156");
        java.io.Reader reader0 = null;
        java.io.Writer writer1 = null;
        java.io.Reader reader4 = null;
        java.io.Reader reader5 = null;
        java.io.Writer writer6 = null;
        char[] charArray9 = new char[] {};
        int int10 = org.apache.commons.io.IOUtils.length(charArray9);
        java.io.Writer writer11 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray9, writer11);
        java.io.Writer writer13 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray9, writer13);
        long long15 = org.apache.commons.io.IOUtils.copyLarge(reader5, writer6, 0L, (long) (byte) 100, charArray9);
        int int16 = org.apache.commons.io.IOUtils.read(reader4, charArray9);
        int int17 = org.apache.commons.io.IOUtils.length(charArray9);
        java.io.Writer writer18 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray9, writer18);
        // The following exception was thrown during execution in test generation
        try {
            long long20 = org.apache.commons.io.IOUtils.copyLarge(reader0, writer1, (long) (short) 10, (long) 3, charArray9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[], int, int)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test1157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1157");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.BufferedInputStream bufferedInputStream10 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.io.InputStream inputStream12 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, (int) (byte) 1);
        java.nio.charset.Charset charset13 = null;
        char[] charArray14 = org.apache.commons.io.IOUtils.toCharArray(inputStream1, charset13);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream17 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray18 = new byte[] {};
        int int19 = org.apache.commons.io.IOUtils.length(byteArray18);
        int int20 = org.apache.commons.io.IOUtils.read(inputStream17, byteArray18);
        byte[] byteArray21 = org.apache.commons.io.IOUtils.toByteArray(inputStream17);
        byte[] byteArray23 = org.apache.commons.io.IOUtils.toByteArray(inputStream17, (int) (short) 0);
        byte[] byteArray24 = new byte[] {};
        int int25 = org.apache.commons.io.IOUtils.length(byteArray24);
        org.apache.commons.io.IOUtils.readFully(inputStream17, byteArray24);
        java.lang.String str27 = org.apache.commons.io.IOUtils.toString(byteArray24);
        int int28 = org.apache.commons.io.IOUtils.length(byteArray24);
        org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray24);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray31 = org.apache.commons.io.IOUtils.readFully(inputStream1, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.io.EOFException; message: Length to read: 10 actual: 0");
        } catch (java.io.EOFException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream10);
        org.junit.Assert.assertNotNull(inputStream12);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[]");
        org.junit.Assert.assertNotNull(inputStream17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
    }

    @Test
    public void test1158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1158");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray(inputStream1, (int) (short) 0);
        long long9 = org.apache.commons.io.IOUtils.skip(inputStream1, 100L);
        java.io.InputStream inputStream10 = null;
        java.io.InputStream inputStream11 = null;
        java.io.OutputStream outputStream12 = null;
        byte[] byteArray15 = new byte[] {};
        int int16 = org.apache.commons.io.IOUtils.length(byteArray15);
        java.io.OutputStream outputStream17 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray15, outputStream17);
        long long19 = org.apache.commons.io.IOUtils.copyLarge(inputStream11, outputStream12, 0L, (long) (byte) -1, byteArray15);
        java.io.OutputStream outputStream20 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray15, outputStream20);
        org.apache.commons.io.IOUtils.readFully(inputStream10, byteArray15);
        int int23 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray15);
        java.io.InputStream inputStream24 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1);
        java.io.BufferedInputStream bufferedInputStream25 = org.apache.commons.io.IOUtils.buffer(inputStream1);
        java.lang.Class<?> wildcardClass26 = bufferedInputStream25.getClass();
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(inputStream24);
        org.junit.Assert.assertNotNull(bufferedInputStream25);
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test1159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1159");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream5 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray("");
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray10);
        long long12 = org.apache.commons.io.IOUtils.copyLarge(inputStream4, outputStream5, 0L, 0L, byteArray10);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, byteArray10);
        java.io.BufferedInputStream bufferedInputStream15 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.io.InputStream inputStream17 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray18 = org.apache.commons.io.IOUtils.toByteArray(inputStream17);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream17);
        java.io.InputStream inputStream21 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream22 = null;
        java.io.InputStream inputStream25 = null;
        byte[] byteArray27 = org.apache.commons.io.IOUtils.toByteArray("");
        int int28 = org.apache.commons.io.IOUtils.read(inputStream25, byteArray27);
        long long29 = org.apache.commons.io.IOUtils.copyLarge(inputStream21, outputStream22, 0L, 0L, byteArray27);
        java.nio.charset.Charset charset30 = null;
        java.util.List<java.lang.String> strList31 = org.apache.commons.io.IOUtils.readLines(inputStream21, charset30);
        java.io.InputStream inputStream33 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream34 = null;
        java.io.InputStream inputStream37 = null;
        byte[] byteArray39 = org.apache.commons.io.IOUtils.toByteArray("");
        int int40 = org.apache.commons.io.IOUtils.read(inputStream37, byteArray39);
        long long41 = org.apache.commons.io.IOUtils.copyLarge(inputStream33, outputStream34, 0L, 0L, byteArray39);
        java.nio.charset.Charset charset42 = null;
        java.util.List<java.lang.String> strList43 = org.apache.commons.io.IOUtils.readLines(inputStream33, charset42);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream33);
        boolean boolean45 = org.apache.commons.io.IOUtils.contentEquals(inputStream21, inputStream33);
        java.io.OutputStream outputStream46 = null;
        java.io.InputStream inputStream48 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream49 = null;
        java.io.InputStream inputStream52 = null;
        byte[] byteArray54 = org.apache.commons.io.IOUtils.toByteArray("");
        int int55 = org.apache.commons.io.IOUtils.read(inputStream52, byteArray54);
        long long56 = org.apache.commons.io.IOUtils.copyLarge(inputStream48, outputStream49, 0L, 0L, byteArray54);
        long long57 = org.apache.commons.io.IOUtils.copyLarge(inputStream33, outputStream46, byteArray54);
        org.apache.commons.io.IOUtils.readFully(inputStream17, byteArray54);
        org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray54);
        java.lang.String str60 = org.apache.commons.io.IOUtils.toString(inputStream1);
        java.io.BufferedInputStream bufferedInputStream62 = org.apache.commons.io.IOUtils.buffer(inputStream1, 100);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray64 = org.apache.commons.io.IOUtils.readFully(inputStream1, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: -1");
        } catch (java.lang.NegativeArraySizeException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream15);
        org.junit.Assert.assertNotNull(inputStream17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(inputStream21);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNotNull(strList31);
        org.junit.Assert.assertNotNull(inputStream33);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertNotNull(strList43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(inputStream48);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(bufferedInputStream62);
    }

    @Test
    public void test1160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1160");
        java.nio.charset.Charset charset1 = null;
        java.io.InputStream inputStream2 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "", charset1);
        java.io.OutputStream outputStream3 = null;
        java.io.InputStream inputStream5 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream6 = null;
        java.io.InputStream inputStream8 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream9 = null;
        java.io.InputStream inputStream12 = null;
        byte[] byteArray14 = org.apache.commons.io.IOUtils.toByteArray("");
        int int15 = org.apache.commons.io.IOUtils.read(inputStream12, byteArray14);
        long long16 = org.apache.commons.io.IOUtils.copyLarge(inputStream8, outputStream9, 0L, 0L, byteArray14);
        long long17 = org.apache.commons.io.IOUtils.copyLarge(inputStream5, outputStream6, byteArray14);
        java.io.BufferedInputStream bufferedInputStream19 = org.apache.commons.io.IOUtils.buffer(inputStream5, (int) (byte) 10);
        java.io.InputStream inputStream21 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray22 = org.apache.commons.io.IOUtils.toByteArray(inputStream21);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream21);
        java.io.InputStream inputStream25 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream26 = null;
        java.io.InputStream inputStream29 = null;
        byte[] byteArray31 = org.apache.commons.io.IOUtils.toByteArray("");
        int int32 = org.apache.commons.io.IOUtils.read(inputStream29, byteArray31);
        long long33 = org.apache.commons.io.IOUtils.copyLarge(inputStream25, outputStream26, 0L, 0L, byteArray31);
        java.nio.charset.Charset charset34 = null;
        java.util.List<java.lang.String> strList35 = org.apache.commons.io.IOUtils.readLines(inputStream25, charset34);
        java.io.InputStream inputStream37 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream38 = null;
        java.io.InputStream inputStream41 = null;
        byte[] byteArray43 = org.apache.commons.io.IOUtils.toByteArray("");
        int int44 = org.apache.commons.io.IOUtils.read(inputStream41, byteArray43);
        long long45 = org.apache.commons.io.IOUtils.copyLarge(inputStream37, outputStream38, 0L, 0L, byteArray43);
        java.nio.charset.Charset charset46 = null;
        java.util.List<java.lang.String> strList47 = org.apache.commons.io.IOUtils.readLines(inputStream37, charset46);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream37);
        boolean boolean49 = org.apache.commons.io.IOUtils.contentEquals(inputStream25, inputStream37);
        java.io.OutputStream outputStream50 = null;
        java.io.InputStream inputStream52 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream53 = null;
        java.io.InputStream inputStream56 = null;
        byte[] byteArray58 = org.apache.commons.io.IOUtils.toByteArray("");
        int int59 = org.apache.commons.io.IOUtils.read(inputStream56, byteArray58);
        long long60 = org.apache.commons.io.IOUtils.copyLarge(inputStream52, outputStream53, 0L, 0L, byteArray58);
        long long61 = org.apache.commons.io.IOUtils.copyLarge(inputStream37, outputStream50, byteArray58);
        org.apache.commons.io.IOUtils.readFully(inputStream21, byteArray58);
        org.apache.commons.io.IOUtils.readFully(inputStream5, byteArray58);
        int int64 = org.apache.commons.io.IOUtils.length(byteArray58);
        long long65 = org.apache.commons.io.IOUtils.copyLarge(inputStream2, outputStream3, byteArray58);
        java.io.Writer writer66 = null;
        java.nio.charset.Charset charset67 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(byteArray58, writer66, charset67);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Writer.write(String)\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream2);
        org.junit.Assert.assertNotNull(inputStream5);
        org.junit.Assert.assertNotNull(inputStream8);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream19);
        org.junit.Assert.assertNotNull(inputStream21);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertNotNull(inputStream25);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertNotNull(strList35);
        org.junit.Assert.assertNotNull(inputStream37);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertNotNull(strList47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(inputStream52);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 0L + "'", long60 == 0L);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 0L + "'", long65 == 0L);
    }

    @Test
    public void test1161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1161");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.util.List<java.lang.String> strList4 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.OutputStream outputStream5 = null;
        long long6 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream5);
        java.io.Writer writer7 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer7);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream11 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray12 = new byte[] {};
        int int13 = org.apache.commons.io.IOUtils.length(byteArray12);
        int int14 = org.apache.commons.io.IOUtils.read(inputStream11, byteArray12);
        byte[] byteArray15 = org.apache.commons.io.IOUtils.toByteArray(inputStream11);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer16 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream11, iOExceptionConsumer16);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream11);
        java.io.BufferedInputStream bufferedInputStream20 = org.apache.commons.io.IOUtils.buffer(inputStream11, (int) (byte) 10);
        java.io.InputStream inputStream22 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream11, (int) (byte) 1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer23 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream11, iOExceptionConsumer23);
        java.io.OutputStream outputStream25 = null;
        java.io.InputStream inputStream27 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray28 = new byte[] {};
        int int29 = org.apache.commons.io.IOUtils.length(byteArray28);
        int int30 = org.apache.commons.io.IOUtils.read(inputStream27, byteArray28);
        byte[] byteArray31 = org.apache.commons.io.IOUtils.toByteArray(inputStream27);
        java.io.InputStream inputStream33 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray34 = new byte[] {};
        int int35 = org.apache.commons.io.IOUtils.length(byteArray34);
        int int36 = org.apache.commons.io.IOUtils.read(inputStream33, byteArray34);
        byte[] byteArray37 = org.apache.commons.io.IOUtils.toByteArray(inputStream33);
        int int38 = org.apache.commons.io.IOUtils.length(byteArray37);
        org.apache.commons.io.IOUtils.readFully(inputStream27, byteArray37);
        long long40 = org.apache.commons.io.IOUtils.copyLarge(inputStream11, outputStream25, byteArray37);
        boolean boolean41 = org.apache.commons.io.IOUtils.contentEquals(inputStream1, inputStream11);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream11);
        // The following exception was thrown during execution in test generation
        try {
            java.io.BufferedInputStream bufferedInputStream44 = org.apache.commons.io.IOUtils.buffer(inputStream11, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Buffer size <= 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(inputStream11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream20);
        org.junit.Assert.assertNotNull(inputStream22);
        org.junit.Assert.assertNotNull(inputStream27);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(inputStream33);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
    }

    @Test
    public void test1162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1162");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly(inputStream1);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.nio.charset.Charset charset11 = null;
        org.apache.commons.io.LineIterator lineIterator12 = org.apache.commons.io.IOUtils.lineIterator(inputStream1, charset11);
        java.nio.charset.Charset charset13 = null;
        java.util.List<java.lang.String> strList14 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset13);
        java.io.OutputStream outputStream16 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList14, "hi!", outputStream16);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(lineIterator12);
        org.junit.Assert.assertNotNull(strList14);
    }

    @Test
    public void test1163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1163");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.BufferedInputStream bufferedInputStream10 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.io.InputStream inputStream12 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, (int) (byte) 1);
        java.io.OutputStream outputStream13 = null;
        int int14 = org.apache.commons.io.IOUtils.copy(inputStream12, outputStream13);
        java.io.BufferedInputStream bufferedInputStream16 = org.apache.commons.io.IOUtils.buffer(inputStream12, (int) (byte) 10);
        byte[] byteArray17 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int18 = org.apache.commons.io.IOUtils.read(inputStream12, byteArray17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"buffer\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream10);
        org.junit.Assert.assertNotNull(inputStream12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(bufferedInputStream16);
    }

    @Test
    public void test1164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1164");
        java.nio.charset.Charset charset1 = null;
        java.io.InputStream inputStream2 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "", charset1);
        java.util.List<java.lang.String> strList3 = org.apache.commons.io.IOUtils.readLines(inputStream2);
        java.io.Writer writer5 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList3, "\n", writer5);
        java.io.OutputStream outputStream8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList3, "", outputStream8, "\r\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ??");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream2);
        org.junit.Assert.assertNotNull(strList3);
    }

    @Test
    public void test1165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1165");
        java.io.Reader reader0 = null;
        java.io.InputStream inputStream2 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray3 = new byte[] {};
        int int4 = org.apache.commons.io.IOUtils.length(byteArray3);
        int int5 = org.apache.commons.io.IOUtils.read(inputStream2, byteArray3);
        byte[] byteArray6 = org.apache.commons.io.IOUtils.toByteArray(inputStream2);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer7 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream2, iOExceptionConsumer7);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream2);
        java.io.BufferedInputStream bufferedInputStream11 = org.apache.commons.io.IOUtils.buffer(inputStream2, (int) (byte) 10);
        java.io.InputStream inputStream13 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream2, (int) (byte) 1);
        java.io.OutputStream outputStream14 = null;
        int int15 = org.apache.commons.io.IOUtils.copy(inputStream13, outputStream14);
        java.io.BufferedInputStream bufferedInputStream17 = org.apache.commons.io.IOUtils.buffer(inputStream13, (int) (byte) 10);
        char[] charArray18 = org.apache.commons.io.IOUtils.toCharArray((java.io.InputStream) bufferedInputStream17);
        int int19 = org.apache.commons.io.IOUtils.length(charArray18);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.readFully(reader0, charArray18, 6, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Length must not be negative: -1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream11);
        org.junit.Assert.assertNotNull(inputStream13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(bufferedInputStream17);
        org.junit.Assert.assertNotNull(charArray18);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray18), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray18), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray18), "[]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test1166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1166");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        byte[] byteArray3 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.io.OutputStream outputStream4 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(byteArray3, outputStream4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.OutputStream.write(byte[])\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
    }

    @Test
    public void test1167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1167");
        java.io.Reader reader0 = null;
        java.io.Writer writer1 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long4 = org.apache.commons.io.IOUtils.copyLarge(reader0, writer1, (long) (byte) 10, (long) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[], int, int)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1168");
        java.io.Reader reader0 = null;
        char[] charArray1 = new char[] {};
        int int2 = org.apache.commons.io.IOUtils.length(charArray1);
        int int3 = org.apache.commons.io.IOUtils.read(reader0, charArray1);
        int int4 = org.apache.commons.io.IOUtils.length(charArray1);
        int int5 = org.apache.commons.io.IOUtils.length(charArray1);
        org.junit.Assert.assertNotNull(charArray1);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray1), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray1), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray1), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test1169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1169");
        java.io.Reader reader0 = null;
        java.io.Writer writer1 = null;
        java.io.InputStream inputStream5 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream6 = null;
        java.io.InputStream inputStream9 = null;
        byte[] byteArray11 = org.apache.commons.io.IOUtils.toByteArray("");
        int int12 = org.apache.commons.io.IOUtils.read(inputStream9, byteArray11);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream5, outputStream6, 0L, 0L, byteArray11);
        java.nio.charset.Charset charset14 = null;
        java.util.List<java.lang.String> strList15 = org.apache.commons.io.IOUtils.readLines(inputStream5, charset14);
        java.nio.charset.Charset charset16 = null;
        char[] charArray17 = org.apache.commons.io.IOUtils.toCharArray(inputStream5, charset16);
        // The following exception was thrown during execution in test generation
        try {
            long long18 = org.apache.commons.io.IOUtils.copyLarge(reader0, writer1, (long) (short) 100, (long) 100, charArray17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[], int, int)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream5);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(strList15);
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[]");
    }

    @Test
    public void test1170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1170");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.BufferedInputStream bufferedInputStream10 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.nio.charset.Charset charset11 = null;
        char[] charArray12 = org.apache.commons.io.IOUtils.toCharArray((java.io.InputStream) bufferedInputStream10, charset11);
        java.io.Writer writer13 = null;
        java.nio.charset.Charset charset14 = null;
        org.apache.commons.io.IOUtils.copy((java.io.InputStream) bufferedInputStream10, writer13, charset14);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream10);
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray12), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray12), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray12), "[]");
    }

    @Test
    public void test1171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1171");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        long long9 = org.apache.commons.io.IOUtils.skip(inputStream1, (long) (byte) 100);
        java.lang.String str10 = org.apache.commons.io.IOUtils.toString(inputStream1);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
    }

    @Test
    public void test1172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1172");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.BufferedInputStream bufferedInputStream10 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        org.apache.commons.io.function.IOConsumer<java.io.IOException> iOExceptionIOConsumer11 = null;
        org.apache.commons.io.IOUtils.close((java.io.Closeable) bufferedInputStream10, iOExceptionIOConsumer11);
        java.nio.charset.Charset charset13 = null;
        org.apache.commons.io.LineIterator lineIterator14 = org.apache.commons.io.IOUtils.lineIterator((java.io.InputStream) bufferedInputStream10, charset13);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.InputStream) bufferedInputStream10);
        java.io.InputStream inputStream17 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray18 = new byte[] {};
        int int19 = org.apache.commons.io.IOUtils.length(byteArray18);
        int int20 = org.apache.commons.io.IOUtils.read(inputStream17, byteArray18);
        byte[] byteArray21 = org.apache.commons.io.IOUtils.toByteArray(inputStream17);
        byte[] byteArray23 = org.apache.commons.io.IOUtils.toByteArray(inputStream17, (int) (short) 0);
        long long25 = org.apache.commons.io.IOUtils.skip(inputStream17, 100L);
        java.io.InputStream inputStream27 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray28 = org.apache.commons.io.IOUtils.toByteArray(inputStream27);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream27);
        java.util.List<java.lang.String> strList30 = org.apache.commons.io.IOUtils.readLines(inputStream27);
        java.io.OutputStream outputStream31 = null;
        long long32 = org.apache.commons.io.IOUtils.copyLarge(inputStream27, outputStream31);
        java.io.OutputStream outputStream33 = null;
        java.io.InputStream inputStream37 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray38 = new byte[] {};
        int int39 = org.apache.commons.io.IOUtils.length(byteArray38);
        int int40 = org.apache.commons.io.IOUtils.read(inputStream37, byteArray38);
        long long41 = org.apache.commons.io.IOUtils.copyLarge(inputStream27, outputStream33, (-1L), 1L, byteArray38);
        int int42 = org.apache.commons.io.IOUtils.read(inputStream17, byteArray38);
        java.io.InputStream inputStream44 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray45 = new byte[] {};
        int int46 = org.apache.commons.io.IOUtils.length(byteArray45);
        int int47 = org.apache.commons.io.IOUtils.read(inputStream44, byteArray45);
        byte[] byteArray48 = org.apache.commons.io.IOUtils.toByteArray(inputStream44);
        byte[] byteArray50 = org.apache.commons.io.IOUtils.toByteArray(inputStream44, (int) (short) 0);
        java.io.BufferedInputStream bufferedInputStream51 = org.apache.commons.io.IOUtils.buffer(inputStream44);
        byte[] byteArray52 = org.apache.commons.io.IOUtils.toByteArray((java.io.InputStream) bufferedInputStream51);
        org.apache.commons.io.IOUtils.readFully(inputStream17, byteArray52);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean54 = org.apache.commons.io.IOUtils.contentEquals((java.io.InputStream) bufferedInputStream10, inputStream17);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Stream closed");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream10);
        org.junit.Assert.assertNotNull(lineIterator14);
        org.junit.Assert.assertNotNull(inputStream17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(inputStream27);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNotNull(inputStream37);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(inputStream44);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream51);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[]");
    }

    @Test
    public void test1173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1173");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream5 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray("");
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray10);
        long long12 = org.apache.commons.io.IOUtils.copyLarge(inputStream4, outputStream5, 0L, 0L, byteArray10);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, byteArray10);
        java.io.BufferedInputStream bufferedInputStream15 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer16 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer16);
        byte[] byteArray23 = new byte[] { (byte) 10, (byte) 1, (byte) 0, (byte) 100, (byte) 0 };
        int int24 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray23);
        java.lang.Class<?> wildcardClass25 = byteArray23.getClass();
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream15);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[10, 1, 0, 100, 0]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test1174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1174");
        java.io.Reader reader0 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long2 = org.apache.commons.io.IOUtils.skip(reader0, (long) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[], int, int)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1175");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.nio.charset.Charset charset6 = null;
        java.util.List<java.lang.String> strList7 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset6);
        java.nio.charset.Charset charset8 = null;
        org.apache.commons.io.LineIterator lineIterator9 = org.apache.commons.io.IOUtils.lineIterator(inputStream1, charset8);
        java.io.InputStream inputStream11 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, 6);
        java.io.InputStream inputStream13 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray14 = new byte[] {};
        int int15 = org.apache.commons.io.IOUtils.length(byteArray14);
        int int16 = org.apache.commons.io.IOUtils.read(inputStream13, byteArray14);
        byte[] byteArray17 = org.apache.commons.io.IOUtils.toByteArray(inputStream13);
        byte[] byteArray18 = org.apache.commons.io.IOUtils.toByteArray(inputStream13);
        int int21 = org.apache.commons.io.IOUtils.read(inputStream11, byteArray18, (int) '#', 0);
        java.io.Writer writer22 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(byteArray18, writer22, "");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertNotNull(lineIterator9);
        org.junit.Assert.assertNotNull(inputStream11);
        org.junit.Assert.assertNotNull(inputStream13);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
    }

    @Test
    public void test1176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1176");
        java.io.Reader reader0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.BufferedReader bufferedReader2 = org.apache.commons.io.IOUtils.toBufferedReader(reader0, 2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1177");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream5 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray("");
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray10);
        long long12 = org.apache.commons.io.IOUtils.copyLarge(inputStream4, outputStream5, 0L, 0L, byteArray10);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, byteArray10);
        java.io.BufferedInputStream bufferedInputStream15 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.io.InputStream inputStream17 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray18 = org.apache.commons.io.IOUtils.toByteArray(inputStream17);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream17);
        java.io.InputStream inputStream21 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream22 = null;
        java.io.InputStream inputStream25 = null;
        byte[] byteArray27 = org.apache.commons.io.IOUtils.toByteArray("");
        int int28 = org.apache.commons.io.IOUtils.read(inputStream25, byteArray27);
        long long29 = org.apache.commons.io.IOUtils.copyLarge(inputStream21, outputStream22, 0L, 0L, byteArray27);
        java.nio.charset.Charset charset30 = null;
        java.util.List<java.lang.String> strList31 = org.apache.commons.io.IOUtils.readLines(inputStream21, charset30);
        java.io.InputStream inputStream33 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream34 = null;
        java.io.InputStream inputStream37 = null;
        byte[] byteArray39 = org.apache.commons.io.IOUtils.toByteArray("");
        int int40 = org.apache.commons.io.IOUtils.read(inputStream37, byteArray39);
        long long41 = org.apache.commons.io.IOUtils.copyLarge(inputStream33, outputStream34, 0L, 0L, byteArray39);
        java.nio.charset.Charset charset42 = null;
        java.util.List<java.lang.String> strList43 = org.apache.commons.io.IOUtils.readLines(inputStream33, charset42);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream33);
        boolean boolean45 = org.apache.commons.io.IOUtils.contentEquals(inputStream21, inputStream33);
        java.io.OutputStream outputStream46 = null;
        java.io.InputStream inputStream48 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream49 = null;
        java.io.InputStream inputStream52 = null;
        byte[] byteArray54 = org.apache.commons.io.IOUtils.toByteArray("");
        int int55 = org.apache.commons.io.IOUtils.read(inputStream52, byteArray54);
        long long56 = org.apache.commons.io.IOUtils.copyLarge(inputStream48, outputStream49, 0L, 0L, byteArray54);
        long long57 = org.apache.commons.io.IOUtils.copyLarge(inputStream33, outputStream46, byteArray54);
        org.apache.commons.io.IOUtils.readFully(inputStream17, byteArray54);
        org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray54);
        java.lang.String str60 = org.apache.commons.io.IOUtils.toString(inputStream1);
        java.io.BufferedInputStream bufferedInputStream62 = org.apache.commons.io.IOUtils.buffer(inputStream1, 100);
        java.io.OutputStream outputStream63 = null;
        java.io.InputStream inputStream66 = null;
        byte[] byteArray68 = org.apache.commons.io.IOUtils.toByteArray("");
        int int69 = org.apache.commons.io.IOUtils.read(inputStream66, byteArray68);
        java.lang.String str70 = org.apache.commons.io.IOUtils.toString(byteArray68);
        long long71 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream63, (-1L), (long) (short) -1, byteArray68);
        java.io.InputStream inputStream72 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1);
        java.io.OutputStream outputStream73 = null;
        long long75 = org.apache.commons.io.IOUtils.copy(inputStream72, outputStream73, 2);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream15);
        org.junit.Assert.assertNotNull(inputStream17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(inputStream21);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNotNull(strList31);
        org.junit.Assert.assertNotNull(inputStream33);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertNotNull(strList43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(inputStream48);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(bufferedInputStream62);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 0L + "'", long71 == 0L);
        org.junit.Assert.assertNotNull(inputStream72);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 0L + "'", long75 == 0L);
    }

    @Test
    public void test1178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1178");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.BufferedInputStream bufferedInputStream10 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.io.InputStream inputStream12 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, (int) (byte) 1);
        java.io.OutputStream outputStream13 = null;
        int int14 = org.apache.commons.io.IOUtils.copy(inputStream12, outputStream13);
        java.io.BufferedInputStream bufferedInputStream16 = org.apache.commons.io.IOUtils.buffer(inputStream12, (int) (byte) 10);
        byte[] byteArray18 = org.apache.commons.io.IOUtils.toByteArray(inputStream12, 0);
        java.io.BufferedInputStream bufferedInputStream19 = org.apache.commons.io.IOUtils.buffer(inputStream12);
        java.io.InputStream inputStream21 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream22 = null;
        java.io.InputStream inputStream24 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream25 = null;
        java.io.InputStream inputStream28 = null;
        byte[] byteArray30 = org.apache.commons.io.IOUtils.toByteArray("");
        int int31 = org.apache.commons.io.IOUtils.read(inputStream28, byteArray30);
        long long32 = org.apache.commons.io.IOUtils.copyLarge(inputStream24, outputStream25, 0L, 0L, byteArray30);
        long long33 = org.apache.commons.io.IOUtils.copyLarge(inputStream21, outputStream22, byteArray30);
        java.io.BufferedInputStream bufferedInputStream35 = org.apache.commons.io.IOUtils.buffer(inputStream21, (int) (byte) 10);
        java.io.InputStream inputStream37 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray38 = org.apache.commons.io.IOUtils.toByteArray(inputStream37);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream37);
        java.io.InputStream inputStream41 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream42 = null;
        java.io.InputStream inputStream45 = null;
        byte[] byteArray47 = org.apache.commons.io.IOUtils.toByteArray("");
        int int48 = org.apache.commons.io.IOUtils.read(inputStream45, byteArray47);
        long long49 = org.apache.commons.io.IOUtils.copyLarge(inputStream41, outputStream42, 0L, 0L, byteArray47);
        java.nio.charset.Charset charset50 = null;
        java.util.List<java.lang.String> strList51 = org.apache.commons.io.IOUtils.readLines(inputStream41, charset50);
        java.io.InputStream inputStream53 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream54 = null;
        java.io.InputStream inputStream57 = null;
        byte[] byteArray59 = org.apache.commons.io.IOUtils.toByteArray("");
        int int60 = org.apache.commons.io.IOUtils.read(inputStream57, byteArray59);
        long long61 = org.apache.commons.io.IOUtils.copyLarge(inputStream53, outputStream54, 0L, 0L, byteArray59);
        java.nio.charset.Charset charset62 = null;
        java.util.List<java.lang.String> strList63 = org.apache.commons.io.IOUtils.readLines(inputStream53, charset62);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream53);
        boolean boolean65 = org.apache.commons.io.IOUtils.contentEquals(inputStream41, inputStream53);
        java.io.OutputStream outputStream66 = null;
        java.io.InputStream inputStream68 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream69 = null;
        java.io.InputStream inputStream72 = null;
        byte[] byteArray74 = org.apache.commons.io.IOUtils.toByteArray("");
        int int75 = org.apache.commons.io.IOUtils.read(inputStream72, byteArray74);
        long long76 = org.apache.commons.io.IOUtils.copyLarge(inputStream68, outputStream69, 0L, 0L, byteArray74);
        long long77 = org.apache.commons.io.IOUtils.copyLarge(inputStream53, outputStream66, byteArray74);
        org.apache.commons.io.IOUtils.readFully(inputStream37, byteArray74);
        org.apache.commons.io.IOUtils.readFully(inputStream21, byteArray74);
        java.lang.String str80 = org.apache.commons.io.IOUtils.toString(byteArray74);
        org.apache.commons.io.IOUtils.readFully(inputStream12, byteArray74);
        java.io.Writer writer82 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.copy(inputStream12, writer82, "\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ?");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream10);
        org.junit.Assert.assertNotNull(inputStream12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(bufferedInputStream16);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream19);
        org.junit.Assert.assertNotNull(inputStream21);
        org.junit.Assert.assertNotNull(inputStream24);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream35);
        org.junit.Assert.assertNotNull(inputStream37);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertNotNull(inputStream41);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertNotNull(strList51);
        org.junit.Assert.assertNotNull(inputStream53);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
        org.junit.Assert.assertNotNull(strList63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(inputStream68);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 0L + "'", long76 == 0L);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 0L + "'", long77 == 0L);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
    }

    @Test
    public void test1179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1179");
        java.io.Reader reader0 = null;
        java.io.Writer writer1 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long4 = org.apache.commons.io.IOUtils.copyLarge(reader0, writer1, (long) (byte) -1, (long) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[], int, int)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1180");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        java.io.BufferedInputStream bufferedInputStream10 = org.apache.commons.io.IOUtils.buffer(inputStream1);
        byte[] byteArray11 = org.apache.commons.io.IOUtils.toByteArray((java.io.InputStream) bufferedInputStream10);
        java.io.Writer writer12 = null;
        java.nio.charset.Charset charset13 = null;
        org.apache.commons.io.IOUtils.copy((java.io.InputStream) bufferedInputStream10, writer12, charset13);
        java.io.InputStream inputStream16 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray17 = new byte[] {};
        int int18 = org.apache.commons.io.IOUtils.length(byteArray17);
        int int19 = org.apache.commons.io.IOUtils.read(inputStream16, byteArray17);
        byte[] byteArray20 = org.apache.commons.io.IOUtils.toByteArray(inputStream16);
        byte[] byteArray22 = org.apache.commons.io.IOUtils.toByteArray(inputStream16, (int) (short) 0);
        byte[] byteArray23 = new byte[] {};
        int int24 = org.apache.commons.io.IOUtils.length(byteArray23);
        org.apache.commons.io.IOUtils.readFully(inputStream16, byteArray23);
        int int28 = org.apache.commons.io.IOUtils.read((java.io.InputStream) bufferedInputStream10, byteArray23, (int) (short) 1, (int) (short) 0);
        java.io.Writer writer29 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(byteArray23, writer29, "hi!");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: hi!");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream10);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(inputStream16);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
    }

    @Test
    public void test1181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1181");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.util.List<java.lang.String> strList4 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.OutputStream outputStream5 = null;
        long long6 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream5);
        java.io.Writer writer7 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer7);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream11 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray12 = new byte[] {};
        int int13 = org.apache.commons.io.IOUtils.length(byteArray12);
        int int14 = org.apache.commons.io.IOUtils.read(inputStream11, byteArray12);
        byte[] byteArray15 = org.apache.commons.io.IOUtils.toByteArray(inputStream11);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer16 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream11, iOExceptionConsumer16);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream11);
        java.io.BufferedInputStream bufferedInputStream20 = org.apache.commons.io.IOUtils.buffer(inputStream11, (int) (byte) 10);
        java.io.InputStream inputStream22 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream11, (int) (byte) 1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer23 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream11, iOExceptionConsumer23);
        java.io.OutputStream outputStream25 = null;
        java.io.InputStream inputStream27 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray28 = new byte[] {};
        int int29 = org.apache.commons.io.IOUtils.length(byteArray28);
        int int30 = org.apache.commons.io.IOUtils.read(inputStream27, byteArray28);
        byte[] byteArray31 = org.apache.commons.io.IOUtils.toByteArray(inputStream27);
        java.io.InputStream inputStream33 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray34 = new byte[] {};
        int int35 = org.apache.commons.io.IOUtils.length(byteArray34);
        int int36 = org.apache.commons.io.IOUtils.read(inputStream33, byteArray34);
        byte[] byteArray37 = org.apache.commons.io.IOUtils.toByteArray(inputStream33);
        int int38 = org.apache.commons.io.IOUtils.length(byteArray37);
        org.apache.commons.io.IOUtils.readFully(inputStream27, byteArray37);
        long long40 = org.apache.commons.io.IOUtils.copyLarge(inputStream11, outputStream25, byteArray37);
        boolean boolean41 = org.apache.commons.io.IOUtils.contentEquals(inputStream1, inputStream11);
        java.io.BufferedInputStream bufferedInputStream43 = org.apache.commons.io.IOUtils.buffer(inputStream1, 5);
        java.io.InputStream inputStream45 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream46 = null;
        java.io.InputStream inputStream49 = null;
        byte[] byteArray51 = org.apache.commons.io.IOUtils.toByteArray("");
        int int52 = org.apache.commons.io.IOUtils.read(inputStream49, byteArray51);
        long long53 = org.apache.commons.io.IOUtils.copyLarge(inputStream45, outputStream46, 0L, 0L, byteArray51);
        java.nio.charset.Charset charset54 = null;
        java.util.List<java.lang.String> strList55 = org.apache.commons.io.IOUtils.readLines(inputStream45, charset54);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream45);
        java.nio.charset.Charset charset57 = null;
        java.lang.String str58 = org.apache.commons.io.IOUtils.toString(inputStream45, charset57);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer59 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream45, iOExceptionConsumer59);
        boolean boolean61 = org.apache.commons.io.IOUtils.contentEquals((java.io.InputStream) bufferedInputStream43, inputStream45);
        byte[] byteArray63 = org.apache.commons.io.IOUtils.toByteArray(inputStream45, 0);
        java.io.InputStream inputStream65 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray66 = new byte[] {};
        int int67 = org.apache.commons.io.IOUtils.length(byteArray66);
        int int68 = org.apache.commons.io.IOUtils.read(inputStream65, byteArray66);
        byte[] byteArray69 = org.apache.commons.io.IOUtils.toByteArray(inputStream65);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer70 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream65, iOExceptionConsumer70);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream65);
        java.io.BufferedInputStream bufferedInputStream74 = org.apache.commons.io.IOUtils.buffer(inputStream65, (int) (byte) 10);
        java.io.InputStream inputStream76 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream65, (int) (byte) 1);
        java.nio.charset.Charset charset77 = null;
        org.apache.commons.io.LineIterator lineIterator78 = org.apache.commons.io.IOUtils.lineIterator(inputStream65, charset77);
        boolean boolean79 = org.apache.commons.io.IOUtils.contentEquals(inputStream45, inputStream65);
        java.lang.String str80 = org.apache.commons.io.IOUtils.toString(inputStream65);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(inputStream11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream20);
        org.junit.Assert.assertNotNull(inputStream22);
        org.junit.Assert.assertNotNull(inputStream27);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(inputStream33);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(bufferedInputStream43);
        org.junit.Assert.assertNotNull(inputStream45);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertNotNull(strList55);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[]");
        org.junit.Assert.assertNotNull(inputStream65);
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream74);
        org.junit.Assert.assertNotNull(inputStream76);
        org.junit.Assert.assertNotNull(lineIterator78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
    }

    @Test
    public void test1182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1182");
        java.io.Reader reader0 = null;
        java.io.Writer writer1 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long4 = org.apache.commons.io.IOUtils.copyLarge(reader0, writer1, (long) (byte) 1, (long) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[], int, int)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1183");
        java.io.Reader reader0 = null;
        java.io.Reader reader1 = null;
        java.io.Reader reader2 = null;
        java.io.Writer writer3 = null;
        char[] charArray6 = new char[] {};
        int int7 = org.apache.commons.io.IOUtils.length(charArray6);
        java.io.Writer writer8 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray6, writer8);
        java.io.Writer writer10 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray6, writer10);
        long long12 = org.apache.commons.io.IOUtils.copyLarge(reader2, writer3, 0L, (long) (byte) 100, charArray6);
        int int13 = org.apache.commons.io.IOUtils.read(reader1, charArray6);
        java.io.Writer writer14 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray6, writer14);
        // The following exception was thrown during execution in test generation
        try {
            int int18 = org.apache.commons.io.IOUtils.read(reader0, charArray6, (-1), 6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[], int, int)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test1184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1184");
        java.nio.channels.ReadableByteChannel readableByteChannel0 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long2 = org.apache.commons.io.IOUtils.skip(readableByteChannel0, (long) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.nio.channels.ReadableByteChannel.read(java.nio.ByteBuffer)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1185");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        byte[] byteArray6 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        org.apache.commons.io.IOUtils.skipFully(inputStream1, (long) (byte) 0);
        java.io.OutputStream outputStream9 = null;
        long long11 = org.apache.commons.io.IOUtils.copy(inputStream1, outputStream9, 100);
        java.lang.Class<?> wildcardClass12 = inputStream1.getClass();
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test1186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1186");
        java.io.InputStream inputStream0 = null;
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream0, (long) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.InputStream.read(byte[], int, int)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1187");
        java.io.Reader reader0 = null;
        java.io.Writer writer1 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long4 = org.apache.commons.io.IOUtils.copyLarge(reader0, writer1, (long) (byte) 10, (long) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[], int, int)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1188");
        java.io.Reader reader0 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long2 = org.apache.commons.io.IOUtils.skip(reader0, (long) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[], int, int)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1189");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.BufferedInputStream bufferedInputStream10 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.io.InputStream inputStream12 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, (int) (byte) 1);
        java.nio.charset.Charset charset13 = null;
        char[] charArray14 = org.apache.commons.io.IOUtils.toCharArray(inputStream1, charset13);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str16 = org.apache.commons.io.IOUtils.toString(inputStream1, "");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream10);
        org.junit.Assert.assertNotNull(inputStream12);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[]");
    }

    @Test
    public void test1190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1190");
        java.io.Reader reader0 = null;
        java.io.Writer writer1 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long4 = org.apache.commons.io.IOUtils.copyLarge(reader0, writer1, (long) (byte) 1, (long) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[], int, int)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1191");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        java.io.OutputStream outputStream10 = null;
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream10, (long) (short) 0, (-1L));
        java.lang.String str14 = org.apache.commons.io.IOUtils.toString(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly(inputStream1);
        org.apache.commons.io.function.IOConsumer<java.io.IOException> iOExceptionIOConsumer16 = null;
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1, iOExceptionIOConsumer16);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.io.OutputStream outputStream19 = null;
        long long21 = org.apache.commons.io.IOUtils.copy(inputStream1, outputStream19, 10);
        java.io.OutputStream outputStream22 = null;
        java.nio.charset.Charset charset26 = null;
        java.io.InputStream inputStream27 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "", charset26);
        java.util.List<java.lang.String> strList28 = org.apache.commons.io.IOUtils.readLines(inputStream27);
        java.io.InputStream inputStream30 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray31 = new byte[] {};
        int int32 = org.apache.commons.io.IOUtils.length(byteArray31);
        int int33 = org.apache.commons.io.IOUtils.read(inputStream30, byteArray31);
        byte[] byteArray34 = org.apache.commons.io.IOUtils.toByteArray(inputStream30);
        int int35 = org.apache.commons.io.IOUtils.length(byteArray34);
        org.apache.commons.io.IOUtils.readFully(inputStream27, byteArray34);
        // The following exception was thrown during execution in test generation
        try {
            long long37 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream22, (long) 6, (long) (byte) 100, byteArray34);
            org.junit.Assert.fail("Expected exception of type java.io.EOFException; message: Bytes to skip: 6 actual: 0");
        } catch (java.io.EOFException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(inputStream27);
        org.junit.Assert.assertNotNull(strList28);
        org.junit.Assert.assertNotNull(inputStream30);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
    }

    @Test
    public void test1192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1192");
        java.lang.CharSequence charSequence0 = null;
        int int1 = org.apache.commons.io.IOUtils.length(charSequence0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
    }

    @Test
    public void test1193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1193");
        java.io.OutputStream outputStream1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write((java.lang.CharSequence) "\n", outputStream1, "\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ?");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1194");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray5 = new byte[] {};
        int int6 = org.apache.commons.io.IOUtils.length(byteArray5);
        int int7 = org.apache.commons.io.IOUtils.read(inputStream4, byteArray5);
        byte[] byteArray8 = org.apache.commons.io.IOUtils.toByteArray(inputStream4);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer9 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream4, iOExceptionConsumer9);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream4);
        java.io.BufferedInputStream bufferedInputStream13 = org.apache.commons.io.IOUtils.buffer(inputStream4, (int) (byte) 10);
        boolean boolean14 = org.apache.commons.io.IOUtils.contentEquals(inputStream1, inputStream4);
        java.lang.Class<?> wildcardClass15 = inputStream4.getClass();
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test1195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1195");
        java.io.Reader reader0 = null;
        java.io.Writer writer1 = null;
        java.io.InputStream inputStream5 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray6 = org.apache.commons.io.IOUtils.toByteArray(inputStream5);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream5);
        java.util.List<java.lang.String> strList8 = org.apache.commons.io.IOUtils.readLines(inputStream5);
        java.io.OutputStream outputStream9 = null;
        long long10 = org.apache.commons.io.IOUtils.copyLarge(inputStream5, outputStream9);
        java.io.Writer writer11 = null;
        org.apache.commons.io.IOUtils.copy(inputStream5, writer11);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream5);
        java.io.InputStream inputStream15 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray16 = new byte[] {};
        int int17 = org.apache.commons.io.IOUtils.length(byteArray16);
        int int18 = org.apache.commons.io.IOUtils.read(inputStream15, byteArray16);
        byte[] byteArray19 = org.apache.commons.io.IOUtils.toByteArray(inputStream15);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer20 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream15, iOExceptionConsumer20);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream15);
        java.io.BufferedInputStream bufferedInputStream24 = org.apache.commons.io.IOUtils.buffer(inputStream15, (int) (byte) 10);
        java.io.InputStream inputStream26 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream15, (int) (byte) 1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer27 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream15, iOExceptionConsumer27);
        java.io.OutputStream outputStream29 = null;
        java.io.InputStream inputStream31 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray32 = new byte[] {};
        int int33 = org.apache.commons.io.IOUtils.length(byteArray32);
        int int34 = org.apache.commons.io.IOUtils.read(inputStream31, byteArray32);
        byte[] byteArray35 = org.apache.commons.io.IOUtils.toByteArray(inputStream31);
        java.io.InputStream inputStream37 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray38 = new byte[] {};
        int int39 = org.apache.commons.io.IOUtils.length(byteArray38);
        int int40 = org.apache.commons.io.IOUtils.read(inputStream37, byteArray38);
        byte[] byteArray41 = org.apache.commons.io.IOUtils.toByteArray(inputStream37);
        int int42 = org.apache.commons.io.IOUtils.length(byteArray41);
        org.apache.commons.io.IOUtils.readFully(inputStream31, byteArray41);
        long long44 = org.apache.commons.io.IOUtils.copyLarge(inputStream15, outputStream29, byteArray41);
        boolean boolean45 = org.apache.commons.io.IOUtils.contentEquals(inputStream5, inputStream15);
        java.io.BufferedInputStream bufferedInputStream47 = org.apache.commons.io.IOUtils.buffer(inputStream5, 5);
        java.io.InputStream inputStream49 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream50 = null;
        java.io.InputStream inputStream53 = null;
        byte[] byteArray55 = org.apache.commons.io.IOUtils.toByteArray("");
        int int56 = org.apache.commons.io.IOUtils.read(inputStream53, byteArray55);
        long long57 = org.apache.commons.io.IOUtils.copyLarge(inputStream49, outputStream50, 0L, 0L, byteArray55);
        java.nio.charset.Charset charset58 = null;
        java.util.List<java.lang.String> strList59 = org.apache.commons.io.IOUtils.readLines(inputStream49, charset58);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream49);
        java.nio.charset.Charset charset61 = null;
        java.lang.String str62 = org.apache.commons.io.IOUtils.toString(inputStream49, charset61);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer63 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream49, iOExceptionConsumer63);
        boolean boolean65 = org.apache.commons.io.IOUtils.contentEquals((java.io.InputStream) bufferedInputStream47, inputStream49);
        byte[] byteArray67 = org.apache.commons.io.IOUtils.toByteArray(inputStream49, 0);
        java.nio.charset.Charset charset68 = null;
        char[] charArray69 = org.apache.commons.io.IOUtils.toCharArray(inputStream49, charset68);
        // The following exception was thrown during execution in test generation
        try {
            long long70 = org.apache.commons.io.IOUtils.copyLarge(reader0, writer1, (long) (short) 100, (long) 100, charArray69);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[], int, int)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(inputStream15);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream24);
        org.junit.Assert.assertNotNull(inputStream26);
        org.junit.Assert.assertNotNull(inputStream31);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(inputStream37);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(bufferedInputStream47);
        org.junit.Assert.assertNotNull(inputStream49);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertNotNull(strList59);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[]");
        org.junit.Assert.assertNotNull(charArray69);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray69), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray69), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray69), "[]");
    }

    @Test
    public void test1196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1196");
        java.io.Reader reader0 = null;
        java.io.Writer writer1 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long4 = org.apache.commons.io.IOUtils.copyLarge(reader0, writer1, 10L, (long) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[], int, int)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1197");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        java.nio.charset.Charset charset10 = null;
        java.util.List<java.lang.String> strList11 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset10);
        java.nio.charset.Charset charset12 = null;
        char[] charArray13 = org.apache.commons.io.IOUtils.toCharArray(inputStream1, charset12);
        java.io.OutputStream outputStream14 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(charArray13, outputStream14, "");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[]");
    }

    @Test
    public void test1198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1198");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.util.List<java.lang.String> strList4 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.OutputStream outputStream5 = null;
        long long6 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream5);
        java.io.Writer writer7 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer7);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream10 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(inputStream10);
    }

    @Test
    public void test1199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1199");
        java.io.Reader reader0 = null;
        java.io.Writer writer1 = null;
        java.io.InputStream inputStream5 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray6 = new byte[] {};
        int int7 = org.apache.commons.io.IOUtils.length(byteArray6);
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray6);
        byte[] byteArray9 = org.apache.commons.io.IOUtils.toByteArray(inputStream5);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer10 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream5, iOExceptionConsumer10);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream5);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer13 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream5, iOExceptionConsumer13);
        java.nio.charset.Charset charset15 = null;
        char[] charArray16 = org.apache.commons.io.IOUtils.toCharArray(inputStream5, charset15);
        // The following exception was thrown during execution in test generation
        try {
            long long17 = org.apache.commons.io.IOUtils.copyLarge(reader0, writer1, (long) 4, (long) ' ', charArray16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[], int, int)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(charArray16);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray16), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray16), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray16), "[]");
    }

    @Test
    public void test1200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1200");
        java.io.Reader reader0 = null;
        java.io.Reader reader1 = null;
        char[] charArray2 = new char[] {};
        int int3 = org.apache.commons.io.IOUtils.length(charArray2);
        int int4 = org.apache.commons.io.IOUtils.read(reader1, charArray2);
        int int5 = org.apache.commons.io.IOUtils.length(charArray2);
        int int6 = org.apache.commons.io.IOUtils.read(reader0, charArray2);
        java.io.OutputStream outputStream7 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(charArray2, outputStream7, "\r\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ??");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray2), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray2), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test1201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1201");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        java.io.InputStream inputStream6 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray7 = new byte[] {};
        int int8 = org.apache.commons.io.IOUtils.length(byteArray7);
        int int9 = org.apache.commons.io.IOUtils.read(inputStream6, byteArray7);
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray(inputStream6);
        byte[] byteArray12 = org.apache.commons.io.IOUtils.toByteArray(inputStream6, (int) (short) 0);
        int int13 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray12);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.skipFully(inputStream1, (long) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.io.EOFException; message: Bytes to skip: 10 actual: 0");
        } catch (java.io.EOFException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(inputStream6);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test1202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1202");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream5 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray("");
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray10);
        long long12 = org.apache.commons.io.IOUtils.copyLarge(inputStream4, outputStream5, 0L, 0L, byteArray10);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, byteArray10);
        java.io.BufferedInputStream bufferedInputStream15 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        org.apache.commons.io.IOUtils.closeQuietly(inputStream1);
        java.io.InputStream inputStream18 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray19 = new byte[] {};
        int int20 = org.apache.commons.io.IOUtils.length(byteArray19);
        int int21 = org.apache.commons.io.IOUtils.read(inputStream18, byteArray19);
        byte[] byteArray22 = org.apache.commons.io.IOUtils.toByteArray(inputStream18);
        byte[] byteArray24 = org.apache.commons.io.IOUtils.toByteArray(inputStream18, (int) (short) 0);
        long long26 = org.apache.commons.io.IOUtils.skip(inputStream18, 100L);
        java.io.InputStream inputStream28 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray29 = new byte[] {};
        int int30 = org.apache.commons.io.IOUtils.length(byteArray29);
        int int31 = org.apache.commons.io.IOUtils.read(inputStream28, byteArray29);
        byte[] byteArray32 = org.apache.commons.io.IOUtils.toByteArray(inputStream28);
        byte[] byteArray34 = org.apache.commons.io.IOUtils.toByteArray(inputStream28, (int) (short) 0);
        org.apache.commons.io.IOUtils.readFully(inputStream18, byteArray34);
        org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray34);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str38 = org.apache.commons.io.IOUtils.toString(byteArray34, "\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ?");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream15);
        org.junit.Assert.assertNotNull(inputStream18);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(inputStream28);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
    }

    @Test
    public void test1203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1203");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.BufferedInputStream bufferedInputStream10 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        org.apache.commons.io.function.IOConsumer<java.io.IOException> iOExceptionIOConsumer11 = null;
        org.apache.commons.io.IOUtils.close((java.io.Closeable) bufferedInputStream10, iOExceptionIOConsumer11);
        java.nio.charset.Charset charset13 = null;
        org.apache.commons.io.LineIterator lineIterator14 = org.apache.commons.io.IOUtils.lineIterator((java.io.InputStream) bufferedInputStream10, charset13);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) bufferedInputStream10);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) bufferedInputStream10);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream10);
        org.junit.Assert.assertNotNull(lineIterator14);
    }

    @Test
    public void test1204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1204");
        java.nio.channels.ReadableByteChannel readableByteChannel0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.skipFully(readableByteChannel0, (long) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.nio.channels.ReadableByteChannel.read(java.nio.ByteBuffer)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1205");
        java.io.Reader reader0 = null;
        java.io.InputStream inputStream2 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray3 = org.apache.commons.io.IOUtils.toByteArray(inputStream2);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream2);
        java.util.List<java.lang.String> strList5 = org.apache.commons.io.IOUtils.readLines(inputStream2);
        java.io.OutputStream outputStream6 = null;
        long long7 = org.apache.commons.io.IOUtils.copyLarge(inputStream2, outputStream6);
        java.io.Writer writer8 = null;
        org.apache.commons.io.IOUtils.copy(inputStream2, writer8);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream2);
        java.io.InputStream inputStream12 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray13 = new byte[] {};
        int int14 = org.apache.commons.io.IOUtils.length(byteArray13);
        int int15 = org.apache.commons.io.IOUtils.read(inputStream12, byteArray13);
        byte[] byteArray16 = org.apache.commons.io.IOUtils.toByteArray(inputStream12);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer17 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream12, iOExceptionConsumer17);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream12);
        java.io.BufferedInputStream bufferedInputStream21 = org.apache.commons.io.IOUtils.buffer(inputStream12, (int) (byte) 10);
        java.io.InputStream inputStream23 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream12, (int) (byte) 1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer24 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream12, iOExceptionConsumer24);
        java.io.OutputStream outputStream26 = null;
        java.io.InputStream inputStream28 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray29 = new byte[] {};
        int int30 = org.apache.commons.io.IOUtils.length(byteArray29);
        int int31 = org.apache.commons.io.IOUtils.read(inputStream28, byteArray29);
        byte[] byteArray32 = org.apache.commons.io.IOUtils.toByteArray(inputStream28);
        java.io.InputStream inputStream34 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray35 = new byte[] {};
        int int36 = org.apache.commons.io.IOUtils.length(byteArray35);
        int int37 = org.apache.commons.io.IOUtils.read(inputStream34, byteArray35);
        byte[] byteArray38 = org.apache.commons.io.IOUtils.toByteArray(inputStream34);
        int int39 = org.apache.commons.io.IOUtils.length(byteArray38);
        org.apache.commons.io.IOUtils.readFully(inputStream28, byteArray38);
        long long41 = org.apache.commons.io.IOUtils.copyLarge(inputStream12, outputStream26, byteArray38);
        boolean boolean42 = org.apache.commons.io.IOUtils.contentEquals(inputStream2, inputStream12);
        java.io.BufferedInputStream bufferedInputStream44 = org.apache.commons.io.IOUtils.buffer(inputStream2, 5);
        java.io.InputStream inputStream46 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream47 = null;
        java.io.InputStream inputStream50 = null;
        byte[] byteArray52 = org.apache.commons.io.IOUtils.toByteArray("");
        int int53 = org.apache.commons.io.IOUtils.read(inputStream50, byteArray52);
        long long54 = org.apache.commons.io.IOUtils.copyLarge(inputStream46, outputStream47, 0L, 0L, byteArray52);
        java.nio.charset.Charset charset55 = null;
        java.util.List<java.lang.String> strList56 = org.apache.commons.io.IOUtils.readLines(inputStream46, charset55);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream46);
        java.nio.charset.Charset charset58 = null;
        java.lang.String str59 = org.apache.commons.io.IOUtils.toString(inputStream46, charset58);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer60 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream46, iOExceptionConsumer60);
        boolean boolean62 = org.apache.commons.io.IOUtils.contentEquals((java.io.InputStream) bufferedInputStream44, inputStream46);
        byte[] byteArray64 = org.apache.commons.io.IOUtils.toByteArray(inputStream46, 0);
        java.nio.charset.Charset charset65 = null;
        char[] charArray66 = org.apache.commons.io.IOUtils.toCharArray(inputStream46, charset65);
        org.apache.commons.io.IOUtils.readFully(reader0, charArray66);
        java.io.OutputStream outputStream68 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(charArray66, outputStream68, "\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ?");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertNotNull(strList5);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(inputStream12);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream21);
        org.junit.Assert.assertNotNull(inputStream23);
        org.junit.Assert.assertNotNull(inputStream28);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertNotNull(inputStream34);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(bufferedInputStream44);
        org.junit.Assert.assertNotNull(inputStream46);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertNotNull(strList56);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[]");
        org.junit.Assert.assertNotNull(charArray66);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray66), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray66), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray66), "[]");
    }

    @Test
    public void test1206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1206");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream5 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray("");
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray10);
        long long12 = org.apache.commons.io.IOUtils.copyLarge(inputStream4, outputStream5, 0L, 0L, byteArray10);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, byteArray10);
        java.io.BufferedInputStream bufferedInputStream15 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        org.apache.commons.io.IOUtils.closeQuietly(inputStream1);
        java.nio.charset.Charset charset17 = null;
        java.util.List<java.lang.String> strList18 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset17);
        java.io.Writer writer20 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList18, "", writer20);
        java.io.OutputStream outputStream23 = null;
        java.nio.charset.Charset charset24 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList18, "hi!", outputStream23, charset24);
        java.io.OutputStream outputStream27 = null;
        java.nio.charset.Charset charset28 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList18, "\r\n", outputStream27, charset28);
        java.io.OutputStream outputStream31 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList18, "\n", outputStream31);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream15);
        org.junit.Assert.assertNotNull(strList18);
    }

    @Test
    public void test1207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1207");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        java.nio.charset.Charset charset10 = null;
        java.util.List<java.lang.String> strList11 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset10);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream14 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, (int) (byte) 0);
        java.nio.charset.Charset charset15 = null;
        java.lang.String str16 = org.apache.commons.io.IOUtils.toString(inputStream1, charset15);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertNotNull(inputStream14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
    }

    @Test
    public void test1208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1208");
        java.io.Reader reader0 = null;
        java.io.InputStream inputStream2 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray3 = org.apache.commons.io.IOUtils.toByteArray(inputStream2);
        java.io.InputStream inputStream5 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray6 = new byte[] {};
        int int7 = org.apache.commons.io.IOUtils.length(byteArray6);
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray6);
        byte[] byteArray9 = org.apache.commons.io.IOUtils.toByteArray(inputStream5);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer10 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream5, iOExceptionConsumer10);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream5);
        java.io.BufferedInputStream bufferedInputStream14 = org.apache.commons.io.IOUtils.buffer(inputStream5, (int) (byte) 10);
        boolean boolean15 = org.apache.commons.io.IOUtils.contentEquals(inputStream2, inputStream5);
        java.io.OutputStream outputStream16 = null;
        long long19 = org.apache.commons.io.IOUtils.copyLarge(inputStream2, outputStream16, (long) (short) 0, (long) 2);
        char[] charArray20 = org.apache.commons.io.IOUtils.toCharArray(inputStream2);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.readFully(reader0, charArray20, (int) '4', (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[], int, int)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertNotNull(inputStream5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray20), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray20), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray20), "[]");
    }

    @Test
    public void test1209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1209");
        java.io.Reader reader0 = null;
        java.io.Writer writer1 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long4 = org.apache.commons.io.IOUtils.copyLarge(reader0, writer1, (long) (byte) 0, (long) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[], int, int)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1210");
        java.io.Reader reader0 = null;
        java.io.Reader reader1 = null;
        java.io.Reader reader2 = null;
        java.io.Reader reader3 = null;
        java.io.Reader reader4 = null;
        java.io.Writer writer5 = null;
        char[] charArray8 = new char[] {};
        int int9 = org.apache.commons.io.IOUtils.length(charArray8);
        java.io.Writer writer10 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray8, writer10);
        java.io.Writer writer12 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray8, writer12);
        long long14 = org.apache.commons.io.IOUtils.copyLarge(reader4, writer5, 0L, (long) (byte) 100, charArray8);
        int int15 = org.apache.commons.io.IOUtils.read(reader3, charArray8);
        int int16 = org.apache.commons.io.IOUtils.length(charArray8);
        int int17 = org.apache.commons.io.IOUtils.read(reader2, charArray8);
        org.apache.commons.io.IOUtils.readFully(reader1, charArray8);
        org.apache.commons.io.IOUtils.readFully(reader0, charArray8);
        java.io.Writer writer20 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(charArray8, writer20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Writer.write(char[])\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test1211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1211");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.nio.charset.Charset charset4 = null;
        org.apache.commons.io.LineIterator lineIterator5 = org.apache.commons.io.IOUtils.lineIterator(inputStream1, charset4);
        java.nio.charset.Charset charset6 = null;
        java.util.List<java.lang.String> strList7 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset6);
        java.io.OutputStream outputStream8 = null;
        java.io.InputStream inputStream12 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray13 = new byte[] {};
        int int14 = org.apache.commons.io.IOUtils.length(byteArray13);
        int int15 = org.apache.commons.io.IOUtils.read(inputStream12, byteArray13);
        byte[] byteArray16 = org.apache.commons.io.IOUtils.toByteArray(inputStream12);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer17 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream12, iOExceptionConsumer17);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream12);
        java.io.BufferedInputStream bufferedInputStream21 = org.apache.commons.io.IOUtils.buffer(inputStream12, (int) (byte) 10);
        java.io.InputStream inputStream23 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream12, (int) (byte) 1);
        java.io.OutputStream outputStream24 = null;
        int int25 = org.apache.commons.io.IOUtils.copy(inputStream23, outputStream24);
        java.io.BufferedInputStream bufferedInputStream27 = org.apache.commons.io.IOUtils.buffer(inputStream23, (int) (byte) 10);
        char[] charArray28 = org.apache.commons.io.IOUtils.toCharArray((java.io.InputStream) bufferedInputStream27);
        java.io.InputStream inputStream30 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray31 = org.apache.commons.io.IOUtils.toByteArray(inputStream30);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream30);
        java.util.List<java.lang.String> strList33 = org.apache.commons.io.IOUtils.readLines(inputStream30);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer34 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream30, iOExceptionConsumer34);
        java.io.InputStream inputStream37 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray38 = org.apache.commons.io.IOUtils.toByteArray(inputStream37);
        int int39 = org.apache.commons.io.IOUtils.read(inputStream30, byteArray38);
        org.apache.commons.io.IOUtils.readFully((java.io.InputStream) bufferedInputStream27, byteArray38, (int) ' ', 0);
        // The following exception was thrown during execution in test generation
        try {
            long long43 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream8, (long) 10, 0L, byteArray38);
            org.junit.Assert.fail("Expected exception of type java.io.EOFException; message: Bytes to skip: 10 actual: 0");
        } catch (java.io.EOFException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(lineIterator5);
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertNotNull(inputStream12);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream21);
        org.junit.Assert.assertNotNull(inputStream23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(bufferedInputStream27);
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray28), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray28), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray28), "[]");
        org.junit.Assert.assertNotNull(inputStream30);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(strList33);
        org.junit.Assert.assertNotNull(inputStream37);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
    }

    @Test
    public void test1212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1212");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray(inputStream1, (int) (short) 0);
        long long9 = org.apache.commons.io.IOUtils.skip(inputStream1, 100L);
        java.io.InputStream inputStream10 = null;
        java.io.InputStream inputStream11 = null;
        java.io.OutputStream outputStream12 = null;
        byte[] byteArray15 = new byte[] {};
        int int16 = org.apache.commons.io.IOUtils.length(byteArray15);
        java.io.OutputStream outputStream17 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray15, outputStream17);
        long long19 = org.apache.commons.io.IOUtils.copyLarge(inputStream11, outputStream12, 0L, (long) (byte) -1, byteArray15);
        java.io.OutputStream outputStream20 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray15, outputStream20);
        org.apache.commons.io.IOUtils.readFully(inputStream10, byteArray15);
        int int23 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray15);
        java.io.InputStream inputStream24 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1);
        java.io.BufferedInputStream bufferedInputStream25 = org.apache.commons.io.IOUtils.buffer(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly(inputStream1);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray28 = org.apache.commons.io.IOUtils.toByteArray(inputStream1, 10);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Unexpected read size. current: 0, expected: 10");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(inputStream24);
        org.junit.Assert.assertNotNull(bufferedInputStream25);
    }

    @Test
    public void test1213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1213");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.util.List<java.lang.String> strList4 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.OutputStream outputStream5 = null;
        long long6 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream5);
        java.io.Writer writer7 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer7);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream11 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray12 = new byte[] {};
        int int13 = org.apache.commons.io.IOUtils.length(byteArray12);
        int int14 = org.apache.commons.io.IOUtils.read(inputStream11, byteArray12);
        byte[] byteArray15 = org.apache.commons.io.IOUtils.toByteArray(inputStream11);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer16 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream11, iOExceptionConsumer16);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream11);
        java.io.BufferedInputStream bufferedInputStream20 = org.apache.commons.io.IOUtils.buffer(inputStream11, (int) (byte) 10);
        java.io.InputStream inputStream22 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream11, (int) (byte) 1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer23 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream11, iOExceptionConsumer23);
        java.io.OutputStream outputStream25 = null;
        java.io.InputStream inputStream27 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray28 = new byte[] {};
        int int29 = org.apache.commons.io.IOUtils.length(byteArray28);
        int int30 = org.apache.commons.io.IOUtils.read(inputStream27, byteArray28);
        byte[] byteArray31 = org.apache.commons.io.IOUtils.toByteArray(inputStream27);
        java.io.InputStream inputStream33 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray34 = new byte[] {};
        int int35 = org.apache.commons.io.IOUtils.length(byteArray34);
        int int36 = org.apache.commons.io.IOUtils.read(inputStream33, byteArray34);
        byte[] byteArray37 = org.apache.commons.io.IOUtils.toByteArray(inputStream33);
        int int38 = org.apache.commons.io.IOUtils.length(byteArray37);
        org.apache.commons.io.IOUtils.readFully(inputStream27, byteArray37);
        long long40 = org.apache.commons.io.IOUtils.copyLarge(inputStream11, outputStream25, byteArray37);
        boolean boolean41 = org.apache.commons.io.IOUtils.contentEquals(inputStream1, inputStream11);
        java.io.BufferedInputStream bufferedInputStream42 = org.apache.commons.io.IOUtils.buffer(inputStream1);
        java.io.InputStream inputStream44 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray45 = org.apache.commons.io.IOUtils.toByteArray(inputStream44);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream44);
        java.io.InputStream inputStream48 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream49 = null;
        java.io.InputStream inputStream52 = null;
        byte[] byteArray54 = org.apache.commons.io.IOUtils.toByteArray("");
        int int55 = org.apache.commons.io.IOUtils.read(inputStream52, byteArray54);
        long long56 = org.apache.commons.io.IOUtils.copyLarge(inputStream48, outputStream49, 0L, 0L, byteArray54);
        java.nio.charset.Charset charset57 = null;
        java.util.List<java.lang.String> strList58 = org.apache.commons.io.IOUtils.readLines(inputStream48, charset57);
        java.io.InputStream inputStream60 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream61 = null;
        java.io.InputStream inputStream64 = null;
        byte[] byteArray66 = org.apache.commons.io.IOUtils.toByteArray("");
        int int67 = org.apache.commons.io.IOUtils.read(inputStream64, byteArray66);
        long long68 = org.apache.commons.io.IOUtils.copyLarge(inputStream60, outputStream61, 0L, 0L, byteArray66);
        java.nio.charset.Charset charset69 = null;
        java.util.List<java.lang.String> strList70 = org.apache.commons.io.IOUtils.readLines(inputStream60, charset69);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream60);
        boolean boolean72 = org.apache.commons.io.IOUtils.contentEquals(inputStream48, inputStream60);
        java.io.OutputStream outputStream73 = null;
        java.io.InputStream inputStream75 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream76 = null;
        java.io.InputStream inputStream79 = null;
        byte[] byteArray81 = org.apache.commons.io.IOUtils.toByteArray("");
        int int82 = org.apache.commons.io.IOUtils.read(inputStream79, byteArray81);
        long long83 = org.apache.commons.io.IOUtils.copyLarge(inputStream75, outputStream76, 0L, 0L, byteArray81);
        long long84 = org.apache.commons.io.IOUtils.copyLarge(inputStream60, outputStream73, byteArray81);
        org.apache.commons.io.IOUtils.readFully(inputStream44, byteArray81);
        java.io.OutputStream outputStream86 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray81, outputStream86);
        int int88 = org.apache.commons.io.IOUtils.length(byteArray81);
        int int89 = org.apache.commons.io.IOUtils.read((java.io.InputStream) bufferedInputStream42, byteArray81);
        int int90 = org.apache.commons.io.IOUtils.length(byteArray81);
        java.io.Writer writer91 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(byteArray81, writer91);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Writer.write(String)\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(inputStream11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream20);
        org.junit.Assert.assertNotNull(inputStream22);
        org.junit.Assert.assertNotNull(inputStream27);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(inputStream33);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(bufferedInputStream42);
        org.junit.Assert.assertNotNull(inputStream44);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
        org.junit.Assert.assertNotNull(inputStream48);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertNotNull(strList58);
        org.junit.Assert.assertNotNull(inputStream60);
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 0L + "'", long68 == 0L);
        org.junit.Assert.assertNotNull(strList70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(inputStream75);
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 0L + "'", long83 == 0L);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 0L + "'", long84 == 0L);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
    }

    @Test
    public void test1214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1214");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray(inputStream1, (int) (short) 0);
        java.io.BufferedInputStream bufferedInputStream8 = org.apache.commons.io.IOUtils.buffer(inputStream1);
        java.nio.charset.Charset charset9 = null;
        org.apache.commons.io.LineIterator lineIterator10 = org.apache.commons.io.IOUtils.lineIterator(inputStream1, charset9);
        java.io.InputStream inputStream12 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray13 = org.apache.commons.io.IOUtils.toByteArray(inputStream12);
        java.io.InputStream inputStream15 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray16 = new byte[] {};
        int int17 = org.apache.commons.io.IOUtils.length(byteArray16);
        int int18 = org.apache.commons.io.IOUtils.read(inputStream15, byteArray16);
        byte[] byteArray19 = org.apache.commons.io.IOUtils.toByteArray(inputStream15);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer20 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream15, iOExceptionConsumer20);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream15);
        java.io.BufferedInputStream bufferedInputStream24 = org.apache.commons.io.IOUtils.buffer(inputStream15, (int) (byte) 10);
        boolean boolean25 = org.apache.commons.io.IOUtils.contentEquals(inputStream12, inputStream15);
        java.io.InputStream inputStream27 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray28 = new byte[] {};
        int int29 = org.apache.commons.io.IOUtils.length(byteArray28);
        int int30 = org.apache.commons.io.IOUtils.read(inputStream27, byteArray28);
        byte[] byteArray31 = org.apache.commons.io.IOUtils.toByteArray(inputStream27);
        byte[] byteArray33 = org.apache.commons.io.IOUtils.toByteArray(inputStream27, (int) (short) 0);
        long long35 = org.apache.commons.io.IOUtils.skip(inputStream27, 100L);
        java.io.InputStream inputStream36 = null;
        java.io.InputStream inputStream37 = null;
        java.io.OutputStream outputStream38 = null;
        byte[] byteArray41 = new byte[] {};
        int int42 = org.apache.commons.io.IOUtils.length(byteArray41);
        java.io.OutputStream outputStream43 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray41, outputStream43);
        long long45 = org.apache.commons.io.IOUtils.copyLarge(inputStream37, outputStream38, 0L, (long) (byte) -1, byteArray41);
        java.io.OutputStream outputStream46 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray41, outputStream46);
        org.apache.commons.io.IOUtils.readFully(inputStream36, byteArray41);
        int int49 = org.apache.commons.io.IOUtils.read(inputStream27, byteArray41);
        int int50 = org.apache.commons.io.IOUtils.read(inputStream15, byteArray41);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray41, 5, (int) '/');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Range [5, 5 + 47) out of bounds for length 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream8);
        org.junit.Assert.assertNotNull(lineIterator10);
        org.junit.Assert.assertNotNull(inputStream12);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertNotNull(inputStream15);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(inputStream27);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
    }

    @Test
    public void test1215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1215");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        java.nio.charset.Charset charset5 = null;
        java.lang.String str6 = org.apache.commons.io.IOUtils.toString(inputStream1, charset5);
        java.io.InputStream inputStream8 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray9 = new byte[] {};
        int int10 = org.apache.commons.io.IOUtils.length(byteArray9);
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray9);
        java.io.InputStream inputStream12 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream8);
        byte[] byteArray13 = org.apache.commons.io.IOUtils.toByteArray(inputStream12);
        int int16 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray13, 6, 0);
        java.io.OutputStream outputStream17 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(byteArray13, outputStream17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.OutputStream.write(byte[])\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(inputStream8);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(inputStream12);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test1216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1216");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream5 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray("");
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray10);
        long long12 = org.apache.commons.io.IOUtils.copyLarge(inputStream4, outputStream5, 0L, 0L, byteArray10);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, byteArray10);
        java.io.BufferedInputStream bufferedInputStream15 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.io.InputStream inputStream17 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray18 = org.apache.commons.io.IOUtils.toByteArray(inputStream17);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream17);
        java.io.InputStream inputStream21 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream22 = null;
        java.io.InputStream inputStream25 = null;
        byte[] byteArray27 = org.apache.commons.io.IOUtils.toByteArray("");
        int int28 = org.apache.commons.io.IOUtils.read(inputStream25, byteArray27);
        long long29 = org.apache.commons.io.IOUtils.copyLarge(inputStream21, outputStream22, 0L, 0L, byteArray27);
        java.nio.charset.Charset charset30 = null;
        java.util.List<java.lang.String> strList31 = org.apache.commons.io.IOUtils.readLines(inputStream21, charset30);
        java.io.InputStream inputStream33 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream34 = null;
        java.io.InputStream inputStream37 = null;
        byte[] byteArray39 = org.apache.commons.io.IOUtils.toByteArray("");
        int int40 = org.apache.commons.io.IOUtils.read(inputStream37, byteArray39);
        long long41 = org.apache.commons.io.IOUtils.copyLarge(inputStream33, outputStream34, 0L, 0L, byteArray39);
        java.nio.charset.Charset charset42 = null;
        java.util.List<java.lang.String> strList43 = org.apache.commons.io.IOUtils.readLines(inputStream33, charset42);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream33);
        boolean boolean45 = org.apache.commons.io.IOUtils.contentEquals(inputStream21, inputStream33);
        java.io.OutputStream outputStream46 = null;
        java.io.InputStream inputStream48 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream49 = null;
        java.io.InputStream inputStream52 = null;
        byte[] byteArray54 = org.apache.commons.io.IOUtils.toByteArray("");
        int int55 = org.apache.commons.io.IOUtils.read(inputStream52, byteArray54);
        long long56 = org.apache.commons.io.IOUtils.copyLarge(inputStream48, outputStream49, 0L, 0L, byteArray54);
        long long57 = org.apache.commons.io.IOUtils.copyLarge(inputStream33, outputStream46, byteArray54);
        org.apache.commons.io.IOUtils.readFully(inputStream17, byteArray54);
        org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray54);
        java.lang.String str60 = org.apache.commons.io.IOUtils.toString(inputStream1);
        java.io.BufferedInputStream bufferedInputStream62 = org.apache.commons.io.IOUtils.buffer(inputStream1, 100);
        java.io.OutputStream outputStream63 = null;
        java.io.InputStream inputStream66 = null;
        byte[] byteArray68 = org.apache.commons.io.IOUtils.toByteArray("");
        int int69 = org.apache.commons.io.IOUtils.read(inputStream66, byteArray68);
        java.lang.String str70 = org.apache.commons.io.IOUtils.toString(byteArray68);
        long long71 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream63, (-1L), (long) (short) -1, byteArray68);
        java.io.OutputStream outputStream72 = null;
        int int73 = org.apache.commons.io.IOUtils.copy(inputStream1, outputStream72);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream15);
        org.junit.Assert.assertNotNull(inputStream17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(inputStream21);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNotNull(strList31);
        org.junit.Assert.assertNotNull(inputStream33);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertNotNull(strList43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(inputStream48);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(bufferedInputStream62);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 0L + "'", long71 == 0L);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
    }

    @Test
    public void test1217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1217");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray(inputStream1, (int) (short) 0);
        byte[] byteArray8 = new byte[] {};
        int int9 = org.apache.commons.io.IOUtils.length(byteArray8);
        org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray8);
        java.lang.String str11 = org.apache.commons.io.IOUtils.toString(byteArray8);
        int int12 = org.apache.commons.io.IOUtils.length(byteArray8);
        java.io.Writer writer13 = null;
        java.nio.charset.Charset charset14 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(byteArray8, writer13, charset14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Writer.write(String)\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test1218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1218");
        java.io.Reader reader0 = null;
        java.io.Writer writer1 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long4 = org.apache.commons.io.IOUtils.copyLarge(reader0, writer1, (long) (short) 100, 10L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[], int, int)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1219");
        java.io.Reader reader0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.skipFully(reader0, (long) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[], int, int)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1220");
        java.io.InputStream inputStream0 = null;
        java.io.OutputStream outputStream1 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long4 = org.apache.commons.io.IOUtils.copyLarge(inputStream0, outputStream1, (long) 100, (long) 6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.InputStream.read(byte[], int, int)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1221");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.io.InputStream inputStream7 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray8 = new byte[] {};
        int int9 = org.apache.commons.io.IOUtils.length(byteArray8);
        int int10 = org.apache.commons.io.IOUtils.read(inputStream7, byteArray8);
        byte[] byteArray11 = org.apache.commons.io.IOUtils.toByteArray(inputStream7);
        int int12 = org.apache.commons.io.IOUtils.length(byteArray11);
        org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray11);
        java.io.InputStream inputStream14 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1);
        java.io.InputStream inputStream16 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray17 = new byte[] {};
        int int18 = org.apache.commons.io.IOUtils.length(byteArray17);
        int int19 = org.apache.commons.io.IOUtils.read(inputStream16, byteArray17);
        org.apache.commons.io.IOUtils.closeQuietly(inputStream16);
        java.io.InputStream inputStream22 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray23 = new byte[] {};
        int int24 = org.apache.commons.io.IOUtils.length(byteArray23);
        int int25 = org.apache.commons.io.IOUtils.read(inputStream22, byteArray23);
        java.lang.String str26 = org.apache.commons.io.IOUtils.toString(byteArray23);
        int int29 = org.apache.commons.io.IOUtils.read(inputStream16, byteArray23, (int) (byte) 10, (int) (short) 0);
        java.lang.String str30 = org.apache.commons.io.IOUtils.toString(byteArray23);
        int int31 = org.apache.commons.io.IOUtils.length(byteArray23);
        int int32 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray23);
        java.io.OutputStream outputStream33 = null;
        java.io.InputStream inputStream35 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray36 = new byte[] {};
        int int37 = org.apache.commons.io.IOUtils.length(byteArray36);
        int int38 = org.apache.commons.io.IOUtils.read(inputStream35, byteArray36);
        java.io.InputStream inputStream40 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray41 = new byte[] {};
        int int42 = org.apache.commons.io.IOUtils.length(byteArray41);
        int int43 = org.apache.commons.io.IOUtils.read(inputStream40, byteArray41);
        byte[] byteArray44 = org.apache.commons.io.IOUtils.toByteArray(inputStream40);
        byte[] byteArray46 = org.apache.commons.io.IOUtils.toByteArray(inputStream40, (int) (short) 0);
        int int47 = org.apache.commons.io.IOUtils.read(inputStream35, byteArray46);
        long long48 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream33, byteArray46);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer49 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) outputStream33, iOExceptionConsumer49);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(inputStream7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(inputStream14);
        org.junit.Assert.assertNotNull(inputStream16);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(inputStream22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(inputStream35);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(inputStream40);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
    }

    @Test
    public void test1222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1222");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.BufferedInputStream bufferedInputStream10 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        byte[] byteArray11 = null;
        org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray11, (int) '4', 0);
        java.io.OutputStream outputStream15 = null;
        long long17 = org.apache.commons.io.IOUtils.copy(inputStream1, outputStream15, 0);
        char[] charArray18 = org.apache.commons.io.IOUtils.toCharArray(inputStream1);
        java.io.OutputStream outputStream19 = null;
        long long21 = org.apache.commons.io.IOUtils.copy(inputStream1, outputStream19, (int) 'a');
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream10);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(charArray18);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray18), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray18), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray18), "[]");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
    }

    @Test
    public void test1223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1223");
        java.io.Reader reader0 = null;
        java.io.Writer writer1 = null;
        java.io.InputStream inputStream5 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray6 = new byte[] {};
        int int7 = org.apache.commons.io.IOUtils.length(byteArray6);
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray6);
        byte[] byteArray9 = org.apache.commons.io.IOUtils.toByteArray(inputStream5);
        byte[] byteArray11 = org.apache.commons.io.IOUtils.toByteArray(inputStream5, (int) (short) 0);
        java.io.BufferedInputStream bufferedInputStream12 = org.apache.commons.io.IOUtils.buffer(inputStream5);
        java.nio.charset.Charset charset13 = null;
        org.apache.commons.io.LineIterator lineIterator14 = org.apache.commons.io.IOUtils.lineIterator(inputStream5, charset13);
        char[] charArray15 = org.apache.commons.io.IOUtils.toCharArray(inputStream5);
        // The following exception was thrown during execution in test generation
        try {
            long long16 = org.apache.commons.io.IOUtils.copyLarge(reader0, writer1, (long) (short) 10, (long) (byte) 0, charArray15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[], int, int)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream12);
        org.junit.Assert.assertNotNull(lineIterator14);
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[]");
    }

    @Test
    public void test1224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1224");
        java.io.Reader reader0 = null;
        java.io.InputStream inputStream2 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray3 = org.apache.commons.io.IOUtils.toByteArray(inputStream2);
        java.io.InputStream inputStream5 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray6 = new byte[] {};
        int int7 = org.apache.commons.io.IOUtils.length(byteArray6);
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray6);
        byte[] byteArray9 = org.apache.commons.io.IOUtils.toByteArray(inputStream5);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer10 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream5, iOExceptionConsumer10);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream5);
        java.io.BufferedInputStream bufferedInputStream14 = org.apache.commons.io.IOUtils.buffer(inputStream5, (int) (byte) 10);
        boolean boolean15 = org.apache.commons.io.IOUtils.contentEquals(inputStream2, inputStream5);
        java.io.OutputStream outputStream16 = null;
        long long19 = org.apache.commons.io.IOUtils.copyLarge(inputStream2, outputStream16, (long) (short) 0, (long) 2);
        char[] charArray20 = org.apache.commons.io.IOUtils.toCharArray(inputStream2);
        int int23 = org.apache.commons.io.IOUtils.read(reader0, charArray20, (int) 'a', 0);
        java.io.OutputStream outputStream24 = null;
        java.nio.charset.Charset charset25 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(charArray20, outputStream24, charset25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.OutputStream.write(byte[])\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertNotNull(inputStream5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray20), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray20), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray20), "[]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
    }

    @Test
    public void test1225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1225");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream3 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1);
        java.lang.String str4 = org.apache.commons.io.IOUtils.toString(inputStream1);
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray7);
        // The following exception was thrown during execution in test generation
        try {
            char[] charArray11 = org.apache.commons.io.IOUtils.toCharArray(inputStream1, "\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ?");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test1226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1226");
        // The following exception was thrown during execution in test generation
        try {
            java.io.InputStream inputStream2 = org.apache.commons.io.IOUtils.toInputStream("\n", "\r\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ??");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1227");
        java.io.InputStream inputStream0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.String> strList1 = org.apache.commons.io.IOUtils.readLines(inputStream0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1228");
        java.io.OutputStream outputStream1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write("hi!", outputStream1, "\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ?");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1229");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.io.InputStream inputStream7 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray8 = new byte[] {};
        int int9 = org.apache.commons.io.IOUtils.length(byteArray8);
        int int10 = org.apache.commons.io.IOUtils.read(inputStream7, byteArray8);
        byte[] byteArray11 = org.apache.commons.io.IOUtils.toByteArray(inputStream7);
        int int12 = org.apache.commons.io.IOUtils.length(byteArray11);
        org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray11);
        java.io.InputStream inputStream14 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray16 = org.apache.commons.io.IOUtils.readFully(inputStream1, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.io.EOFException; message: Length to read: 10 actual: 0");
        } catch (java.io.EOFException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(inputStream7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(inputStream14);
    }

    @Test
    public void test1230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1230");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.nio.charset.Charset charset6 = null;
        java.util.List<java.lang.String> strList7 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset6);
        java.nio.charset.Charset charset8 = null;
        org.apache.commons.io.LineIterator lineIterator9 = org.apache.commons.io.IOUtils.lineIterator(inputStream1, charset8);
        java.io.InputStream inputStream11 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, 6);
        java.nio.charset.Charset charset12 = null;
        char[] charArray13 = org.apache.commons.io.IOUtils.toCharArray(inputStream1, charset12);
        java.io.Writer writer14 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray13, writer14);
        java.io.Writer writer16 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(charArray13, writer16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Writer.write(char[])\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertNotNull(lineIterator9);
        org.junit.Assert.assertNotNull(inputStream11);
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[]");
    }

    @Test
    public void test1231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1231");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.nio.charset.Charset charset6 = null;
        java.util.List<java.lang.String> strList7 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset6);
        java.nio.charset.Charset charset8 = null;
        org.apache.commons.io.LineIterator lineIterator9 = org.apache.commons.io.IOUtils.lineIterator(inputStream1, charset8);
        java.io.InputStream inputStream11 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, 6);
        java.nio.charset.Charset charset12 = null;
        char[] charArray13 = org.apache.commons.io.IOUtils.toCharArray(inputStream1, charset12);
        java.io.Writer writer14 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(charArray13, writer14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Writer.write(char[])\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertNotNull(lineIterator9);
        org.junit.Assert.assertNotNull(inputStream11);
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[]");
    }

    @Test
    public void test1232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1232");
        char[] charArray0 = new char[] {};
        int int1 = org.apache.commons.io.IOUtils.length(charArray0);
        java.io.Writer writer2 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray0, writer2);
        int int4 = org.apache.commons.io.IOUtils.length(charArray0);
        java.io.OutputStream outputStream5 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(charArray0, outputStream5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.OutputStream.write(byte[])\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray0);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray0), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray0), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test1233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1233");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.util.List<java.lang.String> strList4 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer5 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer5);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        byte[] byteArray8 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.skipFully(inputStream1, (long) '/');
            org.junit.Assert.fail("Expected exception of type java.io.EOFException; message: Bytes to skip: 47 actual: 0");
        } catch (java.io.EOFException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
    }

    @Test
    public void test1234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1234");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        java.io.OutputStream outputStream10 = null;
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream10, (long) (short) 0, (-1L));
        java.lang.String str14 = org.apache.commons.io.IOUtils.toString(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly(inputStream1);
        java.io.BufferedInputStream bufferedInputStream17 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) '\\');
        java.lang.Class<?> wildcardClass18 = bufferedInputStream17.getClass();
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(bufferedInputStream17);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test1235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1235");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.util.List<java.lang.String> strList4 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.OutputStream outputStream5 = null;
        long long6 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream5);
        java.io.Writer writer7 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer7);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream11 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray12 = new byte[] {};
        int int13 = org.apache.commons.io.IOUtils.length(byteArray12);
        int int14 = org.apache.commons.io.IOUtils.read(inputStream11, byteArray12);
        byte[] byteArray15 = org.apache.commons.io.IOUtils.toByteArray(inputStream11);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer16 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream11, iOExceptionConsumer16);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream11);
        java.io.BufferedInputStream bufferedInputStream20 = org.apache.commons.io.IOUtils.buffer(inputStream11, (int) (byte) 10);
        java.io.InputStream inputStream22 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream11, (int) (byte) 1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer23 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream11, iOExceptionConsumer23);
        java.io.OutputStream outputStream25 = null;
        java.io.InputStream inputStream27 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray28 = new byte[] {};
        int int29 = org.apache.commons.io.IOUtils.length(byteArray28);
        int int30 = org.apache.commons.io.IOUtils.read(inputStream27, byteArray28);
        byte[] byteArray31 = org.apache.commons.io.IOUtils.toByteArray(inputStream27);
        java.io.InputStream inputStream33 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray34 = new byte[] {};
        int int35 = org.apache.commons.io.IOUtils.length(byteArray34);
        int int36 = org.apache.commons.io.IOUtils.read(inputStream33, byteArray34);
        byte[] byteArray37 = org.apache.commons.io.IOUtils.toByteArray(inputStream33);
        int int38 = org.apache.commons.io.IOUtils.length(byteArray37);
        org.apache.commons.io.IOUtils.readFully(inputStream27, byteArray37);
        long long40 = org.apache.commons.io.IOUtils.copyLarge(inputStream11, outputStream25, byteArray37);
        boolean boolean41 = org.apache.commons.io.IOUtils.contentEquals(inputStream1, inputStream11);
        java.io.BufferedInputStream bufferedInputStream42 = org.apache.commons.io.IOUtils.buffer(inputStream1);
        java.io.BufferedInputStream bufferedInputStream44 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (short) 100);
        java.io.InputStream inputStream46 = org.apache.commons.io.IOUtils.toInputStream("\n");
        byte[] byteArray48 = org.apache.commons.io.IOUtils.toByteArray(inputStream46, (int) (byte) 0);
        java.io.InputStream inputStream50 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray51 = new byte[] {};
        int int52 = org.apache.commons.io.IOUtils.length(byteArray51);
        int int53 = org.apache.commons.io.IOUtils.read(inputStream50, byteArray51);
        byte[] byteArray54 = org.apache.commons.io.IOUtils.toByteArray(inputStream50);
        byte[] byteArray56 = org.apache.commons.io.IOUtils.toByteArray(inputStream50, (int) (short) 0);
        byte[] byteArray57 = new byte[] {};
        int int58 = org.apache.commons.io.IOUtils.length(byteArray57);
        org.apache.commons.io.IOUtils.readFully(inputStream50, byteArray57);
        org.apache.commons.io.IOUtils.readFully(inputStream46, byteArray57);
        boolean boolean61 = org.apache.commons.io.IOUtils.contentEquals(inputStream1, inputStream46);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer62 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream46, iOExceptionConsumer62);
        java.io.InputStream inputStream64 = null;
        java.io.OutputStream outputStream65 = null;
        byte[] byteArray68 = new byte[] {};
        int int69 = org.apache.commons.io.IOUtils.length(byteArray68);
        java.io.OutputStream outputStream70 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray68, outputStream70);
        long long72 = org.apache.commons.io.IOUtils.copyLarge(inputStream64, outputStream65, 0L, (long) (byte) -1, byteArray68);
        java.io.OutputStream outputStream73 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray68, outputStream73);
        org.apache.commons.io.IOUtils.readFully(inputStream46, byteArray68);
        java.io.Writer writer76 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(byteArray68, writer76);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Writer.write(String)\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(inputStream11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream20);
        org.junit.Assert.assertNotNull(inputStream22);
        org.junit.Assert.assertNotNull(inputStream27);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(inputStream33);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(bufferedInputStream42);
        org.junit.Assert.assertNotNull(bufferedInputStream44);
        org.junit.Assert.assertNotNull(inputStream46);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertNotNull(inputStream50);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 0L + "'", long72 == 0L);
    }

    @Test
    public void test1236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1236");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.nio.charset.Charset charset6 = null;
        java.util.List<java.lang.String> strList7 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset6);
        java.nio.charset.Charset charset8 = null;
        org.apache.commons.io.LineIterator lineIterator9 = org.apache.commons.io.IOUtils.lineIterator(inputStream1, charset8);
        java.io.InputStream inputStream11 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, 6);
        java.io.BufferedInputStream bufferedInputStream13 = org.apache.commons.io.IOUtils.buffer(inputStream11, 3);
        java.lang.String str14 = org.apache.commons.io.IOUtils.toString(inputStream11);
        java.io.Writer writer15 = null;
        org.apache.commons.io.IOUtils.copy(inputStream11, writer15);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertNotNull(lineIterator9);
        org.junit.Assert.assertNotNull(inputStream11);
        org.junit.Assert.assertNotNull(bufferedInputStream13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
    }

    @Test
    public void test1237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1237");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.util.List<java.lang.String> strList4 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.OutputStream outputStream5 = null;
        long long6 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream5);
        java.io.OutputStream outputStream7 = null;
        java.io.InputStream inputStream11 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray12 = new byte[] {};
        int int13 = org.apache.commons.io.IOUtils.length(byteArray12);
        int int14 = org.apache.commons.io.IOUtils.read(inputStream11, byteArray12);
        long long15 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream7, (-1L), 1L, byteArray12);
        java.io.OutputStream outputStream16 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray12, outputStream16);
        java.io.OutputStream outputStream18 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray12, outputStream18);
        java.lang.String str20 = org.apache.commons.io.IOUtils.toString(byteArray12);
        java.io.Writer writer21 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(byteArray12, writer21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Writer.write(String)\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(inputStream11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
    }

    @Test
    public void test1238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1238");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        java.nio.charset.Charset charset10 = null;
        java.util.List<java.lang.String> strList11 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset10);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.nio.charset.Charset charset13 = null;
        java.lang.String str14 = org.apache.commons.io.IOUtils.toString(inputStream1, charset13);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer15 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer15);
        java.nio.charset.Charset charset17 = null;
        org.apache.commons.io.LineIterator lineIterator18 = org.apache.commons.io.IOUtils.lineIterator(inputStream1, charset17);
        java.io.OutputStream outputStream19 = null;
        int int20 = org.apache.commons.io.IOUtils.copy(inputStream1, outputStream19);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer21 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer21);
        java.io.InputStream inputStream24 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray25 = new byte[] {};
        int int26 = org.apache.commons.io.IOUtils.length(byteArray25);
        int int27 = org.apache.commons.io.IOUtils.read(inputStream24, byteArray25);
        org.apache.commons.io.IOUtils.closeQuietly(inputStream24);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream24);
        java.io.InputStream inputStream31 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray32 = new byte[] {};
        int int33 = org.apache.commons.io.IOUtils.length(byteArray32);
        int int34 = org.apache.commons.io.IOUtils.read(inputStream31, byteArray32);
        java.nio.charset.Charset charset35 = null;
        org.apache.commons.io.LineIterator lineIterator36 = org.apache.commons.io.IOUtils.lineIterator(inputStream31, charset35);
        org.apache.commons.io.function.IOConsumer<java.io.IOException> iOExceptionIOConsumer37 = null;
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream31, iOExceptionIOConsumer37);
        java.io.InputStream inputStream40 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream41 = null;
        java.io.InputStream inputStream44 = null;
        byte[] byteArray46 = org.apache.commons.io.IOUtils.toByteArray("");
        int int47 = org.apache.commons.io.IOUtils.read(inputStream44, byteArray46);
        long long48 = org.apache.commons.io.IOUtils.copyLarge(inputStream40, outputStream41, 0L, 0L, byteArray46);
        java.io.OutputStream outputStream49 = null;
        long long52 = org.apache.commons.io.IOUtils.copyLarge(inputStream40, outputStream49, (long) (short) 0, (-1L));
        char[] charArray53 = org.apache.commons.io.IOUtils.toCharArray(inputStream40);
        java.io.InputStream inputStream55 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream56 = null;
        java.io.InputStream inputStream58 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream59 = null;
        java.io.InputStream inputStream62 = null;
        byte[] byteArray64 = org.apache.commons.io.IOUtils.toByteArray("");
        int int65 = org.apache.commons.io.IOUtils.read(inputStream62, byteArray64);
        long long66 = org.apache.commons.io.IOUtils.copyLarge(inputStream58, outputStream59, 0L, 0L, byteArray64);
        long long67 = org.apache.commons.io.IOUtils.copyLarge(inputStream55, outputStream56, byteArray64);
        java.io.BufferedInputStream bufferedInputStream69 = org.apache.commons.io.IOUtils.buffer(inputStream55, (int) (byte) 10);
        java.nio.charset.Charset charset70 = null;
        java.util.List<java.lang.String> strList71 = org.apache.commons.io.IOUtils.readLines(inputStream55, charset70);
        java.io.OutputStream outputStream72 = null;
        long long75 = org.apache.commons.io.IOUtils.copyLarge(inputStream55, outputStream72, 0L, (long) 0);
        java.io.OutputStream outputStream76 = null;
        long long79 = org.apache.commons.io.IOUtils.copyLarge(inputStream55, outputStream76, (long) (short) -1, (long) 10);
        byte[] byteArray80 = org.apache.commons.io.IOUtils.toByteArray(inputStream55);
        java.io.InputStream inputStream82 = org.apache.commons.io.IOUtils.toInputStream("\n");
        byte[] byteArray84 = org.apache.commons.io.IOUtils.toByteArray(inputStream82, (int) (byte) 0);
        java.io.InputStream inputStream86 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray87 = new byte[] {};
        int int88 = org.apache.commons.io.IOUtils.length(byteArray87);
        int int89 = org.apache.commons.io.IOUtils.read(inputStream86, byteArray87);
        byte[] byteArray90 = org.apache.commons.io.IOUtils.toByteArray(inputStream86);
        byte[] byteArray92 = org.apache.commons.io.IOUtils.toByteArray(inputStream86, (int) (short) 0);
        byte[] byteArray93 = new byte[] {};
        int int94 = org.apache.commons.io.IOUtils.length(byteArray93);
        org.apache.commons.io.IOUtils.readFully(inputStream86, byteArray93);
        org.apache.commons.io.IOUtils.readFully(inputStream82, byteArray93);
        java.io.Closeable[] closeableArray97 = new java.io.Closeable[] { inputStream1, inputStream24, inputStream31, inputStream40, inputStream55, inputStream82 };
        org.apache.commons.io.IOUtils.closeQuietly(closeableArray97);
        org.apache.commons.io.IOUtils.closeQuietly(closeableArray97);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(lineIterator18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(inputStream24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(inputStream31);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(lineIterator36);
        org.junit.Assert.assertNotNull(inputStream40);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertNotNull(charArray53);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray53), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray53), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray53), "[]");
        org.junit.Assert.assertNotNull(inputStream55);
        org.junit.Assert.assertNotNull(inputStream58);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 0L + "'", long66 == 0L);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 0L + "'", long67 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream69);
        org.junit.Assert.assertNotNull(strList71);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 0L + "'", long75 == 0L);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 0L + "'", long79 == 0L);
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[]");
        org.junit.Assert.assertNotNull(inputStream82);
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[]");
        org.junit.Assert.assertNotNull(inputStream86);
        org.junit.Assert.assertNotNull(byteArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertNotNull(byteArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray90), "[]");
        org.junit.Assert.assertNotNull(byteArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray92), "[]");
        org.junit.Assert.assertNotNull(byteArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray93), "[]");
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
        org.junit.Assert.assertNotNull(closeableArray97);
    }

    @Test
    public void test1239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1239");
        java.io.Reader reader0 = null;
        java.io.Writer writer1 = null;
        java.io.Reader reader4 = null;
        java.io.Reader reader5 = null;
        java.io.Reader reader6 = null;
        java.io.Reader reader7 = null;
        java.io.Writer writer8 = null;
        char[] charArray11 = new char[] {};
        int int12 = org.apache.commons.io.IOUtils.length(charArray11);
        java.io.Writer writer13 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray11, writer13);
        java.io.Writer writer15 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray11, writer15);
        long long17 = org.apache.commons.io.IOUtils.copyLarge(reader7, writer8, 0L, (long) (byte) 100, charArray11);
        int int18 = org.apache.commons.io.IOUtils.read(reader6, charArray11);
        int int19 = org.apache.commons.io.IOUtils.length(charArray11);
        int int20 = org.apache.commons.io.IOUtils.read(reader5, charArray11);
        org.apache.commons.io.IOUtils.readFully(reader4, charArray11);
        java.io.Writer writer22 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray11, writer22);
        // The following exception was thrown during execution in test generation
        try {
            long long24 = org.apache.commons.io.IOUtils.copyLarge(reader0, writer1, (long) '/', 10L, charArray11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[], int, int)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    }

    @Test
    public void test1240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1240");
        java.io.Reader reader0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.BufferedReader bufferedReader2 = org.apache.commons.io.IOUtils.toBufferedReader(reader0, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1241");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream3 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1);
        java.lang.String str4 = org.apache.commons.io.IOUtils.toString(inputStream1);
        java.util.List<java.lang.String> strList5 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strList5);
    }

    @Test
    public void test1242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1242");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream5 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray("");
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray10);
        long long12 = org.apache.commons.io.IOUtils.copyLarge(inputStream4, outputStream5, 0L, 0L, byteArray10);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, byteArray10);
        java.io.BufferedInputStream bufferedInputStream15 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.nio.charset.Charset charset16 = null;
        java.util.List<java.lang.String> strList17 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset16);
        java.io.OutputStream outputStream18 = null;
        long long21 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream18, 0L, (long) 0);
        java.io.BufferedInputStream bufferedInputStream22 = org.apache.commons.io.IOUtils.buffer(inputStream1);
        java.io.BufferedInputStream bufferedInputStream23 = org.apache.commons.io.IOUtils.buffer(inputStream1);
        java.io.InputStream inputStream25 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream25);
        java.io.InputStream inputStream27 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream25);
        java.lang.String str28 = org.apache.commons.io.IOUtils.toString(inputStream25);
        java.io.InputStream inputStream29 = null;
        byte[] byteArray31 = org.apache.commons.io.IOUtils.toByteArray("");
        int int32 = org.apache.commons.io.IOUtils.read(inputStream29, byteArray31);
        org.apache.commons.io.IOUtils.readFully(inputStream25, byteArray31);
        org.apache.commons.io.IOUtils.readFully((java.io.InputStream) bufferedInputStream23, byteArray31);
        java.io.InputStream inputStream36 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray37 = new byte[] {};
        int int38 = org.apache.commons.io.IOUtils.length(byteArray37);
        int int39 = org.apache.commons.io.IOUtils.read(inputStream36, byteArray37);
        byte[] byteArray40 = org.apache.commons.io.IOUtils.toByteArray(inputStream36);
        java.nio.charset.Charset charset41 = null;
        java.util.List<java.lang.String> strList42 = org.apache.commons.io.IOUtils.readLines(inputStream36, charset41);
        java.nio.charset.Charset charset43 = null;
        org.apache.commons.io.LineIterator lineIterator44 = org.apache.commons.io.IOUtils.lineIterator(inputStream36, charset43);
        java.io.InputStream inputStream46 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream36, 6);
        java.io.BufferedInputStream bufferedInputStream48 = org.apache.commons.io.IOUtils.buffer(inputStream46, 3);
        java.lang.String str49 = org.apache.commons.io.IOUtils.toString(inputStream46);
        java.io.Writer writer50 = null;
        java.nio.charset.Charset charset51 = null;
        org.apache.commons.io.IOUtils.copy(inputStream46, writer50, charset51);
        java.io.InputStream inputStream54 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray55 = new byte[] {};
        int int56 = org.apache.commons.io.IOUtils.length(byteArray55);
        int int57 = org.apache.commons.io.IOUtils.read(inputStream54, byteArray55);
        byte[] byteArray58 = org.apache.commons.io.IOUtils.toByteArray(inputStream54);
        byte[] byteArray60 = org.apache.commons.io.IOUtils.toByteArray(inputStream54, (int) (short) 0);
        byte[] byteArray61 = new byte[] {};
        int int62 = org.apache.commons.io.IOUtils.length(byteArray61);
        org.apache.commons.io.IOUtils.readFully(inputStream54, byteArray61);
        java.lang.String str64 = org.apache.commons.io.IOUtils.toString(byteArray61);
        org.apache.commons.io.IOUtils.readFully(inputStream46, byteArray61, (int) '\\', (int) (byte) 0);
        org.apache.commons.io.IOUtils.readFully((java.io.InputStream) bufferedInputStream23, byteArray61);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream15);
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream22);
        org.junit.Assert.assertNotNull(bufferedInputStream23);
        org.junit.Assert.assertNotNull(inputStream25);
        org.junit.Assert.assertNotNull(inputStream27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(inputStream36);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertNotNull(strList42);
        org.junit.Assert.assertNotNull(lineIterator44);
        org.junit.Assert.assertNotNull(inputStream46);
        org.junit.Assert.assertNotNull(bufferedInputStream48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(inputStream54);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
    }

    @Test
    public void test1243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1243");
        java.io.Reader reader0 = null;
        java.io.Writer writer1 = null;
        java.io.Reader reader2 = null;
        char[] charArray3 = new char[] {};
        java.io.Writer writer4 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray3, writer4);
        int int6 = org.apache.commons.io.IOUtils.length(charArray3);
        org.apache.commons.io.IOUtils.readFully(reader2, charArray3);
        // The following exception was thrown during execution in test generation
        try {
            long long8 = org.apache.commons.io.IOUtils.copyLarge(reader0, writer1, charArray3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[])\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray3), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray3), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray3), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test1244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1244");
        java.nio.channels.ReadableByteChannel readableByteChannel0 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long2 = org.apache.commons.io.IOUtils.skip(readableByteChannel0, (long) '/');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.nio.channels.ReadableByteChannel.read(java.nio.ByteBuffer)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1245");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream5 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray("");
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray10);
        long long12 = org.apache.commons.io.IOUtils.copyLarge(inputStream4, outputStream5, 0L, 0L, byteArray10);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, byteArray10);
        java.io.BufferedInputStream bufferedInputStream15 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.nio.charset.Charset charset16 = null;
        java.util.List<java.lang.String> strList17 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset16);
        java.io.OutputStream outputStream18 = null;
        long long21 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream18, 0L, (long) 0);
        java.nio.charset.Charset charset22 = null;
        char[] charArray23 = org.apache.commons.io.IOUtils.toCharArray(inputStream1, charset22);
        java.io.InputStream inputStream25 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream25);
        java.io.InputStream inputStream27 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream25);
        java.lang.String str28 = org.apache.commons.io.IOUtils.toString(inputStream25);
        java.io.InputStream inputStream29 = null;
        byte[] byteArray31 = org.apache.commons.io.IOUtils.toByteArray("");
        int int32 = org.apache.commons.io.IOUtils.read(inputStream29, byteArray31);
        org.apache.commons.io.IOUtils.readFully(inputStream25, byteArray31);
        int int34 = org.apache.commons.io.IOUtils.length(byteArray31);
        org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray31);
        int int36 = org.apache.commons.io.IOUtils.length(byteArray31);
        java.io.Writer writer37 = null;
        java.nio.charset.Charset charset38 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(byteArray31, writer37, charset38);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Writer.write(String)\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream15);
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[]");
        org.junit.Assert.assertNotNull(inputStream25);
        org.junit.Assert.assertNotNull(inputStream27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
    }

    @Test
    public void test1246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1246");
        java.io.Reader reader0 = null;
        java.io.Writer writer1 = null;
        char[] charArray4 = new char[] {};
        int int5 = org.apache.commons.io.IOUtils.length(charArray4);
        java.io.Writer writer6 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray4, writer6);
        java.io.Writer writer8 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray4, writer8);
        long long10 = org.apache.commons.io.IOUtils.copyLarge(reader0, writer1, 0L, (long) (byte) 100, charArray4);
        java.io.Writer writer11 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray4, writer11);
        java.io.Writer writer13 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray4, writer13);
        java.io.OutputStream outputStream15 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(charArray4, outputStream15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.OutputStream.write(byte[])\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
    }

    @Test
    public void test1247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1247");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.BufferedInputStream bufferedInputStream10 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.io.InputStream inputStream12 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, (int) (byte) 1);
        java.io.OutputStream outputStream13 = null;
        int int14 = org.apache.commons.io.IOUtils.copy(inputStream12, outputStream13);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream12);
        java.io.Writer writer16 = null;
        org.apache.commons.io.IOUtils.copy(inputStream12, writer16);
        java.io.Writer writer18 = null;
        java.nio.charset.Charset charset19 = null;
        org.apache.commons.io.IOUtils.copy(inputStream12, writer18, charset19);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) writer18);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream10);
        org.junit.Assert.assertNotNull(inputStream12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test1248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1248");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        java.nio.charset.Charset charset10 = null;
        java.util.List<java.lang.String> strList11 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset10);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream14 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, (int) (byte) 0);
        java.nio.charset.Charset charset16 = null;
        java.io.InputStream inputStream17 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "", charset16);
        java.util.List<java.lang.String> strList18 = org.apache.commons.io.IOUtils.readLines(inputStream17);
        java.io.InputStream inputStream20 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray21 = new byte[] {};
        int int22 = org.apache.commons.io.IOUtils.length(byteArray21);
        int int23 = org.apache.commons.io.IOUtils.read(inputStream20, byteArray21);
        byte[] byteArray24 = org.apache.commons.io.IOUtils.toByteArray(inputStream20);
        int int25 = org.apache.commons.io.IOUtils.length(byteArray24);
        org.apache.commons.io.IOUtils.readFully(inputStream17, byteArray24);
        byte[] byteArray28 = org.apache.commons.io.IOUtils.toByteArray(inputStream17, 0L);
        // The following exception was thrown during execution in test generation
        try {
            int int31 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray28, (int) (short) 100, 2);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Range [100, 100 + 2) out of bounds for length 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertNotNull(inputStream14);
        org.junit.Assert.assertNotNull(inputStream17);
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertNotNull(inputStream20);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
    }

    @Test
    public void test1249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1249");
        java.io.InputStream inputStream0 = null;
        java.io.InputStream inputStream2 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray3 = new byte[] {};
        int int4 = org.apache.commons.io.IOUtils.length(byteArray3);
        int int5 = org.apache.commons.io.IOUtils.read(inputStream2, byteArray3);
        byte[] byteArray6 = org.apache.commons.io.IOUtils.toByteArray(inputStream2);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer7 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream2, iOExceptionConsumer7);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream2);
        java.io.BufferedInputStream bufferedInputStream11 = org.apache.commons.io.IOUtils.buffer(inputStream2, (int) (byte) 10);
        java.io.InputStream inputStream13 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream2, (int) (byte) 1);
        java.io.OutputStream outputStream14 = null;
        int int15 = org.apache.commons.io.IOUtils.copy(inputStream13, outputStream14);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream13);
        boolean boolean17 = org.apache.commons.io.IOUtils.contentEquals(inputStream0, inputStream13);
        org.junit.Assert.assertNotNull(inputStream2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream11);
        org.junit.Assert.assertNotNull(inputStream13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test1250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1250");
        java.io.OutputStream outputStream1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write("\n", outputStream1, "\r\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ??");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1251");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.io.InputStream inputStream7 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, (int) (byte) 0);
        java.io.InputStream inputStream9 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray10 = new byte[] {};
        int int11 = org.apache.commons.io.IOUtils.length(byteArray10);
        int int12 = org.apache.commons.io.IOUtils.read(inputStream9, byteArray10);
        byte[] byteArray13 = org.apache.commons.io.IOUtils.toByteArray(inputStream9);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer14 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream9, iOExceptionConsumer14);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream9);
        java.io.BufferedInputStream bufferedInputStream18 = org.apache.commons.io.IOUtils.buffer(inputStream9, (int) (byte) 10);
        java.io.InputStream inputStream20 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream9, (int) (byte) 1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer21 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream9, iOExceptionConsumer21);
        java.io.OutputStream outputStream23 = null;
        java.io.InputStream inputStream25 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray26 = new byte[] {};
        int int27 = org.apache.commons.io.IOUtils.length(byteArray26);
        int int28 = org.apache.commons.io.IOUtils.read(inputStream25, byteArray26);
        byte[] byteArray29 = org.apache.commons.io.IOUtils.toByteArray(inputStream25);
        java.io.InputStream inputStream31 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray32 = new byte[] {};
        int int33 = org.apache.commons.io.IOUtils.length(byteArray32);
        int int34 = org.apache.commons.io.IOUtils.read(inputStream31, byteArray32);
        byte[] byteArray35 = org.apache.commons.io.IOUtils.toByteArray(inputStream31);
        int int36 = org.apache.commons.io.IOUtils.length(byteArray35);
        org.apache.commons.io.IOUtils.readFully(inputStream25, byteArray35);
        long long38 = org.apache.commons.io.IOUtils.copyLarge(inputStream9, outputStream23, byteArray35);
        byte[] byteArray39 = org.apache.commons.io.IOUtils.toByteArray(inputStream9);
        org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray39);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str42 = org.apache.commons.io.IOUtils.toString(byteArray39, "\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ?");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(inputStream7);
        org.junit.Assert.assertNotNull(inputStream9);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream18);
        org.junit.Assert.assertNotNull(inputStream20);
        org.junit.Assert.assertNotNull(inputStream25);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(inputStream31);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
    }

    @Test
    public void test1252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1252");
        java.io.Reader reader0 = null;
        java.io.Reader reader1 = null;
        java.io.Writer writer2 = null;
        char[] charArray5 = new char[] {};
        int int6 = org.apache.commons.io.IOUtils.length(charArray5);
        java.io.Writer writer7 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray5, writer7);
        java.io.Writer writer9 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray5, writer9);
        long long11 = org.apache.commons.io.IOUtils.copyLarge(reader1, writer2, 0L, (long) (byte) 100, charArray5);
        int int12 = org.apache.commons.io.IOUtils.read(reader0, charArray5);
        java.io.Writer writer13 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray5, writer13);
        java.io.Writer writer15 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(charArray5, writer15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Writer.write(char[])\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test1253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1253");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.util.List<java.lang.String> strList4 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.OutputStream outputStream5 = null;
        long long6 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream5);
        java.io.OutputStream outputStream7 = null;
        java.io.InputStream inputStream11 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray12 = new byte[] {};
        int int13 = org.apache.commons.io.IOUtils.length(byteArray12);
        int int14 = org.apache.commons.io.IOUtils.read(inputStream11, byteArray12);
        long long15 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream7, (-1L), 1L, byteArray12);
        java.io.OutputStream outputStream16 = null;
        java.io.InputStream inputStream20 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream21 = null;
        java.io.InputStream inputStream24 = null;
        byte[] byteArray26 = org.apache.commons.io.IOUtils.toByteArray("");
        int int27 = org.apache.commons.io.IOUtils.read(inputStream24, byteArray26);
        long long28 = org.apache.commons.io.IOUtils.copyLarge(inputStream20, outputStream21, 0L, 0L, byteArray26);
        java.io.OutputStream outputStream29 = null;
        long long32 = org.apache.commons.io.IOUtils.copyLarge(inputStream20, outputStream29, (long) (short) 0, (-1L));
        java.lang.String str33 = org.apache.commons.io.IOUtils.toString(inputStream20);
        java.io.InputStream inputStream34 = null;
        java.io.OutputStream outputStream35 = null;
        byte[] byteArray38 = new byte[] {};
        int int39 = org.apache.commons.io.IOUtils.length(byteArray38);
        java.io.OutputStream outputStream40 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray38, outputStream40);
        long long42 = org.apache.commons.io.IOUtils.copyLarge(inputStream34, outputStream35, 0L, (long) (byte) -1, byteArray38);
        java.io.OutputStream outputStream43 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray38, outputStream43);
        int int45 = org.apache.commons.io.IOUtils.length(byteArray38);
        int int46 = org.apache.commons.io.IOUtils.read(inputStream20, byteArray38);
        long long47 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream16, (long) (byte) -1, (long) 10, byteArray38);
        byte[] byteArray48 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int49 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray48);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"buffer\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(inputStream11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(inputStream20);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
    }

    @Test
    public void test1254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1254");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.BufferedInputStream bufferedInputStream10 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        org.apache.commons.io.function.IOConsumer<java.io.IOException> iOExceptionIOConsumer11 = null;
        org.apache.commons.io.IOUtils.close((java.io.Closeable) bufferedInputStream10, iOExceptionIOConsumer11);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) bufferedInputStream10);
        org.apache.commons.io.IOUtils.skipFully((java.io.InputStream) bufferedInputStream10, (long) (short) 0);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer16 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) bufferedInputStream10, iOExceptionConsumer16);
        java.io.BufferedInputStream bufferedInputStream19 = org.apache.commons.io.IOUtils.buffer((java.io.InputStream) bufferedInputStream10, (int) (short) 0);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.InputStream) bufferedInputStream10);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream10);
        org.junit.Assert.assertNotNull(bufferedInputStream19);
    }

    @Test
    public void test1255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1255");
        java.io.Reader reader0 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long2 = org.apache.commons.io.IOUtils.skip(reader0, (long) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[], int, int)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1256");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        java.io.Writer writer10 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer10);
        java.util.List<java.lang.String> strList12 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.InputStream inputStream14 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, 4);
        java.io.Writer writer15 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.copy(inputStream1, writer15, "\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ?");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(strList12);
        org.junit.Assert.assertNotNull(inputStream14);
    }

    @Test
    public void test1257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1257");
        java.nio.charset.Charset charset1 = null;
        java.io.InputStream inputStream2 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "", charset1);
        java.util.List<java.lang.String> strList3 = org.apache.commons.io.IOUtils.readLines(inputStream2);
        java.io.OutputStream outputStream5 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList3, "\n", outputStream5);
        java.io.Writer writer8 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList3, "\r\n", writer8);
        java.io.Writer writer11 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList3, "", writer11);
        java.io.OutputStream outputStream14 = null;
        java.nio.charset.Charset charset15 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList3, "", outputStream14, charset15);
        java.io.OutputStream outputStream18 = null;
        java.nio.charset.Charset charset19 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList3, "\n", outputStream18, charset19);
        org.junit.Assert.assertNotNull(inputStream2);
        org.junit.Assert.assertNotNull(strList3);
    }

    @Test
    public void test1258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1258");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream5 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray("");
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray10);
        long long12 = org.apache.commons.io.IOUtils.copyLarge(inputStream4, outputStream5, 0L, 0L, byteArray10);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, byteArray10);
        java.io.BufferedInputStream bufferedInputStream15 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.nio.charset.Charset charset16 = null;
        java.util.List<java.lang.String> strList17 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset16);
        java.io.OutputStream outputStream18 = null;
        int int19 = org.apache.commons.io.IOUtils.copy(inputStream1, outputStream18);
        java.io.OutputStream outputStream20 = null;
        long long22 = org.apache.commons.io.IOUtils.copy(inputStream1, outputStream20, 6);
        org.apache.commons.io.function.IOConsumer<java.io.IOException> iOExceptionIOConsumer23 = null;
        org.apache.commons.io.IOUtils.close((java.io.Closeable) outputStream20, iOExceptionIOConsumer23);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream15);
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
    }

    @Test
    public void test1259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1259");
        java.io.Reader reader0 = null;
        java.io.Writer writer1 = null;
        java.io.Reader reader4 = null;
        java.io.Writer writer5 = null;
        char[] charArray8 = new char[] {};
        int int9 = org.apache.commons.io.IOUtils.length(charArray8);
        java.io.Writer writer10 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray8, writer10);
        java.io.Writer writer12 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray8, writer12);
        long long14 = org.apache.commons.io.IOUtils.copyLarge(reader4, writer5, 0L, (long) (byte) 100, charArray8);
        // The following exception was thrown during execution in test generation
        try {
            long long15 = org.apache.commons.io.IOUtils.copyLarge(reader0, writer1, (long) 3, (long) '4', charArray8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[], int, int)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
    }

    @Test
    public void test1260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1260");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.BufferedInputStream bufferedInputStream10 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        org.apache.commons.io.function.IOConsumer<java.io.IOException> iOExceptionIOConsumer11 = null;
        org.apache.commons.io.IOUtils.close((java.io.Closeable) bufferedInputStream10, iOExceptionIOConsumer11);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) bufferedInputStream10);
        org.apache.commons.io.IOUtils.skipFully((java.io.InputStream) bufferedInputStream10, (long) (short) 0);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer16 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) bufferedInputStream10, iOExceptionConsumer16);
        java.io.BufferedInputStream bufferedInputStream19 = org.apache.commons.io.IOUtils.buffer((java.io.InputStream) bufferedInputStream10, (int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            char[] charArray21 = org.apache.commons.io.IOUtils.toCharArray((java.io.InputStream) bufferedInputStream10, "\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ?");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream10);
        org.junit.Assert.assertNotNull(bufferedInputStream19);
    }

    @Test
    public void test1261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1261");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream5 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray("");
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray10);
        long long12 = org.apache.commons.io.IOUtils.copyLarge(inputStream4, outputStream5, 0L, 0L, byteArray10);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, byteArray10);
        java.io.BufferedInputStream bufferedInputStream15 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.io.InputStream inputStream17 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray18 = org.apache.commons.io.IOUtils.toByteArray(inputStream17);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream17);
        java.io.InputStream inputStream21 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream22 = null;
        java.io.InputStream inputStream25 = null;
        byte[] byteArray27 = org.apache.commons.io.IOUtils.toByteArray("");
        int int28 = org.apache.commons.io.IOUtils.read(inputStream25, byteArray27);
        long long29 = org.apache.commons.io.IOUtils.copyLarge(inputStream21, outputStream22, 0L, 0L, byteArray27);
        java.nio.charset.Charset charset30 = null;
        java.util.List<java.lang.String> strList31 = org.apache.commons.io.IOUtils.readLines(inputStream21, charset30);
        java.io.InputStream inputStream33 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream34 = null;
        java.io.InputStream inputStream37 = null;
        byte[] byteArray39 = org.apache.commons.io.IOUtils.toByteArray("");
        int int40 = org.apache.commons.io.IOUtils.read(inputStream37, byteArray39);
        long long41 = org.apache.commons.io.IOUtils.copyLarge(inputStream33, outputStream34, 0L, 0L, byteArray39);
        java.nio.charset.Charset charset42 = null;
        java.util.List<java.lang.String> strList43 = org.apache.commons.io.IOUtils.readLines(inputStream33, charset42);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream33);
        boolean boolean45 = org.apache.commons.io.IOUtils.contentEquals(inputStream21, inputStream33);
        java.io.OutputStream outputStream46 = null;
        java.io.InputStream inputStream48 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream49 = null;
        java.io.InputStream inputStream52 = null;
        byte[] byteArray54 = org.apache.commons.io.IOUtils.toByteArray("");
        int int55 = org.apache.commons.io.IOUtils.read(inputStream52, byteArray54);
        long long56 = org.apache.commons.io.IOUtils.copyLarge(inputStream48, outputStream49, 0L, 0L, byteArray54);
        long long57 = org.apache.commons.io.IOUtils.copyLarge(inputStream33, outputStream46, byteArray54);
        org.apache.commons.io.IOUtils.readFully(inputStream17, byteArray54);
        org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray54);
        java.lang.String str60 = org.apache.commons.io.IOUtils.toString(inputStream1);
        java.io.InputStream inputStream62 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, (int) (byte) 10);
        java.nio.charset.Charset charset63 = null;
        java.lang.String str64 = org.apache.commons.io.IOUtils.toString(inputStream1, charset63);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream15);
        org.junit.Assert.assertNotNull(inputStream17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(inputStream21);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNotNull(strList31);
        org.junit.Assert.assertNotNull(inputStream33);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertNotNull(strList43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(inputStream48);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(inputStream62);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
    }

    @Test
    public void test1262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1262");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream5 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray("");
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray10);
        long long12 = org.apache.commons.io.IOUtils.copyLarge(inputStream4, outputStream5, 0L, 0L, byteArray10);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, byteArray10);
        java.io.BufferedInputStream bufferedInputStream15 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.nio.charset.Charset charset16 = null;
        java.util.List<java.lang.String> strList17 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset16);
        java.io.OutputStream outputStream18 = null;
        int int19 = org.apache.commons.io.IOUtils.copy(inputStream1, outputStream18);
        java.io.Writer writer20 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.copy(inputStream1, writer20, "");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream15);
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test1263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1263");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.util.List<java.lang.String> strList4 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.OutputStream outputStream6 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList4, "\n", outputStream6);
        java.io.OutputStream outputStream9 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList4, "\n", outputStream9);
        java.io.OutputStream outputStream12 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList4, "\n", outputStream12);
        java.io.OutputStream outputStream15 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList4, "\n", outputStream15);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(strList4);
    }

    @Test
    public void test1264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1264");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.util.List<java.lang.String> strList4 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.OutputStream outputStream5 = null;
        long long6 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream5);
        java.io.OutputStream outputStream7 = null;
        java.io.InputStream inputStream11 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray12 = new byte[] {};
        int int13 = org.apache.commons.io.IOUtils.length(byteArray12);
        int int14 = org.apache.commons.io.IOUtils.read(inputStream11, byteArray12);
        long long15 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream7, (-1L), 1L, byteArray12);
        java.io.BufferedInputStream bufferedInputStream16 = org.apache.commons.io.IOUtils.buffer(inputStream1);
        java.util.List<java.lang.String> strList17 = org.apache.commons.io.IOUtils.readLines((java.io.InputStream) bufferedInputStream16);
        java.io.OutputStream outputStream19 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList17, "\r\n", outputStream19, "");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(inputStream11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream16);
        org.junit.Assert.assertNotNull(strList17);
    }

    @Test
    public void test1265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1265");
        java.io.Writer writer0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.BufferedWriter bufferedWriter2 = org.apache.commons.io.IOUtils.buffer(writer0, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1266");
        java.io.Reader reader0 = null;
        java.io.Writer writer1 = null;
        char[] charArray2 = new char[] {};
        int int3 = org.apache.commons.io.IOUtils.length(charArray2);
        java.io.Writer writer4 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray2, writer4);
        int int6 = org.apache.commons.io.IOUtils.length(charArray2);
        java.io.Writer writer7 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray2, writer7);
        // The following exception was thrown during execution in test generation
        try {
            long long9 = org.apache.commons.io.IOUtils.copyLarge(reader0, writer1, charArray2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[])\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray2), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray2), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test1267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1267");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.BufferedInputStream bufferedInputStream10 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        byte[] byteArray11 = null;
        org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray11, (int) '4', 0);
        char[] charArray15 = org.apache.commons.io.IOUtils.toCharArray(inputStream1);
        java.io.OutputStream outputStream16 = null;
        java.nio.charset.Charset charset17 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(charArray15, outputStream16, charset17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.OutputStream.write(byte[])\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream10);
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[]");
    }

    @Test
    public void test1268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1268");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.nio.charset.Charset charset6 = null;
        java.util.List<java.lang.String> strList7 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset6);
        java.nio.charset.Charset charset8 = null;
        org.apache.commons.io.LineIterator lineIterator9 = org.apache.commons.io.IOUtils.lineIterator(inputStream1, charset8);
        java.io.InputStream inputStream11 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, 6);
        java.io.BufferedInputStream bufferedInputStream13 = org.apache.commons.io.IOUtils.buffer(inputStream11, 3);
        java.io.OutputStream outputStream14 = null;
        java.io.InputStream inputStream16 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream17 = null;
        java.io.InputStream inputStream20 = null;
        byte[] byteArray22 = org.apache.commons.io.IOUtils.toByteArray("");
        int int23 = org.apache.commons.io.IOUtils.read(inputStream20, byteArray22);
        long long24 = org.apache.commons.io.IOUtils.copyLarge(inputStream16, outputStream17, 0L, 0L, byteArray22);
        java.nio.charset.Charset charset25 = null;
        java.util.List<java.lang.String> strList26 = org.apache.commons.io.IOUtils.readLines(inputStream16, charset25);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream16);
        java.io.BufferedInputStream bufferedInputStream28 = org.apache.commons.io.IOUtils.buffer(inputStream16);
        java.io.OutputStream outputStream29 = null;
        long long30 = org.apache.commons.io.IOUtils.copyLarge(inputStream16, outputStream29);
        byte[] byteArray31 = org.apache.commons.io.IOUtils.toByteArray(inputStream16);
        // The following exception was thrown during execution in test generation
        try {
            long long32 = org.apache.commons.io.IOUtils.copyLarge(inputStream11, outputStream14, byteArray31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.OutputStream.write(byte[], int, int)\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertNotNull(lineIterator9);
        org.junit.Assert.assertNotNull(inputStream11);
        org.junit.Assert.assertNotNull(bufferedInputStream13);
        org.junit.Assert.assertNotNull(inputStream16);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(strList26);
        org.junit.Assert.assertNotNull(bufferedInputStream28);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
    }

    @Test
    public void test1269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1269");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.BufferedInputStream bufferedInputStream10 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.io.InputStream inputStream12 = org.apache.commons.io.IOUtils.toBufferedInputStream((java.io.InputStream) bufferedInputStream10, (int) '#');
        java.nio.charset.Charset charset13 = null;
        char[] charArray14 = org.apache.commons.io.IOUtils.toCharArray(inputStream12, charset13);
        java.io.OutputStream outputStream15 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long18 = org.apache.commons.io.IOUtils.copyLarge(inputStream12, outputStream15, (long) 5, (long) (-1));
            org.junit.Assert.fail("Expected exception of type java.io.EOFException; message: Bytes to skip: 5 actual: 0");
        } catch (java.io.EOFException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream10);
        org.junit.Assert.assertNotNull(inputStream12);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[]");
    }

    @Test
    public void test1270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1270");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.util.List<java.lang.String> strList4 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.OutputStream outputStream5 = null;
        long long6 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream5);
        java.io.Writer writer7 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer7);
        java.io.Writer writer9 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer9);
        java.io.InputStream inputStream12 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray13 = new byte[] {};
        int int14 = org.apache.commons.io.IOUtils.length(byteArray13);
        int int15 = org.apache.commons.io.IOUtils.read(inputStream12, byteArray13);
        byte[] byteArray16 = org.apache.commons.io.IOUtils.toByteArray(inputStream12);
        byte[] byteArray18 = org.apache.commons.io.IOUtils.toByteArray(inputStream12, (int) (short) 0);
        byte[] byteArray19 = new byte[] {};
        int int20 = org.apache.commons.io.IOUtils.length(byteArray19);
        org.apache.commons.io.IOUtils.readFully(inputStream12, byteArray19);
        java.lang.String str22 = org.apache.commons.io.IOUtils.toString(byteArray19);
        int int23 = org.apache.commons.io.IOUtils.length(byteArray19);
        org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray19);
        java.io.Writer writer25 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.copy(inputStream1, writer25, "\r\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ??");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(inputStream12);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
    }

    @Test
    public void test1271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1271");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.util.List<java.lang.String> strList4 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.BufferedInputStream bufferedInputStream5 = org.apache.commons.io.IOUtils.buffer(inputStream1);
        java.io.OutputStream outputStream6 = null;
        long long7 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream6);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.lang.String str9 = org.apache.commons.io.IOUtils.toString(inputStream1);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertNotNull(bufferedInputStream5);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
    }

    @Test
    public void test1272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1272");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.io.InputStream inputStream7 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, (int) (byte) 0);
        java.nio.charset.Charset charset8 = null;
        org.apache.commons.io.LineIterator lineIterator9 = org.apache.commons.io.IOUtils.lineIterator(inputStream7, charset8);
        org.apache.commons.io.IOUtils.skipFully(inputStream7, 0L);
        java.io.Writer writer12 = null;
        java.nio.charset.Charset charset13 = null;
        org.apache.commons.io.IOUtils.copy(inputStream7, writer12, charset13);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(inputStream7);
        org.junit.Assert.assertNotNull(lineIterator9);
    }

    @Test
    public void test1273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1273");
        java.io.Reader reader0 = null;
        java.io.Reader reader1 = null;
        java.io.Reader reader2 = null;
        char[] charArray3 = new char[] {};
        int int4 = org.apache.commons.io.IOUtils.length(charArray3);
        int int5 = org.apache.commons.io.IOUtils.read(reader2, charArray3);
        org.apache.commons.io.IOUtils.readFully(reader1, charArray3);
        int int7 = org.apache.commons.io.IOUtils.read(reader0, charArray3);
        java.io.Writer writer8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(charArray3, writer8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Writer.write(char[])\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray3), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray3), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray3), "[]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test1274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1274");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.util.List<java.lang.String> strList4 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.Writer writer6 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList4, "", writer6);
        java.io.OutputStream outputStream9 = null;
        java.nio.charset.Charset charset10 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList4, "", outputStream9, charset10);
        java.io.OutputStream outputStream13 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList4, "", outputStream13);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(strList4);
    }

    @Test
    public void test1275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1275");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        java.nio.charset.Charset charset10 = null;
        java.util.List<java.lang.String> strList11 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset10);
        java.nio.charset.Charset charset12 = null;
        char[] charArray13 = org.apache.commons.io.IOUtils.toCharArray(inputStream1, charset12);
        java.io.OutputStream outputStream14 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(charArray13, outputStream14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.OutputStream.write(byte[])\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[]");
    }

    @Test
    public void test1276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1276");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray(inputStream1, (int) (short) 0);
        java.io.Writer writer8 = null;
        java.nio.charset.Charset charset9 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(byteArray7, writer8, charset9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Writer.write(String)\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
    }

    @Test
    public void test1277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1277");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.util.List<java.lang.String> strList4 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.OutputStream outputStream5 = null;
        long long6 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream5);
        // The following exception was thrown during execution in test generation
        try {
            char[] charArray8 = org.apache.commons.io.IOUtils.toCharArray(inputStream1, "");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
    }

    @Test
    public void test1278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1278");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.io.InputStream inputStream7 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, (int) (byte) 0);
        java.nio.charset.Charset charset8 = null;
        org.apache.commons.io.LineIterator lineIterator9 = org.apache.commons.io.IOUtils.lineIterator(inputStream7, charset8);
        java.nio.charset.Charset charset10 = null;
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.IOUtils.lineIterator(inputStream7, charset10);
        java.io.Writer writer12 = null;
        org.apache.commons.io.IOUtils.copy(inputStream7, writer12);
        org.apache.commons.io.IOUtils.closeQuietly(inputStream7);
        java.io.InputStream inputStream16 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream17 = null;
        java.io.InputStream inputStream19 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream20 = null;
        java.io.InputStream inputStream23 = null;
        byte[] byteArray25 = org.apache.commons.io.IOUtils.toByteArray("");
        int int26 = org.apache.commons.io.IOUtils.read(inputStream23, byteArray25);
        long long27 = org.apache.commons.io.IOUtils.copyLarge(inputStream19, outputStream20, 0L, 0L, byteArray25);
        long long28 = org.apache.commons.io.IOUtils.copyLarge(inputStream16, outputStream17, byteArray25);
        java.io.BufferedInputStream bufferedInputStream30 = org.apache.commons.io.IOUtils.buffer(inputStream16, (int) (byte) 10);
        org.apache.commons.io.IOUtils.closeQuietly(inputStream16);
        java.nio.charset.Charset charset32 = null;
        java.util.List<java.lang.String> strList33 = org.apache.commons.io.IOUtils.readLines(inputStream16, charset32);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream16);
        java.io.OutputStream outputStream35 = null;
        int int36 = org.apache.commons.io.IOUtils.copy(inputStream16, outputStream35);
        java.io.InputStream inputStream38 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray39 = new byte[] {};
        int int40 = org.apache.commons.io.IOUtils.length(byteArray39);
        int int41 = org.apache.commons.io.IOUtils.read(inputStream38, byteArray39);
        byte[] byteArray42 = org.apache.commons.io.IOUtils.toByteArray(inputStream38);
        byte[] byteArray44 = org.apache.commons.io.IOUtils.toByteArray(inputStream38, (int) (short) 0);
        byte[] byteArray45 = new byte[] {};
        int int46 = org.apache.commons.io.IOUtils.length(byteArray45);
        org.apache.commons.io.IOUtils.readFully(inputStream38, byteArray45);
        int int48 = org.apache.commons.io.IOUtils.read(inputStream16, byteArray45);
        boolean boolean49 = org.apache.commons.io.IOUtils.contentEquals(inputStream7, inputStream16);
        java.io.InputStream inputStream51 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray52 = new byte[] {};
        int int53 = org.apache.commons.io.IOUtils.length(byteArray52);
        int int54 = org.apache.commons.io.IOUtils.read(inputStream51, byteArray52);
        java.io.BufferedInputStream bufferedInputStream56 = org.apache.commons.io.IOUtils.buffer(inputStream51, (int) ' ');
        java.io.InputStream inputStream58 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream51, 4);
        byte[] byteArray60 = org.apache.commons.io.IOUtils.readFully(inputStream58, (int) (byte) 0);
        boolean boolean61 = org.apache.commons.io.IOUtils.contentEquals(inputStream7, inputStream58);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(inputStream7);
        org.junit.Assert.assertNotNull(lineIterator9);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertNotNull(inputStream16);
        org.junit.Assert.assertNotNull(inputStream19);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream30);
        org.junit.Assert.assertNotNull(strList33);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(inputStream38);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(inputStream51);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(bufferedInputStream56);
        org.junit.Assert.assertNotNull(inputStream58);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
    }

    @Test
    public void test1279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1279");
        java.nio.channels.ReadableByteChannel readableByteChannel0 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long2 = org.apache.commons.io.IOUtils.skip(readableByteChannel0, (long) 5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.nio.channels.ReadableByteChannel.read(java.nio.ByteBuffer)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1280");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        java.io.OutputStream outputStream10 = null;
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream10, (long) (short) 0, (-1L));
        java.util.List<java.lang.String> strList14 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        // The following exception was thrown during execution in test generation
        try {
            long long16 = org.apache.commons.io.IOUtils.skip(inputStream1, (-1L));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Skip count must be non-negative, actual: -1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(strList14);
    }

    @Test
    public void test1281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1281");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        java.nio.charset.Charset charset10 = null;
        java.util.List<java.lang.String> strList11 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset10);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.nio.charset.Charset charset13 = null;
        java.lang.String str14 = org.apache.commons.io.IOUtils.toString(inputStream1, charset13);
        java.io.Writer writer15 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer15);
        byte[] byteArray17 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        int int18 = org.apache.commons.io.IOUtils.length(byteArray17);
        java.io.Writer writer19 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(byteArray17, writer19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Writer.write(String)\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test1282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1282");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly(inputStream1);
        java.io.BufferedInputStream bufferedInputStream10 = org.apache.commons.io.IOUtils.buffer(inputStream1);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str12 = org.apache.commons.io.IOUtils.toString((java.io.InputStream) bufferedInputStream10, "");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream10);
    }

    @Test
    public void test1283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1283");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream4);
        java.io.InputStream inputStream7 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray8 = new byte[] {};
        int int9 = org.apache.commons.io.IOUtils.length(byteArray8);
        int int10 = org.apache.commons.io.IOUtils.read(inputStream7, byteArray8);
        byte[] byteArray11 = org.apache.commons.io.IOUtils.toByteArray(inputStream7);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer12 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream7, iOExceptionConsumer12);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream7);
        java.io.BufferedInputStream bufferedInputStream16 = org.apache.commons.io.IOUtils.buffer(inputStream7, (int) (byte) 10);
        boolean boolean17 = org.apache.commons.io.IOUtils.contentEquals(inputStream4, inputStream7);
        java.io.InputStream inputStream19 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray20 = new byte[] {};
        int int21 = org.apache.commons.io.IOUtils.length(byteArray20);
        int int22 = org.apache.commons.io.IOUtils.read(inputStream19, byteArray20);
        byte[] byteArray23 = org.apache.commons.io.IOUtils.toByteArray(inputStream19);
        byte[] byteArray25 = org.apache.commons.io.IOUtils.toByteArray(inputStream19, (int) (short) 0);
        long long27 = org.apache.commons.io.IOUtils.skip(inputStream19, 100L);
        java.io.InputStream inputStream28 = null;
        java.io.InputStream inputStream29 = null;
        java.io.OutputStream outputStream30 = null;
        byte[] byteArray33 = new byte[] {};
        int int34 = org.apache.commons.io.IOUtils.length(byteArray33);
        java.io.OutputStream outputStream35 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray33, outputStream35);
        long long37 = org.apache.commons.io.IOUtils.copyLarge(inputStream29, outputStream30, 0L, (long) (byte) -1, byteArray33);
        java.io.OutputStream outputStream38 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray33, outputStream38);
        org.apache.commons.io.IOUtils.readFully(inputStream28, byteArray33);
        int int41 = org.apache.commons.io.IOUtils.read(inputStream19, byteArray33);
        int int42 = org.apache.commons.io.IOUtils.read(inputStream7, byteArray33);
        int int45 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray33, 1, (int) (short) 0);
        java.io.InputStream inputStream47 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, (int) (short) 10);
        java.nio.charset.Charset charset48 = null;
        java.util.List<java.lang.String> strList49 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset48);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(inputStream7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(inputStream19);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(inputStream47);
        org.junit.Assert.assertNotNull(strList49);
    }

    @Test
    public void test1284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1284");
        java.nio.channels.ReadableByteChannel readableByteChannel0 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long2 = org.apache.commons.io.IOUtils.skip(readableByteChannel0, (long) 6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.nio.channels.ReadableByteChannel.read(java.nio.ByteBuffer)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1285");
        java.nio.charset.Charset charset1 = null;
        java.io.InputStream inputStream2 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "", charset1);
        java.util.List<java.lang.String> strList3 = org.apache.commons.io.IOUtils.readLines(inputStream2);
        java.io.OutputStream outputStream5 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList3, "\n", outputStream5);
        java.io.Writer writer8 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList3, "hi!", writer8);
        java.io.OutputStream outputStream11 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList3, "", outputStream11, "");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream2);
        org.junit.Assert.assertNotNull(strList3);
    }

    @Test
    public void test1286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1286");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream("\n");
        byte[] byteArray3 = org.apache.commons.io.IOUtils.toByteArray(inputStream1, (int) (byte) 0);
        java.io.InputStream inputStream5 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray6 = new byte[] {};
        int int7 = org.apache.commons.io.IOUtils.length(byteArray6);
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray6);
        byte[] byteArray9 = org.apache.commons.io.IOUtils.toByteArray(inputStream5);
        byte[] byteArray11 = org.apache.commons.io.IOUtils.toByteArray(inputStream5, (int) (short) 0);
        byte[] byteArray12 = new byte[] {};
        int int13 = org.apache.commons.io.IOUtils.length(byteArray12);
        org.apache.commons.io.IOUtils.readFully(inputStream5, byteArray12);
        org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray12);
        java.lang.String str16 = org.apache.commons.io.IOUtils.toString(byteArray12);
        java.lang.String str17 = org.apache.commons.io.IOUtils.toString(byteArray12);
        java.io.Writer writer18 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(byteArray12, writer18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Writer.write(String)\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertNotNull(inputStream5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
    }

    @Test
    public void test1287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1287");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.List<java.lang.String> strList3 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.Writer writer5 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList3, "hi!", writer5);
        java.io.Writer writer8 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList3, "\r\n", writer8);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(strList3);
    }

    @Test
    public void test1288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1288");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        long long9 = org.apache.commons.io.IOUtils.skip(inputStream1, (long) (byte) 100);
        java.lang.String str10 = org.apache.commons.io.IOUtils.toString(inputStream1);
        java.io.Writer writer11 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer11);
        long long14 = org.apache.commons.io.IOUtils.skip(inputStream1, (long) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            char[] charArray16 = org.apache.commons.io.IOUtils.toCharArray(inputStream1, "\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ?");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
    }

    @Test
    public void test1289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1289");
        java.io.Reader reader0 = null;
        java.io.Writer writer1 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long4 = org.apache.commons.io.IOUtils.copyLarge(reader0, writer1, (long) '\\', 100L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[], int, int)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1290");
        java.io.Reader reader0 = null;
        java.io.Writer writer1 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long4 = org.apache.commons.io.IOUtils.copyLarge(reader0, writer1, 1L, (long) 3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[], int, int)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1291");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.util.List<java.lang.String> strList4 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.OutputStream outputStream5 = null;
        long long6 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream5);
        java.io.OutputStream outputStream7 = null;
        java.io.InputStream inputStream11 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray12 = new byte[] {};
        int int13 = org.apache.commons.io.IOUtils.length(byteArray12);
        int int14 = org.apache.commons.io.IOUtils.read(inputStream11, byteArray12);
        long long15 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream7, (-1L), 1L, byteArray12);
        java.io.BufferedInputStream bufferedInputStream16 = org.apache.commons.io.IOUtils.buffer(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer17 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer17);
        java.lang.String str19 = org.apache.commons.io.IOUtils.toString(inputStream1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.String> strList21 = org.apache.commons.io.IOUtils.readLines(inputStream1, "");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(inputStream11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream16);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
    }

    @Test
    public void test1292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1292");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.nio.charset.Charset charset6 = null;
        java.util.List<java.lang.String> strList7 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset6);
        java.nio.charset.Charset charset8 = null;
        org.apache.commons.io.LineIterator lineIterator9 = org.apache.commons.io.IOUtils.lineIterator(inputStream1, charset8);
        java.io.InputStream inputStream11 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, 6);
        java.io.BufferedInputStream bufferedInputStream13 = org.apache.commons.io.IOUtils.buffer(inputStream11, 3);
        java.io.InputStream inputStream15 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray16 = org.apache.commons.io.IOUtils.toByteArray(inputStream15);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream15);
        java.util.List<java.lang.String> strList18 = org.apache.commons.io.IOUtils.readLines(inputStream15);
        java.io.OutputStream outputStream19 = null;
        long long20 = org.apache.commons.io.IOUtils.copyLarge(inputStream15, outputStream19);
        java.io.Writer writer21 = null;
        org.apache.commons.io.IOUtils.copy(inputStream15, writer21);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream15);
        java.io.InputStream inputStream25 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray26 = new byte[] {};
        int int27 = org.apache.commons.io.IOUtils.length(byteArray26);
        int int28 = org.apache.commons.io.IOUtils.read(inputStream25, byteArray26);
        byte[] byteArray29 = org.apache.commons.io.IOUtils.toByteArray(inputStream25);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer30 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream25, iOExceptionConsumer30);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream25);
        java.io.BufferedInputStream bufferedInputStream34 = org.apache.commons.io.IOUtils.buffer(inputStream25, (int) (byte) 10);
        java.io.InputStream inputStream36 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream25, (int) (byte) 1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer37 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream25, iOExceptionConsumer37);
        java.io.OutputStream outputStream39 = null;
        java.io.InputStream inputStream41 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray42 = new byte[] {};
        int int43 = org.apache.commons.io.IOUtils.length(byteArray42);
        int int44 = org.apache.commons.io.IOUtils.read(inputStream41, byteArray42);
        byte[] byteArray45 = org.apache.commons.io.IOUtils.toByteArray(inputStream41);
        java.io.InputStream inputStream47 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray48 = new byte[] {};
        int int49 = org.apache.commons.io.IOUtils.length(byteArray48);
        int int50 = org.apache.commons.io.IOUtils.read(inputStream47, byteArray48);
        byte[] byteArray51 = org.apache.commons.io.IOUtils.toByteArray(inputStream47);
        int int52 = org.apache.commons.io.IOUtils.length(byteArray51);
        org.apache.commons.io.IOUtils.readFully(inputStream41, byteArray51);
        long long54 = org.apache.commons.io.IOUtils.copyLarge(inputStream25, outputStream39, byteArray51);
        boolean boolean55 = org.apache.commons.io.IOUtils.contentEquals(inputStream15, inputStream25);
        java.io.BufferedInputStream bufferedInputStream56 = org.apache.commons.io.IOUtils.buffer(inputStream15);
        java.io.BufferedInputStream bufferedInputStream58 = org.apache.commons.io.IOUtils.buffer(inputStream15, (int) (short) 100);
        boolean boolean59 = org.apache.commons.io.IOUtils.contentEquals(inputStream11, inputStream15);
        java.nio.charset.Charset charset60 = null;
        char[] charArray61 = org.apache.commons.io.IOUtils.toCharArray(inputStream11, charset60);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray63 = org.apache.commons.io.IOUtils.toByteArray(inputStream11, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Unexpected read size. current: 0, expected: 1");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertNotNull(lineIterator9);
        org.junit.Assert.assertNotNull(inputStream11);
        org.junit.Assert.assertNotNull(bufferedInputStream13);
        org.junit.Assert.assertNotNull(inputStream15);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(inputStream25);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream34);
        org.junit.Assert.assertNotNull(inputStream36);
        org.junit.Assert.assertNotNull(inputStream41);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
        org.junit.Assert.assertNotNull(inputStream47);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(bufferedInputStream56);
        org.junit.Assert.assertNotNull(bufferedInputStream58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(charArray61);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray61), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray61), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray61), "[]");
    }

    @Test
    public void test1293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1293");
        java.io.Reader reader0 = null;
        java.io.Writer writer1 = null;
        java.io.Reader reader4 = null;
        char[] charArray5 = new char[] {};
        int int6 = org.apache.commons.io.IOUtils.length(charArray5);
        org.apache.commons.io.IOUtils.readFully(reader4, charArray5);
        int int8 = org.apache.commons.io.IOUtils.length(charArray5);
        // The following exception was thrown during execution in test generation
        try {
            long long9 = org.apache.commons.io.IOUtils.copyLarge(reader0, writer1, (long) 2, (long) (short) -1, charArray5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[], int, int)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test1294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1294");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream3 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1);
        java.io.Writer writer4 = null;
        java.nio.charset.Charset charset5 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer4, charset5);
        java.io.OutputStream outputStream7 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray("");
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray10);
        java.lang.String str12 = org.apache.commons.io.IOUtils.toString(byteArray10);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream7, byteArray10);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str15 = org.apache.commons.io.IOUtils.toString(byteArray10, "");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream3);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
    }

    @Test
    public void test1295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1295");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream3 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1);
        java.io.Writer writer4 = null;
        java.nio.charset.Charset charset5 = null;
        org.apache.commons.io.IOUtils.copy(inputStream3, writer4, charset5);
        org.apache.commons.io.function.IOConsumer<java.io.IOException> iOExceptionIOConsumer7 = null;
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream3, iOExceptionIOConsumer7);
        java.io.Writer writer9 = null;
        java.nio.charset.Charset charset10 = null;
        org.apache.commons.io.IOUtils.copy(inputStream3, writer9, charset10);
        java.io.Writer writer12 = null;
        org.apache.commons.io.IOUtils.copy(inputStream3, writer12);
        java.nio.charset.Charset charset14 = null;
        java.util.List<java.lang.String> strList15 = org.apache.commons.io.IOUtils.readLines(inputStream3, charset14);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.LineIterator lineIterator17 = org.apache.commons.io.IOUtils.lineIterator(inputStream3, "hi!");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: hi!");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream3);
        org.junit.Assert.assertNotNull(strList15);
    }

    @Test
    public void test1296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1296");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        java.io.BufferedInputStream bufferedInputStream6 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) ' ');
        org.apache.commons.io.IOUtils.skipFully(inputStream1, 0L);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer9 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer9);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str12 = org.apache.commons.io.IOUtils.toString(inputStream1, "");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(bufferedInputStream6);
    }

    @Test
    public void test1297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1297");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray(inputStream1, (int) (short) 0);
        java.io.BufferedInputStream bufferedInputStream8 = org.apache.commons.io.IOUtils.buffer(inputStream1);
        java.nio.charset.Charset charset9 = null;
        org.apache.commons.io.LineIterator lineIterator10 = org.apache.commons.io.IOUtils.lineIterator(inputStream1, charset9);
        org.apache.commons.io.IOUtils.closeQuietly(inputStream1);
        java.io.InputStream inputStream13 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray14 = new byte[] {};
        int int15 = org.apache.commons.io.IOUtils.length(byteArray14);
        int int16 = org.apache.commons.io.IOUtils.read(inputStream13, byteArray14);
        byte[] byteArray17 = org.apache.commons.io.IOUtils.toByteArray(inputStream13);
        java.nio.charset.Charset charset18 = null;
        java.util.List<java.lang.String> strList19 = org.apache.commons.io.IOUtils.readLines(inputStream13, charset18);
        java.nio.charset.Charset charset20 = null;
        org.apache.commons.io.LineIterator lineIterator21 = org.apache.commons.io.IOUtils.lineIterator(inputStream13, charset20);
        java.io.InputStream inputStream23 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream13, 6);
        java.io.BufferedInputStream bufferedInputStream25 = org.apache.commons.io.IOUtils.buffer(inputStream23, 3);
        boolean boolean26 = org.apache.commons.io.IOUtils.contentEquals(inputStream1, inputStream23);
        java.io.OutputStream outputStream27 = null;
        int int28 = org.apache.commons.io.IOUtils.copy(inputStream23, outputStream27);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream8);
        org.junit.Assert.assertNotNull(lineIterator10);
        org.junit.Assert.assertNotNull(inputStream13);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertNotNull(lineIterator21);
        org.junit.Assert.assertNotNull(inputStream23);
        org.junit.Assert.assertNotNull(bufferedInputStream25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
    }

    @Test
    public void test1298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1298");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly(inputStream1);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.nio.charset.Charset charset11 = null;
        org.apache.commons.io.LineIterator lineIterator12 = org.apache.commons.io.IOUtils.lineIterator(inputStream1, charset11);
        java.nio.charset.Charset charset13 = null;
        java.util.List<java.lang.String> strList14 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset13);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.String> strList16 = org.apache.commons.io.IOUtils.readLines(inputStream1, "");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(lineIterator12);
        org.junit.Assert.assertNotNull(strList14);
    }

    @Test
    public void test1299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1299");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        java.io.OutputStream outputStream10 = null;
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream10, (long) (short) 0, (-1L));
        char[] charArray14 = org.apache.commons.io.IOUtils.toCharArray(inputStream1);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        org.apache.commons.io.function.IOConsumer<java.io.IOException> iOExceptionIOConsumer16 = null;
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1, iOExceptionIOConsumer16);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str19 = org.apache.commons.io.IOUtils.toString(inputStream1, "\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ?");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[]");
    }

    @Test
    public void test1300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1300");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        java.io.OutputStream outputStream10 = null;
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream10, (long) (short) 0, (-1L));
        java.lang.String str14 = org.apache.commons.io.IOUtils.toString(inputStream1);
        java.io.BufferedInputStream bufferedInputStream16 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray18 = org.apache.commons.io.IOUtils.toByteArray((java.io.InputStream) bufferedInputStream16, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Unexpected read size. current: 0, expected: 32");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(bufferedInputStream16);
    }

    @Test
    public void test1301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1301");
        java.io.Reader reader0 = null;
        java.io.Writer writer1 = null;
        java.io.Reader reader2 = null;
        java.io.Reader reader3 = null;
        java.io.Reader reader4 = null;
        java.io.Writer writer5 = null;
        char[] charArray8 = new char[] {};
        int int9 = org.apache.commons.io.IOUtils.length(charArray8);
        java.io.Writer writer10 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray8, writer10);
        java.io.Writer writer12 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray8, writer12);
        long long14 = org.apache.commons.io.IOUtils.copyLarge(reader4, writer5, 0L, (long) (byte) 100, charArray8);
        int int15 = org.apache.commons.io.IOUtils.read(reader3, charArray8);
        int int16 = org.apache.commons.io.IOUtils.read(reader2, charArray8);
        // The following exception was thrown during execution in test generation
        try {
            long long17 = org.apache.commons.io.IOUtils.copyLarge(reader0, writer1, charArray8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[])\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test1302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1302");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        java.io.Writer writer10 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer10);
        org.apache.commons.io.IOUtils.closeQuietly(inputStream1);
        // The following exception was thrown during execution in test generation
        try {
            java.io.BufferedInputStream bufferedInputStream14 = org.apache.commons.io.IOUtils.buffer(inputStream1, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Buffer size <= 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
    }

    @Test
    public void test1303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1303");
        java.io.Reader reader0 = null;
        java.io.InputStream inputStream2 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray3 = new byte[] {};
        int int4 = org.apache.commons.io.IOUtils.length(byteArray3);
        int int5 = org.apache.commons.io.IOUtils.read(inputStream2, byteArray3);
        byte[] byteArray6 = org.apache.commons.io.IOUtils.toByteArray(inputStream2);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer7 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream2, iOExceptionConsumer7);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream2);
        java.io.BufferedInputStream bufferedInputStream11 = org.apache.commons.io.IOUtils.buffer(inputStream2, (int) (byte) 10);
        java.nio.charset.Charset charset12 = null;
        char[] charArray13 = org.apache.commons.io.IOUtils.toCharArray((java.io.InputStream) bufferedInputStream11, charset12);
        // The following exception was thrown during execution in test generation
        try {
            int int16 = org.apache.commons.io.IOUtils.read(reader0, charArray13, (-1), 2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[], int, int)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream11);
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[]");
    }

    @Test
    public void test1304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1304");
        java.io.Reader reader0 = null;
        java.io.Reader reader1 = null;
        java.io.Reader reader2 = null;
        java.io.Reader reader3 = null;
        java.io.Writer writer4 = null;
        char[] charArray7 = new char[] {};
        int int8 = org.apache.commons.io.IOUtils.length(charArray7);
        java.io.Writer writer9 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray7, writer9);
        java.io.Writer writer11 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray7, writer11);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(reader3, writer4, 0L, (long) (byte) 100, charArray7);
        int int14 = org.apache.commons.io.IOUtils.read(reader2, charArray7);
        int int15 = org.apache.commons.io.IOUtils.length(charArray7);
        java.io.Writer writer16 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray7, writer16);
        org.apache.commons.io.IOUtils.readFully(reader1, charArray7);
        int int19 = org.apache.commons.io.IOUtils.length(charArray7);
        // The following exception was thrown during execution in test generation
        try {
            int int22 = org.apache.commons.io.IOUtils.read(reader0, charArray7, 4, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[], int, int)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test1305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1305");
        java.io.Closeable closeable0 = null;
        java.io.Closeable[] closeableArray1 = new java.io.Closeable[] { closeable0 };
        org.apache.commons.io.IOUtils.closeQuietly(closeableArray1);
        org.apache.commons.io.IOUtils.closeQuietly(closeableArray1);
        org.apache.commons.io.IOUtils.closeQuietly(closeableArray1);
        int int5 = org.apache.commons.io.IOUtils.length((java.lang.Object[]) closeableArray1);
        org.apache.commons.io.IOUtils.closeQuietly(closeableArray1);
        org.apache.commons.io.IOUtils.closeQuietly(closeableArray1);
        org.junit.Assert.assertNotNull(closeableArray1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
    }

    @Test
    public void test1306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1306");
        // The following exception was thrown during execution in test generation
        try {
            java.io.InputStream inputStream2 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "hi!", "");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1307");
        java.io.Reader reader0 = null;
        java.io.Writer writer1 = null;
        java.io.Reader reader2 = null;
        java.io.Reader reader3 = null;
        java.io.Reader reader4 = null;
        java.io.Writer writer5 = null;
        char[] charArray8 = new char[] {};
        int int9 = org.apache.commons.io.IOUtils.length(charArray8);
        java.io.Writer writer10 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray8, writer10);
        java.io.Writer writer12 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray8, writer12);
        long long14 = org.apache.commons.io.IOUtils.copyLarge(reader4, writer5, 0L, (long) (byte) 100, charArray8);
        int int15 = org.apache.commons.io.IOUtils.read(reader3, charArray8);
        java.io.Writer writer16 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray8, writer16);
        org.apache.commons.io.IOUtils.readFully(reader2, charArray8);
        // The following exception was thrown during execution in test generation
        try {
            long long19 = org.apache.commons.io.IOUtils.copyLarge(reader0, writer1, charArray8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[])\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test1308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1308");
        java.io.Reader reader0 = null;
        java.nio.charset.Charset charset2 = null;
        java.io.InputStream inputStream3 = org.apache.commons.io.IOUtils.toInputStream("hi!", charset2);
        java.nio.charset.Charset charset4 = null;
        char[] charArray5 = org.apache.commons.io.IOUtils.toCharArray(inputStream3, charset4);
        // The following exception was thrown during execution in test generation
        try {
            int int8 = org.apache.commons.io.IOUtils.read(reader0, charArray5, (int) '#', (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[], int, int)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream3);
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "hi!");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "hi!");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[h, i, !]");
    }

    @Test
    public void test1309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1309");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        java.io.BufferedInputStream bufferedInputStream10 = org.apache.commons.io.IOUtils.buffer(inputStream1);
        org.apache.commons.io.function.IOConsumer<java.io.IOException> iOExceptionIOConsumer11 = null;
        org.apache.commons.io.IOUtils.close((java.io.Closeable) bufferedInputStream10, iOExceptionIOConsumer11);
        java.io.OutputStream outputStream13 = null;
        java.io.InputStream inputStream15 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream16 = null;
        java.io.InputStream inputStream19 = null;
        byte[] byteArray21 = org.apache.commons.io.IOUtils.toByteArray("");
        int int22 = org.apache.commons.io.IOUtils.read(inputStream19, byteArray21);
        long long23 = org.apache.commons.io.IOUtils.copyLarge(inputStream15, outputStream16, 0L, 0L, byteArray21);
        java.nio.charset.Charset charset24 = null;
        java.util.List<java.lang.String> strList25 = org.apache.commons.io.IOUtils.readLines(inputStream15, charset24);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream15);
        java.nio.charset.Charset charset27 = null;
        java.lang.String str28 = org.apache.commons.io.IOUtils.toString(inputStream15, charset27);
        java.io.Writer writer29 = null;
        org.apache.commons.io.IOUtils.copy(inputStream15, writer29);
        byte[] byteArray31 = org.apache.commons.io.IOUtils.toByteArray(inputStream15);
        java.lang.String str32 = org.apache.commons.io.IOUtils.toString(byteArray31);
        // The following exception was thrown during execution in test generation
        try {
            long long33 = org.apache.commons.io.IOUtils.copyLarge((java.io.InputStream) bufferedInputStream10, outputStream13, byteArray31);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Stream closed");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream10);
        org.junit.Assert.assertNotNull(inputStream15);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(strList25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
    }

    @Test
    public void test1310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1310");
        java.io.Reader reader0 = null;
        java.io.Writer writer1 = null;
        java.io.InputStream inputStream3 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream4 = null;
        java.io.InputStream inputStream6 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream7 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray12 = org.apache.commons.io.IOUtils.toByteArray("");
        int int13 = org.apache.commons.io.IOUtils.read(inputStream10, byteArray12);
        long long14 = org.apache.commons.io.IOUtils.copyLarge(inputStream6, outputStream7, 0L, 0L, byteArray12);
        long long15 = org.apache.commons.io.IOUtils.copyLarge(inputStream3, outputStream4, byteArray12);
        java.io.BufferedInputStream bufferedInputStream17 = org.apache.commons.io.IOUtils.buffer(inputStream3, (int) (byte) 10);
        org.apache.commons.io.IOUtils.closeQuietly(inputStream3);
        java.nio.charset.Charset charset19 = null;
        java.util.List<java.lang.String> strList20 = org.apache.commons.io.IOUtils.readLines(inputStream3, charset19);
        char[] charArray21 = org.apache.commons.io.IOUtils.toCharArray(inputStream3);
        // The following exception was thrown during execution in test generation
        try {
            long long22 = org.apache.commons.io.IOUtils.copyLarge(reader0, writer1, charArray21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[])\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream3);
        org.junit.Assert.assertNotNull(inputStream6);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream17);
        org.junit.Assert.assertNotNull(strList20);
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[]");
    }

    @Test
    public void test1311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1311");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        java.io.BufferedInputStream bufferedInputStream10 = org.apache.commons.io.IOUtils.buffer(inputStream1);
        long long12 = org.apache.commons.io.IOUtils.skip((java.io.InputStream) bufferedInputStream10, (long) (byte) 0);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) bufferedInputStream10);
        java.io.OutputStream outputStream14 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int15 = org.apache.commons.io.IOUtils.copy((java.io.InputStream) bufferedInputStream10, outputStream14);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Stream closed");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
    }

    @Test
    public void test1312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1312");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly(inputStream1);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.BufferedInputStream bufferedInputStream12 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) '#');
        java.nio.charset.Charset charset13 = null;
        java.util.List<java.lang.String> strList14 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset13);
        org.apache.commons.io.function.IOConsumer<java.io.IOException> iOExceptionIOConsumer15 = null;
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1, iOExceptionIOConsumer15);
        java.lang.String str17 = org.apache.commons.io.IOUtils.toString(inputStream1);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream12);
        org.junit.Assert.assertNotNull(strList14);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
    }

    @Test
    public void test1313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1313");
        char[] charArray0 = null;
        java.io.OutputStream outputStream1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(charArray0, outputStream1, "\r\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ??");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1314");
        char[] charArray0 = null;
        java.io.Writer writer1 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray0, writer1);
    }

    @Test
    public void test1315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1315");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        java.nio.charset.Charset charset10 = null;
        java.util.List<java.lang.String> strList11 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset10);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.nio.charset.Charset charset13 = null;
        java.lang.String str14 = org.apache.commons.io.IOUtils.toString(inputStream1, charset13);
        java.io.Writer writer15 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer15);
        byte[] byteArray17 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.LineIterator lineIterator19 = org.apache.commons.io.IOUtils.lineIterator(inputStream1, "\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ?");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
    }

    @Test
    public void test1316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1316");
        java.io.Reader reader0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.BufferedReader bufferedReader2 = org.apache.commons.io.IOUtils.buffer(reader0, 3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1317");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.nio.charset.Charset charset6 = null;
        java.util.List<java.lang.String> strList7 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset6);
        java.nio.charset.Charset charset8 = null;
        org.apache.commons.io.LineIterator lineIterator9 = org.apache.commons.io.IOUtils.lineIterator(inputStream1, charset8);
        java.io.InputStream inputStream11 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, 6);
        java.io.InputStream inputStream13 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray14 = new byte[] {};
        int int15 = org.apache.commons.io.IOUtils.length(byteArray14);
        int int16 = org.apache.commons.io.IOUtils.read(inputStream13, byteArray14);
        byte[] byteArray17 = org.apache.commons.io.IOUtils.toByteArray(inputStream13);
        byte[] byteArray18 = org.apache.commons.io.IOUtils.toByteArray(inputStream13);
        int int21 = org.apache.commons.io.IOUtils.read(inputStream11, byteArray18, (int) '#', 0);
        java.io.InputStream inputStream23 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream11, 10);
        java.io.InputStream inputStream24 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream11);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray26 = org.apache.commons.io.IOUtils.toByteArray(inputStream24, (long) 2);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Unexpected read size. current: 0, expected: 2");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertNotNull(lineIterator9);
        org.junit.Assert.assertNotNull(inputStream11);
        org.junit.Assert.assertNotNull(inputStream13);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(inputStream23);
        org.junit.Assert.assertNotNull(inputStream24);
    }

    @Test
    public void test1318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1318");
        java.nio.charset.Charset charset1 = null;
        java.io.InputStream inputStream2 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "", charset1);
        java.util.List<java.lang.String> strList3 = org.apache.commons.io.IOUtils.readLines(inputStream2);
        java.nio.charset.Charset charset4 = null;
        java.lang.String str5 = org.apache.commons.io.IOUtils.toString(inputStream2, charset4);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream2);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray8 = org.apache.commons.io.IOUtils.readFully(inputStream2, (int) '\\');
            org.junit.Assert.fail("Expected exception of type java.io.EOFException; message: Length to read: 92 actual: 0");
        } catch (java.io.EOFException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream2);
        org.junit.Assert.assertNotNull(strList3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
    }

    @Test
    public void test1319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1319");
        java.io.Reader reader0 = null;
        java.io.InputStream inputStream2 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray3 = new byte[] {};
        int int4 = org.apache.commons.io.IOUtils.length(byteArray3);
        int int5 = org.apache.commons.io.IOUtils.read(inputStream2, byteArray3);
        byte[] byteArray6 = org.apache.commons.io.IOUtils.toByteArray(inputStream2);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer7 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream2, iOExceptionConsumer7);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream2);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer10 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream2, iOExceptionConsumer10);
        java.nio.charset.Charset charset12 = null;
        char[] charArray13 = org.apache.commons.io.IOUtils.toCharArray(inputStream2, charset12);
        // The following exception was thrown during execution in test generation
        try {
            int int16 = org.apache.commons.io.IOUtils.read(reader0, charArray13, (int) (short) 10, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Length must not be negative: -1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[]");
    }

    @Test
    public void test1320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1320");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.util.List<java.lang.String> strList4 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer5 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer5);
        java.io.InputStream inputStream8 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray9 = org.apache.commons.io.IOUtils.toByteArray(inputStream8);
        int int10 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray9);
        java.io.Writer writer11 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(byteArray9, writer11, "\r\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ??");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertNotNull(inputStream8);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test1321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1321");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray5 = new byte[] {};
        int int6 = org.apache.commons.io.IOUtils.length(byteArray5);
        int int7 = org.apache.commons.io.IOUtils.read(inputStream4, byteArray5);
        byte[] byteArray8 = org.apache.commons.io.IOUtils.toByteArray(inputStream4);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer9 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream4, iOExceptionConsumer9);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream4);
        java.io.BufferedInputStream bufferedInputStream13 = org.apache.commons.io.IOUtils.buffer(inputStream4, (int) (byte) 10);
        boolean boolean14 = org.apache.commons.io.IOUtils.contentEquals(inputStream1, inputStream4);
        java.io.OutputStream outputStream15 = null;
        long long18 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream15, (long) (short) 0, (long) 2);
        char[] charArray19 = org.apache.commons.io.IOUtils.toCharArray(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly(inputStream1);
        java.io.InputStream inputStream22 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, (int) '4');
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[]");
        org.junit.Assert.assertNotNull(inputStream22);
    }

    @Test
    public void test1322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1322");
        java.io.Reader reader0 = null;
        java.io.InputStream inputStream2 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.BufferedInputStream bufferedInputStream4 = org.apache.commons.io.IOUtils.buffer(inputStream2, (int) ' ');
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer5 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream2, iOExceptionConsumer5);
        java.nio.charset.Charset charset7 = null;
        char[] charArray8 = org.apache.commons.io.IOUtils.toCharArray(inputStream2, charset7);
        int int9 = org.apache.commons.io.IOUtils.read(reader0, charArray8);
        java.io.OutputStream outputStream10 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(charArray8, outputStream10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.OutputStream.write(byte[])\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream2);
        org.junit.Assert.assertNotNull(bufferedInputStream4);
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test1323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1323");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        java.io.InputStream inputStream5 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1);
        java.nio.charset.Charset charset6 = null;
        org.apache.commons.io.LineIterator lineIterator7 = org.apache.commons.io.IOUtils.lineIterator(inputStream5, charset6);
        java.io.InputStream inputStream8 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream5);
        char[] charArray9 = org.apache.commons.io.IOUtils.toCharArray(inputStream5);
        java.io.OutputStream outputStream10 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(charArray9, outputStream10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.OutputStream.write(byte[])\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(inputStream5);
        org.junit.Assert.assertNotNull(lineIterator7);
        org.junit.Assert.assertNotNull(inputStream8);
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[]");
    }

    @Test
    public void test1324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1324");
        java.io.Reader reader0 = null;
        java.io.Reader reader1 = null;
        char[] charArray2 = new char[] {};
        int int3 = org.apache.commons.io.IOUtils.length(charArray2);
        java.io.Writer writer4 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray2, writer4);
        int int6 = org.apache.commons.io.IOUtils.length(charArray2);
        java.io.Writer writer7 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray2, writer7);
        int int9 = org.apache.commons.io.IOUtils.length(charArray2);
        int int10 = org.apache.commons.io.IOUtils.read(reader1, charArray2);
        int int11 = org.apache.commons.io.IOUtils.read(reader0, charArray2);
        int int12 = org.apache.commons.io.IOUtils.length(charArray2);
        java.io.OutputStream outputStream13 = null;
        java.nio.charset.Charset charset14 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(charArray2, outputStream13, charset14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.OutputStream.write(byte[])\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray2), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray2), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test1325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1325");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream5 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream6 = null;
        java.io.InputStream inputStream9 = null;
        byte[] byteArray11 = org.apache.commons.io.IOUtils.toByteArray("");
        int int12 = org.apache.commons.io.IOUtils.read(inputStream9, byteArray11);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream5, outputStream6, 0L, 0L, byteArray11);
        java.nio.charset.Charset charset14 = null;
        java.util.List<java.lang.String> strList15 = org.apache.commons.io.IOUtils.readLines(inputStream5, charset14);
        java.io.InputStream inputStream17 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream18 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray23 = org.apache.commons.io.IOUtils.toByteArray("");
        int int24 = org.apache.commons.io.IOUtils.read(inputStream21, byteArray23);
        long long25 = org.apache.commons.io.IOUtils.copyLarge(inputStream17, outputStream18, 0L, 0L, byteArray23);
        java.nio.charset.Charset charset26 = null;
        java.util.List<java.lang.String> strList27 = org.apache.commons.io.IOUtils.readLines(inputStream17, charset26);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream17);
        boolean boolean29 = org.apache.commons.io.IOUtils.contentEquals(inputStream5, inputStream17);
        java.io.OutputStream outputStream30 = null;
        java.io.InputStream inputStream32 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream33 = null;
        java.io.InputStream inputStream36 = null;
        byte[] byteArray38 = org.apache.commons.io.IOUtils.toByteArray("");
        int int39 = org.apache.commons.io.IOUtils.read(inputStream36, byteArray38);
        long long40 = org.apache.commons.io.IOUtils.copyLarge(inputStream32, outputStream33, 0L, 0L, byteArray38);
        long long41 = org.apache.commons.io.IOUtils.copyLarge(inputStream17, outputStream30, byteArray38);
        org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray38);
        java.io.OutputStream outputStream43 = null;
        long long44 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream43);
        org.apache.commons.io.function.IOConsumer<java.io.IOException> iOExceptionIOConsumer45 = null;
        org.apache.commons.io.IOUtils.close((java.io.Closeable) outputStream43, iOExceptionIOConsumer45);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(inputStream5);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(strList15);
        org.junit.Assert.assertNotNull(inputStream17);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(strList27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(inputStream32);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
    }

    @Test
    public void test1326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1326");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray(inputStream1, (int) (short) 0);
        java.io.BufferedInputStream bufferedInputStream8 = org.apache.commons.io.IOUtils.buffer(inputStream1);
        java.nio.charset.Charset charset9 = null;
        org.apache.commons.io.LineIterator lineIterator10 = org.apache.commons.io.IOUtils.lineIterator(inputStream1, charset9);
        char[] charArray11 = org.apache.commons.io.IOUtils.toCharArray(inputStream1);
        // The following exception was thrown during execution in test generation
        try {
            char[] charArray13 = org.apache.commons.io.IOUtils.toCharArray(inputStream1, "hi!");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: hi!");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream8);
        org.junit.Assert.assertNotNull(lineIterator10);
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[]");
    }

    @Test
    public void test1327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1327");
        java.nio.charset.Charset charset1 = null;
        java.io.InputStream inputStream2 = org.apache.commons.io.IOUtils.toInputStream("", charset1);
        java.nio.charset.Charset charset3 = null;
        java.lang.String str4 = org.apache.commons.io.IOUtils.toString(inputStream2, charset3);
        java.nio.charset.Charset charset5 = null;
        char[] charArray6 = org.apache.commons.io.IOUtils.toCharArray(inputStream2, charset5);
        java.io.Writer writer7 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray6, writer7);
        java.io.OutputStream outputStream9 = null;
        java.nio.charset.Charset charset10 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(charArray6, outputStream9, charset10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.OutputStream.write(byte[])\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[]");
    }

    @Test
    public void test1328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1328");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        java.io.Writer writer10 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer10);
        java.util.List<java.lang.String> strList12 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.InputStream inputStream14 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, 4);
        java.io.InputStream inputStream16 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream14, 100);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.LineIterator lineIterator18 = org.apache.commons.io.IOUtils.lineIterator(inputStream16, "hi!");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: hi!");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(strList12);
        org.junit.Assert.assertNotNull(inputStream14);
        org.junit.Assert.assertNotNull(inputStream16);
    }

    @Test
    public void test1329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1329");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.nio.charset.Charset charset6 = null;
        java.util.List<java.lang.String> strList7 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset6);
        java.nio.charset.Charset charset8 = null;
        org.apache.commons.io.LineIterator lineIterator9 = org.apache.commons.io.IOUtils.lineIterator(inputStream1, charset8);
        java.io.InputStream inputStream11 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, 6);
        java.io.BufferedInputStream bufferedInputStream13 = org.apache.commons.io.IOUtils.buffer(inputStream11, 3);
        java.io.InputStream inputStream15 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray16 = org.apache.commons.io.IOUtils.toByteArray(inputStream15);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream15);
        java.util.List<java.lang.String> strList18 = org.apache.commons.io.IOUtils.readLines(inputStream15);
        java.io.OutputStream outputStream19 = null;
        long long20 = org.apache.commons.io.IOUtils.copyLarge(inputStream15, outputStream19);
        java.io.Writer writer21 = null;
        org.apache.commons.io.IOUtils.copy(inputStream15, writer21);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream15);
        java.io.InputStream inputStream25 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray26 = new byte[] {};
        int int27 = org.apache.commons.io.IOUtils.length(byteArray26);
        int int28 = org.apache.commons.io.IOUtils.read(inputStream25, byteArray26);
        byte[] byteArray29 = org.apache.commons.io.IOUtils.toByteArray(inputStream25);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer30 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream25, iOExceptionConsumer30);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream25);
        java.io.BufferedInputStream bufferedInputStream34 = org.apache.commons.io.IOUtils.buffer(inputStream25, (int) (byte) 10);
        java.io.InputStream inputStream36 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream25, (int) (byte) 1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer37 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream25, iOExceptionConsumer37);
        java.io.OutputStream outputStream39 = null;
        java.io.InputStream inputStream41 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray42 = new byte[] {};
        int int43 = org.apache.commons.io.IOUtils.length(byteArray42);
        int int44 = org.apache.commons.io.IOUtils.read(inputStream41, byteArray42);
        byte[] byteArray45 = org.apache.commons.io.IOUtils.toByteArray(inputStream41);
        java.io.InputStream inputStream47 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray48 = new byte[] {};
        int int49 = org.apache.commons.io.IOUtils.length(byteArray48);
        int int50 = org.apache.commons.io.IOUtils.read(inputStream47, byteArray48);
        byte[] byteArray51 = org.apache.commons.io.IOUtils.toByteArray(inputStream47);
        int int52 = org.apache.commons.io.IOUtils.length(byteArray51);
        org.apache.commons.io.IOUtils.readFully(inputStream41, byteArray51);
        long long54 = org.apache.commons.io.IOUtils.copyLarge(inputStream25, outputStream39, byteArray51);
        boolean boolean55 = org.apache.commons.io.IOUtils.contentEquals(inputStream15, inputStream25);
        java.io.BufferedInputStream bufferedInputStream56 = org.apache.commons.io.IOUtils.buffer(inputStream15);
        java.io.BufferedInputStream bufferedInputStream58 = org.apache.commons.io.IOUtils.buffer(inputStream15, (int) (short) 100);
        boolean boolean59 = org.apache.commons.io.IOUtils.contentEquals(inputStream11, inputStream15);
        char[] charArray60 = org.apache.commons.io.IOUtils.toCharArray(inputStream15);
        java.io.OutputStream outputStream61 = null;
        int int62 = org.apache.commons.io.IOUtils.copy(inputStream15, outputStream61);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertNotNull(lineIterator9);
        org.junit.Assert.assertNotNull(inputStream11);
        org.junit.Assert.assertNotNull(bufferedInputStream13);
        org.junit.Assert.assertNotNull(inputStream15);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(inputStream25);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream34);
        org.junit.Assert.assertNotNull(inputStream36);
        org.junit.Assert.assertNotNull(inputStream41);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
        org.junit.Assert.assertNotNull(inputStream47);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(bufferedInputStream56);
        org.junit.Assert.assertNotNull(bufferedInputStream58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(charArray60);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray60), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray60), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray60), "[]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
    }

    @Test
    public void test1330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1330");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        java.io.OutputStream outputStream10 = null;
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream10, (long) (short) 0, (-1L));
        java.lang.String str14 = org.apache.commons.io.IOUtils.toString(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly(inputStream1);
        java.io.BufferedInputStream bufferedInputStream17 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 100);
        java.lang.Class<?> wildcardClass18 = bufferedInputStream17.getClass();
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(bufferedInputStream17);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test1331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1331");
        java.nio.channels.ReadableByteChannel readableByteChannel0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.skipFully(readableByteChannel0, (long) 2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.nio.channels.ReadableByteChannel.read(java.nio.ByteBuffer)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1332");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream5 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray("");
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray10);
        long long12 = org.apache.commons.io.IOUtils.copyLarge(inputStream4, outputStream5, 0L, 0L, byteArray10);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, byteArray10);
        java.io.BufferedInputStream bufferedInputStream15 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.io.InputStream inputStream17 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray18 = org.apache.commons.io.IOUtils.toByteArray(inputStream17);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream17);
        java.io.InputStream inputStream21 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream22 = null;
        java.io.InputStream inputStream25 = null;
        byte[] byteArray27 = org.apache.commons.io.IOUtils.toByteArray("");
        int int28 = org.apache.commons.io.IOUtils.read(inputStream25, byteArray27);
        long long29 = org.apache.commons.io.IOUtils.copyLarge(inputStream21, outputStream22, 0L, 0L, byteArray27);
        java.nio.charset.Charset charset30 = null;
        java.util.List<java.lang.String> strList31 = org.apache.commons.io.IOUtils.readLines(inputStream21, charset30);
        java.io.InputStream inputStream33 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream34 = null;
        java.io.InputStream inputStream37 = null;
        byte[] byteArray39 = org.apache.commons.io.IOUtils.toByteArray("");
        int int40 = org.apache.commons.io.IOUtils.read(inputStream37, byteArray39);
        long long41 = org.apache.commons.io.IOUtils.copyLarge(inputStream33, outputStream34, 0L, 0L, byteArray39);
        java.nio.charset.Charset charset42 = null;
        java.util.List<java.lang.String> strList43 = org.apache.commons.io.IOUtils.readLines(inputStream33, charset42);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream33);
        boolean boolean45 = org.apache.commons.io.IOUtils.contentEquals(inputStream21, inputStream33);
        java.io.OutputStream outputStream46 = null;
        java.io.InputStream inputStream48 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream49 = null;
        java.io.InputStream inputStream52 = null;
        byte[] byteArray54 = org.apache.commons.io.IOUtils.toByteArray("");
        int int55 = org.apache.commons.io.IOUtils.read(inputStream52, byteArray54);
        long long56 = org.apache.commons.io.IOUtils.copyLarge(inputStream48, outputStream49, 0L, 0L, byteArray54);
        long long57 = org.apache.commons.io.IOUtils.copyLarge(inputStream33, outputStream46, byteArray54);
        org.apache.commons.io.IOUtils.readFully(inputStream17, byteArray54);
        org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray54);
        java.lang.String str60 = org.apache.commons.io.IOUtils.toString(inputStream1);
        java.io.BufferedInputStream bufferedInputStream62 = org.apache.commons.io.IOUtils.buffer(inputStream1, 100);
        java.io.OutputStream outputStream63 = null;
        java.io.InputStream inputStream66 = null;
        byte[] byteArray68 = org.apache.commons.io.IOUtils.toByteArray("");
        int int69 = org.apache.commons.io.IOUtils.read(inputStream66, byteArray68);
        java.lang.String str70 = org.apache.commons.io.IOUtils.toString(byteArray68);
        long long71 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream63, (-1L), (long) (short) -1, byteArray68);
        java.io.InputStream inputStream72 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1);
        java.lang.String str73 = org.apache.commons.io.IOUtils.toString(inputStream72);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream72);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream15);
        org.junit.Assert.assertNotNull(inputStream17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(inputStream21);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNotNull(strList31);
        org.junit.Assert.assertNotNull(inputStream33);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertNotNull(strList43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(inputStream48);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(bufferedInputStream62);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 0L + "'", long71 == 0L);
        org.junit.Assert.assertNotNull(inputStream72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
    }

    @Test
    public void test1333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1333");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.util.List<java.lang.String> strList4 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.OutputStream outputStream6 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList4, "\n", outputStream6);
        java.io.Writer writer9 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList4, "hi!", writer9);
        java.io.OutputStream outputStream12 = null;
        java.nio.charset.Charset charset13 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList4, "\n", outputStream12, charset13);
        java.io.Writer writer16 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList4, "\n", writer16);
        java.io.OutputStream outputStream19 = null;
        java.nio.charset.Charset charset20 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList4, "", outputStream19, charset20);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(strList4);
    }

    @Test
    public void test1334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1334");
        java.io.Reader reader0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.BufferedReader bufferedReader2 = org.apache.commons.io.IOUtils.buffer(reader0, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1335");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream3 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1);
        java.io.Writer writer4 = null;
        java.nio.charset.Charset charset5 = null;
        org.apache.commons.io.IOUtils.copy(inputStream3, writer4, charset5);
        org.apache.commons.io.function.IOConsumer<java.io.IOException> iOExceptionIOConsumer7 = null;
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream3, iOExceptionIOConsumer7);
        java.io.Writer writer9 = null;
        java.nio.charset.Charset charset10 = null;
        org.apache.commons.io.IOUtils.copy(inputStream3, writer9, charset10);
        java.io.Writer writer12 = null;
        org.apache.commons.io.IOUtils.copy(inputStream3, writer12);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.String> strList15 = org.apache.commons.io.IOUtils.readLines(inputStream3, "");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream3);
    }

    @Test
    public void test1336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1336");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.BufferedInputStream bufferedInputStream10 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.io.InputStream inputStream12 = org.apache.commons.io.IOUtils.toBufferedInputStream((java.io.InputStream) bufferedInputStream10, (int) '#');
        java.nio.charset.Charset charset13 = null;
        java.lang.String str14 = org.apache.commons.io.IOUtils.toString((java.io.InputStream) bufferedInputStream10, charset13);
        java.io.Writer writer15 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.copy((java.io.InputStream) bufferedInputStream10, writer15, "\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ?");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream10);
        org.junit.Assert.assertNotNull(inputStream12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
    }

    @Test
    public void test1337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1337");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.BufferedInputStream bufferedInputStream10 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        byte[] byteArray11 = null;
        org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray11, (int) '4', 0);
        java.lang.String str15 = org.apache.commons.io.IOUtils.toString(inputStream1);
        java.util.List<java.lang.String> strList16 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.OutputStream outputStream18 = null;
        java.nio.charset.Charset charset19 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList16, "\n", outputStream18, charset19);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream10);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(strList16);
    }

    @Test
    public void test1338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1338");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        java.io.OutputStream outputStream10 = null;
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream10, (long) (short) 0, (-1L));
        java.lang.String str14 = org.apache.commons.io.IOUtils.toString(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly(inputStream1);
        java.io.BufferedInputStream bufferedInputStream17 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) '\\');
        java.io.BufferedInputStream bufferedInputStream18 = org.apache.commons.io.IOUtils.buffer(inputStream1);
        java.lang.Class<?> wildcardClass19 = inputStream1.getClass();
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(bufferedInputStream17);
        org.junit.Assert.assertNotNull(bufferedInputStream18);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test1339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1339");
        java.io.Reader reader0 = null;
        java.io.Writer writer1 = null;
        java.io.Reader reader4 = null;
        java.io.Reader reader5 = null;
        java.io.Reader reader6 = null;
        java.io.Reader reader7 = null;
        java.io.Writer writer8 = null;
        char[] charArray11 = new char[] {};
        int int12 = org.apache.commons.io.IOUtils.length(charArray11);
        java.io.Writer writer13 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray11, writer13);
        java.io.Writer writer15 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray11, writer15);
        long long17 = org.apache.commons.io.IOUtils.copyLarge(reader7, writer8, 0L, (long) (byte) 100, charArray11);
        int int18 = org.apache.commons.io.IOUtils.read(reader6, charArray11);
        int int19 = org.apache.commons.io.IOUtils.length(charArray11);
        int int20 = org.apache.commons.io.IOUtils.read(reader5, charArray11);
        org.apache.commons.io.IOUtils.readFully(reader4, charArray11);
        java.io.Writer writer22 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray11, writer22);
        // The following exception was thrown during execution in test generation
        try {
            long long24 = org.apache.commons.io.IOUtils.copyLarge(reader0, writer1, (long) (byte) 100, (long) 3, charArray11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[], int, int)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    }

    @Test
    public void test1340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1340");
        java.io.Reader reader0 = null;
        java.io.Writer writer1 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long4 = org.apache.commons.io.IOUtils.copyLarge(reader0, writer1, (long) (byte) 100, (long) 6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[], int, int)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1341");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        java.nio.charset.Charset charset10 = null;
        java.util.List<java.lang.String> strList11 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset10);
        java.io.InputStream inputStream13 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream14 = null;
        java.io.InputStream inputStream17 = null;
        byte[] byteArray19 = org.apache.commons.io.IOUtils.toByteArray("");
        int int20 = org.apache.commons.io.IOUtils.read(inputStream17, byteArray19);
        long long21 = org.apache.commons.io.IOUtils.copyLarge(inputStream13, outputStream14, 0L, 0L, byteArray19);
        java.nio.charset.Charset charset22 = null;
        java.util.List<java.lang.String> strList23 = org.apache.commons.io.IOUtils.readLines(inputStream13, charset22);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream13);
        boolean boolean25 = org.apache.commons.io.IOUtils.contentEquals(inputStream1, inputStream13);
        java.io.OutputStream outputStream26 = null;
        java.io.InputStream inputStream28 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream29 = null;
        java.io.InputStream inputStream32 = null;
        byte[] byteArray34 = org.apache.commons.io.IOUtils.toByteArray("");
        int int35 = org.apache.commons.io.IOUtils.read(inputStream32, byteArray34);
        long long36 = org.apache.commons.io.IOUtils.copyLarge(inputStream28, outputStream29, 0L, 0L, byteArray34);
        long long37 = org.apache.commons.io.IOUtils.copyLarge(inputStream13, outputStream26, byteArray34);
        java.io.BufferedInputStream bufferedInputStream38 = org.apache.commons.io.IOUtils.buffer(inputStream13);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.LineIterator lineIterator40 = org.apache.commons.io.IOUtils.lineIterator(inputStream13, "\r\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ??");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertNotNull(inputStream13);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(strList23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(inputStream28);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream38);
    }

    @Test
    public void test1342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1342");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray(inputStream1, (int) (short) 0);
        long long9 = org.apache.commons.io.IOUtils.skip(inputStream1, 100L);
        java.io.InputStream inputStream10 = null;
        java.io.InputStream inputStream11 = null;
        java.io.OutputStream outputStream12 = null;
        byte[] byteArray15 = new byte[] {};
        int int16 = org.apache.commons.io.IOUtils.length(byteArray15);
        java.io.OutputStream outputStream17 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray15, outputStream17);
        long long19 = org.apache.commons.io.IOUtils.copyLarge(inputStream11, outputStream12, 0L, (long) (byte) -1, byteArray15);
        java.io.OutputStream outputStream20 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray15, outputStream20);
        org.apache.commons.io.IOUtils.readFully(inputStream10, byteArray15);
        int int23 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray15);
        java.io.OutputStream outputStream24 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray15, outputStream24);
        java.lang.String str26 = org.apache.commons.io.IOUtils.toString(byteArray15);
        int int27 = org.apache.commons.io.IOUtils.length(byteArray15);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
    }

    @Test
    public void test1343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1343");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.nio.charset.Charset charset6 = null;
        java.util.List<java.lang.String> strList7 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset6);
        java.nio.charset.Charset charset8 = null;
        org.apache.commons.io.LineIterator lineIterator9 = org.apache.commons.io.IOUtils.lineIterator(inputStream1, charset8);
        java.io.InputStream inputStream11 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, 6);
        java.io.InputStream inputStream13 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray14 = new byte[] {};
        int int15 = org.apache.commons.io.IOUtils.length(byteArray14);
        int int16 = org.apache.commons.io.IOUtils.read(inputStream13, byteArray14);
        byte[] byteArray17 = org.apache.commons.io.IOUtils.toByteArray(inputStream13);
        byte[] byteArray18 = org.apache.commons.io.IOUtils.toByteArray(inputStream13);
        int int21 = org.apache.commons.io.IOUtils.read(inputStream11, byteArray18, (int) '#', 0);
        java.io.InputStream inputStream23 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream11, 10);
        java.io.OutputStream outputStream24 = null;
        long long25 = org.apache.commons.io.IOUtils.copyLarge(inputStream23, outputStream24);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertNotNull(lineIterator9);
        org.junit.Assert.assertNotNull(inputStream11);
        org.junit.Assert.assertNotNull(inputStream13);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(inputStream23);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
    }

    @Test
    public void test1344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1344");
        java.io.InputStream inputStream0 = null;
        java.io.OutputStream outputStream1 = null;
        byte[] byteArray4 = new byte[] {};
        int int5 = org.apache.commons.io.IOUtils.length(byteArray4);
        java.io.OutputStream outputStream6 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray4, outputStream6);
        long long8 = org.apache.commons.io.IOUtils.copyLarge(inputStream0, outputStream1, 0L, (long) (byte) -1, byteArray4);
        java.io.Writer writer9 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(byteArray4, writer9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Writer.write(String)\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
    }

    @Test
    public void test1345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1345");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream5 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray("");
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray10);
        long long12 = org.apache.commons.io.IOUtils.copyLarge(inputStream4, outputStream5, 0L, 0L, byteArray10);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, byteArray10);
        java.io.BufferedInputStream bufferedInputStream15 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.nio.charset.Charset charset16 = null;
        java.util.List<java.lang.String> strList17 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset16);
        java.io.OutputStream outputStream18 = null;
        long long21 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream18, 0L, (long) 0);
        java.nio.charset.Charset charset22 = null;
        char[] charArray23 = org.apache.commons.io.IOUtils.toCharArray(inputStream1, charset22);
        java.io.InputStream inputStream25 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream25);
        java.io.InputStream inputStream27 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream25);
        java.lang.String str28 = org.apache.commons.io.IOUtils.toString(inputStream25);
        java.io.InputStream inputStream29 = null;
        byte[] byteArray31 = org.apache.commons.io.IOUtils.toByteArray("");
        int int32 = org.apache.commons.io.IOUtils.read(inputStream29, byteArray31);
        org.apache.commons.io.IOUtils.readFully(inputStream25, byteArray31);
        int int34 = org.apache.commons.io.IOUtils.length(byteArray31);
        org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray31);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str37 = org.apache.commons.io.IOUtils.toString(inputStream1, "hi!");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: hi!");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream15);
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[]");
        org.junit.Assert.assertNotNull(inputStream25);
        org.junit.Assert.assertNotNull(inputStream27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
    }

    @Test
    public void test1346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1346");
        java.io.OutputStream outputStream1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write("\r\n", outputStream1, "hi!");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: hi!");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1347");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.List<java.lang.String> strList3 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        long long5 = org.apache.commons.io.IOUtils.skip(inputStream1, (long) '/');
        java.nio.charset.Charset charset6 = null;
        java.lang.String str7 = org.apache.commons.io.IOUtils.toString(inputStream1, charset6);
        byte[] byteArray8 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.io.Writer writer9 = null;
        java.nio.charset.Charset charset10 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(byteArray8, writer9, charset10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Writer.write(String)\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(strList3);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
    }

    @Test
    public void test1348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1348");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.util.List<java.lang.String> strList4 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.OutputStream outputStream5 = null;
        long long6 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream5);
        java.io.Writer writer7 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer7);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream11 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray12 = new byte[] {};
        int int13 = org.apache.commons.io.IOUtils.length(byteArray12);
        int int14 = org.apache.commons.io.IOUtils.read(inputStream11, byteArray12);
        byte[] byteArray15 = org.apache.commons.io.IOUtils.toByteArray(inputStream11);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer16 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream11, iOExceptionConsumer16);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream11);
        java.io.BufferedInputStream bufferedInputStream20 = org.apache.commons.io.IOUtils.buffer(inputStream11, (int) (byte) 10);
        java.io.InputStream inputStream22 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream11, (int) (byte) 1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer23 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream11, iOExceptionConsumer23);
        java.io.OutputStream outputStream25 = null;
        java.io.InputStream inputStream27 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray28 = new byte[] {};
        int int29 = org.apache.commons.io.IOUtils.length(byteArray28);
        int int30 = org.apache.commons.io.IOUtils.read(inputStream27, byteArray28);
        byte[] byteArray31 = org.apache.commons.io.IOUtils.toByteArray(inputStream27);
        java.io.InputStream inputStream33 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray34 = new byte[] {};
        int int35 = org.apache.commons.io.IOUtils.length(byteArray34);
        int int36 = org.apache.commons.io.IOUtils.read(inputStream33, byteArray34);
        byte[] byteArray37 = org.apache.commons.io.IOUtils.toByteArray(inputStream33);
        int int38 = org.apache.commons.io.IOUtils.length(byteArray37);
        org.apache.commons.io.IOUtils.readFully(inputStream27, byteArray37);
        long long40 = org.apache.commons.io.IOUtils.copyLarge(inputStream11, outputStream25, byteArray37);
        boolean boolean41 = org.apache.commons.io.IOUtils.contentEquals(inputStream1, inputStream11);
        java.io.BufferedInputStream bufferedInputStream42 = org.apache.commons.io.IOUtils.buffer(inputStream1);
        java.io.BufferedInputStream bufferedInputStream44 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (short) 100);
        java.io.InputStream inputStream46 = org.apache.commons.io.IOUtils.toInputStream("\n");
        byte[] byteArray48 = org.apache.commons.io.IOUtils.toByteArray(inputStream46, (int) (byte) 0);
        java.io.InputStream inputStream50 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray51 = new byte[] {};
        int int52 = org.apache.commons.io.IOUtils.length(byteArray51);
        int int53 = org.apache.commons.io.IOUtils.read(inputStream50, byteArray51);
        byte[] byteArray54 = org.apache.commons.io.IOUtils.toByteArray(inputStream50);
        byte[] byteArray56 = org.apache.commons.io.IOUtils.toByteArray(inputStream50, (int) (short) 0);
        byte[] byteArray57 = new byte[] {};
        int int58 = org.apache.commons.io.IOUtils.length(byteArray57);
        org.apache.commons.io.IOUtils.readFully(inputStream50, byteArray57);
        org.apache.commons.io.IOUtils.readFully(inputStream46, byteArray57);
        boolean boolean61 = org.apache.commons.io.IOUtils.contentEquals(inputStream1, inputStream46);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer62 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream46, iOExceptionConsumer62);
        java.io.InputStream inputStream64 = null;
        java.io.OutputStream outputStream65 = null;
        byte[] byteArray68 = new byte[] {};
        int int69 = org.apache.commons.io.IOUtils.length(byteArray68);
        java.io.OutputStream outputStream70 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray68, outputStream70);
        long long72 = org.apache.commons.io.IOUtils.copyLarge(inputStream64, outputStream65, 0L, (long) (byte) -1, byteArray68);
        java.io.OutputStream outputStream73 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray68, outputStream73);
        org.apache.commons.io.IOUtils.readFully(inputStream46, byteArray68);
        // The following exception was thrown during execution in test generation
        try {
            char[] charArray77 = org.apache.commons.io.IOUtils.toCharArray(inputStream46, "\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ?");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(inputStream11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream20);
        org.junit.Assert.assertNotNull(inputStream22);
        org.junit.Assert.assertNotNull(inputStream27);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(inputStream33);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(bufferedInputStream42);
        org.junit.Assert.assertNotNull(bufferedInputStream44);
        org.junit.Assert.assertNotNull(inputStream46);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertNotNull(inputStream50);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 0L + "'", long72 == 0L);
    }

    @Test
    public void test1349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1349");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream5 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray("");
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray10);
        long long12 = org.apache.commons.io.IOUtils.copyLarge(inputStream4, outputStream5, 0L, 0L, byteArray10);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, byteArray10);
        java.io.BufferedInputStream bufferedInputStream15 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.io.InputStream inputStream17 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray18 = org.apache.commons.io.IOUtils.toByteArray(inputStream17);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream17);
        java.io.InputStream inputStream21 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream22 = null;
        java.io.InputStream inputStream25 = null;
        byte[] byteArray27 = org.apache.commons.io.IOUtils.toByteArray("");
        int int28 = org.apache.commons.io.IOUtils.read(inputStream25, byteArray27);
        long long29 = org.apache.commons.io.IOUtils.copyLarge(inputStream21, outputStream22, 0L, 0L, byteArray27);
        java.nio.charset.Charset charset30 = null;
        java.util.List<java.lang.String> strList31 = org.apache.commons.io.IOUtils.readLines(inputStream21, charset30);
        java.io.InputStream inputStream33 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream34 = null;
        java.io.InputStream inputStream37 = null;
        byte[] byteArray39 = org.apache.commons.io.IOUtils.toByteArray("");
        int int40 = org.apache.commons.io.IOUtils.read(inputStream37, byteArray39);
        long long41 = org.apache.commons.io.IOUtils.copyLarge(inputStream33, outputStream34, 0L, 0L, byteArray39);
        java.nio.charset.Charset charset42 = null;
        java.util.List<java.lang.String> strList43 = org.apache.commons.io.IOUtils.readLines(inputStream33, charset42);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream33);
        boolean boolean45 = org.apache.commons.io.IOUtils.contentEquals(inputStream21, inputStream33);
        java.io.OutputStream outputStream46 = null;
        java.io.InputStream inputStream48 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream49 = null;
        java.io.InputStream inputStream52 = null;
        byte[] byteArray54 = org.apache.commons.io.IOUtils.toByteArray("");
        int int55 = org.apache.commons.io.IOUtils.read(inputStream52, byteArray54);
        long long56 = org.apache.commons.io.IOUtils.copyLarge(inputStream48, outputStream49, 0L, 0L, byteArray54);
        long long57 = org.apache.commons.io.IOUtils.copyLarge(inputStream33, outputStream46, byteArray54);
        org.apache.commons.io.IOUtils.readFully(inputStream17, byteArray54);
        org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray54);
        java.lang.String str60 = org.apache.commons.io.IOUtils.toString(inputStream1);
        java.io.BufferedInputStream bufferedInputStream62 = org.apache.commons.io.IOUtils.buffer(inputStream1, 100);
        java.io.OutputStream outputStream63 = null;
        java.io.InputStream inputStream66 = null;
        byte[] byteArray68 = org.apache.commons.io.IOUtils.toByteArray("");
        int int69 = org.apache.commons.io.IOUtils.read(inputStream66, byteArray68);
        java.lang.String str70 = org.apache.commons.io.IOUtils.toString(byteArray68);
        long long71 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream63, (-1L), (long) (short) -1, byteArray68);
        int int72 = org.apache.commons.io.IOUtils.length(byteArray68);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream15);
        org.junit.Assert.assertNotNull(inputStream17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(inputStream21);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNotNull(strList31);
        org.junit.Assert.assertNotNull(inputStream33);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertNotNull(strList43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(inputStream48);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(bufferedInputStream62);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 0L + "'", long71 == 0L);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
    }

    @Test
    public void test1350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1350");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        java.io.Writer writer10 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer10);
        java.util.List<java.lang.String> strList12 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.InputStream inputStream13 = null;
        java.io.OutputStream outputStream14 = null;
        byte[] byteArray17 = new byte[] {};
        int int18 = org.apache.commons.io.IOUtils.length(byteArray17);
        java.io.OutputStream outputStream19 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray17, outputStream19);
        long long21 = org.apache.commons.io.IOUtils.copyLarge(inputStream13, outputStream14, 0L, (long) (byte) -1, byteArray17);
        java.io.OutputStream outputStream22 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray17, outputStream22);
        int int24 = org.apache.commons.io.IOUtils.length(byteArray17);
        java.io.OutputStream outputStream25 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray17, outputStream25);
        int int27 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray17);
        java.io.OutputStream outputStream28 = null;
        java.io.InputStream inputStream30 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray31 = new byte[] {};
        int int32 = org.apache.commons.io.IOUtils.length(byteArray31);
        int int33 = org.apache.commons.io.IOUtils.read(inputStream30, byteArray31);
        byte[] byteArray34 = org.apache.commons.io.IOUtils.toByteArray(inputStream30);
        byte[] byteArray36 = org.apache.commons.io.IOUtils.toByteArray(inputStream30, (int) (short) 0);
        long long38 = org.apache.commons.io.IOUtils.skip(inputStream30, 100L);
        java.io.InputStream inputStream39 = null;
        java.io.InputStream inputStream40 = null;
        java.io.OutputStream outputStream41 = null;
        byte[] byteArray44 = new byte[] {};
        int int45 = org.apache.commons.io.IOUtils.length(byteArray44);
        java.io.OutputStream outputStream46 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray44, outputStream46);
        long long48 = org.apache.commons.io.IOUtils.copyLarge(inputStream40, outputStream41, 0L, (long) (byte) -1, byteArray44);
        java.io.OutputStream outputStream49 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray44, outputStream49);
        org.apache.commons.io.IOUtils.readFully(inputStream39, byteArray44);
        int int52 = org.apache.commons.io.IOUtils.read(inputStream30, byteArray44);
        java.io.OutputStream outputStream53 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray44, outputStream53);
        java.lang.String str55 = org.apache.commons.io.IOUtils.toString(byteArray44);
        long long56 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream28, byteArray44);
        int int57 = org.apache.commons.io.IOUtils.length(byteArray44);
        java.io.Writer writer58 = null;
        java.nio.charset.Charset charset59 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(byteArray44, writer58, charset59);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Writer.write(String)\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(strList12);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(inputStream30);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
    }

    @Test
    public void test1351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1351");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream3 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1);
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream3);
        java.io.BufferedInputStream bufferedInputStream6 = org.apache.commons.io.IOUtils.buffer(inputStream4, 3);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.InputStream) bufferedInputStream6);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray9 = org.apache.commons.io.IOUtils.toByteArray((java.io.InputStream) bufferedInputStream6, 100);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Stream closed");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream3);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(bufferedInputStream6);
    }

    @Test
    public void test1352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1352");
        java.io.Reader reader0 = null;
        char[] charArray1 = new char[] {};
        int int2 = org.apache.commons.io.IOUtils.length(charArray1);
        java.io.Writer writer3 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray1, writer3);
        int int5 = org.apache.commons.io.IOUtils.read(reader0, charArray1);
        java.io.Writer writer6 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray1, writer6);
        java.io.OutputStream outputStream8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(charArray1, outputStream8, "\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ?");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray1);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray1), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray1), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray1), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test1353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1353");
        java.io.Reader reader0 = null;
        char[] charArray1 = null;
        org.apache.commons.io.IOUtils.readFully(reader0, charArray1, (int) (short) 0, 0);
    }

    @Test
    public void test1354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1354");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        java.nio.charset.Charset charset10 = null;
        java.util.List<java.lang.String> strList11 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset10);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream14 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, (int) (byte) 0);
        java.nio.charset.Charset charset15 = null;
        org.apache.commons.io.LineIterator lineIterator16 = org.apache.commons.io.IOUtils.lineIterator(inputStream1, charset15);
        java.io.OutputStream outputStream17 = null;
        long long18 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream17);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertNotNull(inputStream14);
        org.junit.Assert.assertNotNull(lineIterator16);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
    }

    @Test
    public void test1355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1355");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream5 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray("");
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray10);
        long long12 = org.apache.commons.io.IOUtils.copyLarge(inputStream4, outputStream5, 0L, 0L, byteArray10);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, byteArray10);
        java.io.BufferedInputStream bufferedInputStream15 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.nio.charset.Charset charset16 = null;
        java.util.List<java.lang.String> strList17 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset16);
        java.io.OutputStream outputStream18 = null;
        long long21 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream18, 0L, (long) 0);
        java.io.BufferedInputStream bufferedInputStream22 = org.apache.commons.io.IOUtils.buffer(inputStream1);
        java.io.BufferedInputStream bufferedInputStream23 = org.apache.commons.io.IOUtils.buffer(inputStream1);
        java.io.BufferedInputStream bufferedInputStream25 = org.apache.commons.io.IOUtils.buffer((java.io.InputStream) bufferedInputStream23, 4);
        byte[] byteArray26 = org.apache.commons.io.IOUtils.toByteArray((java.io.InputStream) bufferedInputStream25);
        java.io.OutputStream outputStream27 = null;
        long long29 = org.apache.commons.io.IOUtils.copy((java.io.InputStream) bufferedInputStream25, outputStream27, (int) (short) 1);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream15);
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream22);
        org.junit.Assert.assertNotNull(bufferedInputStream23);
        org.junit.Assert.assertNotNull(bufferedInputStream25);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
    }

    @Test
    public void test1356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1356");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        java.nio.charset.Charset charset10 = null;
        java.util.List<java.lang.String> strList11 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset10);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.nio.charset.Charset charset13 = null;
        java.lang.String str14 = org.apache.commons.io.IOUtils.toString(inputStream1, charset13);
        java.io.OutputStream outputStream15 = null;
        java.io.InputStream inputStream16 = null;
        java.io.OutputStream outputStream17 = null;
        byte[] byteArray20 = new byte[] {};
        int int21 = org.apache.commons.io.IOUtils.length(byteArray20);
        java.io.OutputStream outputStream22 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray20, outputStream22);
        long long24 = org.apache.commons.io.IOUtils.copyLarge(inputStream16, outputStream17, 0L, (long) (byte) -1, byteArray20);
        long long25 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream15, byteArray20);
        java.io.InputStream inputStream26 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1);
        java.io.OutputStream outputStream27 = null;
        java.io.InputStream inputStream31 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream32 = null;
        java.io.InputStream inputStream34 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream35 = null;
        java.io.InputStream inputStream38 = null;
        byte[] byteArray40 = org.apache.commons.io.IOUtils.toByteArray("");
        int int41 = org.apache.commons.io.IOUtils.read(inputStream38, byteArray40);
        long long42 = org.apache.commons.io.IOUtils.copyLarge(inputStream34, outputStream35, 0L, 0L, byteArray40);
        long long43 = org.apache.commons.io.IOUtils.copyLarge(inputStream31, outputStream32, byteArray40);
        java.io.BufferedInputStream bufferedInputStream45 = org.apache.commons.io.IOUtils.buffer(inputStream31, (int) (byte) 10);
        org.apache.commons.io.IOUtils.closeQuietly(inputStream31);
        java.nio.charset.Charset charset47 = null;
        java.util.List<java.lang.String> strList48 = org.apache.commons.io.IOUtils.readLines(inputStream31, charset47);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream31);
        java.io.OutputStream outputStream50 = null;
        int int51 = org.apache.commons.io.IOUtils.copy(inputStream31, outputStream50);
        java.io.OutputStream outputStream52 = null;
        java.io.InputStream inputStream54 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream55 = null;
        java.io.InputStream inputStream57 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream58 = null;
        java.io.InputStream inputStream61 = null;
        byte[] byteArray63 = org.apache.commons.io.IOUtils.toByteArray("");
        int int64 = org.apache.commons.io.IOUtils.read(inputStream61, byteArray63);
        long long65 = org.apache.commons.io.IOUtils.copyLarge(inputStream57, outputStream58, 0L, 0L, byteArray63);
        long long66 = org.apache.commons.io.IOUtils.copyLarge(inputStream54, outputStream55, byteArray63);
        java.lang.String str67 = org.apache.commons.io.IOUtils.toString(byteArray63);
        long long68 = org.apache.commons.io.IOUtils.copyLarge(inputStream31, outputStream52, byteArray63);
        long long69 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream27, (long) (short) 0, (long) (byte) 1, byteArray63);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str71 = org.apache.commons.io.IOUtils.toString(byteArray63, "hi!");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: hi!");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(inputStream26);
        org.junit.Assert.assertNotNull(inputStream31);
        org.junit.Assert.assertNotNull(inputStream34);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream45);
        org.junit.Assert.assertNotNull(strList48);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(inputStream54);
        org.junit.Assert.assertNotNull(inputStream57);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 0L + "'", long65 == 0L);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 0L + "'", long66 == 0L);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 0L + "'", long68 == 0L);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 0L + "'", long69 == 0L);
    }

    @Test
    public void test1357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1357");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.BufferedInputStream bufferedInputStream10 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        byte[] byteArray11 = null;
        org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray11, (int) '4', 0);
        java.lang.String str15 = org.apache.commons.io.IOUtils.toString(inputStream1);
        java.util.List<java.lang.String> strList16 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.InputStream inputStream18 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream19 = null;
        java.io.InputStream inputStream21 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream22 = null;
        java.io.InputStream inputStream25 = null;
        byte[] byteArray27 = org.apache.commons.io.IOUtils.toByteArray("");
        int int28 = org.apache.commons.io.IOUtils.read(inputStream25, byteArray27);
        long long29 = org.apache.commons.io.IOUtils.copyLarge(inputStream21, outputStream22, 0L, 0L, byteArray27);
        long long30 = org.apache.commons.io.IOUtils.copyLarge(inputStream18, outputStream19, byteArray27);
        java.io.BufferedInputStream bufferedInputStream32 = org.apache.commons.io.IOUtils.buffer(inputStream18, (int) (byte) 10);
        java.io.InputStream inputStream34 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray35 = org.apache.commons.io.IOUtils.toByteArray(inputStream34);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream34);
        java.io.InputStream inputStream38 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream39 = null;
        java.io.InputStream inputStream42 = null;
        byte[] byteArray44 = org.apache.commons.io.IOUtils.toByteArray("");
        int int45 = org.apache.commons.io.IOUtils.read(inputStream42, byteArray44);
        long long46 = org.apache.commons.io.IOUtils.copyLarge(inputStream38, outputStream39, 0L, 0L, byteArray44);
        java.nio.charset.Charset charset47 = null;
        java.util.List<java.lang.String> strList48 = org.apache.commons.io.IOUtils.readLines(inputStream38, charset47);
        java.io.InputStream inputStream50 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream51 = null;
        java.io.InputStream inputStream54 = null;
        byte[] byteArray56 = org.apache.commons.io.IOUtils.toByteArray("");
        int int57 = org.apache.commons.io.IOUtils.read(inputStream54, byteArray56);
        long long58 = org.apache.commons.io.IOUtils.copyLarge(inputStream50, outputStream51, 0L, 0L, byteArray56);
        java.nio.charset.Charset charset59 = null;
        java.util.List<java.lang.String> strList60 = org.apache.commons.io.IOUtils.readLines(inputStream50, charset59);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream50);
        boolean boolean62 = org.apache.commons.io.IOUtils.contentEquals(inputStream38, inputStream50);
        java.io.OutputStream outputStream63 = null;
        java.io.InputStream inputStream65 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream66 = null;
        java.io.InputStream inputStream69 = null;
        byte[] byteArray71 = org.apache.commons.io.IOUtils.toByteArray("");
        int int72 = org.apache.commons.io.IOUtils.read(inputStream69, byteArray71);
        long long73 = org.apache.commons.io.IOUtils.copyLarge(inputStream65, outputStream66, 0L, 0L, byteArray71);
        long long74 = org.apache.commons.io.IOUtils.copyLarge(inputStream50, outputStream63, byteArray71);
        org.apache.commons.io.IOUtils.readFully(inputStream34, byteArray71);
        org.apache.commons.io.IOUtils.readFully(inputStream18, byteArray71);
        int int77 = org.apache.commons.io.IOUtils.length(byteArray71);
        // The following exception was thrown during execution in test generation
        try {
            int int80 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray71, 1, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Range [1, 1 + 35) out of bounds for length 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream10);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertNotNull(inputStream18);
        org.junit.Assert.assertNotNull(inputStream21);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream32);
        org.junit.Assert.assertNotNull(inputStream34);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(inputStream38);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertNotNull(strList48);
        org.junit.Assert.assertNotNull(inputStream50);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 0L + "'", long58 == 0L);
        org.junit.Assert.assertNotNull(strList60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(inputStream65);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 0L + "'", long73 == 0L);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 0L + "'", long74 == 0L);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
    }

    @Test
    public void test1358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1358");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray(inputStream1, (int) (short) 0);
        long long9 = org.apache.commons.io.IOUtils.skip(inputStream1, 100L);
        java.io.InputStream inputStream11 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray12 = new byte[] {};
        int int13 = org.apache.commons.io.IOUtils.length(byteArray12);
        int int14 = org.apache.commons.io.IOUtils.read(inputStream11, byteArray12);
        byte[] byteArray15 = org.apache.commons.io.IOUtils.toByteArray(inputStream11);
        byte[] byteArray17 = org.apache.commons.io.IOUtils.toByteArray(inputStream11, (int) (short) 0);
        org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray17);
        java.io.Writer writer19 = null;
        java.nio.charset.Charset charset20 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(byteArray17, writer19, charset20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Writer.write(String)\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(inputStream11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
    }

    @Test
    public void test1359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1359");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream3 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1);
        byte[] byteArray8 = new byte[] { (byte) -1, (byte) 100, (byte) 1, (byte) -1 };
        int int9 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray8);
        java.nio.charset.Charset charset10 = null;
        java.lang.String str11 = org.apache.commons.io.IOUtils.toString(inputStream1, charset10);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray13 = org.apache.commons.io.IOUtils.toByteArray(inputStream1, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Unexpected read size. current: 0, expected: 10");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream3);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-1, 100, 1, -1]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
    }

    @Test
    public void test1360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1360");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray(inputStream1, (int) (short) 0);
        long long9 = org.apache.commons.io.IOUtils.skip(inputStream1, 100L);
        java.io.InputStream inputStream11 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray12 = new byte[] {};
        int int13 = org.apache.commons.io.IOUtils.length(byteArray12);
        int int14 = org.apache.commons.io.IOUtils.read(inputStream11, byteArray12);
        byte[] byteArray15 = org.apache.commons.io.IOUtils.toByteArray(inputStream11);
        byte[] byteArray17 = org.apache.commons.io.IOUtils.toByteArray(inputStream11, (int) (short) 0);
        org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray17);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.Writer writer20 = null;
        java.nio.charset.Charset charset21 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer20, charset21);
        java.io.InputStream inputStream23 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(inputStream11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertNotNull(inputStream23);
    }

    @Test
    public void test1361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1361");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream5 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream6 = null;
        java.io.InputStream inputStream9 = null;
        byte[] byteArray11 = org.apache.commons.io.IOUtils.toByteArray("");
        int int12 = org.apache.commons.io.IOUtils.read(inputStream9, byteArray11);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream5, outputStream6, 0L, 0L, byteArray11);
        java.nio.charset.Charset charset14 = null;
        java.util.List<java.lang.String> strList15 = org.apache.commons.io.IOUtils.readLines(inputStream5, charset14);
        java.io.InputStream inputStream17 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream18 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray23 = org.apache.commons.io.IOUtils.toByteArray("");
        int int24 = org.apache.commons.io.IOUtils.read(inputStream21, byteArray23);
        long long25 = org.apache.commons.io.IOUtils.copyLarge(inputStream17, outputStream18, 0L, 0L, byteArray23);
        java.nio.charset.Charset charset26 = null;
        java.util.List<java.lang.String> strList27 = org.apache.commons.io.IOUtils.readLines(inputStream17, charset26);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream17);
        boolean boolean29 = org.apache.commons.io.IOUtils.contentEquals(inputStream5, inputStream17);
        java.io.OutputStream outputStream30 = null;
        java.io.InputStream inputStream32 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream33 = null;
        java.io.InputStream inputStream36 = null;
        byte[] byteArray38 = org.apache.commons.io.IOUtils.toByteArray("");
        int int39 = org.apache.commons.io.IOUtils.read(inputStream36, byteArray38);
        long long40 = org.apache.commons.io.IOUtils.copyLarge(inputStream32, outputStream33, 0L, 0L, byteArray38);
        long long41 = org.apache.commons.io.IOUtils.copyLarge(inputStream17, outputStream30, byteArray38);
        org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray38);
        java.lang.String str43 = org.apache.commons.io.IOUtils.toString(byteArray38);
        java.io.Writer writer44 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(byteArray38, writer44);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Writer.write(String)\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(inputStream5);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(strList15);
        org.junit.Assert.assertNotNull(inputStream17);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(strList27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(inputStream32);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
    }

    @Test
    public void test1362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1362");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.BufferedInputStream bufferedInputStream10 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.io.InputStream inputStream12 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, (int) (byte) 1);
        java.io.OutputStream outputStream13 = null;
        int int14 = org.apache.commons.io.IOUtils.copy(inputStream12, outputStream13);
        java.io.BufferedInputStream bufferedInputStream16 = org.apache.commons.io.IOUtils.buffer(inputStream12, (int) (byte) 10);
        org.apache.commons.io.function.IOConsumer<java.io.IOException> iOExceptionIOConsumer17 = null;
        org.apache.commons.io.IOUtils.close((java.io.Closeable) bufferedInputStream16, iOExceptionIOConsumer17);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.String> strList20 = org.apache.commons.io.IOUtils.readLines((java.io.InputStream) bufferedInputStream16, "");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream10);
        org.junit.Assert.assertNotNull(inputStream12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(bufferedInputStream16);
    }

    @Test
    public void test1363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1363");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.util.List<java.lang.String> strList4 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.OutputStream outputStream6 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList4, "\n", outputStream6);
        java.io.OutputStream outputStream9 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList4, "", outputStream9);
        java.io.OutputStream outputStream12 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList4, "hi!", outputStream12, "");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(strList4);
    }

    @Test
    public void test1364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1364");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.io.InputStream inputStream7 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, (int) (byte) 0);
        java.nio.charset.Charset charset8 = null;
        org.apache.commons.io.LineIterator lineIterator9 = org.apache.commons.io.IOUtils.lineIterator(inputStream7, charset8);
        java.nio.charset.Charset charset10 = null;
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.IOUtils.lineIterator(inputStream7, charset10);
        java.io.Writer writer12 = null;
        org.apache.commons.io.IOUtils.copy(inputStream7, writer12);
        java.nio.charset.Charset charset15 = null;
        java.io.InputStream inputStream16 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "", charset15);
        java.util.List<java.lang.String> strList17 = org.apache.commons.io.IOUtils.readLines(inputStream16);
        java.io.InputStream inputStream19 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray20 = new byte[] {};
        int int21 = org.apache.commons.io.IOUtils.length(byteArray20);
        int int22 = org.apache.commons.io.IOUtils.read(inputStream19, byteArray20);
        byte[] byteArray23 = org.apache.commons.io.IOUtils.toByteArray(inputStream19);
        int int24 = org.apache.commons.io.IOUtils.length(byteArray23);
        org.apache.commons.io.IOUtils.readFully(inputStream16, byteArray23);
        byte[] byteArray27 = org.apache.commons.io.IOUtils.toByteArray(inputStream16, 0L);
        java.io.OutputStream outputStream28 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray27, outputStream28);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.readFully(inputStream7, byteArray27, (-1), (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Range [-1, -1 + 10) out of bounds for length 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(inputStream7);
        org.junit.Assert.assertNotNull(lineIterator9);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertNotNull(inputStream16);
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertNotNull(inputStream19);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
    }

    @Test
    public void test1365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1365");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream5 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray("");
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray10);
        long long12 = org.apache.commons.io.IOUtils.copyLarge(inputStream4, outputStream5, 0L, 0L, byteArray10);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, byteArray10);
        java.io.BufferedInputStream bufferedInputStream15 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        byte[] byteArray16 = org.apache.commons.io.IOUtils.toByteArray((java.io.InputStream) bufferedInputStream15);
        java.io.InputStream inputStream17 = null;
        java.io.OutputStream outputStream18 = null;
        byte[] byteArray21 = new byte[] {};
        int int22 = org.apache.commons.io.IOUtils.length(byteArray21);
        java.io.OutputStream outputStream23 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray21, outputStream23);
        long long25 = org.apache.commons.io.IOUtils.copyLarge(inputStream17, outputStream18, 0L, (long) (byte) -1, byteArray21);
        java.io.OutputStream outputStream26 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray21, outputStream26);
        int int28 = org.apache.commons.io.IOUtils.length(byteArray21);
        org.apache.commons.io.IOUtils.readFully((java.io.InputStream) bufferedInputStream15, byteArray21);
        java.lang.String str30 = org.apache.commons.io.IOUtils.toString(byteArray21);
        java.io.OutputStream outputStream31 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(byteArray21, outputStream31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.OutputStream.write(byte[])\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream15);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
    }

    @Test
    public void test1366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1366");
        java.nio.charset.Charset charset1 = null;
        java.io.InputStream inputStream2 = org.apache.commons.io.IOUtils.toInputStream("", charset1);
        java.nio.charset.Charset charset3 = null;
        java.lang.String str4 = org.apache.commons.io.IOUtils.toString(inputStream2, charset3);
        char[] charArray5 = org.apache.commons.io.IOUtils.toCharArray(inputStream2);
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.readFully(inputStream2, byteArray7, (-1), (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Range [-1, -1 + 52) out of bounds for length 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
    }

    @Test
    public void test1367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1367");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream("hi!");
        org.apache.commons.io.function.IOConsumer<java.io.IOException> iOExceptionIOConsumer2 = null;
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1, iOExceptionIOConsumer2);
        java.io.Writer writer4 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.copy(inputStream1, writer4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Writer.write(char[], int, int)\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
    }

    @Test
    public void test1368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1368");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.util.List<java.lang.String> strList4 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer5 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer5);
        java.io.InputStream inputStream8 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray9 = org.apache.commons.io.IOUtils.toByteArray(inputStream8);
        int int10 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray9);
        byte[] byteArray11 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        // The following exception was thrown during execution in test generation
        try {
            char[] charArray13 = org.apache.commons.io.IOUtils.toCharArray(inputStream1, "\r\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ??");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertNotNull(inputStream8);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
    }

    @Test
    public void test1369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1369");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        java.nio.charset.Charset charset5 = null;
        org.apache.commons.io.LineIterator lineIterator6 = org.apache.commons.io.IOUtils.lineIterator(inputStream1, charset5);
        java.io.InputStream inputStream8 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray9 = new byte[] {};
        int int10 = org.apache.commons.io.IOUtils.length(byteArray9);
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray9);
        byte[] byteArray12 = org.apache.commons.io.IOUtils.toByteArray(inputStream8);
        boolean boolean13 = org.apache.commons.io.IOUtils.contentEquals(inputStream1, inputStream8);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.BufferedInputStream bufferedInputStream16 = org.apache.commons.io.IOUtils.buffer(inputStream1, 3);
        java.nio.charset.Charset charset17 = null;
        char[] charArray18 = org.apache.commons.io.IOUtils.toCharArray((java.io.InputStream) bufferedInputStream16, charset17);
        java.io.OutputStream outputStream19 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(charArray18, outputStream19, "\r\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ??");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(lineIterator6);
        org.junit.Assert.assertNotNull(inputStream8);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(bufferedInputStream16);
        org.junit.Assert.assertNotNull(charArray18);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray18), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray18), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray18), "[]");
    }

    @Test
    public void test1370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1370");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.BufferedInputStream bufferedInputStream10 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.io.InputStream inputStream12 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, (int) (byte) 1);
        java.io.OutputStream outputStream13 = null;
        int int14 = org.apache.commons.io.IOUtils.copy(inputStream12, outputStream13);
        java.io.BufferedInputStream bufferedInputStream16 = org.apache.commons.io.IOUtils.buffer(inputStream12, (int) (byte) 10);
        java.nio.charset.Charset charset17 = null;
        java.util.List<java.lang.String> strList18 = org.apache.commons.io.IOUtils.readLines((java.io.InputStream) bufferedInputStream16, charset17);
        java.io.InputStream inputStream20 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream21 = null;
        java.io.InputStream inputStream23 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream24 = null;
        java.io.InputStream inputStream27 = null;
        byte[] byteArray29 = org.apache.commons.io.IOUtils.toByteArray("");
        int int30 = org.apache.commons.io.IOUtils.read(inputStream27, byteArray29);
        long long31 = org.apache.commons.io.IOUtils.copyLarge(inputStream23, outputStream24, 0L, 0L, byteArray29);
        long long32 = org.apache.commons.io.IOUtils.copyLarge(inputStream20, outputStream21, byteArray29);
        java.io.BufferedInputStream bufferedInputStream34 = org.apache.commons.io.IOUtils.buffer(inputStream20, (int) (byte) 10);
        org.apache.commons.io.IOUtils.closeQuietly(inputStream20);
        java.nio.charset.Charset charset36 = null;
        java.util.List<java.lang.String> strList37 = org.apache.commons.io.IOUtils.readLines(inputStream20, charset36);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream20);
        java.io.OutputStream outputStream39 = null;
        int int40 = org.apache.commons.io.IOUtils.copy(inputStream20, outputStream39);
        java.io.InputStream inputStream42 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray43 = new byte[] {};
        int int44 = org.apache.commons.io.IOUtils.length(byteArray43);
        int int45 = org.apache.commons.io.IOUtils.read(inputStream42, byteArray43);
        byte[] byteArray46 = org.apache.commons.io.IOUtils.toByteArray(inputStream42);
        byte[] byteArray48 = org.apache.commons.io.IOUtils.toByteArray(inputStream42, (int) (short) 0);
        byte[] byteArray49 = new byte[] {};
        int int50 = org.apache.commons.io.IOUtils.length(byteArray49);
        org.apache.commons.io.IOUtils.readFully(inputStream42, byteArray49);
        int int52 = org.apache.commons.io.IOUtils.read(inputStream20, byteArray49);
        java.lang.String str53 = org.apache.commons.io.IOUtils.toString(byteArray49);
        java.io.OutputStream outputStream54 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray49, outputStream54);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.readFully((java.io.InputStream) bufferedInputStream16, byteArray49, (int) '/', (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream10);
        org.junit.Assert.assertNotNull(inputStream12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(bufferedInputStream16);
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertNotNull(inputStream20);
        org.junit.Assert.assertNotNull(inputStream23);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream34);
        org.junit.Assert.assertNotNull(strList37);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(inputStream42);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
    }

    @Test
    public void test1371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1371");
        java.io.OutputStream outputStream0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.BufferedOutputStream bufferedOutputStream2 = org.apache.commons.io.IOUtils.buffer(outputStream0, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: outputStream");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1372");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray5 = new byte[] {};
        int int6 = org.apache.commons.io.IOUtils.length(byteArray5);
        int int7 = org.apache.commons.io.IOUtils.read(inputStream4, byteArray5);
        byte[] byteArray8 = org.apache.commons.io.IOUtils.toByteArray(inputStream4);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer9 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream4, iOExceptionConsumer9);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream4);
        java.io.BufferedInputStream bufferedInputStream13 = org.apache.commons.io.IOUtils.buffer(inputStream4, (int) (byte) 10);
        boolean boolean14 = org.apache.commons.io.IOUtils.contentEquals(inputStream1, inputStream4);
        java.io.OutputStream outputStream15 = null;
        long long18 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream15, (long) (short) 0, (long) 2);
        char[] charArray19 = org.apache.commons.io.IOUtils.toCharArray(inputStream1);
        java.io.OutputStream outputStream20 = null;
        java.nio.charset.Charset charset21 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(charArray19, outputStream20, charset21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.OutputStream.write(byte[])\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[]");
    }

    @Test
    public void test1373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1373");
        java.nio.charset.Charset charset1 = null;
        java.io.InputStream inputStream2 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "", charset1);
        byte[] byteArray3 = org.apache.commons.io.IOUtils.toByteArray(inputStream2);
        java.io.InputStream inputStream5 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream6 = null;
        java.io.InputStream inputStream9 = null;
        byte[] byteArray11 = org.apache.commons.io.IOUtils.toByteArray("");
        int int12 = org.apache.commons.io.IOUtils.read(inputStream9, byteArray11);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream5, outputStream6, 0L, 0L, byteArray11);
        java.nio.charset.Charset charset14 = null;
        java.util.List<java.lang.String> strList15 = org.apache.commons.io.IOUtils.readLines(inputStream5, charset14);
        java.io.InputStream inputStream17 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream18 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray23 = org.apache.commons.io.IOUtils.toByteArray("");
        int int24 = org.apache.commons.io.IOUtils.read(inputStream21, byteArray23);
        long long25 = org.apache.commons.io.IOUtils.copyLarge(inputStream17, outputStream18, 0L, 0L, byteArray23);
        java.nio.charset.Charset charset26 = null;
        java.util.List<java.lang.String> strList27 = org.apache.commons.io.IOUtils.readLines(inputStream17, charset26);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream17);
        boolean boolean29 = org.apache.commons.io.IOUtils.contentEquals(inputStream5, inputStream17);
        java.io.OutputStream outputStream30 = null;
        java.io.InputStream inputStream32 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream33 = null;
        java.io.InputStream inputStream36 = null;
        byte[] byteArray38 = org.apache.commons.io.IOUtils.toByteArray("");
        int int39 = org.apache.commons.io.IOUtils.read(inputStream36, byteArray38);
        long long40 = org.apache.commons.io.IOUtils.copyLarge(inputStream32, outputStream33, 0L, 0L, byteArray38);
        long long41 = org.apache.commons.io.IOUtils.copyLarge(inputStream17, outputStream30, byteArray38);
        java.io.OutputStream outputStream42 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray38, outputStream42);
        // The following exception was thrown during execution in test generation
        try {
            int int46 = org.apache.commons.io.IOUtils.read(inputStream2, byteArray38, 6, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Range [6, 6 + 1) out of bounds for length 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertNotNull(inputStream5);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(strList15);
        org.junit.Assert.assertNotNull(inputStream17);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(strList27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(inputStream32);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
    }

    @Test
    public void test1374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1374");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        java.io.Writer writer5 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer5);
        java.io.BufferedInputStream bufferedInputStream7 = org.apache.commons.io.IOUtils.buffer(inputStream1);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(bufferedInputStream7);
    }

    @Test
    public void test1375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1375");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.BufferedInputStream bufferedInputStream10 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.io.InputStream inputStream12 = org.apache.commons.io.IOUtils.toBufferedInputStream((java.io.InputStream) bufferedInputStream10, (int) '#');
        char[] charArray13 = org.apache.commons.io.IOUtils.toCharArray((java.io.InputStream) bufferedInputStream10);
        int int14 = org.apache.commons.io.IOUtils.length(charArray13);
        java.io.Writer writer15 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray13, writer15);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream10);
        org.junit.Assert.assertNotNull(inputStream12);
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test1376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1376");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        java.io.InputStream inputStream5 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1);
        byte[] byteArray6 = new byte[] {};
        int int7 = org.apache.commons.io.IOUtils.length(byteArray6);
        java.io.OutputStream outputStream8 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray6, outputStream8);
        // The following exception was thrown during execution in test generation
        try {
            int int12 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray6, (int) '\\', 3);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Range [92, 92 + 3) out of bounds for length 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(inputStream5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test1377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1377");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream3 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1);
        java.lang.String str4 = org.apache.commons.io.IOUtils.toString(inputStream1);
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray7);
        java.io.InputStream inputStream11 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray12 = new byte[] {};
        int int13 = org.apache.commons.io.IOUtils.length(byteArray12);
        int int14 = org.apache.commons.io.IOUtils.read(inputStream11, byteArray12);
        byte[] byteArray15 = org.apache.commons.io.IOUtils.toByteArray(inputStream11);
        byte[] byteArray17 = org.apache.commons.io.IOUtils.toByteArray(inputStream11, (int) (short) 0);
        java.io.Writer writer18 = null;
        java.nio.charset.Charset charset19 = null;
        org.apache.commons.io.IOUtils.copy(inputStream11, writer18, charset19);
        java.io.InputStream inputStream22 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream23 = null;
        java.io.InputStream inputStream25 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream26 = null;
        java.io.InputStream inputStream29 = null;
        byte[] byteArray31 = org.apache.commons.io.IOUtils.toByteArray("");
        int int32 = org.apache.commons.io.IOUtils.read(inputStream29, byteArray31);
        long long33 = org.apache.commons.io.IOUtils.copyLarge(inputStream25, outputStream26, 0L, 0L, byteArray31);
        long long34 = org.apache.commons.io.IOUtils.copyLarge(inputStream22, outputStream23, byteArray31);
        java.lang.String str35 = org.apache.commons.io.IOUtils.toString(byteArray31);
        int int36 = org.apache.commons.io.IOUtils.read(inputStream11, byteArray31);
        org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray31);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.skipFully(inputStream1, (long) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.io.EOFException; message: Bytes to skip: 100 actual: 0");
        } catch (java.io.EOFException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(inputStream11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertNotNull(inputStream22);
        org.junit.Assert.assertNotNull(inputStream25);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
    }

    @Test
    public void test1378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1378");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray(inputStream1, (int) (short) 0);
        long long9 = org.apache.commons.io.IOUtils.skip(inputStream1, 100L);
        java.io.InputStream inputStream11 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray12 = new byte[] {};
        int int13 = org.apache.commons.io.IOUtils.length(byteArray12);
        int int14 = org.apache.commons.io.IOUtils.read(inputStream11, byteArray12);
        byte[] byteArray15 = org.apache.commons.io.IOUtils.toByteArray(inputStream11);
        byte[] byteArray17 = org.apache.commons.io.IOUtils.toByteArray(inputStream11, (int) (short) 0);
        org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray17);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray20 = org.apache.commons.io.IOUtils.toByteArray(inputStream1, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Unexpected read size. current: 0, expected: 32");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(inputStream11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
    }

    @Test
    public void test1379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1379");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.BufferedInputStream bufferedInputStream10 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.io.InputStream inputStream12 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, (int) (byte) 1);
        java.io.OutputStream outputStream13 = null;
        int int14 = org.apache.commons.io.IOUtils.copy(inputStream12, outputStream13);
        java.io.BufferedInputStream bufferedInputStream16 = org.apache.commons.io.IOUtils.buffer(inputStream12, (int) (byte) 10);
        java.nio.charset.Charset charset17 = null;
        java.util.List<java.lang.String> strList18 = org.apache.commons.io.IOUtils.readLines((java.io.InputStream) bufferedInputStream16, charset17);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.String> strList20 = org.apache.commons.io.IOUtils.readLines((java.io.InputStream) bufferedInputStream16, "hi!");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: hi!");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream10);
        org.junit.Assert.assertNotNull(inputStream12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(bufferedInputStream16);
        org.junit.Assert.assertNotNull(strList18);
    }

    @Test
    public void test1380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1380");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.BufferedInputStream bufferedInputStream10 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.io.InputStream inputStream12 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, (int) (byte) 1);
        java.io.OutputStream outputStream13 = null;
        int int14 = org.apache.commons.io.IOUtils.copy(inputStream12, outputStream13);
        java.io.BufferedInputStream bufferedInputStream16 = org.apache.commons.io.IOUtils.buffer(inputStream12, (int) (byte) 10);
        java.nio.charset.Charset charset17 = null;
        java.util.List<java.lang.String> strList18 = org.apache.commons.io.IOUtils.readLines(inputStream12, charset17);
        java.io.Writer writer20 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList18, "\n", writer20);
        java.io.OutputStream outputStream23 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList18, "\r\n", outputStream23);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream10);
        org.junit.Assert.assertNotNull(inputStream12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(bufferedInputStream16);
        org.junit.Assert.assertNotNull(strList18);
    }

    @Test
    public void test1381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1381");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        java.nio.charset.Charset charset10 = null;
        java.util.List<java.lang.String> strList11 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset10);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream14 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, (int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            char[] charArray16 = org.apache.commons.io.IOUtils.toCharArray(inputStream1, "\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ?");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertNotNull(inputStream14);
    }

    @Test
    public void test1382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1382");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.io.InputStream inputStream7 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray8 = new byte[] {};
        int int9 = org.apache.commons.io.IOUtils.length(byteArray8);
        int int10 = org.apache.commons.io.IOUtils.read(inputStream7, byteArray8);
        byte[] byteArray11 = org.apache.commons.io.IOUtils.toByteArray(inputStream7);
        int int12 = org.apache.commons.io.IOUtils.length(byteArray11);
        org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray11);
        java.io.InputStream inputStream14 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1);
        java.io.InputStream inputStream16 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray17 = new byte[] {};
        int int18 = org.apache.commons.io.IOUtils.length(byteArray17);
        int int19 = org.apache.commons.io.IOUtils.read(inputStream16, byteArray17);
        org.apache.commons.io.IOUtils.closeQuietly(inputStream16);
        java.io.InputStream inputStream22 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray23 = new byte[] {};
        int int24 = org.apache.commons.io.IOUtils.length(byteArray23);
        int int25 = org.apache.commons.io.IOUtils.read(inputStream22, byteArray23);
        java.lang.String str26 = org.apache.commons.io.IOUtils.toString(byteArray23);
        int int29 = org.apache.commons.io.IOUtils.read(inputStream16, byteArray23, (int) (byte) 10, (int) (short) 0);
        java.lang.String str30 = org.apache.commons.io.IOUtils.toString(byteArray23);
        int int31 = org.apache.commons.io.IOUtils.length(byteArray23);
        int int32 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray23);
        java.io.OutputStream outputStream33 = null;
        long long34 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream33);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(inputStream7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(inputStream14);
        org.junit.Assert.assertNotNull(inputStream16);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(inputStream22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
    }

    @Test
    public void test1383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1383");
        java.nio.charset.Charset charset1 = null;
        java.io.InputStream inputStream2 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "", charset1);
        java.util.List<java.lang.String> strList3 = org.apache.commons.io.IOUtils.readLines(inputStream2);
        java.io.OutputStream outputStream5 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList3, "\n", outputStream5);
        java.io.OutputStream outputStream8 = null;
        java.nio.charset.Charset charset9 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList3, "\r\n", outputStream8, charset9);
        java.io.Writer writer12 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList3, "", writer12);
        org.junit.Assert.assertNotNull(inputStream2);
        org.junit.Assert.assertNotNull(strList3);
    }

    @Test
    public void test1384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1384");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        java.io.Writer writer10 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer10);
        java.util.List<java.lang.String> strList12 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.InputStream inputStream13 = null;
        java.io.OutputStream outputStream14 = null;
        byte[] byteArray17 = new byte[] {};
        int int18 = org.apache.commons.io.IOUtils.length(byteArray17);
        java.io.OutputStream outputStream19 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray17, outputStream19);
        long long21 = org.apache.commons.io.IOUtils.copyLarge(inputStream13, outputStream14, 0L, (long) (byte) -1, byteArray17);
        java.io.OutputStream outputStream22 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray17, outputStream22);
        int int24 = org.apache.commons.io.IOUtils.length(byteArray17);
        java.io.OutputStream outputStream25 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray17, outputStream25);
        int int27 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray17);
        java.io.OutputStream outputStream28 = null;
        java.io.InputStream inputStream30 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray31 = new byte[] {};
        int int32 = org.apache.commons.io.IOUtils.length(byteArray31);
        int int33 = org.apache.commons.io.IOUtils.read(inputStream30, byteArray31);
        byte[] byteArray34 = org.apache.commons.io.IOUtils.toByteArray(inputStream30);
        byte[] byteArray36 = org.apache.commons.io.IOUtils.toByteArray(inputStream30, (int) (short) 0);
        long long38 = org.apache.commons.io.IOUtils.skip(inputStream30, 100L);
        java.io.InputStream inputStream39 = null;
        java.io.InputStream inputStream40 = null;
        java.io.OutputStream outputStream41 = null;
        byte[] byteArray44 = new byte[] {};
        int int45 = org.apache.commons.io.IOUtils.length(byteArray44);
        java.io.OutputStream outputStream46 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray44, outputStream46);
        long long48 = org.apache.commons.io.IOUtils.copyLarge(inputStream40, outputStream41, 0L, (long) (byte) -1, byteArray44);
        java.io.OutputStream outputStream49 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray44, outputStream49);
        org.apache.commons.io.IOUtils.readFully(inputStream39, byteArray44);
        int int52 = org.apache.commons.io.IOUtils.read(inputStream30, byteArray44);
        java.io.OutputStream outputStream53 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray44, outputStream53);
        java.lang.String str55 = org.apache.commons.io.IOUtils.toString(byteArray44);
        long long56 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream28, byteArray44);
        int int57 = org.apache.commons.io.IOUtils.length(byteArray44);
        java.lang.Class<?> wildcardClass58 = byteArray44.getClass();
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(strList12);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(inputStream30);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(wildcardClass58);
    }

    @Test
    public void test1385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1385");
        java.nio.charset.Charset charset1 = null;
        java.io.InputStream inputStream2 = org.apache.commons.io.IOUtils.toInputStream("", charset1);
        java.nio.charset.Charset charset3 = null;
        java.lang.String str4 = org.apache.commons.io.IOUtils.toString(inputStream2, charset3);
        java.nio.charset.Charset charset5 = null;
        char[] charArray6 = org.apache.commons.io.IOUtils.toCharArray(inputStream2, charset5);
        java.nio.charset.Charset charset7 = null;
        char[] charArray8 = org.apache.commons.io.IOUtils.toCharArray(inputStream2, charset7);
        java.io.OutputStream outputStream9 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(charArray8, outputStream9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.OutputStream.write(byte[])\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[]");
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[]");
    }

    @Test
    public void test1386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1386");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray(inputStream1, (int) (short) 0);
        long long9 = org.apache.commons.io.IOUtils.skip(inputStream1, 100L);
        java.io.InputStream inputStream10 = null;
        java.io.InputStream inputStream11 = null;
        java.io.OutputStream outputStream12 = null;
        byte[] byteArray15 = new byte[] {};
        int int16 = org.apache.commons.io.IOUtils.length(byteArray15);
        java.io.OutputStream outputStream17 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray15, outputStream17);
        long long19 = org.apache.commons.io.IOUtils.copyLarge(inputStream11, outputStream12, 0L, (long) (byte) -1, byteArray15);
        java.io.OutputStream outputStream20 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray15, outputStream20);
        org.apache.commons.io.IOUtils.readFully(inputStream10, byteArray15);
        int int23 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray15);
        java.io.InputStream inputStream24 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1);
        java.io.BufferedInputStream bufferedInputStream25 = org.apache.commons.io.IOUtils.buffer(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly(inputStream1);
        java.io.Writer writer27 = null;
        java.nio.charset.Charset charset28 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer27, charset28);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(inputStream24);
        org.junit.Assert.assertNotNull(bufferedInputStream25);
    }

    @Test
    public void test1387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1387");
        java.nio.channels.ReadableByteChannel readableByteChannel0 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long2 = org.apache.commons.io.IOUtils.skip(readableByteChannel0, (long) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Skip count must be non-negative, actual: -1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1388");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.util.List<java.lang.String> strList4 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.OutputStream outputStream6 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList4, "\n", outputStream6);
        java.io.Writer writer9 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList4, "hi!", writer9);
        java.io.OutputStream outputStream12 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList4, "", outputStream12);
        java.io.OutputStream outputStream15 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList4, "", outputStream15, "hi!");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: hi!");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(strList4);
    }

    @Test
    public void test1389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1389");
        java.lang.CharSequence charSequence0 = null;
        java.io.OutputStream outputStream1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(charSequence0, outputStream1, "\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ?");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1390");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream5 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray("");
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray10);
        long long12 = org.apache.commons.io.IOUtils.copyLarge(inputStream4, outputStream5, 0L, 0L, byteArray10);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, byteArray10);
        java.io.BufferedInputStream bufferedInputStream15 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        org.apache.commons.io.IOUtils.closeQuietly(inputStream1);
        java.nio.charset.Charset charset17 = null;
        java.util.List<java.lang.String> strList18 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset17);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream20 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly(inputStream1);
        char[] charArray22 = org.apache.commons.io.IOUtils.toCharArray(inputStream1);
        java.io.OutputStream outputStream23 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(charArray22, outputStream23, "\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ?");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream15);
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertNotNull(inputStream20);
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray22), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray22), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray22), "[]");
    }

    @Test
    public void test1391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1391");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        org.apache.commons.io.IOUtils.closeQuietly(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream8 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream9 = null;
        java.io.InputStream inputStream12 = null;
        byte[] byteArray14 = org.apache.commons.io.IOUtils.toByteArray("");
        int int15 = org.apache.commons.io.IOUtils.read(inputStream12, byteArray14);
        long long16 = org.apache.commons.io.IOUtils.copyLarge(inputStream8, outputStream9, 0L, 0L, byteArray14);
        java.nio.charset.Charset charset17 = null;
        java.util.List<java.lang.String> strList18 = org.apache.commons.io.IOUtils.readLines(inputStream8, charset17);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream8);
        java.nio.charset.Charset charset20 = null;
        java.lang.String str21 = org.apache.commons.io.IOUtils.toString(inputStream8, charset20);
        java.io.Writer writer22 = null;
        org.apache.commons.io.IOUtils.copy(inputStream8, writer22);
        byte[] byteArray24 = org.apache.commons.io.IOUtils.toByteArray(inputStream8);
        int int25 = org.apache.commons.io.IOUtils.length(byteArray24);
        int int26 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray24);
        // The following exception was thrown during execution in test generation
        try {
            java.io.InputStream inputStream28 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Negative initial size: -1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(inputStream8);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
    }

    @Test
    public void test1392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1392");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.io.InputStream inputStream7 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray8 = new byte[] {};
        int int9 = org.apache.commons.io.IOUtils.length(byteArray8);
        int int10 = org.apache.commons.io.IOUtils.read(inputStream7, byteArray8);
        byte[] byteArray11 = org.apache.commons.io.IOUtils.toByteArray(inputStream7);
        int int12 = org.apache.commons.io.IOUtils.length(byteArray11);
        org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray11);
        java.lang.Class<?> wildcardClass14 = byteArray11.getClass();
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(inputStream7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test1393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1393");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        java.io.OutputStream outputStream10 = null;
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream10, (long) (short) 0, (-1L));
        char[] charArray14 = org.apache.commons.io.IOUtils.toCharArray(inputStream1);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        org.apache.commons.io.function.IOConsumer<java.io.IOException> iOExceptionIOConsumer16 = null;
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1, iOExceptionIOConsumer16);
        org.apache.commons.io.function.IOConsumer<java.io.IOException> iOExceptionIOConsumer18 = null;
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1, iOExceptionIOConsumer18);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[]");
    }

    @Test
    public void test1394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1394");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.util.List<java.lang.String> strList4 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.OutputStream outputStream5 = null;
        long long6 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream5);
        java.io.Writer writer7 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer7);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream11 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray12 = new byte[] {};
        int int13 = org.apache.commons.io.IOUtils.length(byteArray12);
        int int14 = org.apache.commons.io.IOUtils.read(inputStream11, byteArray12);
        byte[] byteArray15 = org.apache.commons.io.IOUtils.toByteArray(inputStream11);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer16 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream11, iOExceptionConsumer16);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream11);
        java.io.BufferedInputStream bufferedInputStream20 = org.apache.commons.io.IOUtils.buffer(inputStream11, (int) (byte) 10);
        java.io.InputStream inputStream22 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream11, (int) (byte) 1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer23 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream11, iOExceptionConsumer23);
        java.io.OutputStream outputStream25 = null;
        java.io.InputStream inputStream27 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray28 = new byte[] {};
        int int29 = org.apache.commons.io.IOUtils.length(byteArray28);
        int int30 = org.apache.commons.io.IOUtils.read(inputStream27, byteArray28);
        byte[] byteArray31 = org.apache.commons.io.IOUtils.toByteArray(inputStream27);
        java.io.InputStream inputStream33 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray34 = new byte[] {};
        int int35 = org.apache.commons.io.IOUtils.length(byteArray34);
        int int36 = org.apache.commons.io.IOUtils.read(inputStream33, byteArray34);
        byte[] byteArray37 = org.apache.commons.io.IOUtils.toByteArray(inputStream33);
        int int38 = org.apache.commons.io.IOUtils.length(byteArray37);
        org.apache.commons.io.IOUtils.readFully(inputStream27, byteArray37);
        long long40 = org.apache.commons.io.IOUtils.copyLarge(inputStream11, outputStream25, byteArray37);
        boolean boolean41 = org.apache.commons.io.IOUtils.contentEquals(inputStream1, inputStream11);
        java.io.BufferedInputStream bufferedInputStream43 = org.apache.commons.io.IOUtils.buffer(inputStream1, 5);
        long long45 = org.apache.commons.io.IOUtils.skip(inputStream1, (long) '/');
        java.io.OutputStream outputStream46 = null;
        long long47 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream46);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.String> strList49 = org.apache.commons.io.IOUtils.readLines(inputStream1, "\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ?");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(inputStream11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream20);
        org.junit.Assert.assertNotNull(inputStream22);
        org.junit.Assert.assertNotNull(inputStream27);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(inputStream33);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(bufferedInputStream43);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
    }

    @Test
    public void test1395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1395");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray(inputStream1, (int) (short) 0);
        java.io.BufferedInputStream bufferedInputStream8 = org.apache.commons.io.IOUtils.buffer(inputStream1);
        byte[] byteArray9 = org.apache.commons.io.IOUtils.toByteArray((java.io.InputStream) bufferedInputStream8);
        java.lang.String str10 = org.apache.commons.io.IOUtils.toString(byteArray9);
        int int11 = org.apache.commons.io.IOUtils.length(byteArray9);
        java.io.OutputStream outputStream12 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(byteArray9, outputStream12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.OutputStream.write(byte[])\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream8);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test1396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1396");
        java.io.Reader reader0 = null;
        java.nio.charset.Charset charset2 = null;
        java.io.InputStream inputStream3 = org.apache.commons.io.IOUtils.toInputStream("hi!", charset2);
        java.nio.charset.Charset charset4 = null;
        char[] charArray5 = org.apache.commons.io.IOUtils.toCharArray(inputStream3, charset4);
        // The following exception was thrown during execution in test generation
        try {
            int int8 = org.apache.commons.io.IOUtils.read(reader0, charArray5, 4, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[], int, int)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream3);
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "hi!");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "hi!");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[h, i, !]");
    }

    @Test
    public void test1397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1397");
        java.nio.charset.Charset charset1 = null;
        java.io.InputStream inputStream2 = org.apache.commons.io.IOUtils.toInputStream("", charset1);
        java.nio.charset.Charset charset3 = null;
        java.lang.String str4 = org.apache.commons.io.IOUtils.toString(inputStream2, charset3);
        java.nio.charset.Charset charset5 = null;
        char[] charArray6 = org.apache.commons.io.IOUtils.toCharArray(inputStream2, charset5);
        java.io.Writer writer7 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(charArray6, writer7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Writer.write(char[])\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[]");
    }

    @Test
    public void test1398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1398");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        java.nio.charset.Charset charset10 = null;
        java.util.List<java.lang.String> strList11 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset10);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream14 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, (int) (byte) 0);
        java.nio.charset.Charset charset15 = null;
        java.util.List<java.lang.String> strList16 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset15);
        java.nio.charset.Charset charset17 = null;
        java.util.List<java.lang.String> strList18 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset17);
        java.io.OutputStream outputStream20 = null;
        java.nio.charset.Charset charset21 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList18, "", outputStream20, charset21);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertNotNull(inputStream14);
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertNotNull(strList18);
    }

    @Test
    public void test1399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1399");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.BufferedInputStream bufferedInputStream10 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.io.InputStream inputStream12 = org.apache.commons.io.IOUtils.toBufferedInputStream((java.io.InputStream) bufferedInputStream10, (int) '#');
        java.io.OutputStream outputStream13 = null;
        long long16 = org.apache.commons.io.IOUtils.copyLarge(inputStream12, outputStream13, 0L, 0L);
        java.io.InputStream inputStream18 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream19 = null;
        java.io.InputStream inputStream21 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream22 = null;
        java.io.InputStream inputStream25 = null;
        byte[] byteArray27 = org.apache.commons.io.IOUtils.toByteArray("");
        int int28 = org.apache.commons.io.IOUtils.read(inputStream25, byteArray27);
        long long29 = org.apache.commons.io.IOUtils.copyLarge(inputStream21, outputStream22, 0L, 0L, byteArray27);
        long long30 = org.apache.commons.io.IOUtils.copyLarge(inputStream18, outputStream19, byteArray27);
        java.io.BufferedInputStream bufferedInputStream32 = org.apache.commons.io.IOUtils.buffer(inputStream18, (int) (byte) 10);
        org.apache.commons.io.IOUtils.closeQuietly(inputStream18);
        java.io.InputStream inputStream35 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray36 = new byte[] {};
        int int37 = org.apache.commons.io.IOUtils.length(byteArray36);
        int int38 = org.apache.commons.io.IOUtils.read(inputStream35, byteArray36);
        byte[] byteArray39 = org.apache.commons.io.IOUtils.toByteArray(inputStream35);
        byte[] byteArray41 = org.apache.commons.io.IOUtils.toByteArray(inputStream35, (int) (short) 0);
        long long43 = org.apache.commons.io.IOUtils.skip(inputStream35, 100L);
        java.io.InputStream inputStream45 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray46 = new byte[] {};
        int int47 = org.apache.commons.io.IOUtils.length(byteArray46);
        int int48 = org.apache.commons.io.IOUtils.read(inputStream45, byteArray46);
        byte[] byteArray49 = org.apache.commons.io.IOUtils.toByteArray(inputStream45);
        byte[] byteArray51 = org.apache.commons.io.IOUtils.toByteArray(inputStream45, (int) (short) 0);
        org.apache.commons.io.IOUtils.readFully(inputStream35, byteArray51);
        org.apache.commons.io.IOUtils.readFully(inputStream18, byteArray51);
        int int54 = org.apache.commons.io.IOUtils.read(inputStream12, byteArray51);
        java.io.Writer writer55 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(byteArray51, writer55);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Writer.write(String)\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream10);
        org.junit.Assert.assertNotNull(inputStream12);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(inputStream18);
        org.junit.Assert.assertNotNull(inputStream21);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream32);
        org.junit.Assert.assertNotNull(inputStream35);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertNotNull(inputStream45);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
    }

    @Test
    public void test1400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1400");
        java.util.Collection<java.lang.String> strCollection0 = null;
        java.io.Writer writer2 = null;
        org.apache.commons.io.IOUtils.writeLines(strCollection0, "\r\n", writer2);
    }

    @Test
    public void test1401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1401");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        java.io.InputStream inputStream6 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray(inputStream6);
        java.io.InputStream inputStream9 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray10 = new byte[] {};
        int int11 = org.apache.commons.io.IOUtils.length(byteArray10);
        int int12 = org.apache.commons.io.IOUtils.read(inputStream9, byteArray10);
        byte[] byteArray13 = org.apache.commons.io.IOUtils.toByteArray(inputStream9);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer14 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream9, iOExceptionConsumer14);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream9);
        java.io.BufferedInputStream bufferedInputStream18 = org.apache.commons.io.IOUtils.buffer(inputStream9, (int) (byte) 10);
        boolean boolean19 = org.apache.commons.io.IOUtils.contentEquals(inputStream6, inputStream9);
        java.io.OutputStream outputStream20 = null;
        long long23 = org.apache.commons.io.IOUtils.copyLarge(inputStream6, outputStream20, (long) (short) 0, (long) 2);
        java.io.OutputStream outputStream24 = null;
        int int25 = org.apache.commons.io.IOUtils.copy(inputStream6, outputStream24);
        boolean boolean26 = org.apache.commons.io.IOUtils.contentEquals(inputStream1, inputStream6);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer27 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer27);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(inputStream6);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(inputStream9);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
    }

    @Test
    public void test1402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1402");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream("hi!");
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.String> strList3 = org.apache.commons.io.IOUtils.readLines(inputStream1, "\r\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ??");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
    }

    @Test
    public void test1403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1403");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.nio.charset.Charset charset6 = null;
        java.util.List<java.lang.String> strList7 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset6);
        java.nio.charset.Charset charset8 = null;
        org.apache.commons.io.LineIterator lineIterator9 = org.apache.commons.io.IOUtils.lineIterator(inputStream1, charset8);
        java.io.InputStream inputStream11 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, 6);
        java.io.InputStream inputStream13 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray14 = new byte[] {};
        int int15 = org.apache.commons.io.IOUtils.length(byteArray14);
        int int16 = org.apache.commons.io.IOUtils.read(inputStream13, byteArray14);
        byte[] byteArray17 = org.apache.commons.io.IOUtils.toByteArray(inputStream13);
        byte[] byteArray18 = org.apache.commons.io.IOUtils.toByteArray(inputStream13);
        int int21 = org.apache.commons.io.IOUtils.read(inputStream11, byteArray18, (int) '#', 0);
        java.io.InputStream inputStream23 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream11, 10);
        java.io.InputStream inputStream24 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream11);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.skipFully(inputStream11, (-1L));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Bytes to skip must not be negative: -1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertNotNull(lineIterator9);
        org.junit.Assert.assertNotNull(inputStream11);
        org.junit.Assert.assertNotNull(inputStream13);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(inputStream23);
        org.junit.Assert.assertNotNull(inputStream24);
    }

    @Test
    public void test1404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1404");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        java.io.Writer writer10 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer10);
        java.util.List<java.lang.String> strList12 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.Writer writer14 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList12, "\r\n", writer14);
        java.io.Writer writer17 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList12, "\r\n", writer17);
        java.io.OutputStream outputStream20 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList12, "hi!", outputStream20, "");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(strList12);
    }

    @Test
    public void test1405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1405");
        java.io.Reader reader0 = null;
        java.io.Reader reader1 = null;
        java.io.Reader reader2 = null;
        char[] charArray3 = new char[] {};
        int int4 = org.apache.commons.io.IOUtils.length(charArray3);
        java.io.Writer writer5 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray3, writer5);
        int int7 = org.apache.commons.io.IOUtils.length(charArray3);
        java.io.Writer writer8 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray3, writer8);
        int int10 = org.apache.commons.io.IOUtils.length(charArray3);
        int int11 = org.apache.commons.io.IOUtils.read(reader2, charArray3);
        int int12 = org.apache.commons.io.IOUtils.read(reader1, charArray3);
        int int13 = org.apache.commons.io.IOUtils.length(charArray3);
        org.apache.commons.io.IOUtils.readFully(reader0, charArray3);
        java.io.OutputStream outputStream15 = null;
        java.nio.charset.Charset charset16 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(charArray3, outputStream15, charset16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.OutputStream.write(byte[])\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray3), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray3), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray3), "[]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test1406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1406");
        java.nio.charset.Charset charset1 = null;
        java.io.InputStream inputStream2 = org.apache.commons.io.IOUtils.toInputStream("hi!", charset1);
        java.io.Writer writer3 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.copy(inputStream2, writer3, "hi!");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: hi!");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream2);
    }

    @Test
    public void test1407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1407");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream5 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray("");
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray10);
        long long12 = org.apache.commons.io.IOUtils.copyLarge(inputStream4, outputStream5, 0L, 0L, byteArray10);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, byteArray10);
        java.io.BufferedInputStream bufferedInputStream15 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        org.apache.commons.io.IOUtils.closeQuietly(inputStream1);
        java.nio.charset.Charset charset17 = null;
        java.util.List<java.lang.String> strList18 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset17);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.nio.charset.Charset charset20 = null;
        java.lang.String str21 = org.apache.commons.io.IOUtils.toString(inputStream1, charset20);
        java.io.BufferedInputStream bufferedInputStream23 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) 'a');
        java.io.Writer writer24 = null;
        org.apache.commons.io.IOUtils.copy((java.io.InputStream) bufferedInputStream23, writer24);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream15);
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(bufferedInputStream23);
    }

    @Test
    public void test1408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1408");
        java.io.Reader reader0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.skipFully(reader0, (long) 2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[], int, int)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1409");
        byte[] byteArray0 = null;
        int int1 = org.apache.commons.io.IOUtils.length(byteArray0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
    }

    @Test
    public void test1410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1410");
        java.io.Reader reader0 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long2 = org.apache.commons.io.IOUtils.skip(reader0, (long) '/');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[], int, int)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1411");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream5 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray("");
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray10);
        long long12 = org.apache.commons.io.IOUtils.copyLarge(inputStream4, outputStream5, 0L, 0L, byteArray10);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, byteArray10);
        java.io.BufferedInputStream bufferedInputStream15 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.io.InputStream inputStream17 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray18 = org.apache.commons.io.IOUtils.toByteArray(inputStream17);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream17);
        java.io.InputStream inputStream21 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream22 = null;
        java.io.InputStream inputStream25 = null;
        byte[] byteArray27 = org.apache.commons.io.IOUtils.toByteArray("");
        int int28 = org.apache.commons.io.IOUtils.read(inputStream25, byteArray27);
        long long29 = org.apache.commons.io.IOUtils.copyLarge(inputStream21, outputStream22, 0L, 0L, byteArray27);
        java.nio.charset.Charset charset30 = null;
        java.util.List<java.lang.String> strList31 = org.apache.commons.io.IOUtils.readLines(inputStream21, charset30);
        java.io.InputStream inputStream33 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream34 = null;
        java.io.InputStream inputStream37 = null;
        byte[] byteArray39 = org.apache.commons.io.IOUtils.toByteArray("");
        int int40 = org.apache.commons.io.IOUtils.read(inputStream37, byteArray39);
        long long41 = org.apache.commons.io.IOUtils.copyLarge(inputStream33, outputStream34, 0L, 0L, byteArray39);
        java.nio.charset.Charset charset42 = null;
        java.util.List<java.lang.String> strList43 = org.apache.commons.io.IOUtils.readLines(inputStream33, charset42);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream33);
        boolean boolean45 = org.apache.commons.io.IOUtils.contentEquals(inputStream21, inputStream33);
        java.io.OutputStream outputStream46 = null;
        java.io.InputStream inputStream48 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream49 = null;
        java.io.InputStream inputStream52 = null;
        byte[] byteArray54 = org.apache.commons.io.IOUtils.toByteArray("");
        int int55 = org.apache.commons.io.IOUtils.read(inputStream52, byteArray54);
        long long56 = org.apache.commons.io.IOUtils.copyLarge(inputStream48, outputStream49, 0L, 0L, byteArray54);
        long long57 = org.apache.commons.io.IOUtils.copyLarge(inputStream33, outputStream46, byteArray54);
        org.apache.commons.io.IOUtils.readFully(inputStream17, byteArray54);
        org.apache.commons.io.IOUtils.readFully((java.io.InputStream) bufferedInputStream15, byteArray54);
        java.lang.String str60 = org.apache.commons.io.IOUtils.toString(byteArray54);
        int int61 = org.apache.commons.io.IOUtils.length(byteArray54);
        java.io.OutputStream outputStream62 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray54, outputStream62);
        java.lang.String str64 = org.apache.commons.io.IOUtils.toString(byteArray54);
        java.io.Writer writer65 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(byteArray54, writer65);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Writer.write(String)\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream15);
        org.junit.Assert.assertNotNull(inputStream17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(inputStream21);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNotNull(strList31);
        org.junit.Assert.assertNotNull(inputStream33);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertNotNull(strList43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(inputStream48);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
    }

    @Test
    public void test1412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1412");
        java.nio.channels.ReadableByteChannel readableByteChannel0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.skipFully(readableByteChannel0, (long) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.nio.channels.ReadableByteChannel.read(java.nio.ByteBuffer)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1413");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.util.List<java.lang.String> strList4 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.OutputStream outputStream5 = null;
        long long6 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream5);
        java.io.Writer writer7 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer7);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream11 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray12 = new byte[] {};
        int int13 = org.apache.commons.io.IOUtils.length(byteArray12);
        int int14 = org.apache.commons.io.IOUtils.read(inputStream11, byteArray12);
        byte[] byteArray15 = org.apache.commons.io.IOUtils.toByteArray(inputStream11);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer16 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream11, iOExceptionConsumer16);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream11);
        java.io.BufferedInputStream bufferedInputStream20 = org.apache.commons.io.IOUtils.buffer(inputStream11, (int) (byte) 10);
        java.io.InputStream inputStream22 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream11, (int) (byte) 1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer23 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream11, iOExceptionConsumer23);
        java.io.OutputStream outputStream25 = null;
        java.io.InputStream inputStream27 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray28 = new byte[] {};
        int int29 = org.apache.commons.io.IOUtils.length(byteArray28);
        int int30 = org.apache.commons.io.IOUtils.read(inputStream27, byteArray28);
        byte[] byteArray31 = org.apache.commons.io.IOUtils.toByteArray(inputStream27);
        java.io.InputStream inputStream33 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray34 = new byte[] {};
        int int35 = org.apache.commons.io.IOUtils.length(byteArray34);
        int int36 = org.apache.commons.io.IOUtils.read(inputStream33, byteArray34);
        byte[] byteArray37 = org.apache.commons.io.IOUtils.toByteArray(inputStream33);
        int int38 = org.apache.commons.io.IOUtils.length(byteArray37);
        org.apache.commons.io.IOUtils.readFully(inputStream27, byteArray37);
        long long40 = org.apache.commons.io.IOUtils.copyLarge(inputStream11, outputStream25, byteArray37);
        boolean boolean41 = org.apache.commons.io.IOUtils.contentEquals(inputStream1, inputStream11);
        java.io.BufferedInputStream bufferedInputStream42 = org.apache.commons.io.IOUtils.buffer(inputStream1);
        java.io.BufferedInputStream bufferedInputStream44 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (short) 100);
        java.io.InputStream inputStream46 = org.apache.commons.io.IOUtils.toInputStream("\n");
        byte[] byteArray48 = org.apache.commons.io.IOUtils.toByteArray(inputStream46, (int) (byte) 0);
        java.io.InputStream inputStream50 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray51 = new byte[] {};
        int int52 = org.apache.commons.io.IOUtils.length(byteArray51);
        int int53 = org.apache.commons.io.IOUtils.read(inputStream50, byteArray51);
        byte[] byteArray54 = org.apache.commons.io.IOUtils.toByteArray(inputStream50);
        byte[] byteArray56 = org.apache.commons.io.IOUtils.toByteArray(inputStream50, (int) (short) 0);
        byte[] byteArray57 = new byte[] {};
        int int58 = org.apache.commons.io.IOUtils.length(byteArray57);
        org.apache.commons.io.IOUtils.readFully(inputStream50, byteArray57);
        org.apache.commons.io.IOUtils.readFully(inputStream46, byteArray57);
        boolean boolean61 = org.apache.commons.io.IOUtils.contentEquals(inputStream1, inputStream46);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer62 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream46, iOExceptionConsumer62);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray65 = org.apache.commons.io.IOUtils.readFully(inputStream46, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.io.EOFException; message: Length to read: 35 actual: 0");
        } catch (java.io.EOFException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(inputStream11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream20);
        org.junit.Assert.assertNotNull(inputStream22);
        org.junit.Assert.assertNotNull(inputStream27);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(inputStream33);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(bufferedInputStream42);
        org.junit.Assert.assertNotNull(bufferedInputStream44);
        org.junit.Assert.assertNotNull(inputStream46);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertNotNull(inputStream50);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test1414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1414");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        java.io.BufferedInputStream bufferedInputStream10 = org.apache.commons.io.IOUtils.buffer(inputStream1);
        byte[] byteArray11 = org.apache.commons.io.IOUtils.toByteArray((java.io.InputStream) bufferedInputStream10);
        java.io.InputStream inputStream13 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream13);
        java.io.InputStream inputStream15 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream13);
        java.lang.String str16 = org.apache.commons.io.IOUtils.toString(inputStream13);
        java.io.InputStream inputStream17 = null;
        byte[] byteArray19 = org.apache.commons.io.IOUtils.toByteArray("");
        int int20 = org.apache.commons.io.IOUtils.read(inputStream17, byteArray19);
        org.apache.commons.io.IOUtils.readFully(inputStream13, byteArray19);
        java.lang.String str22 = org.apache.commons.io.IOUtils.toString(byteArray19);
        org.apache.commons.io.IOUtils.readFully((java.io.InputStream) bufferedInputStream10, byteArray19);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.String> strList25 = org.apache.commons.io.IOUtils.readLines((java.io.InputStream) bufferedInputStream10, "");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream10);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(inputStream13);
        org.junit.Assert.assertNotNull(inputStream15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
    }

    @Test
    public void test1415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1415");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.List<java.lang.String> strList3 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        long long5 = org.apache.commons.io.IOUtils.skip(inputStream1, (long) '/');
        java.nio.charset.Charset charset6 = null;
        java.lang.String str7 = org.apache.commons.io.IOUtils.toString(inputStream1, charset6);
        byte[] byteArray8 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.io.Writer writer9 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(byteArray8, writer9, "hi!");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: hi!");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(strList3);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
    }

    @Test
    public void test1416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1416");
        java.io.Reader reader0 = null;
        java.io.InputStream inputStream2 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray3 = new byte[] {};
        int int4 = org.apache.commons.io.IOUtils.length(byteArray3);
        int int5 = org.apache.commons.io.IOUtils.read(inputStream2, byteArray3);
        byte[] byteArray6 = org.apache.commons.io.IOUtils.toByteArray(inputStream2);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer7 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream2, iOExceptionConsumer7);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream2);
        java.io.BufferedInputStream bufferedInputStream11 = org.apache.commons.io.IOUtils.buffer(inputStream2, (int) (byte) 10);
        java.io.InputStream inputStream13 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream2, (int) (byte) 1);
        java.io.OutputStream outputStream14 = null;
        int int15 = org.apache.commons.io.IOUtils.copy(inputStream13, outputStream14);
        java.io.BufferedInputStream bufferedInputStream17 = org.apache.commons.io.IOUtils.buffer(inputStream13, (int) (byte) 10);
        char[] charArray18 = org.apache.commons.io.IOUtils.toCharArray((java.io.InputStream) bufferedInputStream17);
        int int19 = org.apache.commons.io.IOUtils.length(charArray18);
        org.apache.commons.io.IOUtils.readFully(reader0, charArray18);
        java.io.Writer writer21 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(charArray18, writer21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Writer.write(char[])\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream11);
        org.junit.Assert.assertNotNull(inputStream13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(bufferedInputStream17);
        org.junit.Assert.assertNotNull(charArray18);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray18), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray18), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray18), "[]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test1417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1417");
        java.io.InputStream inputStream0 = null;
        java.io.OutputStream outputStream1 = null;
        byte[] byteArray4 = new byte[] {};
        int int5 = org.apache.commons.io.IOUtils.length(byteArray4);
        java.io.OutputStream outputStream6 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray4, outputStream6);
        long long8 = org.apache.commons.io.IOUtils.copyLarge(inputStream0, outputStream1, 0L, (long) (byte) -1, byteArray4);
        java.io.OutputStream outputStream9 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray4, outputStream9);
        java.io.OutputStream outputStream11 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(byteArray4, outputStream11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.OutputStream.write(byte[])\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
    }

    @Test
    public void test1418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1418");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream5 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray("");
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray10);
        long long12 = org.apache.commons.io.IOUtils.copyLarge(inputStream4, outputStream5, 0L, 0L, byteArray10);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, byteArray10);
        java.io.BufferedInputStream bufferedInputStream15 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.nio.charset.Charset charset16 = null;
        java.util.List<java.lang.String> strList17 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset16);
        java.io.OutputStream outputStream18 = null;
        long long21 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream18, 0L, (long) 0);
        java.io.BufferedInputStream bufferedInputStream22 = org.apache.commons.io.IOUtils.buffer(inputStream1);
        java.io.BufferedInputStream bufferedInputStream23 = org.apache.commons.io.IOUtils.buffer(inputStream1);
        java.io.OutputStream outputStream24 = null;
        int int25 = org.apache.commons.io.IOUtils.copy(inputStream1, outputStream24);
        java.io.OutputStream outputStream26 = null;
        int int27 = org.apache.commons.io.IOUtils.copy(inputStream1, outputStream26);
        java.nio.charset.Charset charset28 = null;
        org.apache.commons.io.LineIterator lineIterator29 = org.apache.commons.io.IOUtils.lineIterator(inputStream1, charset28);
        java.lang.Class<?> wildcardClass30 = inputStream1.getClass();
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream15);
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream22);
        org.junit.Assert.assertNotNull(bufferedInputStream23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(lineIterator29);
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test1419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1419");
        java.io.OutputStream outputStream1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write((java.lang.CharSequence) "\n", outputStream1, "\r\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ??");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1420");
        // The following exception was thrown during execution in test generation
        try {
            java.io.InputStream inputStream2 = org.apache.commons.io.IOUtils.toInputStream("", "\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ?");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1421");
        java.io.Reader reader0 = null;
        java.io.Writer writer1 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long4 = org.apache.commons.io.IOUtils.copyLarge(reader0, writer1, (long) 100, (long) (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[], int, int)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1422");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.util.List<java.lang.String> strList4 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.OutputStream outputStream5 = null;
        long long6 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream5);
        java.io.OutputStream outputStream7 = null;
        java.io.InputStream inputStream11 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray12 = new byte[] {};
        int int13 = org.apache.commons.io.IOUtils.length(byteArray12);
        int int14 = org.apache.commons.io.IOUtils.read(inputStream11, byteArray12);
        long long15 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream7, (-1L), 1L, byteArray12);
        java.io.OutputStream outputStream16 = null;
        java.io.InputStream inputStream20 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream21 = null;
        java.io.InputStream inputStream24 = null;
        byte[] byteArray26 = org.apache.commons.io.IOUtils.toByteArray("");
        int int27 = org.apache.commons.io.IOUtils.read(inputStream24, byteArray26);
        long long28 = org.apache.commons.io.IOUtils.copyLarge(inputStream20, outputStream21, 0L, 0L, byteArray26);
        java.io.OutputStream outputStream29 = null;
        long long32 = org.apache.commons.io.IOUtils.copyLarge(inputStream20, outputStream29, (long) (short) 0, (-1L));
        java.lang.String str33 = org.apache.commons.io.IOUtils.toString(inputStream20);
        java.io.InputStream inputStream34 = null;
        java.io.OutputStream outputStream35 = null;
        byte[] byteArray38 = new byte[] {};
        int int39 = org.apache.commons.io.IOUtils.length(byteArray38);
        java.io.OutputStream outputStream40 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray38, outputStream40);
        long long42 = org.apache.commons.io.IOUtils.copyLarge(inputStream34, outputStream35, 0L, (long) (byte) -1, byteArray38);
        java.io.OutputStream outputStream43 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray38, outputStream43);
        int int45 = org.apache.commons.io.IOUtils.length(byteArray38);
        int int46 = org.apache.commons.io.IOUtils.read(inputStream20, byteArray38);
        long long47 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream16, (long) (byte) -1, (long) 10, byteArray38);
        java.io.Writer writer48 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(byteArray38, writer48, "");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(inputStream11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(inputStream20);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
    }

    @Test
    public void test1423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1423");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.util.List<java.lang.String> strList4 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.BufferedInputStream bufferedInputStream5 = org.apache.commons.io.IOUtils.buffer(inputStream1);
        java.io.OutputStream outputStream6 = null;
        long long7 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream6);
        java.util.List<java.lang.String> strList8 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.OutputStream outputStream9 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long12 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream9, 1L, 0L);
            org.junit.Assert.fail("Expected exception of type java.io.EOFException; message: Bytes to skip: 1 actual: 0");
        } catch (java.io.EOFException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertNotNull(bufferedInputStream5);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(strList8);
    }

    @Test
    public void test1424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1424");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.util.List<java.lang.String> strList4 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer5 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer5);
        java.io.InputStream inputStream8 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray9 = org.apache.commons.io.IOUtils.toByteArray(inputStream8);
        int int10 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray9);
        byte[] byteArray11 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.io.Writer writer12 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(byteArray11, writer12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Writer.write(String)\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertNotNull(inputStream8);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
    }

    @Test
    public void test1425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1425");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream5 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray("");
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray10);
        long long12 = org.apache.commons.io.IOUtils.copyLarge(inputStream4, outputStream5, 0L, 0L, byteArray10);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, byteArray10);
        java.io.BufferedInputStream bufferedInputStream15 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        org.apache.commons.io.IOUtils.closeQuietly(inputStream1);
        java.nio.charset.Charset charset17 = null;
        java.util.List<java.lang.String> strList18 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset17);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.io.OutputStream outputStream20 = null;
        int int21 = org.apache.commons.io.IOUtils.copy(inputStream1, outputStream20);
        java.io.InputStream inputStream22 = null;
        boolean boolean23 = org.apache.commons.io.IOUtils.contentEquals(inputStream1, inputStream22);
        java.io.OutputStream outputStream24 = null;
        java.nio.charset.Charset charset26 = null;
        java.io.InputStream inputStream27 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "", charset26);
        java.util.List<java.lang.String> strList28 = org.apache.commons.io.IOUtils.readLines(inputStream27);
        java.io.InputStream inputStream30 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray31 = new byte[] {};
        int int32 = org.apache.commons.io.IOUtils.length(byteArray31);
        int int33 = org.apache.commons.io.IOUtils.read(inputStream30, byteArray31);
        byte[] byteArray34 = org.apache.commons.io.IOUtils.toByteArray(inputStream30);
        int int35 = org.apache.commons.io.IOUtils.length(byteArray34);
        org.apache.commons.io.IOUtils.readFully(inputStream27, byteArray34);
        byte[] byteArray38 = org.apache.commons.io.IOUtils.toByteArray(inputStream27, 0L);
        java.io.OutputStream outputStream39 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray38, outputStream39);
        long long41 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream24, byteArray38);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.skipFully(inputStream1, (long) '4');
            org.junit.Assert.fail("Expected exception of type java.io.EOFException; message: Bytes to skip: 52 actual: 0");
        } catch (java.io.EOFException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream15);
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(inputStream27);
        org.junit.Assert.assertNotNull(strList28);
        org.junit.Assert.assertNotNull(inputStream30);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
    }

    @Test
    public void test1426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1426");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream5 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray("");
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray10);
        long long12 = org.apache.commons.io.IOUtils.copyLarge(inputStream4, outputStream5, 0L, 0L, byteArray10);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, byteArray10);
        java.io.BufferedInputStream bufferedInputStream15 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        org.apache.commons.io.IOUtils.closeQuietly(inputStream1);
        java.io.InputStream inputStream18 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray19 = new byte[] {};
        int int20 = org.apache.commons.io.IOUtils.length(byteArray19);
        int int21 = org.apache.commons.io.IOUtils.read(inputStream18, byteArray19);
        byte[] byteArray22 = org.apache.commons.io.IOUtils.toByteArray(inputStream18);
        byte[] byteArray24 = org.apache.commons.io.IOUtils.toByteArray(inputStream18, (int) (short) 0);
        long long26 = org.apache.commons.io.IOUtils.skip(inputStream18, 100L);
        java.io.InputStream inputStream28 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray29 = new byte[] {};
        int int30 = org.apache.commons.io.IOUtils.length(byteArray29);
        int int31 = org.apache.commons.io.IOUtils.read(inputStream28, byteArray29);
        byte[] byteArray32 = org.apache.commons.io.IOUtils.toByteArray(inputStream28);
        byte[] byteArray34 = org.apache.commons.io.IOUtils.toByteArray(inputStream28, (int) (short) 0);
        org.apache.commons.io.IOUtils.readFully(inputStream18, byteArray34);
        org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray34);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly(inputStream1);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray40 = org.apache.commons.io.IOUtils.readFully(inputStream1, 10);
            org.junit.Assert.fail("Expected exception of type java.io.EOFException; message: Length to read: 10 actual: 0");
        } catch (java.io.EOFException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream15);
        org.junit.Assert.assertNotNull(inputStream18);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(inputStream28);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
    }

    @Test
    public void test1427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1427");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray(inputStream1, (int) (short) 0);
        java.io.BufferedInputStream bufferedInputStream8 = org.apache.commons.io.IOUtils.buffer(inputStream1);
        org.apache.commons.io.function.IOConsumer<java.io.IOException> iOExceptionIOConsumer9 = null;
        org.apache.commons.io.IOUtils.close((java.io.Closeable) bufferedInputStream8, iOExceptionIOConsumer9);
        java.io.InputStream inputStream12 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream13 = null;
        java.io.InputStream inputStream16 = null;
        byte[] byteArray18 = org.apache.commons.io.IOUtils.toByteArray("");
        int int19 = org.apache.commons.io.IOUtils.read(inputStream16, byteArray18);
        long long20 = org.apache.commons.io.IOUtils.copyLarge(inputStream12, outputStream13, 0L, 0L, byteArray18);
        java.nio.charset.Charset charset21 = null;
        java.util.List<java.lang.String> strList22 = org.apache.commons.io.IOUtils.readLines(inputStream12, charset21);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream12);
        java.io.InputStream inputStream25 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream12, (int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean26 = org.apache.commons.io.IOUtils.contentEquals((java.io.InputStream) bufferedInputStream8, inputStream12);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Stream closed");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream8);
        org.junit.Assert.assertNotNull(inputStream12);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(strList22);
        org.junit.Assert.assertNotNull(inputStream25);
    }

    @Test
    public void test1428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1428");
        java.io.Reader reader0 = null;
        java.io.InputStream inputStream2 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray3 = new byte[] {};
        int int4 = org.apache.commons.io.IOUtils.length(byteArray3);
        int int5 = org.apache.commons.io.IOUtils.read(inputStream2, byteArray3);
        byte[] byteArray6 = org.apache.commons.io.IOUtils.toByteArray(inputStream2);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer7 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream2, iOExceptionConsumer7);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream2);
        java.io.BufferedInputStream bufferedInputStream11 = org.apache.commons.io.IOUtils.buffer(inputStream2, (int) (byte) 10);
        java.io.InputStream inputStream13 = org.apache.commons.io.IOUtils.toBufferedInputStream((java.io.InputStream) bufferedInputStream11, (int) '#');
        java.nio.charset.Charset charset14 = null;
        char[] charArray15 = org.apache.commons.io.IOUtils.toCharArray(inputStream13, charset14);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.readFully(reader0, charArray15, 10, (int) '\\');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[], int, int)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream11);
        org.junit.Assert.assertNotNull(inputStream13);
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[]");
    }

    @Test
    public void test1429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1429");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream5 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray("");
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray10);
        long long12 = org.apache.commons.io.IOUtils.copyLarge(inputStream4, outputStream5, 0L, 0L, byteArray10);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, byteArray10);
        java.io.BufferedInputStream bufferedInputStream15 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        org.apache.commons.io.IOUtils.closeQuietly(inputStream1);
        java.io.InputStream inputStream18 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray19 = new byte[] {};
        int int20 = org.apache.commons.io.IOUtils.length(byteArray19);
        int int21 = org.apache.commons.io.IOUtils.read(inputStream18, byteArray19);
        byte[] byteArray22 = org.apache.commons.io.IOUtils.toByteArray(inputStream18);
        byte[] byteArray24 = org.apache.commons.io.IOUtils.toByteArray(inputStream18, (int) (short) 0);
        long long26 = org.apache.commons.io.IOUtils.skip(inputStream18, 100L);
        java.io.InputStream inputStream28 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray29 = new byte[] {};
        int int30 = org.apache.commons.io.IOUtils.length(byteArray29);
        int int31 = org.apache.commons.io.IOUtils.read(inputStream28, byteArray29);
        byte[] byteArray32 = org.apache.commons.io.IOUtils.toByteArray(inputStream28);
        byte[] byteArray34 = org.apache.commons.io.IOUtils.toByteArray(inputStream28, (int) (short) 0);
        org.apache.commons.io.IOUtils.readFully(inputStream18, byteArray34);
        org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray34);
        java.lang.String str37 = org.apache.commons.io.IOUtils.toString(inputStream1);
        java.util.List<java.lang.String> strList38 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream15);
        org.junit.Assert.assertNotNull(inputStream18);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(inputStream28);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(strList38);
    }

    @Test
    public void test1430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1430");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.BufferedInputStream bufferedInputStream10 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.io.InputStream inputStream12 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, (int) (byte) 1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer13 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer13);
        java.io.OutputStream outputStream15 = null;
        java.io.InputStream inputStream17 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray18 = new byte[] {};
        int int19 = org.apache.commons.io.IOUtils.length(byteArray18);
        int int20 = org.apache.commons.io.IOUtils.read(inputStream17, byteArray18);
        byte[] byteArray21 = org.apache.commons.io.IOUtils.toByteArray(inputStream17);
        java.io.InputStream inputStream23 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray24 = new byte[] {};
        int int25 = org.apache.commons.io.IOUtils.length(byteArray24);
        int int26 = org.apache.commons.io.IOUtils.read(inputStream23, byteArray24);
        byte[] byteArray27 = org.apache.commons.io.IOUtils.toByteArray(inputStream23);
        int int28 = org.apache.commons.io.IOUtils.length(byteArray27);
        org.apache.commons.io.IOUtils.readFully(inputStream17, byteArray27);
        long long30 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream15, byteArray27);
        java.io.BufferedInputStream bufferedInputStream32 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (short) 100);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer33 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) bufferedInputStream32, iOExceptionConsumer33);
        java.io.BufferedInputStream bufferedInputStream35 = org.apache.commons.io.IOUtils.buffer((java.io.InputStream) bufferedInputStream32);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray37 = org.apache.commons.io.IOUtils.toByteArray((java.io.InputStream) bufferedInputStream32, (long) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Size must be equal or greater than zero: -1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream10);
        org.junit.Assert.assertNotNull(inputStream12);
        org.junit.Assert.assertNotNull(inputStream17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertNotNull(inputStream23);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream32);
        org.junit.Assert.assertNotNull(bufferedInputStream35);
    }

    @Test
    public void test1431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1431");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        java.nio.charset.Charset charset10 = null;
        java.util.List<java.lang.String> strList11 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset10);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.nio.charset.Charset charset13 = null;
        java.lang.String str14 = org.apache.commons.io.IOUtils.toString(inputStream1, charset13);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer15 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer15);
        java.io.InputStream inputStream17 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.skipFully(inputStream17, (long) '/');
            org.junit.Assert.fail("Expected exception of type java.io.EOFException; message: Bytes to skip: 47 actual: 0");
        } catch (java.io.EOFException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(inputStream17);
    }

    @Test
    public void test1432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1432");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        java.io.Writer writer5 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer5);
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str9 = org.apache.commons.io.IOUtils.toString(byteArray7, "\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ?");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
    }

    @Test
    public void test1433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1433");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray(inputStream1, (int) (short) 0);
        java.io.BufferedInputStream bufferedInputStream8 = org.apache.commons.io.IOUtils.buffer(inputStream1);
        java.io.InputStream inputStream9 = org.apache.commons.io.IOUtils.toBufferedInputStream((java.io.InputStream) bufferedInputStream8);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str11 = org.apache.commons.io.IOUtils.toString(inputStream9, "\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ?");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream8);
        org.junit.Assert.assertNotNull(inputStream9);
    }

    @Test
    public void test1434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1434");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        java.nio.charset.Charset charset5 = null;
        java.lang.String str6 = org.apache.commons.io.IOUtils.toString(inputStream1, charset5);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        byte[] byteArray8 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.lang.String str9 = org.apache.commons.io.IOUtils.toString(byteArray8);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str11 = org.apache.commons.io.IOUtils.toString(byteArray8, "\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ?");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
    }

    @Test
    public void test1435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1435");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream3 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1);
        byte[] byteArray8 = new byte[] { (byte) -1, (byte) 100, (byte) 1, (byte) -1 };
        int int9 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray8);
        java.nio.charset.Charset charset10 = null;
        java.lang.String str11 = org.apache.commons.io.IOUtils.toString(inputStream1, charset10);
        java.io.Writer writer12 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.copy(inputStream1, writer12, "\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ?");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream3);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-1, 100, 1, -1]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
    }

    @Test
    public void test1436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1436");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.BufferedInputStream bufferedInputStream10 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.io.InputStream inputStream12 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, (int) (byte) 1);
        java.io.OutputStream outputStream13 = null;
        int int14 = org.apache.commons.io.IOUtils.copy(inputStream12, outputStream13);
        java.io.BufferedInputStream bufferedInputStream16 = org.apache.commons.io.IOUtils.buffer(inputStream12, (int) (byte) 10);
        byte[] byteArray18 = org.apache.commons.io.IOUtils.toByteArray(inputStream12, 0);
        java.io.BufferedInputStream bufferedInputStream19 = org.apache.commons.io.IOUtils.buffer(inputStream12);
        java.io.Writer writer20 = null;
        java.nio.charset.Charset charset21 = null;
        org.apache.commons.io.IOUtils.copy((java.io.InputStream) bufferedInputStream19, writer20, charset21);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray24 = org.apache.commons.io.IOUtils.toByteArray((java.io.InputStream) bufferedInputStream19, (long) (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Size must be equal or greater than zero: -1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream10);
        org.junit.Assert.assertNotNull(inputStream12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(bufferedInputStream16);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream19);
    }

    @Test
    public void test1437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1437");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        org.apache.commons.io.IOUtils.closeQuietly(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.LineIterator lineIterator8 = org.apache.commons.io.IOUtils.lineIterator(inputStream1, "");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test1438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1438");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream5 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray("");
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray10);
        long long12 = org.apache.commons.io.IOUtils.copyLarge(inputStream4, outputStream5, 0L, 0L, byteArray10);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, byteArray10);
        java.io.BufferedInputStream bufferedInputStream15 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.nio.charset.Charset charset16 = null;
        java.util.List<java.lang.String> strList17 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset16);
        java.io.OutputStream outputStream18 = null;
        long long21 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream18, 0L, (long) 0);
        java.nio.charset.Charset charset22 = null;
        char[] charArray23 = org.apache.commons.io.IOUtils.toCharArray(inputStream1, charset22);
        java.io.InputStream inputStream25 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream25);
        java.io.InputStream inputStream27 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream25);
        java.lang.String str28 = org.apache.commons.io.IOUtils.toString(inputStream25);
        java.io.InputStream inputStream29 = null;
        byte[] byteArray31 = org.apache.commons.io.IOUtils.toByteArray("");
        int int32 = org.apache.commons.io.IOUtils.read(inputStream29, byteArray31);
        org.apache.commons.io.IOUtils.readFully(inputStream25, byteArray31);
        int int34 = org.apache.commons.io.IOUtils.length(byteArray31);
        org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray31);
        java.io.Writer writer36 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(byteArray31, writer36);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Writer.write(String)\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream15);
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[]");
        org.junit.Assert.assertNotNull(inputStream25);
        org.junit.Assert.assertNotNull(inputStream27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
    }

    @Test
    public void test1439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1439");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream5 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray("");
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray10);
        long long12 = org.apache.commons.io.IOUtils.copyLarge(inputStream4, outputStream5, 0L, 0L, byteArray10);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, byteArray10);
        java.io.BufferedInputStream bufferedInputStream15 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.io.InputStream inputStream17 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray18 = org.apache.commons.io.IOUtils.toByteArray(inputStream17);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream17);
        java.io.InputStream inputStream21 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream22 = null;
        java.io.InputStream inputStream25 = null;
        byte[] byteArray27 = org.apache.commons.io.IOUtils.toByteArray("");
        int int28 = org.apache.commons.io.IOUtils.read(inputStream25, byteArray27);
        long long29 = org.apache.commons.io.IOUtils.copyLarge(inputStream21, outputStream22, 0L, 0L, byteArray27);
        java.nio.charset.Charset charset30 = null;
        java.util.List<java.lang.String> strList31 = org.apache.commons.io.IOUtils.readLines(inputStream21, charset30);
        java.io.InputStream inputStream33 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream34 = null;
        java.io.InputStream inputStream37 = null;
        byte[] byteArray39 = org.apache.commons.io.IOUtils.toByteArray("");
        int int40 = org.apache.commons.io.IOUtils.read(inputStream37, byteArray39);
        long long41 = org.apache.commons.io.IOUtils.copyLarge(inputStream33, outputStream34, 0L, 0L, byteArray39);
        java.nio.charset.Charset charset42 = null;
        java.util.List<java.lang.String> strList43 = org.apache.commons.io.IOUtils.readLines(inputStream33, charset42);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream33);
        boolean boolean45 = org.apache.commons.io.IOUtils.contentEquals(inputStream21, inputStream33);
        java.io.OutputStream outputStream46 = null;
        java.io.InputStream inputStream48 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream49 = null;
        java.io.InputStream inputStream52 = null;
        byte[] byteArray54 = org.apache.commons.io.IOUtils.toByteArray("");
        int int55 = org.apache.commons.io.IOUtils.read(inputStream52, byteArray54);
        long long56 = org.apache.commons.io.IOUtils.copyLarge(inputStream48, outputStream49, 0L, 0L, byteArray54);
        long long57 = org.apache.commons.io.IOUtils.copyLarge(inputStream33, outputStream46, byteArray54);
        org.apache.commons.io.IOUtils.readFully(inputStream17, byteArray54);
        org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray54);
        int int60 = org.apache.commons.io.IOUtils.length(byteArray54);
        java.io.Writer writer61 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(byteArray54, writer61, "\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ?");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream15);
        org.junit.Assert.assertNotNull(inputStream17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(inputStream21);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNotNull(strList31);
        org.junit.Assert.assertNotNull(inputStream33);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertNotNull(strList43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(inputStream48);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
    }

    @Test
    public void test1440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1440");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        java.nio.charset.Charset charset10 = null;
        java.util.List<java.lang.String> strList11 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset10);
        java.nio.charset.Charset charset12 = null;
        char[] charArray13 = org.apache.commons.io.IOUtils.toCharArray(inputStream1, charset12);
        byte[] byteArray15 = org.apache.commons.io.IOUtils.toByteArray(inputStream1, (long) (byte) 0);
        java.io.Writer writer16 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(byteArray15, writer16, "\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ?");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
    }

    @Test
    public void test1441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1441");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        long long9 = org.apache.commons.io.IOUtils.skip(inputStream1, (long) (byte) 100);
        java.lang.String str10 = org.apache.commons.io.IOUtils.toString(inputStream1);
        java.io.Writer writer11 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer11);
        java.io.OutputStream outputStream13 = null;
        java.io.InputStream inputStream15 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray16 = org.apache.commons.io.IOUtils.toByteArray(inputStream15);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream15);
        java.util.List<java.lang.String> strList18 = org.apache.commons.io.IOUtils.readLines(inputStream15);
        java.io.OutputStream outputStream19 = null;
        long long20 = org.apache.commons.io.IOUtils.copyLarge(inputStream15, outputStream19);
        java.io.OutputStream outputStream21 = null;
        java.io.InputStream inputStream25 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray26 = new byte[] {};
        int int27 = org.apache.commons.io.IOUtils.length(byteArray26);
        int int28 = org.apache.commons.io.IOUtils.read(inputStream25, byteArray26);
        long long29 = org.apache.commons.io.IOUtils.copyLarge(inputStream15, outputStream21, (-1L), 1L, byteArray26);
        long long30 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream13, byteArray26);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.LineIterator lineIterator32 = org.apache.commons.io.IOUtils.lineIterator(inputStream1, "\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ?");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(inputStream15);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(inputStream25);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
    }

    @Test
    public void test1442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1442");
        java.lang.CharSequence charSequence0 = null;
        java.io.OutputStream outputStream1 = null;
        org.apache.commons.io.IOUtils.write(charSequence0, outputStream1);
    }

    @Test
    public void test1443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1443");
        java.io.Reader reader0 = null;
        char[] charArray1 = new char[] {};
        int int2 = org.apache.commons.io.IOUtils.length(charArray1);
        int int3 = org.apache.commons.io.IOUtils.read(reader0, charArray1);
        java.io.Writer writer4 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray1, writer4);
        int int6 = org.apache.commons.io.IOUtils.length(charArray1);
        int int7 = org.apache.commons.io.IOUtils.length(charArray1);
        org.junit.Assert.assertNotNull(charArray1);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray1), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray1), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray1), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test1444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1444");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        java.nio.charset.Charset charset10 = null;
        java.util.List<java.lang.String> strList11 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset10);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.BufferedInputStream bufferedInputStream13 = org.apache.commons.io.IOUtils.buffer(inputStream1);
        java.io.OutputStream outputStream14 = null;
        long long15 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream14);
        byte[] byteArray16 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.io.Writer writer17 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(byteArray16, writer17, "\r\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ??");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertNotNull(bufferedInputStream13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
    }

    @Test
    public void test1445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1445");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        java.nio.charset.Charset charset5 = null;
        org.apache.commons.io.LineIterator lineIterator6 = org.apache.commons.io.IOUtils.lineIterator(inputStream1, charset5);
        java.io.InputStream inputStream8 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray9 = new byte[] {};
        int int10 = org.apache.commons.io.IOUtils.length(byteArray9);
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray9);
        byte[] byteArray12 = org.apache.commons.io.IOUtils.toByteArray(inputStream8);
        boolean boolean13 = org.apache.commons.io.IOUtils.contentEquals(inputStream1, inputStream8);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.BufferedInputStream bufferedInputStream16 = org.apache.commons.io.IOUtils.buffer(inputStream1, 3);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.String> strList18 = org.apache.commons.io.IOUtils.readLines(inputStream1, "");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(lineIterator6);
        org.junit.Assert.assertNotNull(inputStream8);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(bufferedInputStream16);
    }

    @Test
    public void test1446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1446");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.nio.charset.Charset charset6 = null;
        java.util.List<java.lang.String> strList7 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset6);
        java.nio.charset.Charset charset8 = null;
        org.apache.commons.io.LineIterator lineIterator9 = org.apache.commons.io.IOUtils.lineIterator(inputStream1, charset8);
        java.io.InputStream inputStream11 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, 6);
        java.io.BufferedInputStream bufferedInputStream13 = org.apache.commons.io.IOUtils.buffer(inputStream11, 3);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer14 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream11, iOExceptionConsumer14);
        java.io.BufferedInputStream bufferedInputStream17 = org.apache.commons.io.IOUtils.buffer(inputStream11, (int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray19 = org.apache.commons.io.IOUtils.readFully((java.io.InputStream) bufferedInputStream17, 3);
            org.junit.Assert.fail("Expected exception of type java.io.EOFException; message: Length to read: 3 actual: 0");
        } catch (java.io.EOFException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertNotNull(lineIterator9);
        org.junit.Assert.assertNotNull(inputStream11);
        org.junit.Assert.assertNotNull(bufferedInputStream13);
        org.junit.Assert.assertNotNull(bufferedInputStream17);
    }

    @Test
    public void test1447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1447");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream5 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray("");
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray10);
        long long12 = org.apache.commons.io.IOUtils.copyLarge(inputStream4, outputStream5, 0L, 0L, byteArray10);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, byteArray10);
        java.io.BufferedInputStream bufferedInputStream15 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        org.apache.commons.io.IOUtils.closeQuietly(inputStream1);
        java.nio.charset.Charset charset17 = null;
        java.lang.String str18 = org.apache.commons.io.IOUtils.toString(inputStream1, charset17);
        java.nio.charset.Charset charset19 = null;
        java.util.List<java.lang.String> strList20 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset19);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        // The following exception was thrown during execution in test generation
        try {
            java.io.InputStream inputStream23 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Negative initial size: -1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(strList20);
    }

    @Test
    public void test1448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1448");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.BufferedInputStream bufferedInputStream10 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.io.InputStream inputStream12 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, (int) (byte) 1);
        java.io.OutputStream outputStream13 = null;
        int int14 = org.apache.commons.io.IOUtils.copy(inputStream12, outputStream13);
        java.io.BufferedInputStream bufferedInputStream16 = org.apache.commons.io.IOUtils.buffer(inputStream12, (int) (byte) 10);
        java.io.InputStream inputStream18 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray19 = new byte[] {};
        int int20 = org.apache.commons.io.IOUtils.length(byteArray19);
        int int21 = org.apache.commons.io.IOUtils.read(inputStream18, byteArray19);
        byte[] byteArray22 = org.apache.commons.io.IOUtils.toByteArray(inputStream18);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer23 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream18, iOExceptionConsumer23);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream18);
        java.io.BufferedInputStream bufferedInputStream27 = org.apache.commons.io.IOUtils.buffer(inputStream18, (int) (byte) 10);
        java.io.InputStream inputStream29 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream18, (int) (byte) 1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer30 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream18, iOExceptionConsumer30);
        java.io.OutputStream outputStream32 = null;
        java.io.InputStream inputStream34 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray35 = new byte[] {};
        int int36 = org.apache.commons.io.IOUtils.length(byteArray35);
        int int37 = org.apache.commons.io.IOUtils.read(inputStream34, byteArray35);
        byte[] byteArray38 = org.apache.commons.io.IOUtils.toByteArray(inputStream34);
        java.io.InputStream inputStream40 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray41 = new byte[] {};
        int int42 = org.apache.commons.io.IOUtils.length(byteArray41);
        int int43 = org.apache.commons.io.IOUtils.read(inputStream40, byteArray41);
        byte[] byteArray44 = org.apache.commons.io.IOUtils.toByteArray(inputStream40);
        int int45 = org.apache.commons.io.IOUtils.length(byteArray44);
        org.apache.commons.io.IOUtils.readFully(inputStream34, byteArray44);
        long long47 = org.apache.commons.io.IOUtils.copyLarge(inputStream18, outputStream32, byteArray44);
        java.io.InputStream inputStream49 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream50 = null;
        java.io.InputStream inputStream53 = null;
        byte[] byteArray55 = org.apache.commons.io.IOUtils.toByteArray("");
        int int56 = org.apache.commons.io.IOUtils.read(inputStream53, byteArray55);
        long long57 = org.apache.commons.io.IOUtils.copyLarge(inputStream49, outputStream50, 0L, 0L, byteArray55);
        java.nio.charset.Charset charset58 = null;
        java.util.List<java.lang.String> strList59 = org.apache.commons.io.IOUtils.readLines(inputStream49, charset58);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream49);
        java.nio.charset.Charset charset61 = null;
        java.lang.String str62 = org.apache.commons.io.IOUtils.toString(inputStream49, charset61);
        java.io.Writer writer63 = null;
        org.apache.commons.io.IOUtils.copy(inputStream49, writer63);
        byte[] byteArray65 = org.apache.commons.io.IOUtils.toByteArray(inputStream49);
        int int66 = org.apache.commons.io.IOUtils.read(inputStream18, byteArray65);
        org.apache.commons.io.IOUtils.readFully(inputStream12, byteArray65);
        java.io.InputStream inputStream69 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray70 = new byte[] {};
        int int71 = org.apache.commons.io.IOUtils.length(byteArray70);
        int int72 = org.apache.commons.io.IOUtils.read(inputStream69, byteArray70);
        java.io.InputStream inputStream74 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray75 = new byte[] {};
        int int76 = org.apache.commons.io.IOUtils.length(byteArray75);
        int int77 = org.apache.commons.io.IOUtils.read(inputStream74, byteArray75);
        byte[] byteArray78 = org.apache.commons.io.IOUtils.toByteArray(inputStream74);
        byte[] byteArray80 = org.apache.commons.io.IOUtils.toByteArray(inputStream74, (int) (short) 0);
        int int81 = org.apache.commons.io.IOUtils.read(inputStream69, byteArray80);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.readFully(inputStream12, byteArray80, (int) (byte) 0, (int) '/');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Range [0, 0 + 47) out of bounds for length 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream10);
        org.junit.Assert.assertNotNull(inputStream12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(bufferedInputStream16);
        org.junit.Assert.assertNotNull(inputStream18);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream27);
        org.junit.Assert.assertNotNull(inputStream29);
        org.junit.Assert.assertNotNull(inputStream34);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertNotNull(inputStream40);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertNotNull(inputStream49);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertNotNull(strList59);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(inputStream69);
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(inputStream74);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[]");
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
    }

    @Test
    public void test1449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1449");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        java.nio.charset.Charset charset5 = null;
        org.apache.commons.io.LineIterator lineIterator6 = org.apache.commons.io.IOUtils.lineIterator(inputStream1, charset5);
        java.io.InputStream inputStream8 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray9 = new byte[] {};
        int int10 = org.apache.commons.io.IOUtils.length(byteArray9);
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray9);
        byte[] byteArray12 = org.apache.commons.io.IOUtils.toByteArray(inputStream8);
        boolean boolean13 = org.apache.commons.io.IOUtils.contentEquals(inputStream1, inputStream8);
        java.io.Writer writer14 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.copy(inputStream1, writer14, "hi!");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: hi!");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(lineIterator6);
        org.junit.Assert.assertNotNull(inputStream8);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test1450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1450");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        java.nio.charset.Charset charset10 = null;
        java.util.List<java.lang.String> strList11 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset10);
        java.io.InputStream inputStream13 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream14 = null;
        java.io.InputStream inputStream17 = null;
        byte[] byteArray19 = org.apache.commons.io.IOUtils.toByteArray("");
        int int20 = org.apache.commons.io.IOUtils.read(inputStream17, byteArray19);
        long long21 = org.apache.commons.io.IOUtils.copyLarge(inputStream13, outputStream14, 0L, 0L, byteArray19);
        java.nio.charset.Charset charset22 = null;
        java.util.List<java.lang.String> strList23 = org.apache.commons.io.IOUtils.readLines(inputStream13, charset22);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream13);
        boolean boolean25 = org.apache.commons.io.IOUtils.contentEquals(inputStream1, inputStream13);
        java.io.Writer writer26 = null;
        org.apache.commons.io.IOUtils.copy(inputStream13, writer26);
        java.io.Writer writer28 = null;
        java.nio.charset.Charset charset29 = null;
        org.apache.commons.io.IOUtils.copy(inputStream13, writer28, charset29);
        java.io.InputStream inputStream31 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream13);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str33 = org.apache.commons.io.IOUtils.toString(inputStream31, "hi!");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: hi!");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertNotNull(inputStream13);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(strList23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(inputStream31);
    }

    @Test
    public void test1451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1451");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray(inputStream1, (int) (short) 0);
        long long9 = org.apache.commons.io.IOUtils.skip(inputStream1, 100L);
        java.io.InputStream inputStream10 = null;
        java.io.InputStream inputStream11 = null;
        java.io.OutputStream outputStream12 = null;
        byte[] byteArray15 = new byte[] {};
        int int16 = org.apache.commons.io.IOUtils.length(byteArray15);
        java.io.OutputStream outputStream17 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray15, outputStream17);
        long long19 = org.apache.commons.io.IOUtils.copyLarge(inputStream11, outputStream12, 0L, (long) (byte) -1, byteArray15);
        java.io.OutputStream outputStream20 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray15, outputStream20);
        org.apache.commons.io.IOUtils.readFully(inputStream10, byteArray15);
        int int23 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray15);
        java.io.InputStream inputStream24 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1);
        java.io.BufferedInputStream bufferedInputStream25 = org.apache.commons.io.IOUtils.buffer(inputStream1);
        java.nio.charset.Charset charset26 = null;
        java.util.List<java.lang.String> strList27 = org.apache.commons.io.IOUtils.readLines((java.io.InputStream) bufferedInputStream25, charset26);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.String> strList29 = org.apache.commons.io.IOUtils.readLines((java.io.InputStream) bufferedInputStream25, "hi!");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: hi!");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(inputStream24);
        org.junit.Assert.assertNotNull(bufferedInputStream25);
        org.junit.Assert.assertNotNull(strList27);
    }

    @Test
    public void test1452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1452");
        java.io.Reader reader0 = null;
        java.io.InputStream inputStream2 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray3 = org.apache.commons.io.IOUtils.toByteArray(inputStream2);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream2);
        java.util.List<java.lang.String> strList5 = org.apache.commons.io.IOUtils.readLines(inputStream2);
        java.io.OutputStream outputStream6 = null;
        long long7 = org.apache.commons.io.IOUtils.copyLarge(inputStream2, outputStream6);
        java.io.Writer writer8 = null;
        org.apache.commons.io.IOUtils.copy(inputStream2, writer8);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream2);
        java.io.InputStream inputStream12 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray13 = new byte[] {};
        int int14 = org.apache.commons.io.IOUtils.length(byteArray13);
        int int15 = org.apache.commons.io.IOUtils.read(inputStream12, byteArray13);
        byte[] byteArray16 = org.apache.commons.io.IOUtils.toByteArray(inputStream12);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer17 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream12, iOExceptionConsumer17);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream12);
        java.io.BufferedInputStream bufferedInputStream21 = org.apache.commons.io.IOUtils.buffer(inputStream12, (int) (byte) 10);
        java.io.InputStream inputStream23 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream12, (int) (byte) 1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer24 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream12, iOExceptionConsumer24);
        java.io.OutputStream outputStream26 = null;
        java.io.InputStream inputStream28 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray29 = new byte[] {};
        int int30 = org.apache.commons.io.IOUtils.length(byteArray29);
        int int31 = org.apache.commons.io.IOUtils.read(inputStream28, byteArray29);
        byte[] byteArray32 = org.apache.commons.io.IOUtils.toByteArray(inputStream28);
        java.io.InputStream inputStream34 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray35 = new byte[] {};
        int int36 = org.apache.commons.io.IOUtils.length(byteArray35);
        int int37 = org.apache.commons.io.IOUtils.read(inputStream34, byteArray35);
        byte[] byteArray38 = org.apache.commons.io.IOUtils.toByteArray(inputStream34);
        int int39 = org.apache.commons.io.IOUtils.length(byteArray38);
        org.apache.commons.io.IOUtils.readFully(inputStream28, byteArray38);
        long long41 = org.apache.commons.io.IOUtils.copyLarge(inputStream12, outputStream26, byteArray38);
        boolean boolean42 = org.apache.commons.io.IOUtils.contentEquals(inputStream2, inputStream12);
        java.io.BufferedInputStream bufferedInputStream43 = org.apache.commons.io.IOUtils.buffer(inputStream2);
        java.io.BufferedInputStream bufferedInputStream45 = org.apache.commons.io.IOUtils.buffer(inputStream2, (int) (short) 100);
        java.io.InputStream inputStream47 = org.apache.commons.io.IOUtils.toInputStream("\n");
        byte[] byteArray49 = org.apache.commons.io.IOUtils.toByteArray(inputStream47, (int) (byte) 0);
        java.io.InputStream inputStream51 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray52 = new byte[] {};
        int int53 = org.apache.commons.io.IOUtils.length(byteArray52);
        int int54 = org.apache.commons.io.IOUtils.read(inputStream51, byteArray52);
        byte[] byteArray55 = org.apache.commons.io.IOUtils.toByteArray(inputStream51);
        byte[] byteArray57 = org.apache.commons.io.IOUtils.toByteArray(inputStream51, (int) (short) 0);
        byte[] byteArray58 = new byte[] {};
        int int59 = org.apache.commons.io.IOUtils.length(byteArray58);
        org.apache.commons.io.IOUtils.readFully(inputStream51, byteArray58);
        org.apache.commons.io.IOUtils.readFully(inputStream47, byteArray58);
        boolean boolean62 = org.apache.commons.io.IOUtils.contentEquals(inputStream2, inputStream47);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer63 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream47, iOExceptionConsumer63);
        java.io.InputStream inputStream65 = null;
        java.io.OutputStream outputStream66 = null;
        byte[] byteArray69 = new byte[] {};
        int int70 = org.apache.commons.io.IOUtils.length(byteArray69);
        java.io.OutputStream outputStream71 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray69, outputStream71);
        long long73 = org.apache.commons.io.IOUtils.copyLarge(inputStream65, outputStream66, 0L, (long) (byte) -1, byteArray69);
        java.io.OutputStream outputStream74 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray69, outputStream74);
        org.apache.commons.io.IOUtils.readFully(inputStream47, byteArray69);
        java.nio.charset.Charset charset77 = null;
        char[] charArray78 = org.apache.commons.io.IOUtils.toCharArray(inputStream47, charset77);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.readFully(reader0, charArray78, (int) (short) 0, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[], int, int)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertNotNull(strList5);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(inputStream12);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream21);
        org.junit.Assert.assertNotNull(inputStream23);
        org.junit.Assert.assertNotNull(inputStream28);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertNotNull(inputStream34);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(bufferedInputStream43);
        org.junit.Assert.assertNotNull(bufferedInputStream45);
        org.junit.Assert.assertNotNull(inputStream47);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
        org.junit.Assert.assertNotNull(inputStream51);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[]");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 0L + "'", long73 == 0L);
        org.junit.Assert.assertNotNull(charArray78);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray78), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray78), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray78), "[]");
    }

    @Test
    public void test1453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1453");
        java.io.OutputStream outputStream0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.BufferedOutputStream bufferedOutputStream2 = org.apache.commons.io.IOUtils.buffer(outputStream0, 6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: outputStream");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1454");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.BufferedInputStream bufferedInputStream10 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.io.InputStream inputStream12 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, (int) (byte) 1);
        java.io.OutputStream outputStream13 = null;
        int int14 = org.apache.commons.io.IOUtils.copy(inputStream12, outputStream13);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream12);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.skipFully(inputStream12, (long) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Bytes to skip must not be negative: -1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream10);
        org.junit.Assert.assertNotNull(inputStream12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test1455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1455");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream5 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray("");
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray10);
        long long12 = org.apache.commons.io.IOUtils.copyLarge(inputStream4, outputStream5, 0L, 0L, byteArray10);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, byteArray10);
        java.io.BufferedInputStream bufferedInputStream15 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.io.InputStream inputStream17 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray18 = org.apache.commons.io.IOUtils.toByteArray(inputStream17);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream17);
        java.io.InputStream inputStream21 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream22 = null;
        java.io.InputStream inputStream25 = null;
        byte[] byteArray27 = org.apache.commons.io.IOUtils.toByteArray("");
        int int28 = org.apache.commons.io.IOUtils.read(inputStream25, byteArray27);
        long long29 = org.apache.commons.io.IOUtils.copyLarge(inputStream21, outputStream22, 0L, 0L, byteArray27);
        java.nio.charset.Charset charset30 = null;
        java.util.List<java.lang.String> strList31 = org.apache.commons.io.IOUtils.readLines(inputStream21, charset30);
        java.io.InputStream inputStream33 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream34 = null;
        java.io.InputStream inputStream37 = null;
        byte[] byteArray39 = org.apache.commons.io.IOUtils.toByteArray("");
        int int40 = org.apache.commons.io.IOUtils.read(inputStream37, byteArray39);
        long long41 = org.apache.commons.io.IOUtils.copyLarge(inputStream33, outputStream34, 0L, 0L, byteArray39);
        java.nio.charset.Charset charset42 = null;
        java.util.List<java.lang.String> strList43 = org.apache.commons.io.IOUtils.readLines(inputStream33, charset42);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream33);
        boolean boolean45 = org.apache.commons.io.IOUtils.contentEquals(inputStream21, inputStream33);
        java.io.OutputStream outputStream46 = null;
        java.io.InputStream inputStream48 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream49 = null;
        java.io.InputStream inputStream52 = null;
        byte[] byteArray54 = org.apache.commons.io.IOUtils.toByteArray("");
        int int55 = org.apache.commons.io.IOUtils.read(inputStream52, byteArray54);
        long long56 = org.apache.commons.io.IOUtils.copyLarge(inputStream48, outputStream49, 0L, 0L, byteArray54);
        long long57 = org.apache.commons.io.IOUtils.copyLarge(inputStream33, outputStream46, byteArray54);
        org.apache.commons.io.IOUtils.readFully(inputStream17, byteArray54);
        org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray54);
        java.lang.String str60 = org.apache.commons.io.IOUtils.toString(inputStream1);
        java.io.BufferedInputStream bufferedInputStream62 = org.apache.commons.io.IOUtils.buffer(inputStream1, 100);
        java.io.OutputStream outputStream63 = null;
        java.io.InputStream inputStream66 = null;
        byte[] byteArray68 = org.apache.commons.io.IOUtils.toByteArray("");
        int int69 = org.apache.commons.io.IOUtils.read(inputStream66, byteArray68);
        java.lang.String str70 = org.apache.commons.io.IOUtils.toString(byteArray68);
        long long71 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream63, (-1L), (long) (short) -1, byteArray68);
        java.io.OutputStream outputStream72 = null;
        long long74 = org.apache.commons.io.IOUtils.copy(inputStream1, outputStream72, (int) (byte) 10);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream15);
        org.junit.Assert.assertNotNull(inputStream17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(inputStream21);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNotNull(strList31);
        org.junit.Assert.assertNotNull(inputStream33);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertNotNull(strList43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(inputStream48);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(bufferedInputStream62);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 0L + "'", long71 == 0L);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 0L + "'", long74 == 0L);
    }

    @Test
    public void test1456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1456");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.nio.charset.Charset charset6 = null;
        java.util.List<java.lang.String> strList7 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset6);
        java.io.OutputStream outputStream8 = null;
        java.io.InputStream inputStream10 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray11 = new byte[] {};
        int int12 = org.apache.commons.io.IOUtils.length(byteArray11);
        int int13 = org.apache.commons.io.IOUtils.read(inputStream10, byteArray11);
        java.lang.String str14 = org.apache.commons.io.IOUtils.toString(byteArray11);
        long long15 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream8, byteArray11);
        java.io.Writer writer16 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(byteArray11, writer16, "\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ?");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertNotNull(inputStream10);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
    }

    @Test
    public void test1457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1457");
        java.io.Reader reader0 = null;
        java.io.Writer writer1 = null;
        java.io.InputStream inputStream5 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray6 = org.apache.commons.io.IOUtils.toByteArray(inputStream5);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream5);
        java.util.List<java.lang.String> strList8 = org.apache.commons.io.IOUtils.readLines(inputStream5);
        java.io.OutputStream outputStream9 = null;
        long long10 = org.apache.commons.io.IOUtils.copyLarge(inputStream5, outputStream9);
        java.io.Writer writer11 = null;
        org.apache.commons.io.IOUtils.copy(inputStream5, writer11);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream5);
        java.io.InputStream inputStream15 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray16 = new byte[] {};
        int int17 = org.apache.commons.io.IOUtils.length(byteArray16);
        int int18 = org.apache.commons.io.IOUtils.read(inputStream15, byteArray16);
        byte[] byteArray19 = org.apache.commons.io.IOUtils.toByteArray(inputStream15);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer20 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream15, iOExceptionConsumer20);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream15);
        java.io.BufferedInputStream bufferedInputStream24 = org.apache.commons.io.IOUtils.buffer(inputStream15, (int) (byte) 10);
        java.io.InputStream inputStream26 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream15, (int) (byte) 1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer27 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream15, iOExceptionConsumer27);
        java.io.OutputStream outputStream29 = null;
        java.io.InputStream inputStream31 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray32 = new byte[] {};
        int int33 = org.apache.commons.io.IOUtils.length(byteArray32);
        int int34 = org.apache.commons.io.IOUtils.read(inputStream31, byteArray32);
        byte[] byteArray35 = org.apache.commons.io.IOUtils.toByteArray(inputStream31);
        java.io.InputStream inputStream37 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray38 = new byte[] {};
        int int39 = org.apache.commons.io.IOUtils.length(byteArray38);
        int int40 = org.apache.commons.io.IOUtils.read(inputStream37, byteArray38);
        byte[] byteArray41 = org.apache.commons.io.IOUtils.toByteArray(inputStream37);
        int int42 = org.apache.commons.io.IOUtils.length(byteArray41);
        org.apache.commons.io.IOUtils.readFully(inputStream31, byteArray41);
        long long44 = org.apache.commons.io.IOUtils.copyLarge(inputStream15, outputStream29, byteArray41);
        boolean boolean45 = org.apache.commons.io.IOUtils.contentEquals(inputStream5, inputStream15);
        java.io.BufferedInputStream bufferedInputStream46 = org.apache.commons.io.IOUtils.buffer(inputStream5);
        java.io.BufferedInputStream bufferedInputStream48 = org.apache.commons.io.IOUtils.buffer(inputStream5, (int) (short) 100);
        java.io.InputStream inputStream50 = org.apache.commons.io.IOUtils.toInputStream("\n");
        byte[] byteArray52 = org.apache.commons.io.IOUtils.toByteArray(inputStream50, (int) (byte) 0);
        java.io.InputStream inputStream54 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray55 = new byte[] {};
        int int56 = org.apache.commons.io.IOUtils.length(byteArray55);
        int int57 = org.apache.commons.io.IOUtils.read(inputStream54, byteArray55);
        byte[] byteArray58 = org.apache.commons.io.IOUtils.toByteArray(inputStream54);
        byte[] byteArray60 = org.apache.commons.io.IOUtils.toByteArray(inputStream54, (int) (short) 0);
        byte[] byteArray61 = new byte[] {};
        int int62 = org.apache.commons.io.IOUtils.length(byteArray61);
        org.apache.commons.io.IOUtils.readFully(inputStream54, byteArray61);
        org.apache.commons.io.IOUtils.readFully(inputStream50, byteArray61);
        boolean boolean65 = org.apache.commons.io.IOUtils.contentEquals(inputStream5, inputStream50);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer66 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream50, iOExceptionConsumer66);
        java.io.InputStream inputStream68 = null;
        java.io.OutputStream outputStream69 = null;
        byte[] byteArray72 = new byte[] {};
        int int73 = org.apache.commons.io.IOUtils.length(byteArray72);
        java.io.OutputStream outputStream74 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray72, outputStream74);
        long long76 = org.apache.commons.io.IOUtils.copyLarge(inputStream68, outputStream69, 0L, (long) (byte) -1, byteArray72);
        java.io.OutputStream outputStream77 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray72, outputStream77);
        org.apache.commons.io.IOUtils.readFully(inputStream50, byteArray72);
        java.nio.charset.Charset charset80 = null;
        char[] charArray81 = org.apache.commons.io.IOUtils.toCharArray(inputStream50, charset80);
        // The following exception was thrown during execution in test generation
        try {
            long long82 = org.apache.commons.io.IOUtils.copyLarge(reader0, writer1, (long) 6, (long) ' ', charArray81);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[], int, int)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(inputStream15);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream24);
        org.junit.Assert.assertNotNull(inputStream26);
        org.junit.Assert.assertNotNull(inputStream31);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(inputStream37);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(bufferedInputStream46);
        org.junit.Assert.assertNotNull(bufferedInputStream48);
        org.junit.Assert.assertNotNull(inputStream50);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[]");
        org.junit.Assert.assertNotNull(inputStream54);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 0L + "'", long76 == 0L);
        org.junit.Assert.assertNotNull(charArray81);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray81), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray81), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray81), "[]");
    }

    @Test
    public void test1458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1458");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.util.List<java.lang.String> strList4 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.OutputStream outputStream5 = null;
        long long6 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream5);
        java.io.Writer writer7 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer7);
        java.io.Writer writer9 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer9);
        java.io.InputStream inputStream12 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray13 = new byte[] {};
        int int14 = org.apache.commons.io.IOUtils.length(byteArray13);
        int int15 = org.apache.commons.io.IOUtils.read(inputStream12, byteArray13);
        byte[] byteArray16 = org.apache.commons.io.IOUtils.toByteArray(inputStream12);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer17 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream12, iOExceptionConsumer17);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream12);
        org.apache.commons.io.IOUtils.closeQuietly(inputStream12);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream12);
        java.io.BufferedInputStream bufferedInputStream23 = org.apache.commons.io.IOUtils.buffer(inputStream12, 100);
        boolean boolean24 = org.apache.commons.io.IOUtils.contentEquals(inputStream1, (java.io.InputStream) bufferedInputStream23);
        java.io.Writer writer25 = null;
        org.apache.commons.io.IOUtils.copy((java.io.InputStream) bufferedInputStream23, writer25);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(inputStream12);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
    }

    @Test
    public void test1459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1459");
        java.io.Reader reader0 = null;
        java.io.Writer writer1 = null;
        char[] charArray2 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long3 = org.apache.commons.io.IOUtils.copyLarge(reader0, writer1, charArray2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[])\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1460");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.BufferedInputStream bufferedInputStream10 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.io.InputStream inputStream12 = org.apache.commons.io.IOUtils.toBufferedInputStream((java.io.InputStream) bufferedInputStream10, (int) '#');
        long long14 = org.apache.commons.io.IOUtils.skip(inputStream12, (long) 6);
        java.io.OutputStream outputStream15 = null;
        long long16 = org.apache.commons.io.IOUtils.copyLarge(inputStream12, outputStream15);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream12);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream10);
        org.junit.Assert.assertNotNull(inputStream12);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
    }

    @Test
    public void test1461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1461");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.BufferedInputStream bufferedInputStream10 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.io.InputStream inputStream12 = org.apache.commons.io.IOUtils.toBufferedInputStream((java.io.InputStream) bufferedInputStream10, (int) '#');
        java.io.OutputStream outputStream13 = null;
        long long16 = org.apache.commons.io.IOUtils.copyLarge(inputStream12, outputStream13, 0L, 0L);
        java.io.InputStream inputStream18 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream19 = null;
        java.io.InputStream inputStream21 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream22 = null;
        java.io.InputStream inputStream25 = null;
        byte[] byteArray27 = org.apache.commons.io.IOUtils.toByteArray("");
        int int28 = org.apache.commons.io.IOUtils.read(inputStream25, byteArray27);
        long long29 = org.apache.commons.io.IOUtils.copyLarge(inputStream21, outputStream22, 0L, 0L, byteArray27);
        long long30 = org.apache.commons.io.IOUtils.copyLarge(inputStream18, outputStream19, byteArray27);
        java.io.BufferedInputStream bufferedInputStream32 = org.apache.commons.io.IOUtils.buffer(inputStream18, (int) (byte) 10);
        org.apache.commons.io.IOUtils.closeQuietly(inputStream18);
        java.io.InputStream inputStream35 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray36 = new byte[] {};
        int int37 = org.apache.commons.io.IOUtils.length(byteArray36);
        int int38 = org.apache.commons.io.IOUtils.read(inputStream35, byteArray36);
        byte[] byteArray39 = org.apache.commons.io.IOUtils.toByteArray(inputStream35);
        byte[] byteArray41 = org.apache.commons.io.IOUtils.toByteArray(inputStream35, (int) (short) 0);
        long long43 = org.apache.commons.io.IOUtils.skip(inputStream35, 100L);
        java.io.InputStream inputStream45 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray46 = new byte[] {};
        int int47 = org.apache.commons.io.IOUtils.length(byteArray46);
        int int48 = org.apache.commons.io.IOUtils.read(inputStream45, byteArray46);
        byte[] byteArray49 = org.apache.commons.io.IOUtils.toByteArray(inputStream45);
        byte[] byteArray51 = org.apache.commons.io.IOUtils.toByteArray(inputStream45, (int) (short) 0);
        org.apache.commons.io.IOUtils.readFully(inputStream35, byteArray51);
        org.apache.commons.io.IOUtils.readFully(inputStream18, byteArray51);
        int int54 = org.apache.commons.io.IOUtils.read(inputStream12, byteArray51);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream12);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream10);
        org.junit.Assert.assertNotNull(inputStream12);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(inputStream18);
        org.junit.Assert.assertNotNull(inputStream21);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream32);
        org.junit.Assert.assertNotNull(inputStream35);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertNotNull(inputStream45);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
    }

    @Test
    public void test1462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1462");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        java.io.Writer writer10 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer10);
        java.util.List<java.lang.String> strList12 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.InputStream inputStream13 = null;
        java.io.OutputStream outputStream14 = null;
        byte[] byteArray17 = new byte[] {};
        int int18 = org.apache.commons.io.IOUtils.length(byteArray17);
        java.io.OutputStream outputStream19 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray17, outputStream19);
        long long21 = org.apache.commons.io.IOUtils.copyLarge(inputStream13, outputStream14, 0L, (long) (byte) -1, byteArray17);
        java.io.OutputStream outputStream22 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray17, outputStream22);
        int int24 = org.apache.commons.io.IOUtils.length(byteArray17);
        java.io.OutputStream outputStream25 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray17, outputStream25);
        int int27 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray17);
        java.io.OutputStream outputStream28 = null;
        long long30 = org.apache.commons.io.IOUtils.copy(inputStream1, outputStream28, 10);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.LineIterator lineIterator32 = org.apache.commons.io.IOUtils.lineIterator(inputStream1, "\r\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ??");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(strList12);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
    }

    @Test
    public void test1463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1463");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        java.nio.charset.Charset charset10 = null;
        java.util.List<java.lang.String> strList11 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset10);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream14 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, (int) (byte) 0);
        java.io.Writer writer15 = null;
        java.nio.charset.Charset charset16 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer15, charset16);
        java.nio.charset.Charset charset18 = null;
        java.util.List<java.lang.String> strList19 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset18);
        java.io.OutputStream outputStream20 = null;
        long long21 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream20);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertNotNull(inputStream14);
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
    }

    @Test
    public void test1464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1464");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.util.List<java.lang.String> strList4 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.OutputStream outputStream5 = null;
        long long6 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream5);
        java.io.OutputStream outputStream7 = null;
        java.io.InputStream inputStream11 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray12 = new byte[] {};
        int int13 = org.apache.commons.io.IOUtils.length(byteArray12);
        int int14 = org.apache.commons.io.IOUtils.read(inputStream11, byteArray12);
        long long15 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream7, (-1L), 1L, byteArray12);
        java.io.OutputStream outputStream16 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray12, outputStream16);
        int int18 = org.apache.commons.io.IOUtils.length(byteArray12);
        java.io.Writer writer19 = null;
        java.nio.charset.Charset charset20 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(byteArray12, writer19, charset20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Writer.write(String)\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(inputStream11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test1465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1465");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        java.io.OutputStream outputStream10 = null;
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream10, (long) (short) 0, (-1L));
        java.lang.String str14 = org.apache.commons.io.IOUtils.toString(inputStream1);
        java.io.BufferedInputStream bufferedInputStream16 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 100);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly(inputStream1);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(bufferedInputStream16);
    }

    @Test
    public void test1466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1466");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.nio.charset.Charset charset6 = null;
        java.util.List<java.lang.String> strList7 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset6);
        java.nio.charset.Charset charset8 = null;
        org.apache.commons.io.LineIterator lineIterator9 = org.apache.commons.io.IOUtils.lineIterator(inputStream1, charset8);
        java.io.InputStream inputStream11 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, 6);
        java.nio.charset.Charset charset12 = null;
        java.lang.String str13 = org.apache.commons.io.IOUtils.toString(inputStream1, charset12);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertNotNull(lineIterator9);
        org.junit.Assert.assertNotNull(inputStream11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
    }

    @Test
    public void test1467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1467");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream5 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray("");
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray10);
        long long12 = org.apache.commons.io.IOUtils.copyLarge(inputStream4, outputStream5, 0L, 0L, byteArray10);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, byteArray10);
        java.io.BufferedInputStream bufferedInputStream15 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        org.apache.commons.io.IOUtils.closeQuietly(inputStream1);
        java.nio.charset.Charset charset17 = null;
        java.util.List<java.lang.String> strList18 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset17);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.io.OutputStream outputStream20 = null;
        int int21 = org.apache.commons.io.IOUtils.copy(inputStream1, outputStream20);
        java.io.InputStream inputStream23 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray24 = new byte[] {};
        int int25 = org.apache.commons.io.IOUtils.length(byteArray24);
        int int26 = org.apache.commons.io.IOUtils.read(inputStream23, byteArray24);
        byte[] byteArray27 = org.apache.commons.io.IOUtils.toByteArray(inputStream23);
        byte[] byteArray29 = org.apache.commons.io.IOUtils.toByteArray(inputStream23, (int) (short) 0);
        byte[] byteArray30 = new byte[] {};
        int int31 = org.apache.commons.io.IOUtils.length(byteArray30);
        org.apache.commons.io.IOUtils.readFully(inputStream23, byteArray30);
        int int33 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray30);
        java.lang.String str34 = org.apache.commons.io.IOUtils.toString(byteArray30);
        java.io.Writer writer35 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(byteArray30, writer35, "\r\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ??");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream15);
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(inputStream23);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
    }

    @Test
    public void test1468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1468");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream5 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray("");
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray10);
        long long12 = org.apache.commons.io.IOUtils.copyLarge(inputStream4, outputStream5, 0L, 0L, byteArray10);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, byteArray10);
        java.io.BufferedInputStream bufferedInputStream15 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.io.InputStream inputStream17 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray18 = org.apache.commons.io.IOUtils.toByteArray(inputStream17);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream17);
        java.io.InputStream inputStream21 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream22 = null;
        java.io.InputStream inputStream25 = null;
        byte[] byteArray27 = org.apache.commons.io.IOUtils.toByteArray("");
        int int28 = org.apache.commons.io.IOUtils.read(inputStream25, byteArray27);
        long long29 = org.apache.commons.io.IOUtils.copyLarge(inputStream21, outputStream22, 0L, 0L, byteArray27);
        java.nio.charset.Charset charset30 = null;
        java.util.List<java.lang.String> strList31 = org.apache.commons.io.IOUtils.readLines(inputStream21, charset30);
        java.io.InputStream inputStream33 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream34 = null;
        java.io.InputStream inputStream37 = null;
        byte[] byteArray39 = org.apache.commons.io.IOUtils.toByteArray("");
        int int40 = org.apache.commons.io.IOUtils.read(inputStream37, byteArray39);
        long long41 = org.apache.commons.io.IOUtils.copyLarge(inputStream33, outputStream34, 0L, 0L, byteArray39);
        java.nio.charset.Charset charset42 = null;
        java.util.List<java.lang.String> strList43 = org.apache.commons.io.IOUtils.readLines(inputStream33, charset42);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream33);
        boolean boolean45 = org.apache.commons.io.IOUtils.contentEquals(inputStream21, inputStream33);
        java.io.OutputStream outputStream46 = null;
        java.io.InputStream inputStream48 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream49 = null;
        java.io.InputStream inputStream52 = null;
        byte[] byteArray54 = org.apache.commons.io.IOUtils.toByteArray("");
        int int55 = org.apache.commons.io.IOUtils.read(inputStream52, byteArray54);
        long long56 = org.apache.commons.io.IOUtils.copyLarge(inputStream48, outputStream49, 0L, 0L, byteArray54);
        long long57 = org.apache.commons.io.IOUtils.copyLarge(inputStream33, outputStream46, byteArray54);
        org.apache.commons.io.IOUtils.readFully(inputStream17, byteArray54);
        org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray54);
        java.lang.String str60 = org.apache.commons.io.IOUtils.toString(inputStream1);
        java.io.InputStream inputStream62 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, (int) (byte) 10);
        java.io.OutputStream outputStream63 = null;
        long long65 = org.apache.commons.io.IOUtils.copy(inputStream1, outputStream63, 100);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream15);
        org.junit.Assert.assertNotNull(inputStream17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(inputStream21);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNotNull(strList31);
        org.junit.Assert.assertNotNull(inputStream33);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertNotNull(strList43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(inputStream48);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(inputStream62);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 0L + "'", long65 == 0L);
    }

    @Test
    public void test1469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1469");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        java.nio.charset.Charset charset10 = null;
        java.util.List<java.lang.String> strList11 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset10);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.nio.charset.Charset charset13 = null;
        java.lang.String str14 = org.apache.commons.io.IOUtils.toString(inputStream1, charset13);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer15 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer15);
        java.io.InputStream inputStream17 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1);
        java.io.OutputStream outputStream18 = null;
        long long19 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream18);
        java.io.Writer writer20 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer20);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(inputStream17);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
    }

    @Test
    public void test1470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1470");
        java.io.Reader reader0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.BufferedReader bufferedReader2 = org.apache.commons.io.IOUtils.toBufferedReader(reader0, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1471");
        java.io.Reader reader0 = null;
        java.io.InputStream inputStream2 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream3 = null;
        java.io.InputStream inputStream5 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream6 = null;
        java.io.InputStream inputStream9 = null;
        byte[] byteArray11 = org.apache.commons.io.IOUtils.toByteArray("");
        int int12 = org.apache.commons.io.IOUtils.read(inputStream9, byteArray11);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream5, outputStream6, 0L, 0L, byteArray11);
        long long14 = org.apache.commons.io.IOUtils.copyLarge(inputStream2, outputStream3, byteArray11);
        java.io.BufferedInputStream bufferedInputStream16 = org.apache.commons.io.IOUtils.buffer(inputStream2, (int) (byte) 10);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer17 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream2, iOExceptionConsumer17);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream2);
        char[] charArray20 = org.apache.commons.io.IOUtils.toCharArray(inputStream2);
        // The following exception was thrown during execution in test generation
        try {
            int int23 = org.apache.commons.io.IOUtils.read(reader0, charArray20, (int) (byte) 1, 2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[], int, int)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream2);
        org.junit.Assert.assertNotNull(inputStream5);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream16);
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray20), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray20), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray20), "[]");
    }

    @Test
    public void test1472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1472");
        java.io.Reader reader0 = null;
        java.io.InputStream inputStream2 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream3 = null;
        java.io.InputStream inputStream6 = null;
        byte[] byteArray8 = org.apache.commons.io.IOUtils.toByteArray("");
        int int9 = org.apache.commons.io.IOUtils.read(inputStream6, byteArray8);
        long long10 = org.apache.commons.io.IOUtils.copyLarge(inputStream2, outputStream3, 0L, 0L, byteArray8);
        java.io.Writer writer11 = null;
        org.apache.commons.io.IOUtils.copy(inputStream2, writer11);
        java.nio.charset.Charset charset13 = null;
        char[] charArray14 = org.apache.commons.io.IOUtils.toCharArray(inputStream2, charset13);
        org.apache.commons.io.IOUtils.readFully(reader0, charArray14);
        java.io.Writer writer16 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(charArray14, writer16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Writer.write(char[])\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream2);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[]");
    }

    @Test
    public void test1473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1473");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.util.List<java.lang.String> strList4 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.OutputStream outputStream5 = null;
        long long6 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream5);
        java.io.Writer writer7 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer7);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream11 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray12 = new byte[] {};
        int int13 = org.apache.commons.io.IOUtils.length(byteArray12);
        int int14 = org.apache.commons.io.IOUtils.read(inputStream11, byteArray12);
        byte[] byteArray15 = org.apache.commons.io.IOUtils.toByteArray(inputStream11);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer16 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream11, iOExceptionConsumer16);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream11);
        java.io.BufferedInputStream bufferedInputStream20 = org.apache.commons.io.IOUtils.buffer(inputStream11, (int) (byte) 10);
        java.io.InputStream inputStream22 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream11, (int) (byte) 1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer23 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream11, iOExceptionConsumer23);
        java.io.OutputStream outputStream25 = null;
        java.io.InputStream inputStream27 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray28 = new byte[] {};
        int int29 = org.apache.commons.io.IOUtils.length(byteArray28);
        int int30 = org.apache.commons.io.IOUtils.read(inputStream27, byteArray28);
        byte[] byteArray31 = org.apache.commons.io.IOUtils.toByteArray(inputStream27);
        java.io.InputStream inputStream33 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray34 = new byte[] {};
        int int35 = org.apache.commons.io.IOUtils.length(byteArray34);
        int int36 = org.apache.commons.io.IOUtils.read(inputStream33, byteArray34);
        byte[] byteArray37 = org.apache.commons.io.IOUtils.toByteArray(inputStream33);
        int int38 = org.apache.commons.io.IOUtils.length(byteArray37);
        org.apache.commons.io.IOUtils.readFully(inputStream27, byteArray37);
        long long40 = org.apache.commons.io.IOUtils.copyLarge(inputStream11, outputStream25, byteArray37);
        boolean boolean41 = org.apache.commons.io.IOUtils.contentEquals(inputStream1, inputStream11);
        java.io.BufferedInputStream bufferedInputStream42 = org.apache.commons.io.IOUtils.buffer(inputStream1);
        java.io.BufferedInputStream bufferedInputStream44 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (short) 100);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) bufferedInputStream44);
        java.io.OutputStream outputStream46 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long47 = org.apache.commons.io.IOUtils.copyLarge((java.io.InputStream) bufferedInputStream44, outputStream46);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Stream closed");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(inputStream11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream20);
        org.junit.Assert.assertNotNull(inputStream22);
        org.junit.Assert.assertNotNull(inputStream27);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(inputStream33);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(bufferedInputStream42);
        org.junit.Assert.assertNotNull(bufferedInputStream44);
    }

    @Test
    public void test1474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1474");
        java.io.Reader reader0 = null;
        java.io.Reader reader1 = null;
        char[] charArray2 = new char[] {};
        int int3 = org.apache.commons.io.IOUtils.length(charArray2);
        int int4 = org.apache.commons.io.IOUtils.read(reader1, charArray2);
        org.apache.commons.io.IOUtils.readFully(reader0, charArray2);
        java.io.Writer writer6 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(charArray2, writer6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Writer.write(char[])\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray2), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray2), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test1475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1475");
        // The following exception was thrown during execution in test generation
        try {
            java.io.InputStream inputStream2 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "\n", "");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1476");
        java.io.OutputStream outputStream0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.BufferedOutputStream bufferedOutputStream2 = org.apache.commons.io.IOUtils.buffer(outputStream0, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: outputStream");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1477");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream("");
        java.io.OutputStream outputStream2 = null;
        long long3 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2);
        java.lang.Class<?> wildcardClass4 = inputStream1.getClass();
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test1478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1478");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.util.List<java.lang.String> strList4 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.BufferedInputStream bufferedInputStream5 = org.apache.commons.io.IOUtils.buffer(inputStream1);
        java.io.OutputStream outputStream6 = null;
        long long7 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream6);
        java.util.List<java.lang.String> strList8 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.Writer writer10 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList8, "hi!", writer10);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertNotNull(bufferedInputStream5);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(strList8);
    }

    @Test
    public void test1479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1479");
        java.io.InputStream inputStream0 = null;
        java.io.OutputStream outputStream1 = null;
        java.io.InputStream inputStream5 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream6 = null;
        java.io.InputStream inputStream8 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream9 = null;
        java.io.InputStream inputStream12 = null;
        byte[] byteArray14 = org.apache.commons.io.IOUtils.toByteArray("");
        int int15 = org.apache.commons.io.IOUtils.read(inputStream12, byteArray14);
        long long16 = org.apache.commons.io.IOUtils.copyLarge(inputStream8, outputStream9, 0L, 0L, byteArray14);
        long long17 = org.apache.commons.io.IOUtils.copyLarge(inputStream5, outputStream6, byteArray14);
        java.io.BufferedInputStream bufferedInputStream19 = org.apache.commons.io.IOUtils.buffer(inputStream5, (int) (byte) 10);
        org.apache.commons.io.IOUtils.closeQuietly(inputStream5);
        java.nio.charset.Charset charset21 = null;
        java.util.List<java.lang.String> strList22 = org.apache.commons.io.IOUtils.readLines(inputStream5, charset21);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream5);
        java.io.OutputStream outputStream24 = null;
        int int25 = org.apache.commons.io.IOUtils.copy(inputStream5, outputStream24);
        java.io.InputStream inputStream27 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray28 = new byte[] {};
        int int29 = org.apache.commons.io.IOUtils.length(byteArray28);
        int int30 = org.apache.commons.io.IOUtils.read(inputStream27, byteArray28);
        byte[] byteArray31 = org.apache.commons.io.IOUtils.toByteArray(inputStream27);
        byte[] byteArray33 = org.apache.commons.io.IOUtils.toByteArray(inputStream27, (int) (short) 0);
        byte[] byteArray34 = new byte[] {};
        int int35 = org.apache.commons.io.IOUtils.length(byteArray34);
        org.apache.commons.io.IOUtils.readFully(inputStream27, byteArray34);
        int int37 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray34);
        java.lang.String str38 = org.apache.commons.io.IOUtils.toString(byteArray34);
        // The following exception was thrown during execution in test generation
        try {
            long long39 = org.apache.commons.io.IOUtils.copyLarge(inputStream0, outputStream1, (long) 2, (long) '#', byteArray34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.InputStream.read(byte[], int, int)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream5);
        org.junit.Assert.assertNotNull(inputStream8);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream19);
        org.junit.Assert.assertNotNull(strList22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(inputStream27);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
    }

    @Test
    public void test1480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1480");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.BufferedInputStream bufferedInputStream10 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.io.InputStream inputStream12 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, (int) (byte) 1);
        java.io.OutputStream outputStream13 = null;
        int int14 = org.apache.commons.io.IOUtils.copy(inputStream12, outputStream13);
        java.io.BufferedInputStream bufferedInputStream16 = org.apache.commons.io.IOUtils.buffer(inputStream12, (int) (byte) 10);
        byte[] byteArray18 = org.apache.commons.io.IOUtils.toByteArray(inputStream12, 0);
        java.io.OutputStream outputStream19 = null;
        java.io.InputStream inputStream21 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream22 = null;
        java.io.InputStream inputStream24 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream25 = null;
        java.io.InputStream inputStream28 = null;
        byte[] byteArray30 = org.apache.commons.io.IOUtils.toByteArray("");
        int int31 = org.apache.commons.io.IOUtils.read(inputStream28, byteArray30);
        long long32 = org.apache.commons.io.IOUtils.copyLarge(inputStream24, outputStream25, 0L, 0L, byteArray30);
        long long33 = org.apache.commons.io.IOUtils.copyLarge(inputStream21, outputStream22, byteArray30);
        java.io.BufferedInputStream bufferedInputStream35 = org.apache.commons.io.IOUtils.buffer(inputStream21, (int) (byte) 10);
        java.nio.charset.Charset charset36 = null;
        java.util.List<java.lang.String> strList37 = org.apache.commons.io.IOUtils.readLines(inputStream21, charset36);
        java.io.OutputStream outputStream38 = null;
        long long41 = org.apache.commons.io.IOUtils.copyLarge(inputStream21, outputStream38, 0L, (long) 0);
        java.io.BufferedInputStream bufferedInputStream42 = org.apache.commons.io.IOUtils.buffer(inputStream21);
        java.io.BufferedInputStream bufferedInputStream43 = org.apache.commons.io.IOUtils.buffer(inputStream21);
        java.io.InputStream inputStream45 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream45);
        java.io.InputStream inputStream47 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream45);
        java.lang.String str48 = org.apache.commons.io.IOUtils.toString(inputStream45);
        java.io.InputStream inputStream49 = null;
        byte[] byteArray51 = org.apache.commons.io.IOUtils.toByteArray("");
        int int52 = org.apache.commons.io.IOUtils.read(inputStream49, byteArray51);
        org.apache.commons.io.IOUtils.readFully(inputStream45, byteArray51);
        org.apache.commons.io.IOUtils.readFully((java.io.InputStream) bufferedInputStream43, byteArray51);
        java.io.OutputStream outputStream55 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray51, outputStream55);
        // The following exception was thrown during execution in test generation
        try {
            long long57 = org.apache.commons.io.IOUtils.copyLarge(inputStream12, outputStream19, byteArray51);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.OutputStream.write(byte[], int, int)\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream10);
        org.junit.Assert.assertNotNull(inputStream12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(bufferedInputStream16);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(inputStream21);
        org.junit.Assert.assertNotNull(inputStream24);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream35);
        org.junit.Assert.assertNotNull(strList37);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream42);
        org.junit.Assert.assertNotNull(bufferedInputStream43);
        org.junit.Assert.assertNotNull(inputStream45);
        org.junit.Assert.assertNotNull(inputStream47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
    }

    @Test
    public void test1481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1481");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.BufferedInputStream bufferedInputStream10 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        org.apache.commons.io.function.IOConsumer<java.io.IOException> iOExceptionIOConsumer11 = null;
        org.apache.commons.io.IOUtils.close((java.io.Closeable) bufferedInputStream10, iOExceptionIOConsumer11);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) bufferedInputStream10);
        org.apache.commons.io.IOUtils.skipFully((java.io.InputStream) bufferedInputStream10, (long) (short) 0);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer16 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) bufferedInputStream10, iOExceptionConsumer16);
        java.io.BufferedInputStream bufferedInputStream19 = org.apache.commons.io.IOUtils.buffer((java.io.InputStream) bufferedInputStream10, (int) (short) 0);
        java.io.OutputStream outputStream20 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int21 = org.apache.commons.io.IOUtils.copy((java.io.InputStream) bufferedInputStream10, outputStream20);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Stream closed");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream10);
        org.junit.Assert.assertNotNull(bufferedInputStream19);
    }

    @Test
    public void test1482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1482");
        java.io.Reader reader0 = null;
        java.io.Reader reader1 = null;
        java.io.InputStream inputStream3 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream4 = null;
        java.io.InputStream inputStream7 = null;
        byte[] byteArray9 = org.apache.commons.io.IOUtils.toByteArray("");
        int int10 = org.apache.commons.io.IOUtils.read(inputStream7, byteArray9);
        long long11 = org.apache.commons.io.IOUtils.copyLarge(inputStream3, outputStream4, 0L, 0L, byteArray9);
        java.nio.charset.Charset charset12 = null;
        java.util.List<java.lang.String> strList13 = org.apache.commons.io.IOUtils.readLines(inputStream3, charset12);
        java.nio.charset.Charset charset14 = null;
        char[] charArray15 = org.apache.commons.io.IOUtils.toCharArray(inputStream3, charset14);
        int int16 = org.apache.commons.io.IOUtils.read(reader1, charArray15);
        // The following exception was thrown during execution in test generation
        try {
            int int19 = org.apache.commons.io.IOUtils.read(reader0, charArray15, 2, (int) '\\');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[], int, int)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream3);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test1483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1483");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "\n");
        java.util.List<java.lang.String> strList2 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.lang.Class<?> wildcardClass3 = inputStream1.getClass();
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(strList2);
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test1484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1484");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.util.List<java.lang.String> strList4 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer5 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer5);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        byte[] byteArray8 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.io.Writer writer9 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(byteArray8, writer9, "\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ?");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
    }

    @Test
    public void test1485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1485");
        java.net.URL uRL0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str1 = org.apache.commons.io.IOUtils.toString(uRL0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.net.URL.openStream()\" because \"url\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1486");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        java.io.Writer writer10 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer10);
        java.util.List<java.lang.String> strList12 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.Writer writer14 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList12, "\r\n", writer14);
        java.io.Writer writer17 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList12, "\r\n", writer17);
        java.io.OutputStream outputStream20 = null;
        java.nio.charset.Charset charset21 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList12, "\r\n", outputStream20, charset21);
        java.io.OutputStream outputStream24 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList12, "\r\n", outputStream24, "\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ?");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(strList12);
    }

    @Test
    public void test1487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1487");
        java.io.Reader reader0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.BufferedReader bufferedReader2 = org.apache.commons.io.IOUtils.toBufferedReader(reader0, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1488");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        java.nio.charset.Charset charset10 = null;
        java.util.List<java.lang.String> strList11 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset10);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.nio.charset.Charset charset13 = null;
        java.lang.String str14 = org.apache.commons.io.IOUtils.toString(inputStream1, charset13);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer15 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer15);
        java.io.InputStream inputStream17 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1);
        long long19 = org.apache.commons.io.IOUtils.skip(inputStream1, (long) 'a');
        java.io.Writer writer20 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.copy(inputStream1, writer20, "");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(inputStream17);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
    }

    @Test
    public void test1489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1489");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        java.io.OutputStream outputStream10 = null;
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream10, (long) (short) 0, (-1L));
        java.lang.String str14 = org.apache.commons.io.IOUtils.toString(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly(inputStream1);
        java.io.BufferedInputStream bufferedInputStream17 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 100);
        java.io.InputStream inputStream19 = org.apache.commons.io.IOUtils.toBufferedInputStream((java.io.InputStream) bufferedInputStream17, 100);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.InputStream) bufferedInputStream17);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(bufferedInputStream17);
        org.junit.Assert.assertNotNull(inputStream19);
    }

    @Test
    public void test1490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1490");
        java.nio.charset.Charset charset1 = null;
        java.io.InputStream inputStream2 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "", charset1);
        java.util.List<java.lang.String> strList3 = org.apache.commons.io.IOUtils.readLines(inputStream2);
        java.io.OutputStream outputStream5 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList3, "\n", outputStream5);
        java.io.Writer writer8 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList3, "hi!", writer8);
        java.io.Writer writer11 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList3, "hi!", writer11);
        java.io.Writer writer14 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList3, "\r\n", writer14);
        org.junit.Assert.assertNotNull(inputStream2);
        org.junit.Assert.assertNotNull(strList3);
    }

    @Test
    public void test1491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1491");
        java.nio.charset.Charset charset1 = null;
        java.io.InputStream inputStream2 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "hi!", charset1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.String> strList4 = org.apache.commons.io.IOUtils.readLines(inputStream2, "hi!");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: hi!");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream2);
    }

    @Test
    public void test1492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1492");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream3 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1);
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream3);
        java.io.BufferedInputStream bufferedInputStream6 = org.apache.commons.io.IOUtils.buffer(inputStream4, 3);
        java.io.OutputStream outputStream7 = null;
        long long8 = org.apache.commons.io.IOUtils.copyLarge(inputStream4, outputStream7);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray(inputStream4, (long) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Unexpected read size. current: 0, expected: 1");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream3);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(bufferedInputStream6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
    }

    @Test
    public void test1493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1493");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        org.apache.commons.io.IOUtils.closeQuietly(inputStream1);
        java.io.InputStream inputStream7 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray8 = new byte[] {};
        int int9 = org.apache.commons.io.IOUtils.length(byteArray8);
        int int10 = org.apache.commons.io.IOUtils.read(inputStream7, byteArray8);
        java.lang.String str11 = org.apache.commons.io.IOUtils.toString(byteArray8);
        int int14 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray8, (int) (byte) 10, (int) (short) 0);
        char[] charArray15 = org.apache.commons.io.IOUtils.toCharArray(inputStream1);
        java.lang.Class<?> wildcardClass16 = inputStream1.getClass();
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(inputStream7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[]");
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test1494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1494");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream3 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1);
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream3);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream4);
        java.io.Writer writer6 = null;
        org.apache.commons.io.IOUtils.copy(inputStream4, writer6);
        java.io.OutputStream outputStream8 = null;
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream4, outputStream8);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream3);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
    }

    @Test
    public void test1495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1495");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream3 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1);
        java.lang.String str4 = org.apache.commons.io.IOUtils.toString(inputStream1);
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray7);
        java.io.InputStream inputStream11 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray12 = new byte[] {};
        int int13 = org.apache.commons.io.IOUtils.length(byteArray12);
        int int14 = org.apache.commons.io.IOUtils.read(inputStream11, byteArray12);
        byte[] byteArray15 = org.apache.commons.io.IOUtils.toByteArray(inputStream11);
        byte[] byteArray17 = org.apache.commons.io.IOUtils.toByteArray(inputStream11, (int) (short) 0);
        java.io.Writer writer18 = null;
        java.nio.charset.Charset charset19 = null;
        org.apache.commons.io.IOUtils.copy(inputStream11, writer18, charset19);
        java.io.InputStream inputStream22 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream23 = null;
        java.io.InputStream inputStream25 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream26 = null;
        java.io.InputStream inputStream29 = null;
        byte[] byteArray31 = org.apache.commons.io.IOUtils.toByteArray("");
        int int32 = org.apache.commons.io.IOUtils.read(inputStream29, byteArray31);
        long long33 = org.apache.commons.io.IOUtils.copyLarge(inputStream25, outputStream26, 0L, 0L, byteArray31);
        long long34 = org.apache.commons.io.IOUtils.copyLarge(inputStream22, outputStream23, byteArray31);
        java.lang.String str35 = org.apache.commons.io.IOUtils.toString(byteArray31);
        int int36 = org.apache.commons.io.IOUtils.read(inputStream11, byteArray31);
        org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray31);
        java.io.Writer writer38 = null;
        java.nio.charset.Charset charset39 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(byteArray31, writer38, charset39);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Writer.write(String)\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(inputStream11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertNotNull(inputStream22);
        org.junit.Assert.assertNotNull(inputStream25);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
    }

    @Test
    public void test1496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1496");
        java.io.Reader reader0 = null;
        java.io.Writer writer1 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long4 = org.apache.commons.io.IOUtils.copyLarge(reader0, writer1, (long) '4', (long) 3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[], int, int)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1497");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray5 = new byte[] {};
        int int6 = org.apache.commons.io.IOUtils.length(byteArray5);
        int int7 = org.apache.commons.io.IOUtils.read(inputStream4, byteArray5);
        byte[] byteArray8 = org.apache.commons.io.IOUtils.toByteArray(inputStream4);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer9 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream4, iOExceptionConsumer9);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream4);
        java.io.BufferedInputStream bufferedInputStream13 = org.apache.commons.io.IOUtils.buffer(inputStream4, (int) (byte) 10);
        boolean boolean14 = org.apache.commons.io.IOUtils.contentEquals(inputStream1, inputStream4);
        java.io.InputStream inputStream16 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray17 = new byte[] {};
        int int18 = org.apache.commons.io.IOUtils.length(byteArray17);
        int int19 = org.apache.commons.io.IOUtils.read(inputStream16, byteArray17);
        byte[] byteArray20 = org.apache.commons.io.IOUtils.toByteArray(inputStream16);
        byte[] byteArray22 = org.apache.commons.io.IOUtils.toByteArray(inputStream16, (int) (short) 0);
        long long24 = org.apache.commons.io.IOUtils.skip(inputStream16, 100L);
        java.io.InputStream inputStream25 = null;
        java.io.InputStream inputStream26 = null;
        java.io.OutputStream outputStream27 = null;
        byte[] byteArray30 = new byte[] {};
        int int31 = org.apache.commons.io.IOUtils.length(byteArray30);
        java.io.OutputStream outputStream32 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray30, outputStream32);
        long long34 = org.apache.commons.io.IOUtils.copyLarge(inputStream26, outputStream27, 0L, (long) (byte) -1, byteArray30);
        java.io.OutputStream outputStream35 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray30, outputStream35);
        org.apache.commons.io.IOUtils.readFully(inputStream25, byteArray30);
        int int38 = org.apache.commons.io.IOUtils.read(inputStream16, byteArray30);
        int int39 = org.apache.commons.io.IOUtils.read(inputStream4, byteArray30);
        java.io.OutputStream outputStream40 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray30, outputStream40);
        int int42 = org.apache.commons.io.IOUtils.length(byteArray30);
        java.io.OutputStream outputStream43 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(byteArray30, outputStream43);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.OutputStream.write(byte[])\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(inputStream16);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
    }

    @Test
    public void test1498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1498");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        java.io.OutputStream outputStream10 = null;
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream10, (long) (short) 0, (-1L));
        char[] charArray14 = org.apache.commons.io.IOUtils.toCharArray(inputStream1);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.LineIterator lineIterator17 = org.apache.commons.io.IOUtils.lineIterator(inputStream1, "\r\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ??");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[]");
    }

    @Test
    public void test1499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1499");
        java.io.Reader reader0 = null;
        char[] charArray1 = new char[] {};
        int int2 = org.apache.commons.io.IOUtils.length(charArray1);
        int int3 = org.apache.commons.io.IOUtils.read(reader0, charArray1);
        int int4 = org.apache.commons.io.IOUtils.length(charArray1);
        java.io.Writer writer5 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(charArray1, writer5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Writer.write(char[])\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray1);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray1), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray1), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray1), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test1500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1500");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        java.io.Writer writer10 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer10);
        java.util.List<java.lang.String> strList12 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.InputStream inputStream14 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, 4);
        java.io.InputStream inputStream16 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream14, 100);
        java.io.OutputStream outputStream17 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long20 = org.apache.commons.io.IOUtils.copyLarge(inputStream14, outputStream17, (long) 100, (long) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.io.EOFException; message: Bytes to skip: 100 actual: 0");
        } catch (java.io.EOFException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(strList12);
        org.junit.Assert.assertNotNull(inputStream14);
        org.junit.Assert.assertNotNull(inputStream16);
    }
}

