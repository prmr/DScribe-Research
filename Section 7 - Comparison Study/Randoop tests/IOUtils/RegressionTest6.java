import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest6 {

    public static boolean debug = false;

    @Test
    public void test3001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3001");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly(inputStream1);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.BufferedInputStream bufferedInputStream12 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) '#');
        java.nio.charset.Charset charset13 = null;
        java.util.List<java.lang.String> strList14 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset13);
        long long16 = org.apache.commons.io.IOUtils.skip(inputStream1, (long) (byte) 1);
        java.lang.String str17 = org.apache.commons.io.IOUtils.toString(inputStream1);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream12);
        org.junit.Assert.assertNotNull(strList14);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
    }

    @Test
    public void test3002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3002");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream5 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray("");
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray10);
        long long12 = org.apache.commons.io.IOUtils.copyLarge(inputStream4, outputStream5, 0L, 0L, byteArray10);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, byteArray10);
        java.io.BufferedInputStream bufferedInputStream15 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.nio.charset.Charset charset16 = null;
        java.util.List<java.lang.String> strList17 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset16);
        java.io.OutputStream outputStream18 = null;
        int int19 = org.apache.commons.io.IOUtils.copy(inputStream1, outputStream18);
        java.lang.String str20 = org.apache.commons.io.IOUtils.toString(inputStream1);
        java.nio.charset.Charset charset21 = null;
        java.util.List<java.lang.String> strList22 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset21);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream15);
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(strList22);
    }

    @Test
    public void test3003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3003");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream5 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray("");
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray10);
        long long12 = org.apache.commons.io.IOUtils.copyLarge(inputStream4, outputStream5, 0L, 0L, byteArray10);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, byteArray10);
        java.io.BufferedInputStream bufferedInputStream15 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        org.apache.commons.io.IOUtils.closeQuietly(inputStream1);
        java.nio.charset.Charset charset17 = null;
        java.lang.String str18 = org.apache.commons.io.IOUtils.toString(inputStream1, charset17);
        java.lang.String str19 = org.apache.commons.io.IOUtils.toString(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray22 = org.apache.commons.io.IOUtils.toByteArray(inputStream1, 3);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Unexpected read size. current: 0, expected: 3");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
    }

    @Test
    public void test3004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3004");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.util.List<java.lang.String> strList4 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.OutputStream outputStream6 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList4, "\n", outputStream6);
        java.io.Writer writer9 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList4, "hi!", writer9);
        java.io.OutputStream outputStream12 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList4, "", outputStream12);
        java.io.OutputStream outputStream15 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList4, "\n", outputStream15);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(strList4);
    }

    @Test
    public void test3005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3005");
        java.io.Reader reader0 = null;
        java.io.Writer writer1 = null;
        java.io.Reader reader2 = null;
        java.io.Reader reader3 = null;
        java.io.Reader reader4 = null;
        java.io.Reader reader5 = null;
        java.io.Reader reader6 = null;
        java.io.Writer writer7 = null;
        char[] charArray10 = new char[] {};
        int int11 = org.apache.commons.io.IOUtils.length(charArray10);
        java.io.Writer writer12 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray10, writer12);
        java.io.Writer writer14 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray10, writer14);
        long long16 = org.apache.commons.io.IOUtils.copyLarge(reader6, writer7, 0L, (long) (byte) 100, charArray10);
        int int17 = org.apache.commons.io.IOUtils.read(reader5, charArray10);
        int int18 = org.apache.commons.io.IOUtils.length(charArray10);
        int int19 = org.apache.commons.io.IOUtils.read(reader4, charArray10);
        org.apache.commons.io.IOUtils.readFully(reader3, charArray10);
        java.io.Writer writer21 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray10, writer21);
        int int23 = org.apache.commons.io.IOUtils.read(reader2, charArray10);
        // The following exception was thrown during execution in test generation
        try {
            long long24 = org.apache.commons.io.IOUtils.copyLarge(reader0, writer1, charArray10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[])\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
    }

    @Test
    public void test3006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3006");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream3 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1);
        java.io.Writer writer4 = null;
        java.nio.charset.Charset charset5 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer4, charset5);
        java.io.OutputStream outputStream7 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray("");
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray10);
        java.lang.String str12 = org.apache.commons.io.IOUtils.toString(byteArray10);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream7, byteArray10);
        java.io.Writer writer14 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(byteArray10, writer14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Writer.write(String)\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream3);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
    }

    @Test
    public void test3007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3007");
        java.io.Reader reader0 = null;
        char[] charArray1 = new char[] {};
        int int2 = org.apache.commons.io.IOUtils.length(charArray1);
        java.io.Writer writer3 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray1, writer3);
        int int5 = org.apache.commons.io.IOUtils.length(charArray1);
        java.io.Writer writer6 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray1, writer6);
        int int8 = org.apache.commons.io.IOUtils.length(charArray1);
        // The following exception was thrown during execution in test generation
        try {
            int int11 = org.apache.commons.io.IOUtils.read(reader0, charArray1, (int) '#', (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[], int, int)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray1);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray1), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray1), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray1), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test3008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3008");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray(inputStream1, (int) (short) 0);
        long long9 = org.apache.commons.io.IOUtils.skip(inputStream1, 100L);
        java.io.InputStream inputStream11 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray12 = org.apache.commons.io.IOUtils.toByteArray(inputStream11);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream11);
        java.util.List<java.lang.String> strList14 = org.apache.commons.io.IOUtils.readLines(inputStream11);
        java.io.OutputStream outputStream15 = null;
        long long16 = org.apache.commons.io.IOUtils.copyLarge(inputStream11, outputStream15);
        java.io.OutputStream outputStream17 = null;
        java.io.InputStream inputStream21 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray22 = new byte[] {};
        int int23 = org.apache.commons.io.IOUtils.length(byteArray22);
        int int24 = org.apache.commons.io.IOUtils.read(inputStream21, byteArray22);
        long long25 = org.apache.commons.io.IOUtils.copyLarge(inputStream11, outputStream17, (-1L), 1L, byteArray22);
        int int26 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray22);
        java.io.BufferedInputStream bufferedInputStream27 = org.apache.commons.io.IOUtils.buffer(inputStream1);
        java.lang.String str28 = org.apache.commons.io.IOUtils.toString((java.io.InputStream) bufferedInputStream27);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(inputStream11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertNotNull(strList14);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(inputStream21);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(bufferedInputStream27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
    }

    @Test
    public void test3009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3009");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.util.List<java.lang.String> strList4 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.Writer writer6 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList4, "", writer6);
        java.io.OutputStream outputStream9 = null;
        java.nio.charset.Charset charset10 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList4, "", outputStream9, charset10);
        java.io.OutputStream outputStream13 = null;
        java.nio.charset.Charset charset14 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList4, "\n", outputStream13, charset14);
        java.io.OutputStream outputStream17 = null;
        java.nio.charset.Charset charset18 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList4, "\n", outputStream17, charset18);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(strList4);
    }

    @Test
    public void test3010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3010");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.BufferedInputStream bufferedInputStream10 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.io.InputStream inputStream12 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, (int) (byte) 1);
        java.io.OutputStream outputStream13 = null;
        int int14 = org.apache.commons.io.IOUtils.copy(inputStream12, outputStream13);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream12);
        java.io.Writer writer16 = null;
        org.apache.commons.io.IOUtils.copy(inputStream12, writer16);
        java.io.Writer writer18 = null;
        java.nio.charset.Charset charset19 = null;
        org.apache.commons.io.IOUtils.copy(inputStream12, writer18, charset19);
        char[] charArray21 = org.apache.commons.io.IOUtils.toCharArray(inputStream12);
        java.io.OutputStream outputStream22 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(charArray21, outputStream22, "");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream10);
        org.junit.Assert.assertNotNull(inputStream12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[]");
    }

    @Test
    public void test3011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3011");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.BufferedInputStream bufferedInputStream10 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.io.InputStream inputStream12 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, (int) (byte) 1);
        java.io.OutputStream outputStream13 = null;
        int int14 = org.apache.commons.io.IOUtils.copy(inputStream12, outputStream13);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream12);
        java.io.Writer writer16 = null;
        org.apache.commons.io.IOUtils.copy(inputStream12, writer16);
        java.io.InputStream inputStream19 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray20 = new byte[] {};
        int int21 = org.apache.commons.io.IOUtils.length(byteArray20);
        int int22 = org.apache.commons.io.IOUtils.read(inputStream19, byteArray20);
        byte[] byteArray23 = org.apache.commons.io.IOUtils.toByteArray(inputStream19);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer24 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream19, iOExceptionConsumer24);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream19);
        java.io.BufferedInputStream bufferedInputStream28 = org.apache.commons.io.IOUtils.buffer(inputStream19, (int) (byte) 10);
        byte[] byteArray29 = null;
        org.apache.commons.io.IOUtils.readFully(inputStream19, byteArray29, (int) '4', 0);
        java.io.BufferedInputStream bufferedInputStream33 = org.apache.commons.io.IOUtils.buffer(inputStream19);
        java.io.OutputStream outputStream34 = null;
        java.io.InputStream inputStream36 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray37 = new byte[] {};
        int int38 = org.apache.commons.io.IOUtils.length(byteArray37);
        int int39 = org.apache.commons.io.IOUtils.read(inputStream36, byteArray37);
        byte[] byteArray40 = org.apache.commons.io.IOUtils.toByteArray(inputStream36);
        java.io.InputStream inputStream42 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream36, (int) (byte) 0);
        byte[] byteArray44 = org.apache.commons.io.IOUtils.toByteArray("hi!");
        int int45 = org.apache.commons.io.IOUtils.read(inputStream42, byteArray44);
        long long46 = org.apache.commons.io.IOUtils.copyLarge((java.io.InputStream) bufferedInputStream33, outputStream34, byteArray44);
        int int47 = org.apache.commons.io.IOUtils.read(inputStream12, byteArray44);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream10);
        org.junit.Assert.assertNotNull(inputStream12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(inputStream19);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream28);
        org.junit.Assert.assertNotNull(bufferedInputStream33);
        org.junit.Assert.assertNotNull(inputStream36);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertNotNull(inputStream42);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[104, 105, 33]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
    }

    @Test
    public void test3012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3012");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        java.nio.charset.Charset charset10 = null;
        java.util.List<java.lang.String> strList11 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset10);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        char[] charArray13 = org.apache.commons.io.IOUtils.toCharArray(inputStream1);
        java.io.Writer writer14 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray13, writer14);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[]");
    }

    @Test
    public void test3013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3013");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream3 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1);
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream3);
        java.io.BufferedInputStream bufferedInputStream6 = org.apache.commons.io.IOUtils.buffer(inputStream4, 3);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray8 = org.apache.commons.io.IOUtils.readFully((java.io.InputStream) bufferedInputStream6, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: -1");
        } catch (java.lang.NegativeArraySizeException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream3);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(bufferedInputStream6);
    }

    @Test
    public void test3014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3014");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray(inputStream1, (int) (short) 0);
        java.io.BufferedInputStream bufferedInputStream8 = org.apache.commons.io.IOUtils.buffer(inputStream1);
        java.io.BufferedInputStream bufferedInputStream9 = org.apache.commons.io.IOUtils.buffer(inputStream1);
        java.nio.charset.Charset charset10 = null;
        java.util.List<java.lang.String> strList11 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset10);
        java.io.OutputStream outputStream13 = null;
        java.nio.charset.Charset charset14 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList11, "", outputStream13, charset14);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream8);
        org.junit.Assert.assertNotNull(bufferedInputStream9);
        org.junit.Assert.assertNotNull(strList11);
    }

    @Test
    public void test3015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3015");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.io.InputStream inputStream7 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray8 = new byte[] {};
        int int9 = org.apache.commons.io.IOUtils.length(byteArray8);
        int int10 = org.apache.commons.io.IOUtils.read(inputStream7, byteArray8);
        byte[] byteArray11 = org.apache.commons.io.IOUtils.toByteArray(inputStream7);
        int int12 = org.apache.commons.io.IOUtils.length(byteArray11);
        org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray11);
        java.io.InputStream inputStream14 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1);
        java.io.Writer writer15 = null;
        java.nio.charset.Charset charset16 = null;
        org.apache.commons.io.IOUtils.copy(inputStream14, writer15, charset16);
        java.io.OutputStream outputStream18 = null;
        java.io.InputStream inputStream22 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray23 = new byte[] {};
        int int24 = org.apache.commons.io.IOUtils.length(byteArray23);
        int int25 = org.apache.commons.io.IOUtils.read(inputStream22, byteArray23);
        java.io.BufferedInputStream bufferedInputStream27 = org.apache.commons.io.IOUtils.buffer(inputStream22, (int) ' ');
        java.io.InputStream inputStream29 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream22, 4);
        byte[] byteArray31 = org.apache.commons.io.IOUtils.readFully(inputStream29, (int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            long long32 = org.apache.commons.io.IOUtils.copyLarge(inputStream14, outputStream18, (long) (short) 1, (long) (byte) 100, byteArray31);
            org.junit.Assert.fail("Expected exception of type java.io.EOFException; message: Bytes to skip: 1 actual: 0");
        } catch (java.io.EOFException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(inputStream7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(inputStream14);
        org.junit.Assert.assertNotNull(inputStream22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(bufferedInputStream27);
        org.junit.Assert.assertNotNull(inputStream29);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
    }

    @Test
    public void test3016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3016");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.BufferedInputStream bufferedInputStream10 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.io.InputStream inputStream12 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, (int) (byte) 1);
        java.io.OutputStream outputStream13 = null;
        int int14 = org.apache.commons.io.IOUtils.copy(inputStream12, outputStream13);
        java.io.BufferedInputStream bufferedInputStream16 = org.apache.commons.io.IOUtils.buffer(inputStream12, (int) (byte) 10);
        byte[] byteArray18 = org.apache.commons.io.IOUtils.toByteArray(inputStream12, 0);
        java.io.BufferedInputStream bufferedInputStream19 = org.apache.commons.io.IOUtils.buffer(inputStream12);
        java.io.Writer writer20 = null;
        java.nio.charset.Charset charset21 = null;
        org.apache.commons.io.IOUtils.copy((java.io.InputStream) bufferedInputStream19, writer20, charset21);
        java.io.OutputStream outputStream23 = null;
        long long24 = org.apache.commons.io.IOUtils.copyLarge((java.io.InputStream) bufferedInputStream19, outputStream23);
        java.io.OutputStream outputStream25 = null;
        java.io.InputStream inputStream27 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray28 = org.apache.commons.io.IOUtils.toByteArray(inputStream27);
        java.util.List<java.lang.String> strList29 = org.apache.commons.io.IOUtils.readLines(inputStream27);
        long long31 = org.apache.commons.io.IOUtils.skip(inputStream27, (long) '/');
        java.nio.charset.Charset charset32 = null;
        java.lang.String str33 = org.apache.commons.io.IOUtils.toString(inputStream27, charset32);
        byte[] byteArray34 = org.apache.commons.io.IOUtils.toByteArray(inputStream27);
        java.io.InputStream inputStream35 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream27);
        java.io.OutputStream outputStream36 = null;
        int int37 = org.apache.commons.io.IOUtils.copy(inputStream27, outputStream36);
        java.io.OutputStream outputStream38 = null;
        java.io.InputStream inputStream40 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream41 = null;
        java.io.InputStream inputStream43 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream44 = null;
        java.io.InputStream inputStream47 = null;
        byte[] byteArray49 = org.apache.commons.io.IOUtils.toByteArray("");
        int int50 = org.apache.commons.io.IOUtils.read(inputStream47, byteArray49);
        long long51 = org.apache.commons.io.IOUtils.copyLarge(inputStream43, outputStream44, 0L, 0L, byteArray49);
        long long52 = org.apache.commons.io.IOUtils.copyLarge(inputStream40, outputStream41, byteArray49);
        java.io.BufferedInputStream bufferedInputStream54 = org.apache.commons.io.IOUtils.buffer(inputStream40, (int) (byte) 10);
        byte[] byteArray55 = org.apache.commons.io.IOUtils.toByteArray((java.io.InputStream) bufferedInputStream54);
        java.io.InputStream inputStream56 = null;
        java.io.OutputStream outputStream57 = null;
        byte[] byteArray60 = new byte[] {};
        int int61 = org.apache.commons.io.IOUtils.length(byteArray60);
        java.io.OutputStream outputStream62 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray60, outputStream62);
        long long64 = org.apache.commons.io.IOUtils.copyLarge(inputStream56, outputStream57, 0L, (long) (byte) -1, byteArray60);
        java.io.OutputStream outputStream65 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray60, outputStream65);
        int int67 = org.apache.commons.io.IOUtils.length(byteArray60);
        org.apache.commons.io.IOUtils.readFully((java.io.InputStream) bufferedInputStream54, byteArray60);
        int int69 = org.apache.commons.io.IOUtils.length(byteArray60);
        long long70 = org.apache.commons.io.IOUtils.copyLarge(inputStream27, outputStream38, byteArray60);
        // The following exception was thrown during execution in test generation
        try {
            long long71 = org.apache.commons.io.IOUtils.copyLarge((java.io.InputStream) bufferedInputStream19, outputStream25, byteArray60);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.OutputStream.write(byte[], int, int)\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream10);
        org.junit.Assert.assertNotNull(inputStream12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(bufferedInputStream16);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream19);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(inputStream27);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertNotNull(strList29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertNotNull(inputStream35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(inputStream40);
        org.junit.Assert.assertNotNull(inputStream43);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream54);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 0L + "'", long70 == 0L);
    }

    @Test
    public void test3017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3017");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.BufferedInputStream bufferedInputStream10 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.io.InputStream inputStream12 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, (int) (byte) 1);
        java.io.OutputStream outputStream13 = null;
        int int14 = org.apache.commons.io.IOUtils.copy(inputStream12, outputStream13);
        java.io.BufferedInputStream bufferedInputStream16 = org.apache.commons.io.IOUtils.buffer(inputStream12, (int) (byte) 10);
        java.nio.charset.Charset charset17 = null;
        java.util.List<java.lang.String> strList18 = org.apache.commons.io.IOUtils.readLines(inputStream12, charset17);
        java.lang.String str19 = org.apache.commons.io.IOUtils.toString(inputStream12);
        byte[] byteArray21 = org.apache.commons.io.IOUtils.toByteArray(inputStream12, (long) (short) 0);
        java.io.OutputStream outputStream22 = null;
        java.io.InputStream inputStream24 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray25 = new byte[] {};
        int int26 = org.apache.commons.io.IOUtils.length(byteArray25);
        int int27 = org.apache.commons.io.IOUtils.read(inputStream24, byteArray25);
        java.nio.charset.Charset charset28 = null;
        org.apache.commons.io.LineIterator lineIterator29 = org.apache.commons.io.IOUtils.lineIterator(inputStream24, charset28);
        java.io.InputStream inputStream31 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray32 = new byte[] {};
        int int33 = org.apache.commons.io.IOUtils.length(byteArray32);
        int int34 = org.apache.commons.io.IOUtils.read(inputStream31, byteArray32);
        byte[] byteArray35 = org.apache.commons.io.IOUtils.toByteArray(inputStream31);
        boolean boolean36 = org.apache.commons.io.IOUtils.contentEquals(inputStream24, inputStream31);
        java.io.InputStream inputStream38 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray39 = new byte[] {};
        int int40 = org.apache.commons.io.IOUtils.length(byteArray39);
        int int41 = org.apache.commons.io.IOUtils.read(inputStream38, byteArray39);
        byte[] byteArray42 = org.apache.commons.io.IOUtils.toByteArray(inputStream38);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer43 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream38, iOExceptionConsumer43);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream38);
        java.io.BufferedInputStream bufferedInputStream47 = org.apache.commons.io.IOUtils.buffer(inputStream38, (int) (byte) 10);
        java.io.InputStream inputStream49 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream38, (int) (byte) 1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer50 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream38, iOExceptionConsumer50);
        java.io.OutputStream outputStream52 = null;
        java.io.InputStream inputStream54 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray55 = new byte[] {};
        int int56 = org.apache.commons.io.IOUtils.length(byteArray55);
        int int57 = org.apache.commons.io.IOUtils.read(inputStream54, byteArray55);
        byte[] byteArray58 = org.apache.commons.io.IOUtils.toByteArray(inputStream54);
        java.io.InputStream inputStream60 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray61 = new byte[] {};
        int int62 = org.apache.commons.io.IOUtils.length(byteArray61);
        int int63 = org.apache.commons.io.IOUtils.read(inputStream60, byteArray61);
        byte[] byteArray64 = org.apache.commons.io.IOUtils.toByteArray(inputStream60);
        int int65 = org.apache.commons.io.IOUtils.length(byteArray64);
        org.apache.commons.io.IOUtils.readFully(inputStream54, byteArray64);
        long long67 = org.apache.commons.io.IOUtils.copyLarge(inputStream38, outputStream52, byteArray64);
        byte[] byteArray68 = org.apache.commons.io.IOUtils.toByteArray(inputStream38);
        org.apache.commons.io.IOUtils.readFully(inputStream24, byteArray68);
        java.io.OutputStream outputStream70 = null;
        java.io.InputStream inputStream74 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream75 = null;
        java.io.InputStream inputStream78 = null;
        byte[] byteArray80 = org.apache.commons.io.IOUtils.toByteArray("");
        int int81 = org.apache.commons.io.IOUtils.read(inputStream78, byteArray80);
        long long82 = org.apache.commons.io.IOUtils.copyLarge(inputStream74, outputStream75, 0L, 0L, byteArray80);
        java.nio.charset.Charset charset83 = null;
        java.util.List<java.lang.String> strList84 = org.apache.commons.io.IOUtils.readLines(inputStream74, charset83);
        java.nio.charset.Charset charset85 = null;
        char[] charArray86 = org.apache.commons.io.IOUtils.toCharArray(inputStream74, charset85);
        byte[] byteArray88 = org.apache.commons.io.IOUtils.toByteArray(inputStream74, (long) (byte) 0);
        long long89 = org.apache.commons.io.IOUtils.copyLarge(inputStream24, outputStream70, 0L, 10L, byteArray88);
        // The following exception was thrown during execution in test generation
        try {
            long long90 = org.apache.commons.io.IOUtils.copyLarge(inputStream12, outputStream22, byteArray88);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.OutputStream.write(byte[], int, int)\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream10);
        org.junit.Assert.assertNotNull(inputStream12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(bufferedInputStream16);
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertNotNull(inputStream24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(lineIterator29);
        org.junit.Assert.assertNotNull(inputStream31);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(inputStream38);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream47);
        org.junit.Assert.assertNotNull(inputStream49);
        org.junit.Assert.assertNotNull(inputStream54);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[]");
        org.junit.Assert.assertNotNull(inputStream60);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 0L + "'", long67 == 0L);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[]");
        org.junit.Assert.assertNotNull(inputStream74);
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 0L + "'", long82 == 0L);
        org.junit.Assert.assertNotNull(strList84);
        org.junit.Assert.assertNotNull(charArray86);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray86), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray86), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray86), "[]");
        org.junit.Assert.assertNotNull(byteArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[]");
        org.junit.Assert.assertTrue("'" + long89 + "' != '" + 0L + "'", long89 == 0L);
    }

    @Test
    public void test3018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3018");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.util.List<java.lang.String> strList4 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.OutputStream outputStream5 = null;
        long long6 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream5);
        java.io.Writer writer7 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer7);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream11 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray12 = new byte[] {};
        int int13 = org.apache.commons.io.IOUtils.length(byteArray12);
        int int14 = org.apache.commons.io.IOUtils.read(inputStream11, byteArray12);
        byte[] byteArray15 = org.apache.commons.io.IOUtils.toByteArray(inputStream11);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer16 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream11, iOExceptionConsumer16);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream11);
        java.io.BufferedInputStream bufferedInputStream20 = org.apache.commons.io.IOUtils.buffer(inputStream11, (int) (byte) 10);
        java.io.InputStream inputStream22 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream11, (int) (byte) 1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer23 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream11, iOExceptionConsumer23);
        java.io.OutputStream outputStream25 = null;
        java.io.InputStream inputStream27 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray28 = new byte[] {};
        int int29 = org.apache.commons.io.IOUtils.length(byteArray28);
        int int30 = org.apache.commons.io.IOUtils.read(inputStream27, byteArray28);
        byte[] byteArray31 = org.apache.commons.io.IOUtils.toByteArray(inputStream27);
        java.io.InputStream inputStream33 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray34 = new byte[] {};
        int int35 = org.apache.commons.io.IOUtils.length(byteArray34);
        int int36 = org.apache.commons.io.IOUtils.read(inputStream33, byteArray34);
        byte[] byteArray37 = org.apache.commons.io.IOUtils.toByteArray(inputStream33);
        int int38 = org.apache.commons.io.IOUtils.length(byteArray37);
        org.apache.commons.io.IOUtils.readFully(inputStream27, byteArray37);
        long long40 = org.apache.commons.io.IOUtils.copyLarge(inputStream11, outputStream25, byteArray37);
        boolean boolean41 = org.apache.commons.io.IOUtils.contentEquals(inputStream1, inputStream11);
        java.io.BufferedInputStream bufferedInputStream43 = org.apache.commons.io.IOUtils.buffer(inputStream1, 5);
        java.io.InputStream inputStream45 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream46 = null;
        java.io.InputStream inputStream49 = null;
        byte[] byteArray51 = org.apache.commons.io.IOUtils.toByteArray("");
        int int52 = org.apache.commons.io.IOUtils.read(inputStream49, byteArray51);
        long long53 = org.apache.commons.io.IOUtils.copyLarge(inputStream45, outputStream46, 0L, 0L, byteArray51);
        java.nio.charset.Charset charset54 = null;
        java.util.List<java.lang.String> strList55 = org.apache.commons.io.IOUtils.readLines(inputStream45, charset54);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream45);
        java.nio.charset.Charset charset57 = null;
        java.lang.String str58 = org.apache.commons.io.IOUtils.toString(inputStream45, charset57);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer59 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream45, iOExceptionConsumer59);
        boolean boolean61 = org.apache.commons.io.IOUtils.contentEquals((java.io.InputStream) bufferedInputStream43, inputStream45);
        byte[] byteArray63 = org.apache.commons.io.IOUtils.toByteArray(inputStream45, 0);
        java.nio.charset.Charset charset64 = null;
        org.apache.commons.io.LineIterator lineIterator65 = org.apache.commons.io.IOUtils.lineIterator(inputStream45, charset64);
        java.io.OutputStream outputStream66 = null;
        java.io.InputStream inputStream70 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray71 = org.apache.commons.io.IOUtils.toByteArray(inputStream70);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream70);
        java.util.List<java.lang.String> strList73 = org.apache.commons.io.IOUtils.readLines(inputStream70);
        java.io.OutputStream outputStream74 = null;
        long long75 = org.apache.commons.io.IOUtils.copyLarge(inputStream70, outputStream74);
        java.io.OutputStream outputStream76 = null;
        java.io.InputStream inputStream80 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray81 = new byte[] {};
        int int82 = org.apache.commons.io.IOUtils.length(byteArray81);
        int int83 = org.apache.commons.io.IOUtils.read(inputStream80, byteArray81);
        long long84 = org.apache.commons.io.IOUtils.copyLarge(inputStream70, outputStream76, (-1L), 1L, byteArray81);
        java.io.OutputStream outputStream85 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray81, outputStream85);
        java.io.OutputStream outputStream87 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray81, outputStream87);
        int int89 = org.apache.commons.io.IOUtils.length(byteArray81);
        // The following exception was thrown during execution in test generation
        try {
            long long90 = org.apache.commons.io.IOUtils.copyLarge(inputStream45, outputStream66, (long) (short) 1, (long) 100, byteArray81);
            org.junit.Assert.fail("Expected exception of type java.io.EOFException; message: Bytes to skip: 1 actual: 0");
        } catch (java.io.EOFException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(inputStream11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream20);
        org.junit.Assert.assertNotNull(inputStream22);
        org.junit.Assert.assertNotNull(inputStream27);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(inputStream33);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(bufferedInputStream43);
        org.junit.Assert.assertNotNull(inputStream45);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertNotNull(strList55);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[]");
        org.junit.Assert.assertNotNull(lineIterator65);
        org.junit.Assert.assertNotNull(inputStream70);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[]");
        org.junit.Assert.assertNotNull(strList73);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 0L + "'", long75 == 0L);
        org.junit.Assert.assertNotNull(inputStream80);
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 0L + "'", long84 == 0L);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
    }

    @Test
    public void test3019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3019");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        java.io.OutputStream outputStream10 = null;
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream10, (long) (short) 0, (-1L));
        java.lang.String str14 = org.apache.commons.io.IOUtils.toString(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly(inputStream1);
        org.apache.commons.io.function.IOConsumer<java.io.IOException> iOExceptionIOConsumer16 = null;
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1, iOExceptionIOConsumer16);
        java.io.InputStream inputStream19 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray20 = new byte[] {};
        int int21 = org.apache.commons.io.IOUtils.length(byteArray20);
        int int22 = org.apache.commons.io.IOUtils.read(inputStream19, byteArray20);
        java.io.InputStream inputStream23 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream19);
        java.nio.charset.Charset charset24 = null;
        org.apache.commons.io.LineIterator lineIterator25 = org.apache.commons.io.IOUtils.lineIterator(inputStream23, charset24);
        java.io.InputStream inputStream26 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream23);
        long long28 = org.apache.commons.io.IOUtils.skip(inputStream23, (long) 10);
        java.io.BufferedInputStream bufferedInputStream29 = org.apache.commons.io.IOUtils.buffer(inputStream23);
        boolean boolean30 = org.apache.commons.io.IOUtils.contentEquals(inputStream1, (java.io.InputStream) bufferedInputStream29);
        byte[] byteArray32 = org.apache.commons.io.IOUtils.readFully((java.io.InputStream) bufferedInputStream29, 0);
        java.io.InputStream inputStream34 = org.apache.commons.io.IOUtils.toBufferedInputStream((java.io.InputStream) bufferedInputStream29, 1);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray36 = org.apache.commons.io.IOUtils.toByteArray(inputStream34, (long) 2);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Unexpected read size. current: 0, expected: 2");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(inputStream19);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(inputStream23);
        org.junit.Assert.assertNotNull(lineIterator25);
        org.junit.Assert.assertNotNull(inputStream26);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertNotNull(inputStream34);
    }

    @Test
    public void test3020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3020");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        java.io.OutputStream outputStream10 = null;
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream10, (long) (short) 0, (-1L));
        java.lang.String str14 = org.apache.commons.io.IOUtils.toString(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly(inputStream1);
        org.apache.commons.io.function.IOConsumer<java.io.IOException> iOExceptionIOConsumer16 = null;
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1, iOExceptionIOConsumer16);
        java.io.InputStream inputStream19 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray20 = new byte[] {};
        int int21 = org.apache.commons.io.IOUtils.length(byteArray20);
        int int22 = org.apache.commons.io.IOUtils.read(inputStream19, byteArray20);
        java.io.InputStream inputStream23 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream19);
        java.nio.charset.Charset charset24 = null;
        org.apache.commons.io.LineIterator lineIterator25 = org.apache.commons.io.IOUtils.lineIterator(inputStream23, charset24);
        java.io.InputStream inputStream26 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream23);
        long long28 = org.apache.commons.io.IOUtils.skip(inputStream23, (long) 10);
        java.io.BufferedInputStream bufferedInputStream29 = org.apache.commons.io.IOUtils.buffer(inputStream23);
        boolean boolean30 = org.apache.commons.io.IOUtils.contentEquals(inputStream1, (java.io.InputStream) bufferedInputStream29);
        java.io.OutputStream outputStream31 = null;
        long long33 = org.apache.commons.io.IOUtils.copy(inputStream1, outputStream31, (int) '/');
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(inputStream19);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(inputStream23);
        org.junit.Assert.assertNotNull(lineIterator25);
        org.junit.Assert.assertNotNull(inputStream26);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
    }

    @Test
    public void test3021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3021");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        java.io.InputStream inputStream6 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray(inputStream6);
        java.io.InputStream inputStream9 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray10 = new byte[] {};
        int int11 = org.apache.commons.io.IOUtils.length(byteArray10);
        int int12 = org.apache.commons.io.IOUtils.read(inputStream9, byteArray10);
        byte[] byteArray13 = org.apache.commons.io.IOUtils.toByteArray(inputStream9);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer14 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream9, iOExceptionConsumer14);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream9);
        java.io.BufferedInputStream bufferedInputStream18 = org.apache.commons.io.IOUtils.buffer(inputStream9, (int) (byte) 10);
        boolean boolean19 = org.apache.commons.io.IOUtils.contentEquals(inputStream6, inputStream9);
        java.io.OutputStream outputStream20 = null;
        long long23 = org.apache.commons.io.IOUtils.copyLarge(inputStream6, outputStream20, (long) (short) 0, (long) 2);
        java.io.OutputStream outputStream24 = null;
        int int25 = org.apache.commons.io.IOUtils.copy(inputStream6, outputStream24);
        boolean boolean26 = org.apache.commons.io.IOUtils.contentEquals(inputStream1, inputStream6);
        java.io.InputStream inputStream28 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, (int) (short) 100);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(inputStream6);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(inputStream9);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(inputStream28);
    }

    @Test
    public void test3022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3022");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.BufferedInputStream bufferedInputStream10 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.io.InputStream inputStream12 = org.apache.commons.io.IOUtils.toBufferedInputStream((java.io.InputStream) bufferedInputStream10, (int) '#');
        long long14 = org.apache.commons.io.IOUtils.skip(inputStream12, (long) 6);
        java.io.OutputStream outputStream15 = null;
        long long16 = org.apache.commons.io.IOUtils.copyLarge(inputStream12, outputStream15);
        java.nio.charset.Charset charset17 = null;
        char[] charArray18 = org.apache.commons.io.IOUtils.toCharArray(inputStream12, charset17);
        java.io.OutputStream outputStream19 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(charArray18, outputStream19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.OutputStream.write(byte[])\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream10);
        org.junit.Assert.assertNotNull(inputStream12);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(charArray18);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray18), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray18), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray18), "[]");
    }

    @Test
    public void test3023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3023");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.util.List<java.lang.String> strList4 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.OutputStream outputStream5 = null;
        long long6 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream5);
        java.io.Writer writer7 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer7);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream11 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray12 = new byte[] {};
        int int13 = org.apache.commons.io.IOUtils.length(byteArray12);
        int int14 = org.apache.commons.io.IOUtils.read(inputStream11, byteArray12);
        byte[] byteArray15 = org.apache.commons.io.IOUtils.toByteArray(inputStream11);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer16 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream11, iOExceptionConsumer16);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream11);
        java.io.BufferedInputStream bufferedInputStream20 = org.apache.commons.io.IOUtils.buffer(inputStream11, (int) (byte) 10);
        java.io.InputStream inputStream22 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream11, (int) (byte) 1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer23 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream11, iOExceptionConsumer23);
        java.io.OutputStream outputStream25 = null;
        java.io.InputStream inputStream27 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray28 = new byte[] {};
        int int29 = org.apache.commons.io.IOUtils.length(byteArray28);
        int int30 = org.apache.commons.io.IOUtils.read(inputStream27, byteArray28);
        byte[] byteArray31 = org.apache.commons.io.IOUtils.toByteArray(inputStream27);
        java.io.InputStream inputStream33 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray34 = new byte[] {};
        int int35 = org.apache.commons.io.IOUtils.length(byteArray34);
        int int36 = org.apache.commons.io.IOUtils.read(inputStream33, byteArray34);
        byte[] byteArray37 = org.apache.commons.io.IOUtils.toByteArray(inputStream33);
        int int38 = org.apache.commons.io.IOUtils.length(byteArray37);
        org.apache.commons.io.IOUtils.readFully(inputStream27, byteArray37);
        long long40 = org.apache.commons.io.IOUtils.copyLarge(inputStream11, outputStream25, byteArray37);
        boolean boolean41 = org.apache.commons.io.IOUtils.contentEquals(inputStream1, inputStream11);
        java.io.BufferedInputStream bufferedInputStream43 = org.apache.commons.io.IOUtils.buffer(inputStream1, 5);
        java.io.InputStream inputStream45 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream46 = null;
        java.io.InputStream inputStream49 = null;
        byte[] byteArray51 = org.apache.commons.io.IOUtils.toByteArray("");
        int int52 = org.apache.commons.io.IOUtils.read(inputStream49, byteArray51);
        long long53 = org.apache.commons.io.IOUtils.copyLarge(inputStream45, outputStream46, 0L, 0L, byteArray51);
        java.nio.charset.Charset charset54 = null;
        java.util.List<java.lang.String> strList55 = org.apache.commons.io.IOUtils.readLines(inputStream45, charset54);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream45);
        java.nio.charset.Charset charset57 = null;
        java.lang.String str58 = org.apache.commons.io.IOUtils.toString(inputStream45, charset57);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer59 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream45, iOExceptionConsumer59);
        boolean boolean61 = org.apache.commons.io.IOUtils.contentEquals((java.io.InputStream) bufferedInputStream43, inputStream45);
        java.io.Writer writer62 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.copy((java.io.InputStream) bufferedInputStream43, writer62, "");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(inputStream11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream20);
        org.junit.Assert.assertNotNull(inputStream22);
        org.junit.Assert.assertNotNull(inputStream27);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(inputStream33);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(bufferedInputStream43);
        org.junit.Assert.assertNotNull(inputStream45);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertNotNull(strList55);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
    }

    @Test
    public void test3024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3024");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.BufferedInputStream bufferedInputStream10 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.io.InputStream inputStream12 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, (int) (byte) 1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer13 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer13);
        java.io.OutputStream outputStream15 = null;
        java.io.InputStream inputStream17 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray18 = new byte[] {};
        int int19 = org.apache.commons.io.IOUtils.length(byteArray18);
        int int20 = org.apache.commons.io.IOUtils.read(inputStream17, byteArray18);
        byte[] byteArray21 = org.apache.commons.io.IOUtils.toByteArray(inputStream17);
        java.io.InputStream inputStream23 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray24 = new byte[] {};
        int int25 = org.apache.commons.io.IOUtils.length(byteArray24);
        int int26 = org.apache.commons.io.IOUtils.read(inputStream23, byteArray24);
        byte[] byteArray27 = org.apache.commons.io.IOUtils.toByteArray(inputStream23);
        int int28 = org.apache.commons.io.IOUtils.length(byteArray27);
        org.apache.commons.io.IOUtils.readFully(inputStream17, byteArray27);
        long long30 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream15, byteArray27);
        byte[] byteArray31 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.lang.String str32 = org.apache.commons.io.IOUtils.toString(byteArray31);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream10);
        org.junit.Assert.assertNotNull(inputStream12);
        org.junit.Assert.assertNotNull(inputStream17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertNotNull(inputStream23);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
    }

    @Test
    public void test3025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3025");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream5 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray("");
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray10);
        long long12 = org.apache.commons.io.IOUtils.copyLarge(inputStream4, outputStream5, 0L, 0L, byteArray10);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, byteArray10);
        java.io.BufferedInputStream bufferedInputStream15 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        org.apache.commons.io.IOUtils.closeQuietly(inputStream1);
        java.nio.charset.Charset charset17 = null;
        java.util.List<java.lang.String> strList18 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset17);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.io.OutputStream outputStream20 = null;
        int int21 = org.apache.commons.io.IOUtils.copy(inputStream1, outputStream20);
        java.io.OutputStream outputStream22 = null;
        long long23 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream22);
        java.io.BufferedInputStream bufferedInputStream24 = org.apache.commons.io.IOUtils.buffer(inputStream1);
        java.io.BufferedInputStream bufferedInputStream26 = org.apache.commons.io.IOUtils.buffer((java.io.InputStream) bufferedInputStream24, 1);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream15);
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream24);
        org.junit.Assert.assertNotNull(bufferedInputStream26);
    }

    @Test
    public void test3026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3026");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream5 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray("");
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray10);
        long long12 = org.apache.commons.io.IOUtils.copyLarge(inputStream4, outputStream5, 0L, 0L, byteArray10);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, byteArray10);
        java.io.BufferedInputStream bufferedInputStream15 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer16 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer16);
        org.apache.commons.io.IOUtils.closeQuietly(inputStream1);
        java.io.Writer writer19 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer19);
        java.io.InputStream inputStream22 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, 1);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray24 = org.apache.commons.io.IOUtils.readFully(inputStream22, 10);
            org.junit.Assert.fail("Expected exception of type java.io.EOFException; message: Length to read: 10 actual: 0");
        } catch (java.io.EOFException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream15);
        org.junit.Assert.assertNotNull(inputStream22);
    }

    @Test
    public void test3027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3027");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.util.List<java.lang.String> strList4 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.OutputStream outputStream5 = null;
        long long6 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream5);
        java.io.Writer writer7 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer7);
        java.io.Writer writer9 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer9);
        java.io.InputStream inputStream12 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, (int) (short) 100);
        java.lang.String str13 = org.apache.commons.io.IOUtils.toString(inputStream1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.LineIterator lineIterator15 = org.apache.commons.io.IOUtils.lineIterator(inputStream1, "\r\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ??");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(inputStream12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
    }

    @Test
    public void test3028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3028");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream4);
        java.io.InputStream inputStream7 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray8 = new byte[] {};
        int int9 = org.apache.commons.io.IOUtils.length(byteArray8);
        int int10 = org.apache.commons.io.IOUtils.read(inputStream7, byteArray8);
        byte[] byteArray11 = org.apache.commons.io.IOUtils.toByteArray(inputStream7);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer12 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream7, iOExceptionConsumer12);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream7);
        java.io.BufferedInputStream bufferedInputStream16 = org.apache.commons.io.IOUtils.buffer(inputStream7, (int) (byte) 10);
        boolean boolean17 = org.apache.commons.io.IOUtils.contentEquals(inputStream4, inputStream7);
        java.io.InputStream inputStream19 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray20 = new byte[] {};
        int int21 = org.apache.commons.io.IOUtils.length(byteArray20);
        int int22 = org.apache.commons.io.IOUtils.read(inputStream19, byteArray20);
        byte[] byteArray23 = org.apache.commons.io.IOUtils.toByteArray(inputStream19);
        byte[] byteArray25 = org.apache.commons.io.IOUtils.toByteArray(inputStream19, (int) (short) 0);
        long long27 = org.apache.commons.io.IOUtils.skip(inputStream19, 100L);
        java.io.InputStream inputStream28 = null;
        java.io.InputStream inputStream29 = null;
        java.io.OutputStream outputStream30 = null;
        byte[] byteArray33 = new byte[] {};
        int int34 = org.apache.commons.io.IOUtils.length(byteArray33);
        java.io.OutputStream outputStream35 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray33, outputStream35);
        long long37 = org.apache.commons.io.IOUtils.copyLarge(inputStream29, outputStream30, 0L, (long) (byte) -1, byteArray33);
        java.io.OutputStream outputStream38 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray33, outputStream38);
        org.apache.commons.io.IOUtils.readFully(inputStream28, byteArray33);
        int int41 = org.apache.commons.io.IOUtils.read(inputStream19, byteArray33);
        int int42 = org.apache.commons.io.IOUtils.read(inputStream7, byteArray33);
        int int45 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray33, 1, (int) (short) 0);
        java.io.InputStream inputStream47 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, (int) (short) 10);
        java.util.List<java.lang.String> strList48 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.OutputStream outputStream50 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList48, "", outputStream50);
        java.io.OutputStream outputStream53 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList48, "", outputStream53, "");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(inputStream7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(inputStream19);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(inputStream47);
        org.junit.Assert.assertNotNull(strList48);
    }

    @Test
    public void test3029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3029");
        java.io.Closeable closeable0 = null;
        java.io.Closeable[] closeableArray1 = new java.io.Closeable[] { closeable0 };
        org.apache.commons.io.IOUtils.closeQuietly(closeableArray1);
        org.apache.commons.io.IOUtils.closeQuietly(closeableArray1);
        org.apache.commons.io.IOUtils.closeQuietly(closeableArray1);
        org.apache.commons.io.IOUtils.closeQuietly(closeableArray1);
        int int6 = org.apache.commons.io.IOUtils.length((java.lang.Object[]) closeableArray1);
        int int7 = org.apache.commons.io.IOUtils.length((java.lang.Object[]) closeableArray1);
        org.apache.commons.io.IOUtils.closeQuietly(closeableArray1);
        int int9 = org.apache.commons.io.IOUtils.length((java.lang.Object[]) closeableArray1);
        int int10 = org.apache.commons.io.IOUtils.length((java.lang.Object[]) closeableArray1);
        int int11 = org.apache.commons.io.IOUtils.length((java.lang.Object[]) closeableArray1);
        org.apache.commons.io.IOUtils.closeQuietly(closeableArray1);
        org.junit.Assert.assertNotNull(closeableArray1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
    }

    @Test
    public void test3030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3030");
        java.io.Reader reader0 = null;
        java.io.Writer writer1 = null;
        java.io.InputStream inputStream3 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray4 = new byte[] {};
        int int5 = org.apache.commons.io.IOUtils.length(byteArray4);
        int int6 = org.apache.commons.io.IOUtils.read(inputStream3, byteArray4);
        java.io.BufferedInputStream bufferedInputStream8 = org.apache.commons.io.IOUtils.buffer(inputStream3, (int) ' ');
        org.apache.commons.io.IOUtils.skipFully(inputStream3, 0L);
        char[] charArray11 = org.apache.commons.io.IOUtils.toCharArray(inputStream3);
        // The following exception was thrown during execution in test generation
        try {
            long long12 = org.apache.commons.io.IOUtils.copyLarge(reader0, writer1, charArray11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[])\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream3);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(bufferedInputStream8);
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[]");
    }

    @Test
    public void test3031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3031");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        byte[] byteArray3 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        byte[] byteArray4 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.io.Writer writer5 = null;
        java.nio.charset.Charset charset6 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer5, charset6);
        byte[] byteArray8 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.io.Writer writer9 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(byteArray8, writer9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Writer.write(String)\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
    }

    @Test
    public void test3032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3032");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream5 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray("");
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray10);
        long long12 = org.apache.commons.io.IOUtils.copyLarge(inputStream4, outputStream5, 0L, 0L, byteArray10);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, byteArray10);
        java.io.BufferedInputStream bufferedInputStream15 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        org.apache.commons.io.IOUtils.closeQuietly(inputStream1);
        java.io.InputStream inputStream18 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray19 = new byte[] {};
        int int20 = org.apache.commons.io.IOUtils.length(byteArray19);
        int int21 = org.apache.commons.io.IOUtils.read(inputStream18, byteArray19);
        byte[] byteArray22 = org.apache.commons.io.IOUtils.toByteArray(inputStream18);
        byte[] byteArray24 = org.apache.commons.io.IOUtils.toByteArray(inputStream18, (int) (short) 0);
        long long26 = org.apache.commons.io.IOUtils.skip(inputStream18, 100L);
        java.io.InputStream inputStream28 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray29 = new byte[] {};
        int int30 = org.apache.commons.io.IOUtils.length(byteArray29);
        int int31 = org.apache.commons.io.IOUtils.read(inputStream28, byteArray29);
        byte[] byteArray32 = org.apache.commons.io.IOUtils.toByteArray(inputStream28);
        byte[] byteArray34 = org.apache.commons.io.IOUtils.toByteArray(inputStream28, (int) (short) 0);
        org.apache.commons.io.IOUtils.readFully(inputStream18, byteArray34);
        org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray34);
        java.io.InputStream inputStream38 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream39 = null;
        java.io.InputStream inputStream42 = null;
        byte[] byteArray44 = org.apache.commons.io.IOUtils.toByteArray("");
        int int45 = org.apache.commons.io.IOUtils.read(inputStream42, byteArray44);
        long long46 = org.apache.commons.io.IOUtils.copyLarge(inputStream38, outputStream39, 0L, 0L, byteArray44);
        java.nio.charset.Charset charset47 = null;
        java.util.List<java.lang.String> strList48 = org.apache.commons.io.IOUtils.readLines(inputStream38, charset47);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream38);
        java.nio.charset.Charset charset50 = null;
        java.lang.String str51 = org.apache.commons.io.IOUtils.toString(inputStream38, charset50);
        java.io.OutputStream outputStream52 = null;
        java.io.InputStream inputStream53 = null;
        java.io.OutputStream outputStream54 = null;
        byte[] byteArray57 = new byte[] {};
        int int58 = org.apache.commons.io.IOUtils.length(byteArray57);
        java.io.OutputStream outputStream59 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray57, outputStream59);
        long long61 = org.apache.commons.io.IOUtils.copyLarge(inputStream53, outputStream54, 0L, (long) (byte) -1, byteArray57);
        long long62 = org.apache.commons.io.IOUtils.copyLarge(inputStream38, outputStream52, byteArray57);
        java.io.InputStream inputStream63 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream38);
        long long65 = org.apache.commons.io.IOUtils.skip(inputStream63, (long) '/');
        java.util.List<java.lang.String> strList66 = org.apache.commons.io.IOUtils.readLines(inputStream63);
        java.io.InputStream inputStream68 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray69 = new byte[] {};
        int int70 = org.apache.commons.io.IOUtils.length(byteArray69);
        int int71 = org.apache.commons.io.IOUtils.read(inputStream68, byteArray69);
        byte[] byteArray72 = org.apache.commons.io.IOUtils.toByteArray(inputStream68);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer73 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream68, iOExceptionConsumer73);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream68);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer76 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream68, iOExceptionConsumer76);
        java.io.BufferedInputStream bufferedInputStream78 = org.apache.commons.io.IOUtils.buffer(inputStream68);
        java.io.OutputStream outputStream79 = null;
        java.io.InputStream inputStream80 = null;
        java.io.OutputStream outputStream81 = null;
        byte[] byteArray84 = new byte[] {};
        int int85 = org.apache.commons.io.IOUtils.length(byteArray84);
        java.io.OutputStream outputStream86 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray84, outputStream86);
        long long88 = org.apache.commons.io.IOUtils.copyLarge(inputStream80, outputStream81, 0L, (long) (byte) -1, byteArray84);
        long long89 = org.apache.commons.io.IOUtils.copyLarge(inputStream68, outputStream79, byteArray84);
        boolean boolean90 = org.apache.commons.io.IOUtils.contentEquals(inputStream63, inputStream68);
        boolean boolean91 = org.apache.commons.io.IOUtils.contentEquals(inputStream1, inputStream63);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream15);
        org.junit.Assert.assertNotNull(inputStream18);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(inputStream28);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertNotNull(inputStream38);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertNotNull(strList48);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 0L + "'", long62 == 0L);
        org.junit.Assert.assertNotNull(inputStream63);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 0L + "'", long65 == 0L);
        org.junit.Assert.assertNotNull(strList66);
        org.junit.Assert.assertNotNull(inputStream68);
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream78);
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + long88 + "' != '" + 0L + "'", long88 == 0L);
        org.junit.Assert.assertTrue("'" + long89 + "' != '" + 0L + "'", long89 == 0L);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
    }

    @Test
    public void test3033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3033");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.util.List<java.lang.String> strList4 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.OutputStream outputStream5 = null;
        long long6 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream5);
        java.io.Writer writer7 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer7);
        java.io.Writer writer9 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer9);
        java.io.InputStream inputStream12 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, (int) (short) 100);
        java.util.List<java.lang.String> strList13 = org.apache.commons.io.IOUtils.readLines(inputStream12);
        org.apache.commons.io.IOUtils.closeQuietly(inputStream12);
        java.io.InputStream inputStream16 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream17 = null;
        java.io.InputStream inputStream19 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream20 = null;
        java.io.InputStream inputStream23 = null;
        byte[] byteArray25 = org.apache.commons.io.IOUtils.toByteArray("");
        int int26 = org.apache.commons.io.IOUtils.read(inputStream23, byteArray25);
        long long27 = org.apache.commons.io.IOUtils.copyLarge(inputStream19, outputStream20, 0L, 0L, byteArray25);
        long long28 = org.apache.commons.io.IOUtils.copyLarge(inputStream16, outputStream17, byteArray25);
        java.io.BufferedInputStream bufferedInputStream30 = org.apache.commons.io.IOUtils.buffer(inputStream16, (int) (byte) 10);
        java.nio.charset.Charset charset31 = null;
        java.util.List<java.lang.String> strList32 = org.apache.commons.io.IOUtils.readLines(inputStream16, charset31);
        java.io.OutputStream outputStream33 = null;
        long long36 = org.apache.commons.io.IOUtils.copyLarge(inputStream16, outputStream33, 0L, (long) 0);
        java.io.BufferedInputStream bufferedInputStream37 = org.apache.commons.io.IOUtils.buffer(inputStream16);
        java.io.BufferedInputStream bufferedInputStream38 = org.apache.commons.io.IOUtils.buffer(inputStream16);
        java.io.OutputStream outputStream39 = null;
        int int40 = org.apache.commons.io.IOUtils.copy(inputStream16, outputStream39);
        byte[] byteArray42 = org.apache.commons.io.IOUtils.toByteArray(inputStream16, 0L);
        int int45 = org.apache.commons.io.IOUtils.read(inputStream12, byteArray42, (int) (short) 10, 0);
        // The following exception was thrown during execution in test generation
        try {
            java.io.InputStream inputStream47 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream12, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Negative initial size: -1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(inputStream12);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNotNull(inputStream16);
        org.junit.Assert.assertNotNull(inputStream19);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream30);
        org.junit.Assert.assertNotNull(strList32);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream37);
        org.junit.Assert.assertNotNull(bufferedInputStream38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
    }

    @Test
    public void test3034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3034");
        java.io.Reader reader0 = null;
        java.io.InputStream inputStream2 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream3 = null;
        java.io.InputStream inputStream6 = null;
        byte[] byteArray8 = org.apache.commons.io.IOUtils.toByteArray("");
        int int9 = org.apache.commons.io.IOUtils.read(inputStream6, byteArray8);
        long long10 = org.apache.commons.io.IOUtils.copyLarge(inputStream2, outputStream3, 0L, 0L, byteArray8);
        java.nio.charset.Charset charset11 = null;
        java.util.List<java.lang.String> strList12 = org.apache.commons.io.IOUtils.readLines(inputStream2, charset11);
        java.io.OutputStream outputStream13 = null;
        long long14 = org.apache.commons.io.IOUtils.copyLarge(inputStream2, outputStream13);
        java.nio.charset.Charset charset15 = null;
        char[] charArray16 = org.apache.commons.io.IOUtils.toCharArray(inputStream2, charset15);
        org.apache.commons.io.IOUtils.readFully(reader0, charArray16);
        java.io.OutputStream outputStream18 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(charArray16, outputStream18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.OutputStream.write(byte[])\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream2);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(strList12);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(charArray16);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray16), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray16), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray16), "[]");
    }

    @Test
    public void test3035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3035");
        java.io.Reader reader0 = null;
        java.io.Reader reader1 = null;
        java.io.Reader reader2 = null;
        java.io.Writer writer3 = null;
        char[] charArray6 = new char[] {};
        int int7 = org.apache.commons.io.IOUtils.length(charArray6);
        java.io.Writer writer8 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray6, writer8);
        java.io.Writer writer10 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray6, writer10);
        long long12 = org.apache.commons.io.IOUtils.copyLarge(reader2, writer3, 0L, (long) (byte) 100, charArray6);
        int int13 = org.apache.commons.io.IOUtils.read(reader1, charArray6);
        java.io.Writer writer14 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray6, writer14);
        java.io.Writer writer16 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray6, writer16);
        java.io.Writer writer18 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray6, writer18);
        java.io.Writer writer20 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray6, writer20);
        int int22 = org.apache.commons.io.IOUtils.read(reader0, charArray6);
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
    }

    @Test
    public void test3036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3036");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        java.io.InputStream inputStream5 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1);
        java.nio.charset.Charset charset6 = null;
        org.apache.commons.io.LineIterator lineIterator7 = org.apache.commons.io.IOUtils.lineIterator(inputStream5, charset6);
        java.io.InputStream inputStream8 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream5);
        long long10 = org.apache.commons.io.IOUtils.skip(inputStream5, (long) 10);
        java.io.BufferedInputStream bufferedInputStream11 = org.apache.commons.io.IOUtils.buffer(inputStream5);
        java.io.BufferedInputStream bufferedInputStream13 = org.apache.commons.io.IOUtils.buffer(inputStream5, 3);
        byte[] byteArray15 = org.apache.commons.io.IOUtils.toByteArray(inputStream5, (int) (byte) 0);
        java.io.OutputStream outputStream16 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(byteArray15, outputStream16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.OutputStream.write(byte[])\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(inputStream5);
        org.junit.Assert.assertNotNull(lineIterator7);
        org.junit.Assert.assertNotNull(inputStream8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream11);
        org.junit.Assert.assertNotNull(bufferedInputStream13);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
    }

    @Test
    public void test3037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3037");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.util.List<java.lang.String> strList4 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.OutputStream outputStream5 = null;
        long long8 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream5, (long) 0, 0L);
        java.io.InputStream inputStream10 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, 100);
        char[] charArray11 = org.apache.commons.io.IOUtils.toCharArray(inputStream10);
        byte[] byteArray13 = org.apache.commons.io.IOUtils.toByteArray(inputStream10, 0L);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(inputStream10);
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
    }

    @Test
    public void test3038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3038");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        org.apache.commons.io.IOUtils.closeQuietly(inputStream1);
        java.io.InputStream inputStream7 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray8 = new byte[] {};
        int int9 = org.apache.commons.io.IOUtils.length(byteArray8);
        int int10 = org.apache.commons.io.IOUtils.read(inputStream7, byteArray8);
        java.lang.String str11 = org.apache.commons.io.IOUtils.toString(byteArray8);
        int int14 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray8, (int) (byte) 10, (int) (short) 0);
        java.io.OutputStream outputStream15 = null;
        long long17 = org.apache.commons.io.IOUtils.copy(inputStream1, outputStream15, (int) (byte) 100);
        java.io.OutputStream outputStream18 = null;
        java.io.InputStream inputStream20 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray21 = new byte[] {};
        int int22 = org.apache.commons.io.IOUtils.length(byteArray21);
        int int23 = org.apache.commons.io.IOUtils.read(inputStream20, byteArray21);
        byte[] byteArray24 = org.apache.commons.io.IOUtils.toByteArray(inputStream20);
        byte[] byteArray26 = org.apache.commons.io.IOUtils.toByteArray(inputStream20, (int) (short) 0);
        java.io.Writer writer27 = null;
        java.nio.charset.Charset charset28 = null;
        org.apache.commons.io.IOUtils.copy(inputStream20, writer27, charset28);
        java.io.InputStream inputStream31 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream32 = null;
        java.io.InputStream inputStream34 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream35 = null;
        java.io.InputStream inputStream38 = null;
        byte[] byteArray40 = org.apache.commons.io.IOUtils.toByteArray("");
        int int41 = org.apache.commons.io.IOUtils.read(inputStream38, byteArray40);
        long long42 = org.apache.commons.io.IOUtils.copyLarge(inputStream34, outputStream35, 0L, 0L, byteArray40);
        long long43 = org.apache.commons.io.IOUtils.copyLarge(inputStream31, outputStream32, byteArray40);
        java.lang.String str44 = org.apache.commons.io.IOUtils.toString(byteArray40);
        int int45 = org.apache.commons.io.IOUtils.read(inputStream20, byteArray40);
        long long46 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream18, byteArray40);
        java.io.InputStream inputStream48 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray49 = new byte[] {};
        int int50 = org.apache.commons.io.IOUtils.length(byteArray49);
        int int51 = org.apache.commons.io.IOUtils.read(inputStream48, byteArray49);
        org.apache.commons.io.IOUtils.closeQuietly(inputStream48);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream48);
        java.io.InputStream inputStream55 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream56 = null;
        java.io.InputStream inputStream59 = null;
        byte[] byteArray61 = org.apache.commons.io.IOUtils.toByteArray("");
        int int62 = org.apache.commons.io.IOUtils.read(inputStream59, byteArray61);
        long long63 = org.apache.commons.io.IOUtils.copyLarge(inputStream55, outputStream56, 0L, 0L, byteArray61);
        java.nio.charset.Charset charset64 = null;
        java.util.List<java.lang.String> strList65 = org.apache.commons.io.IOUtils.readLines(inputStream55, charset64);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream55);
        java.nio.charset.Charset charset67 = null;
        java.lang.String str68 = org.apache.commons.io.IOUtils.toString(inputStream55, charset67);
        java.io.Writer writer69 = null;
        org.apache.commons.io.IOUtils.copy(inputStream55, writer69);
        byte[] byteArray71 = org.apache.commons.io.IOUtils.toByteArray(inputStream55);
        int int72 = org.apache.commons.io.IOUtils.length(byteArray71);
        int int73 = org.apache.commons.io.IOUtils.read(inputStream48, byteArray71);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray71, 3, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Length must not be negative: -1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(inputStream7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(inputStream20);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertNotNull(inputStream31);
        org.junit.Assert.assertNotNull(inputStream34);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertNotNull(inputStream48);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(inputStream55);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 0L + "'", long63 == 0L);
        org.junit.Assert.assertNotNull(strList65);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
    }

    @Test
    public void test3039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3039");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray(inputStream1, (int) (short) 0);
        long long9 = org.apache.commons.io.IOUtils.skip(inputStream1, 100L);
        java.io.InputStream inputStream10 = null;
        java.io.InputStream inputStream11 = null;
        java.io.OutputStream outputStream12 = null;
        byte[] byteArray15 = new byte[] {};
        int int16 = org.apache.commons.io.IOUtils.length(byteArray15);
        java.io.OutputStream outputStream17 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray15, outputStream17);
        long long19 = org.apache.commons.io.IOUtils.copyLarge(inputStream11, outputStream12, 0L, (long) (byte) -1, byteArray15);
        java.io.OutputStream outputStream20 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray15, outputStream20);
        org.apache.commons.io.IOUtils.readFully(inputStream10, byteArray15);
        int int23 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray15);
        java.io.InputStream inputStream24 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1);
        org.apache.commons.io.function.IOConsumer<java.io.IOException> iOExceptionIOConsumer25 = null;
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1, iOExceptionIOConsumer25);
        java.io.InputStream inputStream27 = null;
        java.io.OutputStream outputStream28 = null;
        byte[] byteArray31 = new byte[] {};
        int int32 = org.apache.commons.io.IOUtils.length(byteArray31);
        java.io.OutputStream outputStream33 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray31, outputStream33);
        long long35 = org.apache.commons.io.IOUtils.copyLarge(inputStream27, outputStream28, 0L, (long) (byte) -1, byteArray31);
        java.io.OutputStream outputStream36 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray31, outputStream36);
        int int38 = org.apache.commons.io.IOUtils.length(byteArray31);
        java.lang.String str39 = org.apache.commons.io.IOUtils.toString(byteArray31);
        java.lang.String str40 = org.apache.commons.io.IOUtils.toString(byteArray31);
        int int41 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray31);
        java.io.Writer writer42 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(byteArray31, writer42, "");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(inputStream24);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
    }

    @Test
    public void test3040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3040");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.util.List<java.lang.String> strList4 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.OutputStream outputStream5 = null;
        long long6 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream5);
        java.io.Writer writer7 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer7);
        java.io.Writer writer9 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer9);
        java.io.InputStream inputStream12 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, (int) (short) 100);
        java.util.List<java.lang.String> strList13 = org.apache.commons.io.IOUtils.readLines(inputStream12);
        org.apache.commons.io.IOUtils.closeQuietly(inputStream12);
        java.io.InputStream inputStream16 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream17 = null;
        java.io.InputStream inputStream19 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream20 = null;
        java.io.InputStream inputStream23 = null;
        byte[] byteArray25 = org.apache.commons.io.IOUtils.toByteArray("");
        int int26 = org.apache.commons.io.IOUtils.read(inputStream23, byteArray25);
        long long27 = org.apache.commons.io.IOUtils.copyLarge(inputStream19, outputStream20, 0L, 0L, byteArray25);
        long long28 = org.apache.commons.io.IOUtils.copyLarge(inputStream16, outputStream17, byteArray25);
        java.io.BufferedInputStream bufferedInputStream30 = org.apache.commons.io.IOUtils.buffer(inputStream16, (int) (byte) 10);
        java.nio.charset.Charset charset31 = null;
        java.util.List<java.lang.String> strList32 = org.apache.commons.io.IOUtils.readLines(inputStream16, charset31);
        java.io.OutputStream outputStream33 = null;
        long long36 = org.apache.commons.io.IOUtils.copyLarge(inputStream16, outputStream33, 0L, (long) 0);
        java.io.BufferedInputStream bufferedInputStream37 = org.apache.commons.io.IOUtils.buffer(inputStream16);
        java.io.BufferedInputStream bufferedInputStream38 = org.apache.commons.io.IOUtils.buffer(inputStream16);
        java.io.OutputStream outputStream39 = null;
        int int40 = org.apache.commons.io.IOUtils.copy(inputStream16, outputStream39);
        byte[] byteArray42 = org.apache.commons.io.IOUtils.toByteArray(inputStream16, 0L);
        int int45 = org.apache.commons.io.IOUtils.read(inputStream12, byteArray42, (int) (short) 10, 0);
        java.io.OutputStream outputStream46 = null;
        long long47 = org.apache.commons.io.IOUtils.copyLarge(inputStream12, outputStream46);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(inputStream12);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNotNull(inputStream16);
        org.junit.Assert.assertNotNull(inputStream19);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream30);
        org.junit.Assert.assertNotNull(strList32);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream37);
        org.junit.Assert.assertNotNull(bufferedInputStream38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
    }

    @Test
    public void test3041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3041");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        java.nio.charset.Charset charset5 = null;
        org.apache.commons.io.LineIterator lineIterator6 = org.apache.commons.io.IOUtils.lineIterator(inputStream1, charset5);
        java.io.InputStream inputStream8 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray9 = new byte[] {};
        int int10 = org.apache.commons.io.IOUtils.length(byteArray9);
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray9);
        byte[] byteArray12 = org.apache.commons.io.IOUtils.toByteArray(inputStream8);
        boolean boolean13 = org.apache.commons.io.IOUtils.contentEquals(inputStream1, inputStream8);
        java.io.InputStream inputStream15 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray16 = new byte[] {};
        int int17 = org.apache.commons.io.IOUtils.length(byteArray16);
        int int18 = org.apache.commons.io.IOUtils.read(inputStream15, byteArray16);
        byte[] byteArray19 = org.apache.commons.io.IOUtils.toByteArray(inputStream15);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer20 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream15, iOExceptionConsumer20);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream15);
        java.io.BufferedInputStream bufferedInputStream24 = org.apache.commons.io.IOUtils.buffer(inputStream15, (int) (byte) 10);
        java.io.InputStream inputStream26 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream15, (int) (byte) 1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer27 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream15, iOExceptionConsumer27);
        java.io.OutputStream outputStream29 = null;
        java.io.InputStream inputStream31 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray32 = new byte[] {};
        int int33 = org.apache.commons.io.IOUtils.length(byteArray32);
        int int34 = org.apache.commons.io.IOUtils.read(inputStream31, byteArray32);
        byte[] byteArray35 = org.apache.commons.io.IOUtils.toByteArray(inputStream31);
        java.io.InputStream inputStream37 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray38 = new byte[] {};
        int int39 = org.apache.commons.io.IOUtils.length(byteArray38);
        int int40 = org.apache.commons.io.IOUtils.read(inputStream37, byteArray38);
        byte[] byteArray41 = org.apache.commons.io.IOUtils.toByteArray(inputStream37);
        int int42 = org.apache.commons.io.IOUtils.length(byteArray41);
        org.apache.commons.io.IOUtils.readFully(inputStream31, byteArray41);
        long long44 = org.apache.commons.io.IOUtils.copyLarge(inputStream15, outputStream29, byteArray41);
        byte[] byteArray45 = org.apache.commons.io.IOUtils.toByteArray(inputStream15);
        org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray45);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str49 = org.apache.commons.io.IOUtils.toString(inputStream1, "hi!");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: hi!");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(lineIterator6);
        org.junit.Assert.assertNotNull(inputStream8);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(inputStream15);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream24);
        org.junit.Assert.assertNotNull(inputStream26);
        org.junit.Assert.assertNotNull(inputStream31);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(inputStream37);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
    }

    @Test
    public void test3042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3042");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream5 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray("");
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray10);
        long long12 = org.apache.commons.io.IOUtils.copyLarge(inputStream4, outputStream5, 0L, 0L, byteArray10);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, byteArray10);
        java.io.BufferedInputStream bufferedInputStream15 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.nio.charset.Charset charset16 = null;
        java.util.List<java.lang.String> strList17 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset16);
        java.io.OutputStream outputStream18 = null;
        long long21 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream18, 0L, (long) 0);
        java.io.BufferedInputStream bufferedInputStream22 = org.apache.commons.io.IOUtils.buffer(inputStream1);
        java.io.BufferedInputStream bufferedInputStream23 = org.apache.commons.io.IOUtils.buffer(inputStream1);
        java.io.OutputStream outputStream24 = null;
        long long25 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream24);
        java.io.Writer writer26 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer26);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray29 = org.apache.commons.io.IOUtils.toByteArray(inputStream1, (long) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Unexpected read size. current: 0, expected: 10");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream15);
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream22);
        org.junit.Assert.assertNotNull(bufferedInputStream23);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
    }

    @Test
    public void test3043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3043");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.util.List<java.lang.String> strList4 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.OutputStream outputStream5 = null;
        long long6 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream5);
        java.io.Writer writer7 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer7);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream11 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray12 = new byte[] {};
        int int13 = org.apache.commons.io.IOUtils.length(byteArray12);
        int int14 = org.apache.commons.io.IOUtils.read(inputStream11, byteArray12);
        byte[] byteArray15 = org.apache.commons.io.IOUtils.toByteArray(inputStream11);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer16 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream11, iOExceptionConsumer16);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream11);
        java.io.BufferedInputStream bufferedInputStream20 = org.apache.commons.io.IOUtils.buffer(inputStream11, (int) (byte) 10);
        java.io.InputStream inputStream22 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream11, (int) (byte) 1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer23 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream11, iOExceptionConsumer23);
        java.io.OutputStream outputStream25 = null;
        java.io.InputStream inputStream27 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray28 = new byte[] {};
        int int29 = org.apache.commons.io.IOUtils.length(byteArray28);
        int int30 = org.apache.commons.io.IOUtils.read(inputStream27, byteArray28);
        byte[] byteArray31 = org.apache.commons.io.IOUtils.toByteArray(inputStream27);
        java.io.InputStream inputStream33 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray34 = new byte[] {};
        int int35 = org.apache.commons.io.IOUtils.length(byteArray34);
        int int36 = org.apache.commons.io.IOUtils.read(inputStream33, byteArray34);
        byte[] byteArray37 = org.apache.commons.io.IOUtils.toByteArray(inputStream33);
        int int38 = org.apache.commons.io.IOUtils.length(byteArray37);
        org.apache.commons.io.IOUtils.readFully(inputStream27, byteArray37);
        long long40 = org.apache.commons.io.IOUtils.copyLarge(inputStream11, outputStream25, byteArray37);
        boolean boolean41 = org.apache.commons.io.IOUtils.contentEquals(inputStream1, inputStream11);
        java.io.BufferedInputStream bufferedInputStream42 = org.apache.commons.io.IOUtils.buffer(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) bufferedInputStream42);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str45 = org.apache.commons.io.IOUtils.toString((java.io.InputStream) bufferedInputStream42, "hi!");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: hi!");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(inputStream11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream20);
        org.junit.Assert.assertNotNull(inputStream22);
        org.junit.Assert.assertNotNull(inputStream27);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(inputStream33);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(bufferedInputStream42);
    }

    @Test
    public void test3044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3044");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream3 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1);
        java.lang.String str4 = org.apache.commons.io.IOUtils.toString(inputStream1);
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray7);
        java.io.InputStream inputStream11 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray12 = new byte[] {};
        int int13 = org.apache.commons.io.IOUtils.length(byteArray12);
        int int14 = org.apache.commons.io.IOUtils.read(inputStream11, byteArray12);
        byte[] byteArray15 = org.apache.commons.io.IOUtils.toByteArray(inputStream11);
        byte[] byteArray17 = org.apache.commons.io.IOUtils.toByteArray(inputStream11, (int) (short) 0);
        java.io.Writer writer18 = null;
        java.nio.charset.Charset charset19 = null;
        org.apache.commons.io.IOUtils.copy(inputStream11, writer18, charset19);
        java.io.InputStream inputStream22 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream23 = null;
        java.io.InputStream inputStream25 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream26 = null;
        java.io.InputStream inputStream29 = null;
        byte[] byteArray31 = org.apache.commons.io.IOUtils.toByteArray("");
        int int32 = org.apache.commons.io.IOUtils.read(inputStream29, byteArray31);
        long long33 = org.apache.commons.io.IOUtils.copyLarge(inputStream25, outputStream26, 0L, 0L, byteArray31);
        long long34 = org.apache.commons.io.IOUtils.copyLarge(inputStream22, outputStream23, byteArray31);
        java.lang.String str35 = org.apache.commons.io.IOUtils.toString(byteArray31);
        int int36 = org.apache.commons.io.IOUtils.read(inputStream11, byteArray31);
        org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray31);
        java.io.InputStream inputStream39 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream40 = null;
        java.io.InputStream inputStream43 = null;
        byte[] byteArray45 = org.apache.commons.io.IOUtils.toByteArray("");
        int int46 = org.apache.commons.io.IOUtils.read(inputStream43, byteArray45);
        long long47 = org.apache.commons.io.IOUtils.copyLarge(inputStream39, outputStream40, 0L, 0L, byteArray45);
        java.nio.charset.Charset charset48 = null;
        java.util.List<java.lang.String> strList49 = org.apache.commons.io.IOUtils.readLines(inputStream39, charset48);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream39);
        java.nio.charset.Charset charset51 = null;
        java.lang.String str52 = org.apache.commons.io.IOUtils.toString(inputStream39, charset51);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer53 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream39, iOExceptionConsumer53);
        java.nio.charset.Charset charset55 = null;
        org.apache.commons.io.LineIterator lineIterator56 = org.apache.commons.io.IOUtils.lineIterator(inputStream39, charset55);
        boolean boolean57 = org.apache.commons.io.IOUtils.contentEquals(inputStream1, inputStream39);
        org.apache.commons.io.IOUtils.closeQuietly(inputStream1);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(inputStream11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertNotNull(inputStream22);
        org.junit.Assert.assertNotNull(inputStream25);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(inputStream39);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertNotNull(strList49);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(lineIterator56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
    }

    @Test
    public void test3045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3045");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.BufferedInputStream bufferedInputStream10 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.io.InputStream inputStream12 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, (int) (byte) 1);
        java.nio.charset.Charset charset13 = null;
        char[] charArray14 = org.apache.commons.io.IOUtils.toCharArray(inputStream1, charset13);
        java.io.Writer writer15 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(charArray14, writer15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Writer.write(char[])\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream10);
        org.junit.Assert.assertNotNull(inputStream12);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[]");
    }

    @Test
    public void test3046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3046");
        java.io.InputStream inputStream0 = null;
        java.io.OutputStream outputStream1 = null;
        byte[] byteArray4 = new byte[] {};
        int int5 = org.apache.commons.io.IOUtils.length(byteArray4);
        java.io.OutputStream outputStream6 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray4, outputStream6);
        long long8 = org.apache.commons.io.IOUtils.copyLarge(inputStream0, outputStream1, 0L, (long) (byte) -1, byteArray4);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str10 = org.apache.commons.io.IOUtils.toString(byteArray4, "hi!");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: hi!");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
    }

    @Test
    public void test3047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3047");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.util.List<java.lang.String> strList4 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.OutputStream outputStream5 = null;
        long long6 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream5);
        java.io.Writer writer7 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer7);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream11 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray12 = new byte[] {};
        int int13 = org.apache.commons.io.IOUtils.length(byteArray12);
        int int14 = org.apache.commons.io.IOUtils.read(inputStream11, byteArray12);
        byte[] byteArray15 = org.apache.commons.io.IOUtils.toByteArray(inputStream11);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer16 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream11, iOExceptionConsumer16);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream11);
        java.io.BufferedInputStream bufferedInputStream20 = org.apache.commons.io.IOUtils.buffer(inputStream11, (int) (byte) 10);
        java.io.InputStream inputStream22 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream11, (int) (byte) 1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer23 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream11, iOExceptionConsumer23);
        java.io.OutputStream outputStream25 = null;
        java.io.InputStream inputStream27 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray28 = new byte[] {};
        int int29 = org.apache.commons.io.IOUtils.length(byteArray28);
        int int30 = org.apache.commons.io.IOUtils.read(inputStream27, byteArray28);
        byte[] byteArray31 = org.apache.commons.io.IOUtils.toByteArray(inputStream27);
        java.io.InputStream inputStream33 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray34 = new byte[] {};
        int int35 = org.apache.commons.io.IOUtils.length(byteArray34);
        int int36 = org.apache.commons.io.IOUtils.read(inputStream33, byteArray34);
        byte[] byteArray37 = org.apache.commons.io.IOUtils.toByteArray(inputStream33);
        int int38 = org.apache.commons.io.IOUtils.length(byteArray37);
        org.apache.commons.io.IOUtils.readFully(inputStream27, byteArray37);
        long long40 = org.apache.commons.io.IOUtils.copyLarge(inputStream11, outputStream25, byteArray37);
        boolean boolean41 = org.apache.commons.io.IOUtils.contentEquals(inputStream1, inputStream11);
        java.io.BufferedInputStream bufferedInputStream43 = org.apache.commons.io.IOUtils.buffer(inputStream1, 5);
        java.io.OutputStream outputStream44 = null;
        int int45 = org.apache.commons.io.IOUtils.copy(inputStream1, outputStream44);
        java.io.OutputStream outputStream46 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long49 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream46, (long) '#', (long) 5);
            org.junit.Assert.fail("Expected exception of type java.io.EOFException; message: Bytes to skip: 35 actual: 0");
        } catch (java.io.EOFException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(inputStream11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream20);
        org.junit.Assert.assertNotNull(inputStream22);
        org.junit.Assert.assertNotNull(inputStream27);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(inputStream33);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(bufferedInputStream43);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
    }

    @Test
    public void test3048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3048");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray(inputStream1, (int) (short) 0);
        long long9 = org.apache.commons.io.IOUtils.skip(inputStream1, 100L);
        java.io.InputStream inputStream10 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1);
        java.lang.String str11 = org.apache.commons.io.IOUtils.toString(inputStream1);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray13 = org.apache.commons.io.IOUtils.toByteArray(inputStream1, 1L);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Unexpected read size. current: 0, expected: 1");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(inputStream10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
    }

    @Test
    public void test3049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3049");
        java.io.Reader reader0 = null;
        java.io.Writer writer1 = null;
        char[] charArray4 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long5 = org.apache.commons.io.IOUtils.copyLarge(reader0, writer1, (long) '/', (long) (byte) -1, charArray4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[], int, int)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test3050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3050");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.util.List<java.lang.String> strList4 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.OutputStream outputStream5 = null;
        long long6 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream5);
        java.io.Writer writer7 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer7);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream11 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray12 = new byte[] {};
        int int13 = org.apache.commons.io.IOUtils.length(byteArray12);
        int int14 = org.apache.commons.io.IOUtils.read(inputStream11, byteArray12);
        byte[] byteArray15 = org.apache.commons.io.IOUtils.toByteArray(inputStream11);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer16 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream11, iOExceptionConsumer16);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream11);
        java.io.BufferedInputStream bufferedInputStream20 = org.apache.commons.io.IOUtils.buffer(inputStream11, (int) (byte) 10);
        java.io.InputStream inputStream22 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream11, (int) (byte) 1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer23 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream11, iOExceptionConsumer23);
        java.io.OutputStream outputStream25 = null;
        java.io.InputStream inputStream27 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray28 = new byte[] {};
        int int29 = org.apache.commons.io.IOUtils.length(byteArray28);
        int int30 = org.apache.commons.io.IOUtils.read(inputStream27, byteArray28);
        byte[] byteArray31 = org.apache.commons.io.IOUtils.toByteArray(inputStream27);
        java.io.InputStream inputStream33 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray34 = new byte[] {};
        int int35 = org.apache.commons.io.IOUtils.length(byteArray34);
        int int36 = org.apache.commons.io.IOUtils.read(inputStream33, byteArray34);
        byte[] byteArray37 = org.apache.commons.io.IOUtils.toByteArray(inputStream33);
        int int38 = org.apache.commons.io.IOUtils.length(byteArray37);
        org.apache.commons.io.IOUtils.readFully(inputStream27, byteArray37);
        long long40 = org.apache.commons.io.IOUtils.copyLarge(inputStream11, outputStream25, byteArray37);
        boolean boolean41 = org.apache.commons.io.IOUtils.contentEquals(inputStream1, inputStream11);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream11);
        java.io.OutputStream outputStream43 = null;
        java.io.InputStream inputStream47 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray48 = new byte[] {};
        int int49 = org.apache.commons.io.IOUtils.length(byteArray48);
        int int50 = org.apache.commons.io.IOUtils.read(inputStream47, byteArray48);
        byte[] byteArray51 = org.apache.commons.io.IOUtils.toByteArray(inputStream47);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer52 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream47, iOExceptionConsumer52);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream47);
        org.apache.commons.io.IOUtils.closeQuietly(inputStream47);
        java.io.BufferedInputStream bufferedInputStream56 = org.apache.commons.io.IOUtils.buffer(inputStream47);
        java.io.OutputStream outputStream57 = null;
        java.io.InputStream inputStream59 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray60 = new byte[] {};
        int int61 = org.apache.commons.io.IOUtils.length(byteArray60);
        int int62 = org.apache.commons.io.IOUtils.read(inputStream59, byteArray60);
        byte[] byteArray63 = org.apache.commons.io.IOUtils.toByteArray(inputStream59);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer64 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream59, iOExceptionConsumer64);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream59);
        java.io.BufferedInputStream bufferedInputStream68 = org.apache.commons.io.IOUtils.buffer(inputStream59, (int) (byte) 10);
        java.io.InputStream inputStream70 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream59, (int) (byte) 1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer71 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream59, iOExceptionConsumer71);
        java.io.OutputStream outputStream73 = null;
        java.io.InputStream inputStream75 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray76 = new byte[] {};
        int int77 = org.apache.commons.io.IOUtils.length(byteArray76);
        int int78 = org.apache.commons.io.IOUtils.read(inputStream75, byteArray76);
        byte[] byteArray79 = org.apache.commons.io.IOUtils.toByteArray(inputStream75);
        java.io.InputStream inputStream81 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray82 = new byte[] {};
        int int83 = org.apache.commons.io.IOUtils.length(byteArray82);
        int int84 = org.apache.commons.io.IOUtils.read(inputStream81, byteArray82);
        byte[] byteArray85 = org.apache.commons.io.IOUtils.toByteArray(inputStream81);
        int int86 = org.apache.commons.io.IOUtils.length(byteArray85);
        org.apache.commons.io.IOUtils.readFully(inputStream75, byteArray85);
        long long88 = org.apache.commons.io.IOUtils.copyLarge(inputStream59, outputStream73, byteArray85);
        long long89 = org.apache.commons.io.IOUtils.copyLarge(inputStream47, outputStream57, byteArray85);
        // The following exception was thrown during execution in test generation
        try {
            long long90 = org.apache.commons.io.IOUtils.copyLarge(inputStream11, outputStream43, (long) (byte) 10, 1L, byteArray85);
            org.junit.Assert.fail("Expected exception of type java.io.EOFException; message: Bytes to skip: 10 actual: 0");
        } catch (java.io.EOFException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(inputStream11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream20);
        org.junit.Assert.assertNotNull(inputStream22);
        org.junit.Assert.assertNotNull(inputStream27);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(inputStream33);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(inputStream47);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream56);
        org.junit.Assert.assertNotNull(inputStream59);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream68);
        org.junit.Assert.assertNotNull(inputStream70);
        org.junit.Assert.assertNotNull(inputStream75);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[]");
        org.junit.Assert.assertNotNull(inputStream81);
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[]");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertTrue("'" + long88 + "' != '" + 0L + "'", long88 == 0L);
        org.junit.Assert.assertTrue("'" + long89 + "' != '" + 0L + "'", long89 == 0L);
    }

    @Test
    public void test3051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3051");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream5 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray("");
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray10);
        long long12 = org.apache.commons.io.IOUtils.copyLarge(inputStream4, outputStream5, 0L, 0L, byteArray10);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, byteArray10);
        java.io.BufferedInputStream bufferedInputStream15 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        org.apache.commons.io.IOUtils.closeQuietly(inputStream1);
        java.nio.charset.Charset charset17 = null;
        java.util.List<java.lang.String> strList18 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset17);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.io.OutputStream outputStream20 = null;
        int int21 = org.apache.commons.io.IOUtils.copy(inputStream1, outputStream20);
        java.io.OutputStream outputStream22 = null;
        long long23 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream22);
        java.io.Writer writer24 = null;
        java.nio.charset.Charset charset25 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer24, charset25);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) writer24);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream15);
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
    }

    @Test
    public void test3052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3052");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        byte[] byteArray6 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        org.apache.commons.io.IOUtils.skipFully(inputStream1, (long) (byte) 0);
        long long10 = org.apache.commons.io.IOUtils.skip(inputStream1, (long) (short) 10);
        java.io.Writer writer11 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer11);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
    }

    @Test
    public void test3053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3053");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        java.nio.charset.Charset charset10 = null;
        java.util.List<java.lang.String> strList11 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset10);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.nio.charset.Charset charset13 = null;
        java.lang.String str14 = org.apache.commons.io.IOUtils.toString(inputStream1, charset13);
        java.io.Writer writer15 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer15);
        byte[] byteArray17 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.io.OutputStream outputStream18 = null;
        long long19 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream18);
        java.io.Writer writer20 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer20);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
    }

    @Test
    public void test3054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3054");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream3 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1);
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream3);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream4);
        java.io.Writer writer6 = null;
        org.apache.commons.io.IOUtils.copy(inputStream4, writer6);
        java.lang.String str8 = org.apache.commons.io.IOUtils.toString(inputStream4);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream4);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream3);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
    }

    @Test
    public void test3055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3055");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.List<java.lang.String> strList3 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        long long5 = org.apache.commons.io.IOUtils.skip(inputStream1, (long) '/');
        java.lang.String str6 = org.apache.commons.io.IOUtils.toString(inputStream1);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(strList3);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
    }

    @Test
    public void test3056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3056");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream5 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray("");
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray10);
        long long12 = org.apache.commons.io.IOUtils.copyLarge(inputStream4, outputStream5, 0L, 0L, byteArray10);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, byteArray10);
        java.io.BufferedInputStream bufferedInputStream15 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.nio.charset.Charset charset16 = null;
        java.util.List<java.lang.String> strList17 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset16);
        java.io.OutputStream outputStream18 = null;
        long long21 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream18, 0L, (long) 0);
        java.io.BufferedInputStream bufferedInputStream22 = org.apache.commons.io.IOUtils.buffer(inputStream1);
        java.io.BufferedInputStream bufferedInputStream23 = org.apache.commons.io.IOUtils.buffer(inputStream1);
        java.io.OutputStream outputStream24 = null;
        long long25 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream24);
        java.io.Writer writer26 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer26);
        java.nio.charset.Charset charset28 = null;
        java.lang.String str29 = org.apache.commons.io.IOUtils.toString(inputStream1, charset28);
        java.lang.String str30 = org.apache.commons.io.IOUtils.toString(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.io.OutputStream outputStream32 = null;
        int int33 = org.apache.commons.io.IOUtils.copy(inputStream1, outputStream32);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream15);
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream22);
        org.junit.Assert.assertNotNull(bufferedInputStream23);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
    }

    @Test
    public void test3057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3057");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream5 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray("");
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray10);
        long long12 = org.apache.commons.io.IOUtils.copyLarge(inputStream4, outputStream5, 0L, 0L, byteArray10);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, byteArray10);
        java.io.BufferedInputStream bufferedInputStream15 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.nio.charset.Charset charset16 = null;
        java.util.List<java.lang.String> strList17 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset16);
        java.io.OutputStream outputStream18 = null;
        long long21 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream18, 0L, (long) 0);
        java.io.BufferedInputStream bufferedInputStream22 = org.apache.commons.io.IOUtils.buffer(inputStream1);
        java.io.BufferedInputStream bufferedInputStream23 = org.apache.commons.io.IOUtils.buffer(inputStream1);
        java.io.OutputStream outputStream24 = null;
        int int25 = org.apache.commons.io.IOUtils.copy(inputStream1, outputStream24);
        java.io.BufferedInputStream bufferedInputStream26 = org.apache.commons.io.IOUtils.buffer(inputStream1);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream15);
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream22);
        org.junit.Assert.assertNotNull(bufferedInputStream23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(bufferedInputStream26);
    }

    @Test
    public void test3058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3058");
        java.io.Reader reader0 = null;
        java.io.Writer writer1 = null;
        java.io.InputStream inputStream5 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream6 = null;
        java.io.InputStream inputStream9 = null;
        byte[] byteArray11 = org.apache.commons.io.IOUtils.toByteArray("");
        int int12 = org.apache.commons.io.IOUtils.read(inputStream9, byteArray11);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream5, outputStream6, 0L, 0L, byteArray11);
        java.io.Writer writer14 = null;
        org.apache.commons.io.IOUtils.copy(inputStream5, writer14);
        java.nio.charset.Charset charset16 = null;
        char[] charArray17 = org.apache.commons.io.IOUtils.toCharArray(inputStream5, charset16);
        java.io.Writer writer18 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray17, writer18);
        // The following exception was thrown during execution in test generation
        try {
            long long20 = org.apache.commons.io.IOUtils.copyLarge(reader0, writer1, (long) 3, (long) 4, charArray17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[], int, int)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream5);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[]");
    }

    @Test
    public void test3059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3059");
        java.io.Reader reader0 = null;
        java.io.Writer writer1 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long4 = org.apache.commons.io.IOUtils.copyLarge(reader0, writer1, (long) (byte) 0, (long) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[], int, int)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test3060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3060");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.BufferedInputStream bufferedInputStream10 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        org.apache.commons.io.function.IOConsumer<java.io.IOException> iOExceptionIOConsumer11 = null;
        org.apache.commons.io.IOUtils.close((java.io.Closeable) bufferedInputStream10, iOExceptionIOConsumer11);
        java.nio.charset.Charset charset13 = null;
        org.apache.commons.io.LineIterator lineIterator14 = org.apache.commons.io.IOUtils.lineIterator((java.io.InputStream) bufferedInputStream10, charset13);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.InputStream) bufferedInputStream10);
        java.io.Writer writer16 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.copy((java.io.InputStream) bufferedInputStream10, writer16);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Stream closed");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream10);
        org.junit.Assert.assertNotNull(lineIterator14);
    }

    @Test
    public void test3061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3061");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream5 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray("");
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray10);
        long long12 = org.apache.commons.io.IOUtils.copyLarge(inputStream4, outputStream5, 0L, 0L, byteArray10);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, byteArray10);
        java.io.BufferedInputStream bufferedInputStream15 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.nio.charset.Charset charset16 = null;
        java.util.List<java.lang.String> strList17 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset16);
        java.nio.charset.Charset charset18 = null;
        char[] charArray19 = org.apache.commons.io.IOUtils.toCharArray(inputStream1, charset18);
        java.io.OutputStream outputStream20 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(charArray19, outputStream20, "");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream15);
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[]");
    }

    @Test
    public void test3062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3062");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.BufferedInputStream bufferedInputStream10 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.nio.charset.Charset charset11 = null;
        char[] charArray12 = org.apache.commons.io.IOUtils.toCharArray((java.io.InputStream) bufferedInputStream10, charset11);
        java.io.Writer writer13 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(charArray12, writer13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Writer.write(char[])\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream10);
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray12), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray12), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray12), "[]");
    }

    @Test
    public void test3063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3063");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly(inputStream1);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.BufferedInputStream bufferedInputStream12 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) '#');
        java.nio.charset.Charset charset13 = null;
        java.util.List<java.lang.String> strList14 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset13);
        byte[] byteArray16 = org.apache.commons.io.IOUtils.toByteArray(inputStream1, 0L);
        java.io.OutputStream outputStream17 = null;
        long long18 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream17);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream12);
        org.junit.Assert.assertNotNull(strList14);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
    }

    @Test
    public void test3064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3064");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        java.io.OutputStream outputStream10 = null;
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream10, (long) (short) 0, (-1L));
        char[] charArray14 = org.apache.commons.io.IOUtils.toCharArray(inputStream1);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream17 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray18 = new byte[] {};
        int int19 = org.apache.commons.io.IOUtils.length(byteArray18);
        int int20 = org.apache.commons.io.IOUtils.read(inputStream17, byteArray18);
        byte[] byteArray21 = org.apache.commons.io.IOUtils.toByteArray(inputStream17);
        byte[] byteArray23 = org.apache.commons.io.IOUtils.toByteArray(inputStream17, (int) (short) 0);
        java.io.BufferedInputStream bufferedInputStream24 = org.apache.commons.io.IOUtils.buffer(inputStream17);
        byte[] byteArray25 = org.apache.commons.io.IOUtils.toByteArray((java.io.InputStream) bufferedInputStream24);
        int int26 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray25);
        int int27 = org.apache.commons.io.IOUtils.length(byteArray25);
        java.io.OutputStream outputStream28 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray25, outputStream28);
        java.io.OutputStream outputStream30 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray25, outputStream30);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[]");
        org.junit.Assert.assertNotNull(inputStream17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
    }

    @Test
    public void test3065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3065");
        java.io.Reader reader0 = null;
        java.io.Reader reader1 = null;
        char[] charArray2 = new char[] {};
        int int3 = org.apache.commons.io.IOUtils.length(charArray2);
        java.io.Writer writer4 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray2, writer4);
        int int6 = org.apache.commons.io.IOUtils.read(reader1, charArray2);
        int int7 = org.apache.commons.io.IOUtils.read(reader0, charArray2);
        java.io.OutputStream outputStream8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(charArray2, outputStream8, "hi!");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: hi!");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray2), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray2), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test3066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3066");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.util.List<java.lang.String> strList4 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.OutputStream outputStream5 = null;
        long long6 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream5);
        java.io.Writer writer7 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer7);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream11 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray12 = new byte[] {};
        int int13 = org.apache.commons.io.IOUtils.length(byteArray12);
        int int14 = org.apache.commons.io.IOUtils.read(inputStream11, byteArray12);
        byte[] byteArray15 = org.apache.commons.io.IOUtils.toByteArray(inputStream11);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer16 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream11, iOExceptionConsumer16);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream11);
        java.io.BufferedInputStream bufferedInputStream20 = org.apache.commons.io.IOUtils.buffer(inputStream11, (int) (byte) 10);
        java.io.InputStream inputStream22 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream11, (int) (byte) 1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer23 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream11, iOExceptionConsumer23);
        java.io.OutputStream outputStream25 = null;
        java.io.InputStream inputStream27 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray28 = new byte[] {};
        int int29 = org.apache.commons.io.IOUtils.length(byteArray28);
        int int30 = org.apache.commons.io.IOUtils.read(inputStream27, byteArray28);
        byte[] byteArray31 = org.apache.commons.io.IOUtils.toByteArray(inputStream27);
        java.io.InputStream inputStream33 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray34 = new byte[] {};
        int int35 = org.apache.commons.io.IOUtils.length(byteArray34);
        int int36 = org.apache.commons.io.IOUtils.read(inputStream33, byteArray34);
        byte[] byteArray37 = org.apache.commons.io.IOUtils.toByteArray(inputStream33);
        int int38 = org.apache.commons.io.IOUtils.length(byteArray37);
        org.apache.commons.io.IOUtils.readFully(inputStream27, byteArray37);
        long long40 = org.apache.commons.io.IOUtils.copyLarge(inputStream11, outputStream25, byteArray37);
        boolean boolean41 = org.apache.commons.io.IOUtils.contentEquals(inputStream1, inputStream11);
        java.io.BufferedInputStream bufferedInputStream43 = org.apache.commons.io.IOUtils.buffer(inputStream1, 5);
        java.io.InputStream inputStream45 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream46 = null;
        java.io.InputStream inputStream49 = null;
        byte[] byteArray51 = org.apache.commons.io.IOUtils.toByteArray("");
        int int52 = org.apache.commons.io.IOUtils.read(inputStream49, byteArray51);
        long long53 = org.apache.commons.io.IOUtils.copyLarge(inputStream45, outputStream46, 0L, 0L, byteArray51);
        java.nio.charset.Charset charset54 = null;
        java.util.List<java.lang.String> strList55 = org.apache.commons.io.IOUtils.readLines(inputStream45, charset54);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream45);
        java.nio.charset.Charset charset57 = null;
        java.lang.String str58 = org.apache.commons.io.IOUtils.toString(inputStream45, charset57);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer59 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream45, iOExceptionConsumer59);
        boolean boolean61 = org.apache.commons.io.IOUtils.contentEquals((java.io.InputStream) bufferedInputStream43, inputStream45);
        java.io.InputStream inputStream63 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream64 = null;
        java.io.InputStream inputStream66 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream67 = null;
        java.io.InputStream inputStream70 = null;
        byte[] byteArray72 = org.apache.commons.io.IOUtils.toByteArray("");
        int int73 = org.apache.commons.io.IOUtils.read(inputStream70, byteArray72);
        long long74 = org.apache.commons.io.IOUtils.copyLarge(inputStream66, outputStream67, 0L, 0L, byteArray72);
        long long75 = org.apache.commons.io.IOUtils.copyLarge(inputStream63, outputStream64, byteArray72);
        java.lang.String str76 = org.apache.commons.io.IOUtils.toString(byteArray72);
        org.apache.commons.io.IOUtils.readFully(inputStream45, byteArray72);
        java.io.InputStream inputStream79 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream79);
        byte[] byteArray81 = org.apache.commons.io.IOUtils.toByteArray(inputStream79);
        byte[] byteArray82 = org.apache.commons.io.IOUtils.toByteArray(inputStream79);
        byte[] byteArray83 = org.apache.commons.io.IOUtils.toByteArray(inputStream79);
        int int84 = org.apache.commons.io.IOUtils.read(inputStream45, byteArray83);
        int int85 = org.apache.commons.io.IOUtils.length(byteArray83);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(inputStream11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream20);
        org.junit.Assert.assertNotNull(inputStream22);
        org.junit.Assert.assertNotNull(inputStream27);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(inputStream33);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(bufferedInputStream43);
        org.junit.Assert.assertNotNull(inputStream45);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertNotNull(strList55);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(inputStream63);
        org.junit.Assert.assertNotNull(inputStream66);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 0L + "'", long74 == 0L);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 0L + "'", long75 == 0L);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertNotNull(inputStream79);
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[]");
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[]");
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
    }

    @Test
    public void test3067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3067");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream5 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray("");
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray10);
        long long12 = org.apache.commons.io.IOUtils.copyLarge(inputStream4, outputStream5, 0L, 0L, byteArray10);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, byteArray10);
        java.io.InputStream inputStream14 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(inputStream14);
    }

    @Test
    public void test3068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3068");
        java.io.Reader reader0 = null;
        java.io.Writer writer1 = null;
        java.io.Reader reader2 = null;
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream5 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray("");
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray10);
        long long12 = org.apache.commons.io.IOUtils.copyLarge(inputStream4, outputStream5, 0L, 0L, byteArray10);
        java.io.Writer writer13 = null;
        org.apache.commons.io.IOUtils.copy(inputStream4, writer13);
        java.nio.charset.Charset charset15 = null;
        char[] charArray16 = org.apache.commons.io.IOUtils.toCharArray(inputStream4, charset15);
        org.apache.commons.io.IOUtils.readFully(reader2, charArray16);
        int int18 = org.apache.commons.io.IOUtils.length(charArray16);
        // The following exception was thrown during execution in test generation
        try {
            long long19 = org.apache.commons.io.IOUtils.copyLarge(reader0, writer1, charArray16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[])\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(charArray16);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray16), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray16), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray16), "[]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test3069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3069");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray(inputStream1, (int) (short) 0);
        java.io.BufferedInputStream bufferedInputStream8 = org.apache.commons.io.IOUtils.buffer(inputStream1);
        java.io.BufferedInputStream bufferedInputStream9 = org.apache.commons.io.IOUtils.buffer(inputStream1);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray11 = org.apache.commons.io.IOUtils.toByteArray(inputStream1, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Unexpected read size. current: 0, expected: 10");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream8);
        org.junit.Assert.assertNotNull(bufferedInputStream9);
    }

    @Test
    public void test3070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3070");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.util.List<java.lang.String> strList4 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.OutputStream outputStream5 = null;
        long long6 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream5);
        java.io.Writer writer7 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer7);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream11 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray12 = new byte[] {};
        int int13 = org.apache.commons.io.IOUtils.length(byteArray12);
        int int14 = org.apache.commons.io.IOUtils.read(inputStream11, byteArray12);
        byte[] byteArray15 = org.apache.commons.io.IOUtils.toByteArray(inputStream11);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer16 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream11, iOExceptionConsumer16);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream11);
        java.io.BufferedInputStream bufferedInputStream20 = org.apache.commons.io.IOUtils.buffer(inputStream11, (int) (byte) 10);
        java.io.InputStream inputStream22 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream11, (int) (byte) 1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer23 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream11, iOExceptionConsumer23);
        java.io.OutputStream outputStream25 = null;
        java.io.InputStream inputStream27 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray28 = new byte[] {};
        int int29 = org.apache.commons.io.IOUtils.length(byteArray28);
        int int30 = org.apache.commons.io.IOUtils.read(inputStream27, byteArray28);
        byte[] byteArray31 = org.apache.commons.io.IOUtils.toByteArray(inputStream27);
        java.io.InputStream inputStream33 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray34 = new byte[] {};
        int int35 = org.apache.commons.io.IOUtils.length(byteArray34);
        int int36 = org.apache.commons.io.IOUtils.read(inputStream33, byteArray34);
        byte[] byteArray37 = org.apache.commons.io.IOUtils.toByteArray(inputStream33);
        int int38 = org.apache.commons.io.IOUtils.length(byteArray37);
        org.apache.commons.io.IOUtils.readFully(inputStream27, byteArray37);
        long long40 = org.apache.commons.io.IOUtils.copyLarge(inputStream11, outputStream25, byteArray37);
        boolean boolean41 = org.apache.commons.io.IOUtils.contentEquals(inputStream1, inputStream11);
        java.io.BufferedInputStream bufferedInputStream43 = org.apache.commons.io.IOUtils.buffer(inputStream1, 5);
        java.io.InputStream inputStream45 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream46 = null;
        java.io.InputStream inputStream49 = null;
        byte[] byteArray51 = org.apache.commons.io.IOUtils.toByteArray("");
        int int52 = org.apache.commons.io.IOUtils.read(inputStream49, byteArray51);
        long long53 = org.apache.commons.io.IOUtils.copyLarge(inputStream45, outputStream46, 0L, 0L, byteArray51);
        java.nio.charset.Charset charset54 = null;
        java.util.List<java.lang.String> strList55 = org.apache.commons.io.IOUtils.readLines(inputStream45, charset54);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream45);
        java.nio.charset.Charset charset57 = null;
        java.lang.String str58 = org.apache.commons.io.IOUtils.toString(inputStream45, charset57);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer59 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream45, iOExceptionConsumer59);
        boolean boolean61 = org.apache.commons.io.IOUtils.contentEquals((java.io.InputStream) bufferedInputStream43, inputStream45);
        byte[] byteArray63 = org.apache.commons.io.IOUtils.toByteArray(inputStream45, 0);
        java.util.List<java.lang.String> strList64 = org.apache.commons.io.IOUtils.readLines(inputStream45);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(inputStream11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream20);
        org.junit.Assert.assertNotNull(inputStream22);
        org.junit.Assert.assertNotNull(inputStream27);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(inputStream33);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(bufferedInputStream43);
        org.junit.Assert.assertNotNull(inputStream45);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertNotNull(strList55);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[]");
        org.junit.Assert.assertNotNull(strList64);
    }

    @Test
    public void test3071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3071");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        java.nio.charset.Charset charset5 = null;
        org.apache.commons.io.LineIterator lineIterator6 = org.apache.commons.io.IOUtils.lineIterator(inputStream1, charset5);
        java.io.InputStream inputStream8 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray9 = new byte[] {};
        int int10 = org.apache.commons.io.IOUtils.length(byteArray9);
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray9);
        byte[] byteArray12 = org.apache.commons.io.IOUtils.toByteArray(inputStream8);
        boolean boolean13 = org.apache.commons.io.IOUtils.contentEquals(inputStream1, inputStream8);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.BufferedInputStream bufferedInputStream16 = org.apache.commons.io.IOUtils.buffer(inputStream1, 3);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray18 = org.apache.commons.io.IOUtils.toByteArray((java.io.InputStream) bufferedInputStream16, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Unexpected read size. current: 0, expected: 32");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(lineIterator6);
        org.junit.Assert.assertNotNull(inputStream8);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(bufferedInputStream16);
    }

    @Test
    public void test3072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3072");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.BufferedInputStream bufferedInputStream10 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.io.InputStream inputStream12 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, (int) (byte) 1);
        java.io.OutputStream outputStream13 = null;
        int int14 = org.apache.commons.io.IOUtils.copy(inputStream12, outputStream13);
        java.io.BufferedInputStream bufferedInputStream16 = org.apache.commons.io.IOUtils.buffer(inputStream12, (int) (byte) 10);
        java.nio.charset.Charset charset17 = null;
        java.util.List<java.lang.String> strList18 = org.apache.commons.io.IOUtils.readLines((java.io.InputStream) bufferedInputStream16, charset17);
        java.io.OutputStream outputStream20 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList18, "\r\n", outputStream20);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream10);
        org.junit.Assert.assertNotNull(inputStream12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(bufferedInputStream16);
        org.junit.Assert.assertNotNull(strList18);
    }

    @Test
    public void test3073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3073");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray5 = new byte[] {};
        int int6 = org.apache.commons.io.IOUtils.length(byteArray5);
        int int7 = org.apache.commons.io.IOUtils.read(inputStream4, byteArray5);
        byte[] byteArray8 = org.apache.commons.io.IOUtils.toByteArray(inputStream4);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer9 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream4, iOExceptionConsumer9);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream4);
        java.io.BufferedInputStream bufferedInputStream13 = org.apache.commons.io.IOUtils.buffer(inputStream4, (int) (byte) 10);
        boolean boolean14 = org.apache.commons.io.IOUtils.contentEquals(inputStream1, inputStream4);
        java.io.InputStream inputStream16 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray17 = new byte[] {};
        int int18 = org.apache.commons.io.IOUtils.length(byteArray17);
        int int19 = org.apache.commons.io.IOUtils.read(inputStream16, byteArray17);
        byte[] byteArray20 = org.apache.commons.io.IOUtils.toByteArray(inputStream16);
        byte[] byteArray22 = org.apache.commons.io.IOUtils.toByteArray(inputStream16, (int) (short) 0);
        long long24 = org.apache.commons.io.IOUtils.skip(inputStream16, 100L);
        java.io.InputStream inputStream25 = null;
        java.io.InputStream inputStream26 = null;
        java.io.OutputStream outputStream27 = null;
        byte[] byteArray30 = new byte[] {};
        int int31 = org.apache.commons.io.IOUtils.length(byteArray30);
        java.io.OutputStream outputStream32 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray30, outputStream32);
        long long34 = org.apache.commons.io.IOUtils.copyLarge(inputStream26, outputStream27, 0L, (long) (byte) -1, byteArray30);
        java.io.OutputStream outputStream35 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray30, outputStream35);
        org.apache.commons.io.IOUtils.readFully(inputStream25, byteArray30);
        int int38 = org.apache.commons.io.IOUtils.read(inputStream16, byteArray30);
        int int39 = org.apache.commons.io.IOUtils.read(inputStream4, byteArray30);
        java.io.Writer writer40 = null;
        org.apache.commons.io.IOUtils.copy(inputStream4, writer40);
        java.nio.charset.Charset charset42 = null;
        org.apache.commons.io.LineIterator lineIterator43 = org.apache.commons.io.IOUtils.lineIterator(inputStream4, charset42);
        java.lang.Class<?> wildcardClass44 = inputStream4.getClass();
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(inputStream16);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(lineIterator43);
        org.junit.Assert.assertNotNull(wildcardClass44);
    }

    @Test
    public void test3074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3074");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        java.io.Writer writer10 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer10);
        java.nio.charset.Charset charset12 = null;
        char[] charArray13 = org.apache.commons.io.IOUtils.toCharArray(inputStream1, charset12);
        java.io.Writer writer14 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray13, writer14);
        int int16 = org.apache.commons.io.IOUtils.length(charArray13);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test3075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3075");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray5 = new byte[] {};
        int int6 = org.apache.commons.io.IOUtils.length(byteArray5);
        int int7 = org.apache.commons.io.IOUtils.read(inputStream4, byteArray5);
        byte[] byteArray8 = org.apache.commons.io.IOUtils.toByteArray(inputStream4);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer9 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream4, iOExceptionConsumer9);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream4);
        java.io.BufferedInputStream bufferedInputStream13 = org.apache.commons.io.IOUtils.buffer(inputStream4, (int) (byte) 10);
        boolean boolean14 = org.apache.commons.io.IOUtils.contentEquals(inputStream1, inputStream4);
        java.nio.charset.Charset charset15 = null;
        java.lang.String str16 = org.apache.commons.io.IOUtils.toString(inputStream4, charset15);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
    }

    @Test
    public void test3076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3076");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.BufferedInputStream bufferedInputStream10 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.io.InputStream inputStream12 = org.apache.commons.io.IOUtils.toBufferedInputStream((java.io.InputStream) bufferedInputStream10, (int) '#');
        java.nio.charset.Charset charset13 = null;
        char[] charArray14 = org.apache.commons.io.IOUtils.toCharArray(inputStream12, charset13);
        java.io.Writer writer15 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray14, writer15);
        java.io.OutputStream outputStream17 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(charArray14, outputStream17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.OutputStream.write(byte[])\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream10);
        org.junit.Assert.assertNotNull(inputStream12);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[]");
    }

    @Test
    public void test3077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3077");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        java.nio.charset.Charset charset10 = null;
        java.util.List<java.lang.String> strList11 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset10);
        java.io.InputStream inputStream13 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream14 = null;
        java.io.InputStream inputStream17 = null;
        byte[] byteArray19 = org.apache.commons.io.IOUtils.toByteArray("");
        int int20 = org.apache.commons.io.IOUtils.read(inputStream17, byteArray19);
        long long21 = org.apache.commons.io.IOUtils.copyLarge(inputStream13, outputStream14, 0L, 0L, byteArray19);
        java.nio.charset.Charset charset22 = null;
        java.util.List<java.lang.String> strList23 = org.apache.commons.io.IOUtils.readLines(inputStream13, charset22);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream13);
        boolean boolean25 = org.apache.commons.io.IOUtils.contentEquals(inputStream1, inputStream13);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer26 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream13, iOExceptionConsumer26);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertNotNull(inputStream13);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(strList23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
    }

    @Test
    public void test3078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3078");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        java.io.OutputStream outputStream10 = null;
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream10, (long) (short) 0, (-1L));
        java.lang.String str14 = org.apache.commons.io.IOUtils.toString(inputStream1);
        java.io.InputStream inputStream15 = null;
        java.io.OutputStream outputStream16 = null;
        byte[] byteArray19 = new byte[] {};
        int int20 = org.apache.commons.io.IOUtils.length(byteArray19);
        java.io.OutputStream outputStream21 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray19, outputStream21);
        long long23 = org.apache.commons.io.IOUtils.copyLarge(inputStream15, outputStream16, 0L, (long) (byte) -1, byteArray19);
        java.io.OutputStream outputStream24 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray19, outputStream24);
        int int26 = org.apache.commons.io.IOUtils.length(byteArray19);
        int int27 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray19);
        java.io.InputStream inputStream29 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray30 = new byte[] {};
        int int31 = org.apache.commons.io.IOUtils.length(byteArray30);
        int int32 = org.apache.commons.io.IOUtils.read(inputStream29, byteArray30);
        byte[] byteArray33 = org.apache.commons.io.IOUtils.toByteArray(inputStream29);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer34 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream29, iOExceptionConsumer34);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream29);
        java.io.BufferedInputStream bufferedInputStream38 = org.apache.commons.io.IOUtils.buffer(inputStream29, (int) (byte) 10);
        java.io.InputStream inputStream40 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream29, (int) (byte) 1);
        java.io.OutputStream outputStream41 = null;
        int int42 = org.apache.commons.io.IOUtils.copy(inputStream40, outputStream41);
        java.io.BufferedInputStream bufferedInputStream44 = org.apache.commons.io.IOUtils.buffer(inputStream40, (int) (byte) 10);
        byte[] byteArray46 = org.apache.commons.io.IOUtils.toByteArray(inputStream40, 0);
        org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray46, 0, 0);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.LineIterator lineIterator51 = org.apache.commons.io.IOUtils.lineIterator(inputStream1, "hi!");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: hi!");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(inputStream29);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream38);
        org.junit.Assert.assertNotNull(inputStream40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(bufferedInputStream44);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
    }

    @Test
    public void test3079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3079");
        java.io.Reader reader0 = null;
        java.nio.charset.Charset charset2 = null;
        java.io.InputStream inputStream3 = org.apache.commons.io.IOUtils.toInputStream("\n", charset2);
        char[] charArray4 = org.apache.commons.io.IOUtils.toCharArray(inputStream3);
        int int5 = org.apache.commons.io.IOUtils.length(charArray4);
        // The following exception was thrown during execution in test generation
        try {
            int int8 = org.apache.commons.io.IOUtils.read(reader0, charArray4, (int) (byte) -1, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[], int, int)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream3);
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "\n");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "\n");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[\n]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
    }

    @Test
    public void test3080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3080");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.util.List<java.lang.String> strList4 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.OutputStream outputStream5 = null;
        long long6 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream5);
        java.io.Writer writer7 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer7);
        java.io.Writer writer9 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer9);
        java.io.InputStream inputStream12 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, (int) (short) 100);
        java.lang.String str13 = org.apache.commons.io.IOUtils.toString(inputStream1);
        java.io.InputStream inputStream15 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream16 = null;
        java.io.InputStream inputStream18 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream19 = null;
        java.io.InputStream inputStream22 = null;
        byte[] byteArray24 = org.apache.commons.io.IOUtils.toByteArray("");
        int int25 = org.apache.commons.io.IOUtils.read(inputStream22, byteArray24);
        long long26 = org.apache.commons.io.IOUtils.copyLarge(inputStream18, outputStream19, 0L, 0L, byteArray24);
        long long27 = org.apache.commons.io.IOUtils.copyLarge(inputStream15, outputStream16, byteArray24);
        java.io.BufferedInputStream bufferedInputStream29 = org.apache.commons.io.IOUtils.buffer(inputStream15, (int) (byte) 10);
        byte[] byteArray30 = org.apache.commons.io.IOUtils.toByteArray((java.io.InputStream) bufferedInputStream29);
        java.lang.String str31 = org.apache.commons.io.IOUtils.toString(byteArray30);
        org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray30);
        java.util.List<java.lang.String> strList33 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.OutputStream outputStream35 = null;
        java.nio.charset.Charset charset36 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList33, "\n", outputStream35, charset36);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(inputStream12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(inputStream15);
        org.junit.Assert.assertNotNull(inputStream18);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream29);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(strList33);
    }

    @Test
    public void test3081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3081");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.List<java.lang.String> strList3 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        long long5 = org.apache.commons.io.IOUtils.skip(inputStream1, (long) '/');
        long long7 = org.apache.commons.io.IOUtils.skip(inputStream1, (long) '\\');
        java.io.BufferedInputStream bufferedInputStream8 = org.apache.commons.io.IOUtils.buffer(inputStream1);
        java.nio.charset.Charset charset9 = null;
        java.lang.String str10 = org.apache.commons.io.IOUtils.toString((java.io.InputStream) bufferedInputStream8, charset9);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(strList3);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
    }

    @Test
    public void test3082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3082");
        java.io.Reader reader0 = null;
        java.io.Reader reader1 = null;
        char[] charArray2 = new char[] {};
        java.io.Writer writer3 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray2, writer3);
        int int5 = org.apache.commons.io.IOUtils.length(charArray2);
        org.apache.commons.io.IOUtils.readFully(reader1, charArray2);
        int int7 = org.apache.commons.io.IOUtils.length(charArray2);
        org.apache.commons.io.IOUtils.readFully(reader0, charArray2);
        java.io.OutputStream outputStream9 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(charArray2, outputStream9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.OutputStream.write(byte[])\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray2), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray2), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray2), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test3083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3083");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.util.List<java.lang.String> strList4 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.OutputStream outputStream5 = null;
        long long8 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream5, (long) 0, 0L);
        java.io.InputStream inputStream10 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, 100);
        java.nio.charset.Charset charset11 = null;
        char[] charArray12 = org.apache.commons.io.IOUtils.toCharArray(inputStream1, charset11);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.skipFully(inputStream1, (long) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.io.EOFException; message: Bytes to skip: 100 actual: 0");
        } catch (java.io.EOFException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(inputStream10);
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray12), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray12), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray12), "[]");
    }

    @Test
    public void test3084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3084");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.util.List<java.lang.String> strList4 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.OutputStream outputStream5 = null;
        long long6 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream5);
        java.io.Writer writer7 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer7);
        org.apache.commons.io.IOUtils.closeQuietly(inputStream1);
        java.io.BufferedInputStream bufferedInputStream11 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) ' ');
        java.nio.charset.Charset charset12 = null;
        java.util.List<java.lang.String> strList13 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset12);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream11);
        org.junit.Assert.assertNotNull(strList13);
    }

    @Test
    public void test3085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3085");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream5 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray("");
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray10);
        long long12 = org.apache.commons.io.IOUtils.copyLarge(inputStream4, outputStream5, 0L, 0L, byteArray10);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, byteArray10);
        java.io.BufferedInputStream bufferedInputStream15 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.nio.charset.Charset charset16 = null;
        java.util.List<java.lang.String> strList17 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset16);
        java.io.OutputStream outputStream18 = null;
        long long21 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream18, 0L, (long) 0);
        java.io.BufferedInputStream bufferedInputStream22 = org.apache.commons.io.IOUtils.buffer(inputStream1);
        org.apache.commons.io.function.IOConsumer<java.io.IOException> iOExceptionIOConsumer23 = null;
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1, iOExceptionIOConsumer23);
        java.nio.charset.Charset charset25 = null;
        java.lang.String str26 = org.apache.commons.io.IOUtils.toString(inputStream1, charset25);
        java.io.OutputStream outputStream27 = null;
        long long28 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream27);
        long long30 = org.apache.commons.io.IOUtils.skip(inputStream1, (long) '4');
        java.io.OutputStream outputStream31 = null;
        long long32 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream31);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream15);
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream22);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
    }

    @Test
    public void test3086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3086");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream("\n");
        byte[] byteArray3 = org.apache.commons.io.IOUtils.toByteArray(inputStream1, (int) (byte) 0);
        char[] charArray4 = org.apache.commons.io.IOUtils.toCharArray(inputStream1);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "\n");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "\n");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[\n]");
    }

    @Test
    public void test3087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3087");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray(inputStream1, (int) (short) 0);
        long long9 = org.apache.commons.io.IOUtils.skip(inputStream1, 100L);
        java.io.InputStream inputStream10 = null;
        java.io.InputStream inputStream11 = null;
        java.io.OutputStream outputStream12 = null;
        byte[] byteArray15 = new byte[] {};
        int int16 = org.apache.commons.io.IOUtils.length(byteArray15);
        java.io.OutputStream outputStream17 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray15, outputStream17);
        long long19 = org.apache.commons.io.IOUtils.copyLarge(inputStream11, outputStream12, 0L, (long) (byte) -1, byteArray15);
        java.io.OutputStream outputStream20 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray15, outputStream20);
        org.apache.commons.io.IOUtils.readFully(inputStream10, byteArray15);
        int int23 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray15);
        java.io.InputStream inputStream24 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1);
        java.io.BufferedInputStream bufferedInputStream26 = org.apache.commons.io.IOUtils.buffer(inputStream24, 1);
        java.io.OutputStream outputStream27 = null;
        int int28 = org.apache.commons.io.IOUtils.copy((java.io.InputStream) bufferedInputStream26, outputStream27);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(inputStream24);
        org.junit.Assert.assertNotNull(bufferedInputStream26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
    }

    @Test
    public void test3088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3088");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        java.nio.charset.Charset charset5 = null;
        org.apache.commons.io.LineIterator lineIterator6 = org.apache.commons.io.IOUtils.lineIterator(inputStream1, charset5);
        java.io.InputStream inputStream8 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray9 = new byte[] {};
        int int10 = org.apache.commons.io.IOUtils.length(byteArray9);
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray9);
        byte[] byteArray12 = org.apache.commons.io.IOUtils.toByteArray(inputStream8);
        boolean boolean13 = org.apache.commons.io.IOUtils.contentEquals(inputStream1, inputStream8);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.BufferedInputStream bufferedInputStream16 = org.apache.commons.io.IOUtils.buffer(inputStream1, 3);
        java.util.List<java.lang.String> strList17 = org.apache.commons.io.IOUtils.readLines((java.io.InputStream) bufferedInputStream16);
        java.io.OutputStream outputStream19 = null;
        java.nio.charset.Charset charset20 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList17, "\r\n", outputStream19, charset20);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(lineIterator6);
        org.junit.Assert.assertNotNull(inputStream8);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(bufferedInputStream16);
        org.junit.Assert.assertNotNull(strList17);
    }

    @Test
    public void test3089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3089");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.BufferedInputStream bufferedInputStream10 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.io.InputStream inputStream12 = org.apache.commons.io.IOUtils.toBufferedInputStream((java.io.InputStream) bufferedInputStream10, (int) '#');
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream12);
        java.util.List<java.lang.String> strList14 = org.apache.commons.io.IOUtils.readLines(inputStream12);
        java.io.InputStream inputStream15 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream12);
        java.io.Writer writer16 = null;
        org.apache.commons.io.IOUtils.copy(inputStream15, writer16);
        byte[] byteArray18 = org.apache.commons.io.IOUtils.toByteArray(inputStream15);
        java.io.InputStream inputStream20 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream20);
        byte[] byteArray22 = org.apache.commons.io.IOUtils.toByteArray(inputStream20);
        byte[] byteArray23 = org.apache.commons.io.IOUtils.toByteArray(inputStream20);
        byte[] byteArray24 = org.apache.commons.io.IOUtils.toByteArray(inputStream20);
        byte[] byteArray25 = org.apache.commons.io.IOUtils.toByteArray(inputStream20);
        int int26 = org.apache.commons.io.IOUtils.length(byteArray25);
        // The following exception was thrown during execution in test generation
        try {
            int int29 = org.apache.commons.io.IOUtils.read(inputStream15, byteArray25, 5, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Range [5, 5 + 100) out of bounds for length 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream10);
        org.junit.Assert.assertNotNull(inputStream12);
        org.junit.Assert.assertNotNull(strList14);
        org.junit.Assert.assertNotNull(inputStream15);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(inputStream20);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
    }

    @Test
    public void test3090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3090");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        java.io.OutputStream outputStream10 = null;
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream10, (long) (short) 0, (-1L));
        java.lang.String str14 = org.apache.commons.io.IOUtils.toString(inputStream1);
        java.io.BufferedInputStream bufferedInputStream15 = org.apache.commons.io.IOUtils.buffer(inputStream1);
        java.io.OutputStream outputStream16 = null;
        java.io.InputStream inputStream18 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray19 = new byte[] {};
        int int20 = org.apache.commons.io.IOUtils.length(byteArray19);
        int int21 = org.apache.commons.io.IOUtils.read(inputStream18, byteArray19);
        byte[] byteArray22 = org.apache.commons.io.IOUtils.toByteArray(inputStream18);
        byte[] byteArray23 = org.apache.commons.io.IOUtils.toByteArray(inputStream18);
        java.io.OutputStream outputStream24 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray23, outputStream24);
        long long26 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream16, byteArray23);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer27 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer27);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(bufferedInputStream15);
        org.junit.Assert.assertNotNull(inputStream18);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
    }

    @Test
    public void test3091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3091");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.nio.charset.Charset charset6 = null;
        java.util.List<java.lang.String> strList7 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset6);
        java.nio.charset.Charset charset8 = null;
        org.apache.commons.io.LineIterator lineIterator9 = org.apache.commons.io.IOUtils.lineIterator(inputStream1, charset8);
        java.io.InputStream inputStream11 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, 6);
        org.apache.commons.io.IOUtils.closeQuietly(inputStream11);
        java.io.OutputStream outputStream13 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long16 = org.apache.commons.io.IOUtils.copyLarge(inputStream11, outputStream13, 1L, (long) (-1));
            org.junit.Assert.fail("Expected exception of type java.io.EOFException; message: Bytes to skip: 1 actual: 0");
        } catch (java.io.EOFException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertNotNull(lineIterator9);
        org.junit.Assert.assertNotNull(inputStream11);
    }

    @Test
    public void test3092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3092");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream("\n");
        byte[] byteArray3 = org.apache.commons.io.IOUtils.readFully(inputStream1, 0);
        org.apache.commons.io.IOUtils.closeQuietly(inputStream1);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
    }

    @Test
    public void test3093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3093");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream3 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1);
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream3);
        java.io.InputStream inputStream6 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream3, (int) (short) 1);
        java.io.BufferedInputStream bufferedInputStream7 = org.apache.commons.io.IOUtils.buffer(inputStream3);
        java.io.InputStream inputStream9 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream10 = null;
        java.io.InputStream inputStream13 = null;
        byte[] byteArray15 = org.apache.commons.io.IOUtils.toByteArray("");
        int int16 = org.apache.commons.io.IOUtils.read(inputStream13, byteArray15);
        long long17 = org.apache.commons.io.IOUtils.copyLarge(inputStream9, outputStream10, 0L, 0L, byteArray15);
        java.io.Writer writer18 = null;
        org.apache.commons.io.IOUtils.copy(inputStream9, writer18);
        java.util.List<java.lang.String> strList20 = org.apache.commons.io.IOUtils.readLines(inputStream9);
        java.io.InputStream inputStream22 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream9, 4);
        java.io.BufferedInputStream bufferedInputStream23 = org.apache.commons.io.IOUtils.buffer(inputStream9);
        java.io.BufferedInputStream bufferedInputStream24 = org.apache.commons.io.IOUtils.buffer((java.io.InputStream) bufferedInputStream23);
        boolean boolean25 = org.apache.commons.io.IOUtils.contentEquals(inputStream3, (java.io.InputStream) bufferedInputStream23);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.LineIterator lineIterator27 = org.apache.commons.io.IOUtils.lineIterator((java.io.InputStream) bufferedInputStream23, "");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream3);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(inputStream6);
        org.junit.Assert.assertNotNull(bufferedInputStream7);
        org.junit.Assert.assertNotNull(inputStream9);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(strList20);
        org.junit.Assert.assertNotNull(inputStream22);
        org.junit.Assert.assertNotNull(bufferedInputStream23);
        org.junit.Assert.assertNotNull(bufferedInputStream24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
    }

    @Test
    public void test3094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3094");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream5 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray("");
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray10);
        long long12 = org.apache.commons.io.IOUtils.copyLarge(inputStream4, outputStream5, 0L, 0L, byteArray10);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, byteArray10);
        java.io.BufferedInputStream bufferedInputStream15 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer16 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer16);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        char[] charArray19 = org.apache.commons.io.IOUtils.toCharArray(inputStream1);
        int int20 = org.apache.commons.io.IOUtils.length(charArray19);
        java.io.Writer writer21 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray19, writer21);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream15);
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    }

    @Test
    public void test3095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3095");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.nio.charset.Charset charset6 = null;
        java.util.List<java.lang.String> strList7 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset6);
        java.nio.charset.Charset charset8 = null;
        org.apache.commons.io.LineIterator lineIterator9 = org.apache.commons.io.IOUtils.lineIterator(inputStream1, charset8);
        java.io.InputStream inputStream11 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, 6);
        java.io.InputStream inputStream13 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray14 = new byte[] {};
        int int15 = org.apache.commons.io.IOUtils.length(byteArray14);
        int int16 = org.apache.commons.io.IOUtils.read(inputStream13, byteArray14);
        byte[] byteArray17 = org.apache.commons.io.IOUtils.toByteArray(inputStream13);
        byte[] byteArray18 = org.apache.commons.io.IOUtils.toByteArray(inputStream13);
        int int21 = org.apache.commons.io.IOUtils.read(inputStream11, byteArray18, (int) '#', 0);
        java.nio.charset.Charset charset22 = null;
        java.util.List<java.lang.String> strList23 = org.apache.commons.io.IOUtils.readLines(inputStream11, charset22);
        java.io.OutputStream outputStream25 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList23, "", outputStream25);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertNotNull(lineIterator9);
        org.junit.Assert.assertNotNull(inputStream11);
        org.junit.Assert.assertNotNull(inputStream13);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(strList23);
    }

    @Test
    public void test3096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3096");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream5 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray("");
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray10);
        long long12 = org.apache.commons.io.IOUtils.copyLarge(inputStream4, outputStream5, 0L, 0L, byteArray10);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, byteArray10);
        java.io.BufferedInputStream bufferedInputStream15 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.nio.charset.Charset charset16 = null;
        java.util.List<java.lang.String> strList17 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset16);
        byte[] byteArray18 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray18, (int) '4', (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"b\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream15);
        org.junit.Assert.assertNotNull(strList17);
    }

    @Test
    public void test3097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3097");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream5 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray("");
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray10);
        long long12 = org.apache.commons.io.IOUtils.copyLarge(inputStream4, outputStream5, 0L, 0L, byteArray10);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, byteArray10);
        java.io.BufferedInputStream bufferedInputStream15 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer16 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer16);
        byte[] byteArray23 = new byte[] { (byte) 10, (byte) 1, (byte) 0, (byte) 100, (byte) 0 };
        int int24 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray23);
        java.io.InputStream inputStream25 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1);
        byte[] byteArray26 = org.apache.commons.io.IOUtils.toByteArray(inputStream25);
        java.io.OutputStream outputStream27 = null;
        long long28 = org.apache.commons.io.IOUtils.copyLarge(inputStream25, outputStream27);
        java.lang.String str29 = org.apache.commons.io.IOUtils.toString(inputStream25);
        java.io.OutputStream outputStream30 = null;
        int int31 = org.apache.commons.io.IOUtils.copy(inputStream25, outputStream30);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream15);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[10, 1, 0, 100, 0]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(inputStream25);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
    }

    @Test
    public void test3098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3098");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        java.nio.charset.Charset charset10 = null;
        java.util.List<java.lang.String> strList11 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset10);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.nio.charset.Charset charset13 = null;
        java.lang.String str14 = org.apache.commons.io.IOUtils.toString(inputStream1, charset13);
        java.io.Writer writer15 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer15);
        byte[] byteArray18 = org.apache.commons.io.IOUtils.toByteArray(inputStream1, (int) (short) 0);
        java.lang.String str19 = org.apache.commons.io.IOUtils.toString(byteArray18);
        java.io.OutputStream outputStream20 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray18, outputStream20);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
    }

    @Test
    public void test3099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3099");
        java.io.Closeable closeable0 = null;
        java.io.Closeable[] closeableArray1 = new java.io.Closeable[] { closeable0 };
        org.apache.commons.io.IOUtils.closeQuietly(closeableArray1);
        org.apache.commons.io.IOUtils.closeQuietly(closeableArray1);
        org.apache.commons.io.IOUtils.closeQuietly(closeableArray1);
        int int5 = org.apache.commons.io.IOUtils.length((java.lang.Object[]) closeableArray1);
        org.apache.commons.io.IOUtils.closeQuietly(closeableArray1);
        int int7 = org.apache.commons.io.IOUtils.length((java.lang.Object[]) closeableArray1);
        org.apache.commons.io.IOUtils.closeQuietly(closeableArray1);
        org.junit.Assert.assertNotNull(closeableArray1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
    }

    @Test
    public void test3100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3100");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        java.io.OutputStream outputStream10 = null;
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream10, (long) (short) 0, (-1L));
        char[] charArray14 = org.apache.commons.io.IOUtils.toCharArray(inputStream1);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream17 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray18 = new byte[] {};
        int int19 = org.apache.commons.io.IOUtils.length(byteArray18);
        int int20 = org.apache.commons.io.IOUtils.read(inputStream17, byteArray18);
        byte[] byteArray21 = org.apache.commons.io.IOUtils.toByteArray(inputStream17);
        byte[] byteArray23 = org.apache.commons.io.IOUtils.toByteArray(inputStream17, (int) (short) 0);
        java.io.BufferedInputStream bufferedInputStream24 = org.apache.commons.io.IOUtils.buffer(inputStream17);
        byte[] byteArray25 = org.apache.commons.io.IOUtils.toByteArray((java.io.InputStream) bufferedInputStream24);
        int int26 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray25);
        java.util.List<java.lang.String> strList27 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.OutputStream outputStream28 = null;
        long long29 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream28);
        java.io.OutputStream outputStream30 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long33 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream30, 10L, (long) 10);
            org.junit.Assert.fail("Expected exception of type java.io.EOFException; message: Bytes to skip: 10 actual: 0");
        } catch (java.io.EOFException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[]");
        org.junit.Assert.assertNotNull(inputStream17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(strList27);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
    }

    @Test
    public void test3101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3101");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        byte[] byteArray11 = org.apache.commons.io.IOUtils.toByteArray(inputStream1, (long) 0);
        char[] charArray12 = org.apache.commons.io.IOUtils.toCharArray(inputStream1);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray12), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray12), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray12), "[]");
    }

    @Test
    public void test3102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3102");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        byte[] byteArray3 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        byte[] byteArray4 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.io.Writer writer5 = null;
        java.nio.charset.Charset charset6 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer5, charset6);
        char[] charArray8 = org.apache.commons.io.IOUtils.toCharArray(inputStream1);
        java.io.OutputStream outputStream9 = null;
        java.io.InputStream inputStream11 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray12 = org.apache.commons.io.IOUtils.toByteArray(inputStream11);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream11);
        java.util.List<java.lang.String> strList14 = org.apache.commons.io.IOUtils.readLines(inputStream11);
        java.io.OutputStream outputStream15 = null;
        long long16 = org.apache.commons.io.IOUtils.copyLarge(inputStream11, outputStream15);
        java.io.OutputStream outputStream17 = null;
        java.io.InputStream inputStream21 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray22 = new byte[] {};
        int int23 = org.apache.commons.io.IOUtils.length(byteArray22);
        int int24 = org.apache.commons.io.IOUtils.read(inputStream21, byteArray22);
        long long25 = org.apache.commons.io.IOUtils.copyLarge(inputStream11, outputStream17, (-1L), 1L, byteArray22);
        java.io.OutputStream outputStream26 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray22, outputStream26);
        long long28 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream9, byteArray22);
        java.util.List<java.lang.String> strList29 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[]");
        org.junit.Assert.assertNotNull(inputStream11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertNotNull(strList14);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(inputStream21);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertNotNull(strList29);
    }

    @Test
    public void test3103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3103");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        java.io.Writer writer5 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer5);
        java.nio.charset.Charset charset7 = null;
        char[] charArray8 = org.apache.commons.io.IOUtils.toCharArray(inputStream1, charset7);
        java.io.Writer writer9 = null;
        java.nio.charset.Charset charset10 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer9, charset10);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[]");
    }

    @Test
    public void test3104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3104");
        java.io.Reader reader0 = null;
        java.io.InputStream inputStream2 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray3 = org.apache.commons.io.IOUtils.toByteArray(inputStream2);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream2);
        java.util.List<java.lang.String> strList5 = org.apache.commons.io.IOUtils.readLines(inputStream2);
        java.io.BufferedInputStream bufferedInputStream6 = org.apache.commons.io.IOUtils.buffer(inputStream2);
        java.io.OutputStream outputStream7 = null;
        long long8 = org.apache.commons.io.IOUtils.copyLarge(inputStream2, outputStream7);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream2);
        java.io.InputStream inputStream10 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream2);
        char[] charArray11 = org.apache.commons.io.IOUtils.toCharArray(inputStream2);
        int int12 = org.apache.commons.io.IOUtils.length(charArray11);
        // The following exception was thrown during execution in test generation
        try {
            int int15 = org.apache.commons.io.IOUtils.read(reader0, charArray11, (int) (short) 0, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[], int, int)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertNotNull(strList5);
        org.junit.Assert.assertNotNull(bufferedInputStream6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(inputStream10);
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test3105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3105");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.BufferedInputStream bufferedInputStream3 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) ' ');
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer4 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer4);
        java.nio.charset.Charset charset6 = null;
        char[] charArray7 = org.apache.commons.io.IOUtils.toCharArray(inputStream1, charset6);
        java.io.InputStream inputStream9 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream10 = null;
        java.io.InputStream inputStream13 = null;
        byte[] byteArray15 = org.apache.commons.io.IOUtils.toByteArray("");
        int int16 = org.apache.commons.io.IOUtils.read(inputStream13, byteArray15);
        long long17 = org.apache.commons.io.IOUtils.copyLarge(inputStream9, outputStream10, 0L, 0L, byteArray15);
        java.io.OutputStream outputStream18 = null;
        long long21 = org.apache.commons.io.IOUtils.copyLarge(inputStream9, outputStream18, (long) (short) 0, (-1L));
        char[] charArray22 = org.apache.commons.io.IOUtils.toCharArray(inputStream9);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream9);
        java.io.Writer writer24 = null;
        org.apache.commons.io.IOUtils.copy(inputStream9, writer24);
        org.apache.commons.io.function.IOConsumer<java.io.IOException> iOExceptionIOConsumer26 = null;
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream9, iOExceptionIOConsumer26);
        java.io.OutputStream outputStream28 = null;
        java.io.InputStream inputStream30 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream31 = null;
        java.io.InputStream inputStream33 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream34 = null;
        java.io.InputStream inputStream37 = null;
        byte[] byteArray39 = org.apache.commons.io.IOUtils.toByteArray("");
        int int40 = org.apache.commons.io.IOUtils.read(inputStream37, byteArray39);
        long long41 = org.apache.commons.io.IOUtils.copyLarge(inputStream33, outputStream34, 0L, 0L, byteArray39);
        long long42 = org.apache.commons.io.IOUtils.copyLarge(inputStream30, outputStream31, byteArray39);
        java.io.BufferedInputStream bufferedInputStream44 = org.apache.commons.io.IOUtils.buffer(inputStream30, (int) (byte) 10);
        java.nio.charset.Charset charset45 = null;
        java.util.List<java.lang.String> strList46 = org.apache.commons.io.IOUtils.readLines(inputStream30, charset45);
        java.io.OutputStream outputStream47 = null;
        long long50 = org.apache.commons.io.IOUtils.copyLarge(inputStream30, outputStream47, 0L, (long) 0);
        java.io.BufferedInputStream bufferedInputStream51 = org.apache.commons.io.IOUtils.buffer(inputStream30);
        java.io.BufferedInputStream bufferedInputStream52 = org.apache.commons.io.IOUtils.buffer(inputStream30);
        java.io.InputStream inputStream54 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream54);
        java.io.InputStream inputStream56 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream54);
        java.lang.String str57 = org.apache.commons.io.IOUtils.toString(inputStream54);
        java.io.InputStream inputStream58 = null;
        byte[] byteArray60 = org.apache.commons.io.IOUtils.toByteArray("");
        int int61 = org.apache.commons.io.IOUtils.read(inputStream58, byteArray60);
        org.apache.commons.io.IOUtils.readFully(inputStream54, byteArray60);
        org.apache.commons.io.IOUtils.readFully((java.io.InputStream) bufferedInputStream52, byteArray60);
        java.io.OutputStream outputStream64 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray60, outputStream64);
        long long66 = org.apache.commons.io.IOUtils.copyLarge(inputStream9, outputStream28, byteArray60);
        java.io.InputStream inputStream67 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream9);
        boolean boolean68 = org.apache.commons.io.IOUtils.contentEquals(inputStream1, inputStream9);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.LineIterator lineIterator70 = org.apache.commons.io.IOUtils.lineIterator(inputStream9, "\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ?");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(bufferedInputStream3);
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[]");
        org.junit.Assert.assertNotNull(inputStream9);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray22), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray22), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray22), "[]");
        org.junit.Assert.assertNotNull(inputStream30);
        org.junit.Assert.assertNotNull(inputStream33);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream44);
        org.junit.Assert.assertNotNull(strList46);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream51);
        org.junit.Assert.assertNotNull(bufferedInputStream52);
        org.junit.Assert.assertNotNull(inputStream54);
        org.junit.Assert.assertNotNull(inputStream56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 0L + "'", long66 == 0L);
        org.junit.Assert.assertNotNull(inputStream67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
    }

    @Test
    public void test3106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3106");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.util.List<java.lang.String> strList4 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.OutputStream outputStream5 = null;
        long long6 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream5);
        java.io.Writer writer7 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer7);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream11 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray12 = new byte[] {};
        int int13 = org.apache.commons.io.IOUtils.length(byteArray12);
        int int14 = org.apache.commons.io.IOUtils.read(inputStream11, byteArray12);
        byte[] byteArray15 = org.apache.commons.io.IOUtils.toByteArray(inputStream11);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer16 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream11, iOExceptionConsumer16);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream11);
        java.io.BufferedInputStream bufferedInputStream20 = org.apache.commons.io.IOUtils.buffer(inputStream11, (int) (byte) 10);
        java.io.InputStream inputStream22 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream11, (int) (byte) 1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer23 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream11, iOExceptionConsumer23);
        java.io.OutputStream outputStream25 = null;
        java.io.InputStream inputStream27 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray28 = new byte[] {};
        int int29 = org.apache.commons.io.IOUtils.length(byteArray28);
        int int30 = org.apache.commons.io.IOUtils.read(inputStream27, byteArray28);
        byte[] byteArray31 = org.apache.commons.io.IOUtils.toByteArray(inputStream27);
        java.io.InputStream inputStream33 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray34 = new byte[] {};
        int int35 = org.apache.commons.io.IOUtils.length(byteArray34);
        int int36 = org.apache.commons.io.IOUtils.read(inputStream33, byteArray34);
        byte[] byteArray37 = org.apache.commons.io.IOUtils.toByteArray(inputStream33);
        int int38 = org.apache.commons.io.IOUtils.length(byteArray37);
        org.apache.commons.io.IOUtils.readFully(inputStream27, byteArray37);
        long long40 = org.apache.commons.io.IOUtils.copyLarge(inputStream11, outputStream25, byteArray37);
        boolean boolean41 = org.apache.commons.io.IOUtils.contentEquals(inputStream1, inputStream11);
        java.io.BufferedInputStream bufferedInputStream42 = org.apache.commons.io.IOUtils.buffer(inputStream1);
        java.io.BufferedInputStream bufferedInputStream44 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (short) 100);
        java.io.InputStream inputStream46 = org.apache.commons.io.IOUtils.toBufferedInputStream((java.io.InputStream) bufferedInputStream44, 6);
        byte[] byteArray48 = org.apache.commons.io.IOUtils.readFully((java.io.InputStream) bufferedInputStream44, 0);
        java.lang.String str49 = org.apache.commons.io.IOUtils.toString((java.io.InputStream) bufferedInputStream44);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str51 = org.apache.commons.io.IOUtils.toString((java.io.InputStream) bufferedInputStream44, "hi!");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: hi!");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(inputStream11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream20);
        org.junit.Assert.assertNotNull(inputStream22);
        org.junit.Assert.assertNotNull(inputStream27);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(inputStream33);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(bufferedInputStream42);
        org.junit.Assert.assertNotNull(bufferedInputStream44);
        org.junit.Assert.assertNotNull(inputStream46);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
    }

    @Test
    public void test3107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3107");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.util.List<java.lang.String> strList4 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.OutputStream outputStream5 = null;
        long long6 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream5);
        java.io.Writer writer7 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer7);
        java.io.Writer writer9 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer9);
        java.io.InputStream inputStream12 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, (int) (short) 100);
        java.util.List<java.lang.String> strList13 = org.apache.commons.io.IOUtils.readLines(inputStream12);
        java.io.OutputStream outputStream15 = null;
        java.nio.charset.Charset charset16 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList13, "", outputStream15, charset16);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(inputStream12);
        org.junit.Assert.assertNotNull(strList13);
    }

    @Test
    public void test3108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3108");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        java.io.OutputStream outputStream10 = null;
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream10, (long) (short) 0, (-1L));
        java.lang.String str14 = org.apache.commons.io.IOUtils.toString(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly(inputStream1);
        java.io.Writer writer16 = null;
        java.nio.charset.Charset charset17 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer16, charset17);
        byte[] byteArray20 = org.apache.commons.io.IOUtils.toByteArray(inputStream1, (long) (short) 0);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
    }

    @Test
    public void test3109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3109");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.io.InputStream inputStream7 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, (int) (byte) 0);
        java.io.Writer writer8 = null;
        org.apache.commons.io.IOUtils.copy(inputStream7, writer8);
        org.apache.commons.io.IOUtils.closeQuietly(inputStream7);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(inputStream7);
    }

    @Test
    public void test3110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3110");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.util.List<java.lang.String> strList4 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.OutputStream outputStream5 = null;
        long long8 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream5, (long) 0, 0L);
        java.lang.Class<?> wildcardClass9 = inputStream1.getClass();
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test3111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3111");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.List<java.lang.String> strList3 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        long long5 = org.apache.commons.io.IOUtils.skip(inputStream1, (long) '/');
        java.nio.charset.Charset charset6 = null;
        java.lang.String str7 = org.apache.commons.io.IOUtils.toString(inputStream1, charset6);
        byte[] byteArray8 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.io.InputStream inputStream9 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1);
        java.io.OutputStream outputStream10 = null;
        int int11 = org.apache.commons.io.IOUtils.copy(inputStream1, outputStream10);
        java.io.OutputStream outputStream12 = null;
        java.io.InputStream inputStream14 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream15 = null;
        java.io.InputStream inputStream17 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream18 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray23 = org.apache.commons.io.IOUtils.toByteArray("");
        int int24 = org.apache.commons.io.IOUtils.read(inputStream21, byteArray23);
        long long25 = org.apache.commons.io.IOUtils.copyLarge(inputStream17, outputStream18, 0L, 0L, byteArray23);
        long long26 = org.apache.commons.io.IOUtils.copyLarge(inputStream14, outputStream15, byteArray23);
        java.io.BufferedInputStream bufferedInputStream28 = org.apache.commons.io.IOUtils.buffer(inputStream14, (int) (byte) 10);
        byte[] byteArray29 = org.apache.commons.io.IOUtils.toByteArray((java.io.InputStream) bufferedInputStream28);
        java.io.InputStream inputStream30 = null;
        java.io.OutputStream outputStream31 = null;
        byte[] byteArray34 = new byte[] {};
        int int35 = org.apache.commons.io.IOUtils.length(byteArray34);
        java.io.OutputStream outputStream36 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray34, outputStream36);
        long long38 = org.apache.commons.io.IOUtils.copyLarge(inputStream30, outputStream31, 0L, (long) (byte) -1, byteArray34);
        java.io.OutputStream outputStream39 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray34, outputStream39);
        int int41 = org.apache.commons.io.IOUtils.length(byteArray34);
        org.apache.commons.io.IOUtils.readFully((java.io.InputStream) bufferedInputStream28, byteArray34);
        int int43 = org.apache.commons.io.IOUtils.length(byteArray34);
        long long44 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream12, byteArray34);
        java.io.InputStream inputStream46 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, 6);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(strList3);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(inputStream9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(inputStream14);
        org.junit.Assert.assertNotNull(inputStream17);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream28);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertNotNull(inputStream46);
    }

    @Test
    public void test3112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3112");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream5 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray("");
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray10);
        long long12 = org.apache.commons.io.IOUtils.copyLarge(inputStream4, outputStream5, 0L, 0L, byteArray10);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, byteArray10);
        java.io.BufferedInputStream bufferedInputStream15 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        org.apache.commons.io.IOUtils.closeQuietly(inputStream1);
        java.nio.charset.Charset charset17 = null;
        java.util.List<java.lang.String> strList18 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset17);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.nio.charset.Charset charset20 = null;
        java.lang.String str21 = org.apache.commons.io.IOUtils.toString(inputStream1, charset20);
        java.io.BufferedInputStream bufferedInputStream23 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) 'a');
        java.io.InputStream inputStream24 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream15);
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(bufferedInputStream23);
        org.junit.Assert.assertNotNull(inputStream24);
    }

    @Test
    public void test3113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3113");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream5 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray("");
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray10);
        long long12 = org.apache.commons.io.IOUtils.copyLarge(inputStream4, outputStream5, 0L, 0L, byteArray10);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, byteArray10);
        java.io.BufferedInputStream bufferedInputStream15 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        byte[] byteArray16 = org.apache.commons.io.IOUtils.toByteArray((java.io.InputStream) bufferedInputStream15);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) bufferedInputStream15);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) bufferedInputStream15);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) bufferedInputStream15);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream15);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
    }

    @Test
    public void test3114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3114");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        org.apache.commons.io.IOUtils.closeQuietly(inputStream1);
        java.io.InputStream inputStream7 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray8 = new byte[] {};
        int int9 = org.apache.commons.io.IOUtils.length(byteArray8);
        int int10 = org.apache.commons.io.IOUtils.read(inputStream7, byteArray8);
        java.lang.String str11 = org.apache.commons.io.IOUtils.toString(byteArray8);
        int int14 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray8, (int) (byte) 10, (int) (short) 0);
        java.io.OutputStream outputStream15 = null;
        long long17 = org.apache.commons.io.IOUtils.copy(inputStream1, outputStream15, (int) (byte) 100);
        long long19 = org.apache.commons.io.IOUtils.skip(inputStream1, 0L);
        java.io.Writer writer20 = null;
        java.nio.charset.Charset charset21 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer20, charset21);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(inputStream7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
    }

    @Test
    public void test3115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3115");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        java.io.OutputStream outputStream10 = null;
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream10, (long) (short) 0, (-1L));
        char[] charArray14 = org.apache.commons.io.IOUtils.toCharArray(inputStream1);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.OutputStream outputStream16 = null;
        java.io.InputStream inputStream18 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray19 = org.apache.commons.io.IOUtils.toByteArray(inputStream18);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream18);
        java.io.InputStream inputStream22 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream23 = null;
        java.io.InputStream inputStream26 = null;
        byte[] byteArray28 = org.apache.commons.io.IOUtils.toByteArray("");
        int int29 = org.apache.commons.io.IOUtils.read(inputStream26, byteArray28);
        long long30 = org.apache.commons.io.IOUtils.copyLarge(inputStream22, outputStream23, 0L, 0L, byteArray28);
        java.nio.charset.Charset charset31 = null;
        java.util.List<java.lang.String> strList32 = org.apache.commons.io.IOUtils.readLines(inputStream22, charset31);
        java.io.InputStream inputStream34 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream35 = null;
        java.io.InputStream inputStream38 = null;
        byte[] byteArray40 = org.apache.commons.io.IOUtils.toByteArray("");
        int int41 = org.apache.commons.io.IOUtils.read(inputStream38, byteArray40);
        long long42 = org.apache.commons.io.IOUtils.copyLarge(inputStream34, outputStream35, 0L, 0L, byteArray40);
        java.nio.charset.Charset charset43 = null;
        java.util.List<java.lang.String> strList44 = org.apache.commons.io.IOUtils.readLines(inputStream34, charset43);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream34);
        boolean boolean46 = org.apache.commons.io.IOUtils.contentEquals(inputStream22, inputStream34);
        java.io.OutputStream outputStream47 = null;
        java.io.InputStream inputStream49 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream50 = null;
        java.io.InputStream inputStream53 = null;
        byte[] byteArray55 = org.apache.commons.io.IOUtils.toByteArray("");
        int int56 = org.apache.commons.io.IOUtils.read(inputStream53, byteArray55);
        long long57 = org.apache.commons.io.IOUtils.copyLarge(inputStream49, outputStream50, 0L, 0L, byteArray55);
        long long58 = org.apache.commons.io.IOUtils.copyLarge(inputStream34, outputStream47, byteArray55);
        org.apache.commons.io.IOUtils.readFully(inputStream18, byteArray55);
        java.lang.String str60 = org.apache.commons.io.IOUtils.toString(byteArray55);
        long long61 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream16, byteArray55);
        java.nio.charset.Charset charset62 = null;
        java.util.List<java.lang.String> strList63 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset62);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[]");
        org.junit.Assert.assertNotNull(inputStream18);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertNotNull(inputStream22);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(strList32);
        org.junit.Assert.assertNotNull(inputStream34);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(strList44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(inputStream49);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 0L + "'", long58 == 0L);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
        org.junit.Assert.assertNotNull(strList63);
    }

    @Test
    public void test3116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3116");
        java.io.InputStream inputStream0 = null;
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream0, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.InputStream.read(byte[], int, int)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test3117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3117");
        java.io.Reader reader0 = null;
        java.io.Reader reader1 = null;
        java.io.Reader reader2 = null;
        char[] charArray3 = new char[] {};
        int int4 = org.apache.commons.io.IOUtils.length(charArray3);
        java.io.Writer writer5 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray3, writer5);
        int int7 = org.apache.commons.io.IOUtils.length(charArray3);
        java.io.Writer writer8 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray3, writer8);
        int int10 = org.apache.commons.io.IOUtils.length(charArray3);
        int int11 = org.apache.commons.io.IOUtils.read(reader2, charArray3);
        int int12 = org.apache.commons.io.IOUtils.read(reader1, charArray3);
        org.apache.commons.io.IOUtils.readFully(reader0, charArray3);
        java.lang.Class<?> wildcardClass14 = charArray3.getClass();
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray3), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray3), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray3), "[]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test3118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3118");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        java.io.Writer writer10 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer10);
        java.util.List<java.lang.String> strList12 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.InputStream inputStream13 = null;
        java.io.OutputStream outputStream14 = null;
        byte[] byteArray17 = new byte[] {};
        int int18 = org.apache.commons.io.IOUtils.length(byteArray17);
        java.io.OutputStream outputStream19 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray17, outputStream19);
        long long21 = org.apache.commons.io.IOUtils.copyLarge(inputStream13, outputStream14, 0L, (long) (byte) -1, byteArray17);
        java.io.OutputStream outputStream22 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray17, outputStream22);
        int int24 = org.apache.commons.io.IOUtils.length(byteArray17);
        java.io.OutputStream outputStream25 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray17, outputStream25);
        int int27 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray17);
        java.io.OutputStream outputStream28 = null;
        java.io.InputStream inputStream30 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray31 = new byte[] {};
        int int32 = org.apache.commons.io.IOUtils.length(byteArray31);
        int int33 = org.apache.commons.io.IOUtils.read(inputStream30, byteArray31);
        byte[] byteArray34 = org.apache.commons.io.IOUtils.toByteArray(inputStream30);
        byte[] byteArray36 = org.apache.commons.io.IOUtils.toByteArray(inputStream30, (int) (short) 0);
        long long38 = org.apache.commons.io.IOUtils.skip(inputStream30, 100L);
        java.io.InputStream inputStream39 = null;
        java.io.InputStream inputStream40 = null;
        java.io.OutputStream outputStream41 = null;
        byte[] byteArray44 = new byte[] {};
        int int45 = org.apache.commons.io.IOUtils.length(byteArray44);
        java.io.OutputStream outputStream46 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray44, outputStream46);
        long long48 = org.apache.commons.io.IOUtils.copyLarge(inputStream40, outputStream41, 0L, (long) (byte) -1, byteArray44);
        java.io.OutputStream outputStream49 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray44, outputStream49);
        org.apache.commons.io.IOUtils.readFully(inputStream39, byteArray44);
        int int52 = org.apache.commons.io.IOUtils.read(inputStream30, byteArray44);
        java.io.OutputStream outputStream53 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray44, outputStream53);
        java.lang.String str55 = org.apache.commons.io.IOUtils.toString(byteArray44);
        long long56 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream28, byteArray44);
        java.io.OutputStream outputStream57 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray44, outputStream57);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(strList12);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(inputStream30);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
    }

    @Test
    public void test3119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3119");
        java.io.Reader reader0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.BufferedReader bufferedReader2 = org.apache.commons.io.IOUtils.toBufferedReader(reader0, 5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test3120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3120");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.List<java.lang.String> strList3 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        long long5 = org.apache.commons.io.IOUtils.skip(inputStream1, (long) '/');
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str7 = org.apache.commons.io.IOUtils.toString(inputStream1, "hi!");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: hi!");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(strList3);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
    }

    @Test
    public void test3121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3121");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.BufferedInputStream bufferedInputStream10 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.io.InputStream inputStream12 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, (int) (byte) 1);
        java.io.OutputStream outputStream13 = null;
        int int14 = org.apache.commons.io.IOUtils.copy(inputStream12, outputStream13);
        java.io.BufferedInputStream bufferedInputStream16 = org.apache.commons.io.IOUtils.buffer(inputStream12, (int) (byte) 10);
        char[] charArray17 = org.apache.commons.io.IOUtils.toCharArray((java.io.InputStream) bufferedInputStream16);
        java.nio.charset.Charset charset18 = null;
        java.util.List<java.lang.String> strList19 = org.apache.commons.io.IOUtils.readLines((java.io.InputStream) bufferedInputStream16, charset18);
        java.io.OutputStream outputStream21 = null;
        java.nio.charset.Charset charset22 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList19, "\r\n", outputStream21, charset22);
        java.io.OutputStream outputStream25 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList19, "", outputStream25, "\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ?");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream10);
        org.junit.Assert.assertNotNull(inputStream12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(bufferedInputStream16);
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[]");
        org.junit.Assert.assertNotNull(strList19);
    }

    @Test
    public void test3122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3122");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly(inputStream1);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.nio.charset.Charset charset11 = null;
        org.apache.commons.io.LineIterator lineIterator12 = org.apache.commons.io.IOUtils.lineIterator(inputStream1, charset11);
        java.nio.charset.Charset charset13 = null;
        java.util.List<java.lang.String> strList14 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset13);
        java.io.OutputStream outputStream16 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList14, "", outputStream16);
        java.io.Writer writer19 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList14, "\n", writer19);
        java.io.OutputStream outputStream22 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList14, "\n", outputStream22, "\r\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ??");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(lineIterator12);
        org.junit.Assert.assertNotNull(strList14);
    }

    @Test
    public void test3123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3123");
        java.io.Reader reader0 = null;
        java.io.Reader reader1 = null;
        java.io.Reader reader2 = null;
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream4);
        java.io.InputStream inputStream7 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray8 = new byte[] {};
        int int9 = org.apache.commons.io.IOUtils.length(byteArray8);
        int int10 = org.apache.commons.io.IOUtils.read(inputStream7, byteArray8);
        byte[] byteArray11 = org.apache.commons.io.IOUtils.toByteArray(inputStream7);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer12 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream7, iOExceptionConsumer12);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream7);
        java.io.BufferedInputStream bufferedInputStream16 = org.apache.commons.io.IOUtils.buffer(inputStream7, (int) (byte) 10);
        boolean boolean17 = org.apache.commons.io.IOUtils.contentEquals(inputStream4, inputStream7);
        java.io.OutputStream outputStream18 = null;
        long long21 = org.apache.commons.io.IOUtils.copyLarge(inputStream4, outputStream18, (long) (short) 0, (long) 2);
        char[] charArray22 = org.apache.commons.io.IOUtils.toCharArray(inputStream4);
        int int25 = org.apache.commons.io.IOUtils.read(reader2, charArray22, (int) 'a', 0);
        org.apache.commons.io.IOUtils.readFully(reader1, charArray22);
        int int27 = org.apache.commons.io.IOUtils.read(reader0, charArray22);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(inputStream7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray22), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray22), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray22), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
    }

    @Test
    public void test3124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3124");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream("\n");
        byte[] byteArray3 = org.apache.commons.io.IOUtils.toByteArray(inputStream1, (int) (byte) 0);
        java.io.InputStream inputStream5 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray6 = new byte[] {};
        int int7 = org.apache.commons.io.IOUtils.length(byteArray6);
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray6);
        byte[] byteArray9 = org.apache.commons.io.IOUtils.toByteArray(inputStream5);
        byte[] byteArray11 = org.apache.commons.io.IOUtils.toByteArray(inputStream5, (int) (short) 0);
        byte[] byteArray12 = new byte[] {};
        int int13 = org.apache.commons.io.IOUtils.length(byteArray12);
        org.apache.commons.io.IOUtils.readFully(inputStream5, byteArray12);
        org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray12);
        byte[] byteArray17 = org.apache.commons.io.IOUtils.toByteArray(inputStream1, (long) (byte) 0);
        java.io.InputStream inputStream19 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream20 = null;
        java.io.InputStream inputStream22 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream23 = null;
        java.io.InputStream inputStream26 = null;
        byte[] byteArray28 = org.apache.commons.io.IOUtils.toByteArray("");
        int int29 = org.apache.commons.io.IOUtils.read(inputStream26, byteArray28);
        long long30 = org.apache.commons.io.IOUtils.copyLarge(inputStream22, outputStream23, 0L, 0L, byteArray28);
        long long31 = org.apache.commons.io.IOUtils.copyLarge(inputStream19, outputStream20, byteArray28);
        java.io.BufferedInputStream bufferedInputStream33 = org.apache.commons.io.IOUtils.buffer(inputStream19, (int) (byte) 10);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer34 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream19, iOExceptionConsumer34);
        org.apache.commons.io.IOUtils.closeQuietly(inputStream19);
        boolean boolean37 = org.apache.commons.io.IOUtils.contentEquals(inputStream1, inputStream19);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.String> strList39 = org.apache.commons.io.IOUtils.readLines(inputStream1, "\r\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ??");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertNotNull(inputStream5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertNotNull(inputStream19);
        org.junit.Assert.assertNotNull(inputStream22);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream33);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test3125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3125");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.BufferedInputStream bufferedInputStream10 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.io.InputStream inputStream12 = org.apache.commons.io.IOUtils.toBufferedInputStream((java.io.InputStream) bufferedInputStream10, (int) '#');
        long long14 = org.apache.commons.io.IOUtils.skip(inputStream12, (long) 6);
        java.io.Writer writer15 = null;
        org.apache.commons.io.IOUtils.copy(inputStream12, writer15);
        java.io.InputStream inputStream18 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream19 = null;
        java.io.InputStream inputStream21 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream22 = null;
        java.io.InputStream inputStream25 = null;
        byte[] byteArray27 = org.apache.commons.io.IOUtils.toByteArray("");
        int int28 = org.apache.commons.io.IOUtils.read(inputStream25, byteArray27);
        long long29 = org.apache.commons.io.IOUtils.copyLarge(inputStream21, outputStream22, 0L, 0L, byteArray27);
        long long30 = org.apache.commons.io.IOUtils.copyLarge(inputStream18, outputStream19, byteArray27);
        java.io.BufferedInputStream bufferedInputStream32 = org.apache.commons.io.IOUtils.buffer(inputStream18, (int) (byte) 10);
        byte[] byteArray33 = org.apache.commons.io.IOUtils.toByteArray((java.io.InputStream) bufferedInputStream32);
        java.io.InputStream inputStream34 = null;
        java.io.OutputStream outputStream35 = null;
        byte[] byteArray38 = new byte[] {};
        int int39 = org.apache.commons.io.IOUtils.length(byteArray38);
        java.io.OutputStream outputStream40 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray38, outputStream40);
        long long42 = org.apache.commons.io.IOUtils.copyLarge(inputStream34, outputStream35, 0L, (long) (byte) -1, byteArray38);
        java.io.OutputStream outputStream43 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray38, outputStream43);
        int int45 = org.apache.commons.io.IOUtils.length(byteArray38);
        org.apache.commons.io.IOUtils.readFully((java.io.InputStream) bufferedInputStream32, byteArray38);
        int int47 = org.apache.commons.io.IOUtils.read(inputStream12, byteArray38);
        java.io.InputStream inputStream49 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream50 = null;
        java.io.InputStream inputStream52 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream53 = null;
        java.io.InputStream inputStream56 = null;
        byte[] byteArray58 = org.apache.commons.io.IOUtils.toByteArray("");
        int int59 = org.apache.commons.io.IOUtils.read(inputStream56, byteArray58);
        long long60 = org.apache.commons.io.IOUtils.copyLarge(inputStream52, outputStream53, 0L, 0L, byteArray58);
        long long61 = org.apache.commons.io.IOUtils.copyLarge(inputStream49, outputStream50, byteArray58);
        java.io.BufferedInputStream bufferedInputStream63 = org.apache.commons.io.IOUtils.buffer(inputStream49, (int) (byte) 10);
        java.nio.charset.Charset charset64 = null;
        java.util.List<java.lang.String> strList65 = org.apache.commons.io.IOUtils.readLines(inputStream49, charset64);
        java.io.OutputStream outputStream66 = null;
        long long69 = org.apache.commons.io.IOUtils.copyLarge(inputStream49, outputStream66, 0L, (long) 0);
        java.io.BufferedInputStream bufferedInputStream70 = org.apache.commons.io.IOUtils.buffer(inputStream49);
        java.io.BufferedInputStream bufferedInputStream71 = org.apache.commons.io.IOUtils.buffer(inputStream49);
        java.io.OutputStream outputStream72 = null;
        int int73 = org.apache.commons.io.IOUtils.copy(inputStream49, outputStream72);
        boolean boolean74 = org.apache.commons.io.IOUtils.contentEquals(inputStream12, inputStream49);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream10);
        org.junit.Assert.assertNotNull(inputStream12);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(inputStream18);
        org.junit.Assert.assertNotNull(inputStream21);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream32);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(inputStream49);
        org.junit.Assert.assertNotNull(inputStream52);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 0L + "'", long60 == 0L);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream63);
        org.junit.Assert.assertNotNull(strList65);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 0L + "'", long69 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream70);
        org.junit.Assert.assertNotNull(bufferedInputStream71);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
    }

    @Test
    public void test3126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3126");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream5 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray("");
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray10);
        long long12 = org.apache.commons.io.IOUtils.copyLarge(inputStream4, outputStream5, 0L, 0L, byteArray10);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, byteArray10);
        java.io.BufferedInputStream bufferedInputStream15 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.nio.charset.Charset charset16 = null;
        java.util.List<java.lang.String> strList17 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset16);
        java.io.OutputStream outputStream18 = null;
        long long21 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream18, 0L, (long) 0);
        java.io.OutputStream outputStream22 = null;
        long long25 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream22, (long) (short) -1, (long) 10);
        java.lang.String str26 = org.apache.commons.io.IOUtils.toString(inputStream1);
        java.io.Writer writer27 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.copy(inputStream1, writer27, "\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ?");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream15);
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
    }

    @Test
    public void test3127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3127");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream5 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray("");
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray10);
        long long12 = org.apache.commons.io.IOUtils.copyLarge(inputStream4, outputStream5, 0L, 0L, byteArray10);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, byteArray10);
        java.io.BufferedInputStream bufferedInputStream15 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.nio.charset.Charset charset16 = null;
        java.util.List<java.lang.String> strList17 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset16);
        java.io.InputStream inputStream19 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream20 = null;
        java.io.InputStream inputStream23 = null;
        byte[] byteArray25 = org.apache.commons.io.IOUtils.toByteArray("");
        int int26 = org.apache.commons.io.IOUtils.read(inputStream23, byteArray25);
        long long27 = org.apache.commons.io.IOUtils.copyLarge(inputStream19, outputStream20, 0L, 0L, byteArray25);
        java.io.OutputStream outputStream28 = null;
        long long31 = org.apache.commons.io.IOUtils.copyLarge(inputStream19, outputStream28, (long) (short) 0, (-1L));
        char[] charArray32 = org.apache.commons.io.IOUtils.toCharArray(inputStream19);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream19);
        java.io.InputStream inputStream35 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray36 = new byte[] {};
        int int37 = org.apache.commons.io.IOUtils.length(byteArray36);
        int int38 = org.apache.commons.io.IOUtils.read(inputStream35, byteArray36);
        byte[] byteArray39 = org.apache.commons.io.IOUtils.toByteArray(inputStream35);
        byte[] byteArray41 = org.apache.commons.io.IOUtils.toByteArray(inputStream35, (int) (short) 0);
        java.io.BufferedInputStream bufferedInputStream42 = org.apache.commons.io.IOUtils.buffer(inputStream35);
        byte[] byteArray43 = org.apache.commons.io.IOUtils.toByteArray((java.io.InputStream) bufferedInputStream42);
        int int44 = org.apache.commons.io.IOUtils.read(inputStream19, byteArray43);
        int int45 = org.apache.commons.io.IOUtils.length(byteArray43);
        org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray43);
        int int47 = org.apache.commons.io.IOUtils.length(byteArray43);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream15);
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertNotNull(inputStream19);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[]");
        org.junit.Assert.assertNotNull(inputStream35);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream42);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
    }

    @Test
    public void test3128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3128");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.util.List<java.lang.String> strList4 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.OutputStream outputStream5 = null;
        long long6 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream5);
        java.io.Writer writer7 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer7);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream11 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray12 = new byte[] {};
        int int13 = org.apache.commons.io.IOUtils.length(byteArray12);
        int int14 = org.apache.commons.io.IOUtils.read(inputStream11, byteArray12);
        byte[] byteArray15 = org.apache.commons.io.IOUtils.toByteArray(inputStream11);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer16 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream11, iOExceptionConsumer16);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream11);
        java.io.BufferedInputStream bufferedInputStream20 = org.apache.commons.io.IOUtils.buffer(inputStream11, (int) (byte) 10);
        java.io.InputStream inputStream22 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream11, (int) (byte) 1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer23 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream11, iOExceptionConsumer23);
        java.io.OutputStream outputStream25 = null;
        java.io.InputStream inputStream27 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray28 = new byte[] {};
        int int29 = org.apache.commons.io.IOUtils.length(byteArray28);
        int int30 = org.apache.commons.io.IOUtils.read(inputStream27, byteArray28);
        byte[] byteArray31 = org.apache.commons.io.IOUtils.toByteArray(inputStream27);
        java.io.InputStream inputStream33 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray34 = new byte[] {};
        int int35 = org.apache.commons.io.IOUtils.length(byteArray34);
        int int36 = org.apache.commons.io.IOUtils.read(inputStream33, byteArray34);
        byte[] byteArray37 = org.apache.commons.io.IOUtils.toByteArray(inputStream33);
        int int38 = org.apache.commons.io.IOUtils.length(byteArray37);
        org.apache.commons.io.IOUtils.readFully(inputStream27, byteArray37);
        long long40 = org.apache.commons.io.IOUtils.copyLarge(inputStream11, outputStream25, byteArray37);
        boolean boolean41 = org.apache.commons.io.IOUtils.contentEquals(inputStream1, inputStream11);
        java.io.BufferedInputStream bufferedInputStream42 = org.apache.commons.io.IOUtils.buffer(inputStream1);
        java.io.BufferedInputStream bufferedInputStream44 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (short) 100);
        java.io.InputStream inputStream46 = org.apache.commons.io.IOUtils.toBufferedInputStream((java.io.InputStream) bufferedInputStream44, 6);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray48 = org.apache.commons.io.IOUtils.toByteArray((java.io.InputStream) bufferedInputStream44, 3);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Unexpected read size. current: 0, expected: 3");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(inputStream11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream20);
        org.junit.Assert.assertNotNull(inputStream22);
        org.junit.Assert.assertNotNull(inputStream27);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(inputStream33);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(bufferedInputStream42);
        org.junit.Assert.assertNotNull(bufferedInputStream44);
        org.junit.Assert.assertNotNull(inputStream46);
    }

    @Test
    public void test3129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3129");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream5 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray("");
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray10);
        long long12 = org.apache.commons.io.IOUtils.copyLarge(inputStream4, outputStream5, 0L, 0L, byteArray10);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, byteArray10);
        java.io.BufferedInputStream bufferedInputStream15 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer16 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer16);
        byte[] byteArray23 = new byte[] { (byte) 10, (byte) 1, (byte) 0, (byte) 100, (byte) 0 };
        int int24 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray23);
        java.io.InputStream inputStream25 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1);
        java.io.BufferedInputStream bufferedInputStream26 = org.apache.commons.io.IOUtils.buffer(inputStream1);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream15);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[10, 1, 0, 100, 0]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(inputStream25);
        org.junit.Assert.assertNotNull(bufferedInputStream26);
    }

    @Test
    public void test3130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3130");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream5 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray("");
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray10);
        long long12 = org.apache.commons.io.IOUtils.copyLarge(inputStream4, outputStream5, 0L, 0L, byteArray10);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, byteArray10);
        java.io.BufferedInputStream bufferedInputStream15 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.nio.charset.Charset charset16 = null;
        java.util.List<java.lang.String> strList17 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset16);
        java.io.OutputStream outputStream18 = null;
        long long21 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream18, 0L, (long) 0);
        java.io.BufferedInputStream bufferedInputStream22 = org.apache.commons.io.IOUtils.buffer(inputStream1);
        org.apache.commons.io.function.IOConsumer<java.io.IOException> iOExceptionIOConsumer23 = null;
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1, iOExceptionIOConsumer23);
        java.nio.charset.Charset charset25 = null;
        java.lang.String str26 = org.apache.commons.io.IOUtils.toString(inputStream1, charset25);
        java.io.OutputStream outputStream27 = null;
        long long28 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream27);
        long long30 = org.apache.commons.io.IOUtils.skip(inputStream1, (long) '4');
        long long32 = org.apache.commons.io.IOUtils.skip(inputStream1, (long) 1);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream15);
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream22);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
    }

    @Test
    public void test3131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3131");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.io.InputStream inputStream7 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, (int) (byte) 0);
        java.io.InputStream inputStream9 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream9);
        byte[] byteArray11 = org.apache.commons.io.IOUtils.toByteArray(inputStream9);
        byte[] byteArray12 = org.apache.commons.io.IOUtils.toByteArray(inputStream9);
        java.io.Writer writer13 = null;
        java.nio.charset.Charset charset14 = null;
        org.apache.commons.io.IOUtils.copy(inputStream9, writer13, charset14);
        char[] charArray16 = org.apache.commons.io.IOUtils.toCharArray(inputStream9);
        java.io.OutputStream outputStream17 = null;
        java.io.InputStream inputStream19 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray20 = org.apache.commons.io.IOUtils.toByteArray(inputStream19);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream19);
        java.util.List<java.lang.String> strList22 = org.apache.commons.io.IOUtils.readLines(inputStream19);
        java.io.OutputStream outputStream23 = null;
        long long24 = org.apache.commons.io.IOUtils.copyLarge(inputStream19, outputStream23);
        java.io.OutputStream outputStream25 = null;
        java.io.InputStream inputStream29 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray30 = new byte[] {};
        int int31 = org.apache.commons.io.IOUtils.length(byteArray30);
        int int32 = org.apache.commons.io.IOUtils.read(inputStream29, byteArray30);
        long long33 = org.apache.commons.io.IOUtils.copyLarge(inputStream19, outputStream25, (-1L), 1L, byteArray30);
        java.io.OutputStream outputStream34 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray30, outputStream34);
        long long36 = org.apache.commons.io.IOUtils.copyLarge(inputStream9, outputStream17, byteArray30);
        org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray30);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(inputStream7);
        org.junit.Assert.assertNotNull(inputStream9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertNotNull(charArray16);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray16), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray16), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray16), "[]");
        org.junit.Assert.assertNotNull(inputStream19);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertNotNull(strList22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(inputStream29);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
    }

    @Test
    public void test3132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3132");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.BufferedInputStream bufferedInputStream3 = org.apache.commons.io.IOUtils.buffer(inputStream1, 100);
        java.io.BufferedInputStream bufferedInputStream4 = org.apache.commons.io.IOUtils.buffer((java.io.InputStream) bufferedInputStream3);
        java.nio.charset.Charset charset5 = null;
        java.lang.String str6 = org.apache.commons.io.IOUtils.toString((java.io.InputStream) bufferedInputStream4, charset5);
        java.io.OutputStream outputStream7 = null;
        long long10 = org.apache.commons.io.IOUtils.copyLarge((java.io.InputStream) bufferedInputStream4, outputStream7, (long) (-1), 0L);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(bufferedInputStream3);
        org.junit.Assert.assertNotNull(bufferedInputStream4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
    }

    @Test
    public void test3133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3133");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream5 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream6 = null;
        java.io.InputStream inputStream9 = null;
        byte[] byteArray11 = org.apache.commons.io.IOUtils.toByteArray("");
        int int12 = org.apache.commons.io.IOUtils.read(inputStream9, byteArray11);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream5, outputStream6, 0L, 0L, byteArray11);
        java.nio.charset.Charset charset14 = null;
        java.util.List<java.lang.String> strList15 = org.apache.commons.io.IOUtils.readLines(inputStream5, charset14);
        java.io.InputStream inputStream17 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream18 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray23 = org.apache.commons.io.IOUtils.toByteArray("");
        int int24 = org.apache.commons.io.IOUtils.read(inputStream21, byteArray23);
        long long25 = org.apache.commons.io.IOUtils.copyLarge(inputStream17, outputStream18, 0L, 0L, byteArray23);
        java.nio.charset.Charset charset26 = null;
        java.util.List<java.lang.String> strList27 = org.apache.commons.io.IOUtils.readLines(inputStream17, charset26);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream17);
        boolean boolean29 = org.apache.commons.io.IOUtils.contentEquals(inputStream5, inputStream17);
        java.io.OutputStream outputStream30 = null;
        java.io.InputStream inputStream32 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream33 = null;
        java.io.InputStream inputStream36 = null;
        byte[] byteArray38 = org.apache.commons.io.IOUtils.toByteArray("");
        int int39 = org.apache.commons.io.IOUtils.read(inputStream36, byteArray38);
        long long40 = org.apache.commons.io.IOUtils.copyLarge(inputStream32, outputStream33, 0L, 0L, byteArray38);
        long long41 = org.apache.commons.io.IOUtils.copyLarge(inputStream17, outputStream30, byteArray38);
        org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray38);
        java.io.OutputStream outputStream43 = null;
        long long44 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream43);
        java.lang.Class<?> wildcardClass45 = inputStream1.getClass();
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(inputStream5);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(strList15);
        org.junit.Assert.assertNotNull(inputStream17);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(strList27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(inputStream32);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test3134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3134");
        char[] charArray0 = new char[] {};
        java.io.Writer writer1 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray0, writer1);
        int int3 = org.apache.commons.io.IOUtils.length(charArray0);
        java.io.OutputStream outputStream4 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(charArray0, outputStream4, "\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ?");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray0);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray0), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray0), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray0), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test3135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3135");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray(inputStream1, (int) (short) 0);
        long long9 = org.apache.commons.io.IOUtils.skip(inputStream1, 100L);
        java.io.InputStream inputStream11 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray12 = new byte[] {};
        int int13 = org.apache.commons.io.IOUtils.length(byteArray12);
        int int14 = org.apache.commons.io.IOUtils.read(inputStream11, byteArray12);
        byte[] byteArray15 = org.apache.commons.io.IOUtils.toByteArray(inputStream11);
        byte[] byteArray17 = org.apache.commons.io.IOUtils.toByteArray(inputStream11, (int) (short) 0);
        org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray17);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.Writer writer20 = null;
        java.nio.charset.Charset charset21 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer20, charset21);
        java.nio.charset.Charset charset23 = null;
        org.apache.commons.io.LineIterator lineIterator24 = org.apache.commons.io.IOUtils.lineIterator(inputStream1, charset23);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(inputStream11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertNotNull(lineIterator24);
    }

    @Test
    public void test3136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3136");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream5 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray("");
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray10);
        long long12 = org.apache.commons.io.IOUtils.copyLarge(inputStream4, outputStream5, 0L, 0L, byteArray10);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, byteArray10);
        java.io.BufferedInputStream bufferedInputStream15 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.nio.charset.Charset charset16 = null;
        java.util.List<java.lang.String> strList17 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset16);
        java.io.OutputStream outputStream18 = null;
        long long21 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream18, 0L, (long) 0);
        java.io.BufferedInputStream bufferedInputStream22 = org.apache.commons.io.IOUtils.buffer(inputStream1);
        java.io.BufferedInputStream bufferedInputStream23 = org.apache.commons.io.IOUtils.buffer(inputStream1);
        java.io.OutputStream outputStream24 = null;
        int int25 = org.apache.commons.io.IOUtils.copy(inputStream1, outputStream24);
        java.io.OutputStream outputStream26 = null;
        int int27 = org.apache.commons.io.IOUtils.copy(inputStream1, outputStream26);
        java.nio.charset.Charset charset28 = null;
        org.apache.commons.io.LineIterator lineIterator29 = org.apache.commons.io.IOUtils.lineIterator(inputStream1, charset28);
        org.apache.commons.io.function.IOConsumer<java.io.IOException> iOExceptionIOConsumer30 = null;
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1, iOExceptionIOConsumer30);
        byte[] byteArray33 = org.apache.commons.io.IOUtils.toByteArray("hi!");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray33, (int) (short) 100, (int) '/');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Range [100, 100 + 47) out of bounds for length 3");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream15);
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream22);
        org.junit.Assert.assertNotNull(bufferedInputStream23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(lineIterator29);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[104, 105, 33]");
    }

    @Test
    public void test3137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3137");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        java.io.Writer writer10 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer10);
        java.io.OutputStream outputStream12 = null;
        int int13 = org.apache.commons.io.IOUtils.copy(inputStream1, outputStream12);
        java.io.InputStream inputStream14 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(inputStream14);
    }

    @Test
    public void test3138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3138");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.util.List<java.lang.String> strList4 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.OutputStream outputStream5 = null;
        long long6 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream5);
        java.io.Writer writer7 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer7);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream11 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray12 = new byte[] {};
        int int13 = org.apache.commons.io.IOUtils.length(byteArray12);
        int int14 = org.apache.commons.io.IOUtils.read(inputStream11, byteArray12);
        byte[] byteArray15 = org.apache.commons.io.IOUtils.toByteArray(inputStream11);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer16 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream11, iOExceptionConsumer16);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream11);
        java.io.BufferedInputStream bufferedInputStream20 = org.apache.commons.io.IOUtils.buffer(inputStream11, (int) (byte) 10);
        java.io.InputStream inputStream22 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream11, (int) (byte) 1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer23 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream11, iOExceptionConsumer23);
        java.io.OutputStream outputStream25 = null;
        java.io.InputStream inputStream27 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray28 = new byte[] {};
        int int29 = org.apache.commons.io.IOUtils.length(byteArray28);
        int int30 = org.apache.commons.io.IOUtils.read(inputStream27, byteArray28);
        byte[] byteArray31 = org.apache.commons.io.IOUtils.toByteArray(inputStream27);
        java.io.InputStream inputStream33 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray34 = new byte[] {};
        int int35 = org.apache.commons.io.IOUtils.length(byteArray34);
        int int36 = org.apache.commons.io.IOUtils.read(inputStream33, byteArray34);
        byte[] byteArray37 = org.apache.commons.io.IOUtils.toByteArray(inputStream33);
        int int38 = org.apache.commons.io.IOUtils.length(byteArray37);
        org.apache.commons.io.IOUtils.readFully(inputStream27, byteArray37);
        long long40 = org.apache.commons.io.IOUtils.copyLarge(inputStream11, outputStream25, byteArray37);
        boolean boolean41 = org.apache.commons.io.IOUtils.contentEquals(inputStream1, inputStream11);
        java.io.BufferedInputStream bufferedInputStream43 = org.apache.commons.io.IOUtils.buffer(inputStream1, 5);
        java.io.InputStream inputStream45 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream46 = null;
        java.io.InputStream inputStream49 = null;
        byte[] byteArray51 = org.apache.commons.io.IOUtils.toByteArray("");
        int int52 = org.apache.commons.io.IOUtils.read(inputStream49, byteArray51);
        long long53 = org.apache.commons.io.IOUtils.copyLarge(inputStream45, outputStream46, 0L, 0L, byteArray51);
        java.nio.charset.Charset charset54 = null;
        java.util.List<java.lang.String> strList55 = org.apache.commons.io.IOUtils.readLines(inputStream45, charset54);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream45);
        java.nio.charset.Charset charset57 = null;
        java.lang.String str58 = org.apache.commons.io.IOUtils.toString(inputStream45, charset57);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer59 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream45, iOExceptionConsumer59);
        boolean boolean61 = org.apache.commons.io.IOUtils.contentEquals((java.io.InputStream) bufferedInputStream43, inputStream45);
        byte[] byteArray63 = org.apache.commons.io.IOUtils.toByteArray(inputStream45, 0);
        java.io.InputStream inputStream65 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream45, 2);
        java.io.InputStream inputStream67 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream45, (int) '/');
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray69 = org.apache.commons.io.IOUtils.readFully(inputStream45, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.io.EOFException; message: Length to read: 32 actual: 0");
        } catch (java.io.EOFException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(inputStream11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream20);
        org.junit.Assert.assertNotNull(inputStream22);
        org.junit.Assert.assertNotNull(inputStream27);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(inputStream33);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(bufferedInputStream43);
        org.junit.Assert.assertNotNull(inputStream45);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertNotNull(strList55);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[]");
        org.junit.Assert.assertNotNull(inputStream65);
        org.junit.Assert.assertNotNull(inputStream67);
    }

    @Test
    public void test3139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3139");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream3 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1);
        java.lang.String str4 = org.apache.commons.io.IOUtils.toString(inputStream1);
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray7);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.IOUtils.lineIterator(inputStream1, "\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ?");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test3140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3140");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray5 = new byte[] {};
        int int6 = org.apache.commons.io.IOUtils.length(byteArray5);
        int int7 = org.apache.commons.io.IOUtils.read(inputStream4, byteArray5);
        byte[] byteArray8 = org.apache.commons.io.IOUtils.toByteArray(inputStream4);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer9 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream4, iOExceptionConsumer9);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream4);
        java.io.BufferedInputStream bufferedInputStream13 = org.apache.commons.io.IOUtils.buffer(inputStream4, (int) (byte) 10);
        boolean boolean14 = org.apache.commons.io.IOUtils.contentEquals(inputStream1, inputStream4);
        java.io.OutputStream outputStream15 = null;
        long long18 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream15, (long) (short) 0, (long) 2);
        java.io.InputStream inputStream20 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, 0);
        char[] charArray21 = org.apache.commons.io.IOUtils.toCharArray(inputStream1);
        java.nio.charset.Charset charset22 = null;
        org.apache.commons.io.LineIterator lineIterator23 = org.apache.commons.io.IOUtils.lineIterator(inputStream1, charset22);
        byte[] byteArray25 = org.apache.commons.io.IOUtils.toByteArray("");
        java.lang.String str26 = org.apache.commons.io.IOUtils.toString(byteArray25);
        java.lang.String str27 = org.apache.commons.io.IOUtils.toString(byteArray25);
        org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray25, (-1), 0);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(inputStream20);
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[]");
        org.junit.Assert.assertNotNull(lineIterator23);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
    }

    @Test
    public void test3141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3141");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.util.List<java.lang.String> strList4 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.BufferedInputStream bufferedInputStream5 = org.apache.commons.io.IOUtils.buffer(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly(inputStream1);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertNotNull(bufferedInputStream5);
    }

    @Test
    public void test3142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3142");
        java.io.Reader reader0 = null;
        java.io.Reader reader1 = null;
        char[] charArray2 = new char[] {};
        int int3 = org.apache.commons.io.IOUtils.length(charArray2);
        java.io.Writer writer4 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray2, writer4);
        int int6 = org.apache.commons.io.IOUtils.length(charArray2);
        java.io.Writer writer7 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray2, writer7);
        int int9 = org.apache.commons.io.IOUtils.length(charArray2);
        int int10 = org.apache.commons.io.IOUtils.read(reader1, charArray2);
        int int11 = org.apache.commons.io.IOUtils.length(charArray2);
        int int12 = org.apache.commons.io.IOUtils.length(charArray2);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.readFully(reader0, charArray2, 10, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[], int, int)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray2), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray2), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test3143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3143");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "\n");
        java.util.List<java.lang.String> strList2 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.OutputStream outputStream3 = null;
        java.io.InputStream inputStream5 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray6 = new byte[] {};
        int int7 = org.apache.commons.io.IOUtils.length(byteArray6);
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray6);
        byte[] byteArray9 = org.apache.commons.io.IOUtils.toByteArray(inputStream5);
        byte[] byteArray11 = org.apache.commons.io.IOUtils.toByteArray(inputStream5, (int) (short) 0);
        byte[] byteArray12 = new byte[] {};
        int int13 = org.apache.commons.io.IOUtils.length(byteArray12);
        org.apache.commons.io.IOUtils.readFully(inputStream5, byteArray12);
        java.lang.String str15 = org.apache.commons.io.IOUtils.toString(byteArray12);
        int int16 = org.apache.commons.io.IOUtils.length(byteArray12);
        long long17 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream3, byteArray12);
        java.lang.String str18 = org.apache.commons.io.IOUtils.toString(inputStream1);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(strList2);
        org.junit.Assert.assertNotNull(inputStream5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
    }

    @Test
    public void test3144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3144");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray(inputStream1, (int) (short) 0);
        long long9 = org.apache.commons.io.IOUtils.skip(inputStream1, 100L);
        java.io.InputStream inputStream10 = null;
        java.io.InputStream inputStream11 = null;
        java.io.OutputStream outputStream12 = null;
        byte[] byteArray15 = new byte[] {};
        int int16 = org.apache.commons.io.IOUtils.length(byteArray15);
        java.io.OutputStream outputStream17 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray15, outputStream17);
        long long19 = org.apache.commons.io.IOUtils.copyLarge(inputStream11, outputStream12, 0L, (long) (byte) -1, byteArray15);
        java.io.OutputStream outputStream20 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray15, outputStream20);
        org.apache.commons.io.IOUtils.readFully(inputStream10, byteArray15);
        int int23 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray15);
        int int24 = org.apache.commons.io.IOUtils.length(byteArray15);
        java.lang.String str25 = org.apache.commons.io.IOUtils.toString(byteArray15);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
    }

    @Test
    public void test3145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3145");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        java.io.OutputStream outputStream10 = null;
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream10, (long) (short) 0, (-1L));
        java.lang.String str14 = org.apache.commons.io.IOUtils.toString(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly(inputStream1);
        java.io.BufferedInputStream bufferedInputStream17 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) '\\');
        java.io.InputStream inputStream19 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray20 = org.apache.commons.io.IOUtils.toByteArray(inputStream19);
        java.io.InputStream inputStream22 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray23 = new byte[] {};
        int int24 = org.apache.commons.io.IOUtils.length(byteArray23);
        int int25 = org.apache.commons.io.IOUtils.read(inputStream22, byteArray23);
        byte[] byteArray26 = org.apache.commons.io.IOUtils.toByteArray(inputStream22);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer27 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream22, iOExceptionConsumer27);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream22);
        java.io.BufferedInputStream bufferedInputStream31 = org.apache.commons.io.IOUtils.buffer(inputStream22, (int) (byte) 10);
        boolean boolean32 = org.apache.commons.io.IOUtils.contentEquals(inputStream19, inputStream22);
        java.io.InputStream inputStream34 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray35 = new byte[] {};
        int int36 = org.apache.commons.io.IOUtils.length(byteArray35);
        int int37 = org.apache.commons.io.IOUtils.read(inputStream34, byteArray35);
        byte[] byteArray38 = org.apache.commons.io.IOUtils.toByteArray(inputStream34);
        byte[] byteArray40 = org.apache.commons.io.IOUtils.toByteArray(inputStream34, (int) (short) 0);
        long long42 = org.apache.commons.io.IOUtils.skip(inputStream34, 100L);
        java.io.InputStream inputStream43 = null;
        java.io.InputStream inputStream44 = null;
        java.io.OutputStream outputStream45 = null;
        byte[] byteArray48 = new byte[] {};
        int int49 = org.apache.commons.io.IOUtils.length(byteArray48);
        java.io.OutputStream outputStream50 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray48, outputStream50);
        long long52 = org.apache.commons.io.IOUtils.copyLarge(inputStream44, outputStream45, 0L, (long) (byte) -1, byteArray48);
        java.io.OutputStream outputStream53 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray48, outputStream53);
        org.apache.commons.io.IOUtils.readFully(inputStream43, byteArray48);
        int int56 = org.apache.commons.io.IOUtils.read(inputStream34, byteArray48);
        int int57 = org.apache.commons.io.IOUtils.read(inputStream22, byteArray48);
        java.io.OutputStream outputStream58 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray48, outputStream58);
        java.lang.String str60 = org.apache.commons.io.IOUtils.toString(byteArray48);
        org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray48);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray63 = org.apache.commons.io.IOUtils.readFully(inputStream1, 10);
            org.junit.Assert.fail("Expected exception of type java.io.EOFException; message: Length to read: 10 actual: 0");
        } catch (java.io.EOFException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(bufferedInputStream17);
        org.junit.Assert.assertNotNull(inputStream19);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertNotNull(inputStream22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(inputStream34);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
    }

    @Test
    public void test3146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3146");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        java.nio.charset.Charset charset10 = null;
        java.util.List<java.lang.String> strList11 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset10);
        java.nio.charset.Charset charset12 = null;
        char[] charArray13 = org.apache.commons.io.IOUtils.toCharArray(inputStream1, charset12);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[]");
    }

    @Test
    public void test3147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3147");
        java.io.Reader reader0 = null;
        java.io.Reader reader1 = null;
        java.io.Reader reader2 = null;
        char[] charArray3 = new char[] {};
        int int4 = org.apache.commons.io.IOUtils.length(charArray3);
        java.io.Writer writer5 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray3, writer5);
        java.io.Writer writer7 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray3, writer7);
        int int9 = org.apache.commons.io.IOUtils.read(reader2, charArray3);
        int int10 = org.apache.commons.io.IOUtils.length(charArray3);
        int int11 = org.apache.commons.io.IOUtils.read(reader1, charArray3);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.readFully(reader0, charArray3, 5, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[], int, int)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray3), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray3), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray3), "[]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test3148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3148");
        java.io.Closeable closeable0 = null;
        java.io.Closeable[] closeableArray1 = new java.io.Closeable[] { closeable0 };
        org.apache.commons.io.IOUtils.closeQuietly(closeableArray1);
        org.apache.commons.io.IOUtils.closeQuietly(closeableArray1);
        org.apache.commons.io.IOUtils.closeQuietly(closeableArray1);
        org.apache.commons.io.IOUtils.closeQuietly(closeableArray1);
        int int6 = org.apache.commons.io.IOUtils.length((java.lang.Object[]) closeableArray1);
        int int7 = org.apache.commons.io.IOUtils.length((java.lang.Object[]) closeableArray1);
        org.apache.commons.io.IOUtils.closeQuietly(closeableArray1);
        org.apache.commons.io.IOUtils.closeQuietly(closeableArray1);
        org.apache.commons.io.IOUtils.closeQuietly(closeableArray1);
        org.apache.commons.io.IOUtils.closeQuietly(closeableArray1);
        int int12 = org.apache.commons.io.IOUtils.length((java.lang.Object[]) closeableArray1);
        org.junit.Assert.assertNotNull(closeableArray1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
    }

    @Test
    public void test3149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3149");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        java.nio.charset.Charset charset10 = null;
        java.util.List<java.lang.String> strList11 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset10);
        java.io.OutputStream outputStream13 = null;
        java.nio.charset.Charset charset14 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList11, "", outputStream13, charset14);
        java.io.OutputStream outputStream17 = null;
        java.nio.charset.Charset charset18 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList11, "", outputStream17, charset18);
        java.io.Writer writer21 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList11, "\r\n", writer21);
        java.io.OutputStream outputStream24 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList11, "\r\n", outputStream24, "\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ?");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(strList11);
    }

    @Test
    public void test3150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3150");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream5 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray("");
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray10);
        long long12 = org.apache.commons.io.IOUtils.copyLarge(inputStream4, outputStream5, 0L, 0L, byteArray10);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, byteArray10);
        java.io.BufferedInputStream bufferedInputStream15 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        org.apache.commons.io.IOUtils.closeQuietly(inputStream1);
        java.io.InputStream inputStream18 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray19 = new byte[] {};
        int int20 = org.apache.commons.io.IOUtils.length(byteArray19);
        int int21 = org.apache.commons.io.IOUtils.read(inputStream18, byteArray19);
        byte[] byteArray22 = org.apache.commons.io.IOUtils.toByteArray(inputStream18);
        byte[] byteArray24 = org.apache.commons.io.IOUtils.toByteArray(inputStream18, (int) (short) 0);
        long long26 = org.apache.commons.io.IOUtils.skip(inputStream18, 100L);
        java.io.InputStream inputStream28 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray29 = new byte[] {};
        int int30 = org.apache.commons.io.IOUtils.length(byteArray29);
        int int31 = org.apache.commons.io.IOUtils.read(inputStream28, byteArray29);
        byte[] byteArray32 = org.apache.commons.io.IOUtils.toByteArray(inputStream28);
        byte[] byteArray34 = org.apache.commons.io.IOUtils.toByteArray(inputStream28, (int) (short) 0);
        org.apache.commons.io.IOUtils.readFully(inputStream18, byteArray34);
        org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray34);
        java.lang.String str37 = org.apache.commons.io.IOUtils.toString(inputStream1);
        byte[] byteArray39 = org.apache.commons.io.IOUtils.toByteArray(inputStream1, 0);
        java.io.InputStream inputStream40 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream15);
        org.junit.Assert.assertNotNull(inputStream18);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(inputStream28);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertNotNull(inputStream40);
    }

    @Test
    public void test3151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3151");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.util.List<java.lang.String> strList4 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.OutputStream outputStream5 = null;
        long long6 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream5);
        java.io.Writer writer7 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer7);
        java.io.OutputStream outputStream9 = null;
        long long10 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream9);
        java.io.OutputStream outputStream11 = null;
        java.io.InputStream inputStream13 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream14 = null;
        java.io.InputStream inputStream16 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream17 = null;
        java.io.InputStream inputStream20 = null;
        byte[] byteArray22 = org.apache.commons.io.IOUtils.toByteArray("");
        int int23 = org.apache.commons.io.IOUtils.read(inputStream20, byteArray22);
        long long24 = org.apache.commons.io.IOUtils.copyLarge(inputStream16, outputStream17, 0L, 0L, byteArray22);
        long long25 = org.apache.commons.io.IOUtils.copyLarge(inputStream13, outputStream14, byteArray22);
        java.io.BufferedInputStream bufferedInputStream27 = org.apache.commons.io.IOUtils.buffer(inputStream13, (int) (byte) 10);
        java.nio.charset.Charset charset28 = null;
        java.util.List<java.lang.String> strList29 = org.apache.commons.io.IOUtils.readLines(inputStream13, charset28);
        java.io.OutputStream outputStream30 = null;
        long long33 = org.apache.commons.io.IOUtils.copyLarge(inputStream13, outputStream30, 0L, (long) 0);
        java.nio.charset.Charset charset34 = null;
        char[] charArray35 = org.apache.commons.io.IOUtils.toCharArray(inputStream13, charset34);
        java.io.InputStream inputStream37 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream37);
        java.io.InputStream inputStream39 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream37);
        java.lang.String str40 = org.apache.commons.io.IOUtils.toString(inputStream37);
        java.io.InputStream inputStream41 = null;
        byte[] byteArray43 = org.apache.commons.io.IOUtils.toByteArray("");
        int int44 = org.apache.commons.io.IOUtils.read(inputStream41, byteArray43);
        org.apache.commons.io.IOUtils.readFully(inputStream37, byteArray43);
        int int46 = org.apache.commons.io.IOUtils.length(byteArray43);
        org.apache.commons.io.IOUtils.readFully(inputStream13, byteArray43);
        long long48 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream11, byteArray43);
        java.lang.String str49 = org.apache.commons.io.IOUtils.toString(byteArray43);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(inputStream13);
        org.junit.Assert.assertNotNull(inputStream16);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream27);
        org.junit.Assert.assertNotNull(strList29);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertNotNull(charArray35);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray35), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray35), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray35), "[]");
        org.junit.Assert.assertNotNull(inputStream37);
        org.junit.Assert.assertNotNull(inputStream39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
    }

    @Test
    public void test3152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3152");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.BufferedInputStream bufferedInputStream10 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        byte[] byteArray11 = null;
        org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray11, (int) '4', 0);
        java.util.List<java.lang.String> strList15 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.OutputStream outputStream16 = null;
        long long17 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream16);
        java.io.BufferedInputStream bufferedInputStream18 = org.apache.commons.io.IOUtils.buffer(inputStream1);
        java.io.InputStream inputStream20 = org.apache.commons.io.IOUtils.toBufferedInputStream((java.io.InputStream) bufferedInputStream18, (int) 'a');
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream10);
        org.junit.Assert.assertNotNull(strList15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream18);
        org.junit.Assert.assertNotNull(inputStream20);
    }

    @Test
    public void test3153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3153");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray(inputStream1, (int) (short) 0);
        long long9 = org.apache.commons.io.IOUtils.skip(inputStream1, 100L);
        java.io.InputStream inputStream10 = null;
        java.io.InputStream inputStream11 = null;
        java.io.OutputStream outputStream12 = null;
        byte[] byteArray15 = new byte[] {};
        int int16 = org.apache.commons.io.IOUtils.length(byteArray15);
        java.io.OutputStream outputStream17 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray15, outputStream17);
        long long19 = org.apache.commons.io.IOUtils.copyLarge(inputStream11, outputStream12, 0L, (long) (byte) -1, byteArray15);
        java.io.OutputStream outputStream20 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray15, outputStream20);
        org.apache.commons.io.IOUtils.readFully(inputStream10, byteArray15);
        int int23 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray15);
        int int24 = org.apache.commons.io.IOUtils.length(byteArray15);
        java.io.Writer writer25 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(byteArray15, writer25, "\r\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ??");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
    }

    @Test
    public void test3154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3154");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream5 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray("");
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray10);
        long long12 = org.apache.commons.io.IOUtils.copyLarge(inputStream4, outputStream5, 0L, 0L, byteArray10);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, byteArray10);
        java.io.BufferedInputStream bufferedInputStream15 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.io.InputStream inputStream17 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray18 = org.apache.commons.io.IOUtils.toByteArray(inputStream17);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream17);
        java.io.InputStream inputStream21 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream22 = null;
        java.io.InputStream inputStream25 = null;
        byte[] byteArray27 = org.apache.commons.io.IOUtils.toByteArray("");
        int int28 = org.apache.commons.io.IOUtils.read(inputStream25, byteArray27);
        long long29 = org.apache.commons.io.IOUtils.copyLarge(inputStream21, outputStream22, 0L, 0L, byteArray27);
        java.nio.charset.Charset charset30 = null;
        java.util.List<java.lang.String> strList31 = org.apache.commons.io.IOUtils.readLines(inputStream21, charset30);
        java.io.InputStream inputStream33 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream34 = null;
        java.io.InputStream inputStream37 = null;
        byte[] byteArray39 = org.apache.commons.io.IOUtils.toByteArray("");
        int int40 = org.apache.commons.io.IOUtils.read(inputStream37, byteArray39);
        long long41 = org.apache.commons.io.IOUtils.copyLarge(inputStream33, outputStream34, 0L, 0L, byteArray39);
        java.nio.charset.Charset charset42 = null;
        java.util.List<java.lang.String> strList43 = org.apache.commons.io.IOUtils.readLines(inputStream33, charset42);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream33);
        boolean boolean45 = org.apache.commons.io.IOUtils.contentEquals(inputStream21, inputStream33);
        java.io.OutputStream outputStream46 = null;
        java.io.InputStream inputStream48 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream49 = null;
        java.io.InputStream inputStream52 = null;
        byte[] byteArray54 = org.apache.commons.io.IOUtils.toByteArray("");
        int int55 = org.apache.commons.io.IOUtils.read(inputStream52, byteArray54);
        long long56 = org.apache.commons.io.IOUtils.copyLarge(inputStream48, outputStream49, 0L, 0L, byteArray54);
        long long57 = org.apache.commons.io.IOUtils.copyLarge(inputStream33, outputStream46, byteArray54);
        org.apache.commons.io.IOUtils.readFully(inputStream17, byteArray54);
        org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray54);
        java.lang.String str60 = org.apache.commons.io.IOUtils.toString(inputStream1);
        java.io.BufferedInputStream bufferedInputStream62 = org.apache.commons.io.IOUtils.buffer(inputStream1, 100);
        java.io.OutputStream outputStream63 = null;
        int int64 = org.apache.commons.io.IOUtils.copy((java.io.InputStream) bufferedInputStream62, outputStream63);
        java.io.BufferedInputStream bufferedInputStream65 = org.apache.commons.io.IOUtils.buffer((java.io.InputStream) bufferedInputStream62);
        java.io.InputStream inputStream66 = org.apache.commons.io.IOUtils.toBufferedInputStream((java.io.InputStream) bufferedInputStream65);
        java.lang.String str67 = org.apache.commons.io.IOUtils.toString((java.io.InputStream) bufferedInputStream65);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream15);
        org.junit.Assert.assertNotNull(inputStream17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(inputStream21);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNotNull(strList31);
        org.junit.Assert.assertNotNull(inputStream33);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertNotNull(strList43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(inputStream48);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(bufferedInputStream62);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(bufferedInputStream65);
        org.junit.Assert.assertNotNull(inputStream66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
    }

    @Test
    public void test3155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3155");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        java.io.InputStream inputStream5 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1);
        byte[] byteArray6 = org.apache.commons.io.IOUtils.toByteArray(inputStream5);
        java.nio.charset.Charset charset8 = null;
        java.io.InputStream inputStream9 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "", charset8);
        java.util.List<java.lang.String> strList10 = org.apache.commons.io.IOUtils.readLines(inputStream9);
        java.io.InputStream inputStream12 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray13 = new byte[] {};
        int int14 = org.apache.commons.io.IOUtils.length(byteArray13);
        int int15 = org.apache.commons.io.IOUtils.read(inputStream12, byteArray13);
        byte[] byteArray16 = org.apache.commons.io.IOUtils.toByteArray(inputStream12);
        int int17 = org.apache.commons.io.IOUtils.length(byteArray16);
        org.apache.commons.io.IOUtils.readFully(inputStream9, byteArray16);
        byte[] byteArray20 = org.apache.commons.io.IOUtils.toByteArray(inputStream9, 0L);
        java.io.OutputStream outputStream21 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray20, outputStream21);
        int int23 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray20);
        java.lang.String str24 = org.apache.commons.io.IOUtils.toString(byteArray20);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(inputStream5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(inputStream9);
        org.junit.Assert.assertNotNull(strList10);
        org.junit.Assert.assertNotNull(inputStream12);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
    }

    @Test
    public void test3156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3156");
        java.io.Reader reader0 = null;
        java.io.Writer writer1 = null;
        java.io.InputStream inputStream3 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray4 = new byte[] {};
        int int5 = org.apache.commons.io.IOUtils.length(byteArray4);
        int int6 = org.apache.commons.io.IOUtils.read(inputStream3, byteArray4);
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray(inputStream3);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer8 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream3, iOExceptionConsumer8);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream3);
        java.io.BufferedInputStream bufferedInputStream12 = org.apache.commons.io.IOUtils.buffer(inputStream3, (int) (byte) 10);
        java.io.InputStream inputStream14 = org.apache.commons.io.IOUtils.toBufferedInputStream((java.io.InputStream) bufferedInputStream12, (int) '#');
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream14);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream14);
        char[] charArray17 = org.apache.commons.io.IOUtils.toCharArray(inputStream14);
        // The following exception was thrown during execution in test generation
        try {
            long long18 = org.apache.commons.io.IOUtils.copyLarge(reader0, writer1, charArray17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[])\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream3);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream12);
        org.junit.Assert.assertNotNull(inputStream14);
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[]");
    }

    @Test
    public void test3157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3157");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        java.io.Writer writer10 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer10);
        java.util.List<java.lang.String> strList12 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.InputStream inputStream13 = null;
        java.io.OutputStream outputStream14 = null;
        byte[] byteArray17 = new byte[] {};
        int int18 = org.apache.commons.io.IOUtils.length(byteArray17);
        java.io.OutputStream outputStream19 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray17, outputStream19);
        long long21 = org.apache.commons.io.IOUtils.copyLarge(inputStream13, outputStream14, 0L, (long) (byte) -1, byteArray17);
        java.io.OutputStream outputStream22 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray17, outputStream22);
        int int24 = org.apache.commons.io.IOUtils.length(byteArray17);
        java.io.OutputStream outputStream25 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray17, outputStream25);
        int int27 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray17);
        java.io.OutputStream outputStream28 = null;
        long long30 = org.apache.commons.io.IOUtils.copy(inputStream1, outputStream28, 10);
        java.nio.charset.Charset charset31 = null;
        java.lang.String str32 = org.apache.commons.io.IOUtils.toString(inputStream1, charset31);
        java.io.Writer writer33 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer33);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(strList12);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
    }

    @Test
    public void test3158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3158");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.List<java.lang.String> strList3 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        long long5 = org.apache.commons.io.IOUtils.skip(inputStream1, (long) '/');
        java.io.Writer writer6 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer6);
        java.io.OutputStream outputStream8 = null;
        long long11 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream8, 0L, (long) 100);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(strList3);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
    }

    @Test
    public void test3159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3159");
        java.io.Reader reader0 = null;
        java.io.InputStream inputStream2 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray3 = new byte[] {};
        int int4 = org.apache.commons.io.IOUtils.length(byteArray3);
        int int5 = org.apache.commons.io.IOUtils.read(inputStream2, byteArray3);
        byte[] byteArray6 = org.apache.commons.io.IOUtils.toByteArray(inputStream2);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer7 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream2, iOExceptionConsumer7);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream2);
        java.io.BufferedInputStream bufferedInputStream11 = org.apache.commons.io.IOUtils.buffer(inputStream2, (int) (byte) 10);
        java.io.InputStream inputStream13 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream2, (int) (byte) 1);
        java.io.OutputStream outputStream14 = null;
        int int15 = org.apache.commons.io.IOUtils.copy(inputStream13, outputStream14);
        java.io.BufferedInputStream bufferedInputStream17 = org.apache.commons.io.IOUtils.buffer(inputStream13, (int) (byte) 10);
        char[] charArray18 = org.apache.commons.io.IOUtils.toCharArray((java.io.InputStream) bufferedInputStream17);
        int int19 = org.apache.commons.io.IOUtils.length(charArray18);
        org.apache.commons.io.IOUtils.readFully(reader0, charArray18);
        java.io.Writer writer21 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray18, writer21);
        org.junit.Assert.assertNotNull(inputStream2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream11);
        org.junit.Assert.assertNotNull(inputStream13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(bufferedInputStream17);
        org.junit.Assert.assertNotNull(charArray18);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray18), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray18), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray18), "[]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test3160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3160");
        java.io.Reader reader0 = null;
        java.io.InputStream inputStream2 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray3 = new byte[] {};
        int int4 = org.apache.commons.io.IOUtils.length(byteArray3);
        int int5 = org.apache.commons.io.IOUtils.read(inputStream2, byteArray3);
        byte[] byteArray6 = org.apache.commons.io.IOUtils.toByteArray(inputStream2);
        java.nio.charset.Charset charset7 = null;
        java.util.List<java.lang.String> strList8 = org.apache.commons.io.IOUtils.readLines(inputStream2, charset7);
        java.nio.charset.Charset charset9 = null;
        org.apache.commons.io.LineIterator lineIterator10 = org.apache.commons.io.IOUtils.lineIterator(inputStream2, charset9);
        java.io.InputStream inputStream12 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream2, 6);
        java.io.BufferedInputStream bufferedInputStream14 = org.apache.commons.io.IOUtils.buffer(inputStream12, 3);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer15 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream12, iOExceptionConsumer15);
        char[] charArray17 = org.apache.commons.io.IOUtils.toCharArray(inputStream12);
        int int18 = org.apache.commons.io.IOUtils.length(charArray17);
        org.apache.commons.io.IOUtils.readFully(reader0, charArray17);
        int int20 = org.apache.commons.io.IOUtils.length(charArray17);
        org.junit.Assert.assertNotNull(inputStream2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertNotNull(lineIterator10);
        org.junit.Assert.assertNotNull(inputStream12);
        org.junit.Assert.assertNotNull(bufferedInputStream14);
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    }

    @Test
    public void test3161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3161");
        java.io.Closeable closeable0 = null;
        java.io.Closeable[] closeableArray1 = new java.io.Closeable[] { closeable0 };
        org.apache.commons.io.IOUtils.closeQuietly(closeableArray1);
        org.apache.commons.io.IOUtils.closeQuietly(closeableArray1);
        org.apache.commons.io.IOUtils.closeQuietly(closeableArray1);
        org.apache.commons.io.IOUtils.closeQuietly(closeableArray1);
        int int6 = org.apache.commons.io.IOUtils.length((java.lang.Object[]) closeableArray1);
        int int7 = org.apache.commons.io.IOUtils.length((java.lang.Object[]) closeableArray1);
        org.apache.commons.io.IOUtils.closeQuietly(closeableArray1);
        int int9 = org.apache.commons.io.IOUtils.length((java.lang.Object[]) closeableArray1);
        int int10 = org.apache.commons.io.IOUtils.length((java.lang.Object[]) closeableArray1);
        int int11 = org.apache.commons.io.IOUtils.length((java.lang.Object[]) closeableArray1);
        int int12 = org.apache.commons.io.IOUtils.length((java.lang.Object[]) closeableArray1);
        org.apache.commons.io.IOUtils.closeQuietly(closeableArray1);
        org.apache.commons.io.IOUtils.closeQuietly(closeableArray1);
        org.junit.Assert.assertNotNull(closeableArray1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
    }

    @Test
    public void test3162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3162");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream("");
        java.io.OutputStream outputStream2 = null;
        long long3 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2);
        char[] charArray4 = org.apache.commons.io.IOUtils.toCharArray(inputStream1);
        java.io.BufferedInputStream bufferedInputStream5 = org.apache.commons.io.IOUtils.buffer(inputStream1);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream5);
    }

    @Test
    public void test3163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3163");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray(inputStream1, (int) (short) 0);
        long long9 = org.apache.commons.io.IOUtils.skip(inputStream1, 100L);
        java.io.InputStream inputStream10 = null;
        java.io.InputStream inputStream11 = null;
        java.io.OutputStream outputStream12 = null;
        byte[] byteArray15 = new byte[] {};
        int int16 = org.apache.commons.io.IOUtils.length(byteArray15);
        java.io.OutputStream outputStream17 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray15, outputStream17);
        long long19 = org.apache.commons.io.IOUtils.copyLarge(inputStream11, outputStream12, 0L, (long) (byte) -1, byteArray15);
        java.io.OutputStream outputStream20 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray15, outputStream20);
        org.apache.commons.io.IOUtils.readFully(inputStream10, byteArray15);
        int int23 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray15);
        java.io.InputStream inputStream24 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1);
        java.nio.charset.Charset charset25 = null;
        java.lang.String str26 = org.apache.commons.io.IOUtils.toString(inputStream1, charset25);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(inputStream24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
    }

    @Test
    public void test3164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3164");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.OutputStream outputStream9 = null;
        int int10 = org.apache.commons.io.IOUtils.copy(inputStream1, outputStream9);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test3165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3165");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.nio.charset.Charset charset4 = null;
        org.apache.commons.io.LineIterator lineIterator5 = org.apache.commons.io.IOUtils.lineIterator(inputStream1, charset4);
        java.nio.charset.Charset charset6 = null;
        java.util.List<java.lang.String> strList7 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset6);
        java.io.InputStream inputStream9 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray10 = new byte[] {};
        int int11 = org.apache.commons.io.IOUtils.length(byteArray10);
        int int12 = org.apache.commons.io.IOUtils.read(inputStream9, byteArray10);
        byte[] byteArray13 = org.apache.commons.io.IOUtils.toByteArray(inputStream9);
        byte[] byteArray15 = org.apache.commons.io.IOUtils.toByteArray(inputStream9, (int) (short) 0);
        byte[] byteArray16 = new byte[] {};
        int int17 = org.apache.commons.io.IOUtils.length(byteArray16);
        org.apache.commons.io.IOUtils.readFully(inputStream9, byteArray16);
        java.lang.String str19 = org.apache.commons.io.IOUtils.toString(byteArray16);
        int int20 = org.apache.commons.io.IOUtils.length(byteArray16);
        org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray16);
        java.util.List<java.lang.String> strList22 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.OutputStream outputStream24 = null;
        java.nio.charset.Charset charset25 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList22, "hi!", outputStream24, charset25);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(lineIterator5);
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertNotNull(inputStream9);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(strList22);
    }

    @Test
    public void test3166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3166");
        java.io.Reader reader0 = null;
        char[] charArray5 = new char[] { '4', 'a', '#', 'a' };
        int int6 = org.apache.commons.io.IOUtils.length(charArray5);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.readFully(reader0, charArray5, (int) (short) 100, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[], int, int)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "4a#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "4a#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[4, a, #, a]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 4 + "'", int6 == 4);
    }

    @Test
    public void test3167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3167");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.BufferedInputStream bufferedInputStream10 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.io.InputStream inputStream12 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, (int) (byte) 1);
        java.nio.charset.Charset charset13 = null;
        char[] charArray14 = org.apache.commons.io.IOUtils.toCharArray(inputStream1, charset13);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream17 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray18 = new byte[] {};
        int int19 = org.apache.commons.io.IOUtils.length(byteArray18);
        int int20 = org.apache.commons.io.IOUtils.read(inputStream17, byteArray18);
        byte[] byteArray21 = org.apache.commons.io.IOUtils.toByteArray(inputStream17);
        byte[] byteArray23 = org.apache.commons.io.IOUtils.toByteArray(inputStream17, (int) (short) 0);
        byte[] byteArray24 = new byte[] {};
        int int25 = org.apache.commons.io.IOUtils.length(byteArray24);
        org.apache.commons.io.IOUtils.readFully(inputStream17, byteArray24);
        java.lang.String str27 = org.apache.commons.io.IOUtils.toString(byteArray24);
        int int28 = org.apache.commons.io.IOUtils.length(byteArray24);
        org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray24);
        java.io.Writer writer30 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer30);
        java.io.Writer writer32 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.copy(inputStream1, writer32, "\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ?");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream10);
        org.junit.Assert.assertNotNull(inputStream12);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[]");
        org.junit.Assert.assertNotNull(inputStream17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
    }

    @Test
    public void test3168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3168");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        java.nio.charset.Charset charset10 = null;
        java.util.List<java.lang.String> strList11 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset10);
        java.io.InputStream inputStream13 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream14 = null;
        java.io.InputStream inputStream17 = null;
        byte[] byteArray19 = org.apache.commons.io.IOUtils.toByteArray("");
        int int20 = org.apache.commons.io.IOUtils.read(inputStream17, byteArray19);
        long long21 = org.apache.commons.io.IOUtils.copyLarge(inputStream13, outputStream14, 0L, 0L, byteArray19);
        java.nio.charset.Charset charset22 = null;
        java.util.List<java.lang.String> strList23 = org.apache.commons.io.IOUtils.readLines(inputStream13, charset22);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream13);
        boolean boolean25 = org.apache.commons.io.IOUtils.contentEquals(inputStream1, inputStream13);
        java.io.OutputStream outputStream26 = null;
        java.io.InputStream inputStream28 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream29 = null;
        java.io.InputStream inputStream32 = null;
        byte[] byteArray34 = org.apache.commons.io.IOUtils.toByteArray("");
        int int35 = org.apache.commons.io.IOUtils.read(inputStream32, byteArray34);
        long long36 = org.apache.commons.io.IOUtils.copyLarge(inputStream28, outputStream29, 0L, 0L, byteArray34);
        long long37 = org.apache.commons.io.IOUtils.copyLarge(inputStream13, outputStream26, byteArray34);
        java.io.OutputStream outputStream38 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray34, outputStream38);
        java.io.Writer writer40 = null;
        java.nio.charset.Charset charset41 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(byteArray34, writer40, charset41);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Writer.write(String)\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertNotNull(inputStream13);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(strList23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(inputStream28);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
    }

    @Test
    public void test3169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3169");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.BufferedInputStream bufferedInputStream10 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.io.InputStream inputStream12 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, (int) (byte) 1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer13 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer13);
        java.io.OutputStream outputStream15 = null;
        java.io.InputStream inputStream17 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray18 = new byte[] {};
        int int19 = org.apache.commons.io.IOUtils.length(byteArray18);
        int int20 = org.apache.commons.io.IOUtils.read(inputStream17, byteArray18);
        byte[] byteArray21 = org.apache.commons.io.IOUtils.toByteArray(inputStream17);
        java.io.InputStream inputStream23 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray24 = new byte[] {};
        int int25 = org.apache.commons.io.IOUtils.length(byteArray24);
        int int26 = org.apache.commons.io.IOUtils.read(inputStream23, byteArray24);
        byte[] byteArray27 = org.apache.commons.io.IOUtils.toByteArray(inputStream23);
        int int28 = org.apache.commons.io.IOUtils.length(byteArray27);
        org.apache.commons.io.IOUtils.readFully(inputStream17, byteArray27);
        long long30 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream15, byteArray27);
        java.io.InputStream inputStream32 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream33 = null;
        java.io.InputStream inputStream36 = null;
        byte[] byteArray38 = org.apache.commons.io.IOUtils.toByteArray("");
        int int39 = org.apache.commons.io.IOUtils.read(inputStream36, byteArray38);
        long long40 = org.apache.commons.io.IOUtils.copyLarge(inputStream32, outputStream33, 0L, 0L, byteArray38);
        java.nio.charset.Charset charset41 = null;
        java.util.List<java.lang.String> strList42 = org.apache.commons.io.IOUtils.readLines(inputStream32, charset41);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream32);
        java.nio.charset.Charset charset44 = null;
        java.lang.String str45 = org.apache.commons.io.IOUtils.toString(inputStream32, charset44);
        java.io.Writer writer46 = null;
        org.apache.commons.io.IOUtils.copy(inputStream32, writer46);
        byte[] byteArray48 = org.apache.commons.io.IOUtils.toByteArray(inputStream32);
        int int49 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray48);
        byte[] byteArray51 = org.apache.commons.io.IOUtils.readFully(inputStream1, (int) (short) 0);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream10);
        org.junit.Assert.assertNotNull(inputStream12);
        org.junit.Assert.assertNotNull(inputStream17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertNotNull(inputStream23);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(inputStream32);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertNotNull(strList42);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
    }

    @Test
    public void test3170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3170");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.BufferedInputStream bufferedInputStream10 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.io.InputStream inputStream12 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, (int) (byte) 1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer13 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer13);
        java.io.OutputStream outputStream15 = null;
        java.io.InputStream inputStream17 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray18 = new byte[] {};
        int int19 = org.apache.commons.io.IOUtils.length(byteArray18);
        int int20 = org.apache.commons.io.IOUtils.read(inputStream17, byteArray18);
        byte[] byteArray21 = org.apache.commons.io.IOUtils.toByteArray(inputStream17);
        java.io.InputStream inputStream23 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray24 = new byte[] {};
        int int25 = org.apache.commons.io.IOUtils.length(byteArray24);
        int int26 = org.apache.commons.io.IOUtils.read(inputStream23, byteArray24);
        byte[] byteArray27 = org.apache.commons.io.IOUtils.toByteArray(inputStream23);
        int int28 = org.apache.commons.io.IOUtils.length(byteArray27);
        org.apache.commons.io.IOUtils.readFully(inputStream17, byteArray27);
        long long30 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream15, byteArray27);
        byte[] byteArray31 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.io.InputStream inputStream33 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray34 = org.apache.commons.io.IOUtils.toByteArray(inputStream33);
        java.io.InputStream inputStream36 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray37 = new byte[] {};
        int int38 = org.apache.commons.io.IOUtils.length(byteArray37);
        int int39 = org.apache.commons.io.IOUtils.read(inputStream36, byteArray37);
        byte[] byteArray40 = org.apache.commons.io.IOUtils.toByteArray(inputStream36);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer41 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream36, iOExceptionConsumer41);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream36);
        java.io.BufferedInputStream bufferedInputStream45 = org.apache.commons.io.IOUtils.buffer(inputStream36, (int) (byte) 10);
        boolean boolean46 = org.apache.commons.io.IOUtils.contentEquals(inputStream33, inputStream36);
        java.io.OutputStream outputStream47 = null;
        long long50 = org.apache.commons.io.IOUtils.copyLarge(inputStream33, outputStream47, (long) (short) 0, (long) 2);
        java.io.OutputStream outputStream51 = null;
        int int52 = org.apache.commons.io.IOUtils.copy(inputStream33, outputStream51);
        java.io.OutputStream outputStream53 = null;
        byte[] byteArray54 = new byte[] {};
        int int55 = org.apache.commons.io.IOUtils.length(byteArray54);
        java.io.OutputStream outputStream56 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray54, outputStream56);
        long long58 = org.apache.commons.io.IOUtils.copyLarge(inputStream33, outputStream53, byteArray54);
        org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray54);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.String> strList61 = org.apache.commons.io.IOUtils.readLines(inputStream1, "hi!");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: hi!");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream10);
        org.junit.Assert.assertNotNull(inputStream12);
        org.junit.Assert.assertNotNull(inputStream17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertNotNull(inputStream23);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(inputStream33);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertNotNull(inputStream36);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 0L + "'", long58 == 0L);
    }

    @Test
    public void test3171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3171");
        java.io.Reader reader0 = null;
        java.io.InputStream inputStream2 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray3 = new byte[] {};
        int int4 = org.apache.commons.io.IOUtils.length(byteArray3);
        int int5 = org.apache.commons.io.IOUtils.read(inputStream2, byteArray3);
        byte[] byteArray6 = org.apache.commons.io.IOUtils.toByteArray(inputStream2);
        java.io.InputStream inputStream8 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray9 = new byte[] {};
        int int10 = org.apache.commons.io.IOUtils.length(byteArray9);
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray9);
        byte[] byteArray12 = org.apache.commons.io.IOUtils.toByteArray(inputStream8);
        int int13 = org.apache.commons.io.IOUtils.length(byteArray12);
        org.apache.commons.io.IOUtils.readFully(inputStream2, byteArray12);
        char[] charArray15 = org.apache.commons.io.IOUtils.toCharArray(inputStream2);
        // The following exception was thrown during execution in test generation
        try {
            int int18 = org.apache.commons.io.IOUtils.read(reader0, charArray15, (int) (short) 10, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[], int, int)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(inputStream8);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[]");
    }

    @Test
    public void test3172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3172");
        java.nio.charset.Charset charset1 = null;
        java.io.InputStream inputStream2 = org.apache.commons.io.IOUtils.toInputStream("hi!", charset1);
        java.nio.charset.Charset charset3 = null;
        char[] charArray4 = org.apache.commons.io.IOUtils.toCharArray(inputStream2, charset3);
        java.io.InputStream inputStream6 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray7 = new byte[] {};
        int int8 = org.apache.commons.io.IOUtils.length(byteArray7);
        int int9 = org.apache.commons.io.IOUtils.read(inputStream6, byteArray7);
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray(inputStream6);
        java.nio.charset.Charset charset11 = null;
        java.util.List<java.lang.String> strList12 = org.apache.commons.io.IOUtils.readLines(inputStream6, charset11);
        java.nio.charset.Charset charset13 = null;
        org.apache.commons.io.LineIterator lineIterator14 = org.apache.commons.io.IOUtils.lineIterator(inputStream6, charset13);
        java.io.InputStream inputStream16 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream6, 6);
        java.io.BufferedInputStream bufferedInputStream18 = org.apache.commons.io.IOUtils.buffer(inputStream16, 3);
        java.io.InputStream inputStream19 = org.apache.commons.io.IOUtils.toBufferedInputStream((java.io.InputStream) bufferedInputStream18);
        byte[] byteArray20 = org.apache.commons.io.IOUtils.toByteArray(inputStream19);
        int int21 = org.apache.commons.io.IOUtils.read(inputStream2, byteArray20);
        java.io.OutputStream outputStream22 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray20, outputStream22);
        org.junit.Assert.assertNotNull(inputStream2);
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "hi!");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "hi!");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[h, i, !]");
        org.junit.Assert.assertNotNull(inputStream6);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(strList12);
        org.junit.Assert.assertNotNull(lineIterator14);
        org.junit.Assert.assertNotNull(inputStream16);
        org.junit.Assert.assertNotNull(bufferedInputStream18);
        org.junit.Assert.assertNotNull(inputStream19);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
    }

    @Test
    public void test3173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3173");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        java.io.BufferedInputStream bufferedInputStream10 = org.apache.commons.io.IOUtils.buffer(inputStream1);
        java.io.InputStream inputStream12 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, (int) (short) 0);
        java.io.InputStream inputStream14 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream15 = null;
        java.io.InputStream inputStream17 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream18 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray23 = org.apache.commons.io.IOUtils.toByteArray("");
        int int24 = org.apache.commons.io.IOUtils.read(inputStream21, byteArray23);
        long long25 = org.apache.commons.io.IOUtils.copyLarge(inputStream17, outputStream18, 0L, 0L, byteArray23);
        long long26 = org.apache.commons.io.IOUtils.copyLarge(inputStream14, outputStream15, byteArray23);
        java.io.BufferedInputStream bufferedInputStream28 = org.apache.commons.io.IOUtils.buffer(inputStream14, (int) (byte) 10);
        org.apache.commons.io.IOUtils.closeQuietly(inputStream14);
        java.nio.charset.Charset charset30 = null;
        java.util.List<java.lang.String> strList31 = org.apache.commons.io.IOUtils.readLines(inputStream14, charset30);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream14);
        java.io.OutputStream outputStream33 = null;
        int int34 = org.apache.commons.io.IOUtils.copy(inputStream14, outputStream33);
        java.io.OutputStream outputStream35 = null;
        long long36 = org.apache.commons.io.IOUtils.copyLarge(inputStream14, outputStream35);
        java.io.OutputStream outputStream37 = null;
        java.io.InputStream inputStream39 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream40 = null;
        java.io.InputStream inputStream42 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream43 = null;
        java.io.InputStream inputStream46 = null;
        byte[] byteArray48 = org.apache.commons.io.IOUtils.toByteArray("");
        int int49 = org.apache.commons.io.IOUtils.read(inputStream46, byteArray48);
        long long50 = org.apache.commons.io.IOUtils.copyLarge(inputStream42, outputStream43, 0L, 0L, byteArray48);
        long long51 = org.apache.commons.io.IOUtils.copyLarge(inputStream39, outputStream40, byteArray48);
        long long52 = org.apache.commons.io.IOUtils.copyLarge(inputStream14, outputStream37, byteArray48);
        java.lang.String str53 = org.apache.commons.io.IOUtils.toString(byteArray48);
        org.apache.commons.io.IOUtils.readFully(inputStream12, byteArray48);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream10);
        org.junit.Assert.assertNotNull(inputStream12);
        org.junit.Assert.assertNotNull(inputStream14);
        org.junit.Assert.assertNotNull(inputStream17);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream28);
        org.junit.Assert.assertNotNull(strList31);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertNotNull(inputStream39);
        org.junit.Assert.assertNotNull(inputStream42);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
    }

    @Test
    public void test3174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3174");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.util.List<java.lang.String> strList4 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.Writer writer6 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList4, "", writer6);
        java.io.OutputStream outputStream9 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList4, "", outputStream9);
        java.io.OutputStream outputStream12 = null;
        java.nio.charset.Charset charset13 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList4, "", outputStream12, charset13);
        java.io.Writer writer16 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList4, "", writer16);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(strList4);
    }

    @Test
    public void test3175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3175");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        java.nio.charset.Charset charset10 = null;
        java.util.List<java.lang.String> strList11 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset10);
        java.io.InputStream inputStream13 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream14 = null;
        java.io.InputStream inputStream17 = null;
        byte[] byteArray19 = org.apache.commons.io.IOUtils.toByteArray("");
        int int20 = org.apache.commons.io.IOUtils.read(inputStream17, byteArray19);
        long long21 = org.apache.commons.io.IOUtils.copyLarge(inputStream13, outputStream14, 0L, 0L, byteArray19);
        java.nio.charset.Charset charset22 = null;
        java.util.List<java.lang.String> strList23 = org.apache.commons.io.IOUtils.readLines(inputStream13, charset22);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream13);
        boolean boolean25 = org.apache.commons.io.IOUtils.contentEquals(inputStream1, inputStream13);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.nio.charset.Charset charset27 = null;
        char[] charArray28 = org.apache.commons.io.IOUtils.toCharArray(inputStream1, charset27);
        java.nio.charset.Charset charset30 = null;
        java.io.InputStream inputStream31 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "", charset30);
        java.util.List<java.lang.String> strList32 = org.apache.commons.io.IOUtils.readLines(inputStream31);
        java.io.InputStream inputStream34 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray35 = new byte[] {};
        int int36 = org.apache.commons.io.IOUtils.length(byteArray35);
        int int37 = org.apache.commons.io.IOUtils.read(inputStream34, byteArray35);
        byte[] byteArray38 = org.apache.commons.io.IOUtils.toByteArray(inputStream34);
        int int39 = org.apache.commons.io.IOUtils.length(byteArray38);
        org.apache.commons.io.IOUtils.readFully(inputStream31, byteArray38);
        byte[] byteArray42 = org.apache.commons.io.IOUtils.toByteArray(inputStream31, 0L);
        java.io.OutputStream outputStream43 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray42, outputStream43);
        org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray42);
        java.io.OutputStream outputStream46 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray42, outputStream46);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertNotNull(inputStream13);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(strList23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray28), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray28), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray28), "[]");
        org.junit.Assert.assertNotNull(inputStream31);
        org.junit.Assert.assertNotNull(strList32);
        org.junit.Assert.assertNotNull(inputStream34);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
    }

    @Test
    public void test3176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3176");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.BufferedInputStream bufferedInputStream10 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.io.InputStream inputStream12 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, (int) (byte) 1);
        java.io.OutputStream outputStream13 = null;
        int int14 = org.apache.commons.io.IOUtils.copy(inputStream12, outputStream13);
        java.io.BufferedInputStream bufferedInputStream16 = org.apache.commons.io.IOUtils.buffer(inputStream12, (int) (byte) 10);
        char[] charArray17 = org.apache.commons.io.IOUtils.toCharArray((java.io.InputStream) bufferedInputStream16);
        java.io.InputStream inputStream19 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray20 = org.apache.commons.io.IOUtils.toByteArray(inputStream19);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream19);
        java.util.List<java.lang.String> strList22 = org.apache.commons.io.IOUtils.readLines(inputStream19);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer23 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream19, iOExceptionConsumer23);
        java.io.InputStream inputStream26 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray27 = org.apache.commons.io.IOUtils.toByteArray(inputStream26);
        int int28 = org.apache.commons.io.IOUtils.read(inputStream19, byteArray27);
        org.apache.commons.io.IOUtils.readFully((java.io.InputStream) bufferedInputStream16, byteArray27, (int) ' ', 0);
        byte[] byteArray32 = org.apache.commons.io.IOUtils.toByteArray((java.io.InputStream) bufferedInputStream16);
        byte[] byteArray33 = org.apache.commons.io.IOUtils.toByteArray((java.io.InputStream) bufferedInputStream16);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream10);
        org.junit.Assert.assertNotNull(inputStream12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(bufferedInputStream16);
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[]");
        org.junit.Assert.assertNotNull(inputStream19);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertNotNull(strList22);
        org.junit.Assert.assertNotNull(inputStream26);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
    }

    @Test
    public void test3177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3177");
        java.io.Reader reader0 = null;
        java.io.Reader reader1 = null;
        java.io.InputStream inputStream3 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream4 = null;
        java.io.InputStream inputStream7 = null;
        byte[] byteArray9 = org.apache.commons.io.IOUtils.toByteArray("");
        int int10 = org.apache.commons.io.IOUtils.read(inputStream7, byteArray9);
        long long11 = org.apache.commons.io.IOUtils.copyLarge(inputStream3, outputStream4, 0L, 0L, byteArray9);
        java.nio.charset.Charset charset12 = null;
        java.util.List<java.lang.String> strList13 = org.apache.commons.io.IOUtils.readLines(inputStream3, charset12);
        java.nio.charset.Charset charset14 = null;
        char[] charArray15 = org.apache.commons.io.IOUtils.toCharArray(inputStream3, charset14);
        org.apache.commons.io.IOUtils.readFully(reader1, charArray15);
        java.io.Writer writer17 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray15, writer17);
        // The following exception was thrown during execution in test generation
        try {
            int int21 = org.apache.commons.io.IOUtils.read(reader0, charArray15, 0, 4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[], int, int)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream3);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[]");
    }

    @Test
    public void test3178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3178");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray(inputStream1, (int) (short) 0);
        long long9 = org.apache.commons.io.IOUtils.skip(inputStream1, 100L);
        java.io.InputStream inputStream11 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray12 = org.apache.commons.io.IOUtils.toByteArray(inputStream11);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream11);
        java.util.List<java.lang.String> strList14 = org.apache.commons.io.IOUtils.readLines(inputStream11);
        java.io.OutputStream outputStream15 = null;
        long long16 = org.apache.commons.io.IOUtils.copyLarge(inputStream11, outputStream15);
        java.io.OutputStream outputStream17 = null;
        java.io.InputStream inputStream21 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray22 = new byte[] {};
        int int23 = org.apache.commons.io.IOUtils.length(byteArray22);
        int int24 = org.apache.commons.io.IOUtils.read(inputStream21, byteArray22);
        long long25 = org.apache.commons.io.IOUtils.copyLarge(inputStream11, outputStream17, (-1L), 1L, byteArray22);
        int int26 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray22);
        java.io.InputStream inputStream28 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray29 = new byte[] {};
        int int30 = org.apache.commons.io.IOUtils.length(byteArray29);
        int int31 = org.apache.commons.io.IOUtils.read(inputStream28, byteArray29);
        byte[] byteArray32 = org.apache.commons.io.IOUtils.toByteArray(inputStream28);
        byte[] byteArray34 = org.apache.commons.io.IOUtils.toByteArray(inputStream28, (int) (short) 0);
        java.io.BufferedInputStream bufferedInputStream35 = org.apache.commons.io.IOUtils.buffer(inputStream28);
        byte[] byteArray36 = org.apache.commons.io.IOUtils.toByteArray((java.io.InputStream) bufferedInputStream35);
        org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray36);
        java.io.OutputStream outputStream38 = null;
        java.io.InputStream inputStream42 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray43 = new byte[] {};
        int int44 = org.apache.commons.io.IOUtils.length(byteArray43);
        int int45 = org.apache.commons.io.IOUtils.read(inputStream42, byteArray43);
        java.nio.charset.Charset charset46 = null;
        java.lang.String str47 = org.apache.commons.io.IOUtils.toString(inputStream42, charset46);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream42);
        byte[] byteArray49 = org.apache.commons.io.IOUtils.toByteArray(inputStream42);
        java.io.OutputStream outputStream50 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray49, outputStream50);
        // The following exception was thrown during execution in test generation
        try {
            long long52 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream38, (long) (short) 10, (long) (short) 100, byteArray49);
            org.junit.Assert.fail("Expected exception of type java.io.EOFException; message: Bytes to skip: 10 actual: 0");
        } catch (java.io.EOFException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(inputStream11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertNotNull(strList14);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(inputStream21);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(inputStream28);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream35);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertNotNull(inputStream42);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
    }

    @Test
    public void test3179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3179");
        java.io.Reader reader0 = null;
        char[] charArray1 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int4 = org.apache.commons.io.IOUtils.read(reader0, charArray1, 3, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[], int, int)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test3180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3180");
        java.io.Reader reader0 = null;
        java.io.Writer writer1 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long4 = org.apache.commons.io.IOUtils.copyLarge(reader0, writer1, (long) 6, (long) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[], int, int)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test3181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3181");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream5 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray("");
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray10);
        long long12 = org.apache.commons.io.IOUtils.copyLarge(inputStream4, outputStream5, 0L, 0L, byteArray10);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, byteArray10);
        java.io.BufferedInputStream bufferedInputStream15 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.io.InputStream inputStream17 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray18 = org.apache.commons.io.IOUtils.toByteArray(inputStream17);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream17);
        java.io.InputStream inputStream21 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream22 = null;
        java.io.InputStream inputStream25 = null;
        byte[] byteArray27 = org.apache.commons.io.IOUtils.toByteArray("");
        int int28 = org.apache.commons.io.IOUtils.read(inputStream25, byteArray27);
        long long29 = org.apache.commons.io.IOUtils.copyLarge(inputStream21, outputStream22, 0L, 0L, byteArray27);
        java.nio.charset.Charset charset30 = null;
        java.util.List<java.lang.String> strList31 = org.apache.commons.io.IOUtils.readLines(inputStream21, charset30);
        java.io.InputStream inputStream33 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream34 = null;
        java.io.InputStream inputStream37 = null;
        byte[] byteArray39 = org.apache.commons.io.IOUtils.toByteArray("");
        int int40 = org.apache.commons.io.IOUtils.read(inputStream37, byteArray39);
        long long41 = org.apache.commons.io.IOUtils.copyLarge(inputStream33, outputStream34, 0L, 0L, byteArray39);
        java.nio.charset.Charset charset42 = null;
        java.util.List<java.lang.String> strList43 = org.apache.commons.io.IOUtils.readLines(inputStream33, charset42);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream33);
        boolean boolean45 = org.apache.commons.io.IOUtils.contentEquals(inputStream21, inputStream33);
        java.io.OutputStream outputStream46 = null;
        java.io.InputStream inputStream48 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream49 = null;
        java.io.InputStream inputStream52 = null;
        byte[] byteArray54 = org.apache.commons.io.IOUtils.toByteArray("");
        int int55 = org.apache.commons.io.IOUtils.read(inputStream52, byteArray54);
        long long56 = org.apache.commons.io.IOUtils.copyLarge(inputStream48, outputStream49, 0L, 0L, byteArray54);
        long long57 = org.apache.commons.io.IOUtils.copyLarge(inputStream33, outputStream46, byteArray54);
        org.apache.commons.io.IOUtils.readFully(inputStream17, byteArray54);
        org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray54);
        java.lang.String str60 = org.apache.commons.io.IOUtils.toString(inputStream1);
        java.io.BufferedInputStream bufferedInputStream62 = org.apache.commons.io.IOUtils.buffer(inputStream1, 100);
        java.io.OutputStream outputStream63 = null;
        java.io.InputStream inputStream66 = null;
        byte[] byteArray68 = org.apache.commons.io.IOUtils.toByteArray("");
        int int69 = org.apache.commons.io.IOUtils.read(inputStream66, byteArray68);
        java.lang.String str70 = org.apache.commons.io.IOUtils.toString(byteArray68);
        long long71 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream63, (-1L), (long) (short) -1, byteArray68);
        java.io.InputStream inputStream72 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1);
        org.apache.commons.io.function.IOConsumer<java.io.IOException> iOExceptionIOConsumer73 = null;
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1, iOExceptionIOConsumer73);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream15);
        org.junit.Assert.assertNotNull(inputStream17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(inputStream21);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNotNull(strList31);
        org.junit.Assert.assertNotNull(inputStream33);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertNotNull(strList43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(inputStream48);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(bufferedInputStream62);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 0L + "'", long71 == 0L);
        org.junit.Assert.assertNotNull(inputStream72);
    }

    @Test
    public void test3182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3182");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.BufferedInputStream bufferedInputStream10 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.io.InputStream inputStream12 = org.apache.commons.io.IOUtils.toBufferedInputStream((java.io.InputStream) bufferedInputStream10, (int) '#');
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream12);
        java.io.BufferedInputStream bufferedInputStream14 = org.apache.commons.io.IOUtils.buffer(inputStream12);
        long long16 = org.apache.commons.io.IOUtils.skip(inputStream12, (long) 6);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream10);
        org.junit.Assert.assertNotNull(inputStream12);
        org.junit.Assert.assertNotNull(bufferedInputStream14);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
    }

    @Test
    public void test3183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3183");
        java.io.Reader reader0 = null;
        java.io.Reader reader1 = null;
        java.io.Reader reader2 = null;
        java.io.Reader reader3 = null;
        java.io.Writer writer4 = null;
        char[] charArray7 = new char[] {};
        int int8 = org.apache.commons.io.IOUtils.length(charArray7);
        java.io.Writer writer9 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray7, writer9);
        java.io.Writer writer11 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray7, writer11);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(reader3, writer4, 0L, (long) (byte) 100, charArray7);
        int int14 = org.apache.commons.io.IOUtils.read(reader2, charArray7);
        java.io.Writer writer15 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray7, writer15);
        java.io.Writer writer17 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray7, writer17);
        java.io.Writer writer19 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray7, writer19);
        java.io.Writer writer21 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray7, writer21);
        int int25 = org.apache.commons.io.IOUtils.read(reader1, charArray7, (int) '4', 0);
        org.apache.commons.io.IOUtils.readFully(reader0, charArray7);
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
    }

    @Test
    public void test3184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3184");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray(inputStream1, (int) (short) 0);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.nio.charset.Charset charset9 = null;
        java.lang.String str10 = org.apache.commons.io.IOUtils.toString(inputStream1, charset9);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray12 = org.apache.commons.io.IOUtils.toByteArray(inputStream1, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Size must be equal or greater than zero: -1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
    }

    @Test
    public void test3185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3185");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream5 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray("");
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray10);
        long long12 = org.apache.commons.io.IOUtils.copyLarge(inputStream4, outputStream5, 0L, 0L, byteArray10);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, byteArray10);
        java.io.BufferedInputStream bufferedInputStream15 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.io.InputStream inputStream17 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray18 = org.apache.commons.io.IOUtils.toByteArray(inputStream17);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream17);
        java.io.InputStream inputStream21 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream22 = null;
        java.io.InputStream inputStream25 = null;
        byte[] byteArray27 = org.apache.commons.io.IOUtils.toByteArray("");
        int int28 = org.apache.commons.io.IOUtils.read(inputStream25, byteArray27);
        long long29 = org.apache.commons.io.IOUtils.copyLarge(inputStream21, outputStream22, 0L, 0L, byteArray27);
        java.nio.charset.Charset charset30 = null;
        java.util.List<java.lang.String> strList31 = org.apache.commons.io.IOUtils.readLines(inputStream21, charset30);
        java.io.InputStream inputStream33 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream34 = null;
        java.io.InputStream inputStream37 = null;
        byte[] byteArray39 = org.apache.commons.io.IOUtils.toByteArray("");
        int int40 = org.apache.commons.io.IOUtils.read(inputStream37, byteArray39);
        long long41 = org.apache.commons.io.IOUtils.copyLarge(inputStream33, outputStream34, 0L, 0L, byteArray39);
        java.nio.charset.Charset charset42 = null;
        java.util.List<java.lang.String> strList43 = org.apache.commons.io.IOUtils.readLines(inputStream33, charset42);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream33);
        boolean boolean45 = org.apache.commons.io.IOUtils.contentEquals(inputStream21, inputStream33);
        java.io.OutputStream outputStream46 = null;
        java.io.InputStream inputStream48 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream49 = null;
        java.io.InputStream inputStream52 = null;
        byte[] byteArray54 = org.apache.commons.io.IOUtils.toByteArray("");
        int int55 = org.apache.commons.io.IOUtils.read(inputStream52, byteArray54);
        long long56 = org.apache.commons.io.IOUtils.copyLarge(inputStream48, outputStream49, 0L, 0L, byteArray54);
        long long57 = org.apache.commons.io.IOUtils.copyLarge(inputStream33, outputStream46, byteArray54);
        org.apache.commons.io.IOUtils.readFully(inputStream17, byteArray54);
        org.apache.commons.io.IOUtils.readFully((java.io.InputStream) bufferedInputStream15, byteArray54);
        java.nio.charset.Charset charset60 = null;
        java.lang.String str61 = org.apache.commons.io.IOUtils.toString((java.io.InputStream) bufferedInputStream15, charset60);
        java.io.InputStream inputStream62 = org.apache.commons.io.IOUtils.toBufferedInputStream((java.io.InputStream) bufferedInputStream15);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream15);
        org.junit.Assert.assertNotNull(inputStream17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(inputStream21);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNotNull(strList31);
        org.junit.Assert.assertNotNull(inputStream33);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertNotNull(strList43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(inputStream48);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(inputStream62);
    }

    @Test
    public void test3186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3186");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream5 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray("");
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray10);
        long long12 = org.apache.commons.io.IOUtils.copyLarge(inputStream4, outputStream5, 0L, 0L, byteArray10);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, byteArray10);
        java.io.BufferedInputStream bufferedInputStream15 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer16 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer16);
        java.io.OutputStream outputStream18 = null;
        long long19 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream18);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream15);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
    }

    @Test
    public void test3187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3187");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream("\n");
        byte[] byteArray3 = org.apache.commons.io.IOUtils.toByteArray(inputStream1, (int) (byte) 0);
        java.io.InputStream inputStream5 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray6 = new byte[] {};
        int int7 = org.apache.commons.io.IOUtils.length(byteArray6);
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray6);
        byte[] byteArray9 = org.apache.commons.io.IOUtils.toByteArray(inputStream5);
        byte[] byteArray11 = org.apache.commons.io.IOUtils.toByteArray(inputStream5, (int) (short) 0);
        byte[] byteArray12 = new byte[] {};
        int int13 = org.apache.commons.io.IOUtils.length(byteArray12);
        org.apache.commons.io.IOUtils.readFully(inputStream5, byteArray12);
        org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray12);
        int int16 = org.apache.commons.io.IOUtils.length(byteArray12);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertNotNull(inputStream5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test3188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3188");
        java.io.Reader reader0 = null;
        java.io.Writer writer1 = null;
        char[] charArray4 = new char[] {};
        int int5 = org.apache.commons.io.IOUtils.length(charArray4);
        java.io.Writer writer6 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray4, writer6);
        long long8 = org.apache.commons.io.IOUtils.copyLarge(reader0, writer1, 0L, (long) (byte) -1, charArray4);
        java.io.OutputStream outputStream9 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(charArray4, outputStream9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.OutputStream.write(byte[])\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
    }

    @Test
    public void test3189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3189");
        java.io.Reader reader0 = null;
        java.io.Reader reader1 = null;
        java.io.Writer writer2 = null;
        java.io.InputStream inputStream6 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray7 = new byte[] {};
        int int8 = org.apache.commons.io.IOUtils.length(byteArray7);
        int int9 = org.apache.commons.io.IOUtils.read(inputStream6, byteArray7);
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray(inputStream6);
        java.nio.charset.Charset charset11 = null;
        java.util.List<java.lang.String> strList12 = org.apache.commons.io.IOUtils.readLines(inputStream6, charset11);
        java.nio.charset.Charset charset13 = null;
        org.apache.commons.io.LineIterator lineIterator14 = org.apache.commons.io.IOUtils.lineIterator(inputStream6, charset13);
        java.io.InputStream inputStream16 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream6, 6);
        java.io.InputStream inputStream18 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray19 = new byte[] {};
        int int20 = org.apache.commons.io.IOUtils.length(byteArray19);
        int int21 = org.apache.commons.io.IOUtils.read(inputStream18, byteArray19);
        byte[] byteArray22 = org.apache.commons.io.IOUtils.toByteArray(inputStream18);
        byte[] byteArray23 = org.apache.commons.io.IOUtils.toByteArray(inputStream18);
        int int26 = org.apache.commons.io.IOUtils.read(inputStream16, byteArray23, (int) '#', 0);
        java.nio.charset.Charset charset27 = null;
        char[] charArray28 = org.apache.commons.io.IOUtils.toCharArray(inputStream16, charset27);
        long long29 = org.apache.commons.io.IOUtils.copyLarge(reader1, writer2, 0L, (long) (byte) 100, charArray28);
        org.apache.commons.io.IOUtils.readFully(reader0, charArray28);
        java.io.OutputStream outputStream31 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(charArray28, outputStream31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.OutputStream.write(byte[])\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream6);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(strList12);
        org.junit.Assert.assertNotNull(lineIterator14);
        org.junit.Assert.assertNotNull(inputStream16);
        org.junit.Assert.assertNotNull(inputStream18);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray28), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray28), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray28), "[]");
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
    }

    @Test
    public void test3190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3190");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream5 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray("");
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray10);
        long long12 = org.apache.commons.io.IOUtils.copyLarge(inputStream4, outputStream5, 0L, 0L, byteArray10);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, byteArray10);
        java.io.BufferedInputStream bufferedInputStream15 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        org.apache.commons.io.IOUtils.closeQuietly(inputStream1);
        java.nio.charset.Charset charset17 = null;
        java.util.List<java.lang.String> strList18 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset17);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream20 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1);
        org.apache.commons.io.IOUtils.skipFully(inputStream1, (long) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            char[] charArray24 = org.apache.commons.io.IOUtils.toCharArray(inputStream1, "\r\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ??");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream15);
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertNotNull(inputStream20);
    }

    @Test
    public void test3191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3191");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream3 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1);
        java.io.Writer writer4 = null;
        java.nio.charset.Charset charset5 = null;
        org.apache.commons.io.IOUtils.copy(inputStream3, writer4, charset5);
        org.apache.commons.io.function.IOConsumer<java.io.IOException> iOExceptionIOConsumer7 = null;
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream3, iOExceptionIOConsumer7);
        java.nio.charset.Charset charset9 = null;
        org.apache.commons.io.LineIterator lineIterator10 = org.apache.commons.io.IOUtils.lineIterator(inputStream3, charset9);
        java.io.InputStream inputStream11 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream3);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer12 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream11, iOExceptionConsumer12);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray15 = org.apache.commons.io.IOUtils.toByteArray(inputStream11, (long) '4');
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Unexpected read size. current: 0, expected: 52");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream3);
        org.junit.Assert.assertNotNull(lineIterator10);
        org.junit.Assert.assertNotNull(inputStream11);
    }

    @Test
    public void test3192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3192");
        java.io.InputStream inputStream0 = null;
        java.io.InputStream inputStream1 = null;
        java.io.OutputStream outputStream2 = null;
        byte[] byteArray5 = new byte[] {};
        int int6 = org.apache.commons.io.IOUtils.length(byteArray5);
        java.io.OutputStream outputStream7 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray5, outputStream7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, (long) (byte) -1, byteArray5);
        java.io.OutputStream outputStream10 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray5, outputStream10);
        org.apache.commons.io.IOUtils.readFully(inputStream0, byteArray5);
        java.io.Writer writer13 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(byteArray5, writer13, "\r\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ??");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
    }

    @Test
    public void test3193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3193");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.BufferedInputStream bufferedInputStream10 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.io.InputStream inputStream12 = org.apache.commons.io.IOUtils.toBufferedInputStream((java.io.InputStream) bufferedInputStream10, (int) '#');
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream12);
        java.util.List<java.lang.String> strList14 = org.apache.commons.io.IOUtils.readLines(inputStream12);
        java.io.InputStream inputStream15 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream12);
        java.io.Writer writer16 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.copy(inputStream12, writer16, "");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream10);
        org.junit.Assert.assertNotNull(inputStream12);
        org.junit.Assert.assertNotNull(strList14);
        org.junit.Assert.assertNotNull(inputStream15);
    }

    @Test
    public void test3194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3194");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.nio.charset.Charset charset4 = null;
        org.apache.commons.io.LineIterator lineIterator5 = org.apache.commons.io.IOUtils.lineIterator(inputStream1, charset4);
        java.nio.charset.Charset charset6 = null;
        java.util.List<java.lang.String> strList7 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset6);
        java.io.BufferedInputStream bufferedInputStream8 = org.apache.commons.io.IOUtils.buffer(inputStream1);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(lineIterator5);
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertNotNull(bufferedInputStream8);
    }

    @Test
    public void test3195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3195");
        java.nio.charset.Charset charset1 = null;
        java.io.InputStream inputStream2 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "", charset1);
        java.util.List<java.lang.String> strList3 = org.apache.commons.io.IOUtils.readLines(inputStream2);
        java.io.InputStream inputStream5 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray6 = new byte[] {};
        int int7 = org.apache.commons.io.IOUtils.length(byteArray6);
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray6);
        byte[] byteArray9 = org.apache.commons.io.IOUtils.toByteArray(inputStream5);
        int int10 = org.apache.commons.io.IOUtils.length(byteArray9);
        org.apache.commons.io.IOUtils.readFully(inputStream2, byteArray9);
        java.lang.String str12 = org.apache.commons.io.IOUtils.toString(byteArray9);
        java.io.OutputStream outputStream13 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray9, outputStream13);
        java.io.Writer writer15 = null;
        java.nio.charset.Charset charset16 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(byteArray9, writer15, charset16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Writer.write(String)\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream2);
        org.junit.Assert.assertNotNull(strList3);
        org.junit.Assert.assertNotNull(inputStream5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
    }

    @Test
    public void test3196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3196");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.BufferedInputStream bufferedInputStream10 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        org.apache.commons.io.function.IOConsumer<java.io.IOException> iOExceptionIOConsumer11 = null;
        org.apache.commons.io.IOUtils.close((java.io.Closeable) bufferedInputStream10, iOExceptionIOConsumer11);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) bufferedInputStream10);
        org.apache.commons.io.IOUtils.skipFully((java.io.InputStream) bufferedInputStream10, (long) (short) 0);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer16 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) bufferedInputStream10, iOExceptionConsumer16);
        java.io.BufferedInputStream bufferedInputStream19 = org.apache.commons.io.IOUtils.buffer((java.io.InputStream) bufferedInputStream10, (int) (short) 0);
        java.io.InputStream inputStream21 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream21);
        java.io.InputStream inputStream23 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream21);
        java.io.InputStream inputStream25 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream26 = null;
        java.io.InputStream inputStream29 = null;
        byte[] byteArray31 = org.apache.commons.io.IOUtils.toByteArray("");
        int int32 = org.apache.commons.io.IOUtils.read(inputStream29, byteArray31);
        long long33 = org.apache.commons.io.IOUtils.copyLarge(inputStream25, outputStream26, 0L, 0L, byteArray31);
        java.io.Writer writer34 = null;
        org.apache.commons.io.IOUtils.copy(inputStream25, writer34);
        java.util.List<java.lang.String> strList36 = org.apache.commons.io.IOUtils.readLines(inputStream25);
        java.io.InputStream inputStream37 = null;
        java.io.OutputStream outputStream38 = null;
        byte[] byteArray41 = new byte[] {};
        int int42 = org.apache.commons.io.IOUtils.length(byteArray41);
        java.io.OutputStream outputStream43 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray41, outputStream43);
        long long45 = org.apache.commons.io.IOUtils.copyLarge(inputStream37, outputStream38, 0L, (long) (byte) -1, byteArray41);
        java.io.OutputStream outputStream46 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray41, outputStream46);
        int int48 = org.apache.commons.io.IOUtils.length(byteArray41);
        java.io.OutputStream outputStream49 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray41, outputStream49);
        int int51 = org.apache.commons.io.IOUtils.read(inputStream25, byteArray41);
        java.io.OutputStream outputStream52 = null;
        java.io.InputStream inputStream54 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray55 = new byte[] {};
        int int56 = org.apache.commons.io.IOUtils.length(byteArray55);
        int int57 = org.apache.commons.io.IOUtils.read(inputStream54, byteArray55);
        byte[] byteArray58 = org.apache.commons.io.IOUtils.toByteArray(inputStream54);
        byte[] byteArray60 = org.apache.commons.io.IOUtils.toByteArray(inputStream54, (int) (short) 0);
        long long62 = org.apache.commons.io.IOUtils.skip(inputStream54, 100L);
        java.io.InputStream inputStream63 = null;
        java.io.InputStream inputStream64 = null;
        java.io.OutputStream outputStream65 = null;
        byte[] byteArray68 = new byte[] {};
        int int69 = org.apache.commons.io.IOUtils.length(byteArray68);
        java.io.OutputStream outputStream70 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray68, outputStream70);
        long long72 = org.apache.commons.io.IOUtils.copyLarge(inputStream64, outputStream65, 0L, (long) (byte) -1, byteArray68);
        java.io.OutputStream outputStream73 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray68, outputStream73);
        org.apache.commons.io.IOUtils.readFully(inputStream63, byteArray68);
        int int76 = org.apache.commons.io.IOUtils.read(inputStream54, byteArray68);
        java.io.OutputStream outputStream77 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray68, outputStream77);
        java.lang.String str79 = org.apache.commons.io.IOUtils.toString(byteArray68);
        long long80 = org.apache.commons.io.IOUtils.copyLarge(inputStream25, outputStream52, byteArray68);
        int int81 = org.apache.commons.io.IOUtils.length(byteArray68);
        int int82 = org.apache.commons.io.IOUtils.read(inputStream21, byteArray68);
        int int83 = org.apache.commons.io.IOUtils.read((java.io.InputStream) bufferedInputStream10, byteArray68);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray85 = org.apache.commons.io.IOUtils.toByteArray((java.io.InputStream) bufferedInputStream10, (long) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Size must be equal or greater than zero: -1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream10);
        org.junit.Assert.assertNotNull(bufferedInputStream19);
        org.junit.Assert.assertNotNull(inputStream21);
        org.junit.Assert.assertNotNull(inputStream23);
        org.junit.Assert.assertNotNull(inputStream25);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertNotNull(strList36);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(inputStream54);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 0L + "'", long62 == 0L);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 0L + "'", long72 == 0L);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 0L + "'", long80 == 0L);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
    }

    @Test
    public void test3197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3197");
        java.io.Reader reader0 = null;
        java.io.InputStream inputStream2 = org.apache.commons.io.IOUtils.toInputStream("\n");
        char[] charArray3 = org.apache.commons.io.IOUtils.toCharArray(inputStream2);
        // The following exception was thrown during execution in test generation
        try {
            int int6 = org.apache.commons.io.IOUtils.read(reader0, charArray3, (int) (byte) -1, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[], int, int)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream2);
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray3), "\n");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray3), "\n");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray3), "[\n]");
    }

    @Test
    public void test3198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3198");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.util.List<java.lang.String> strList4 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.OutputStream outputStream5 = null;
        long long6 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream5);
        java.io.Writer writer7 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer7);
        java.nio.charset.Charset charset9 = null;
        java.lang.String str10 = org.apache.commons.io.IOUtils.toString(inputStream1, charset9);
        java.nio.charset.Charset charset11 = null;
        java.lang.String str12 = org.apache.commons.io.IOUtils.toString(inputStream1, charset11);
        java.io.InputStream inputStream14 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray15 = new byte[] {};
        int int16 = org.apache.commons.io.IOUtils.length(byteArray15);
        int int17 = org.apache.commons.io.IOUtils.read(inputStream14, byteArray15);
        byte[] byteArray18 = org.apache.commons.io.IOUtils.toByteArray(inputStream14);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer19 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream14, iOExceptionConsumer19);
        long long22 = org.apache.commons.io.IOUtils.skip(inputStream14, (long) (byte) 100);
        java.lang.String str23 = org.apache.commons.io.IOUtils.toString(inputStream14);
        byte[] byteArray24 = org.apache.commons.io.IOUtils.toByteArray(inputStream14);
        org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray24);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(inputStream14);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
    }

    @Test
    public void test3199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3199");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.io.OutputStream outputStream4 = null;
        long long5 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream4);
        java.nio.charset.Charset charset6 = null;
        java.lang.String str7 = org.apache.commons.io.IOUtils.toString(inputStream1, charset6);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
    }

    @Test
    public void test3200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3200");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.BufferedInputStream bufferedInputStream10 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        byte[] byteArray11 = null;
        org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray11, (int) '4', 0);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.LineIterator lineIterator16 = org.apache.commons.io.IOUtils.lineIterator(inputStream1, "");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream10);
    }

    @Test
    public void test3201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3201");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.io.InputStream inputStream7 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray8 = new byte[] {};
        int int9 = org.apache.commons.io.IOUtils.length(byteArray8);
        int int10 = org.apache.commons.io.IOUtils.read(inputStream7, byteArray8);
        byte[] byteArray11 = org.apache.commons.io.IOUtils.toByteArray(inputStream7);
        int int12 = org.apache.commons.io.IOUtils.length(byteArray11);
        org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray11);
        org.apache.commons.io.function.IOConsumer<java.io.IOException> iOExceptionIOConsumer14 = null;
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1, iOExceptionIOConsumer14);
        java.io.BufferedInputStream bufferedInputStream16 = org.apache.commons.io.IOUtils.buffer(inputStream1);
        java.io.OutputStream outputStream17 = null;
        int int18 = org.apache.commons.io.IOUtils.copy((java.io.InputStream) bufferedInputStream16, outputStream17);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(inputStream7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(bufferedInputStream16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test3202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3202");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        java.nio.charset.Charset charset10 = null;
        java.util.List<java.lang.String> strList11 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset10);
        java.io.OutputStream outputStream13 = null;
        java.nio.charset.Charset charset14 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList11, "hi!", outputStream13, charset14);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(strList11);
    }

    @Test
    public void test3203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3203");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.util.List<java.lang.String> strList4 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.OutputStream outputStream5 = null;
        long long6 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream5);
        java.io.OutputStream outputStream7 = null;
        java.io.InputStream inputStream11 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray12 = new byte[] {};
        int int13 = org.apache.commons.io.IOUtils.length(byteArray12);
        int int14 = org.apache.commons.io.IOUtils.read(inputStream11, byteArray12);
        long long15 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream7, (-1L), 1L, byteArray12);
        java.io.BufferedInputStream bufferedInputStream16 = org.apache.commons.io.IOUtils.buffer(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer17 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer17);
        java.lang.String str19 = org.apache.commons.io.IOUtils.toString(inputStream1);
        byte[] byteArray21 = org.apache.commons.io.IOUtils.toByteArray("\n");
        // The following exception was thrown during execution in test generation
        try {
            int int24 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray21, (int) ' ', 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Range [32, 32 + 1) out of bounds for length 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(inputStream11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream16);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[10]");
    }

    @Test
    public void test3204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3204");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.util.List<java.lang.String> strList4 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.OutputStream outputStream5 = null;
        long long6 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream5);
        java.io.Writer writer7 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer7);
        java.io.Writer writer9 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer9);
        java.io.InputStream inputStream12 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, (int) (short) 100);
        java.lang.String str13 = org.apache.commons.io.IOUtils.toString(inputStream1);
        java.io.OutputStream outputStream14 = null;
        java.io.InputStream inputStream18 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream19 = null;
        java.io.InputStream inputStream22 = null;
        byte[] byteArray24 = org.apache.commons.io.IOUtils.toByteArray("");
        int int25 = org.apache.commons.io.IOUtils.read(inputStream22, byteArray24);
        long long26 = org.apache.commons.io.IOUtils.copyLarge(inputStream18, outputStream19, 0L, 0L, byteArray24);
        java.nio.charset.Charset charset27 = null;
        java.util.List<java.lang.String> strList28 = org.apache.commons.io.IOUtils.readLines(inputStream18, charset27);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream18);
        java.nio.charset.Charset charset30 = null;
        java.lang.String str31 = org.apache.commons.io.IOUtils.toString(inputStream18, charset30);
        java.io.Writer writer32 = null;
        org.apache.commons.io.IOUtils.copy(inputStream18, writer32);
        byte[] byteArray35 = org.apache.commons.io.IOUtils.toByteArray(inputStream18, (int) (short) 0);
        java.lang.String str36 = org.apache.commons.io.IOUtils.toString(byteArray35);
        // The following exception was thrown during execution in test generation
        try {
            long long37 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream14, 10L, (long) '\\', byteArray35);
            org.junit.Assert.fail("Expected exception of type java.io.EOFException; message: Bytes to skip: 10 actual: 0");
        } catch (java.io.EOFException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(inputStream12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(inputStream18);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(strList28);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
    }

    @Test
    public void test3205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3205");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        java.nio.charset.Charset charset10 = null;
        java.util.List<java.lang.String> strList11 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset10);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.nio.charset.Charset charset13 = null;
        java.lang.String str14 = org.apache.commons.io.IOUtils.toString(inputStream1, charset13);
        java.io.Writer writer15 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer15);
        byte[] byteArray17 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        int int18 = org.apache.commons.io.IOUtils.length(byteArray17);
        int int19 = org.apache.commons.io.IOUtils.length(byteArray17);
        java.io.OutputStream outputStream20 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(byteArray17, outputStream20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.OutputStream.write(byte[])\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test3206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3206");
        java.io.Reader reader0 = null;
        char[] charArray1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.readFully(reader0, charArray1, (int) (byte) -1, 3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[], int, int)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test3207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3207");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray(inputStream1, (int) (short) 0);
        java.io.BufferedInputStream bufferedInputStream8 = org.apache.commons.io.IOUtils.buffer(inputStream1);
        java.io.Writer writer9 = null;
        org.apache.commons.io.IOUtils.copy((java.io.InputStream) bufferedInputStream8, writer9);
        java.lang.Class<?> wildcardClass11 = bufferedInputStream8.getClass();
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream8);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test3208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3208");
        java.io.Reader reader0 = null;
        java.io.InputStream inputStream2 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream3 = null;
        java.io.InputStream inputStream6 = null;
        byte[] byteArray8 = org.apache.commons.io.IOUtils.toByteArray("");
        int int9 = org.apache.commons.io.IOUtils.read(inputStream6, byteArray8);
        long long10 = org.apache.commons.io.IOUtils.copyLarge(inputStream2, outputStream3, 0L, 0L, byteArray8);
        java.io.Writer writer11 = null;
        org.apache.commons.io.IOUtils.copy(inputStream2, writer11);
        java.nio.charset.Charset charset13 = null;
        char[] charArray14 = org.apache.commons.io.IOUtils.toCharArray(inputStream2, charset13);
        org.apache.commons.io.IOUtils.readFully(reader0, charArray14);
        java.io.OutputStream outputStream16 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(charArray14, outputStream16, "hi!");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: hi!");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream2);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[]");
    }

    @Test
    public void test3209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3209");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        java.io.OutputStream outputStream10 = null;
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream10, (long) (short) 0, (-1L));
        java.lang.String str14 = org.apache.commons.io.IOUtils.toString(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly(inputStream1);
        org.apache.commons.io.function.IOConsumer<java.io.IOException> iOExceptionIOConsumer16 = null;
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1, iOExceptionIOConsumer16);
        java.io.InputStream inputStream19 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray20 = new byte[] {};
        int int21 = org.apache.commons.io.IOUtils.length(byteArray20);
        int int22 = org.apache.commons.io.IOUtils.read(inputStream19, byteArray20);
        java.io.InputStream inputStream23 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream19);
        java.nio.charset.Charset charset24 = null;
        org.apache.commons.io.LineIterator lineIterator25 = org.apache.commons.io.IOUtils.lineIterator(inputStream23, charset24);
        java.io.InputStream inputStream26 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream23);
        long long28 = org.apache.commons.io.IOUtils.skip(inputStream23, (long) 10);
        java.io.BufferedInputStream bufferedInputStream29 = org.apache.commons.io.IOUtils.buffer(inputStream23);
        boolean boolean30 = org.apache.commons.io.IOUtils.contentEquals(inputStream1, (java.io.InputStream) bufferedInputStream29);
        java.io.BufferedInputStream bufferedInputStream32 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray34 = org.apache.commons.io.IOUtils.readFully((java.io.InputStream) bufferedInputStream32, 4);
            org.junit.Assert.fail("Expected exception of type java.io.EOFException; message: Length to read: 4 actual: 0");
        } catch (java.io.EOFException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(inputStream19);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(inputStream23);
        org.junit.Assert.assertNotNull(lineIterator25);
        org.junit.Assert.assertNotNull(inputStream26);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(bufferedInputStream32);
    }

    @Test
    public void test3210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3210");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.util.List<java.lang.String> strList4 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.OutputStream outputStream5 = null;
        long long6 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream5);
        java.io.Writer writer7 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer7);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream11 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray12 = new byte[] {};
        int int13 = org.apache.commons.io.IOUtils.length(byteArray12);
        int int14 = org.apache.commons.io.IOUtils.read(inputStream11, byteArray12);
        byte[] byteArray15 = org.apache.commons.io.IOUtils.toByteArray(inputStream11);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer16 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream11, iOExceptionConsumer16);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream11);
        java.io.BufferedInputStream bufferedInputStream20 = org.apache.commons.io.IOUtils.buffer(inputStream11, (int) (byte) 10);
        java.io.InputStream inputStream22 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream11, (int) (byte) 1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer23 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream11, iOExceptionConsumer23);
        java.io.OutputStream outputStream25 = null;
        java.io.InputStream inputStream27 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray28 = new byte[] {};
        int int29 = org.apache.commons.io.IOUtils.length(byteArray28);
        int int30 = org.apache.commons.io.IOUtils.read(inputStream27, byteArray28);
        byte[] byteArray31 = org.apache.commons.io.IOUtils.toByteArray(inputStream27);
        java.io.InputStream inputStream33 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray34 = new byte[] {};
        int int35 = org.apache.commons.io.IOUtils.length(byteArray34);
        int int36 = org.apache.commons.io.IOUtils.read(inputStream33, byteArray34);
        byte[] byteArray37 = org.apache.commons.io.IOUtils.toByteArray(inputStream33);
        int int38 = org.apache.commons.io.IOUtils.length(byteArray37);
        org.apache.commons.io.IOUtils.readFully(inputStream27, byteArray37);
        long long40 = org.apache.commons.io.IOUtils.copyLarge(inputStream11, outputStream25, byteArray37);
        boolean boolean41 = org.apache.commons.io.IOUtils.contentEquals(inputStream1, inputStream11);
        java.io.BufferedInputStream bufferedInputStream43 = org.apache.commons.io.IOUtils.buffer(inputStream1, 5);
        java.io.InputStream inputStream45 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream46 = null;
        java.io.InputStream inputStream49 = null;
        byte[] byteArray51 = org.apache.commons.io.IOUtils.toByteArray("");
        int int52 = org.apache.commons.io.IOUtils.read(inputStream49, byteArray51);
        long long53 = org.apache.commons.io.IOUtils.copyLarge(inputStream45, outputStream46, 0L, 0L, byteArray51);
        java.nio.charset.Charset charset54 = null;
        java.util.List<java.lang.String> strList55 = org.apache.commons.io.IOUtils.readLines(inputStream45, charset54);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream45);
        java.nio.charset.Charset charset57 = null;
        java.lang.String str58 = org.apache.commons.io.IOUtils.toString(inputStream45, charset57);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer59 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream45, iOExceptionConsumer59);
        boolean boolean61 = org.apache.commons.io.IOUtils.contentEquals((java.io.InputStream) bufferedInputStream43, inputStream45);
        java.io.InputStream inputStream63 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream64 = null;
        java.io.InputStream inputStream66 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream67 = null;
        java.io.InputStream inputStream70 = null;
        byte[] byteArray72 = org.apache.commons.io.IOUtils.toByteArray("");
        int int73 = org.apache.commons.io.IOUtils.read(inputStream70, byteArray72);
        long long74 = org.apache.commons.io.IOUtils.copyLarge(inputStream66, outputStream67, 0L, 0L, byteArray72);
        long long75 = org.apache.commons.io.IOUtils.copyLarge(inputStream63, outputStream64, byteArray72);
        java.lang.String str76 = org.apache.commons.io.IOUtils.toString(byteArray72);
        org.apache.commons.io.IOUtils.readFully(inputStream45, byteArray72);
        java.io.BufferedInputStream bufferedInputStream79 = org.apache.commons.io.IOUtils.buffer(inputStream45, (int) (short) 1);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(inputStream11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream20);
        org.junit.Assert.assertNotNull(inputStream22);
        org.junit.Assert.assertNotNull(inputStream27);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(inputStream33);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(bufferedInputStream43);
        org.junit.Assert.assertNotNull(inputStream45);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertNotNull(strList55);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(inputStream63);
        org.junit.Assert.assertNotNull(inputStream66);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 0L + "'", long74 == 0L);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 0L + "'", long75 == 0L);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertNotNull(bufferedInputStream79);
    }

    @Test
    public void test3211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3211");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.BufferedInputStream bufferedInputStream10 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.io.InputStream inputStream12 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, (int) (byte) 1);
        java.io.OutputStream outputStream13 = null;
        int int14 = org.apache.commons.io.IOUtils.copy(inputStream12, outputStream13);
        java.io.BufferedInputStream bufferedInputStream16 = org.apache.commons.io.IOUtils.buffer(inputStream12, (int) (byte) 10);
        byte[] byteArray18 = org.apache.commons.io.IOUtils.toByteArray(inputStream12, 0);
        java.io.BufferedInputStream bufferedInputStream19 = org.apache.commons.io.IOUtils.buffer(inputStream12);
        java.io.InputStream inputStream21 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream22 = null;
        java.io.InputStream inputStream24 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream25 = null;
        java.io.InputStream inputStream28 = null;
        byte[] byteArray30 = org.apache.commons.io.IOUtils.toByteArray("");
        int int31 = org.apache.commons.io.IOUtils.read(inputStream28, byteArray30);
        long long32 = org.apache.commons.io.IOUtils.copyLarge(inputStream24, outputStream25, 0L, 0L, byteArray30);
        long long33 = org.apache.commons.io.IOUtils.copyLarge(inputStream21, outputStream22, byteArray30);
        java.io.BufferedInputStream bufferedInputStream35 = org.apache.commons.io.IOUtils.buffer(inputStream21, (int) (byte) 10);
        java.io.InputStream inputStream37 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray38 = org.apache.commons.io.IOUtils.toByteArray(inputStream37);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream37);
        java.io.InputStream inputStream41 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream42 = null;
        java.io.InputStream inputStream45 = null;
        byte[] byteArray47 = org.apache.commons.io.IOUtils.toByteArray("");
        int int48 = org.apache.commons.io.IOUtils.read(inputStream45, byteArray47);
        long long49 = org.apache.commons.io.IOUtils.copyLarge(inputStream41, outputStream42, 0L, 0L, byteArray47);
        java.nio.charset.Charset charset50 = null;
        java.util.List<java.lang.String> strList51 = org.apache.commons.io.IOUtils.readLines(inputStream41, charset50);
        java.io.InputStream inputStream53 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream54 = null;
        java.io.InputStream inputStream57 = null;
        byte[] byteArray59 = org.apache.commons.io.IOUtils.toByteArray("");
        int int60 = org.apache.commons.io.IOUtils.read(inputStream57, byteArray59);
        long long61 = org.apache.commons.io.IOUtils.copyLarge(inputStream53, outputStream54, 0L, 0L, byteArray59);
        java.nio.charset.Charset charset62 = null;
        java.util.List<java.lang.String> strList63 = org.apache.commons.io.IOUtils.readLines(inputStream53, charset62);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream53);
        boolean boolean65 = org.apache.commons.io.IOUtils.contentEquals(inputStream41, inputStream53);
        java.io.OutputStream outputStream66 = null;
        java.io.InputStream inputStream68 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream69 = null;
        java.io.InputStream inputStream72 = null;
        byte[] byteArray74 = org.apache.commons.io.IOUtils.toByteArray("");
        int int75 = org.apache.commons.io.IOUtils.read(inputStream72, byteArray74);
        long long76 = org.apache.commons.io.IOUtils.copyLarge(inputStream68, outputStream69, 0L, 0L, byteArray74);
        long long77 = org.apache.commons.io.IOUtils.copyLarge(inputStream53, outputStream66, byteArray74);
        org.apache.commons.io.IOUtils.readFully(inputStream37, byteArray74);
        org.apache.commons.io.IOUtils.readFully(inputStream21, byteArray74);
        java.lang.String str80 = org.apache.commons.io.IOUtils.toString(byteArray74);
        org.apache.commons.io.IOUtils.readFully(inputStream12, byteArray74);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream12);
        org.apache.commons.io.IOUtils.closeQuietly(inputStream12);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream10);
        org.junit.Assert.assertNotNull(inputStream12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(bufferedInputStream16);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream19);
        org.junit.Assert.assertNotNull(inputStream21);
        org.junit.Assert.assertNotNull(inputStream24);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream35);
        org.junit.Assert.assertNotNull(inputStream37);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertNotNull(inputStream41);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertNotNull(strList51);
        org.junit.Assert.assertNotNull(inputStream53);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
        org.junit.Assert.assertNotNull(strList63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(inputStream68);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 0L + "'", long76 == 0L);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 0L + "'", long77 == 0L);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
    }

    @Test
    public void test3212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3212");
        java.io.Reader reader0 = null;
        java.io.InputStream inputStream2 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray3 = new byte[] {};
        int int4 = org.apache.commons.io.IOUtils.length(byteArray3);
        int int5 = org.apache.commons.io.IOUtils.read(inputStream2, byteArray3);
        byte[] byteArray6 = org.apache.commons.io.IOUtils.toByteArray(inputStream2);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer7 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream2, iOExceptionConsumer7);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream2);
        java.io.BufferedInputStream bufferedInputStream11 = org.apache.commons.io.IOUtils.buffer(inputStream2, (int) (byte) 10);
        java.io.InputStream inputStream13 = org.apache.commons.io.IOUtils.toBufferedInputStream((java.io.InputStream) bufferedInputStream11, (int) '#');
        char[] charArray14 = org.apache.commons.io.IOUtils.toCharArray((java.io.InputStream) bufferedInputStream11);
        int int17 = org.apache.commons.io.IOUtils.read(reader0, charArray14, 2, (int) (short) 0);
        org.junit.Assert.assertNotNull(inputStream2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream11);
        org.junit.Assert.assertNotNull(inputStream13);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test3213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3213");
        java.io.Reader reader0 = null;
        java.io.Reader reader1 = null;
        java.io.Reader reader2 = null;
        java.io.Reader reader3 = null;
        java.io.Reader reader4 = null;
        java.io.Reader reader5 = null;
        java.io.Writer writer6 = null;
        char[] charArray9 = new char[] {};
        int int10 = org.apache.commons.io.IOUtils.length(charArray9);
        java.io.Writer writer11 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray9, writer11);
        java.io.Writer writer13 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray9, writer13);
        long long15 = org.apache.commons.io.IOUtils.copyLarge(reader5, writer6, 0L, (long) (byte) 100, charArray9);
        int int16 = org.apache.commons.io.IOUtils.read(reader4, charArray9);
        int int17 = org.apache.commons.io.IOUtils.length(charArray9);
        int int18 = org.apache.commons.io.IOUtils.read(reader3, charArray9);
        int int19 = org.apache.commons.io.IOUtils.read(reader2, charArray9);
        java.io.Writer writer20 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray9, writer20);
        int int22 = org.apache.commons.io.IOUtils.read(reader1, charArray9);
        org.apache.commons.io.IOUtils.readFully(reader0, charArray9);
        java.io.Writer writer24 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray9, writer24);
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
    }

    @Test
    public void test3214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3214");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        java.io.BufferedInputStream bufferedInputStream10 = org.apache.commons.io.IOUtils.buffer(inputStream1);
        java.io.InputStream inputStream12 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, (int) (short) 0);
        java.io.BufferedInputStream bufferedInputStream14 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 1);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream10);
        org.junit.Assert.assertNotNull(inputStream12);
        org.junit.Assert.assertNotNull(bufferedInputStream14);
    }

    @Test
    public void test3215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3215");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        java.io.OutputStream outputStream10 = null;
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream10, (long) (short) 0, (-1L));
        java.lang.String str14 = org.apache.commons.io.IOUtils.toString(inputStream1);
        java.io.BufferedInputStream bufferedInputStream15 = org.apache.commons.io.IOUtils.buffer(inputStream1);
        java.io.InputStream inputStream17 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream18 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray23 = org.apache.commons.io.IOUtils.toByteArray("");
        int int24 = org.apache.commons.io.IOUtils.read(inputStream21, byteArray23);
        long long25 = org.apache.commons.io.IOUtils.copyLarge(inputStream17, outputStream18, 0L, 0L, byteArray23);
        java.io.OutputStream outputStream26 = null;
        long long29 = org.apache.commons.io.IOUtils.copyLarge(inputStream17, outputStream26, (long) (short) 0, (-1L));
        java.lang.String str30 = org.apache.commons.io.IOUtils.toString(inputStream17);
        java.io.BufferedInputStream bufferedInputStream31 = org.apache.commons.io.IOUtils.buffer(inputStream17);
        java.io.OutputStream outputStream32 = null;
        java.io.InputStream inputStream34 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray35 = new byte[] {};
        int int36 = org.apache.commons.io.IOUtils.length(byteArray35);
        int int37 = org.apache.commons.io.IOUtils.read(inputStream34, byteArray35);
        byte[] byteArray38 = org.apache.commons.io.IOUtils.toByteArray(inputStream34);
        byte[] byteArray39 = org.apache.commons.io.IOUtils.toByteArray(inputStream34);
        java.io.OutputStream outputStream40 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray39, outputStream40);
        long long42 = org.apache.commons.io.IOUtils.copyLarge(inputStream17, outputStream32, byteArray39);
        org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray39);
        java.io.InputStream inputStream45 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, (int) '\\');
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(bufferedInputStream15);
        org.junit.Assert.assertNotNull(inputStream17);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(bufferedInputStream31);
        org.junit.Assert.assertNotNull(inputStream34);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(inputStream45);
    }

    @Test
    public void test3216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3216");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        java.io.BufferedInputStream bufferedInputStream6 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) ' ');
        java.io.InputStream inputStream8 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, 4);
        java.io.Writer writer9 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer9);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(bufferedInputStream6);
        org.junit.Assert.assertNotNull(inputStream8);
    }

    @Test
    public void test3217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3217");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.BufferedInputStream bufferedInputStream10 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.io.InputStream inputStream12 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, (int) (byte) 1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer13 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer13);
        java.io.OutputStream outputStream15 = null;
        java.io.InputStream inputStream17 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray18 = new byte[] {};
        int int19 = org.apache.commons.io.IOUtils.length(byteArray18);
        int int20 = org.apache.commons.io.IOUtils.read(inputStream17, byteArray18);
        byte[] byteArray21 = org.apache.commons.io.IOUtils.toByteArray(inputStream17);
        java.io.InputStream inputStream23 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray24 = new byte[] {};
        int int25 = org.apache.commons.io.IOUtils.length(byteArray24);
        int int26 = org.apache.commons.io.IOUtils.read(inputStream23, byteArray24);
        byte[] byteArray27 = org.apache.commons.io.IOUtils.toByteArray(inputStream23);
        int int28 = org.apache.commons.io.IOUtils.length(byteArray27);
        org.apache.commons.io.IOUtils.readFully(inputStream17, byteArray27);
        long long30 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream15, byteArray27);
        java.io.BufferedInputStream bufferedInputStream32 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (short) 100);
        java.io.InputStream inputStream33 = org.apache.commons.io.IOUtils.toBufferedInputStream((java.io.InputStream) bufferedInputStream32);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer34 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) bufferedInputStream32, iOExceptionConsumer34);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream10);
        org.junit.Assert.assertNotNull(inputStream12);
        org.junit.Assert.assertNotNull(inputStream17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertNotNull(inputStream23);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream32);
        org.junit.Assert.assertNotNull(inputStream33);
    }

    @Test
    public void test3218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3218");
        java.io.Reader reader0 = null;
        java.io.Reader reader1 = null;
        java.io.InputStream inputStream3 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray4 = new byte[] {};
        int int5 = org.apache.commons.io.IOUtils.length(byteArray4);
        int int6 = org.apache.commons.io.IOUtils.read(inputStream3, byteArray4);
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray(inputStream3);
        byte[] byteArray9 = org.apache.commons.io.IOUtils.toByteArray(inputStream3, (int) (short) 0);
        java.io.BufferedInputStream bufferedInputStream10 = org.apache.commons.io.IOUtils.buffer(inputStream3);
        java.nio.charset.Charset charset11 = null;
        org.apache.commons.io.LineIterator lineIterator12 = org.apache.commons.io.IOUtils.lineIterator(inputStream3, charset11);
        char[] charArray13 = org.apache.commons.io.IOUtils.toCharArray(inputStream3);
        int int14 = org.apache.commons.io.IOUtils.read(reader1, charArray13);
        int int17 = org.apache.commons.io.IOUtils.read(reader0, charArray13, (int) (short) -1, (int) (short) 0);
        org.junit.Assert.assertNotNull(inputStream3);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream10);
        org.junit.Assert.assertNotNull(lineIterator12);
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test3219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3219");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.BufferedInputStream bufferedInputStream10 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        byte[] byteArray11 = null;
        org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray11, (int) '4', 0);
        java.util.List<java.lang.String> strList15 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.OutputStream outputStream16 = null;
        long long17 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream16);
        java.io.BufferedInputStream bufferedInputStream18 = org.apache.commons.io.IOUtils.buffer(inputStream1);
        java.io.InputStream inputStream20 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "\n");
        java.util.List<java.lang.String> strList21 = org.apache.commons.io.IOUtils.readLines(inputStream20);
        java.io.OutputStream outputStream22 = null;
        java.io.InputStream inputStream24 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray25 = new byte[] {};
        int int26 = org.apache.commons.io.IOUtils.length(byteArray25);
        int int27 = org.apache.commons.io.IOUtils.read(inputStream24, byteArray25);
        byte[] byteArray28 = org.apache.commons.io.IOUtils.toByteArray(inputStream24);
        byte[] byteArray30 = org.apache.commons.io.IOUtils.toByteArray(inputStream24, (int) (short) 0);
        byte[] byteArray31 = new byte[] {};
        int int32 = org.apache.commons.io.IOUtils.length(byteArray31);
        org.apache.commons.io.IOUtils.readFully(inputStream24, byteArray31);
        java.lang.String str34 = org.apache.commons.io.IOUtils.toString(byteArray31);
        int int35 = org.apache.commons.io.IOUtils.length(byteArray31);
        long long36 = org.apache.commons.io.IOUtils.copyLarge(inputStream20, outputStream22, byteArray31);
        int int37 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray31);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream10);
        org.junit.Assert.assertNotNull(strList15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream18);
        org.junit.Assert.assertNotNull(inputStream20);
        org.junit.Assert.assertNotNull(strList21);
        org.junit.Assert.assertNotNull(inputStream24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
    }

    @Test
    public void test3220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3220");
        java.io.Reader reader0 = null;
        char[] charArray1 = new char[] {};
        int int2 = org.apache.commons.io.IOUtils.length(charArray1);
        java.io.Writer writer3 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray1, writer3);
        int int5 = org.apache.commons.io.IOUtils.length(charArray1);
        java.io.Writer writer6 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray1, writer6);
        // The following exception was thrown during execution in test generation
        try {
            int int10 = org.apache.commons.io.IOUtils.read(reader0, charArray1, (int) (byte) -1, 6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[], int, int)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray1);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray1), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray1), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray1), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test3221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3221");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.io.InputStream inputStream7 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray8 = new byte[] {};
        int int9 = org.apache.commons.io.IOUtils.length(byteArray8);
        int int10 = org.apache.commons.io.IOUtils.read(inputStream7, byteArray8);
        byte[] byteArray11 = org.apache.commons.io.IOUtils.toByteArray(inputStream7);
        int int12 = org.apache.commons.io.IOUtils.length(byteArray11);
        org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray11);
        char[] charArray14 = org.apache.commons.io.IOUtils.toCharArray(inputStream1);
        java.io.Writer writer15 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray14, writer15);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(inputStream7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[]");
    }

    @Test
    public void test3222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3222");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream5 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray("");
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray10);
        long long12 = org.apache.commons.io.IOUtils.copyLarge(inputStream4, outputStream5, 0L, 0L, byteArray10);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, byteArray10);
        java.io.BufferedInputStream bufferedInputStream15 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.io.InputStream inputStream17 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray18 = org.apache.commons.io.IOUtils.toByteArray(inputStream17);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream17);
        java.io.InputStream inputStream21 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream22 = null;
        java.io.InputStream inputStream25 = null;
        byte[] byteArray27 = org.apache.commons.io.IOUtils.toByteArray("");
        int int28 = org.apache.commons.io.IOUtils.read(inputStream25, byteArray27);
        long long29 = org.apache.commons.io.IOUtils.copyLarge(inputStream21, outputStream22, 0L, 0L, byteArray27);
        java.nio.charset.Charset charset30 = null;
        java.util.List<java.lang.String> strList31 = org.apache.commons.io.IOUtils.readLines(inputStream21, charset30);
        java.io.InputStream inputStream33 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream34 = null;
        java.io.InputStream inputStream37 = null;
        byte[] byteArray39 = org.apache.commons.io.IOUtils.toByteArray("");
        int int40 = org.apache.commons.io.IOUtils.read(inputStream37, byteArray39);
        long long41 = org.apache.commons.io.IOUtils.copyLarge(inputStream33, outputStream34, 0L, 0L, byteArray39);
        java.nio.charset.Charset charset42 = null;
        java.util.List<java.lang.String> strList43 = org.apache.commons.io.IOUtils.readLines(inputStream33, charset42);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream33);
        boolean boolean45 = org.apache.commons.io.IOUtils.contentEquals(inputStream21, inputStream33);
        java.io.OutputStream outputStream46 = null;
        java.io.InputStream inputStream48 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream49 = null;
        java.io.InputStream inputStream52 = null;
        byte[] byteArray54 = org.apache.commons.io.IOUtils.toByteArray("");
        int int55 = org.apache.commons.io.IOUtils.read(inputStream52, byteArray54);
        long long56 = org.apache.commons.io.IOUtils.copyLarge(inputStream48, outputStream49, 0L, 0L, byteArray54);
        long long57 = org.apache.commons.io.IOUtils.copyLarge(inputStream33, outputStream46, byteArray54);
        org.apache.commons.io.IOUtils.readFully(inputStream17, byteArray54);
        org.apache.commons.io.IOUtils.readFully((java.io.InputStream) bufferedInputStream15, byteArray54);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.LineIterator lineIterator61 = org.apache.commons.io.IOUtils.lineIterator((java.io.InputStream) bufferedInputStream15, "\r\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ??");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream15);
        org.junit.Assert.assertNotNull(inputStream17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(inputStream21);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNotNull(strList31);
        org.junit.Assert.assertNotNull(inputStream33);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertNotNull(strList43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(inputStream48);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
    }

    @Test
    public void test3223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3223");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.BufferedInputStream bufferedInputStream10 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        byte[] byteArray11 = null;
        org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray11, (int) '4', 0);
        java.io.OutputStream outputStream15 = null;
        long long17 = org.apache.commons.io.IOUtils.copy(inputStream1, outputStream15, 0);
        char[] charArray18 = org.apache.commons.io.IOUtils.toCharArray(inputStream1);
        java.io.BufferedInputStream bufferedInputStream19 = org.apache.commons.io.IOUtils.buffer(inputStream1);
        java.io.OutputStream outputStream20 = null;
        long long21 = org.apache.commons.io.IOUtils.copyLarge((java.io.InputStream) bufferedInputStream19, outputStream20);
        java.io.OutputStream outputStream22 = null;
        java.io.InputStream inputStream24 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream25 = null;
        java.io.InputStream inputStream28 = null;
        byte[] byteArray30 = org.apache.commons.io.IOUtils.toByteArray("");
        int int31 = org.apache.commons.io.IOUtils.read(inputStream28, byteArray30);
        long long32 = org.apache.commons.io.IOUtils.copyLarge(inputStream24, outputStream25, 0L, 0L, byteArray30);
        java.nio.charset.Charset charset33 = null;
        java.util.List<java.lang.String> strList34 = org.apache.commons.io.IOUtils.readLines(inputStream24, charset33);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream24);
        java.nio.charset.Charset charset36 = null;
        java.lang.String str37 = org.apache.commons.io.IOUtils.toString(inputStream24, charset36);
        java.io.Writer writer38 = null;
        org.apache.commons.io.IOUtils.copy(inputStream24, writer38);
        byte[] byteArray40 = org.apache.commons.io.IOUtils.toByteArray(inputStream24);
        // The following exception was thrown during execution in test generation
        try {
            long long41 = org.apache.commons.io.IOUtils.copyLarge((java.io.InputStream) bufferedInputStream19, outputStream22, byteArray40);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.OutputStream.write(byte[], int, int)\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream10);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(charArray18);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray18), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray18), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray18), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream19);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(inputStream24);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNotNull(strList34);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
    }

    @Test
    public void test3224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3224");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.util.List<java.lang.String> strList4 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.OutputStream outputStream5 = null;
        long long8 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream5, (long) 0, 0L);
        byte[] byteArray9 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
    }

    @Test
    public void test3225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3225");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray(inputStream1, (int) (short) 0);
        long long9 = org.apache.commons.io.IOUtils.skip(inputStream1, 100L);
        char[] charArray10 = org.apache.commons.io.IOUtils.toCharArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer11 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer11);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray14 = org.apache.commons.io.IOUtils.readFully(inputStream1, 3);
            org.junit.Assert.fail("Expected exception of type java.io.EOFException; message: Length to read: 3 actual: 0");
        } catch (java.io.EOFException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[]");
    }

    @Test
    public void test3226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3226");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.BufferedInputStream bufferedInputStream10 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.io.InputStream inputStream12 = org.apache.commons.io.IOUtils.toBufferedInputStream((java.io.InputStream) bufferedInputStream10, (int) '#');
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream12);
        java.io.BufferedInputStream bufferedInputStream14 = org.apache.commons.io.IOUtils.buffer(inputStream12);
        java.io.Writer writer15 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.copy((java.io.InputStream) bufferedInputStream14, writer15, "hi!");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: hi!");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream10);
        org.junit.Assert.assertNotNull(inputStream12);
        org.junit.Assert.assertNotNull(bufferedInputStream14);
    }

    @Test
    public void test3227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3227");
        java.io.InputStream inputStream0 = null;
        java.nio.charset.Charset charset1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str2 = org.apache.commons.io.IOUtils.toString(inputStream0, charset1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test3228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3228");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream5 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray("");
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray10);
        long long12 = org.apache.commons.io.IOUtils.copyLarge(inputStream4, outputStream5, 0L, 0L, byteArray10);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, byteArray10);
        java.io.BufferedInputStream bufferedInputStream15 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        org.apache.commons.io.IOUtils.closeQuietly(inputStream1);
        java.nio.charset.Charset charset17 = null;
        java.util.List<java.lang.String> strList18 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset17);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream20 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly(inputStream1);
        char[] charArray22 = org.apache.commons.io.IOUtils.toCharArray(inputStream1);
        java.io.OutputStream outputStream23 = null;
        java.io.InputStream inputStream25 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray26 = new byte[] {};
        int int27 = org.apache.commons.io.IOUtils.length(byteArray26);
        int int28 = org.apache.commons.io.IOUtils.read(inputStream25, byteArray26);
        byte[] byteArray29 = org.apache.commons.io.IOUtils.toByteArray(inputStream25);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer30 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream25, iOExceptionConsumer30);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream25);
        java.io.BufferedInputStream bufferedInputStream34 = org.apache.commons.io.IOUtils.buffer(inputStream25, (int) (byte) 10);
        java.io.InputStream inputStream36 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream25, (int) (byte) 1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer37 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream25, iOExceptionConsumer37);
        java.io.OutputStream outputStream39 = null;
        java.io.InputStream inputStream41 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray42 = new byte[] {};
        int int43 = org.apache.commons.io.IOUtils.length(byteArray42);
        int int44 = org.apache.commons.io.IOUtils.read(inputStream41, byteArray42);
        byte[] byteArray45 = org.apache.commons.io.IOUtils.toByteArray(inputStream41);
        java.io.InputStream inputStream47 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray48 = new byte[] {};
        int int49 = org.apache.commons.io.IOUtils.length(byteArray48);
        int int50 = org.apache.commons.io.IOUtils.read(inputStream47, byteArray48);
        byte[] byteArray51 = org.apache.commons.io.IOUtils.toByteArray(inputStream47);
        int int52 = org.apache.commons.io.IOUtils.length(byteArray51);
        org.apache.commons.io.IOUtils.readFully(inputStream41, byteArray51);
        long long54 = org.apache.commons.io.IOUtils.copyLarge(inputStream25, outputStream39, byteArray51);
        java.io.InputStream inputStream56 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream57 = null;
        java.io.InputStream inputStream60 = null;
        byte[] byteArray62 = org.apache.commons.io.IOUtils.toByteArray("");
        int int63 = org.apache.commons.io.IOUtils.read(inputStream60, byteArray62);
        long long64 = org.apache.commons.io.IOUtils.copyLarge(inputStream56, outputStream57, 0L, 0L, byteArray62);
        java.nio.charset.Charset charset65 = null;
        java.util.List<java.lang.String> strList66 = org.apache.commons.io.IOUtils.readLines(inputStream56, charset65);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream56);
        java.nio.charset.Charset charset68 = null;
        java.lang.String str69 = org.apache.commons.io.IOUtils.toString(inputStream56, charset68);
        java.io.Writer writer70 = null;
        org.apache.commons.io.IOUtils.copy(inputStream56, writer70);
        byte[] byteArray72 = org.apache.commons.io.IOUtils.toByteArray(inputStream56);
        int int73 = org.apache.commons.io.IOUtils.read(inputStream25, byteArray72);
        long long74 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream23, byteArray72);
        java.io.Writer writer75 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(byteArray72, writer75);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Writer.write(String)\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream15);
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertNotNull(inputStream20);
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray22), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray22), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray22), "[]");
        org.junit.Assert.assertNotNull(inputStream25);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream34);
        org.junit.Assert.assertNotNull(inputStream36);
        org.junit.Assert.assertNotNull(inputStream41);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
        org.junit.Assert.assertNotNull(inputStream47);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertNotNull(inputStream56);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L);
        org.junit.Assert.assertNotNull(strList66);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 0L + "'", long74 == 0L);
    }

    @Test
    public void test3229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3229");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.util.List<java.lang.String> strList4 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.OutputStream outputStream5 = null;
        long long6 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream5);
        java.io.Writer writer7 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer7);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream11 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray12 = new byte[] {};
        int int13 = org.apache.commons.io.IOUtils.length(byteArray12);
        int int14 = org.apache.commons.io.IOUtils.read(inputStream11, byteArray12);
        byte[] byteArray15 = org.apache.commons.io.IOUtils.toByteArray(inputStream11);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer16 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream11, iOExceptionConsumer16);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream11);
        java.io.BufferedInputStream bufferedInputStream20 = org.apache.commons.io.IOUtils.buffer(inputStream11, (int) (byte) 10);
        java.io.InputStream inputStream22 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream11, (int) (byte) 1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer23 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream11, iOExceptionConsumer23);
        java.io.OutputStream outputStream25 = null;
        java.io.InputStream inputStream27 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray28 = new byte[] {};
        int int29 = org.apache.commons.io.IOUtils.length(byteArray28);
        int int30 = org.apache.commons.io.IOUtils.read(inputStream27, byteArray28);
        byte[] byteArray31 = org.apache.commons.io.IOUtils.toByteArray(inputStream27);
        java.io.InputStream inputStream33 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray34 = new byte[] {};
        int int35 = org.apache.commons.io.IOUtils.length(byteArray34);
        int int36 = org.apache.commons.io.IOUtils.read(inputStream33, byteArray34);
        byte[] byteArray37 = org.apache.commons.io.IOUtils.toByteArray(inputStream33);
        int int38 = org.apache.commons.io.IOUtils.length(byteArray37);
        org.apache.commons.io.IOUtils.readFully(inputStream27, byteArray37);
        long long40 = org.apache.commons.io.IOUtils.copyLarge(inputStream11, outputStream25, byteArray37);
        boolean boolean41 = org.apache.commons.io.IOUtils.contentEquals(inputStream1, inputStream11);
        java.io.BufferedInputStream bufferedInputStream42 = org.apache.commons.io.IOUtils.buffer(inputStream1);
        java.io.BufferedInputStream bufferedInputStream44 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (short) 100);
        java.io.InputStream inputStream46 = org.apache.commons.io.IOUtils.toInputStream("\n");
        byte[] byteArray48 = org.apache.commons.io.IOUtils.toByteArray(inputStream46, (int) (byte) 0);
        java.io.InputStream inputStream50 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray51 = new byte[] {};
        int int52 = org.apache.commons.io.IOUtils.length(byteArray51);
        int int53 = org.apache.commons.io.IOUtils.read(inputStream50, byteArray51);
        byte[] byteArray54 = org.apache.commons.io.IOUtils.toByteArray(inputStream50);
        byte[] byteArray56 = org.apache.commons.io.IOUtils.toByteArray(inputStream50, (int) (short) 0);
        byte[] byteArray57 = new byte[] {};
        int int58 = org.apache.commons.io.IOUtils.length(byteArray57);
        org.apache.commons.io.IOUtils.readFully(inputStream50, byteArray57);
        org.apache.commons.io.IOUtils.readFully(inputStream46, byteArray57);
        boolean boolean61 = org.apache.commons.io.IOUtils.contentEquals(inputStream1, inputStream46);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer62 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream46, iOExceptionConsumer62);
        java.io.InputStream inputStream64 = null;
        java.io.OutputStream outputStream65 = null;
        byte[] byteArray68 = new byte[] {};
        int int69 = org.apache.commons.io.IOUtils.length(byteArray68);
        java.io.OutputStream outputStream70 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray68, outputStream70);
        long long72 = org.apache.commons.io.IOUtils.copyLarge(inputStream64, outputStream65, 0L, (long) (byte) -1, byteArray68);
        java.io.OutputStream outputStream73 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray68, outputStream73);
        org.apache.commons.io.IOUtils.readFully(inputStream46, byteArray68);
        java.io.OutputStream outputStream76 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray68, outputStream76);
        java.io.OutputStream outputStream78 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray68, outputStream78);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(inputStream11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream20);
        org.junit.Assert.assertNotNull(inputStream22);
        org.junit.Assert.assertNotNull(inputStream27);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(inputStream33);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(bufferedInputStream42);
        org.junit.Assert.assertNotNull(bufferedInputStream44);
        org.junit.Assert.assertNotNull(inputStream46);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertNotNull(inputStream50);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 0L + "'", long72 == 0L);
    }

    @Test
    public void test3230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3230");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.BufferedInputStream bufferedInputStream10 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.io.InputStream inputStream12 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, (int) (byte) 1);
        java.io.OutputStream outputStream13 = null;
        int int14 = org.apache.commons.io.IOUtils.copy(inputStream12, outputStream13);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream12);
        java.io.Writer writer16 = null;
        org.apache.commons.io.IOUtils.copy(inputStream12, writer16);
        java.io.OutputStream outputStream18 = null;
        java.io.InputStream inputStream20 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray21 = new byte[] {};
        int int22 = org.apache.commons.io.IOUtils.length(byteArray21);
        int int23 = org.apache.commons.io.IOUtils.read(inputStream20, byteArray21);
        byte[] byteArray24 = org.apache.commons.io.IOUtils.toByteArray(inputStream20);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer25 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream20, iOExceptionConsumer25);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream20);
        java.io.BufferedInputStream bufferedInputStream29 = org.apache.commons.io.IOUtils.buffer(inputStream20, (int) (byte) 10);
        java.io.InputStream inputStream31 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream20, (int) (byte) 1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer32 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream20, iOExceptionConsumer32);
        java.io.OutputStream outputStream34 = null;
        java.io.InputStream inputStream36 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray37 = new byte[] {};
        int int38 = org.apache.commons.io.IOUtils.length(byteArray37);
        int int39 = org.apache.commons.io.IOUtils.read(inputStream36, byteArray37);
        byte[] byteArray40 = org.apache.commons.io.IOUtils.toByteArray(inputStream36);
        java.io.InputStream inputStream42 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray43 = new byte[] {};
        int int44 = org.apache.commons.io.IOUtils.length(byteArray43);
        int int45 = org.apache.commons.io.IOUtils.read(inputStream42, byteArray43);
        byte[] byteArray46 = org.apache.commons.io.IOUtils.toByteArray(inputStream42);
        int int47 = org.apache.commons.io.IOUtils.length(byteArray46);
        org.apache.commons.io.IOUtils.readFully(inputStream36, byteArray46);
        long long49 = org.apache.commons.io.IOUtils.copyLarge(inputStream20, outputStream34, byteArray46);
        byte[] byteArray50 = org.apache.commons.io.IOUtils.toByteArray(inputStream20);
        java.io.InputStream inputStream52 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray53 = org.apache.commons.io.IOUtils.toByteArray(inputStream52);
        java.io.InputStream inputStream55 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray56 = new byte[] {};
        int int57 = org.apache.commons.io.IOUtils.length(byteArray56);
        int int58 = org.apache.commons.io.IOUtils.read(inputStream55, byteArray56);
        byte[] byteArray59 = org.apache.commons.io.IOUtils.toByteArray(inputStream55);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer60 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream55, iOExceptionConsumer60);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream55);
        java.io.BufferedInputStream bufferedInputStream64 = org.apache.commons.io.IOUtils.buffer(inputStream55, (int) (byte) 10);
        boolean boolean65 = org.apache.commons.io.IOUtils.contentEquals(inputStream52, inputStream55);
        java.io.OutputStream outputStream66 = null;
        long long69 = org.apache.commons.io.IOUtils.copyLarge(inputStream52, outputStream66, (long) (short) 0, (long) 2);
        java.io.OutputStream outputStream70 = null;
        int int71 = org.apache.commons.io.IOUtils.copy(inputStream52, outputStream70);
        java.io.OutputStream outputStream72 = null;
        byte[] byteArray73 = new byte[] {};
        int int74 = org.apache.commons.io.IOUtils.length(byteArray73);
        java.io.OutputStream outputStream75 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray73, outputStream75);
        long long77 = org.apache.commons.io.IOUtils.copyLarge(inputStream52, outputStream72, byteArray73);
        org.apache.commons.io.IOUtils.readFully(inputStream20, byteArray73);
        // The following exception was thrown during execution in test generation
        try {
            long long79 = org.apache.commons.io.IOUtils.copyLarge(inputStream12, outputStream18, byteArray73);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.OutputStream.write(byte[], int, int)\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream10);
        org.junit.Assert.assertNotNull(inputStream12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(inputStream20);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream29);
        org.junit.Assert.assertNotNull(inputStream31);
        org.junit.Assert.assertNotNull(inputStream36);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertNotNull(inputStream42);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[]");
        org.junit.Assert.assertNotNull(inputStream52);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[]");
        org.junit.Assert.assertNotNull(inputStream55);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 0L + "'", long69 == 0L);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 0L + "'", long77 == 0L);
    }

    @Test
    public void test3231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3231");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray(inputStream1, (int) (short) 0);
        java.io.BufferedInputStream bufferedInputStream8 = org.apache.commons.io.IOUtils.buffer(inputStream1);
        java.io.Writer writer9 = null;
        org.apache.commons.io.IOUtils.copy((java.io.InputStream) bufferedInputStream8, writer9);
        java.io.InputStream inputStream12 = org.apache.commons.io.IOUtils.toBufferedInputStream((java.io.InputStream) bufferedInputStream8, (int) (byte) 1);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream8);
        org.junit.Assert.assertNotNull(inputStream12);
    }

    @Test
    public void test3232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3232");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        java.nio.charset.Charset charset10 = null;
        java.util.List<java.lang.String> strList11 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset10);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream14 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, (int) (byte) 0);
        java.nio.charset.Charset charset15 = null;
        org.apache.commons.io.LineIterator lineIterator16 = org.apache.commons.io.IOUtils.lineIterator(inputStream1, charset15);
        org.apache.commons.io.IOUtils.closeQuietly(inputStream1);
        java.io.OutputStream outputStream18 = null;
        long long21 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream18, (long) 0, 0L);
        java.io.BufferedInputStream bufferedInputStream22 = org.apache.commons.io.IOUtils.buffer(inputStream1);
        java.lang.String str23 = org.apache.commons.io.IOUtils.toString((java.io.InputStream) bufferedInputStream22);
        java.util.List<java.lang.String> strList24 = org.apache.commons.io.IOUtils.readLines((java.io.InputStream) bufferedInputStream22);
        java.io.Writer writer25 = null;
        org.apache.commons.io.IOUtils.copy((java.io.InputStream) bufferedInputStream22, writer25);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertNotNull(inputStream14);
        org.junit.Assert.assertNotNull(lineIterator16);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(strList24);
    }

    @Test
    public void test3233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3233");
        java.nio.charset.Charset charset1 = null;
        java.io.InputStream inputStream2 = org.apache.commons.io.IOUtils.toInputStream("\r\n", charset1);
        java.nio.charset.Charset charset3 = null;
        java.lang.String str4 = org.apache.commons.io.IOUtils.toString(inputStream2, charset3);
        java.io.OutputStream outputStream5 = null;
        java.io.InputStream inputStream9 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray10 = new byte[] {};
        int int11 = org.apache.commons.io.IOUtils.length(byteArray10);
        int int12 = org.apache.commons.io.IOUtils.read(inputStream9, byteArray10);
        byte[] byteArray13 = org.apache.commons.io.IOUtils.toByteArray(inputStream9);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer14 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream9, iOExceptionConsumer14);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream9);
        java.io.BufferedInputStream bufferedInputStream18 = org.apache.commons.io.IOUtils.buffer(inputStream9, (int) (byte) 10);
        java.io.InputStream inputStream20 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream9, (int) (byte) 1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer21 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream9, iOExceptionConsumer21);
        java.io.OutputStream outputStream23 = null;
        java.io.InputStream inputStream25 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray26 = new byte[] {};
        int int27 = org.apache.commons.io.IOUtils.length(byteArray26);
        int int28 = org.apache.commons.io.IOUtils.read(inputStream25, byteArray26);
        byte[] byteArray29 = org.apache.commons.io.IOUtils.toByteArray(inputStream25);
        java.io.InputStream inputStream31 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray32 = new byte[] {};
        int int33 = org.apache.commons.io.IOUtils.length(byteArray32);
        int int34 = org.apache.commons.io.IOUtils.read(inputStream31, byteArray32);
        byte[] byteArray35 = org.apache.commons.io.IOUtils.toByteArray(inputStream31);
        int int36 = org.apache.commons.io.IOUtils.length(byteArray35);
        org.apache.commons.io.IOUtils.readFully(inputStream25, byteArray35);
        long long38 = org.apache.commons.io.IOUtils.copyLarge(inputStream9, outputStream23, byteArray35);
        java.io.InputStream inputStream40 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream41 = null;
        java.io.InputStream inputStream44 = null;
        byte[] byteArray46 = org.apache.commons.io.IOUtils.toByteArray("");
        int int47 = org.apache.commons.io.IOUtils.read(inputStream44, byteArray46);
        long long48 = org.apache.commons.io.IOUtils.copyLarge(inputStream40, outputStream41, 0L, 0L, byteArray46);
        java.nio.charset.Charset charset49 = null;
        java.util.List<java.lang.String> strList50 = org.apache.commons.io.IOUtils.readLines(inputStream40, charset49);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream40);
        java.nio.charset.Charset charset52 = null;
        java.lang.String str53 = org.apache.commons.io.IOUtils.toString(inputStream40, charset52);
        java.io.Writer writer54 = null;
        org.apache.commons.io.IOUtils.copy(inputStream40, writer54);
        byte[] byteArray56 = org.apache.commons.io.IOUtils.toByteArray(inputStream40);
        int int57 = org.apache.commons.io.IOUtils.read(inputStream9, byteArray56);
        // The following exception was thrown during execution in test generation
        try {
            long long58 = org.apache.commons.io.IOUtils.copyLarge(inputStream2, outputStream5, (long) '4', 1L, byteArray56);
            org.junit.Assert.fail("Expected exception of type java.io.EOFException; message: Bytes to skip: 52 actual: 0");
        } catch (java.io.EOFException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\r\n" + "'", str4, "\r\n");
        org.junit.Assert.assertNotNull(inputStream9);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream18);
        org.junit.Assert.assertNotNull(inputStream20);
        org.junit.Assert.assertNotNull(inputStream25);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(inputStream31);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertNotNull(inputStream40);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertNotNull(strList50);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
    }

    @Test
    public void test3234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3234");
        java.nio.charset.Charset charset1 = null;
        java.io.InputStream inputStream2 = org.apache.commons.io.IOUtils.toInputStream("\r\n", charset1);
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray5 = new byte[] {};
        int int6 = org.apache.commons.io.IOUtils.length(byteArray5);
        int int7 = org.apache.commons.io.IOUtils.read(inputStream4, byteArray5);
        java.lang.String str8 = org.apache.commons.io.IOUtils.toString(byteArray5);
        java.io.OutputStream outputStream9 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray5, outputStream9);
        int int13 = org.apache.commons.io.IOUtils.read(inputStream2, byteArray5, (int) (short) 1, (int) (short) 0);
        java.lang.String str14 = org.apache.commons.io.IOUtils.toString(byteArray5);
        org.junit.Assert.assertNotNull(inputStream2);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
    }

    @Test
    public void test3235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3235");
        java.io.Reader reader0 = null;
        java.io.InputStream inputStream2 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray3 = new byte[] {};
        int int4 = org.apache.commons.io.IOUtils.length(byteArray3);
        int int5 = org.apache.commons.io.IOUtils.read(inputStream2, byteArray3);
        org.apache.commons.io.IOUtils.closeQuietly(inputStream2);
        java.io.InputStream inputStream8 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray9 = new byte[] {};
        int int10 = org.apache.commons.io.IOUtils.length(byteArray9);
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray9);
        java.lang.String str12 = org.apache.commons.io.IOUtils.toString(byteArray9);
        int int15 = org.apache.commons.io.IOUtils.read(inputStream2, byteArray9, (int) (byte) 10, (int) (short) 0);
        char[] charArray16 = org.apache.commons.io.IOUtils.toCharArray(inputStream2);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.readFully(reader0, charArray16, 0, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[], int, int)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(inputStream8);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(charArray16);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray16), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray16), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray16), "[]");
    }

    @Test
    public void test3236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3236");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray5 = new byte[] {};
        int int6 = org.apache.commons.io.IOUtils.length(byteArray5);
        int int7 = org.apache.commons.io.IOUtils.read(inputStream4, byteArray5);
        byte[] byteArray8 = org.apache.commons.io.IOUtils.toByteArray(inputStream4);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer9 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream4, iOExceptionConsumer9);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream4);
        java.io.BufferedInputStream bufferedInputStream13 = org.apache.commons.io.IOUtils.buffer(inputStream4, (int) (byte) 10);
        boolean boolean14 = org.apache.commons.io.IOUtils.contentEquals(inputStream1, inputStream4);
        java.io.OutputStream outputStream15 = null;
        long long18 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream15, (long) (short) 0, (long) 2);
        java.io.InputStream inputStream20 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, 0);
        char[] charArray21 = org.apache.commons.io.IOUtils.toCharArray(inputStream20);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(inputStream20);
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[]");
    }

    @Test
    public void test3237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3237");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream3 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1);
        java.io.OutputStream outputStream4 = null;
        int int5 = org.apache.commons.io.IOUtils.copy(inputStream3, outputStream4);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.LineIterator lineIterator7 = org.apache.commons.io.IOUtils.lineIterator(inputStream3, "hi!");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: hi!");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test3238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3238");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray5 = new byte[] {};
        int int6 = org.apache.commons.io.IOUtils.length(byteArray5);
        int int7 = org.apache.commons.io.IOUtils.read(inputStream4, byteArray5);
        byte[] byteArray8 = org.apache.commons.io.IOUtils.toByteArray(inputStream4);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer9 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream4, iOExceptionConsumer9);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream4);
        java.io.BufferedInputStream bufferedInputStream13 = org.apache.commons.io.IOUtils.buffer(inputStream4, (int) (byte) 10);
        boolean boolean14 = org.apache.commons.io.IOUtils.contentEquals(inputStream1, inputStream4);
        java.io.InputStream inputStream16 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray17 = new byte[] {};
        int int18 = org.apache.commons.io.IOUtils.length(byteArray17);
        int int19 = org.apache.commons.io.IOUtils.read(inputStream16, byteArray17);
        byte[] byteArray20 = org.apache.commons.io.IOUtils.toByteArray(inputStream16);
        byte[] byteArray22 = org.apache.commons.io.IOUtils.toByteArray(inputStream16, (int) (short) 0);
        long long24 = org.apache.commons.io.IOUtils.skip(inputStream16, 100L);
        java.io.InputStream inputStream25 = null;
        java.io.InputStream inputStream26 = null;
        java.io.OutputStream outputStream27 = null;
        byte[] byteArray30 = new byte[] {};
        int int31 = org.apache.commons.io.IOUtils.length(byteArray30);
        java.io.OutputStream outputStream32 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray30, outputStream32);
        long long34 = org.apache.commons.io.IOUtils.copyLarge(inputStream26, outputStream27, 0L, (long) (byte) -1, byteArray30);
        java.io.OutputStream outputStream35 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray30, outputStream35);
        org.apache.commons.io.IOUtils.readFully(inputStream25, byteArray30);
        int int38 = org.apache.commons.io.IOUtils.read(inputStream16, byteArray30);
        int int39 = org.apache.commons.io.IOUtils.read(inputStream4, byteArray30);
        java.io.Writer writer40 = null;
        org.apache.commons.io.IOUtils.copy(inputStream4, writer40);
        byte[] byteArray42 = org.apache.commons.io.IOUtils.toByteArray(inputStream4);
        java.io.InputStream inputStream43 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream4);
        java.lang.Class<?> wildcardClass44 = inputStream4.getClass();
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(inputStream16);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertNotNull(inputStream43);
        org.junit.Assert.assertNotNull(wildcardClass44);
    }

    @Test
    public void test3239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3239");
        java.io.Reader reader0 = null;
        java.io.Reader reader1 = null;
        java.io.Reader reader2 = null;
        java.io.Reader reader3 = null;
        java.io.Writer writer4 = null;
        char[] charArray7 = new char[] {};
        int int8 = org.apache.commons.io.IOUtils.length(charArray7);
        java.io.Writer writer9 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray7, writer9);
        java.io.Writer writer11 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray7, writer11);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(reader3, writer4, 0L, (long) (byte) 100, charArray7);
        int int14 = org.apache.commons.io.IOUtils.read(reader2, charArray7);
        int int15 = org.apache.commons.io.IOUtils.length(charArray7);
        int int16 = org.apache.commons.io.IOUtils.read(reader1, charArray7);
        int int17 = org.apache.commons.io.IOUtils.read(reader0, charArray7);
        java.io.Writer writer18 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray7, writer18);
        java.io.Writer writer20 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray7, writer20);
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test3240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3240");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        java.nio.charset.Charset charset5 = null;
        org.apache.commons.io.LineIterator lineIterator6 = org.apache.commons.io.IOUtils.lineIterator(inputStream1, charset5);
        java.io.InputStream inputStream8 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray9 = new byte[] {};
        int int10 = org.apache.commons.io.IOUtils.length(byteArray9);
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray9);
        byte[] byteArray12 = org.apache.commons.io.IOUtils.toByteArray(inputStream8);
        boolean boolean13 = org.apache.commons.io.IOUtils.contentEquals(inputStream1, inputStream8);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.BufferedInputStream bufferedInputStream16 = org.apache.commons.io.IOUtils.buffer(inputStream1, 3);
        java.util.List<java.lang.String> strList17 = org.apache.commons.io.IOUtils.readLines((java.io.InputStream) bufferedInputStream16);
        byte[] byteArray19 = org.apache.commons.io.IOUtils.toByteArray((java.io.InputStream) bufferedInputStream16, 0L);
        java.io.BufferedInputStream bufferedInputStream21 = org.apache.commons.io.IOUtils.buffer((java.io.InputStream) bufferedInputStream16, 10);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(lineIterator6);
        org.junit.Assert.assertNotNull(inputStream8);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(bufferedInputStream16);
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream21);
    }

    @Test
    public void test3241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3241");
        java.io.InputStream inputStream0 = null;
        java.io.OutputStream outputStream1 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long4 = org.apache.commons.io.IOUtils.copyLarge(inputStream0, outputStream1, (long) 10, (long) (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.InputStream.read(byte[], int, int)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test3242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3242");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray5 = new byte[] {};
        int int6 = org.apache.commons.io.IOUtils.length(byteArray5);
        int int7 = org.apache.commons.io.IOUtils.read(inputStream4, byteArray5);
        byte[] byteArray8 = org.apache.commons.io.IOUtils.toByteArray(inputStream4);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer9 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream4, iOExceptionConsumer9);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream4);
        java.io.BufferedInputStream bufferedInputStream13 = org.apache.commons.io.IOUtils.buffer(inputStream4, (int) (byte) 10);
        boolean boolean14 = org.apache.commons.io.IOUtils.contentEquals(inputStream1, inputStream4);
        java.io.InputStream inputStream16 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray17 = new byte[] {};
        int int18 = org.apache.commons.io.IOUtils.length(byteArray17);
        int int19 = org.apache.commons.io.IOUtils.read(inputStream16, byteArray17);
        byte[] byteArray20 = org.apache.commons.io.IOUtils.toByteArray(inputStream16);
        byte[] byteArray22 = org.apache.commons.io.IOUtils.toByteArray(inputStream16, (int) (short) 0);
        long long24 = org.apache.commons.io.IOUtils.skip(inputStream16, 100L);
        java.io.InputStream inputStream25 = null;
        java.io.InputStream inputStream26 = null;
        java.io.OutputStream outputStream27 = null;
        byte[] byteArray30 = new byte[] {};
        int int31 = org.apache.commons.io.IOUtils.length(byteArray30);
        java.io.OutputStream outputStream32 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray30, outputStream32);
        long long34 = org.apache.commons.io.IOUtils.copyLarge(inputStream26, outputStream27, 0L, (long) (byte) -1, byteArray30);
        java.io.OutputStream outputStream35 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray30, outputStream35);
        org.apache.commons.io.IOUtils.readFully(inputStream25, byteArray30);
        int int38 = org.apache.commons.io.IOUtils.read(inputStream16, byteArray30);
        int int39 = org.apache.commons.io.IOUtils.read(inputStream4, byteArray30);
        java.io.Writer writer40 = null;
        org.apache.commons.io.IOUtils.copy(inputStream4, writer40);
        java.nio.charset.Charset charset42 = null;
        org.apache.commons.io.LineIterator lineIterator43 = org.apache.commons.io.IOUtils.lineIterator(inputStream4, charset42);
        java.nio.charset.Charset charset44 = null;
        java.lang.String str45 = org.apache.commons.io.IOUtils.toString(inputStream4, charset44);
        org.apache.commons.io.IOUtils.closeQuietly(inputStream4);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(inputStream16);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(lineIterator43);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
    }

    @Test
    public void test3243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3243");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        org.apache.commons.io.IOUtils.closeQuietly(inputStream1);
        java.io.InputStream inputStream7 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray8 = new byte[] {};
        int int9 = org.apache.commons.io.IOUtils.length(byteArray8);
        int int10 = org.apache.commons.io.IOUtils.read(inputStream7, byteArray8);
        java.lang.String str11 = org.apache.commons.io.IOUtils.toString(byteArray8);
        int int14 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray8, (int) (byte) 10, (int) (short) 0);
        java.io.OutputStream outputStream15 = null;
        long long17 = org.apache.commons.io.IOUtils.copy(inputStream1, outputStream15, (int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            char[] charArray19 = org.apache.commons.io.IOUtils.toCharArray(inputStream1, "");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(inputStream7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
    }

    @Test
    public void test3244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3244");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        java.io.BufferedInputStream bufferedInputStream10 = org.apache.commons.io.IOUtils.buffer(inputStream1);
        java.io.InputStream inputStream11 = org.apache.commons.io.IOUtils.toBufferedInputStream((java.io.InputStream) bufferedInputStream10);
        org.apache.commons.io.function.IOConsumer<java.io.IOException> iOExceptionIOConsumer12 = null;
        org.apache.commons.io.IOUtils.close((java.io.Closeable) bufferedInputStream10, iOExceptionIOConsumer12);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream10);
        org.junit.Assert.assertNotNull(inputStream11);
    }

    @Test
    public void test3245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3245");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        java.io.BufferedInputStream bufferedInputStream6 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) ' ');
        java.io.InputStream inputStream8 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, 4);
        byte[] byteArray10 = org.apache.commons.io.IOUtils.readFully(inputStream8, (int) (byte) 0);
        java.io.InputStream inputStream12 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray13 = new byte[] {};
        int int14 = org.apache.commons.io.IOUtils.length(byteArray13);
        int int15 = org.apache.commons.io.IOUtils.read(inputStream12, byteArray13);
        byte[] byteArray16 = org.apache.commons.io.IOUtils.toByteArray(inputStream12);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer17 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream12, iOExceptionConsumer17);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream12);
        java.io.BufferedInputStream bufferedInputStream21 = org.apache.commons.io.IOUtils.buffer(inputStream12, (int) (byte) 10);
        byte[] byteArray22 = null;
        org.apache.commons.io.IOUtils.readFully(inputStream12, byteArray22, (int) '4', 0);
        java.io.BufferedInputStream bufferedInputStream26 = org.apache.commons.io.IOUtils.buffer(inputStream12);
        java.io.InputStream inputStream27 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream12);
        java.io.InputStream inputStream29 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream30 = null;
        java.io.InputStream inputStream32 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream33 = null;
        java.io.InputStream inputStream36 = null;
        byte[] byteArray38 = org.apache.commons.io.IOUtils.toByteArray("");
        int int39 = org.apache.commons.io.IOUtils.read(inputStream36, byteArray38);
        long long40 = org.apache.commons.io.IOUtils.copyLarge(inputStream32, outputStream33, 0L, 0L, byteArray38);
        long long41 = org.apache.commons.io.IOUtils.copyLarge(inputStream29, outputStream30, byteArray38);
        java.io.BufferedInputStream bufferedInputStream43 = org.apache.commons.io.IOUtils.buffer(inputStream29, (int) (byte) 10);
        org.apache.commons.io.IOUtils.closeQuietly(inputStream29);
        java.io.InputStream inputStream46 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray47 = new byte[] {};
        int int48 = org.apache.commons.io.IOUtils.length(byteArray47);
        int int49 = org.apache.commons.io.IOUtils.read(inputStream46, byteArray47);
        byte[] byteArray50 = org.apache.commons.io.IOUtils.toByteArray(inputStream46);
        byte[] byteArray52 = org.apache.commons.io.IOUtils.toByteArray(inputStream46, (int) (short) 0);
        long long54 = org.apache.commons.io.IOUtils.skip(inputStream46, 100L);
        java.io.InputStream inputStream56 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray57 = new byte[] {};
        int int58 = org.apache.commons.io.IOUtils.length(byteArray57);
        int int59 = org.apache.commons.io.IOUtils.read(inputStream56, byteArray57);
        byte[] byteArray60 = org.apache.commons.io.IOUtils.toByteArray(inputStream56);
        byte[] byteArray62 = org.apache.commons.io.IOUtils.toByteArray(inputStream56, (int) (short) 0);
        org.apache.commons.io.IOUtils.readFully(inputStream46, byteArray62);
        org.apache.commons.io.IOUtils.readFully(inputStream29, byteArray62);
        java.lang.String str65 = org.apache.commons.io.IOUtils.toString(inputStream29);
        byte[] byteArray67 = org.apache.commons.io.IOUtils.toByteArray(inputStream29, (long) (short) 0);
        org.apache.commons.io.IOUtils.readFully(inputStream12, byteArray67);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.readFully(inputStream8, byteArray67, (int) '\\', (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Range [92, 92 + 35) out of bounds for length 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(bufferedInputStream6);
        org.junit.Assert.assertNotNull(inputStream8);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(inputStream12);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream21);
        org.junit.Assert.assertNotNull(bufferedInputStream26);
        org.junit.Assert.assertNotNull(inputStream27);
        org.junit.Assert.assertNotNull(inputStream29);
        org.junit.Assert.assertNotNull(inputStream32);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream43);
        org.junit.Assert.assertNotNull(inputStream46);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[]");
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertNotNull(inputStream56);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[]");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[]");
    }

    @Test
    public void test3246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3246");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.nio.charset.Charset charset4 = null;
        org.apache.commons.io.LineIterator lineIterator5 = org.apache.commons.io.IOUtils.lineIterator(inputStream1, charset4);
        java.lang.String str6 = org.apache.commons.io.IOUtils.toString(inputStream1);
        java.io.OutputStream outputStream7 = null;
        int int8 = org.apache.commons.io.IOUtils.copy(inputStream1, outputStream7);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(lineIterator5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test3247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3247");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str11 = org.apache.commons.io.IOUtils.toString(byteArray7, "");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
    }

    @Test
    public void test3248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3248");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.util.List<java.lang.String> strList4 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.OutputStream outputStream5 = null;
        long long6 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream5);
        java.io.OutputStream outputStream7 = null;
        java.io.InputStream inputStream11 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray12 = new byte[] {};
        int int13 = org.apache.commons.io.IOUtils.length(byteArray12);
        int int14 = org.apache.commons.io.IOUtils.read(inputStream11, byteArray12);
        long long15 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream7, (-1L), 1L, byteArray12);
        java.io.OutputStream outputStream16 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray12, outputStream16);
        java.io.OutputStream outputStream18 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray12, outputStream18);
        java.lang.String str20 = org.apache.commons.io.IOUtils.toString(byteArray12);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str22 = org.apache.commons.io.IOUtils.toString(byteArray12, "hi!");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: hi!");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(inputStream11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
    }

    @Test
    public void test3249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3249");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream3 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1);
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream3);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream4);
        java.io.Writer writer6 = null;
        org.apache.commons.io.IOUtils.copy(inputStream4, writer6);
        java.lang.String str8 = org.apache.commons.io.IOUtils.toString(inputStream4);
        java.io.OutputStream outputStream9 = null;
        int int10 = org.apache.commons.io.IOUtils.copy(inputStream4, outputStream9);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream3);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test3250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3250");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.util.List<java.lang.String> strList4 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.OutputStream outputStream5 = null;
        long long6 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream5);
        java.io.Writer writer7 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer7);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream11 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray12 = new byte[] {};
        int int13 = org.apache.commons.io.IOUtils.length(byteArray12);
        int int14 = org.apache.commons.io.IOUtils.read(inputStream11, byteArray12);
        byte[] byteArray15 = org.apache.commons.io.IOUtils.toByteArray(inputStream11);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer16 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream11, iOExceptionConsumer16);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream11);
        java.io.BufferedInputStream bufferedInputStream20 = org.apache.commons.io.IOUtils.buffer(inputStream11, (int) (byte) 10);
        java.io.InputStream inputStream22 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream11, (int) (byte) 1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer23 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream11, iOExceptionConsumer23);
        java.io.OutputStream outputStream25 = null;
        java.io.InputStream inputStream27 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray28 = new byte[] {};
        int int29 = org.apache.commons.io.IOUtils.length(byteArray28);
        int int30 = org.apache.commons.io.IOUtils.read(inputStream27, byteArray28);
        byte[] byteArray31 = org.apache.commons.io.IOUtils.toByteArray(inputStream27);
        java.io.InputStream inputStream33 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray34 = new byte[] {};
        int int35 = org.apache.commons.io.IOUtils.length(byteArray34);
        int int36 = org.apache.commons.io.IOUtils.read(inputStream33, byteArray34);
        byte[] byteArray37 = org.apache.commons.io.IOUtils.toByteArray(inputStream33);
        int int38 = org.apache.commons.io.IOUtils.length(byteArray37);
        org.apache.commons.io.IOUtils.readFully(inputStream27, byteArray37);
        long long40 = org.apache.commons.io.IOUtils.copyLarge(inputStream11, outputStream25, byteArray37);
        boolean boolean41 = org.apache.commons.io.IOUtils.contentEquals(inputStream1, inputStream11);
        java.io.BufferedInputStream bufferedInputStream43 = org.apache.commons.io.IOUtils.buffer(inputStream1, 5);
        java.io.InputStream inputStream45 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream46 = null;
        java.io.InputStream inputStream49 = null;
        byte[] byteArray51 = org.apache.commons.io.IOUtils.toByteArray("");
        int int52 = org.apache.commons.io.IOUtils.read(inputStream49, byteArray51);
        long long53 = org.apache.commons.io.IOUtils.copyLarge(inputStream45, outputStream46, 0L, 0L, byteArray51);
        java.nio.charset.Charset charset54 = null;
        java.util.List<java.lang.String> strList55 = org.apache.commons.io.IOUtils.readLines(inputStream45, charset54);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream45);
        java.nio.charset.Charset charset57 = null;
        java.lang.String str58 = org.apache.commons.io.IOUtils.toString(inputStream45, charset57);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer59 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream45, iOExceptionConsumer59);
        boolean boolean61 = org.apache.commons.io.IOUtils.contentEquals((java.io.InputStream) bufferedInputStream43, inputStream45);
        byte[] byteArray63 = org.apache.commons.io.IOUtils.toByteArray(inputStream45, 0);
        long long65 = org.apache.commons.io.IOUtils.skip(inputStream45, (long) (byte) 10);
        long long67 = org.apache.commons.io.IOUtils.skip(inputStream45, (long) (short) 10);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(inputStream11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream20);
        org.junit.Assert.assertNotNull(inputStream22);
        org.junit.Assert.assertNotNull(inputStream27);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(inputStream33);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(bufferedInputStream43);
        org.junit.Assert.assertNotNull(inputStream45);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertNotNull(strList55);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[]");
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 0L + "'", long65 == 0L);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 0L + "'", long67 == 0L);
    }

    @Test
    public void test3251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3251");
        java.io.Closeable[] closeableArray0 = new java.io.Closeable[] {};
        org.apache.commons.io.IOUtils.closeQuietly(closeableArray0);
        org.apache.commons.io.IOUtils.closeQuietly(closeableArray0);
        int int3 = org.apache.commons.io.IOUtils.length((java.lang.Object[]) closeableArray0);
        org.apache.commons.io.IOUtils.closeQuietly(closeableArray0);
        int int5 = org.apache.commons.io.IOUtils.length((java.lang.Object[]) closeableArray0);
        org.junit.Assert.assertNotNull(closeableArray0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test3252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3252");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream5 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray("");
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray10);
        long long12 = org.apache.commons.io.IOUtils.copyLarge(inputStream4, outputStream5, 0L, 0L, byteArray10);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, byteArray10);
        java.io.BufferedInputStream bufferedInputStream15 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.io.InputStream inputStream17 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray18 = org.apache.commons.io.IOUtils.toByteArray(inputStream17);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream17);
        java.io.InputStream inputStream21 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream22 = null;
        java.io.InputStream inputStream25 = null;
        byte[] byteArray27 = org.apache.commons.io.IOUtils.toByteArray("");
        int int28 = org.apache.commons.io.IOUtils.read(inputStream25, byteArray27);
        long long29 = org.apache.commons.io.IOUtils.copyLarge(inputStream21, outputStream22, 0L, 0L, byteArray27);
        java.nio.charset.Charset charset30 = null;
        java.util.List<java.lang.String> strList31 = org.apache.commons.io.IOUtils.readLines(inputStream21, charset30);
        java.io.InputStream inputStream33 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream34 = null;
        java.io.InputStream inputStream37 = null;
        byte[] byteArray39 = org.apache.commons.io.IOUtils.toByteArray("");
        int int40 = org.apache.commons.io.IOUtils.read(inputStream37, byteArray39);
        long long41 = org.apache.commons.io.IOUtils.copyLarge(inputStream33, outputStream34, 0L, 0L, byteArray39);
        java.nio.charset.Charset charset42 = null;
        java.util.List<java.lang.String> strList43 = org.apache.commons.io.IOUtils.readLines(inputStream33, charset42);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream33);
        boolean boolean45 = org.apache.commons.io.IOUtils.contentEquals(inputStream21, inputStream33);
        java.io.OutputStream outputStream46 = null;
        java.io.InputStream inputStream48 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream49 = null;
        java.io.InputStream inputStream52 = null;
        byte[] byteArray54 = org.apache.commons.io.IOUtils.toByteArray("");
        int int55 = org.apache.commons.io.IOUtils.read(inputStream52, byteArray54);
        long long56 = org.apache.commons.io.IOUtils.copyLarge(inputStream48, outputStream49, 0L, 0L, byteArray54);
        long long57 = org.apache.commons.io.IOUtils.copyLarge(inputStream33, outputStream46, byteArray54);
        org.apache.commons.io.IOUtils.readFully(inputStream17, byteArray54);
        org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray54);
        java.lang.String str60 = org.apache.commons.io.IOUtils.toString(inputStream1);
        java.io.BufferedInputStream bufferedInputStream62 = org.apache.commons.io.IOUtils.buffer(inputStream1, 100);
        java.io.OutputStream outputStream63 = null;
        java.io.InputStream inputStream66 = null;
        byte[] byteArray68 = org.apache.commons.io.IOUtils.toByteArray("");
        int int69 = org.apache.commons.io.IOUtils.read(inputStream66, byteArray68);
        java.lang.String str70 = org.apache.commons.io.IOUtils.toString(byteArray68);
        long long71 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream63, (-1L), (long) (short) -1, byteArray68);
        java.io.InputStream inputStream72 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1);
        java.lang.String str73 = org.apache.commons.io.IOUtils.toString(inputStream72);
        java.nio.charset.Charset charset74 = null;
        java.lang.String str75 = org.apache.commons.io.IOUtils.toString(inputStream72, charset74);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream15);
        org.junit.Assert.assertNotNull(inputStream17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(inputStream21);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNotNull(strList31);
        org.junit.Assert.assertNotNull(inputStream33);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertNotNull(strList43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(inputStream48);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(bufferedInputStream62);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 0L + "'", long71 == 0L);
        org.junit.Assert.assertNotNull(inputStream72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
    }

    @Test
    public void test3253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3253");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.BufferedInputStream bufferedInputStream10 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        byte[] byteArray11 = null;
        org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray11, (int) '4', 0);
        java.io.BufferedInputStream bufferedInputStream15 = org.apache.commons.io.IOUtils.buffer(inputStream1);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str17 = org.apache.commons.io.IOUtils.toString(inputStream1, "\r\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ??");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream10);
        org.junit.Assert.assertNotNull(bufferedInputStream15);
    }

    @Test
    public void test3254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3254");
        java.lang.Object[] objArray0 = new java.lang.Object[] {};
        int int1 = org.apache.commons.io.IOUtils.length(objArray0);
        int int2 = org.apache.commons.io.IOUtils.length(objArray0);
        int int3 = org.apache.commons.io.IOUtils.length(objArray0);
        int int4 = org.apache.commons.io.IOUtils.length(objArray0);
        java.lang.Class<?> wildcardClass5 = objArray0.getClass();
        org.junit.Assert.assertNotNull(objArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray0), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test3255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3255");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream3 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1);
        java.io.Writer writer4 = null;
        java.nio.charset.Charset charset5 = null;
        org.apache.commons.io.IOUtils.copy(inputStream3, writer4, charset5);
        org.apache.commons.io.function.IOConsumer<java.io.IOException> iOExceptionIOConsumer7 = null;
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream3, iOExceptionIOConsumer7);
        java.io.Writer writer9 = null;
        java.nio.charset.Charset charset10 = null;
        org.apache.commons.io.IOUtils.copy(inputStream3, writer9, charset10);
        java.io.Writer writer12 = null;
        org.apache.commons.io.IOUtils.copy(inputStream3, writer12);
        java.nio.charset.Charset charset14 = null;
        java.util.List<java.lang.String> strList15 = org.apache.commons.io.IOUtils.readLines(inputStream3, charset14);
        java.io.Writer writer17 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList15, "", writer17);
        java.io.OutputStream outputStream20 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList15, "\r\n", outputStream20, "");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream3);
        org.junit.Assert.assertNotNull(strList15);
    }

    @Test
    public void test3256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3256");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.io.InputStream inputStream7 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray8 = new byte[] {};
        int int9 = org.apache.commons.io.IOUtils.length(byteArray8);
        int int10 = org.apache.commons.io.IOUtils.read(inputStream7, byteArray8);
        byte[] byteArray11 = org.apache.commons.io.IOUtils.toByteArray(inputStream7);
        int int12 = org.apache.commons.io.IOUtils.length(byteArray11);
        org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray11);
        org.apache.commons.io.function.IOConsumer<java.io.IOException> iOExceptionIOConsumer14 = null;
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1, iOExceptionIOConsumer14);
        java.nio.charset.Charset charset16 = null;
        char[] charArray17 = org.apache.commons.io.IOUtils.toCharArray(inputStream1, charset16);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(inputStream7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[]");
    }

    @Test
    public void test3257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3257");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.BufferedInputStream bufferedInputStream10 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.io.InputStream inputStream12 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, (int) (byte) 1);
        java.io.OutputStream outputStream13 = null;
        int int14 = org.apache.commons.io.IOUtils.copy(inputStream12, outputStream13);
        java.io.OutputStream outputStream15 = null;
        int int16 = org.apache.commons.io.IOUtils.copy(inputStream12, outputStream15);
        java.io.OutputStream outputStream17 = null;
        long long19 = org.apache.commons.io.IOUtils.copy(inputStream12, outputStream17, 1);
        java.io.InputStream inputStream21 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray22 = org.apache.commons.io.IOUtils.toByteArray(inputStream21);
        java.io.InputStream inputStream24 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray25 = new byte[] {};
        int int26 = org.apache.commons.io.IOUtils.length(byteArray25);
        int int27 = org.apache.commons.io.IOUtils.read(inputStream24, byteArray25);
        byte[] byteArray28 = org.apache.commons.io.IOUtils.toByteArray(inputStream24);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer29 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream24, iOExceptionConsumer29);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream24);
        java.io.BufferedInputStream bufferedInputStream33 = org.apache.commons.io.IOUtils.buffer(inputStream24, (int) (byte) 10);
        boolean boolean34 = org.apache.commons.io.IOUtils.contentEquals(inputStream21, inputStream24);
        java.io.InputStream inputStream36 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray37 = new byte[] {};
        int int38 = org.apache.commons.io.IOUtils.length(byteArray37);
        int int39 = org.apache.commons.io.IOUtils.read(inputStream36, byteArray37);
        byte[] byteArray40 = org.apache.commons.io.IOUtils.toByteArray(inputStream36);
        byte[] byteArray42 = org.apache.commons.io.IOUtils.toByteArray(inputStream36, (int) (short) 0);
        long long44 = org.apache.commons.io.IOUtils.skip(inputStream36, 100L);
        java.io.InputStream inputStream45 = null;
        java.io.InputStream inputStream46 = null;
        java.io.OutputStream outputStream47 = null;
        byte[] byteArray50 = new byte[] {};
        int int51 = org.apache.commons.io.IOUtils.length(byteArray50);
        java.io.OutputStream outputStream52 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray50, outputStream52);
        long long54 = org.apache.commons.io.IOUtils.copyLarge(inputStream46, outputStream47, 0L, (long) (byte) -1, byteArray50);
        java.io.OutputStream outputStream55 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray50, outputStream55);
        org.apache.commons.io.IOUtils.readFully(inputStream45, byteArray50);
        int int58 = org.apache.commons.io.IOUtils.read(inputStream36, byteArray50);
        int int59 = org.apache.commons.io.IOUtils.read(inputStream24, byteArray50);
        java.io.OutputStream outputStream60 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray50, outputStream60);
        int int62 = org.apache.commons.io.IOUtils.read(inputStream12, byteArray50);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream10);
        org.junit.Assert.assertNotNull(inputStream12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(inputStream21);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertNotNull(inputStream24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(inputStream36);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
    }

    @Test
    public void test3258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3258");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray(inputStream1, (int) (short) 0);
        long long9 = org.apache.commons.io.IOUtils.skip(inputStream1, 100L);
        java.io.InputStream inputStream10 = null;
        java.io.InputStream inputStream11 = null;
        java.io.OutputStream outputStream12 = null;
        byte[] byteArray15 = new byte[] {};
        int int16 = org.apache.commons.io.IOUtils.length(byteArray15);
        java.io.OutputStream outputStream17 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray15, outputStream17);
        long long19 = org.apache.commons.io.IOUtils.copyLarge(inputStream11, outputStream12, 0L, (long) (byte) -1, byteArray15);
        java.io.OutputStream outputStream20 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray15, outputStream20);
        org.apache.commons.io.IOUtils.readFully(inputStream10, byteArray15);
        int int23 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray15);
        java.io.InputStream inputStream24 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1);
        long long26 = org.apache.commons.io.IOUtils.skip(inputStream24, 0L);
        org.apache.commons.io.IOUtils.closeQuietly(inputStream24);
        byte[] byteArray28 = org.apache.commons.io.IOUtils.toByteArray(inputStream24);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(inputStream24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
    }

    @Test
    public void test3259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3259");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        long long9 = org.apache.commons.io.IOUtils.skip(inputStream1, (long) (byte) 100);
        java.lang.String str10 = org.apache.commons.io.IOUtils.toString(inputStream1);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray12 = org.apache.commons.io.IOUtils.readFully(inputStream1, 10);
            org.junit.Assert.fail("Expected exception of type java.io.EOFException; message: Length to read: 10 actual: 0");
        } catch (java.io.EOFException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
    }

    @Test
    public void test3260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3260");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream5 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray("");
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray10);
        long long12 = org.apache.commons.io.IOUtils.copyLarge(inputStream4, outputStream5, 0L, 0L, byteArray10);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, byteArray10);
        java.io.BufferedInputStream bufferedInputStream15 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer16 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer16);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream20 = org.apache.commons.io.IOUtils.toInputStream("\n");
        byte[] byteArray22 = org.apache.commons.io.IOUtils.toByteArray(inputStream20, (int) (byte) 0);
        java.io.InputStream inputStream24 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray25 = new byte[] {};
        int int26 = org.apache.commons.io.IOUtils.length(byteArray25);
        int int27 = org.apache.commons.io.IOUtils.read(inputStream24, byteArray25);
        byte[] byteArray28 = org.apache.commons.io.IOUtils.toByteArray(inputStream24);
        byte[] byteArray30 = org.apache.commons.io.IOUtils.toByteArray(inputStream24, (int) (short) 0);
        byte[] byteArray31 = new byte[] {};
        int int32 = org.apache.commons.io.IOUtils.length(byteArray31);
        org.apache.commons.io.IOUtils.readFully(inputStream24, byteArray31);
        org.apache.commons.io.IOUtils.readFully(inputStream20, byteArray31);
        java.lang.String str35 = org.apache.commons.io.IOUtils.toString(byteArray31);
        java.lang.String str36 = org.apache.commons.io.IOUtils.toString(byteArray31);
        int int37 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray31);
        java.io.BufferedInputStream bufferedInputStream39 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 1);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream15);
        org.junit.Assert.assertNotNull(inputStream20);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertNotNull(inputStream24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(bufferedInputStream39);
    }

    @Test
    public void test3261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3261");
        java.io.Reader reader0 = null;
        java.io.Reader reader1 = null;
        char[] charArray2 = new char[] {};
        int int3 = org.apache.commons.io.IOUtils.length(charArray2);
        java.io.Writer writer4 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray2, writer4);
        int int6 = org.apache.commons.io.IOUtils.length(charArray2);
        java.io.Writer writer7 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray2, writer7);
        int int9 = org.apache.commons.io.IOUtils.length(charArray2);
        int int10 = org.apache.commons.io.IOUtils.read(reader1, charArray2);
        int int11 = org.apache.commons.io.IOUtils.read(reader0, charArray2);
        java.io.OutputStream outputStream12 = null;
        java.nio.charset.Charset charset13 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(charArray2, outputStream12, charset13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.OutputStream.write(byte[])\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray2), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray2), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test3262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3262");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.BufferedInputStream bufferedInputStream10 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        byte[] byteArray11 = null;
        org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray11, (int) '4', 0);
        java.io.BufferedInputStream bufferedInputStream15 = org.apache.commons.io.IOUtils.buffer(inputStream1);
        java.io.InputStream inputStream16 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1);
        java.io.InputStream inputStream18 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream19 = null;
        java.io.InputStream inputStream21 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream22 = null;
        java.io.InputStream inputStream25 = null;
        byte[] byteArray27 = org.apache.commons.io.IOUtils.toByteArray("");
        int int28 = org.apache.commons.io.IOUtils.read(inputStream25, byteArray27);
        long long29 = org.apache.commons.io.IOUtils.copyLarge(inputStream21, outputStream22, 0L, 0L, byteArray27);
        long long30 = org.apache.commons.io.IOUtils.copyLarge(inputStream18, outputStream19, byteArray27);
        java.io.BufferedInputStream bufferedInputStream32 = org.apache.commons.io.IOUtils.buffer(inputStream18, (int) (byte) 10);
        org.apache.commons.io.IOUtils.closeQuietly(inputStream18);
        java.io.InputStream inputStream35 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray36 = new byte[] {};
        int int37 = org.apache.commons.io.IOUtils.length(byteArray36);
        int int38 = org.apache.commons.io.IOUtils.read(inputStream35, byteArray36);
        byte[] byteArray39 = org.apache.commons.io.IOUtils.toByteArray(inputStream35);
        byte[] byteArray41 = org.apache.commons.io.IOUtils.toByteArray(inputStream35, (int) (short) 0);
        long long43 = org.apache.commons.io.IOUtils.skip(inputStream35, 100L);
        java.io.InputStream inputStream45 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray46 = new byte[] {};
        int int47 = org.apache.commons.io.IOUtils.length(byteArray46);
        int int48 = org.apache.commons.io.IOUtils.read(inputStream45, byteArray46);
        byte[] byteArray49 = org.apache.commons.io.IOUtils.toByteArray(inputStream45);
        byte[] byteArray51 = org.apache.commons.io.IOUtils.toByteArray(inputStream45, (int) (short) 0);
        org.apache.commons.io.IOUtils.readFully(inputStream35, byteArray51);
        org.apache.commons.io.IOUtils.readFully(inputStream18, byteArray51);
        java.lang.String str54 = org.apache.commons.io.IOUtils.toString(inputStream18);
        byte[] byteArray56 = org.apache.commons.io.IOUtils.toByteArray(inputStream18, (long) (short) 0);
        org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray56);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream10);
        org.junit.Assert.assertNotNull(bufferedInputStream15);
        org.junit.Assert.assertNotNull(inputStream16);
        org.junit.Assert.assertNotNull(inputStream18);
        org.junit.Assert.assertNotNull(inputStream21);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream32);
        org.junit.Assert.assertNotNull(inputStream35);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertNotNull(inputStream45);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[]");
    }

    @Test
    public void test3263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3263");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        java.nio.charset.Charset charset5 = null;
        org.apache.commons.io.LineIterator lineIterator6 = org.apache.commons.io.IOUtils.lineIterator(inputStream1, charset5);
        java.io.InputStream inputStream8 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray9 = new byte[] {};
        int int10 = org.apache.commons.io.IOUtils.length(byteArray9);
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray9);
        byte[] byteArray12 = org.apache.commons.io.IOUtils.toByteArray(inputStream8);
        boolean boolean13 = org.apache.commons.io.IOUtils.contentEquals(inputStream1, inputStream8);
        java.io.InputStream inputStream15 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray16 = new byte[] {};
        int int17 = org.apache.commons.io.IOUtils.length(byteArray16);
        int int18 = org.apache.commons.io.IOUtils.read(inputStream15, byteArray16);
        byte[] byteArray19 = org.apache.commons.io.IOUtils.toByteArray(inputStream15);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer20 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream15, iOExceptionConsumer20);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream15);
        java.io.BufferedInputStream bufferedInputStream24 = org.apache.commons.io.IOUtils.buffer(inputStream15, (int) (byte) 10);
        java.io.InputStream inputStream26 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream15, (int) (byte) 1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer27 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream15, iOExceptionConsumer27);
        java.io.OutputStream outputStream29 = null;
        java.io.InputStream inputStream31 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray32 = new byte[] {};
        int int33 = org.apache.commons.io.IOUtils.length(byteArray32);
        int int34 = org.apache.commons.io.IOUtils.read(inputStream31, byteArray32);
        byte[] byteArray35 = org.apache.commons.io.IOUtils.toByteArray(inputStream31);
        java.io.InputStream inputStream37 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray38 = new byte[] {};
        int int39 = org.apache.commons.io.IOUtils.length(byteArray38);
        int int40 = org.apache.commons.io.IOUtils.read(inputStream37, byteArray38);
        byte[] byteArray41 = org.apache.commons.io.IOUtils.toByteArray(inputStream37);
        int int42 = org.apache.commons.io.IOUtils.length(byteArray41);
        org.apache.commons.io.IOUtils.readFully(inputStream31, byteArray41);
        long long44 = org.apache.commons.io.IOUtils.copyLarge(inputStream15, outputStream29, byteArray41);
        byte[] byteArray45 = org.apache.commons.io.IOUtils.toByteArray(inputStream15);
        org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray45);
        java.io.OutputStream outputStream47 = null;
        java.io.InputStream inputStream51 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream52 = null;
        java.io.InputStream inputStream55 = null;
        byte[] byteArray57 = org.apache.commons.io.IOUtils.toByteArray("");
        int int58 = org.apache.commons.io.IOUtils.read(inputStream55, byteArray57);
        long long59 = org.apache.commons.io.IOUtils.copyLarge(inputStream51, outputStream52, 0L, 0L, byteArray57);
        java.nio.charset.Charset charset60 = null;
        java.util.List<java.lang.String> strList61 = org.apache.commons.io.IOUtils.readLines(inputStream51, charset60);
        java.nio.charset.Charset charset62 = null;
        char[] charArray63 = org.apache.commons.io.IOUtils.toCharArray(inputStream51, charset62);
        byte[] byteArray65 = org.apache.commons.io.IOUtils.toByteArray(inputStream51, (long) (byte) 0);
        long long66 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream47, 0L, 10L, byteArray65);
        // The following exception was thrown during execution in test generation
        try {
            char[] charArray68 = org.apache.commons.io.IOUtils.toCharArray(inputStream1, "");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(lineIterator6);
        org.junit.Assert.assertNotNull(inputStream8);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(inputStream15);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream24);
        org.junit.Assert.assertNotNull(inputStream26);
        org.junit.Assert.assertNotNull(inputStream31);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(inputStream37);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
        org.junit.Assert.assertNotNull(inputStream51);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertNotNull(strList61);
        org.junit.Assert.assertNotNull(charArray63);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray63), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray63), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray63), "[]");
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 0L + "'", long66 == 0L);
    }

    @Test
    public void test3264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3264");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.util.List<java.lang.String> strList4 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.OutputStream outputStream5 = null;
        long long6 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream5);
        java.io.Writer writer7 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer7);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream11 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray12 = new byte[] {};
        int int13 = org.apache.commons.io.IOUtils.length(byteArray12);
        int int14 = org.apache.commons.io.IOUtils.read(inputStream11, byteArray12);
        byte[] byteArray15 = org.apache.commons.io.IOUtils.toByteArray(inputStream11);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer16 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream11, iOExceptionConsumer16);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream11);
        java.io.BufferedInputStream bufferedInputStream20 = org.apache.commons.io.IOUtils.buffer(inputStream11, (int) (byte) 10);
        java.io.InputStream inputStream22 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream11, (int) (byte) 1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer23 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream11, iOExceptionConsumer23);
        java.io.OutputStream outputStream25 = null;
        java.io.InputStream inputStream27 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray28 = new byte[] {};
        int int29 = org.apache.commons.io.IOUtils.length(byteArray28);
        int int30 = org.apache.commons.io.IOUtils.read(inputStream27, byteArray28);
        byte[] byteArray31 = org.apache.commons.io.IOUtils.toByteArray(inputStream27);
        java.io.InputStream inputStream33 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray34 = new byte[] {};
        int int35 = org.apache.commons.io.IOUtils.length(byteArray34);
        int int36 = org.apache.commons.io.IOUtils.read(inputStream33, byteArray34);
        byte[] byteArray37 = org.apache.commons.io.IOUtils.toByteArray(inputStream33);
        int int38 = org.apache.commons.io.IOUtils.length(byteArray37);
        org.apache.commons.io.IOUtils.readFully(inputStream27, byteArray37);
        long long40 = org.apache.commons.io.IOUtils.copyLarge(inputStream11, outputStream25, byteArray37);
        boolean boolean41 = org.apache.commons.io.IOUtils.contentEquals(inputStream1, inputStream11);
        java.io.BufferedInputStream bufferedInputStream43 = org.apache.commons.io.IOUtils.buffer(inputStream1, 5);
        java.io.InputStream inputStream45 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream46 = null;
        java.io.InputStream inputStream49 = null;
        byte[] byteArray51 = org.apache.commons.io.IOUtils.toByteArray("");
        int int52 = org.apache.commons.io.IOUtils.read(inputStream49, byteArray51);
        long long53 = org.apache.commons.io.IOUtils.copyLarge(inputStream45, outputStream46, 0L, 0L, byteArray51);
        java.nio.charset.Charset charset54 = null;
        java.util.List<java.lang.String> strList55 = org.apache.commons.io.IOUtils.readLines(inputStream45, charset54);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream45);
        java.nio.charset.Charset charset57 = null;
        java.lang.String str58 = org.apache.commons.io.IOUtils.toString(inputStream45, charset57);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer59 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream45, iOExceptionConsumer59);
        boolean boolean61 = org.apache.commons.io.IOUtils.contentEquals((java.io.InputStream) bufferedInputStream43, inputStream45);
        byte[] byteArray63 = org.apache.commons.io.IOUtils.toByteArray(inputStream45, 0);
        java.nio.charset.Charset charset64 = null;
        java.lang.String str65 = org.apache.commons.io.IOUtils.toString(inputStream45, charset64);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream45);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(inputStream11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream20);
        org.junit.Assert.assertNotNull(inputStream22);
        org.junit.Assert.assertNotNull(inputStream27);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(inputStream33);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(bufferedInputStream43);
        org.junit.Assert.assertNotNull(inputStream45);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertNotNull(strList55);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[]");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
    }

    @Test
    public void test3265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3265");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.nio.charset.Charset charset6 = null;
        java.util.List<java.lang.String> strList7 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset6);
        java.nio.charset.Charset charset8 = null;
        org.apache.commons.io.LineIterator lineIterator9 = org.apache.commons.io.IOUtils.lineIterator(inputStream1, charset8);
        java.io.InputStream inputStream11 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, 6);
        java.io.BufferedInputStream bufferedInputStream13 = org.apache.commons.io.IOUtils.buffer(inputStream11, 3);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer14 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream11, iOExceptionConsumer14);
        org.apache.commons.io.IOUtils.closeQuietly(inputStream11);
        java.util.List<java.lang.String> strList17 = org.apache.commons.io.IOUtils.readLines(inputStream11);
        java.io.OutputStream outputStream19 = null;
        java.nio.charset.Charset charset20 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList17, "\n", outputStream19, charset20);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertNotNull(lineIterator9);
        org.junit.Assert.assertNotNull(inputStream11);
        org.junit.Assert.assertNotNull(bufferedInputStream13);
        org.junit.Assert.assertNotNull(strList17);
    }

    @Test
    public void test3266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3266");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.BufferedInputStream bufferedInputStream10 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        byte[] byteArray11 = null;
        org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray11, (int) '4', 0);
        java.lang.String str15 = org.apache.commons.io.IOUtils.toString(inputStream1);
        java.util.List<java.lang.String> strList16 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.Writer writer18 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList16, "", writer18);
        java.io.OutputStream outputStream21 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList16, "hi!", outputStream21, "");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream10);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(strList16);
    }

    @Test
    public void test3267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3267");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream5 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray("");
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray10);
        long long12 = org.apache.commons.io.IOUtils.copyLarge(inputStream4, outputStream5, 0L, 0L, byteArray10);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, byteArray10);
        java.io.BufferedInputStream bufferedInputStream15 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.nio.charset.Charset charset16 = null;
        java.util.List<java.lang.String> strList17 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset16);
        java.io.OutputStream outputStream18 = null;
        long long21 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream18, 0L, (long) 0);
        java.io.OutputStream outputStream22 = null;
        long long25 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream22, (long) (short) -1, (long) 10);
        java.lang.String str26 = org.apache.commons.io.IOUtils.toString(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly(inputStream1);
        java.io.OutputStream outputStream28 = null;
        java.io.InputStream inputStream30 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray31 = org.apache.commons.io.IOUtils.toByteArray(inputStream30);
        java.lang.String str32 = org.apache.commons.io.IOUtils.toString(byteArray31);
        java.lang.String str33 = org.apache.commons.io.IOUtils.toString(byteArray31);
        long long34 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream28, byteArray31);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer35 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer35);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream15);
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(inputStream30);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
    }

    @Test
    public void test3268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3268");
        java.io.InputStream inputStream0 = null;
        java.io.InputStream inputStream2 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream2);
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream2);
        byte[] byteArray9 = new byte[] { (byte) -1, (byte) 100, (byte) 1, (byte) -1 };
        int int10 = org.apache.commons.io.IOUtils.read(inputStream2, byteArray9);
        int int11 = org.apache.commons.io.IOUtils.length(byteArray9);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.readFully(inputStream0, byteArray9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.InputStream.read(byte[], int, int)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream2);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-1, 100, 1, -1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 4 + "'", int11 == 4);
    }

    @Test
    public void test3269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3269");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.BufferedInputStream bufferedInputStream10 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.io.InputStream inputStream12 = org.apache.commons.io.IOUtils.toBufferedInputStream((java.io.InputStream) bufferedInputStream10, (int) '#');
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream12);
        java.io.OutputStream outputStream14 = null;
        long long15 = org.apache.commons.io.IOUtils.copyLarge(inputStream12, outputStream14);
        java.io.OutputStream outputStream16 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long19 = org.apache.commons.io.IOUtils.copyLarge(inputStream12, outputStream16, (long) 4, (long) '4');
            org.junit.Assert.fail("Expected exception of type java.io.EOFException; message: Bytes to skip: 4 actual: 0");
        } catch (java.io.EOFException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream10);
        org.junit.Assert.assertNotNull(inputStream12);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
    }

    @Test
    public void test3270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3270");
        char[] charArray0 = new char[] {};
        int int1 = org.apache.commons.io.IOUtils.length(charArray0);
        java.io.Writer writer2 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray0, writer2);
        java.io.Writer writer4 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray0, writer4);
        int int6 = org.apache.commons.io.IOUtils.length(charArray0);
        java.io.Writer writer7 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(charArray0, writer7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Writer.write(char[])\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray0);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray0), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray0), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test3271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3271");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream5 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray("");
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray10);
        long long12 = org.apache.commons.io.IOUtils.copyLarge(inputStream4, outputStream5, 0L, 0L, byteArray10);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, byteArray10);
        java.io.BufferedInputStream bufferedInputStream15 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer16 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer16);
        java.nio.charset.Charset charset18 = null;
        java.lang.String str19 = org.apache.commons.io.IOUtils.toString(inputStream1, charset18);
        java.util.List<java.lang.String> strList20 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream15);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(strList20);
    }

    @Test
    public void test3272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3272");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.BufferedInputStream bufferedInputStream10 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.io.InputStream inputStream12 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, (int) (byte) 1);
        java.io.OutputStream outputStream13 = null;
        int int14 = org.apache.commons.io.IOUtils.copy(inputStream12, outputStream13);
        java.io.OutputStream outputStream15 = null;
        int int16 = org.apache.commons.io.IOUtils.copy(inputStream12, outputStream15);
        java.io.OutputStream outputStream17 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long20 = org.apache.commons.io.IOUtils.copyLarge(inputStream12, outputStream17, (long) '#', (long) 0);
            org.junit.Assert.fail("Expected exception of type java.io.EOFException; message: Bytes to skip: 35 actual: 0");
        } catch (java.io.EOFException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream10);
        org.junit.Assert.assertNotNull(inputStream12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test3273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3273");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.io.InputStream inputStream7 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray8 = new byte[] {};
        int int9 = org.apache.commons.io.IOUtils.length(byteArray8);
        int int10 = org.apache.commons.io.IOUtils.read(inputStream7, byteArray8);
        byte[] byteArray11 = org.apache.commons.io.IOUtils.toByteArray(inputStream7);
        int int12 = org.apache.commons.io.IOUtils.length(byteArray11);
        org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray11);
        java.io.OutputStream outputStream14 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray11, outputStream14);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(inputStream7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test3274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3274");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.nio.charset.Charset charset6 = null;
        java.util.List<java.lang.String> strList7 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset6);
        java.nio.charset.Charset charset8 = null;
        org.apache.commons.io.LineIterator lineIterator9 = org.apache.commons.io.IOUtils.lineIterator(inputStream1, charset8);
        java.io.InputStream inputStream11 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, 6);
        java.io.BufferedInputStream bufferedInputStream13 = org.apache.commons.io.IOUtils.buffer(inputStream11, 3);
        java.nio.charset.Charset charset14 = null;
        java.lang.String str15 = org.apache.commons.io.IOUtils.toString(inputStream11, charset14);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream11);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertNotNull(lineIterator9);
        org.junit.Assert.assertNotNull(inputStream11);
        org.junit.Assert.assertNotNull(bufferedInputStream13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
    }

    @Test
    public void test3275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3275");
        java.io.Reader reader0 = null;
        java.io.Writer writer1 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long4 = org.apache.commons.io.IOUtils.copyLarge(reader0, writer1, (long) 100, 10L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[], int, int)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test3276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3276");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream4);
        java.io.InputStream inputStream7 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray8 = new byte[] {};
        int int9 = org.apache.commons.io.IOUtils.length(byteArray8);
        int int10 = org.apache.commons.io.IOUtils.read(inputStream7, byteArray8);
        byte[] byteArray11 = org.apache.commons.io.IOUtils.toByteArray(inputStream7);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer12 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream7, iOExceptionConsumer12);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream7);
        java.io.BufferedInputStream bufferedInputStream16 = org.apache.commons.io.IOUtils.buffer(inputStream7, (int) (byte) 10);
        boolean boolean17 = org.apache.commons.io.IOUtils.contentEquals(inputStream4, inputStream7);
        java.io.InputStream inputStream19 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray20 = new byte[] {};
        int int21 = org.apache.commons.io.IOUtils.length(byteArray20);
        int int22 = org.apache.commons.io.IOUtils.read(inputStream19, byteArray20);
        byte[] byteArray23 = org.apache.commons.io.IOUtils.toByteArray(inputStream19);
        byte[] byteArray25 = org.apache.commons.io.IOUtils.toByteArray(inputStream19, (int) (short) 0);
        long long27 = org.apache.commons.io.IOUtils.skip(inputStream19, 100L);
        java.io.InputStream inputStream28 = null;
        java.io.InputStream inputStream29 = null;
        java.io.OutputStream outputStream30 = null;
        byte[] byteArray33 = new byte[] {};
        int int34 = org.apache.commons.io.IOUtils.length(byteArray33);
        java.io.OutputStream outputStream35 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray33, outputStream35);
        long long37 = org.apache.commons.io.IOUtils.copyLarge(inputStream29, outputStream30, 0L, (long) (byte) -1, byteArray33);
        java.io.OutputStream outputStream38 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray33, outputStream38);
        org.apache.commons.io.IOUtils.readFully(inputStream28, byteArray33);
        int int41 = org.apache.commons.io.IOUtils.read(inputStream19, byteArray33);
        int int42 = org.apache.commons.io.IOUtils.read(inputStream7, byteArray33);
        int int45 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray33, 1, (int) (short) 0);
        java.io.InputStream inputStream47 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, (int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray49 = org.apache.commons.io.IOUtils.toByteArray(inputStream47, (long) '#');
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Unexpected read size. current: 0, expected: 35");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(inputStream7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(inputStream19);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(inputStream47);
    }

    @Test
    public void test3277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3277");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.BufferedInputStream bufferedInputStream10 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.io.InputStream inputStream12 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, (int) (byte) 1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer13 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer13);
        java.io.OutputStream outputStream15 = null;
        java.io.InputStream inputStream17 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray18 = new byte[] {};
        int int19 = org.apache.commons.io.IOUtils.length(byteArray18);
        int int20 = org.apache.commons.io.IOUtils.read(inputStream17, byteArray18);
        byte[] byteArray21 = org.apache.commons.io.IOUtils.toByteArray(inputStream17);
        java.io.InputStream inputStream23 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray24 = new byte[] {};
        int int25 = org.apache.commons.io.IOUtils.length(byteArray24);
        int int26 = org.apache.commons.io.IOUtils.read(inputStream23, byteArray24);
        byte[] byteArray27 = org.apache.commons.io.IOUtils.toByteArray(inputStream23);
        int int28 = org.apache.commons.io.IOUtils.length(byteArray27);
        org.apache.commons.io.IOUtils.readFully(inputStream17, byteArray27);
        long long30 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream15, byteArray27);
        java.io.InputStream inputStream32 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream33 = null;
        java.io.InputStream inputStream36 = null;
        byte[] byteArray38 = org.apache.commons.io.IOUtils.toByteArray("");
        int int39 = org.apache.commons.io.IOUtils.read(inputStream36, byteArray38);
        long long40 = org.apache.commons.io.IOUtils.copyLarge(inputStream32, outputStream33, 0L, 0L, byteArray38);
        java.nio.charset.Charset charset41 = null;
        java.util.List<java.lang.String> strList42 = org.apache.commons.io.IOUtils.readLines(inputStream32, charset41);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream32);
        java.nio.charset.Charset charset44 = null;
        java.lang.String str45 = org.apache.commons.io.IOUtils.toString(inputStream32, charset44);
        java.io.Writer writer46 = null;
        org.apache.commons.io.IOUtils.copy(inputStream32, writer46);
        byte[] byteArray48 = org.apache.commons.io.IOUtils.toByteArray(inputStream32);
        int int49 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray48);
        java.io.InputStream inputStream51 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, (int) (byte) 1);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream10);
        org.junit.Assert.assertNotNull(inputStream12);
        org.junit.Assert.assertNotNull(inputStream17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertNotNull(inputStream23);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(inputStream32);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertNotNull(strList42);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(inputStream51);
    }

    @Test
    public void test3278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3278");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream3 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1);
        java.io.Writer writer4 = null;
        java.nio.charset.Charset charset5 = null;
        org.apache.commons.io.IOUtils.copy(inputStream3, writer4, charset5);
        java.lang.String str7 = org.apache.commons.io.IOUtils.toString(inputStream3);
        java.io.Writer writer8 = null;
        org.apache.commons.io.IOUtils.copy(inputStream3, writer8);
        org.apache.commons.io.function.IOConsumer<java.io.IOException> iOExceptionIOConsumer10 = null;
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream3, iOExceptionIOConsumer10);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream3);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
    }

    @Test
    public void test3279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3279");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        java.nio.charset.Charset charset10 = null;
        java.util.List<java.lang.String> strList11 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset10);
        java.nio.charset.Charset charset12 = null;
        char[] charArray13 = org.apache.commons.io.IOUtils.toCharArray(inputStream1, charset12);
        java.io.OutputStream outputStream14 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(charArray13, outputStream14, "\r\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ??");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[]");
    }

    @Test
    public void test3280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3280");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        java.io.OutputStream outputStream10 = null;
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream10, (long) (short) 0, (-1L));
        char[] charArray14 = org.apache.commons.io.IOUtils.toCharArray(inputStream1);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.Writer writer16 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer16);
        org.apache.commons.io.function.IOConsumer<java.io.IOException> iOExceptionIOConsumer18 = null;
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1, iOExceptionIOConsumer18);
        java.io.InputStream inputStream21 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream21);
        java.io.InputStream inputStream23 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream21);
        boolean boolean24 = org.apache.commons.io.IOUtils.contentEquals(inputStream1, inputStream21);
        java.io.InputStream inputStream26 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "\r\n");
        byte[] byteArray28 = org.apache.commons.io.IOUtils.toByteArray(inputStream26, 1L);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray28);
            org.junit.Assert.fail("Expected exception of type java.io.EOFException; message: Length to read: 1 actual: 0");
        } catch (java.io.EOFException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[]");
        org.junit.Assert.assertNotNull(inputStream21);
        org.junit.Assert.assertNotNull(inputStream23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(inputStream26);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[13]");
    }

    @Test
    public void test3281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3281");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream5 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray("");
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray10);
        long long12 = org.apache.commons.io.IOUtils.copyLarge(inputStream4, outputStream5, 0L, 0L, byteArray10);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, byteArray10);
        java.io.BufferedInputStream bufferedInputStream15 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.nio.charset.Charset charset16 = null;
        java.util.List<java.lang.String> strList17 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset16);
        java.io.OutputStream outputStream18 = null;
        long long21 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream18, 0L, (long) 0);
        java.io.BufferedInputStream bufferedInputStream22 = org.apache.commons.io.IOUtils.buffer(inputStream1);
        java.io.OutputStream outputStream23 = null;
        long long24 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream23);
        java.nio.charset.Charset charset25 = null;
        org.apache.commons.io.LineIterator lineIterator26 = org.apache.commons.io.IOUtils.lineIterator(inputStream1, charset25);
        java.io.OutputStream outputStream27 = null;
        java.io.InputStream inputStream31 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream32 = null;
        java.io.InputStream inputStream35 = null;
        byte[] byteArray37 = org.apache.commons.io.IOUtils.toByteArray("");
        int int38 = org.apache.commons.io.IOUtils.read(inputStream35, byteArray37);
        long long39 = org.apache.commons.io.IOUtils.copyLarge(inputStream31, outputStream32, 0L, 0L, byteArray37);
        java.io.Writer writer40 = null;
        org.apache.commons.io.IOUtils.copy(inputStream31, writer40);
        java.util.List<java.lang.String> strList42 = org.apache.commons.io.IOUtils.readLines(inputStream31);
        java.io.InputStream inputStream43 = null;
        java.io.OutputStream outputStream44 = null;
        byte[] byteArray47 = new byte[] {};
        int int48 = org.apache.commons.io.IOUtils.length(byteArray47);
        java.io.OutputStream outputStream49 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray47, outputStream49);
        long long51 = org.apache.commons.io.IOUtils.copyLarge(inputStream43, outputStream44, 0L, (long) (byte) -1, byteArray47);
        java.io.OutputStream outputStream52 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray47, outputStream52);
        int int54 = org.apache.commons.io.IOUtils.length(byteArray47);
        java.io.OutputStream outputStream55 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray47, outputStream55);
        int int57 = org.apache.commons.io.IOUtils.read(inputStream31, byteArray47);
        java.io.OutputStream outputStream58 = null;
        java.io.InputStream inputStream60 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray61 = new byte[] {};
        int int62 = org.apache.commons.io.IOUtils.length(byteArray61);
        int int63 = org.apache.commons.io.IOUtils.read(inputStream60, byteArray61);
        byte[] byteArray64 = org.apache.commons.io.IOUtils.toByteArray(inputStream60);
        byte[] byteArray66 = org.apache.commons.io.IOUtils.toByteArray(inputStream60, (int) (short) 0);
        long long68 = org.apache.commons.io.IOUtils.skip(inputStream60, 100L);
        java.io.InputStream inputStream69 = null;
        java.io.InputStream inputStream70 = null;
        java.io.OutputStream outputStream71 = null;
        byte[] byteArray74 = new byte[] {};
        int int75 = org.apache.commons.io.IOUtils.length(byteArray74);
        java.io.OutputStream outputStream76 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray74, outputStream76);
        long long78 = org.apache.commons.io.IOUtils.copyLarge(inputStream70, outputStream71, 0L, (long) (byte) -1, byteArray74);
        java.io.OutputStream outputStream79 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray74, outputStream79);
        org.apache.commons.io.IOUtils.readFully(inputStream69, byteArray74);
        int int82 = org.apache.commons.io.IOUtils.read(inputStream60, byteArray74);
        java.io.OutputStream outputStream83 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray74, outputStream83);
        java.lang.String str85 = org.apache.commons.io.IOUtils.toString(byteArray74);
        long long86 = org.apache.commons.io.IOUtils.copyLarge(inputStream31, outputStream58, byteArray74);
        // The following exception was thrown during execution in test generation
        try {
            long long87 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream27, (long) ' ', (long) '/', byteArray74);
            org.junit.Assert.fail("Expected exception of type java.io.EOFException; message: Bytes to skip: 32 actual: 0");
        } catch (java.io.EOFException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream15);
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(lineIterator26);
        org.junit.Assert.assertNotNull(inputStream31);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertNotNull(strList42);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(inputStream60);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[]");
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[]");
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 0L + "'", long68 == 0L);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 0L + "'", long78 == 0L);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "" + "'", str85, "");
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + 0L + "'", long86 == 0L);
    }

    @Test
    public void test3282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3282");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.util.List<java.lang.String> strList4 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.OutputStream outputStream5 = null;
        long long6 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream5);
        java.io.Writer writer7 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer7);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream11 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray12 = new byte[] {};
        int int13 = org.apache.commons.io.IOUtils.length(byteArray12);
        int int14 = org.apache.commons.io.IOUtils.read(inputStream11, byteArray12);
        byte[] byteArray15 = org.apache.commons.io.IOUtils.toByteArray(inputStream11);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer16 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream11, iOExceptionConsumer16);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream11);
        java.io.BufferedInputStream bufferedInputStream20 = org.apache.commons.io.IOUtils.buffer(inputStream11, (int) (byte) 10);
        java.io.InputStream inputStream22 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream11, (int) (byte) 1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer23 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream11, iOExceptionConsumer23);
        java.io.OutputStream outputStream25 = null;
        java.io.InputStream inputStream27 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray28 = new byte[] {};
        int int29 = org.apache.commons.io.IOUtils.length(byteArray28);
        int int30 = org.apache.commons.io.IOUtils.read(inputStream27, byteArray28);
        byte[] byteArray31 = org.apache.commons.io.IOUtils.toByteArray(inputStream27);
        java.io.InputStream inputStream33 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray34 = new byte[] {};
        int int35 = org.apache.commons.io.IOUtils.length(byteArray34);
        int int36 = org.apache.commons.io.IOUtils.read(inputStream33, byteArray34);
        byte[] byteArray37 = org.apache.commons.io.IOUtils.toByteArray(inputStream33);
        int int38 = org.apache.commons.io.IOUtils.length(byteArray37);
        org.apache.commons.io.IOUtils.readFully(inputStream27, byteArray37);
        long long40 = org.apache.commons.io.IOUtils.copyLarge(inputStream11, outputStream25, byteArray37);
        boolean boolean41 = org.apache.commons.io.IOUtils.contentEquals(inputStream1, inputStream11);
        java.io.BufferedInputStream bufferedInputStream43 = org.apache.commons.io.IOUtils.buffer(inputStream1, 5);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer44 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) bufferedInputStream43, iOExceptionConsumer44);
        java.io.BufferedInputStream bufferedInputStream47 = org.apache.commons.io.IOUtils.buffer((java.io.InputStream) bufferedInputStream43, 2);
        java.io.OutputStream outputStream48 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int49 = org.apache.commons.io.IOUtils.copy((java.io.InputStream) bufferedInputStream43, outputStream48);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Stream closed");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(inputStream11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream20);
        org.junit.Assert.assertNotNull(inputStream22);
        org.junit.Assert.assertNotNull(inputStream27);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(inputStream33);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(bufferedInputStream43);
        org.junit.Assert.assertNotNull(bufferedInputStream47);
    }

    @Test
    public void test3283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3283");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        java.nio.charset.Charset charset10 = null;
        java.util.List<java.lang.String> strList11 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset10);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.nio.charset.Charset charset13 = null;
        java.lang.String str14 = org.apache.commons.io.IOUtils.toString(inputStream1, charset13);
        java.io.Writer writer15 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer15);
        byte[] byteArray17 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.io.OutputStream outputStream18 = null;
        long long19 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream18);
        long long21 = org.apache.commons.io.IOUtils.skip(inputStream1, (long) 6);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
    }

    @Test
    public void test3284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3284");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream3 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1);
        java.io.OutputStream outputStream4 = null;
        long long6 = org.apache.commons.io.IOUtils.copy(inputStream3, outputStream4, (int) (byte) 10);
        java.io.OutputStream outputStream7 = null;
        long long8 = org.apache.commons.io.IOUtils.copyLarge(inputStream3, outputStream7);
        java.nio.charset.Charset charset9 = null;
        org.apache.commons.io.LineIterator lineIterator10 = org.apache.commons.io.IOUtils.lineIterator(inputStream3, charset9);
        char[] charArray11 = org.apache.commons.io.IOUtils.toCharArray(inputStream3);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream3);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(lineIterator10);
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[]");
    }

    @Test
    public void test3285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3285");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.io.InputStream inputStream7 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, (int) (byte) 0);
        java.nio.charset.Charset charset8 = null;
        org.apache.commons.io.LineIterator lineIterator9 = org.apache.commons.io.IOUtils.lineIterator(inputStream7, charset8);
        java.io.BufferedInputStream bufferedInputStream10 = org.apache.commons.io.IOUtils.buffer(inputStream7);
        java.io.OutputStream outputStream11 = null;
        java.io.InputStream inputStream15 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray16 = org.apache.commons.io.IOUtils.toByteArray(inputStream15);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream15);
        java.nio.charset.Charset charset18 = null;
        org.apache.commons.io.LineIterator lineIterator19 = org.apache.commons.io.IOUtils.lineIterator(inputStream15, charset18);
        java.nio.charset.Charset charset20 = null;
        java.util.List<java.lang.String> strList21 = org.apache.commons.io.IOUtils.readLines(inputStream15, charset20);
        java.io.InputStream inputStream23 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray24 = new byte[] {};
        int int25 = org.apache.commons.io.IOUtils.length(byteArray24);
        int int26 = org.apache.commons.io.IOUtils.read(inputStream23, byteArray24);
        byte[] byteArray27 = org.apache.commons.io.IOUtils.toByteArray(inputStream23);
        byte[] byteArray29 = org.apache.commons.io.IOUtils.toByteArray(inputStream23, (int) (short) 0);
        byte[] byteArray30 = new byte[] {};
        int int31 = org.apache.commons.io.IOUtils.length(byteArray30);
        org.apache.commons.io.IOUtils.readFully(inputStream23, byteArray30);
        java.lang.String str33 = org.apache.commons.io.IOUtils.toString(byteArray30);
        int int34 = org.apache.commons.io.IOUtils.length(byteArray30);
        org.apache.commons.io.IOUtils.readFully(inputStream15, byteArray30);
        // The following exception was thrown during execution in test generation
        try {
            long long36 = org.apache.commons.io.IOUtils.copyLarge(inputStream7, outputStream11, (long) (short) 1, 0L, byteArray30);
            org.junit.Assert.fail("Expected exception of type java.io.EOFException; message: Bytes to skip: 1 actual: 0");
        } catch (java.io.EOFException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(inputStream7);
        org.junit.Assert.assertNotNull(lineIterator9);
        org.junit.Assert.assertNotNull(bufferedInputStream10);
        org.junit.Assert.assertNotNull(inputStream15);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(lineIterator19);
        org.junit.Assert.assertNotNull(strList21);
        org.junit.Assert.assertNotNull(inputStream23);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
    }

    @Test
    public void test3286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3286");
        java.io.Reader reader0 = null;
        java.io.Writer writer1 = null;
        java.io.InputStream inputStream3 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray4 = new byte[] {};
        int int5 = org.apache.commons.io.IOUtils.length(byteArray4);
        int int6 = org.apache.commons.io.IOUtils.read(inputStream3, byteArray4);
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray(inputStream3);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer8 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream3, iOExceptionConsumer8);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream3);
        java.io.BufferedInputStream bufferedInputStream12 = org.apache.commons.io.IOUtils.buffer(inputStream3, (int) (byte) 10);
        java.io.InputStream inputStream14 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream3, (int) (byte) 1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer15 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream3, iOExceptionConsumer15);
        java.io.OutputStream outputStream17 = null;
        java.io.InputStream inputStream19 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray20 = new byte[] {};
        int int21 = org.apache.commons.io.IOUtils.length(byteArray20);
        int int22 = org.apache.commons.io.IOUtils.read(inputStream19, byteArray20);
        byte[] byteArray23 = org.apache.commons.io.IOUtils.toByteArray(inputStream19);
        java.io.InputStream inputStream25 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray26 = new byte[] {};
        int int27 = org.apache.commons.io.IOUtils.length(byteArray26);
        int int28 = org.apache.commons.io.IOUtils.read(inputStream25, byteArray26);
        byte[] byteArray29 = org.apache.commons.io.IOUtils.toByteArray(inputStream25);
        int int30 = org.apache.commons.io.IOUtils.length(byteArray29);
        org.apache.commons.io.IOUtils.readFully(inputStream19, byteArray29);
        long long32 = org.apache.commons.io.IOUtils.copyLarge(inputStream3, outputStream17, byteArray29);
        java.io.InputStream inputStream34 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream35 = null;
        java.io.InputStream inputStream38 = null;
        byte[] byteArray40 = org.apache.commons.io.IOUtils.toByteArray("");
        int int41 = org.apache.commons.io.IOUtils.read(inputStream38, byteArray40);
        long long42 = org.apache.commons.io.IOUtils.copyLarge(inputStream34, outputStream35, 0L, 0L, byteArray40);
        java.nio.charset.Charset charset43 = null;
        java.util.List<java.lang.String> strList44 = org.apache.commons.io.IOUtils.readLines(inputStream34, charset43);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream34);
        java.nio.charset.Charset charset46 = null;
        java.lang.String str47 = org.apache.commons.io.IOUtils.toString(inputStream34, charset46);
        java.io.Writer writer48 = null;
        org.apache.commons.io.IOUtils.copy(inputStream34, writer48);
        byte[] byteArray50 = org.apache.commons.io.IOUtils.toByteArray(inputStream34);
        int int51 = org.apache.commons.io.IOUtils.read(inputStream3, byteArray50);
        java.io.OutputStream outputStream52 = null;
        long long53 = org.apache.commons.io.IOUtils.copyLarge(inputStream3, outputStream52);
        long long55 = org.apache.commons.io.IOUtils.skip(inputStream3, (long) '/');
        java.nio.charset.Charset charset56 = null;
        char[] charArray57 = org.apache.commons.io.IOUtils.toCharArray(inputStream3, charset56);
        // The following exception was thrown during execution in test generation
        try {
            long long58 = org.apache.commons.io.IOUtils.copyLarge(reader0, writer1, charArray57);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[])\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream3);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream12);
        org.junit.Assert.assertNotNull(inputStream14);
        org.junit.Assert.assertNotNull(inputStream19);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertNotNull(inputStream25);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNotNull(inputStream34);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(strList44);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertNotNull(charArray57);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray57), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray57), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray57), "[]");
    }

    @Test
    public void test3287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3287");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray(inputStream1, (int) (short) 0);
        long long9 = org.apache.commons.io.IOUtils.skip(inputStream1, 100L);
        java.io.InputStream inputStream11 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray12 = org.apache.commons.io.IOUtils.toByteArray(inputStream11);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream11);
        java.util.List<java.lang.String> strList14 = org.apache.commons.io.IOUtils.readLines(inputStream11);
        java.io.OutputStream outputStream15 = null;
        long long16 = org.apache.commons.io.IOUtils.copyLarge(inputStream11, outputStream15);
        java.io.OutputStream outputStream17 = null;
        java.io.InputStream inputStream21 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray22 = new byte[] {};
        int int23 = org.apache.commons.io.IOUtils.length(byteArray22);
        int int24 = org.apache.commons.io.IOUtils.read(inputStream21, byteArray22);
        long long25 = org.apache.commons.io.IOUtils.copyLarge(inputStream11, outputStream17, (-1L), 1L, byteArray22);
        int int26 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray22);
        java.io.BufferedInputStream bufferedInputStream27 = org.apache.commons.io.IOUtils.buffer(inputStream1);
        java.io.BufferedInputStream bufferedInputStream28 = org.apache.commons.io.IOUtils.buffer((java.io.InputStream) bufferedInputStream27);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(inputStream11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertNotNull(strList14);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(inputStream21);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(bufferedInputStream27);
        org.junit.Assert.assertNotNull(bufferedInputStream28);
    }

    @Test
    public void test3288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3288");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream4);
        java.io.InputStream inputStream7 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray8 = new byte[] {};
        int int9 = org.apache.commons.io.IOUtils.length(byteArray8);
        int int10 = org.apache.commons.io.IOUtils.read(inputStream7, byteArray8);
        byte[] byteArray11 = org.apache.commons.io.IOUtils.toByteArray(inputStream7);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer12 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream7, iOExceptionConsumer12);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream7);
        java.io.BufferedInputStream bufferedInputStream16 = org.apache.commons.io.IOUtils.buffer(inputStream7, (int) (byte) 10);
        boolean boolean17 = org.apache.commons.io.IOUtils.contentEquals(inputStream4, inputStream7);
        java.io.InputStream inputStream19 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray20 = new byte[] {};
        int int21 = org.apache.commons.io.IOUtils.length(byteArray20);
        int int22 = org.apache.commons.io.IOUtils.read(inputStream19, byteArray20);
        byte[] byteArray23 = org.apache.commons.io.IOUtils.toByteArray(inputStream19);
        byte[] byteArray25 = org.apache.commons.io.IOUtils.toByteArray(inputStream19, (int) (short) 0);
        long long27 = org.apache.commons.io.IOUtils.skip(inputStream19, 100L);
        java.io.InputStream inputStream28 = null;
        java.io.InputStream inputStream29 = null;
        java.io.OutputStream outputStream30 = null;
        byte[] byteArray33 = new byte[] {};
        int int34 = org.apache.commons.io.IOUtils.length(byteArray33);
        java.io.OutputStream outputStream35 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray33, outputStream35);
        long long37 = org.apache.commons.io.IOUtils.copyLarge(inputStream29, outputStream30, 0L, (long) (byte) -1, byteArray33);
        java.io.OutputStream outputStream38 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray33, outputStream38);
        org.apache.commons.io.IOUtils.readFully(inputStream28, byteArray33);
        int int41 = org.apache.commons.io.IOUtils.read(inputStream19, byteArray33);
        int int42 = org.apache.commons.io.IOUtils.read(inputStream7, byteArray33);
        int int45 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray33, 1, (int) (short) 0);
        java.io.InputStream inputStream47 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, (int) (short) 10);
        java.io.InputStream inputStream49 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray50 = new byte[] {};
        int int51 = org.apache.commons.io.IOUtils.length(byteArray50);
        int int52 = org.apache.commons.io.IOUtils.read(inputStream49, byteArray50);
        byte[] byteArray53 = org.apache.commons.io.IOUtils.toByteArray(inputStream49);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer54 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream49, iOExceptionConsumer54);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream49);
        java.io.BufferedInputStream bufferedInputStream58 = org.apache.commons.io.IOUtils.buffer(inputStream49, (int) (byte) 10);
        java.io.InputStream inputStream60 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream49, (int) (byte) 1);
        java.io.OutputStream outputStream61 = null;
        int int62 = org.apache.commons.io.IOUtils.copy(inputStream60, outputStream61);
        java.io.BufferedInputStream bufferedInputStream64 = org.apache.commons.io.IOUtils.buffer(inputStream60, (int) (byte) 10);
        char[] charArray65 = org.apache.commons.io.IOUtils.toCharArray((java.io.InputStream) bufferedInputStream64);
        java.io.InputStream inputStream67 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray68 = org.apache.commons.io.IOUtils.toByteArray(inputStream67);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream67);
        java.util.List<java.lang.String> strList70 = org.apache.commons.io.IOUtils.readLines(inputStream67);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer71 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream67, iOExceptionConsumer71);
        java.io.InputStream inputStream74 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray75 = org.apache.commons.io.IOUtils.toByteArray(inputStream74);
        int int76 = org.apache.commons.io.IOUtils.read(inputStream67, byteArray75);
        org.apache.commons.io.IOUtils.readFully((java.io.InputStream) bufferedInputStream64, byteArray75, (int) ' ', 0);
        byte[] byteArray80 = org.apache.commons.io.IOUtils.toByteArray((java.io.InputStream) bufferedInputStream64);
        // The following exception was thrown during execution in test generation
        try {
            int int83 = org.apache.commons.io.IOUtils.read(inputStream47, byteArray80, (int) (short) 10, 6);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Range [10, 10 + 6) out of bounds for length 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(inputStream7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(inputStream19);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(inputStream47);
        org.junit.Assert.assertNotNull(inputStream49);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream58);
        org.junit.Assert.assertNotNull(inputStream60);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(bufferedInputStream64);
        org.junit.Assert.assertNotNull(charArray65);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray65), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray65), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray65), "[]");
        org.junit.Assert.assertNotNull(inputStream67);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[]");
        org.junit.Assert.assertNotNull(strList70);
        org.junit.Assert.assertNotNull(inputStream74);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[]");
    }

    @Test
    public void test3289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3289");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.List<java.lang.String> strList3 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        long long5 = org.apache.commons.io.IOUtils.skip(inputStream1, (long) '/');
        java.nio.charset.Charset charset6 = null;
        java.lang.String str7 = org.apache.commons.io.IOUtils.toString(inputStream1, charset6);
        byte[] byteArray8 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.io.InputStream inputStream9 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1);
        java.io.InputStream inputStream11 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray12 = new byte[] {};
        int int13 = org.apache.commons.io.IOUtils.length(byteArray12);
        int int14 = org.apache.commons.io.IOUtils.read(inputStream11, byteArray12);
        byte[] byteArray15 = org.apache.commons.io.IOUtils.toByteArray(inputStream11);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer16 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream11, iOExceptionConsumer16);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream11);
        java.io.BufferedInputStream bufferedInputStream20 = org.apache.commons.io.IOUtils.buffer(inputStream11, (int) (byte) 10);
        java.io.InputStream inputStream22 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream11, (int) (byte) 1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer23 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream11, iOExceptionConsumer23);
        java.io.OutputStream outputStream25 = null;
        java.io.InputStream inputStream27 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray28 = new byte[] {};
        int int29 = org.apache.commons.io.IOUtils.length(byteArray28);
        int int30 = org.apache.commons.io.IOUtils.read(inputStream27, byteArray28);
        byte[] byteArray31 = org.apache.commons.io.IOUtils.toByteArray(inputStream27);
        java.io.InputStream inputStream33 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray34 = new byte[] {};
        int int35 = org.apache.commons.io.IOUtils.length(byteArray34);
        int int36 = org.apache.commons.io.IOUtils.read(inputStream33, byteArray34);
        byte[] byteArray37 = org.apache.commons.io.IOUtils.toByteArray(inputStream33);
        int int38 = org.apache.commons.io.IOUtils.length(byteArray37);
        org.apache.commons.io.IOUtils.readFully(inputStream27, byteArray37);
        long long40 = org.apache.commons.io.IOUtils.copyLarge(inputStream11, outputStream25, byteArray37);
        byte[] byteArray41 = org.apache.commons.io.IOUtils.toByteArray(inputStream11);
        java.io.InputStream inputStream43 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray44 = org.apache.commons.io.IOUtils.toByteArray(inputStream43);
        java.io.InputStream inputStream46 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray47 = new byte[] {};
        int int48 = org.apache.commons.io.IOUtils.length(byteArray47);
        int int49 = org.apache.commons.io.IOUtils.read(inputStream46, byteArray47);
        byte[] byteArray50 = org.apache.commons.io.IOUtils.toByteArray(inputStream46);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer51 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream46, iOExceptionConsumer51);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream46);
        java.io.BufferedInputStream bufferedInputStream55 = org.apache.commons.io.IOUtils.buffer(inputStream46, (int) (byte) 10);
        boolean boolean56 = org.apache.commons.io.IOUtils.contentEquals(inputStream43, inputStream46);
        java.io.OutputStream outputStream57 = null;
        long long60 = org.apache.commons.io.IOUtils.copyLarge(inputStream43, outputStream57, (long) (short) 0, (long) 2);
        java.io.OutputStream outputStream61 = null;
        int int62 = org.apache.commons.io.IOUtils.copy(inputStream43, outputStream61);
        java.io.OutputStream outputStream63 = null;
        byte[] byteArray64 = new byte[] {};
        int int65 = org.apache.commons.io.IOUtils.length(byteArray64);
        java.io.OutputStream outputStream66 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray64, outputStream66);
        long long68 = org.apache.commons.io.IOUtils.copyLarge(inputStream43, outputStream63, byteArray64);
        org.apache.commons.io.IOUtils.readFully(inputStream11, byteArray64);
        java.io.InputStream inputStream70 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream11);
        java.util.List<java.lang.String> strList71 = org.apache.commons.io.IOUtils.readLines(inputStream70);
        java.io.InputStream inputStream72 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream70);
        boolean boolean73 = org.apache.commons.io.IOUtils.contentEquals(inputStream1, inputStream70);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(strList3);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(inputStream9);
        org.junit.Assert.assertNotNull(inputStream11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream20);
        org.junit.Assert.assertNotNull(inputStream22);
        org.junit.Assert.assertNotNull(inputStream27);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(inputStream33);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(inputStream43);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[]");
        org.junit.Assert.assertNotNull(inputStream46);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 0L + "'", long60 == 0L);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 0L + "'", long68 == 0L);
        org.junit.Assert.assertNotNull(inputStream70);
        org.junit.Assert.assertNotNull(strList71);
        org.junit.Assert.assertNotNull(inputStream72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
    }

    @Test
    public void test3290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3290");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream3 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1);
        byte[] byteArray8 = new byte[] { (byte) -1, (byte) 100, (byte) 1, (byte) -1 };
        int int9 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray8);
        java.nio.charset.Charset charset10 = null;
        java.lang.String str11 = org.apache.commons.io.IOUtils.toString(inputStream1, charset10);
        java.nio.charset.Charset charset12 = null;
        char[] charArray13 = org.apache.commons.io.IOUtils.toCharArray(inputStream1, charset12);
        java.io.Writer writer14 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray13, writer14);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream3);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-1, 100, 1, -1]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[]");
    }

    @Test
    public void test3291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3291");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.OutputStream outputStream9 = null;
        long long10 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream9);
        org.apache.commons.io.IOUtils.closeQuietly(inputStream1);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
    }

    @Test
    public void test3292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3292");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray(inputStream1, (int) (short) 0);
        java.io.BufferedInputStream bufferedInputStream8 = org.apache.commons.io.IOUtils.buffer(inputStream1);
        java.nio.charset.Charset charset9 = null;
        org.apache.commons.io.LineIterator lineIterator10 = org.apache.commons.io.IOUtils.lineIterator(inputStream1, charset9);
        long long12 = org.apache.commons.io.IOUtils.skip(inputStream1, (long) 'a');
        java.io.InputStream inputStream14 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream15 = null;
        java.io.InputStream inputStream18 = null;
        byte[] byteArray20 = org.apache.commons.io.IOUtils.toByteArray("");
        int int21 = org.apache.commons.io.IOUtils.read(inputStream18, byteArray20);
        long long22 = org.apache.commons.io.IOUtils.copyLarge(inputStream14, outputStream15, 0L, 0L, byteArray20);
        byte[] byteArray24 = org.apache.commons.io.IOUtils.toByteArray(inputStream14, (long) 0);
        org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray24);
        java.lang.String str26 = org.apache.commons.io.IOUtils.toString(inputStream1);
        char[] charArray27 = org.apache.commons.io.IOUtils.toCharArray(inputStream1);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream8);
        org.junit.Assert.assertNotNull(lineIterator10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(inputStream14);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[]");
    }

    @Test
    public void test3293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3293");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream5 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray("");
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray10);
        long long12 = org.apache.commons.io.IOUtils.copyLarge(inputStream4, outputStream5, 0L, 0L, byteArray10);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, byteArray10);
        java.io.BufferedInputStream bufferedInputStream15 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.nio.charset.Charset charset16 = null;
        java.util.List<java.lang.String> strList17 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset16);
        java.io.OutputStream outputStream18 = null;
        long long21 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream18, 0L, (long) 0);
        java.io.BufferedInputStream bufferedInputStream22 = org.apache.commons.io.IOUtils.buffer(inputStream1);
        java.io.BufferedInputStream bufferedInputStream23 = org.apache.commons.io.IOUtils.buffer(inputStream1);
        java.io.BufferedInputStream bufferedInputStream25 = org.apache.commons.io.IOUtils.buffer((java.io.InputStream) bufferedInputStream23, 4);
        java.nio.charset.Charset charset26 = null;
        org.apache.commons.io.LineIterator lineIterator27 = org.apache.commons.io.IOUtils.lineIterator((java.io.InputStream) bufferedInputStream23, charset26);
        java.io.InputStream inputStream29 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream29);
        java.io.InputStream inputStream31 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream29);
        java.lang.String str32 = org.apache.commons.io.IOUtils.toString(inputStream29);
        java.io.InputStream inputStream33 = null;
        byte[] byteArray35 = org.apache.commons.io.IOUtils.toByteArray("");
        int int36 = org.apache.commons.io.IOUtils.read(inputStream33, byteArray35);
        org.apache.commons.io.IOUtils.readFully(inputStream29, byteArray35);
        org.apache.commons.io.IOUtils.readFully((java.io.InputStream) bufferedInputStream23, byteArray35);
        byte[] byteArray39 = org.apache.commons.io.IOUtils.toByteArray((java.io.InputStream) bufferedInputStream23);
        java.io.Writer writer40 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(byteArray39, writer40);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Writer.write(String)\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream15);
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream22);
        org.junit.Assert.assertNotNull(bufferedInputStream23);
        org.junit.Assert.assertNotNull(bufferedInputStream25);
        org.junit.Assert.assertNotNull(lineIterator27);
        org.junit.Assert.assertNotNull(inputStream29);
        org.junit.Assert.assertNotNull(inputStream31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
    }

    @Test
    public void test3294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3294");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        java.nio.charset.Charset charset10 = null;
        java.util.List<java.lang.String> strList11 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset10);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.lang.String str13 = org.apache.commons.io.IOUtils.toString(inputStream1);
        java.nio.charset.Charset charset14 = null;
        java.util.List<java.lang.String> strList15 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset14);
        java.io.OutputStream outputStream17 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList15, "\n", outputStream17, "\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ?");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(strList15);
    }

    @Test
    public void test3295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3295");
        java.io.Reader reader0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.BufferedReader bufferedReader2 = org.apache.commons.io.IOUtils.toBufferedReader(reader0, 6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test3296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3296");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly(inputStream1);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.BufferedInputStream bufferedInputStream12 = org.apache.commons.io.IOUtils.buffer(inputStream1, 100);
        java.io.BufferedInputStream bufferedInputStream14 = org.apache.commons.io.IOUtils.buffer((java.io.InputStream) bufferedInputStream12, (int) (byte) -1);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream12);
        org.junit.Assert.assertNotNull(bufferedInputStream14);
    }

    @Test
    public void test3297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3297");
        java.io.Reader reader0 = null;
        java.io.Reader reader1 = null;
        java.io.Writer writer2 = null;
        java.io.InputStream inputStream6 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray(inputStream6);
        java.io.InputStream inputStream9 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray10 = new byte[] {};
        int int11 = org.apache.commons.io.IOUtils.length(byteArray10);
        int int12 = org.apache.commons.io.IOUtils.read(inputStream9, byteArray10);
        byte[] byteArray13 = org.apache.commons.io.IOUtils.toByteArray(inputStream9);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer14 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream9, iOExceptionConsumer14);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream9);
        java.io.BufferedInputStream bufferedInputStream18 = org.apache.commons.io.IOUtils.buffer(inputStream9, (int) (byte) 10);
        boolean boolean19 = org.apache.commons.io.IOUtils.contentEquals(inputStream6, inputStream9);
        java.io.InputStream inputStream21 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray22 = new byte[] {};
        int int23 = org.apache.commons.io.IOUtils.length(byteArray22);
        int int24 = org.apache.commons.io.IOUtils.read(inputStream21, byteArray22);
        byte[] byteArray25 = org.apache.commons.io.IOUtils.toByteArray(inputStream21);
        byte[] byteArray27 = org.apache.commons.io.IOUtils.toByteArray(inputStream21, (int) (short) 0);
        long long29 = org.apache.commons.io.IOUtils.skip(inputStream21, 100L);
        java.io.InputStream inputStream30 = null;
        java.io.InputStream inputStream31 = null;
        java.io.OutputStream outputStream32 = null;
        byte[] byteArray35 = new byte[] {};
        int int36 = org.apache.commons.io.IOUtils.length(byteArray35);
        java.io.OutputStream outputStream37 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray35, outputStream37);
        long long39 = org.apache.commons.io.IOUtils.copyLarge(inputStream31, outputStream32, 0L, (long) (byte) -1, byteArray35);
        java.io.OutputStream outputStream40 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray35, outputStream40);
        org.apache.commons.io.IOUtils.readFully(inputStream30, byteArray35);
        int int43 = org.apache.commons.io.IOUtils.read(inputStream21, byteArray35);
        int int44 = org.apache.commons.io.IOUtils.read(inputStream9, byteArray35);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer45 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream9, iOExceptionConsumer45);
        java.nio.charset.Charset charset47 = null;
        char[] charArray48 = org.apache.commons.io.IOUtils.toCharArray(inputStream9, charset47);
        long long49 = org.apache.commons.io.IOUtils.copyLarge(reader1, writer2, (-1L), (long) (short) 0, charArray48);
        org.apache.commons.io.IOUtils.readFully(reader0, charArray48);
        java.io.OutputStream outputStream51 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(charArray48, outputStream51, "\r\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ??");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream6);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(inputStream9);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(inputStream21);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(charArray48);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray48), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray48), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray48), "[]");
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
    }

    @Test
    public void test3298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3298");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream5 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray("");
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray10);
        long long12 = org.apache.commons.io.IOUtils.copyLarge(inputStream4, outputStream5, 0L, 0L, byteArray10);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, byteArray10);
        java.io.BufferedInputStream bufferedInputStream15 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.io.InputStream inputStream17 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray18 = org.apache.commons.io.IOUtils.toByteArray(inputStream17);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream17);
        java.io.InputStream inputStream21 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream22 = null;
        java.io.InputStream inputStream25 = null;
        byte[] byteArray27 = org.apache.commons.io.IOUtils.toByteArray("");
        int int28 = org.apache.commons.io.IOUtils.read(inputStream25, byteArray27);
        long long29 = org.apache.commons.io.IOUtils.copyLarge(inputStream21, outputStream22, 0L, 0L, byteArray27);
        java.nio.charset.Charset charset30 = null;
        java.util.List<java.lang.String> strList31 = org.apache.commons.io.IOUtils.readLines(inputStream21, charset30);
        java.io.InputStream inputStream33 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream34 = null;
        java.io.InputStream inputStream37 = null;
        byte[] byteArray39 = org.apache.commons.io.IOUtils.toByteArray("");
        int int40 = org.apache.commons.io.IOUtils.read(inputStream37, byteArray39);
        long long41 = org.apache.commons.io.IOUtils.copyLarge(inputStream33, outputStream34, 0L, 0L, byteArray39);
        java.nio.charset.Charset charset42 = null;
        java.util.List<java.lang.String> strList43 = org.apache.commons.io.IOUtils.readLines(inputStream33, charset42);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream33);
        boolean boolean45 = org.apache.commons.io.IOUtils.contentEquals(inputStream21, inputStream33);
        java.io.OutputStream outputStream46 = null;
        java.io.InputStream inputStream48 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream49 = null;
        java.io.InputStream inputStream52 = null;
        byte[] byteArray54 = org.apache.commons.io.IOUtils.toByteArray("");
        int int55 = org.apache.commons.io.IOUtils.read(inputStream52, byteArray54);
        long long56 = org.apache.commons.io.IOUtils.copyLarge(inputStream48, outputStream49, 0L, 0L, byteArray54);
        long long57 = org.apache.commons.io.IOUtils.copyLarge(inputStream33, outputStream46, byteArray54);
        org.apache.commons.io.IOUtils.readFully(inputStream17, byteArray54);
        org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray54);
        java.lang.String str60 = org.apache.commons.io.IOUtils.toString(inputStream1);
        java.io.BufferedInputStream bufferedInputStream62 = org.apache.commons.io.IOUtils.buffer(inputStream1, 100);
        java.io.Writer writer63 = null;
        java.nio.charset.Charset charset64 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer63, charset64);
        java.io.OutputStream outputStream66 = null;
        int int67 = org.apache.commons.io.IOUtils.copy(inputStream1, outputStream66);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream15);
        org.junit.Assert.assertNotNull(inputStream17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(inputStream21);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNotNull(strList31);
        org.junit.Assert.assertNotNull(inputStream33);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertNotNull(strList43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(inputStream48);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(bufferedInputStream62);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
    }

    @Test
    public void test3299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3299");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream3 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1);
        java.io.OutputStream outputStream4 = null;
        int int5 = org.apache.commons.io.IOUtils.copy(inputStream3, outputStream4);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.String> strList7 = org.apache.commons.io.IOUtils.readLines(inputStream3, "hi!");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: hi!");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test3300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3300");
        java.io.Reader reader0 = null;
        java.io.Writer writer1 = null;
        java.io.Reader reader4 = null;
        java.io.Reader reader5 = null;
        char[] charArray6 = new char[] {};
        int int7 = org.apache.commons.io.IOUtils.length(charArray6);
        java.io.Writer writer8 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray6, writer8);
        int int10 = org.apache.commons.io.IOUtils.length(charArray6);
        java.io.Writer writer11 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray6, writer11);
        int int13 = org.apache.commons.io.IOUtils.length(charArray6);
        int int14 = org.apache.commons.io.IOUtils.read(reader5, charArray6);
        int int15 = org.apache.commons.io.IOUtils.read(reader4, charArray6);
        // The following exception was thrown during execution in test generation
        try {
            long long16 = org.apache.commons.io.IOUtils.copyLarge(reader0, writer1, (long) 3, (long) 1, charArray6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[], int, int)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test3301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3301");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.io.InputStream inputStream7 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray8 = new byte[] {};
        int int9 = org.apache.commons.io.IOUtils.length(byteArray8);
        int int10 = org.apache.commons.io.IOUtils.read(inputStream7, byteArray8);
        byte[] byteArray11 = org.apache.commons.io.IOUtils.toByteArray(inputStream7);
        int int12 = org.apache.commons.io.IOUtils.length(byteArray11);
        org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray11);
        java.lang.String str14 = org.apache.commons.io.IOUtils.toString(inputStream1);
        java.io.Writer writer15 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer15);
        java.io.Writer writer17 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.copy(inputStream1, writer17, "hi!");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: hi!");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(inputStream7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
    }

    @Test
    public void test3302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3302");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        java.io.OutputStream outputStream10 = null;
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream10, (long) (short) 0, (-1L));
        java.lang.String str14 = org.apache.commons.io.IOUtils.toString(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly(inputStream1);
        org.apache.commons.io.function.IOConsumer<java.io.IOException> iOExceptionIOConsumer16 = null;
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1, iOExceptionIOConsumer16);
        java.io.InputStream inputStream19 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray20 = new byte[] {};
        int int21 = org.apache.commons.io.IOUtils.length(byteArray20);
        int int22 = org.apache.commons.io.IOUtils.read(inputStream19, byteArray20);
        byte[] byteArray23 = org.apache.commons.io.IOUtils.toByteArray(inputStream19);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer24 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream19, iOExceptionConsumer24);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream19);
        java.io.BufferedInputStream bufferedInputStream28 = org.apache.commons.io.IOUtils.buffer(inputStream19, (int) (byte) 10);
        java.io.InputStream inputStream30 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream19, (int) (byte) 1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer31 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream19, iOExceptionConsumer31);
        java.io.OutputStream outputStream33 = null;
        java.io.InputStream inputStream35 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray36 = new byte[] {};
        int int37 = org.apache.commons.io.IOUtils.length(byteArray36);
        int int38 = org.apache.commons.io.IOUtils.read(inputStream35, byteArray36);
        byte[] byteArray39 = org.apache.commons.io.IOUtils.toByteArray(inputStream35);
        java.io.InputStream inputStream41 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray42 = new byte[] {};
        int int43 = org.apache.commons.io.IOUtils.length(byteArray42);
        int int44 = org.apache.commons.io.IOUtils.read(inputStream41, byteArray42);
        byte[] byteArray45 = org.apache.commons.io.IOUtils.toByteArray(inputStream41);
        int int46 = org.apache.commons.io.IOUtils.length(byteArray45);
        org.apache.commons.io.IOUtils.readFully(inputStream35, byteArray45);
        long long48 = org.apache.commons.io.IOUtils.copyLarge(inputStream19, outputStream33, byteArray45);
        int int49 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray45);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str51 = org.apache.commons.io.IOUtils.toString(byteArray45, "\r\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ??");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(inputStream19);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream28);
        org.junit.Assert.assertNotNull(inputStream30);
        org.junit.Assert.assertNotNull(inputStream35);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertNotNull(inputStream41);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
    }

    @Test
    public void test3303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3303");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        java.nio.charset.Charset charset10 = null;
        java.util.List<java.lang.String> strList11 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset10);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream14 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, (int) (byte) 0);
        java.io.Writer writer15 = null;
        java.nio.charset.Charset charset16 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer15, charset16);
        java.nio.charset.Charset charset18 = null;
        java.util.List<java.lang.String> strList19 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset18);
        java.io.InputStream inputStream21 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray22 = new byte[] {};
        int int23 = org.apache.commons.io.IOUtils.length(byteArray22);
        int int24 = org.apache.commons.io.IOUtils.read(inputStream21, byteArray22);
        byte[] byteArray25 = org.apache.commons.io.IOUtils.toByteArray(inputStream21);
        java.io.InputStream inputStream27 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray28 = new byte[] {};
        int int29 = org.apache.commons.io.IOUtils.length(byteArray28);
        int int30 = org.apache.commons.io.IOUtils.read(inputStream27, byteArray28);
        byte[] byteArray31 = org.apache.commons.io.IOUtils.toByteArray(inputStream27);
        int int32 = org.apache.commons.io.IOUtils.length(byteArray31);
        org.apache.commons.io.IOUtils.readFully(inputStream21, byteArray31);
        java.io.InputStream inputStream34 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream21);
        java.io.InputStream inputStream36 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray37 = new byte[] {};
        int int38 = org.apache.commons.io.IOUtils.length(byteArray37);
        int int39 = org.apache.commons.io.IOUtils.read(inputStream36, byteArray37);
        org.apache.commons.io.IOUtils.closeQuietly(inputStream36);
        java.io.InputStream inputStream42 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray43 = new byte[] {};
        int int44 = org.apache.commons.io.IOUtils.length(byteArray43);
        int int45 = org.apache.commons.io.IOUtils.read(inputStream42, byteArray43);
        java.lang.String str46 = org.apache.commons.io.IOUtils.toString(byteArray43);
        int int49 = org.apache.commons.io.IOUtils.read(inputStream36, byteArray43, (int) (byte) 10, (int) (short) 0);
        java.lang.String str50 = org.apache.commons.io.IOUtils.toString(byteArray43);
        int int51 = org.apache.commons.io.IOUtils.length(byteArray43);
        int int52 = org.apache.commons.io.IOUtils.read(inputStream21, byteArray43);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream21);
        boolean boolean54 = org.apache.commons.io.IOUtils.contentEquals(inputStream1, inputStream21);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.skipFully(inputStream1, (long) 5);
            org.junit.Assert.fail("Expected exception of type java.io.EOFException; message: Bytes to skip: 5 actual: 0");
        } catch (java.io.EOFException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertNotNull(inputStream14);
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertNotNull(inputStream21);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertNotNull(inputStream27);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(inputStream34);
        org.junit.Assert.assertNotNull(inputStream36);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(inputStream42);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
    }

    @Test
    public void test3304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3304");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.BufferedInputStream bufferedInputStream10 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        byte[] byteArray11 = null;
        org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray11, (int) '4', 0);
        java.io.BufferedInputStream bufferedInputStream15 = org.apache.commons.io.IOUtils.buffer(inputStream1);
        java.io.BufferedInputStream bufferedInputStream17 = org.apache.commons.io.IOUtils.buffer((java.io.InputStream) bufferedInputStream15, (int) (byte) -1);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream10);
        org.junit.Assert.assertNotNull(bufferedInputStream15);
        org.junit.Assert.assertNotNull(bufferedInputStream17);
    }

    @Test
    public void test3305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3305");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        byte[] byteArray11 = org.apache.commons.io.IOUtils.toByteArray(inputStream1, (long) 0);
        byte[] byteArray13 = org.apache.commons.io.IOUtils.toByteArray(inputStream1, 0);
        java.io.OutputStream outputStream14 = null;
        long long15 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream14);
        long long17 = org.apache.commons.io.IOUtils.skip(inputStream1, (long) 6);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
    }

    @Test
    public void test3306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3306");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str7 = org.apache.commons.io.IOUtils.toString(byteArray5, "hi!");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: hi!");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
    }

    @Test
    public void test3307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3307");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.util.List<java.lang.String> strList4 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.BufferedInputStream bufferedInputStream5 = org.apache.commons.io.IOUtils.buffer(inputStream1);
        java.io.OutputStream outputStream6 = null;
        long long7 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream6);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream9 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1);
        java.io.BufferedInputStream bufferedInputStream10 = org.apache.commons.io.IOUtils.buffer(inputStream1);
        java.io.BufferedInputStream bufferedInputStream11 = org.apache.commons.io.IOUtils.buffer((java.io.InputStream) bufferedInputStream10);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) bufferedInputStream11);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertNotNull(bufferedInputStream5);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(inputStream9);
        org.junit.Assert.assertNotNull(bufferedInputStream10);
        org.junit.Assert.assertNotNull(bufferedInputStream11);
    }

    @Test
    public void test3308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3308");
        java.io.Reader reader0 = null;
        java.io.Writer writer1 = null;
        char[] charArray4 = new char[] {};
        int int5 = org.apache.commons.io.IOUtils.length(charArray4);
        java.io.Writer writer6 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray4, writer6);
        java.io.Writer writer8 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray4, writer8);
        long long10 = org.apache.commons.io.IOUtils.copyLarge(reader0, writer1, 0L, (long) (byte) 100, charArray4);
        java.io.Writer writer11 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(charArray4, writer11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Writer.write(char[])\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
    }

    @Test
    public void test3309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3309");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.nio.charset.Charset charset4 = null;
        org.apache.commons.io.LineIterator lineIterator5 = org.apache.commons.io.IOUtils.lineIterator(inputStream1, charset4);
        java.nio.charset.Charset charset6 = null;
        java.util.List<java.lang.String> strList7 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset6);
        java.io.InputStream inputStream9 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray10 = new byte[] {};
        int int11 = org.apache.commons.io.IOUtils.length(byteArray10);
        int int12 = org.apache.commons.io.IOUtils.read(inputStream9, byteArray10);
        byte[] byteArray13 = org.apache.commons.io.IOUtils.toByteArray(inputStream9);
        byte[] byteArray15 = org.apache.commons.io.IOUtils.toByteArray(inputStream9, (int) (short) 0);
        byte[] byteArray16 = new byte[] {};
        int int17 = org.apache.commons.io.IOUtils.length(byteArray16);
        org.apache.commons.io.IOUtils.readFully(inputStream9, byteArray16);
        java.lang.String str19 = org.apache.commons.io.IOUtils.toString(byteArray16);
        int int20 = org.apache.commons.io.IOUtils.length(byteArray16);
        org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray16);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.nio.charset.Charset charset23 = null;
        char[] charArray24 = org.apache.commons.io.IOUtils.toCharArray(inputStream1, charset23);
        java.io.OutputStream outputStream25 = null;
        long long27 = org.apache.commons.io.IOUtils.copy(inputStream1, outputStream25, (int) '/');
        // The following exception was thrown during execution in test generation
        try {
            char[] charArray29 = org.apache.commons.io.IOUtils.toCharArray(inputStream1, "");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(lineIterator5);
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertNotNull(inputStream9);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[]");
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
    }

    @Test
    public void test3310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3310");
        java.io.Reader reader0 = null;
        java.io.Reader reader1 = null;
        char[] charArray2 = new char[] {};
        int int3 = org.apache.commons.io.IOUtils.length(charArray2);
        java.io.Writer writer4 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray2, writer4);
        int int6 = org.apache.commons.io.IOUtils.length(charArray2);
        java.io.Writer writer7 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray2, writer7);
        int int9 = org.apache.commons.io.IOUtils.length(charArray2);
        int int10 = org.apache.commons.io.IOUtils.read(reader1, charArray2);
        int int11 = org.apache.commons.io.IOUtils.length(charArray2);
        org.apache.commons.io.IOUtils.readFully(reader0, charArray2, (-1), (int) (byte) 0);
        int int15 = org.apache.commons.io.IOUtils.length(charArray2);
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray2), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray2), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test3311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3311");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.util.List<java.lang.String> strList4 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.OutputStream outputStream5 = null;
        long long6 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream5);
        java.io.Writer writer7 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer7);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream11 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray12 = new byte[] {};
        int int13 = org.apache.commons.io.IOUtils.length(byteArray12);
        int int14 = org.apache.commons.io.IOUtils.read(inputStream11, byteArray12);
        byte[] byteArray15 = org.apache.commons.io.IOUtils.toByteArray(inputStream11);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer16 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream11, iOExceptionConsumer16);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream11);
        java.io.BufferedInputStream bufferedInputStream20 = org.apache.commons.io.IOUtils.buffer(inputStream11, (int) (byte) 10);
        java.io.InputStream inputStream22 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream11, (int) (byte) 1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer23 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream11, iOExceptionConsumer23);
        java.io.OutputStream outputStream25 = null;
        java.io.InputStream inputStream27 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray28 = new byte[] {};
        int int29 = org.apache.commons.io.IOUtils.length(byteArray28);
        int int30 = org.apache.commons.io.IOUtils.read(inputStream27, byteArray28);
        byte[] byteArray31 = org.apache.commons.io.IOUtils.toByteArray(inputStream27);
        java.io.InputStream inputStream33 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray34 = new byte[] {};
        int int35 = org.apache.commons.io.IOUtils.length(byteArray34);
        int int36 = org.apache.commons.io.IOUtils.read(inputStream33, byteArray34);
        byte[] byteArray37 = org.apache.commons.io.IOUtils.toByteArray(inputStream33);
        int int38 = org.apache.commons.io.IOUtils.length(byteArray37);
        org.apache.commons.io.IOUtils.readFully(inputStream27, byteArray37);
        long long40 = org.apache.commons.io.IOUtils.copyLarge(inputStream11, outputStream25, byteArray37);
        boolean boolean41 = org.apache.commons.io.IOUtils.contentEquals(inputStream1, inputStream11);
        java.io.BufferedInputStream bufferedInputStream43 = org.apache.commons.io.IOUtils.buffer(inputStream1, 5);
        java.io.InputStream inputStream45 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream46 = null;
        java.io.InputStream inputStream49 = null;
        byte[] byteArray51 = org.apache.commons.io.IOUtils.toByteArray("");
        int int52 = org.apache.commons.io.IOUtils.read(inputStream49, byteArray51);
        long long53 = org.apache.commons.io.IOUtils.copyLarge(inputStream45, outputStream46, 0L, 0L, byteArray51);
        java.nio.charset.Charset charset54 = null;
        java.util.List<java.lang.String> strList55 = org.apache.commons.io.IOUtils.readLines(inputStream45, charset54);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream45);
        java.nio.charset.Charset charset57 = null;
        java.lang.String str58 = org.apache.commons.io.IOUtils.toString(inputStream45, charset57);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer59 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream45, iOExceptionConsumer59);
        boolean boolean61 = org.apache.commons.io.IOUtils.contentEquals((java.io.InputStream) bufferedInputStream43, inputStream45);
        byte[] byteArray63 = org.apache.commons.io.IOUtils.toByteArray(inputStream45, 0);
        java.nio.charset.Charset charset64 = null;
        org.apache.commons.io.LineIterator lineIterator65 = org.apache.commons.io.IOUtils.lineIterator(inputStream45, charset64);
        java.io.InputStream inputStream67 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream45, (int) (short) 100);
        java.io.Writer writer68 = null;
        java.nio.charset.Charset charset69 = null;
        org.apache.commons.io.IOUtils.copy(inputStream67, writer68, charset69);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(inputStream11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream20);
        org.junit.Assert.assertNotNull(inputStream22);
        org.junit.Assert.assertNotNull(inputStream27);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(inputStream33);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(bufferedInputStream43);
        org.junit.Assert.assertNotNull(inputStream45);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertNotNull(strList55);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[]");
        org.junit.Assert.assertNotNull(lineIterator65);
        org.junit.Assert.assertNotNull(inputStream67);
    }

    @Test
    public void test3312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3312");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        java.io.OutputStream outputStream10 = null;
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream10, (long) (short) 0, (-1L));
        char[] charArray14 = org.apache.commons.io.IOUtils.toCharArray(inputStream1);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream17 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray18 = new byte[] {};
        int int19 = org.apache.commons.io.IOUtils.length(byteArray18);
        int int20 = org.apache.commons.io.IOUtils.read(inputStream17, byteArray18);
        byte[] byteArray21 = org.apache.commons.io.IOUtils.toByteArray(inputStream17);
        byte[] byteArray23 = org.apache.commons.io.IOUtils.toByteArray(inputStream17, (int) (short) 0);
        java.io.BufferedInputStream bufferedInputStream24 = org.apache.commons.io.IOUtils.buffer(inputStream17);
        byte[] byteArray25 = org.apache.commons.io.IOUtils.toByteArray((java.io.InputStream) bufferedInputStream24);
        int int26 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray25);
        java.util.List<java.lang.String> strList27 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.InputStream inputStream29 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray30 = org.apache.commons.io.IOUtils.toByteArray(inputStream29);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream29);
        java.util.List<java.lang.String> strList32 = org.apache.commons.io.IOUtils.readLines(inputStream29);
        java.io.OutputStream outputStream33 = null;
        long long34 = org.apache.commons.io.IOUtils.copyLarge(inputStream29, outputStream33);
        java.io.Writer writer35 = null;
        org.apache.commons.io.IOUtils.copy(inputStream29, writer35);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream29);
        java.io.InputStream inputStream39 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray40 = new byte[] {};
        int int41 = org.apache.commons.io.IOUtils.length(byteArray40);
        int int42 = org.apache.commons.io.IOUtils.read(inputStream39, byteArray40);
        byte[] byteArray43 = org.apache.commons.io.IOUtils.toByteArray(inputStream39);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer44 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream39, iOExceptionConsumer44);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream39);
        java.io.BufferedInputStream bufferedInputStream48 = org.apache.commons.io.IOUtils.buffer(inputStream39, (int) (byte) 10);
        java.io.InputStream inputStream50 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream39, (int) (byte) 1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer51 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream39, iOExceptionConsumer51);
        java.io.OutputStream outputStream53 = null;
        java.io.InputStream inputStream55 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray56 = new byte[] {};
        int int57 = org.apache.commons.io.IOUtils.length(byteArray56);
        int int58 = org.apache.commons.io.IOUtils.read(inputStream55, byteArray56);
        byte[] byteArray59 = org.apache.commons.io.IOUtils.toByteArray(inputStream55);
        java.io.InputStream inputStream61 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray62 = new byte[] {};
        int int63 = org.apache.commons.io.IOUtils.length(byteArray62);
        int int64 = org.apache.commons.io.IOUtils.read(inputStream61, byteArray62);
        byte[] byteArray65 = org.apache.commons.io.IOUtils.toByteArray(inputStream61);
        int int66 = org.apache.commons.io.IOUtils.length(byteArray65);
        org.apache.commons.io.IOUtils.readFully(inputStream55, byteArray65);
        long long68 = org.apache.commons.io.IOUtils.copyLarge(inputStream39, outputStream53, byteArray65);
        boolean boolean69 = org.apache.commons.io.IOUtils.contentEquals(inputStream29, inputStream39);
        java.io.OutputStream outputStream70 = null;
        long long72 = org.apache.commons.io.IOUtils.copy(inputStream29, outputStream70, (int) '/');
        long long74 = org.apache.commons.io.IOUtils.skip(inputStream29, (long) 10);
        java.io.InputStream inputStream76 = org.apache.commons.io.IOUtils.toInputStream("\n");
        byte[] byteArray78 = org.apache.commons.io.IOUtils.toByteArray(inputStream76, (int) (byte) 0);
        java.io.InputStream inputStream80 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray81 = new byte[] {};
        int int82 = org.apache.commons.io.IOUtils.length(byteArray81);
        int int83 = org.apache.commons.io.IOUtils.read(inputStream80, byteArray81);
        byte[] byteArray84 = org.apache.commons.io.IOUtils.toByteArray(inputStream80);
        byte[] byteArray86 = org.apache.commons.io.IOUtils.toByteArray(inputStream80, (int) (short) 0);
        byte[] byteArray87 = new byte[] {};
        int int88 = org.apache.commons.io.IOUtils.length(byteArray87);
        org.apache.commons.io.IOUtils.readFully(inputStream80, byteArray87);
        org.apache.commons.io.IOUtils.readFully(inputStream76, byteArray87);
        int int91 = org.apache.commons.io.IOUtils.read(inputStream29, byteArray87);
        org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray87);
        java.io.OutputStream outputStream93 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray87, outputStream93);
        java.io.Writer writer95 = null;
        java.nio.charset.Charset charset96 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(byteArray87, writer95, charset96);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Writer.write(String)\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[]");
        org.junit.Assert.assertNotNull(inputStream17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(strList27);
        org.junit.Assert.assertNotNull(inputStream29);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertNotNull(strList32);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(inputStream39);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream48);
        org.junit.Assert.assertNotNull(inputStream50);
        org.junit.Assert.assertNotNull(inputStream55);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[]");
        org.junit.Assert.assertNotNull(inputStream61);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 0L + "'", long68 == 0L);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 0L + "'", long72 == 0L);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 0L + "'", long74 == 0L);
        org.junit.Assert.assertNotNull(inputStream76);
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[]");
        org.junit.Assert.assertNotNull(inputStream80);
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[]");
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[]");
        org.junit.Assert.assertNotNull(byteArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
    }

    @Test
    public void test3313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3313");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.nio.charset.Charset charset6 = null;
        java.util.List<java.lang.String> strList7 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset6);
        java.nio.charset.Charset charset8 = null;
        org.apache.commons.io.LineIterator lineIterator9 = org.apache.commons.io.IOUtils.lineIterator(inputStream1, charset8);
        java.io.InputStream inputStream11 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, 6);
        java.io.InputStream inputStream13 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray14 = new byte[] {};
        int int15 = org.apache.commons.io.IOUtils.length(byteArray14);
        int int16 = org.apache.commons.io.IOUtils.read(inputStream13, byteArray14);
        byte[] byteArray17 = org.apache.commons.io.IOUtils.toByteArray(inputStream13);
        byte[] byteArray18 = org.apache.commons.io.IOUtils.toByteArray(inputStream13);
        int int21 = org.apache.commons.io.IOUtils.read(inputStream11, byteArray18, (int) '#', 0);
        java.io.InputStream inputStream23 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream11, 10);
        java.io.InputStream inputStream24 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream11);
        org.apache.commons.io.IOUtils.closeQuietly(inputStream11);
        java.io.InputStream inputStream26 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream11);
        // The following exception was thrown during execution in test generation
        try {
            char[] charArray28 = org.apache.commons.io.IOUtils.toCharArray(inputStream26, "\r\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ??");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertNotNull(lineIterator9);
        org.junit.Assert.assertNotNull(inputStream11);
        org.junit.Assert.assertNotNull(inputStream13);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(inputStream23);
        org.junit.Assert.assertNotNull(inputStream24);
        org.junit.Assert.assertNotNull(inputStream26);
    }

    @Test
    public void test3314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3314");
        java.nio.charset.Charset charset1 = null;
        java.io.InputStream inputStream2 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "", charset1);
        java.util.List<java.lang.String> strList3 = org.apache.commons.io.IOUtils.readLines(inputStream2);
        java.io.InputStream inputStream5 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray6 = new byte[] {};
        int int7 = org.apache.commons.io.IOUtils.length(byteArray6);
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray6);
        byte[] byteArray9 = org.apache.commons.io.IOUtils.toByteArray(inputStream5);
        int int10 = org.apache.commons.io.IOUtils.length(byteArray9);
        org.apache.commons.io.IOUtils.readFully(inputStream2, byteArray9);
        byte[] byteArray13 = org.apache.commons.io.IOUtils.toByteArray(inputStream2, 0L);
        java.io.OutputStream outputStream14 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray13, outputStream14);
        int int16 = org.apache.commons.io.IOUtils.length(byteArray13);
        org.junit.Assert.assertNotNull(inputStream2);
        org.junit.Assert.assertNotNull(strList3);
        org.junit.Assert.assertNotNull(inputStream5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test3315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3315");
        java.io.InputStream inputStream0 = null;
        java.io.InputStream inputStream2 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray3 = org.apache.commons.io.IOUtils.toByteArray(inputStream2);
        java.io.InputStream inputStream5 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray6 = new byte[] {};
        int int7 = org.apache.commons.io.IOUtils.length(byteArray6);
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray6);
        byte[] byteArray9 = org.apache.commons.io.IOUtils.toByteArray(inputStream5);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer10 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream5, iOExceptionConsumer10);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream5);
        java.io.BufferedInputStream bufferedInputStream14 = org.apache.commons.io.IOUtils.buffer(inputStream5, (int) (byte) 10);
        boolean boolean15 = org.apache.commons.io.IOUtils.contentEquals(inputStream2, inputStream5);
        java.io.InputStream inputStream17 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray18 = new byte[] {};
        int int19 = org.apache.commons.io.IOUtils.length(byteArray18);
        int int20 = org.apache.commons.io.IOUtils.read(inputStream17, byteArray18);
        byte[] byteArray21 = org.apache.commons.io.IOUtils.toByteArray(inputStream17);
        byte[] byteArray23 = org.apache.commons.io.IOUtils.toByteArray(inputStream17, (int) (short) 0);
        long long25 = org.apache.commons.io.IOUtils.skip(inputStream17, 100L);
        java.io.InputStream inputStream26 = null;
        java.io.InputStream inputStream27 = null;
        java.io.OutputStream outputStream28 = null;
        byte[] byteArray31 = new byte[] {};
        int int32 = org.apache.commons.io.IOUtils.length(byteArray31);
        java.io.OutputStream outputStream33 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray31, outputStream33);
        long long35 = org.apache.commons.io.IOUtils.copyLarge(inputStream27, outputStream28, 0L, (long) (byte) -1, byteArray31);
        java.io.OutputStream outputStream36 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray31, outputStream36);
        org.apache.commons.io.IOUtils.readFully(inputStream26, byteArray31);
        int int39 = org.apache.commons.io.IOUtils.read(inputStream17, byteArray31);
        int int40 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray31);
        java.io.OutputStream outputStream41 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray31, outputStream41);
        java.io.OutputStream outputStream43 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray31, outputStream43);
        org.apache.commons.io.IOUtils.readFully(inputStream0, byteArray31);
        org.junit.Assert.assertNotNull(inputStream2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertNotNull(inputStream5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(inputStream17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
    }

    @Test
    public void test3316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3316");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.BufferedInputStream bufferedInputStream10 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.io.InputStream inputStream12 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, (int) (byte) 1);
        java.nio.charset.Charset charset13 = null;
        org.apache.commons.io.LineIterator lineIterator14 = org.apache.commons.io.IOUtils.lineIterator(inputStream1, charset13);
        java.io.InputStream inputStream16 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream17 = null;
        java.io.InputStream inputStream19 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream20 = null;
        java.io.InputStream inputStream23 = null;
        byte[] byteArray25 = org.apache.commons.io.IOUtils.toByteArray("");
        int int26 = org.apache.commons.io.IOUtils.read(inputStream23, byteArray25);
        long long27 = org.apache.commons.io.IOUtils.copyLarge(inputStream19, outputStream20, 0L, 0L, byteArray25);
        long long28 = org.apache.commons.io.IOUtils.copyLarge(inputStream16, outputStream17, byteArray25);
        java.io.BufferedInputStream bufferedInputStream30 = org.apache.commons.io.IOUtils.buffer(inputStream16, (int) (byte) 10);
        org.apache.commons.io.IOUtils.closeQuietly(inputStream16);
        java.nio.charset.Charset charset32 = null;
        java.util.List<java.lang.String> strList33 = org.apache.commons.io.IOUtils.readLines(inputStream16, charset32);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream16);
        java.io.OutputStream outputStream35 = null;
        int int36 = org.apache.commons.io.IOUtils.copy(inputStream16, outputStream35);
        java.io.InputStream inputStream38 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray39 = new byte[] {};
        int int40 = org.apache.commons.io.IOUtils.length(byteArray39);
        int int41 = org.apache.commons.io.IOUtils.read(inputStream38, byteArray39);
        byte[] byteArray42 = org.apache.commons.io.IOUtils.toByteArray(inputStream38);
        byte[] byteArray44 = org.apache.commons.io.IOUtils.toByteArray(inputStream38, (int) (short) 0);
        byte[] byteArray45 = new byte[] {};
        int int46 = org.apache.commons.io.IOUtils.length(byteArray45);
        org.apache.commons.io.IOUtils.readFully(inputStream38, byteArray45);
        int int48 = org.apache.commons.io.IOUtils.read(inputStream16, byteArray45);
        java.lang.String str49 = org.apache.commons.io.IOUtils.toString(byteArray45);
        java.io.OutputStream outputStream50 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray45, outputStream50);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray45, (int) '\\', 4);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Range [92, 92 + 4) out of bounds for length 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream10);
        org.junit.Assert.assertNotNull(inputStream12);
        org.junit.Assert.assertNotNull(lineIterator14);
        org.junit.Assert.assertNotNull(inputStream16);
        org.junit.Assert.assertNotNull(inputStream19);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream30);
        org.junit.Assert.assertNotNull(strList33);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(inputStream38);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
    }

    @Test
    public void test3317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3317");
        java.io.Reader reader0 = null;
        java.io.Writer writer1 = null;
        java.io.Reader reader4 = null;
        java.io.Reader reader5 = null;
        java.io.Reader reader6 = null;
        java.io.Writer writer7 = null;
        java.io.InputStream inputStream11 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray12 = org.apache.commons.io.IOUtils.toByteArray(inputStream11);
        java.io.InputStream inputStream14 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray15 = new byte[] {};
        int int16 = org.apache.commons.io.IOUtils.length(byteArray15);
        int int17 = org.apache.commons.io.IOUtils.read(inputStream14, byteArray15);
        byte[] byteArray18 = org.apache.commons.io.IOUtils.toByteArray(inputStream14);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer19 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream14, iOExceptionConsumer19);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream14);
        java.io.BufferedInputStream bufferedInputStream23 = org.apache.commons.io.IOUtils.buffer(inputStream14, (int) (byte) 10);
        boolean boolean24 = org.apache.commons.io.IOUtils.contentEquals(inputStream11, inputStream14);
        java.io.InputStream inputStream26 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray27 = new byte[] {};
        int int28 = org.apache.commons.io.IOUtils.length(byteArray27);
        int int29 = org.apache.commons.io.IOUtils.read(inputStream26, byteArray27);
        byte[] byteArray30 = org.apache.commons.io.IOUtils.toByteArray(inputStream26);
        byte[] byteArray32 = org.apache.commons.io.IOUtils.toByteArray(inputStream26, (int) (short) 0);
        long long34 = org.apache.commons.io.IOUtils.skip(inputStream26, 100L);
        java.io.InputStream inputStream35 = null;
        java.io.InputStream inputStream36 = null;
        java.io.OutputStream outputStream37 = null;
        byte[] byteArray40 = new byte[] {};
        int int41 = org.apache.commons.io.IOUtils.length(byteArray40);
        java.io.OutputStream outputStream42 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray40, outputStream42);
        long long44 = org.apache.commons.io.IOUtils.copyLarge(inputStream36, outputStream37, 0L, (long) (byte) -1, byteArray40);
        java.io.OutputStream outputStream45 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray40, outputStream45);
        org.apache.commons.io.IOUtils.readFully(inputStream35, byteArray40);
        int int48 = org.apache.commons.io.IOUtils.read(inputStream26, byteArray40);
        int int49 = org.apache.commons.io.IOUtils.read(inputStream14, byteArray40);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer50 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream14, iOExceptionConsumer50);
        java.nio.charset.Charset charset52 = null;
        char[] charArray53 = org.apache.commons.io.IOUtils.toCharArray(inputStream14, charset52);
        long long54 = org.apache.commons.io.IOUtils.copyLarge(reader6, writer7, (-1L), (long) (short) 0, charArray53);
        org.apache.commons.io.IOUtils.readFully(reader5, charArray53);
        org.apache.commons.io.IOUtils.readFully(reader4, charArray53);
        long long57 = org.apache.commons.io.IOUtils.copyLarge(reader0, writer1, (-1L), (long) 6, charArray53);
        java.io.OutputStream outputStream58 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(charArray53, outputStream58, "");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertNotNull(inputStream14);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(inputStream26);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(charArray53);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray53), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray53), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray53), "[]");
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
    }

    @Test
    public void test3318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3318");
        java.nio.charset.Charset charset1 = null;
        java.io.InputStream inputStream2 = org.apache.commons.io.IOUtils.toInputStream("", charset1);
        java.nio.charset.Charset charset3 = null;
        java.lang.String str4 = org.apache.commons.io.IOUtils.toString(inputStream2, charset3);
        char[] charArray5 = org.apache.commons.io.IOUtils.toCharArray(inputStream2);
        int int6 = org.apache.commons.io.IOUtils.length(charArray5);
        org.junit.Assert.assertNotNull(inputStream2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test3319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3319");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.util.List<java.lang.String> strList4 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.OutputStream outputStream5 = null;
        long long6 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream5);
        java.io.Writer writer7 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer7);
        java.io.InputStream inputStream10 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream10);
        java.io.InputStream inputStream13 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray14 = org.apache.commons.io.IOUtils.toByteArray(inputStream13);
        java.io.InputStream inputStream16 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray17 = new byte[] {};
        int int18 = org.apache.commons.io.IOUtils.length(byteArray17);
        int int19 = org.apache.commons.io.IOUtils.read(inputStream16, byteArray17);
        byte[] byteArray20 = org.apache.commons.io.IOUtils.toByteArray(inputStream16);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer21 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream16, iOExceptionConsumer21);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream16);
        java.io.BufferedInputStream bufferedInputStream25 = org.apache.commons.io.IOUtils.buffer(inputStream16, (int) (byte) 10);
        boolean boolean26 = org.apache.commons.io.IOUtils.contentEquals(inputStream13, inputStream16);
        java.io.InputStream inputStream28 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray29 = new byte[] {};
        int int30 = org.apache.commons.io.IOUtils.length(byteArray29);
        int int31 = org.apache.commons.io.IOUtils.read(inputStream28, byteArray29);
        byte[] byteArray32 = org.apache.commons.io.IOUtils.toByteArray(inputStream28);
        byte[] byteArray34 = org.apache.commons.io.IOUtils.toByteArray(inputStream28, (int) (short) 0);
        long long36 = org.apache.commons.io.IOUtils.skip(inputStream28, 100L);
        java.io.InputStream inputStream37 = null;
        java.io.InputStream inputStream38 = null;
        java.io.OutputStream outputStream39 = null;
        byte[] byteArray42 = new byte[] {};
        int int43 = org.apache.commons.io.IOUtils.length(byteArray42);
        java.io.OutputStream outputStream44 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray42, outputStream44);
        long long46 = org.apache.commons.io.IOUtils.copyLarge(inputStream38, outputStream39, 0L, (long) (byte) -1, byteArray42);
        java.io.OutputStream outputStream47 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray42, outputStream47);
        org.apache.commons.io.IOUtils.readFully(inputStream37, byteArray42);
        int int50 = org.apache.commons.io.IOUtils.read(inputStream28, byteArray42);
        int int51 = org.apache.commons.io.IOUtils.read(inputStream16, byteArray42);
        int int54 = org.apache.commons.io.IOUtils.read(inputStream10, byteArray42, 1, (int) (short) 0);
        boolean boolean55 = org.apache.commons.io.IOUtils.contentEquals(inputStream1, inputStream10);
        java.io.Writer writer56 = null;
        org.apache.commons.io.IOUtils.copy(inputStream10, writer56);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(inputStream10);
        org.junit.Assert.assertNotNull(inputStream13);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(inputStream16);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(inputStream28);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
    }

    @Test
    public void test3320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3320");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream4);
        java.io.InputStream inputStream7 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray8 = new byte[] {};
        int int9 = org.apache.commons.io.IOUtils.length(byteArray8);
        int int10 = org.apache.commons.io.IOUtils.read(inputStream7, byteArray8);
        byte[] byteArray11 = org.apache.commons.io.IOUtils.toByteArray(inputStream7);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer12 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream7, iOExceptionConsumer12);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream7);
        java.io.BufferedInputStream bufferedInputStream16 = org.apache.commons.io.IOUtils.buffer(inputStream7, (int) (byte) 10);
        boolean boolean17 = org.apache.commons.io.IOUtils.contentEquals(inputStream4, inputStream7);
        java.io.InputStream inputStream19 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray20 = new byte[] {};
        int int21 = org.apache.commons.io.IOUtils.length(byteArray20);
        int int22 = org.apache.commons.io.IOUtils.read(inputStream19, byteArray20);
        byte[] byteArray23 = org.apache.commons.io.IOUtils.toByteArray(inputStream19);
        byte[] byteArray25 = org.apache.commons.io.IOUtils.toByteArray(inputStream19, (int) (short) 0);
        long long27 = org.apache.commons.io.IOUtils.skip(inputStream19, 100L);
        java.io.InputStream inputStream28 = null;
        java.io.InputStream inputStream29 = null;
        java.io.OutputStream outputStream30 = null;
        byte[] byteArray33 = new byte[] {};
        int int34 = org.apache.commons.io.IOUtils.length(byteArray33);
        java.io.OutputStream outputStream35 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray33, outputStream35);
        long long37 = org.apache.commons.io.IOUtils.copyLarge(inputStream29, outputStream30, 0L, (long) (byte) -1, byteArray33);
        java.io.OutputStream outputStream38 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray33, outputStream38);
        org.apache.commons.io.IOUtils.readFully(inputStream28, byteArray33);
        int int41 = org.apache.commons.io.IOUtils.read(inputStream19, byteArray33);
        int int42 = org.apache.commons.io.IOUtils.read(inputStream7, byteArray33);
        int int45 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray33, 1, (int) (short) 0);
        java.io.InputStream inputStream47 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, (int) (short) 10);
        java.util.List<java.lang.String> strList48 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.Writer writer50 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList48, "\n", writer50);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(inputStream7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(inputStream19);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(inputStream47);
        org.junit.Assert.assertNotNull(strList48);
    }

    @Test
    public void test3321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3321");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream5 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray("");
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray10);
        long long12 = org.apache.commons.io.IOUtils.copyLarge(inputStream4, outputStream5, 0L, 0L, byteArray10);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, byteArray10);
        java.io.BufferedInputStream bufferedInputStream15 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.nio.charset.Charset charset16 = null;
        java.util.List<java.lang.String> strList17 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset16);
        java.io.OutputStream outputStream18 = null;
        long long21 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream18, 0L, (long) 0);
        java.io.BufferedInputStream bufferedInputStream22 = org.apache.commons.io.IOUtils.buffer(inputStream1);
        java.io.BufferedInputStream bufferedInputStream23 = org.apache.commons.io.IOUtils.buffer(inputStream1);
        java.io.OutputStream outputStream24 = null;
        long long25 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream24);
        java.io.Writer writer26 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer26);
        java.nio.charset.Charset charset28 = null;
        java.lang.String str29 = org.apache.commons.io.IOUtils.toString(inputStream1, charset28);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.LineIterator lineIterator31 = org.apache.commons.io.IOUtils.lineIterator(inputStream1, "");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream15);
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream22);
        org.junit.Assert.assertNotNull(bufferedInputStream23);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
    }

    @Test
    public void test3322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3322");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.util.List<java.lang.String> strList4 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.OutputStream outputStream5 = null;
        long long6 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream5);
        java.io.Writer writer7 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer7);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream11 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray12 = new byte[] {};
        int int13 = org.apache.commons.io.IOUtils.length(byteArray12);
        int int14 = org.apache.commons.io.IOUtils.read(inputStream11, byteArray12);
        byte[] byteArray15 = org.apache.commons.io.IOUtils.toByteArray(inputStream11);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer16 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream11, iOExceptionConsumer16);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream11);
        java.io.BufferedInputStream bufferedInputStream20 = org.apache.commons.io.IOUtils.buffer(inputStream11, (int) (byte) 10);
        java.io.InputStream inputStream22 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream11, (int) (byte) 1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer23 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream11, iOExceptionConsumer23);
        java.io.OutputStream outputStream25 = null;
        java.io.InputStream inputStream27 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray28 = new byte[] {};
        int int29 = org.apache.commons.io.IOUtils.length(byteArray28);
        int int30 = org.apache.commons.io.IOUtils.read(inputStream27, byteArray28);
        byte[] byteArray31 = org.apache.commons.io.IOUtils.toByteArray(inputStream27);
        java.io.InputStream inputStream33 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray34 = new byte[] {};
        int int35 = org.apache.commons.io.IOUtils.length(byteArray34);
        int int36 = org.apache.commons.io.IOUtils.read(inputStream33, byteArray34);
        byte[] byteArray37 = org.apache.commons.io.IOUtils.toByteArray(inputStream33);
        int int38 = org.apache.commons.io.IOUtils.length(byteArray37);
        org.apache.commons.io.IOUtils.readFully(inputStream27, byteArray37);
        long long40 = org.apache.commons.io.IOUtils.copyLarge(inputStream11, outputStream25, byteArray37);
        boolean boolean41 = org.apache.commons.io.IOUtils.contentEquals(inputStream1, inputStream11);
        java.io.BufferedInputStream bufferedInputStream43 = org.apache.commons.io.IOUtils.buffer(inputStream1, 5);
        java.io.InputStream inputStream45 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream46 = null;
        java.io.InputStream inputStream49 = null;
        byte[] byteArray51 = org.apache.commons.io.IOUtils.toByteArray("");
        int int52 = org.apache.commons.io.IOUtils.read(inputStream49, byteArray51);
        long long53 = org.apache.commons.io.IOUtils.copyLarge(inputStream45, outputStream46, 0L, 0L, byteArray51);
        java.nio.charset.Charset charset54 = null;
        java.util.List<java.lang.String> strList55 = org.apache.commons.io.IOUtils.readLines(inputStream45, charset54);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream45);
        java.nio.charset.Charset charset57 = null;
        java.lang.String str58 = org.apache.commons.io.IOUtils.toString(inputStream45, charset57);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer59 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream45, iOExceptionConsumer59);
        boolean boolean61 = org.apache.commons.io.IOUtils.contentEquals((java.io.InputStream) bufferedInputStream43, inputStream45);
        byte[] byteArray63 = org.apache.commons.io.IOUtils.toByteArray(inputStream45, 0);
        java.io.OutputStream outputStream64 = null;
        long long65 = org.apache.commons.io.IOUtils.copyLarge(inputStream45, outputStream64);
        java.io.OutputStream outputStream66 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long69 = org.apache.commons.io.IOUtils.copyLarge(inputStream45, outputStream66, (long) ' ', (long) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.io.EOFException; message: Bytes to skip: 32 actual: 0");
        } catch (java.io.EOFException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(inputStream11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream20);
        org.junit.Assert.assertNotNull(inputStream22);
        org.junit.Assert.assertNotNull(inputStream27);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(inputStream33);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(bufferedInputStream43);
        org.junit.Assert.assertNotNull(inputStream45);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertNotNull(strList55);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[]");
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 0L + "'", long65 == 0L);
    }

    @Test
    public void test3323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3323");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.nio.charset.Charset charset6 = null;
        java.util.List<java.lang.String> strList7 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset6);
        java.nio.charset.Charset charset8 = null;
        org.apache.commons.io.LineIterator lineIterator9 = org.apache.commons.io.IOUtils.lineIterator(inputStream1, charset8);
        java.io.InputStream inputStream11 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, 6);
        java.io.BufferedInputStream bufferedInputStream13 = org.apache.commons.io.IOUtils.buffer(inputStream11, 3);
        java.io.InputStream inputStream15 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray16 = org.apache.commons.io.IOUtils.toByteArray(inputStream15);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream15);
        java.util.List<java.lang.String> strList18 = org.apache.commons.io.IOUtils.readLines(inputStream15);
        java.io.OutputStream outputStream19 = null;
        long long20 = org.apache.commons.io.IOUtils.copyLarge(inputStream15, outputStream19);
        java.io.Writer writer21 = null;
        org.apache.commons.io.IOUtils.copy(inputStream15, writer21);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream15);
        java.io.InputStream inputStream25 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray26 = new byte[] {};
        int int27 = org.apache.commons.io.IOUtils.length(byteArray26);
        int int28 = org.apache.commons.io.IOUtils.read(inputStream25, byteArray26);
        byte[] byteArray29 = org.apache.commons.io.IOUtils.toByteArray(inputStream25);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer30 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream25, iOExceptionConsumer30);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream25);
        java.io.BufferedInputStream bufferedInputStream34 = org.apache.commons.io.IOUtils.buffer(inputStream25, (int) (byte) 10);
        java.io.InputStream inputStream36 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream25, (int) (byte) 1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer37 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream25, iOExceptionConsumer37);
        java.io.OutputStream outputStream39 = null;
        java.io.InputStream inputStream41 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray42 = new byte[] {};
        int int43 = org.apache.commons.io.IOUtils.length(byteArray42);
        int int44 = org.apache.commons.io.IOUtils.read(inputStream41, byteArray42);
        byte[] byteArray45 = org.apache.commons.io.IOUtils.toByteArray(inputStream41);
        java.io.InputStream inputStream47 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray48 = new byte[] {};
        int int49 = org.apache.commons.io.IOUtils.length(byteArray48);
        int int50 = org.apache.commons.io.IOUtils.read(inputStream47, byteArray48);
        byte[] byteArray51 = org.apache.commons.io.IOUtils.toByteArray(inputStream47);
        int int52 = org.apache.commons.io.IOUtils.length(byteArray51);
        org.apache.commons.io.IOUtils.readFully(inputStream41, byteArray51);
        long long54 = org.apache.commons.io.IOUtils.copyLarge(inputStream25, outputStream39, byteArray51);
        boolean boolean55 = org.apache.commons.io.IOUtils.contentEquals(inputStream15, inputStream25);
        java.io.BufferedInputStream bufferedInputStream56 = org.apache.commons.io.IOUtils.buffer(inputStream15);
        java.io.BufferedInputStream bufferedInputStream58 = org.apache.commons.io.IOUtils.buffer(inputStream15, (int) (short) 100);
        boolean boolean59 = org.apache.commons.io.IOUtils.contentEquals(inputStream11, inputStream15);
        char[] charArray60 = org.apache.commons.io.IOUtils.toCharArray(inputStream15);
        long long62 = org.apache.commons.io.IOUtils.skip(inputStream15, (long) ' ');
        java.nio.charset.Charset charset63 = null;
        org.apache.commons.io.LineIterator lineIterator64 = org.apache.commons.io.IOUtils.lineIterator(inputStream15, charset63);
        java.nio.charset.Charset charset65 = null;
        java.util.List<java.lang.String> strList66 = org.apache.commons.io.IOUtils.readLines(inputStream15, charset65);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertNotNull(lineIterator9);
        org.junit.Assert.assertNotNull(inputStream11);
        org.junit.Assert.assertNotNull(bufferedInputStream13);
        org.junit.Assert.assertNotNull(inputStream15);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(inputStream25);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream34);
        org.junit.Assert.assertNotNull(inputStream36);
        org.junit.Assert.assertNotNull(inputStream41);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
        org.junit.Assert.assertNotNull(inputStream47);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(bufferedInputStream56);
        org.junit.Assert.assertNotNull(bufferedInputStream58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(charArray60);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray60), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray60), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray60), "[]");
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 0L + "'", long62 == 0L);
        org.junit.Assert.assertNotNull(lineIterator64);
        org.junit.Assert.assertNotNull(strList66);
    }

    @Test
    public void test3324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3324");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream5 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray("");
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray10);
        long long12 = org.apache.commons.io.IOUtils.copyLarge(inputStream4, outputStream5, 0L, 0L, byteArray10);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, byteArray10);
        java.io.BufferedInputStream bufferedInputStream15 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.nio.charset.Charset charset16 = null;
        java.util.List<java.lang.String> strList17 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset16);
        java.io.OutputStream outputStream18 = null;
        long long21 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream18, 0L, (long) 0);
        java.io.BufferedInputStream bufferedInputStream22 = org.apache.commons.io.IOUtils.buffer(inputStream1);
        java.io.BufferedInputStream bufferedInputStream23 = org.apache.commons.io.IOUtils.buffer(inputStream1);
        java.io.BufferedInputStream bufferedInputStream25 = org.apache.commons.io.IOUtils.buffer((java.io.InputStream) bufferedInputStream23, 4);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) bufferedInputStream25);
        java.io.Writer writer27 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.copy((java.io.InputStream) bufferedInputStream25, writer27, "hi!");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: hi!");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream15);
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream22);
        org.junit.Assert.assertNotNull(bufferedInputStream23);
        org.junit.Assert.assertNotNull(bufferedInputStream25);
    }

    @Test
    public void test3325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3325");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        java.nio.charset.Charset charset10 = null;
        java.util.List<java.lang.String> strList11 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset10);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.nio.charset.Charset charset13 = null;
        java.lang.String str14 = org.apache.commons.io.IOUtils.toString(inputStream1, charset13);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer15 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer15);
        java.io.InputStream inputStream17 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1);
        long long19 = org.apache.commons.io.IOUtils.skip(inputStream1, (long) 'a');
        java.io.BufferedInputStream bufferedInputStream21 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) '/');
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(inputStream17);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream21);
    }

    @Test
    public void test3326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3326");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        java.nio.charset.Charset charset5 = null;
        org.apache.commons.io.LineIterator lineIterator6 = org.apache.commons.io.IOUtils.lineIterator(inputStream1, charset5);
        java.io.InputStream inputStream8 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray9 = new byte[] {};
        int int10 = org.apache.commons.io.IOUtils.length(byteArray9);
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray9);
        byte[] byteArray12 = org.apache.commons.io.IOUtils.toByteArray(inputStream8);
        boolean boolean13 = org.apache.commons.io.IOUtils.contentEquals(inputStream1, inputStream8);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.BufferedInputStream bufferedInputStream16 = org.apache.commons.io.IOUtils.buffer(inputStream1, 3);
        java.io.Writer writer17 = null;
        java.nio.charset.Charset charset18 = null;
        org.apache.commons.io.IOUtils.copy((java.io.InputStream) bufferedInputStream16, writer17, charset18);
        java.io.InputStream inputStream21 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream22 = null;
        java.io.InputStream inputStream25 = null;
        byte[] byteArray27 = org.apache.commons.io.IOUtils.toByteArray("");
        int int28 = org.apache.commons.io.IOUtils.read(inputStream25, byteArray27);
        long long29 = org.apache.commons.io.IOUtils.copyLarge(inputStream21, outputStream22, 0L, 0L, byteArray27);
        java.io.Writer writer30 = null;
        org.apache.commons.io.IOUtils.copy(inputStream21, writer30);
        java.util.List<java.lang.String> strList32 = org.apache.commons.io.IOUtils.readLines(inputStream21);
        java.io.InputStream inputStream33 = null;
        java.io.OutputStream outputStream34 = null;
        byte[] byteArray37 = new byte[] {};
        int int38 = org.apache.commons.io.IOUtils.length(byteArray37);
        java.io.OutputStream outputStream39 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray37, outputStream39);
        long long41 = org.apache.commons.io.IOUtils.copyLarge(inputStream33, outputStream34, 0L, (long) (byte) -1, byteArray37);
        java.io.OutputStream outputStream42 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray37, outputStream42);
        int int44 = org.apache.commons.io.IOUtils.length(byteArray37);
        java.io.OutputStream outputStream45 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray37, outputStream45);
        int int47 = org.apache.commons.io.IOUtils.read(inputStream21, byteArray37);
        java.io.OutputStream outputStream48 = null;
        java.io.InputStream inputStream50 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray51 = new byte[] {};
        int int52 = org.apache.commons.io.IOUtils.length(byteArray51);
        int int53 = org.apache.commons.io.IOUtils.read(inputStream50, byteArray51);
        byte[] byteArray54 = org.apache.commons.io.IOUtils.toByteArray(inputStream50);
        byte[] byteArray56 = org.apache.commons.io.IOUtils.toByteArray(inputStream50, (int) (short) 0);
        long long58 = org.apache.commons.io.IOUtils.skip(inputStream50, 100L);
        java.io.InputStream inputStream59 = null;
        java.io.InputStream inputStream60 = null;
        java.io.OutputStream outputStream61 = null;
        byte[] byteArray64 = new byte[] {};
        int int65 = org.apache.commons.io.IOUtils.length(byteArray64);
        java.io.OutputStream outputStream66 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray64, outputStream66);
        long long68 = org.apache.commons.io.IOUtils.copyLarge(inputStream60, outputStream61, 0L, (long) (byte) -1, byteArray64);
        java.io.OutputStream outputStream69 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray64, outputStream69);
        org.apache.commons.io.IOUtils.readFully(inputStream59, byteArray64);
        int int72 = org.apache.commons.io.IOUtils.read(inputStream50, byteArray64);
        java.io.OutputStream outputStream73 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray64, outputStream73);
        java.lang.String str75 = org.apache.commons.io.IOUtils.toString(byteArray64);
        long long76 = org.apache.commons.io.IOUtils.copyLarge(inputStream21, outputStream48, byteArray64);
        int int79 = org.apache.commons.io.IOUtils.read((java.io.InputStream) bufferedInputStream16, byteArray64, (int) (short) 1, (int) (byte) 0);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(lineIterator6);
        org.junit.Assert.assertNotNull(inputStream8);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(bufferedInputStream16);
        org.junit.Assert.assertNotNull(inputStream21);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNotNull(strList32);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(inputStream50);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[]");
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 0L + "'", long58 == 0L);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 0L + "'", long68 == 0L);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 0L + "'", long76 == 0L);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
    }

    @Test
    public void test3327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3327");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        byte[] byteArray3 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        byte[] byteArray4 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.io.Writer writer5 = null;
        java.nio.charset.Charset charset6 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer5, charset6);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.String> strList9 = org.apache.commons.io.IOUtils.readLines(inputStream1, "\r\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ??");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
    }

    @Test
    public void test3328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3328");
        java.io.Reader reader0 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long2 = org.apache.commons.io.IOUtils.skip(reader0, (long) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[], int, int)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test3329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3329");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream5 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray("");
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray10);
        long long12 = org.apache.commons.io.IOUtils.copyLarge(inputStream4, outputStream5, 0L, 0L, byteArray10);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, byteArray10);
        java.io.BufferedInputStream bufferedInputStream15 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.nio.charset.Charset charset16 = null;
        java.util.List<java.lang.String> strList17 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset16);
        java.io.OutputStream outputStream18 = null;
        long long21 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream18, 0L, (long) 0);
        java.io.BufferedInputStream bufferedInputStream22 = org.apache.commons.io.IOUtils.buffer(inputStream1);
        java.io.BufferedInputStream bufferedInputStream23 = org.apache.commons.io.IOUtils.buffer(inputStream1);
        java.io.BufferedInputStream bufferedInputStream25 = org.apache.commons.io.IOUtils.buffer((java.io.InputStream) bufferedInputStream23, 4);
        java.nio.charset.Charset charset26 = null;
        org.apache.commons.io.LineIterator lineIterator27 = org.apache.commons.io.IOUtils.lineIterator((java.io.InputStream) bufferedInputStream23, charset26);
        java.io.InputStream inputStream29 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream29);
        java.io.InputStream inputStream31 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream29);
        java.lang.String str32 = org.apache.commons.io.IOUtils.toString(inputStream29);
        java.io.InputStream inputStream33 = null;
        byte[] byteArray35 = org.apache.commons.io.IOUtils.toByteArray("");
        int int36 = org.apache.commons.io.IOUtils.read(inputStream33, byteArray35);
        org.apache.commons.io.IOUtils.readFully(inputStream29, byteArray35);
        org.apache.commons.io.IOUtils.readFully((java.io.InputStream) bufferedInputStream23, byteArray35);
        java.lang.String str39 = org.apache.commons.io.IOUtils.toString((java.io.InputStream) bufferedInputStream23);
        java.io.InputStream inputStream41 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream42 = null;
        java.io.InputStream inputStream45 = null;
        byte[] byteArray47 = org.apache.commons.io.IOUtils.toByteArray("");
        int int48 = org.apache.commons.io.IOUtils.read(inputStream45, byteArray47);
        long long49 = org.apache.commons.io.IOUtils.copyLarge(inputStream41, outputStream42, 0L, 0L, byteArray47);
        java.nio.charset.Charset charset50 = null;
        java.util.List<java.lang.String> strList51 = org.apache.commons.io.IOUtils.readLines(inputStream41, charset50);
        java.io.InputStream inputStream53 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream54 = null;
        java.io.InputStream inputStream57 = null;
        byte[] byteArray59 = org.apache.commons.io.IOUtils.toByteArray("");
        int int60 = org.apache.commons.io.IOUtils.read(inputStream57, byteArray59);
        long long61 = org.apache.commons.io.IOUtils.copyLarge(inputStream53, outputStream54, 0L, 0L, byteArray59);
        java.nio.charset.Charset charset62 = null;
        java.util.List<java.lang.String> strList63 = org.apache.commons.io.IOUtils.readLines(inputStream53, charset62);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream53);
        boolean boolean65 = org.apache.commons.io.IOUtils.contentEquals(inputStream41, inputStream53);
        java.io.OutputStream outputStream66 = null;
        java.io.InputStream inputStream68 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream69 = null;
        java.io.InputStream inputStream72 = null;
        byte[] byteArray74 = org.apache.commons.io.IOUtils.toByteArray("");
        int int75 = org.apache.commons.io.IOUtils.read(inputStream72, byteArray74);
        long long76 = org.apache.commons.io.IOUtils.copyLarge(inputStream68, outputStream69, 0L, 0L, byteArray74);
        long long77 = org.apache.commons.io.IOUtils.copyLarge(inputStream53, outputStream66, byteArray74);
        org.apache.commons.io.IOUtils.readFully((java.io.InputStream) bufferedInputStream23, byteArray74);
        java.io.Writer writer79 = null;
        java.nio.charset.Charset charset80 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(byteArray74, writer79, charset80);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Writer.write(String)\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream15);
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream22);
        org.junit.Assert.assertNotNull(bufferedInputStream23);
        org.junit.Assert.assertNotNull(bufferedInputStream25);
        org.junit.Assert.assertNotNull(lineIterator27);
        org.junit.Assert.assertNotNull(inputStream29);
        org.junit.Assert.assertNotNull(inputStream31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(inputStream41);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertNotNull(strList51);
        org.junit.Assert.assertNotNull(inputStream53);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
        org.junit.Assert.assertNotNull(strList63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(inputStream68);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 0L + "'", long76 == 0L);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 0L + "'", long77 == 0L);
    }

    @Test
    public void test3330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3330");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.util.List<java.lang.String> strList4 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.OutputStream outputStream5 = null;
        long long8 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream5, (long) 0, 0L);
        java.io.InputStream inputStream10 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, 100);
        java.nio.charset.Charset charset11 = null;
        char[] charArray12 = org.apache.commons.io.IOUtils.toCharArray(inputStream1, charset11);
        byte[] byteArray13 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(inputStream10);
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray12), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray12), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray12), "[]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
    }

    @Test
    public void test3331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3331");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly(inputStream1);
        java.io.InputStream inputStream5 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1);
        java.io.OutputStream outputStream6 = null;
        long long7 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream6);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(inputStream5);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
    }

    @Test
    public void test3332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3332");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.nio.charset.Charset charset6 = null;
        java.util.List<java.lang.String> strList7 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset6);
        java.nio.charset.Charset charset8 = null;
        org.apache.commons.io.LineIterator lineIterator9 = org.apache.commons.io.IOUtils.lineIterator(inputStream1, charset8);
        java.io.InputStream inputStream11 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, 6);
        java.io.BufferedInputStream bufferedInputStream13 = org.apache.commons.io.IOUtils.buffer(inputStream11, 3);
        java.io.InputStream inputStream15 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray16 = org.apache.commons.io.IOUtils.toByteArray(inputStream15);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream15);
        java.util.List<java.lang.String> strList18 = org.apache.commons.io.IOUtils.readLines(inputStream15);
        java.io.OutputStream outputStream19 = null;
        long long20 = org.apache.commons.io.IOUtils.copyLarge(inputStream15, outputStream19);
        java.io.Writer writer21 = null;
        org.apache.commons.io.IOUtils.copy(inputStream15, writer21);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream15);
        java.io.InputStream inputStream25 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray26 = new byte[] {};
        int int27 = org.apache.commons.io.IOUtils.length(byteArray26);
        int int28 = org.apache.commons.io.IOUtils.read(inputStream25, byteArray26);
        byte[] byteArray29 = org.apache.commons.io.IOUtils.toByteArray(inputStream25);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer30 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream25, iOExceptionConsumer30);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream25);
        java.io.BufferedInputStream bufferedInputStream34 = org.apache.commons.io.IOUtils.buffer(inputStream25, (int) (byte) 10);
        java.io.InputStream inputStream36 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream25, (int) (byte) 1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer37 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream25, iOExceptionConsumer37);
        java.io.OutputStream outputStream39 = null;
        java.io.InputStream inputStream41 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray42 = new byte[] {};
        int int43 = org.apache.commons.io.IOUtils.length(byteArray42);
        int int44 = org.apache.commons.io.IOUtils.read(inputStream41, byteArray42);
        byte[] byteArray45 = org.apache.commons.io.IOUtils.toByteArray(inputStream41);
        java.io.InputStream inputStream47 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray48 = new byte[] {};
        int int49 = org.apache.commons.io.IOUtils.length(byteArray48);
        int int50 = org.apache.commons.io.IOUtils.read(inputStream47, byteArray48);
        byte[] byteArray51 = org.apache.commons.io.IOUtils.toByteArray(inputStream47);
        int int52 = org.apache.commons.io.IOUtils.length(byteArray51);
        org.apache.commons.io.IOUtils.readFully(inputStream41, byteArray51);
        long long54 = org.apache.commons.io.IOUtils.copyLarge(inputStream25, outputStream39, byteArray51);
        boolean boolean55 = org.apache.commons.io.IOUtils.contentEquals(inputStream15, inputStream25);
        java.io.BufferedInputStream bufferedInputStream56 = org.apache.commons.io.IOUtils.buffer(inputStream15);
        java.io.BufferedInputStream bufferedInputStream58 = org.apache.commons.io.IOUtils.buffer(inputStream15, (int) (short) 100);
        boolean boolean59 = org.apache.commons.io.IOUtils.contentEquals(inputStream11, inputStream15);
        char[] charArray60 = org.apache.commons.io.IOUtils.toCharArray(inputStream15);
        long long62 = org.apache.commons.io.IOUtils.skip(inputStream15, (long) ' ');
        java.nio.charset.Charset charset63 = null;
        org.apache.commons.io.LineIterator lineIterator64 = org.apache.commons.io.IOUtils.lineIterator(inputStream15, charset63);
        java.io.BufferedInputStream bufferedInputStream65 = org.apache.commons.io.IOUtils.buffer(inputStream15);
        java.io.InputStream inputStream67 = org.apache.commons.io.IOUtils.toBufferedInputStream((java.io.InputStream) bufferedInputStream65, (int) '4');
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray69 = org.apache.commons.io.IOUtils.toByteArray((java.io.InputStream) bufferedInputStream65, (long) ' ');
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Unexpected read size. current: 0, expected: 32");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertNotNull(lineIterator9);
        org.junit.Assert.assertNotNull(inputStream11);
        org.junit.Assert.assertNotNull(bufferedInputStream13);
        org.junit.Assert.assertNotNull(inputStream15);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(inputStream25);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream34);
        org.junit.Assert.assertNotNull(inputStream36);
        org.junit.Assert.assertNotNull(inputStream41);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
        org.junit.Assert.assertNotNull(inputStream47);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(bufferedInputStream56);
        org.junit.Assert.assertNotNull(bufferedInputStream58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(charArray60);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray60), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray60), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray60), "[]");
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 0L + "'", long62 == 0L);
        org.junit.Assert.assertNotNull(lineIterator64);
        org.junit.Assert.assertNotNull(bufferedInputStream65);
        org.junit.Assert.assertNotNull(inputStream67);
    }

    @Test
    public void test3333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3333");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        java.io.OutputStream outputStream10 = null;
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream10, (long) (short) 0, (-1L));
        char[] charArray14 = org.apache.commons.io.IOUtils.toCharArray(inputStream1);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream17 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray18 = new byte[] {};
        int int19 = org.apache.commons.io.IOUtils.length(byteArray18);
        int int20 = org.apache.commons.io.IOUtils.read(inputStream17, byteArray18);
        byte[] byteArray21 = org.apache.commons.io.IOUtils.toByteArray(inputStream17);
        byte[] byteArray23 = org.apache.commons.io.IOUtils.toByteArray(inputStream17, (int) (short) 0);
        java.io.BufferedInputStream bufferedInputStream24 = org.apache.commons.io.IOUtils.buffer(inputStream17);
        byte[] byteArray25 = org.apache.commons.io.IOUtils.toByteArray((java.io.InputStream) bufferedInputStream24);
        int int26 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray25);
        java.util.List<java.lang.String> strList27 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.nio.charset.Charset charset28 = null;
        java.util.List<java.lang.String> strList29 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset28);
        // The following exception was thrown during execution in test generation
        try {
            char[] charArray31 = org.apache.commons.io.IOUtils.toCharArray(inputStream1, "\r\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ??");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[]");
        org.junit.Assert.assertNotNull(inputStream17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(strList27);
        org.junit.Assert.assertNotNull(strList29);
    }

    @Test
    public void test3334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3334");
        char[] charArray4 = new char[] { '/', '\\', 'a', ' ' };
        int int5 = org.apache.commons.io.IOUtils.length(charArray4);
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "/\\a ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "/\\a ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[/, \\, a,  ]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
    }

    @Test
    public void test3335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3335");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream3 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1);
        java.io.Writer writer4 = null;
        java.nio.charset.Charset charset5 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer4, charset5);
        java.io.OutputStream outputStream7 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray("");
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray10);
        java.lang.String str12 = org.apache.commons.io.IOUtils.toString(byteArray10);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream7, byteArray10);
        java.util.List<java.lang.String> strList14 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.InputStream inputStream16 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray17 = new byte[] {};
        int int18 = org.apache.commons.io.IOUtils.length(byteArray17);
        int int19 = org.apache.commons.io.IOUtils.read(inputStream16, byteArray17);
        byte[] byteArray20 = org.apache.commons.io.IOUtils.toByteArray(inputStream16);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer21 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream16, iOExceptionConsumer21);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream16);
        java.io.BufferedInputStream bufferedInputStream25 = org.apache.commons.io.IOUtils.buffer(inputStream16, (int) (byte) 10);
        java.io.InputStream inputStream27 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream16, (int) (byte) 1);
        java.io.OutputStream outputStream28 = null;
        int int29 = org.apache.commons.io.IOUtils.copy(inputStream27, outputStream28);
        java.io.BufferedInputStream bufferedInputStream31 = org.apache.commons.io.IOUtils.buffer(inputStream27, (int) (byte) 10);
        byte[] byteArray33 = org.apache.commons.io.IOUtils.toByteArray(inputStream27, 0);
        int int34 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray33);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.skipFully(inputStream1, (long) (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Bytes to skip must not be negative: -1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream3);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(strList14);
        org.junit.Assert.assertNotNull(inputStream16);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream25);
        org.junit.Assert.assertNotNull(inputStream27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(bufferedInputStream31);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
    }

    @Test
    public void test3336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3336");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.BufferedInputStream bufferedInputStream10 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.io.InputStream inputStream12 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, (int) (byte) 1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer13 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer13);
        java.io.OutputStream outputStream15 = null;
        java.io.InputStream inputStream17 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray18 = new byte[] {};
        int int19 = org.apache.commons.io.IOUtils.length(byteArray18);
        int int20 = org.apache.commons.io.IOUtils.read(inputStream17, byteArray18);
        byte[] byteArray21 = org.apache.commons.io.IOUtils.toByteArray(inputStream17);
        java.io.InputStream inputStream23 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray24 = new byte[] {};
        int int25 = org.apache.commons.io.IOUtils.length(byteArray24);
        int int26 = org.apache.commons.io.IOUtils.read(inputStream23, byteArray24);
        byte[] byteArray27 = org.apache.commons.io.IOUtils.toByteArray(inputStream23);
        int int28 = org.apache.commons.io.IOUtils.length(byteArray27);
        org.apache.commons.io.IOUtils.readFully(inputStream17, byteArray27);
        long long30 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream15, byteArray27);
        byte[] byteArray31 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.nio.charset.Charset charset32 = null;
        java.util.List<java.lang.String> strList33 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset32);
        java.lang.String str34 = org.apache.commons.io.IOUtils.toString(inputStream1);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream10);
        org.junit.Assert.assertNotNull(inputStream12);
        org.junit.Assert.assertNotNull(inputStream17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertNotNull(inputStream23);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(strList33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
    }

    @Test
    public void test3337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3337");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.nio.charset.Charset charset6 = null;
        java.util.List<java.lang.String> strList7 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset6);
        java.nio.charset.Charset charset8 = null;
        org.apache.commons.io.LineIterator lineIterator9 = org.apache.commons.io.IOUtils.lineIterator(inputStream1, charset8);
        java.io.InputStream inputStream11 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, 6);
        java.io.BufferedInputStream bufferedInputStream13 = org.apache.commons.io.IOUtils.buffer(inputStream11, 3);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer14 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream11, iOExceptionConsumer14);
        org.apache.commons.io.IOUtils.closeQuietly(inputStream11);
        java.util.List<java.lang.String> strList17 = org.apache.commons.io.IOUtils.readLines(inputStream11);
        java.io.OutputStream outputStream18 = null;
        java.io.InputStream inputStream22 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray23 = org.apache.commons.io.IOUtils.toByteArray(inputStream22);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream22);
        java.util.List<java.lang.String> strList25 = org.apache.commons.io.IOUtils.readLines(inputStream22);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer26 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream22, iOExceptionConsumer26);
        java.io.InputStream inputStream29 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray30 = org.apache.commons.io.IOUtils.toByteArray(inputStream29);
        int int31 = org.apache.commons.io.IOUtils.read(inputStream22, byteArray30);
        // The following exception was thrown during execution in test generation
        try {
            long long32 = org.apache.commons.io.IOUtils.copyLarge(inputStream11, outputStream18, (long) (byte) 1, (long) (byte) 1, byteArray30);
            org.junit.Assert.fail("Expected exception of type java.io.EOFException; message: Bytes to skip: 1 actual: 0");
        } catch (java.io.EOFException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertNotNull(lineIterator9);
        org.junit.Assert.assertNotNull(inputStream11);
        org.junit.Assert.assertNotNull(bufferedInputStream13);
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertNotNull(inputStream22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertNotNull(strList25);
        org.junit.Assert.assertNotNull(inputStream29);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
    }

    @Test
    public void test3338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3338");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "\n");
        java.util.List<java.lang.String> strList2 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        org.apache.commons.io.IOUtils.skipFully(inputStream1, 0L);
        java.io.Writer writer5 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.copy(inputStream1, writer5, "");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(strList2);
    }

    @Test
    public void test3339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3339");
        java.io.InputStream inputStream0 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long2 = org.apache.commons.io.IOUtils.skip(inputStream0, (long) (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Skip count must be non-negative, actual: -1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test3340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3340");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        java.nio.charset.Charset charset10 = null;
        java.util.List<java.lang.String> strList11 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset10);
        java.io.InputStream inputStream13 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream14 = null;
        java.io.InputStream inputStream17 = null;
        byte[] byteArray19 = org.apache.commons.io.IOUtils.toByteArray("");
        int int20 = org.apache.commons.io.IOUtils.read(inputStream17, byteArray19);
        long long21 = org.apache.commons.io.IOUtils.copyLarge(inputStream13, outputStream14, 0L, 0L, byteArray19);
        java.nio.charset.Charset charset22 = null;
        java.util.List<java.lang.String> strList23 = org.apache.commons.io.IOUtils.readLines(inputStream13, charset22);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream13);
        boolean boolean25 = org.apache.commons.io.IOUtils.contentEquals(inputStream1, inputStream13);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.nio.charset.Charset charset27 = null;
        char[] charArray28 = org.apache.commons.io.IOUtils.toCharArray(inputStream1, charset27);
        java.io.BufferedInputStream bufferedInputStream30 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) '/');
        java.io.OutputStream outputStream31 = null;
        java.io.InputStream inputStream35 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray36 = org.apache.commons.io.IOUtils.toByteArray(inputStream35);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream35);
        java.util.List<java.lang.String> strList38 = org.apache.commons.io.IOUtils.readLines(inputStream35);
        java.io.OutputStream outputStream39 = null;
        long long40 = org.apache.commons.io.IOUtils.copyLarge(inputStream35, outputStream39);
        java.io.OutputStream outputStream41 = null;
        java.io.InputStream inputStream45 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray46 = new byte[] {};
        int int47 = org.apache.commons.io.IOUtils.length(byteArray46);
        int int48 = org.apache.commons.io.IOUtils.read(inputStream45, byteArray46);
        long long49 = org.apache.commons.io.IOUtils.copyLarge(inputStream35, outputStream41, (-1L), 1L, byteArray46);
        java.io.OutputStream outputStream50 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray46, outputStream50);
        java.io.OutputStream outputStream52 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray46, outputStream52);
        java.lang.String str54 = org.apache.commons.io.IOUtils.toString(byteArray46);
        // The following exception was thrown during execution in test generation
        try {
            long long55 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream31, 2L, (long) (byte) 0, byteArray46);
            org.junit.Assert.fail("Expected exception of type java.io.EOFException; message: Bytes to skip: 2 actual: 0");
        } catch (java.io.EOFException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertNotNull(inputStream13);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(strList23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray28), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray28), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray28), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream30);
        org.junit.Assert.assertNotNull(inputStream35);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertNotNull(strList38);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertNotNull(inputStream45);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
    }

    @Test
    public void test3341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3341");
        java.io.Reader reader0 = null;
        java.io.Writer writer1 = null;
        java.io.Reader reader2 = null;
        java.io.Reader reader3 = null;
        char[] charArray4 = new char[] {};
        int int5 = org.apache.commons.io.IOUtils.length(charArray4);
        int int6 = org.apache.commons.io.IOUtils.read(reader3, charArray4);
        int int7 = org.apache.commons.io.IOUtils.length(charArray4);
        int int8 = org.apache.commons.io.IOUtils.read(reader2, charArray4);
        // The following exception was thrown during execution in test generation
        try {
            long long9 = org.apache.commons.io.IOUtils.copyLarge(reader0, writer1, charArray4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[])\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test3342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3342");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.BufferedInputStream bufferedInputStream10 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        org.apache.commons.io.function.IOConsumer<java.io.IOException> iOExceptionIOConsumer11 = null;
        org.apache.commons.io.IOUtils.close((java.io.Closeable) bufferedInputStream10, iOExceptionIOConsumer11);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) bufferedInputStream10);
        org.apache.commons.io.IOUtils.skipFully((java.io.InputStream) bufferedInputStream10, (long) (short) 0);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer16 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) bufferedInputStream10, iOExceptionConsumer16);
        java.io.InputStream inputStream19 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray20 = org.apache.commons.io.IOUtils.toByteArray(inputStream19);
        java.io.InputStream inputStream22 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray23 = new byte[] {};
        int int24 = org.apache.commons.io.IOUtils.length(byteArray23);
        int int25 = org.apache.commons.io.IOUtils.read(inputStream22, byteArray23);
        byte[] byteArray26 = org.apache.commons.io.IOUtils.toByteArray(inputStream22);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer27 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream22, iOExceptionConsumer27);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream22);
        java.io.BufferedInputStream bufferedInputStream31 = org.apache.commons.io.IOUtils.buffer(inputStream22, (int) (byte) 10);
        boolean boolean32 = org.apache.commons.io.IOUtils.contentEquals(inputStream19, inputStream22);
        java.io.InputStream inputStream34 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray35 = new byte[] {};
        int int36 = org.apache.commons.io.IOUtils.length(byteArray35);
        int int37 = org.apache.commons.io.IOUtils.read(inputStream34, byteArray35);
        byte[] byteArray38 = org.apache.commons.io.IOUtils.toByteArray(inputStream34);
        byte[] byteArray40 = org.apache.commons.io.IOUtils.toByteArray(inputStream34, (int) (short) 0);
        long long42 = org.apache.commons.io.IOUtils.skip(inputStream34, 100L);
        java.io.InputStream inputStream43 = null;
        java.io.InputStream inputStream44 = null;
        java.io.OutputStream outputStream45 = null;
        byte[] byteArray48 = new byte[] {};
        int int49 = org.apache.commons.io.IOUtils.length(byteArray48);
        java.io.OutputStream outputStream50 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray48, outputStream50);
        long long52 = org.apache.commons.io.IOUtils.copyLarge(inputStream44, outputStream45, 0L, (long) (byte) -1, byteArray48);
        java.io.OutputStream outputStream53 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray48, outputStream53);
        org.apache.commons.io.IOUtils.readFully(inputStream43, byteArray48);
        int int56 = org.apache.commons.io.IOUtils.read(inputStream34, byteArray48);
        int int57 = org.apache.commons.io.IOUtils.read(inputStream22, byteArray48);
        java.lang.String str58 = org.apache.commons.io.IOUtils.toString(byteArray48);
        org.apache.commons.io.IOUtils.readFully((java.io.InputStream) bufferedInputStream10, byteArray48);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream10);
        org.junit.Assert.assertNotNull(inputStream19);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertNotNull(inputStream22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(inputStream34);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
    }

    @Test
    public void test3343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3343");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        java.nio.charset.Charset charset10 = null;
        java.util.List<java.lang.String> strList11 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset10);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.io.OutputStream outputStream13 = null;
        java.io.InputStream inputStream15 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream16 = null;
        java.io.InputStream inputStream18 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream19 = null;
        java.io.InputStream inputStream22 = null;
        byte[] byteArray24 = org.apache.commons.io.IOUtils.toByteArray("");
        int int25 = org.apache.commons.io.IOUtils.read(inputStream22, byteArray24);
        long long26 = org.apache.commons.io.IOUtils.copyLarge(inputStream18, outputStream19, 0L, 0L, byteArray24);
        long long27 = org.apache.commons.io.IOUtils.copyLarge(inputStream15, outputStream16, byteArray24);
        java.io.BufferedInputStream bufferedInputStream29 = org.apache.commons.io.IOUtils.buffer(inputStream15, (int) (byte) 10);
        byte[] byteArray30 = org.apache.commons.io.IOUtils.toByteArray((java.io.InputStream) bufferedInputStream29);
        java.io.InputStream inputStream31 = null;
        java.io.OutputStream outputStream32 = null;
        byte[] byteArray35 = new byte[] {};
        int int36 = org.apache.commons.io.IOUtils.length(byteArray35);
        java.io.OutputStream outputStream37 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray35, outputStream37);
        long long39 = org.apache.commons.io.IOUtils.copyLarge(inputStream31, outputStream32, 0L, (long) (byte) -1, byteArray35);
        java.io.OutputStream outputStream40 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray35, outputStream40);
        int int42 = org.apache.commons.io.IOUtils.length(byteArray35);
        org.apache.commons.io.IOUtils.readFully((java.io.InputStream) bufferedInputStream29, byteArray35);
        long long44 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream13, byteArray35);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertNotNull(inputStream15);
        org.junit.Assert.assertNotNull(inputStream18);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream29);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
    }

    @Test
    public void test3344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3344");
        java.nio.charset.Charset charset1 = null;
        java.io.InputStream inputStream2 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "", charset1);
        java.util.List<java.lang.String> strList3 = org.apache.commons.io.IOUtils.readLines(inputStream2);
        java.io.InputStream inputStream5 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray6 = new byte[] {};
        int int7 = org.apache.commons.io.IOUtils.length(byteArray6);
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray6);
        byte[] byteArray9 = org.apache.commons.io.IOUtils.toByteArray(inputStream5);
        int int10 = org.apache.commons.io.IOUtils.length(byteArray9);
        org.apache.commons.io.IOUtils.readFully(inputStream2, byteArray9);
        byte[] byteArray13 = org.apache.commons.io.IOUtils.toByteArray(inputStream2, 0L);
        java.nio.charset.Charset charset15 = null;
        java.io.InputStream inputStream16 = org.apache.commons.io.IOUtils.toInputStream("hi!", charset15);
        boolean boolean17 = org.apache.commons.io.IOUtils.contentEquals(inputStream2, inputStream16);
        java.nio.charset.Charset charset18 = null;
        java.lang.String str19 = org.apache.commons.io.IOUtils.toString(inputStream2, charset18);
        org.junit.Assert.assertNotNull(inputStream2);
        org.junit.Assert.assertNotNull(strList3);
        org.junit.Assert.assertNotNull(inputStream5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertNotNull(inputStream16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
    }

    @Test
    public void test3345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3345");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.util.List<java.lang.String> strList4 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.OutputStream outputStream5 = null;
        long long8 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream5, (long) 0, 0L);
        java.io.InputStream inputStream10 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, 100);
        char[] charArray11 = org.apache.commons.io.IOUtils.toCharArray(inputStream10);
        java.lang.Class<?> wildcardClass12 = charArray11.getClass();
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(inputStream10);
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[]");
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test3346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3346");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.BufferedInputStream bufferedInputStream10 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.io.OutputStream outputStream11 = null;
        long long12 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream11);
        java.nio.charset.Charset charset13 = null;
        java.lang.String str14 = org.apache.commons.io.IOUtils.toString(inputStream1, charset13);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
    }

    @Test
    public void test3347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3347");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.BufferedInputStream bufferedInputStream3 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) ' ');
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer4 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer4);
        java.nio.charset.Charset charset6 = null;
        char[] charArray7 = org.apache.commons.io.IOUtils.toCharArray(inputStream1, charset6);
        java.io.InputStream inputStream9 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream10 = null;
        java.io.InputStream inputStream13 = null;
        byte[] byteArray15 = org.apache.commons.io.IOUtils.toByteArray("");
        int int16 = org.apache.commons.io.IOUtils.read(inputStream13, byteArray15);
        long long17 = org.apache.commons.io.IOUtils.copyLarge(inputStream9, outputStream10, 0L, 0L, byteArray15);
        java.io.OutputStream outputStream18 = null;
        long long21 = org.apache.commons.io.IOUtils.copyLarge(inputStream9, outputStream18, (long) (short) 0, (-1L));
        char[] charArray22 = org.apache.commons.io.IOUtils.toCharArray(inputStream9);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream9);
        java.io.Writer writer24 = null;
        org.apache.commons.io.IOUtils.copy(inputStream9, writer24);
        org.apache.commons.io.function.IOConsumer<java.io.IOException> iOExceptionIOConsumer26 = null;
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream9, iOExceptionIOConsumer26);
        java.io.OutputStream outputStream28 = null;
        java.io.InputStream inputStream30 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream31 = null;
        java.io.InputStream inputStream33 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream34 = null;
        java.io.InputStream inputStream37 = null;
        byte[] byteArray39 = org.apache.commons.io.IOUtils.toByteArray("");
        int int40 = org.apache.commons.io.IOUtils.read(inputStream37, byteArray39);
        long long41 = org.apache.commons.io.IOUtils.copyLarge(inputStream33, outputStream34, 0L, 0L, byteArray39);
        long long42 = org.apache.commons.io.IOUtils.copyLarge(inputStream30, outputStream31, byteArray39);
        java.io.BufferedInputStream bufferedInputStream44 = org.apache.commons.io.IOUtils.buffer(inputStream30, (int) (byte) 10);
        java.nio.charset.Charset charset45 = null;
        java.util.List<java.lang.String> strList46 = org.apache.commons.io.IOUtils.readLines(inputStream30, charset45);
        java.io.OutputStream outputStream47 = null;
        long long50 = org.apache.commons.io.IOUtils.copyLarge(inputStream30, outputStream47, 0L, (long) 0);
        java.io.BufferedInputStream bufferedInputStream51 = org.apache.commons.io.IOUtils.buffer(inputStream30);
        java.io.BufferedInputStream bufferedInputStream52 = org.apache.commons.io.IOUtils.buffer(inputStream30);
        java.io.InputStream inputStream54 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream54);
        java.io.InputStream inputStream56 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream54);
        java.lang.String str57 = org.apache.commons.io.IOUtils.toString(inputStream54);
        java.io.InputStream inputStream58 = null;
        byte[] byteArray60 = org.apache.commons.io.IOUtils.toByteArray("");
        int int61 = org.apache.commons.io.IOUtils.read(inputStream58, byteArray60);
        org.apache.commons.io.IOUtils.readFully(inputStream54, byteArray60);
        org.apache.commons.io.IOUtils.readFully((java.io.InputStream) bufferedInputStream52, byteArray60);
        java.io.OutputStream outputStream64 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray60, outputStream64);
        long long66 = org.apache.commons.io.IOUtils.copyLarge(inputStream9, outputStream28, byteArray60);
        java.io.InputStream inputStream67 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream9);
        boolean boolean68 = org.apache.commons.io.IOUtils.contentEquals(inputStream1, inputStream9);
        byte[] byteArray69 = org.apache.commons.io.IOUtils.toByteArray(inputStream9);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(bufferedInputStream3);
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[]");
        org.junit.Assert.assertNotNull(inputStream9);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray22), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray22), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray22), "[]");
        org.junit.Assert.assertNotNull(inputStream30);
        org.junit.Assert.assertNotNull(inputStream33);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream44);
        org.junit.Assert.assertNotNull(strList46);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream51);
        org.junit.Assert.assertNotNull(bufferedInputStream52);
        org.junit.Assert.assertNotNull(inputStream54);
        org.junit.Assert.assertNotNull(inputStream56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 0L + "'", long66 == 0L);
        org.junit.Assert.assertNotNull(inputStream67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[]");
    }

    @Test
    public void test3348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3348");
        java.io.Reader reader0 = null;
        java.io.Writer writer1 = null;
        java.io.Reader reader2 = null;
        java.io.Writer writer3 = null;
        java.io.Reader reader6 = null;
        java.io.Reader reader7 = null;
        char[] charArray8 = new char[] {};
        int int9 = org.apache.commons.io.IOUtils.length(charArray8);
        int int10 = org.apache.commons.io.IOUtils.read(reader7, charArray8);
        int int11 = org.apache.commons.io.IOUtils.length(charArray8);
        org.apache.commons.io.IOUtils.readFully(reader6, charArray8);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(reader2, writer3, (long) (-1), (long) 4, charArray8);
        java.io.Writer writer14 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray8, writer14);
        // The following exception was thrown during execution in test generation
        try {
            long long16 = org.apache.commons.io.IOUtils.copyLarge(reader0, writer1, charArray8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[])\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
    }

    @Test
    public void test3349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3349");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        byte[] byteArray6 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray8 = org.apache.commons.io.IOUtils.toByteArray(inputStream1, (long) '/');
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Unexpected read size. current: 0, expected: 47");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
    }

    @Test
    public void test3350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3350");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.nio.charset.Charset charset4 = null;
        org.apache.commons.io.LineIterator lineIterator5 = org.apache.commons.io.IOUtils.lineIterator(inputStream1, charset4);
        java.nio.charset.Charset charset6 = null;
        java.util.List<java.lang.String> strList7 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset6);
        java.io.InputStream inputStream9 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray10 = new byte[] {};
        int int11 = org.apache.commons.io.IOUtils.length(byteArray10);
        int int12 = org.apache.commons.io.IOUtils.read(inputStream9, byteArray10);
        byte[] byteArray13 = org.apache.commons.io.IOUtils.toByteArray(inputStream9);
        byte[] byteArray15 = org.apache.commons.io.IOUtils.toByteArray(inputStream9, (int) (short) 0);
        byte[] byteArray16 = new byte[] {};
        int int17 = org.apache.commons.io.IOUtils.length(byteArray16);
        org.apache.commons.io.IOUtils.readFully(inputStream9, byteArray16);
        java.lang.String str19 = org.apache.commons.io.IOUtils.toString(byteArray16);
        int int20 = org.apache.commons.io.IOUtils.length(byteArray16);
        org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray16);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.nio.charset.Charset charset23 = null;
        char[] charArray24 = org.apache.commons.io.IOUtils.toCharArray(inputStream1, charset23);
        java.io.OutputStream outputStream25 = null;
        long long27 = org.apache.commons.io.IOUtils.copy(inputStream1, outputStream25, (int) '/');
        java.io.InputStream inputStream28 = null;
        java.io.InputStream inputStream30 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray31 = new byte[] {};
        int int32 = org.apache.commons.io.IOUtils.length(byteArray31);
        int int33 = org.apache.commons.io.IOUtils.read(inputStream30, byteArray31);
        org.apache.commons.io.IOUtils.closeQuietly(inputStream30);
        java.io.InputStream inputStream36 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray37 = new byte[] {};
        int int38 = org.apache.commons.io.IOUtils.length(byteArray37);
        int int39 = org.apache.commons.io.IOUtils.read(inputStream36, byteArray37);
        java.lang.String str40 = org.apache.commons.io.IOUtils.toString(byteArray37);
        int int43 = org.apache.commons.io.IOUtils.read(inputStream30, byteArray37, (int) (byte) 10, (int) (short) 0);
        java.io.OutputStream outputStream44 = null;
        long long46 = org.apache.commons.io.IOUtils.copy(inputStream30, outputStream44, (int) (byte) 100);
        java.io.OutputStream outputStream47 = null;
        java.io.InputStream inputStream49 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray50 = new byte[] {};
        int int51 = org.apache.commons.io.IOUtils.length(byteArray50);
        int int52 = org.apache.commons.io.IOUtils.read(inputStream49, byteArray50);
        byte[] byteArray53 = org.apache.commons.io.IOUtils.toByteArray(inputStream49);
        byte[] byteArray55 = org.apache.commons.io.IOUtils.toByteArray(inputStream49, (int) (short) 0);
        java.io.Writer writer56 = null;
        java.nio.charset.Charset charset57 = null;
        org.apache.commons.io.IOUtils.copy(inputStream49, writer56, charset57);
        java.io.InputStream inputStream60 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream61 = null;
        java.io.InputStream inputStream63 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream64 = null;
        java.io.InputStream inputStream67 = null;
        byte[] byteArray69 = org.apache.commons.io.IOUtils.toByteArray("");
        int int70 = org.apache.commons.io.IOUtils.read(inputStream67, byteArray69);
        long long71 = org.apache.commons.io.IOUtils.copyLarge(inputStream63, outputStream64, 0L, 0L, byteArray69);
        long long72 = org.apache.commons.io.IOUtils.copyLarge(inputStream60, outputStream61, byteArray69);
        java.lang.String str73 = org.apache.commons.io.IOUtils.toString(byteArray69);
        int int74 = org.apache.commons.io.IOUtils.read(inputStream49, byteArray69);
        long long75 = org.apache.commons.io.IOUtils.copyLarge(inputStream30, outputStream47, byteArray69);
        org.apache.commons.io.IOUtils.readFully(inputStream28, byteArray69);
        org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray69);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(lineIterator5);
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertNotNull(inputStream9);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[]");
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNotNull(inputStream30);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(inputStream36);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertNotNull(inputStream49);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[]");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[]");
        org.junit.Assert.assertNotNull(inputStream60);
        org.junit.Assert.assertNotNull(inputStream63);
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 0L + "'", long71 == 0L);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 0L + "'", long72 == 0L);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 0L + "'", long75 == 0L);
    }

    @Test
    public void test3351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3351");
        java.io.InputStream inputStream0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.skipFully(inputStream0, (-1L));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Bytes to skip must not be negative: -1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test3352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3352");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream5 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray("");
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray10);
        long long12 = org.apache.commons.io.IOUtils.copyLarge(inputStream4, outputStream5, 0L, 0L, byteArray10);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, byteArray10);
        java.io.BufferedInputStream bufferedInputStream15 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        org.apache.commons.io.IOUtils.closeQuietly(inputStream1);
        java.nio.charset.Charset charset17 = null;
        java.util.List<java.lang.String> strList18 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset17);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream20 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly(inputStream1);
        char[] charArray22 = org.apache.commons.io.IOUtils.toCharArray(inputStream1);
        int int23 = org.apache.commons.io.IOUtils.length(charArray22);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream15);
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertNotNull(inputStream20);
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray22), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray22), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray22), "[]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
    }

    @Test
    public void test3353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3353");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        org.apache.commons.io.IOUtils.closeQuietly(inputStream1);
        java.io.InputStream inputStream7 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray8 = new byte[] {};
        int int9 = org.apache.commons.io.IOUtils.length(byteArray8);
        int int10 = org.apache.commons.io.IOUtils.read(inputStream7, byteArray8);
        java.lang.String str11 = org.apache.commons.io.IOUtils.toString(byteArray8);
        int int14 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray8, (int) (byte) 10, (int) (short) 0);
        java.io.OutputStream outputStream15 = null;
        long long17 = org.apache.commons.io.IOUtils.copy(inputStream1, outputStream15, (int) (byte) 100);
        java.util.List<java.lang.String> strList18 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(inputStream7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(strList18);
    }

    @Test
    public void test3354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3354");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        java.io.OutputStream outputStream10 = null;
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream10, (long) (short) 0, (-1L));
        java.lang.String str14 = org.apache.commons.io.IOUtils.toString(inputStream1);
        java.io.BufferedInputStream bufferedInputStream16 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 100);
        java.io.Writer writer17 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer17);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(bufferedInputStream16);
    }

    @Test
    public void test3355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3355");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        java.io.Writer writer5 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer5);
        java.nio.charset.Charset charset7 = null;
        org.apache.commons.io.LineIterator lineIterator8 = org.apache.commons.io.IOUtils.lineIterator(inputStream1, charset7);
        java.io.InputStream inputStream10 = org.apache.commons.io.IOUtils.toInputStream("");
        java.nio.charset.Charset charset11 = null;
        java.util.List<java.lang.String> strList12 = org.apache.commons.io.IOUtils.readLines(inputStream10, charset11);
        org.apache.commons.io.IOUtils.closeQuietly(inputStream10);
        byte[] byteArray14 = org.apache.commons.io.IOUtils.toByteArray(inputStream10);
        org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray14);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(lineIterator8);
        org.junit.Assert.assertNotNull(inputStream10);
        org.junit.Assert.assertNotNull(strList12);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
    }
}

