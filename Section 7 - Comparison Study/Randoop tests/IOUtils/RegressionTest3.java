import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest3 {

    public static boolean debug = false;

    @Test
    public void test1501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1501");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream5 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray("");
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray10);
        long long12 = org.apache.commons.io.IOUtils.copyLarge(inputStream4, outputStream5, 0L, 0L, byteArray10);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, byteArray10);
        java.io.BufferedInputStream bufferedInputStream15 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        org.apache.commons.io.IOUtils.closeQuietly(inputStream1);
        java.nio.charset.Charset charset17 = null;
        java.util.List<java.lang.String> strList18 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset17);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.io.OutputStream outputStream20 = null;
        int int21 = org.apache.commons.io.IOUtils.copy(inputStream1, outputStream20);
        java.io.InputStream inputStream23 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray24 = new byte[] {};
        int int25 = org.apache.commons.io.IOUtils.length(byteArray24);
        int int26 = org.apache.commons.io.IOUtils.read(inputStream23, byteArray24);
        byte[] byteArray27 = org.apache.commons.io.IOUtils.toByteArray(inputStream23);
        byte[] byteArray29 = org.apache.commons.io.IOUtils.toByteArray(inputStream23, (int) (short) 0);
        byte[] byteArray30 = new byte[] {};
        int int31 = org.apache.commons.io.IOUtils.length(byteArray30);
        org.apache.commons.io.IOUtils.readFully(inputStream23, byteArray30);
        int int33 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray30);
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        int int36 = org.apache.commons.io.IOUtils.read(inputStream34, byteArray35);
        org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray35);
        int int38 = org.apache.commons.io.IOUtils.length(byteArray35);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream15);
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(inputStream23);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
    }

    @Test
    public void test1502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1502");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream5 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray("");
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray10);
        long long12 = org.apache.commons.io.IOUtils.copyLarge(inputStream4, outputStream5, 0L, 0L, byteArray10);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, byteArray10);
        java.io.BufferedInputStream bufferedInputStream15 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        org.apache.commons.io.IOUtils.closeQuietly(inputStream1);
        java.nio.charset.Charset charset17 = null;
        java.util.List<java.lang.String> strList18 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset17);
        java.io.OutputStream outputStream19 = null;
        int int20 = org.apache.commons.io.IOUtils.copy(inputStream1, outputStream19);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream23 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray24 = org.apache.commons.io.IOUtils.toByteArray(inputStream23);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream23);
        java.util.List<java.lang.String> strList26 = org.apache.commons.io.IOUtils.readLines(inputStream23);
        java.io.OutputStream outputStream27 = null;
        long long28 = org.apache.commons.io.IOUtils.copyLarge(inputStream23, outputStream27);
        java.io.OutputStream outputStream29 = null;
        java.io.InputStream inputStream33 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray34 = new byte[] {};
        int int35 = org.apache.commons.io.IOUtils.length(byteArray34);
        int int36 = org.apache.commons.io.IOUtils.read(inputStream33, byteArray34);
        long long37 = org.apache.commons.io.IOUtils.copyLarge(inputStream23, outputStream29, (-1L), 1L, byteArray34);
        java.io.OutputStream outputStream38 = null;
        java.io.InputStream inputStream42 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream43 = null;
        java.io.InputStream inputStream46 = null;
        byte[] byteArray48 = org.apache.commons.io.IOUtils.toByteArray("");
        int int49 = org.apache.commons.io.IOUtils.read(inputStream46, byteArray48);
        long long50 = org.apache.commons.io.IOUtils.copyLarge(inputStream42, outputStream43, 0L, 0L, byteArray48);
        java.io.OutputStream outputStream51 = null;
        long long54 = org.apache.commons.io.IOUtils.copyLarge(inputStream42, outputStream51, (long) (short) 0, (-1L));
        java.lang.String str55 = org.apache.commons.io.IOUtils.toString(inputStream42);
        java.io.InputStream inputStream56 = null;
        java.io.OutputStream outputStream57 = null;
        byte[] byteArray60 = new byte[] {};
        int int61 = org.apache.commons.io.IOUtils.length(byteArray60);
        java.io.OutputStream outputStream62 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray60, outputStream62);
        long long64 = org.apache.commons.io.IOUtils.copyLarge(inputStream56, outputStream57, 0L, (long) (byte) -1, byteArray60);
        java.io.OutputStream outputStream65 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray60, outputStream65);
        int int67 = org.apache.commons.io.IOUtils.length(byteArray60);
        int int68 = org.apache.commons.io.IOUtils.read(inputStream42, byteArray60);
        long long69 = org.apache.commons.io.IOUtils.copyLarge(inputStream23, outputStream38, (long) (byte) -1, (long) 10, byteArray60);
        // The following exception was thrown during execution in test generation
        try {
            int int72 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray60, 1, (int) '\\');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Range [1, 1 + 92) out of bounds for length 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream15);
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(inputStream23);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertNotNull(strList26);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertNotNull(inputStream33);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertNotNull(inputStream42);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 0L + "'", long69 == 0L);
    }

    @Test
    public void test1503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1503");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream5 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray("");
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray10);
        long long12 = org.apache.commons.io.IOUtils.copyLarge(inputStream4, outputStream5, 0L, 0L, byteArray10);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, byteArray10);
        java.io.BufferedInputStream bufferedInputStream15 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.nio.charset.Charset charset16 = null;
        java.util.List<java.lang.String> strList17 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset16);
        java.io.OutputStream outputStream18 = null;
        long long21 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream18, 0L, (long) 0);
        java.io.BufferedInputStream bufferedInputStream22 = org.apache.commons.io.IOUtils.buffer(inputStream1);
        java.io.BufferedInputStream bufferedInputStream23 = org.apache.commons.io.IOUtils.buffer(inputStream1);
        java.io.BufferedInputStream bufferedInputStream25 = org.apache.commons.io.IOUtils.buffer((java.io.InputStream) bufferedInputStream23, 4);
        java.nio.charset.Charset charset26 = null;
        org.apache.commons.io.LineIterator lineIterator27 = org.apache.commons.io.IOUtils.lineIterator((java.io.InputStream) bufferedInputStream23, charset26);
        java.io.InputStream inputStream29 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream29);
        java.io.InputStream inputStream31 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream29);
        java.lang.String str32 = org.apache.commons.io.IOUtils.toString(inputStream29);
        java.io.InputStream inputStream33 = null;
        byte[] byteArray35 = org.apache.commons.io.IOUtils.toByteArray("");
        int int36 = org.apache.commons.io.IOUtils.read(inputStream33, byteArray35);
        org.apache.commons.io.IOUtils.readFully(inputStream29, byteArray35);
        org.apache.commons.io.IOUtils.readFully((java.io.InputStream) bufferedInputStream23, byteArray35);
        byte[] byteArray39 = org.apache.commons.io.IOUtils.toByteArray((java.io.InputStream) bufferedInputStream23);
        java.io.Writer writer40 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.copy((java.io.InputStream) bufferedInputStream23, writer40, "");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream15);
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream22);
        org.junit.Assert.assertNotNull(bufferedInputStream23);
        org.junit.Assert.assertNotNull(bufferedInputStream25);
        org.junit.Assert.assertNotNull(lineIterator27);
        org.junit.Assert.assertNotNull(inputStream29);
        org.junit.Assert.assertNotNull(inputStream31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
    }

    @Test
    public void test1504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1504");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        java.io.Writer writer10 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer10);
        java.util.List<java.lang.String> strList12 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.Writer writer14 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList12, "\r\n", writer14);
        java.io.Writer writer17 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList12, "\r\n", writer17);
        java.io.OutputStream outputStream20 = null;
        java.nio.charset.Charset charset21 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList12, "\r\n", outputStream20, charset21);
        java.io.OutputStream outputStream24 = null;
        java.nio.charset.Charset charset25 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList12, "hi!", outputStream24, charset25);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(strList12);
    }

    @Test
    public void test1505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1505");
        java.io.InputStream inputStream0 = null;
        // The following exception was thrown during execution in test generation
        try {
            char[] charArray2 = org.apache.commons.io.IOUtils.toCharArray(inputStream0, "hi!");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: hi!");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1506");
        java.io.Reader reader0 = null;
        java.io.InputStream inputStream2 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream3 = null;
        java.io.InputStream inputStream5 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream6 = null;
        java.io.InputStream inputStream9 = null;
        byte[] byteArray11 = org.apache.commons.io.IOUtils.toByteArray("");
        int int12 = org.apache.commons.io.IOUtils.read(inputStream9, byteArray11);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream5, outputStream6, 0L, 0L, byteArray11);
        long long14 = org.apache.commons.io.IOUtils.copyLarge(inputStream2, outputStream3, byteArray11);
        java.io.BufferedInputStream bufferedInputStream16 = org.apache.commons.io.IOUtils.buffer(inputStream2, (int) (byte) 10);
        org.apache.commons.io.IOUtils.closeQuietly(inputStream2);
        java.nio.charset.Charset charset18 = null;
        java.util.List<java.lang.String> strList19 = org.apache.commons.io.IOUtils.readLines(inputStream2, charset18);
        char[] charArray20 = org.apache.commons.io.IOUtils.toCharArray(inputStream2);
        java.io.Writer writer21 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray20, writer21);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.readFully(reader0, charArray20, 6, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[], int, int)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream2);
        org.junit.Assert.assertNotNull(inputStream5);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream16);
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray20), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray20), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray20), "[]");
    }

    @Test
    public void test1507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1507");
        java.nio.channels.ReadableByteChannel readableByteChannel0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.skipFully(readableByteChannel0, (long) (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Bytes to skip must not be negative: -1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1508");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        java.io.Writer writer10 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer10);
        java.util.List<java.lang.String> strList12 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.InputStream inputStream13 = null;
        java.io.OutputStream outputStream14 = null;
        byte[] byteArray17 = new byte[] {};
        int int18 = org.apache.commons.io.IOUtils.length(byteArray17);
        java.io.OutputStream outputStream19 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray17, outputStream19);
        long long21 = org.apache.commons.io.IOUtils.copyLarge(inputStream13, outputStream14, 0L, (long) (byte) -1, byteArray17);
        java.io.OutputStream outputStream22 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray17, outputStream22);
        int int24 = org.apache.commons.io.IOUtils.length(byteArray17);
        java.io.OutputStream outputStream25 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray17, outputStream25);
        int int27 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray17);
        java.io.OutputStream outputStream28 = null;
        java.io.InputStream inputStream30 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray31 = new byte[] {};
        int int32 = org.apache.commons.io.IOUtils.length(byteArray31);
        int int33 = org.apache.commons.io.IOUtils.read(inputStream30, byteArray31);
        byte[] byteArray34 = org.apache.commons.io.IOUtils.toByteArray(inputStream30);
        byte[] byteArray36 = org.apache.commons.io.IOUtils.toByteArray(inputStream30, (int) (short) 0);
        long long38 = org.apache.commons.io.IOUtils.skip(inputStream30, 100L);
        java.io.InputStream inputStream39 = null;
        java.io.InputStream inputStream40 = null;
        java.io.OutputStream outputStream41 = null;
        byte[] byteArray44 = new byte[] {};
        int int45 = org.apache.commons.io.IOUtils.length(byteArray44);
        java.io.OutputStream outputStream46 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray44, outputStream46);
        long long48 = org.apache.commons.io.IOUtils.copyLarge(inputStream40, outputStream41, 0L, (long) (byte) -1, byteArray44);
        java.io.OutputStream outputStream49 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray44, outputStream49);
        org.apache.commons.io.IOUtils.readFully(inputStream39, byteArray44);
        int int52 = org.apache.commons.io.IOUtils.read(inputStream30, byteArray44);
        java.io.OutputStream outputStream53 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray44, outputStream53);
        java.lang.String str55 = org.apache.commons.io.IOUtils.toString(byteArray44);
        long long56 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream28, byteArray44);
        java.nio.charset.Charset charset57 = null;
        java.lang.String str58 = org.apache.commons.io.IOUtils.toString(inputStream1, charset57);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer59 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer59);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(strList12);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(inputStream30);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
    }

    @Test
    public void test1509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1509");
        java.io.Reader reader0 = null;
        long long2 = org.apache.commons.io.IOUtils.skip(reader0, (long) (short) 0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
    }

    @Test
    public void test1510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1510");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.util.List<java.lang.String> strList4 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.OutputStream outputStream6 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList4, "\n", outputStream6);
        java.io.Writer writer9 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList4, "hi!", writer9);
        java.io.OutputStream outputStream12 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList4, "\r\n", outputStream12);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(strList4);
    }

    @Test
    public void test1511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1511");
        java.io.Reader reader0 = null;
        java.io.Reader reader1 = null;
        char[] charArray2 = new char[] {};
        int int3 = org.apache.commons.io.IOUtils.length(charArray2);
        java.io.Writer writer4 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray2, writer4);
        int int6 = org.apache.commons.io.IOUtils.length(charArray2);
        java.io.Writer writer7 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray2, writer7);
        int int9 = org.apache.commons.io.IOUtils.length(charArray2);
        int int10 = org.apache.commons.io.IOUtils.read(reader1, charArray2);
        int int11 = org.apache.commons.io.IOUtils.read(reader0, charArray2);
        int int12 = org.apache.commons.io.IOUtils.length(charArray2);
        java.io.OutputStream outputStream13 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(charArray2, outputStream13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.OutputStream.write(byte[])\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray2), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray2), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test1512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1512");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.BufferedInputStream bufferedInputStream10 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.io.InputStream inputStream12 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, (int) (byte) 1);
        java.io.OutputStream outputStream13 = null;
        int int14 = org.apache.commons.io.IOUtils.copy(inputStream12, outputStream13);
        java.io.BufferedInputStream bufferedInputStream16 = org.apache.commons.io.IOUtils.buffer(inputStream12, (int) (byte) 10);
        java.nio.charset.Charset charset17 = null;
        java.util.List<java.lang.String> strList18 = org.apache.commons.io.IOUtils.readLines(inputStream12, charset17);
        java.io.Writer writer20 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList18, "\n", writer20);
        java.io.OutputStream outputStream23 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList18, "hi!", outputStream23, "\r\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ??");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream10);
        org.junit.Assert.assertNotNull(inputStream12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(bufferedInputStream16);
        org.junit.Assert.assertNotNull(strList18);
    }

    @Test
    public void test1513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1513");
        java.io.Reader reader0 = null;
        java.io.Writer writer1 = null;
        java.io.Reader reader2 = null;
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray5 = new byte[] {};
        int int6 = org.apache.commons.io.IOUtils.length(byteArray5);
        int int7 = org.apache.commons.io.IOUtils.read(inputStream4, byteArray5);
        byte[] byteArray8 = org.apache.commons.io.IOUtils.toByteArray(inputStream4);
        java.nio.charset.Charset charset9 = null;
        java.util.List<java.lang.String> strList10 = org.apache.commons.io.IOUtils.readLines(inputStream4, charset9);
        java.nio.charset.Charset charset11 = null;
        org.apache.commons.io.LineIterator lineIterator12 = org.apache.commons.io.IOUtils.lineIterator(inputStream4, charset11);
        java.io.InputStream inputStream14 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream4, 6);
        java.nio.charset.Charset charset15 = null;
        char[] charArray16 = org.apache.commons.io.IOUtils.toCharArray(inputStream4, charset15);
        org.apache.commons.io.IOUtils.readFully(reader2, charArray16);
        // The following exception was thrown during execution in test generation
        try {
            long long18 = org.apache.commons.io.IOUtils.copyLarge(reader0, writer1, charArray16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[])\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(strList10);
        org.junit.Assert.assertNotNull(lineIterator12);
        org.junit.Assert.assertNotNull(inputStream14);
        org.junit.Assert.assertNotNull(charArray16);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray16), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray16), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray16), "[]");
    }

    @Test
    public void test1514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1514");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.util.List<java.lang.String> strList4 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer5 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer5);
        java.io.InputStream inputStream8 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray9 = org.apache.commons.io.IOUtils.toByteArray(inputStream8);
        int int10 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray9);
        java.io.OutputStream outputStream11 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray9, outputStream11);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertNotNull(inputStream8);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test1515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1515");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream5 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray("");
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray10);
        long long12 = org.apache.commons.io.IOUtils.copyLarge(inputStream4, outputStream5, 0L, 0L, byteArray10);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, byteArray10);
        java.io.BufferedInputStream bufferedInputStream15 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        org.apache.commons.io.IOUtils.closeQuietly(inputStream1);
        java.nio.charset.Charset charset17 = null;
        java.util.List<java.lang.String> strList18 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset17);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.io.OutputStream outputStream20 = null;
        int int21 = org.apache.commons.io.IOUtils.copy(inputStream1, outputStream20);
        java.io.InputStream inputStream23 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray24 = new byte[] {};
        int int25 = org.apache.commons.io.IOUtils.length(byteArray24);
        int int26 = org.apache.commons.io.IOUtils.read(inputStream23, byteArray24);
        byte[] byteArray27 = org.apache.commons.io.IOUtils.toByteArray(inputStream23);
        byte[] byteArray29 = org.apache.commons.io.IOUtils.toByteArray(inputStream23, (int) (short) 0);
        byte[] byteArray30 = new byte[] {};
        int int31 = org.apache.commons.io.IOUtils.length(byteArray30);
        org.apache.commons.io.IOUtils.readFully(inputStream23, byteArray30);
        int int33 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray30);
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        int int36 = org.apache.commons.io.IOUtils.read(inputStream34, byteArray35);
        org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray35);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str39 = org.apache.commons.io.IOUtils.toString(byteArray35, "hi!");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: hi!");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream15);
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(inputStream23);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
    }

    @Test
    public void test1516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1516");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray(inputStream1, (int) (short) 0);
        java.io.BufferedInputStream bufferedInputStream8 = org.apache.commons.io.IOUtils.buffer(inputStream1);
        java.io.Writer writer9 = null;
        java.nio.charset.Charset charset10 = null;
        org.apache.commons.io.IOUtils.copy((java.io.InputStream) bufferedInputStream8, writer9, charset10);
        java.nio.charset.Charset charset12 = null;
        org.apache.commons.io.LineIterator lineIterator13 = org.apache.commons.io.IOUtils.lineIterator((java.io.InputStream) bufferedInputStream8, charset12);
        java.io.Writer writer14 = null;
        org.apache.commons.io.IOUtils.copy((java.io.InputStream) bufferedInputStream8, writer14);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.skipFully((java.io.InputStream) bufferedInputStream8, (long) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.io.EOFException; message: Bytes to skip: 100 actual: 0");
        } catch (java.io.EOFException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream8);
        org.junit.Assert.assertNotNull(lineIterator13);
    }

    @Test
    public void test1517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1517");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "\n");
        java.util.List<java.lang.String> strList2 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.OutputStream outputStream3 = null;
        java.io.InputStream inputStream5 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray6 = new byte[] {};
        int int7 = org.apache.commons.io.IOUtils.length(byteArray6);
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray6);
        byte[] byteArray9 = org.apache.commons.io.IOUtils.toByteArray(inputStream5);
        byte[] byteArray11 = org.apache.commons.io.IOUtils.toByteArray(inputStream5, (int) (short) 0);
        byte[] byteArray12 = new byte[] {};
        int int13 = org.apache.commons.io.IOUtils.length(byteArray12);
        org.apache.commons.io.IOUtils.readFully(inputStream5, byteArray12);
        java.lang.String str15 = org.apache.commons.io.IOUtils.toString(byteArray12);
        int int16 = org.apache.commons.io.IOUtils.length(byteArray12);
        long long17 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream3, byteArray12);
        java.io.Writer writer18 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(byteArray12, writer18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Writer.write(String)\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(strList2);
        org.junit.Assert.assertNotNull(inputStream5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
    }

    @Test
    public void test1518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1518");
        java.io.Closeable closeable0 = null;
        java.io.Closeable[] closeableArray1 = new java.io.Closeable[] { closeable0 };
        org.apache.commons.io.IOUtils.closeQuietly(closeableArray1);
        int int3 = org.apache.commons.io.IOUtils.length((java.lang.Object[]) closeableArray1);
        org.junit.Assert.assertNotNull(closeableArray1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
    }

    @Test
    public void test1519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1519");
        java.io.Reader reader0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.BufferedReader bufferedReader2 = org.apache.commons.io.IOUtils.toBufferedReader(reader0, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1520");
        java.io.Reader reader0 = null;
        java.io.Writer writer1 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long4 = org.apache.commons.io.IOUtils.copyLarge(reader0, writer1, (long) '4', (long) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[], int, int)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1521");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.util.List<java.lang.String> strList4 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.OutputStream outputStream5 = null;
        long long6 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream5);
        java.io.Writer writer7 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer7);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream11 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray12 = new byte[] {};
        int int13 = org.apache.commons.io.IOUtils.length(byteArray12);
        int int14 = org.apache.commons.io.IOUtils.read(inputStream11, byteArray12);
        byte[] byteArray15 = org.apache.commons.io.IOUtils.toByteArray(inputStream11);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer16 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream11, iOExceptionConsumer16);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream11);
        java.io.BufferedInputStream bufferedInputStream20 = org.apache.commons.io.IOUtils.buffer(inputStream11, (int) (byte) 10);
        java.io.InputStream inputStream22 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream11, (int) (byte) 1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer23 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream11, iOExceptionConsumer23);
        java.io.OutputStream outputStream25 = null;
        java.io.InputStream inputStream27 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray28 = new byte[] {};
        int int29 = org.apache.commons.io.IOUtils.length(byteArray28);
        int int30 = org.apache.commons.io.IOUtils.read(inputStream27, byteArray28);
        byte[] byteArray31 = org.apache.commons.io.IOUtils.toByteArray(inputStream27);
        java.io.InputStream inputStream33 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray34 = new byte[] {};
        int int35 = org.apache.commons.io.IOUtils.length(byteArray34);
        int int36 = org.apache.commons.io.IOUtils.read(inputStream33, byteArray34);
        byte[] byteArray37 = org.apache.commons.io.IOUtils.toByteArray(inputStream33);
        int int38 = org.apache.commons.io.IOUtils.length(byteArray37);
        org.apache.commons.io.IOUtils.readFully(inputStream27, byteArray37);
        long long40 = org.apache.commons.io.IOUtils.copyLarge(inputStream11, outputStream25, byteArray37);
        boolean boolean41 = org.apache.commons.io.IOUtils.contentEquals(inputStream1, inputStream11);
        java.io.BufferedInputStream bufferedInputStream43 = org.apache.commons.io.IOUtils.buffer(inputStream1, 5);
        java.io.InputStream inputStream45 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream46 = null;
        java.io.InputStream inputStream49 = null;
        byte[] byteArray51 = org.apache.commons.io.IOUtils.toByteArray("");
        int int52 = org.apache.commons.io.IOUtils.read(inputStream49, byteArray51);
        long long53 = org.apache.commons.io.IOUtils.copyLarge(inputStream45, outputStream46, 0L, 0L, byteArray51);
        java.nio.charset.Charset charset54 = null;
        java.util.List<java.lang.String> strList55 = org.apache.commons.io.IOUtils.readLines(inputStream45, charset54);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream45);
        java.nio.charset.Charset charset57 = null;
        java.lang.String str58 = org.apache.commons.io.IOUtils.toString(inputStream45, charset57);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer59 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream45, iOExceptionConsumer59);
        boolean boolean61 = org.apache.commons.io.IOUtils.contentEquals((java.io.InputStream) bufferedInputStream43, inputStream45);
        java.io.BufferedInputStream bufferedInputStream62 = org.apache.commons.io.IOUtils.buffer((java.io.InputStream) bufferedInputStream43);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.LineIterator lineIterator64 = org.apache.commons.io.IOUtils.lineIterator((java.io.InputStream) bufferedInputStream43, "hi!");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: hi!");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(inputStream11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream20);
        org.junit.Assert.assertNotNull(inputStream22);
        org.junit.Assert.assertNotNull(inputStream27);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(inputStream33);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(bufferedInputStream43);
        org.junit.Assert.assertNotNull(inputStream45);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertNotNull(strList55);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(bufferedInputStream62);
    }

    @Test
    public void test1522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1522");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.nio.charset.Charset charset6 = null;
        java.util.List<java.lang.String> strList7 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset6);
        java.nio.charset.Charset charset8 = null;
        org.apache.commons.io.LineIterator lineIterator9 = org.apache.commons.io.IOUtils.lineIterator(inputStream1, charset8);
        java.io.InputStream inputStream11 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, 6);
        java.io.BufferedInputStream bufferedInputStream13 = org.apache.commons.io.IOUtils.buffer(inputStream11, 3);
        java.io.InputStream inputStream15 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray16 = org.apache.commons.io.IOUtils.toByteArray(inputStream15);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream15);
        java.util.List<java.lang.String> strList18 = org.apache.commons.io.IOUtils.readLines(inputStream15);
        java.io.OutputStream outputStream19 = null;
        long long20 = org.apache.commons.io.IOUtils.copyLarge(inputStream15, outputStream19);
        java.io.Writer writer21 = null;
        org.apache.commons.io.IOUtils.copy(inputStream15, writer21);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream15);
        java.io.InputStream inputStream25 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray26 = new byte[] {};
        int int27 = org.apache.commons.io.IOUtils.length(byteArray26);
        int int28 = org.apache.commons.io.IOUtils.read(inputStream25, byteArray26);
        byte[] byteArray29 = org.apache.commons.io.IOUtils.toByteArray(inputStream25);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer30 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream25, iOExceptionConsumer30);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream25);
        java.io.BufferedInputStream bufferedInputStream34 = org.apache.commons.io.IOUtils.buffer(inputStream25, (int) (byte) 10);
        java.io.InputStream inputStream36 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream25, (int) (byte) 1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer37 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream25, iOExceptionConsumer37);
        java.io.OutputStream outputStream39 = null;
        java.io.InputStream inputStream41 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray42 = new byte[] {};
        int int43 = org.apache.commons.io.IOUtils.length(byteArray42);
        int int44 = org.apache.commons.io.IOUtils.read(inputStream41, byteArray42);
        byte[] byteArray45 = org.apache.commons.io.IOUtils.toByteArray(inputStream41);
        java.io.InputStream inputStream47 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray48 = new byte[] {};
        int int49 = org.apache.commons.io.IOUtils.length(byteArray48);
        int int50 = org.apache.commons.io.IOUtils.read(inputStream47, byteArray48);
        byte[] byteArray51 = org.apache.commons.io.IOUtils.toByteArray(inputStream47);
        int int52 = org.apache.commons.io.IOUtils.length(byteArray51);
        org.apache.commons.io.IOUtils.readFully(inputStream41, byteArray51);
        long long54 = org.apache.commons.io.IOUtils.copyLarge(inputStream25, outputStream39, byteArray51);
        boolean boolean55 = org.apache.commons.io.IOUtils.contentEquals(inputStream15, inputStream25);
        java.io.BufferedInputStream bufferedInputStream56 = org.apache.commons.io.IOUtils.buffer(inputStream15);
        java.io.BufferedInputStream bufferedInputStream58 = org.apache.commons.io.IOUtils.buffer(inputStream15, (int) (short) 100);
        boolean boolean59 = org.apache.commons.io.IOUtils.contentEquals(inputStream11, inputStream15);
        long long61 = org.apache.commons.io.IOUtils.skip(inputStream11, (long) 10);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertNotNull(lineIterator9);
        org.junit.Assert.assertNotNull(inputStream11);
        org.junit.Assert.assertNotNull(bufferedInputStream13);
        org.junit.Assert.assertNotNull(inputStream15);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(inputStream25);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream34);
        org.junit.Assert.assertNotNull(inputStream36);
        org.junit.Assert.assertNotNull(inputStream41);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
        org.junit.Assert.assertNotNull(inputStream47);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(bufferedInputStream56);
        org.junit.Assert.assertNotNull(bufferedInputStream58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
    }

    @Test
    public void test1523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1523");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        java.nio.charset.Charset charset10 = null;
        java.util.List<java.lang.String> strList11 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset10);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.nio.charset.Charset charset13 = null;
        java.lang.String str14 = org.apache.commons.io.IOUtils.toString(inputStream1, charset13);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer15 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer15);
        java.io.InputStream inputStream17 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1);
        java.io.Writer writer18 = null;
        org.apache.commons.io.IOUtils.copy(inputStream17, writer18);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(inputStream17);
    }

    @Test
    public void test1524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1524");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "\n");
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.String> strList3 = org.apache.commons.io.IOUtils.readLines(inputStream1, "");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
    }

    @Test
    public void test1525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1525");
        java.nio.charset.Charset charset1 = null;
        java.io.InputStream inputStream2 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "", charset1);
        java.util.List<java.lang.String> strList3 = org.apache.commons.io.IOUtils.readLines(inputStream2);
        java.io.InputStream inputStream5 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray6 = new byte[] {};
        int int7 = org.apache.commons.io.IOUtils.length(byteArray6);
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray6);
        byte[] byteArray9 = org.apache.commons.io.IOUtils.toByteArray(inputStream5);
        int int10 = org.apache.commons.io.IOUtils.length(byteArray9);
        org.apache.commons.io.IOUtils.readFully(inputStream2, byteArray9);
        java.io.Writer writer12 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(byteArray9, writer12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Writer.write(String)\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream2);
        org.junit.Assert.assertNotNull(strList3);
        org.junit.Assert.assertNotNull(inputStream5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test1526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1526");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.BufferedInputStream bufferedInputStream10 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.io.InputStream inputStream12 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, (int) (byte) 1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer13 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer13);
        java.io.BufferedInputStream bufferedInputStream16 = org.apache.commons.io.IOUtils.buffer(inputStream1, 6);
        java.nio.charset.Charset charset17 = null;
        char[] charArray18 = org.apache.commons.io.IOUtils.toCharArray(inputStream1, charset17);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream10);
        org.junit.Assert.assertNotNull(inputStream12);
        org.junit.Assert.assertNotNull(bufferedInputStream16);
        org.junit.Assert.assertNotNull(charArray18);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray18), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray18), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray18), "[]");
    }

    @Test
    public void test1527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1527");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.util.List<java.lang.String> strList4 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.BufferedInputStream bufferedInputStream5 = org.apache.commons.io.IOUtils.buffer(inputStream1);
        java.io.OutputStream outputStream6 = null;
        long long7 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream6);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str9 = org.apache.commons.io.IOUtils.toString(inputStream1, "\r\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ??");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertNotNull(bufferedInputStream5);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
    }

    @Test
    public void test1528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1528");
        java.io.Reader reader0 = null;
        java.io.Writer writer1 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long4 = org.apache.commons.io.IOUtils.copyLarge(reader0, writer1, 10L, (long) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[], int, int)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1529");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.io.InputStream inputStream7 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray8 = new byte[] {};
        int int9 = org.apache.commons.io.IOUtils.length(byteArray8);
        int int10 = org.apache.commons.io.IOUtils.read(inputStream7, byteArray8);
        byte[] byteArray11 = org.apache.commons.io.IOUtils.toByteArray(inputStream7);
        int int12 = org.apache.commons.io.IOUtils.length(byteArray11);
        org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray11);
        org.apache.commons.io.function.IOConsumer<java.io.IOException> iOExceptionIOConsumer14 = null;
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1, iOExceptionIOConsumer14);
        java.io.OutputStream outputStream16 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long18 = org.apache.commons.io.IOUtils.copy(inputStream1, outputStream16, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: -1");
        } catch (java.lang.NegativeArraySizeException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(inputStream7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test1530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1530");
        java.io.OutputStream outputStream1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write("\n", outputStream1, "");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1531");
        java.nio.channels.ReadableByteChannel readableByteChannel0 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long2 = org.apache.commons.io.IOUtils.skip(readableByteChannel0, (long) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.nio.channels.ReadableByteChannel.read(java.nio.ByteBuffer)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1532");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        java.io.OutputStream outputStream10 = null;
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream10, (long) (short) 0, (-1L));
        char[] charArray14 = org.apache.commons.io.IOUtils.toCharArray(inputStream1);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream17 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray18 = new byte[] {};
        int int19 = org.apache.commons.io.IOUtils.length(byteArray18);
        int int20 = org.apache.commons.io.IOUtils.read(inputStream17, byteArray18);
        byte[] byteArray21 = org.apache.commons.io.IOUtils.toByteArray(inputStream17);
        byte[] byteArray23 = org.apache.commons.io.IOUtils.toByteArray(inputStream17, (int) (short) 0);
        java.io.BufferedInputStream bufferedInputStream24 = org.apache.commons.io.IOUtils.buffer(inputStream17);
        byte[] byteArray25 = org.apache.commons.io.IOUtils.toByteArray((java.io.InputStream) bufferedInputStream24);
        int int26 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray25);
        java.util.List<java.lang.String> strList27 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.nio.charset.Charset charset28 = null;
        java.util.List<java.lang.String> strList29 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset28);
        byte[] byteArray30 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[]");
        org.junit.Assert.assertNotNull(inputStream17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(strList27);
        org.junit.Assert.assertNotNull(strList29);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
    }

    @Test
    public void test1533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1533");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        java.io.InputStream inputStream6 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray7 = new byte[] {};
        int int8 = org.apache.commons.io.IOUtils.length(byteArray7);
        int int9 = org.apache.commons.io.IOUtils.read(inputStream6, byteArray7);
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray(inputStream6);
        byte[] byteArray12 = org.apache.commons.io.IOUtils.toByteArray(inputStream6, (int) (short) 0);
        int int13 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray12);
        java.io.InputStream inputStream15 = org.apache.commons.io.IOUtils.toInputStream("\n");
        byte[] byteArray17 = org.apache.commons.io.IOUtils.toByteArray(inputStream15, (int) (byte) 0);
        int int18 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray17);
        java.io.Writer writer19 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(byteArray17, writer19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Writer.write(String)\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(inputStream6);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(inputStream15);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test1534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1534");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        java.io.OutputStream outputStream10 = null;
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream10, (long) (short) 0, (-1L));
        java.lang.String str14 = org.apache.commons.io.IOUtils.toString(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly(inputStream1);
        java.io.BufferedInputStream bufferedInputStream17 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.String> strList19 = org.apache.commons.io.IOUtils.readLines((java.io.InputStream) bufferedInputStream17, "\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ?");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(bufferedInputStream17);
    }

    @Test
    public void test1535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1535");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream3 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1);
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream3);
        java.io.InputStream inputStream6 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream3, (int) (short) 1);
        java.io.BufferedInputStream bufferedInputStream7 = org.apache.commons.io.IOUtils.buffer(inputStream3);
        java.io.InputStream inputStream9 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray(inputStream9);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream9);
        java.util.List<java.lang.String> strList12 = org.apache.commons.io.IOUtils.readLines(inputStream9);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer13 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream9, iOExceptionConsumer13);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream9);
        byte[] byteArray16 = org.apache.commons.io.IOUtils.toByteArray(inputStream9);
        // The following exception was thrown during execution in test generation
        try {
            int int19 = org.apache.commons.io.IOUtils.read((java.io.InputStream) bufferedInputStream7, byteArray16, (int) (byte) 1, 4);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream3);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(inputStream6);
        org.junit.Assert.assertNotNull(bufferedInputStream7);
        org.junit.Assert.assertNotNull(inputStream9);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(strList12);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
    }

    @Test
    public void test1536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1536");
        java.io.Closeable closeable0 = null;
        java.io.Closeable[] closeableArray1 = new java.io.Closeable[] { closeable0 };
        org.apache.commons.io.IOUtils.closeQuietly(closeableArray1);
        org.apache.commons.io.IOUtils.closeQuietly(closeableArray1);
        org.apache.commons.io.IOUtils.closeQuietly(closeableArray1);
        org.apache.commons.io.IOUtils.closeQuietly(closeableArray1);
        int int6 = org.apache.commons.io.IOUtils.length((java.lang.Object[]) closeableArray1);
        int int7 = org.apache.commons.io.IOUtils.length((java.lang.Object[]) closeableArray1);
        org.apache.commons.io.IOUtils.closeQuietly(closeableArray1);
        int int9 = org.apache.commons.io.IOUtils.length((java.lang.Object[]) closeableArray1);
        org.apache.commons.io.IOUtils.closeQuietly(closeableArray1);
        int int11 = org.apache.commons.io.IOUtils.length((java.lang.Object[]) closeableArray1);
        org.apache.commons.io.IOUtils.closeQuietly(closeableArray1);
        org.junit.Assert.assertNotNull(closeableArray1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
    }

    @Test
    public void test1537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1537");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream3 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1);
        java.io.Writer writer4 = null;
        java.nio.charset.Charset charset5 = null;
        org.apache.commons.io.IOUtils.copy(inputStream3, writer4, charset5);
        org.apache.commons.io.function.IOConsumer<java.io.IOException> iOExceptionIOConsumer7 = null;
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream3, iOExceptionIOConsumer7);
        java.io.Writer writer9 = null;
        java.nio.charset.Charset charset10 = null;
        org.apache.commons.io.IOUtils.copy(inputStream3, writer9, charset10);
        java.io.Writer writer12 = null;
        org.apache.commons.io.IOUtils.copy(inputStream3, writer12);
        java.nio.charset.Charset charset14 = null;
        java.util.List<java.lang.String> strList15 = org.apache.commons.io.IOUtils.readLines(inputStream3, charset14);
        java.io.OutputStream outputStream16 = null;
        int int17 = org.apache.commons.io.IOUtils.copy(inputStream3, outputStream16);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream3);
        org.junit.Assert.assertNotNull(strList15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test1538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1538");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        org.apache.commons.io.IOUtils.closeQuietly(inputStream1);
        java.io.InputStream inputStream7 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray8 = new byte[] {};
        int int9 = org.apache.commons.io.IOUtils.length(byteArray8);
        int int10 = org.apache.commons.io.IOUtils.read(inputStream7, byteArray8);
        java.lang.String str11 = org.apache.commons.io.IOUtils.toString(byteArray8);
        int int14 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray8, (int) (byte) 10, (int) (short) 0);
        java.lang.String str15 = org.apache.commons.io.IOUtils.toString(byteArray8);
        int int16 = org.apache.commons.io.IOUtils.length(byteArray8);
        java.io.OutputStream outputStream17 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(byteArray8, outputStream17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.OutputStream.write(byte[])\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(inputStream7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test1539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1539");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream3 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1);
        java.io.Writer writer4 = null;
        java.nio.charset.Charset charset5 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer4, charset5);
        java.io.OutputStream outputStream7 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray("");
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray10);
        java.lang.String str12 = org.apache.commons.io.IOUtils.toString(byteArray10);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream7, byteArray10);
        java.util.List<java.lang.String> strList14 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.skipFully(inputStream1, (long) 5);
            org.junit.Assert.fail("Expected exception of type java.io.EOFException; message: Bytes to skip: 5 actual: 0");
        } catch (java.io.EOFException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream3);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(strList14);
    }

    @Test
    public void test1540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1540");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream5 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray("");
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray10);
        long long12 = org.apache.commons.io.IOUtils.copyLarge(inputStream4, outputStream5, 0L, 0L, byteArray10);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, byteArray10);
        java.io.BufferedInputStream bufferedInputStream15 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.nio.charset.Charset charset16 = null;
        java.util.List<java.lang.String> strList17 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset16);
        java.io.OutputStream outputStream18 = null;
        long long21 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream18, 0L, (long) 0);
        java.nio.charset.Charset charset22 = null;
        char[] charArray23 = org.apache.commons.io.IOUtils.toCharArray(inputStream1, charset22);
        java.io.InputStream inputStream25 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream25);
        java.io.InputStream inputStream27 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream25);
        java.lang.String str28 = org.apache.commons.io.IOUtils.toString(inputStream25);
        java.io.InputStream inputStream29 = null;
        byte[] byteArray31 = org.apache.commons.io.IOUtils.toByteArray("");
        int int32 = org.apache.commons.io.IOUtils.read(inputStream29, byteArray31);
        org.apache.commons.io.IOUtils.readFully(inputStream25, byteArray31);
        int int34 = org.apache.commons.io.IOUtils.length(byteArray31);
        org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray31);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str37 = org.apache.commons.io.IOUtils.toString(byteArray31, "");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream15);
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[]");
        org.junit.Assert.assertNotNull(inputStream25);
        org.junit.Assert.assertNotNull(inputStream27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
    }

    @Test
    public void test1541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1541");
        java.io.Writer writer0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.BufferedWriter bufferedWriter2 = org.apache.commons.io.IOUtils.buffer(writer0, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1542");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.util.List<java.lang.String> strList4 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.OutputStream outputStream5 = null;
        long long6 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream5);
        java.io.Writer writer7 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer7);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream11 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray12 = new byte[] {};
        int int13 = org.apache.commons.io.IOUtils.length(byteArray12);
        int int14 = org.apache.commons.io.IOUtils.read(inputStream11, byteArray12);
        byte[] byteArray15 = org.apache.commons.io.IOUtils.toByteArray(inputStream11);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer16 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream11, iOExceptionConsumer16);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream11);
        java.io.BufferedInputStream bufferedInputStream20 = org.apache.commons.io.IOUtils.buffer(inputStream11, (int) (byte) 10);
        java.io.InputStream inputStream22 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream11, (int) (byte) 1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer23 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream11, iOExceptionConsumer23);
        java.io.OutputStream outputStream25 = null;
        java.io.InputStream inputStream27 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray28 = new byte[] {};
        int int29 = org.apache.commons.io.IOUtils.length(byteArray28);
        int int30 = org.apache.commons.io.IOUtils.read(inputStream27, byteArray28);
        byte[] byteArray31 = org.apache.commons.io.IOUtils.toByteArray(inputStream27);
        java.io.InputStream inputStream33 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray34 = new byte[] {};
        int int35 = org.apache.commons.io.IOUtils.length(byteArray34);
        int int36 = org.apache.commons.io.IOUtils.read(inputStream33, byteArray34);
        byte[] byteArray37 = org.apache.commons.io.IOUtils.toByteArray(inputStream33);
        int int38 = org.apache.commons.io.IOUtils.length(byteArray37);
        org.apache.commons.io.IOUtils.readFully(inputStream27, byteArray37);
        long long40 = org.apache.commons.io.IOUtils.copyLarge(inputStream11, outputStream25, byteArray37);
        boolean boolean41 = org.apache.commons.io.IOUtils.contentEquals(inputStream1, inputStream11);
        java.io.BufferedInputStream bufferedInputStream43 = org.apache.commons.io.IOUtils.buffer(inputStream1, 5);
        java.io.InputStream inputStream45 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream46 = null;
        java.io.InputStream inputStream49 = null;
        byte[] byteArray51 = org.apache.commons.io.IOUtils.toByteArray("");
        int int52 = org.apache.commons.io.IOUtils.read(inputStream49, byteArray51);
        long long53 = org.apache.commons.io.IOUtils.copyLarge(inputStream45, outputStream46, 0L, 0L, byteArray51);
        java.nio.charset.Charset charset54 = null;
        java.util.List<java.lang.String> strList55 = org.apache.commons.io.IOUtils.readLines(inputStream45, charset54);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream45);
        java.nio.charset.Charset charset57 = null;
        java.lang.String str58 = org.apache.commons.io.IOUtils.toString(inputStream45, charset57);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer59 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream45, iOExceptionConsumer59);
        boolean boolean61 = org.apache.commons.io.IOUtils.contentEquals((java.io.InputStream) bufferedInputStream43, inputStream45);
        java.io.InputStream inputStream63 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream64 = null;
        java.io.InputStream inputStream66 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream67 = null;
        java.io.InputStream inputStream70 = null;
        byte[] byteArray72 = org.apache.commons.io.IOUtils.toByteArray("");
        int int73 = org.apache.commons.io.IOUtils.read(inputStream70, byteArray72);
        long long74 = org.apache.commons.io.IOUtils.copyLarge(inputStream66, outputStream67, 0L, 0L, byteArray72);
        long long75 = org.apache.commons.io.IOUtils.copyLarge(inputStream63, outputStream64, byteArray72);
        java.lang.String str76 = org.apache.commons.io.IOUtils.toString(byteArray72);
        org.apache.commons.io.IOUtils.readFully(inputStream45, byteArray72);
        java.io.InputStream inputStream79 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream79);
        byte[] byteArray81 = org.apache.commons.io.IOUtils.toByteArray(inputStream79);
        byte[] byteArray82 = org.apache.commons.io.IOUtils.toByteArray(inputStream79);
        byte[] byteArray83 = org.apache.commons.io.IOUtils.toByteArray(inputStream79);
        int int84 = org.apache.commons.io.IOUtils.read(inputStream45, byteArray83);
        // The following exception was thrown during execution in test generation
        try {
            java.io.BufferedInputStream bufferedInputStream86 = org.apache.commons.io.IOUtils.buffer(inputStream45, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Buffer size <= 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(inputStream11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream20);
        org.junit.Assert.assertNotNull(inputStream22);
        org.junit.Assert.assertNotNull(inputStream27);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(inputStream33);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(bufferedInputStream43);
        org.junit.Assert.assertNotNull(inputStream45);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertNotNull(strList55);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(inputStream63);
        org.junit.Assert.assertNotNull(inputStream66);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 0L + "'", long74 == 0L);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 0L + "'", long75 == 0L);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertNotNull(inputStream79);
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[]");
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[]");
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
    }

    @Test
    public void test1543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1543");
        java.io.Reader reader0 = null;
        java.io.Writer writer1 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long4 = org.apache.commons.io.IOUtils.copyLarge(reader0, writer1, (long) 3, (long) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[], int, int)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1544");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.io.InputStream inputStream7 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, (int) (byte) 0);
        byte[] byteArray9 = org.apache.commons.io.IOUtils.toByteArray("hi!");
        int int10 = org.apache.commons.io.IOUtils.read(inputStream7, byteArray9);
        java.io.Writer writer11 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.copy(inputStream7, writer11, "");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(inputStream7);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[104, 105, 33]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test1545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1545");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream5 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray("");
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray10);
        long long12 = org.apache.commons.io.IOUtils.copyLarge(inputStream4, outputStream5, 0L, 0L, byteArray10);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, byteArray10);
        java.io.BufferedInputStream bufferedInputStream15 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        org.apache.commons.io.IOUtils.closeQuietly(inputStream1);
        java.nio.charset.Charset charset17 = null;
        java.util.List<java.lang.String> strList18 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset17);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream20 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly(inputStream1);
        char[] charArray22 = org.apache.commons.io.IOUtils.toCharArray(inputStream1);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray24 = org.apache.commons.io.IOUtils.toByteArray(inputStream1, (long) 1);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Unexpected read size. current: 0, expected: 1");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream15);
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertNotNull(inputStream20);
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray22), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray22), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray22), "[]");
    }

    @Test
    public void test1546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1546");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.util.List<java.lang.String> strList4 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.BufferedInputStream bufferedInputStream5 = org.apache.commons.io.IOUtils.buffer(inputStream1);
        java.io.OutputStream outputStream6 = null;
        long long7 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream6);
        java.util.List<java.lang.String> strList8 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.InputStream inputStream10 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, (int) '#');
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertNotNull(bufferedInputStream5);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertNotNull(inputStream10);
    }

    @Test
    public void test1547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1547");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.io.InputStream inputStream7 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, (int) (byte) 0);
        java.nio.charset.Charset charset8 = null;
        org.apache.commons.io.LineIterator lineIterator9 = org.apache.commons.io.IOUtils.lineIterator(inputStream7, charset8);
        java.nio.charset.Charset charset10 = null;
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.IOUtils.lineIterator(inputStream7, charset10);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream7);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(inputStream7);
        org.junit.Assert.assertNotNull(lineIterator9);
        org.junit.Assert.assertNotNull(lineIterator11);
    }

    @Test
    public void test1548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1548");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream5 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray("");
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray10);
        long long12 = org.apache.commons.io.IOUtils.copyLarge(inputStream4, outputStream5, 0L, 0L, byteArray10);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, byteArray10);
        java.io.BufferedInputStream bufferedInputStream15 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.nio.charset.Charset charset16 = null;
        java.util.List<java.lang.String> strList17 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset16);
        java.io.OutputStream outputStream18 = null;
        long long21 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream18, 0L, (long) 0);
        java.io.OutputStream outputStream22 = null;
        long long25 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream22, (long) (short) -1, (long) 10);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray27 = org.apache.commons.io.IOUtils.toByteArray(inputStream1, (long) '4');
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Unexpected read size. current: 0, expected: 52");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream15);
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
    }

    @Test
    public void test1549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1549");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        java.nio.charset.Charset charset10 = null;
        java.util.List<java.lang.String> strList11 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset10);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.nio.charset.Charset charset13 = null;
        java.lang.String str14 = org.apache.commons.io.IOUtils.toString(inputStream1, charset13);
        java.io.OutputStream outputStream15 = null;
        java.io.InputStream inputStream16 = null;
        java.io.OutputStream outputStream17 = null;
        byte[] byteArray20 = new byte[] {};
        int int21 = org.apache.commons.io.IOUtils.length(byteArray20);
        java.io.OutputStream outputStream22 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray20, outputStream22);
        long long24 = org.apache.commons.io.IOUtils.copyLarge(inputStream16, outputStream17, 0L, (long) (byte) -1, byteArray20);
        long long25 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream15, byteArray20);
        java.io.InputStream inputStream26 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1);
        java.io.InputStream inputStream28 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray29 = org.apache.commons.io.IOUtils.toByteArray(inputStream28);
        java.io.InputStream inputStream31 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray32 = new byte[] {};
        int int33 = org.apache.commons.io.IOUtils.length(byteArray32);
        int int34 = org.apache.commons.io.IOUtils.read(inputStream31, byteArray32);
        byte[] byteArray35 = org.apache.commons.io.IOUtils.toByteArray(inputStream31);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer36 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream31, iOExceptionConsumer36);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream31);
        java.io.BufferedInputStream bufferedInputStream40 = org.apache.commons.io.IOUtils.buffer(inputStream31, (int) (byte) 10);
        boolean boolean41 = org.apache.commons.io.IOUtils.contentEquals(inputStream28, inputStream31);
        java.io.InputStream inputStream43 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray44 = new byte[] {};
        int int45 = org.apache.commons.io.IOUtils.length(byteArray44);
        int int46 = org.apache.commons.io.IOUtils.read(inputStream43, byteArray44);
        byte[] byteArray47 = org.apache.commons.io.IOUtils.toByteArray(inputStream43);
        byte[] byteArray49 = org.apache.commons.io.IOUtils.toByteArray(inputStream43, (int) (short) 0);
        long long51 = org.apache.commons.io.IOUtils.skip(inputStream43, 100L);
        java.io.InputStream inputStream52 = null;
        java.io.InputStream inputStream53 = null;
        java.io.OutputStream outputStream54 = null;
        byte[] byteArray57 = new byte[] {};
        int int58 = org.apache.commons.io.IOUtils.length(byteArray57);
        java.io.OutputStream outputStream59 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray57, outputStream59);
        long long61 = org.apache.commons.io.IOUtils.copyLarge(inputStream53, outputStream54, 0L, (long) (byte) -1, byteArray57);
        java.io.OutputStream outputStream62 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray57, outputStream62);
        org.apache.commons.io.IOUtils.readFully(inputStream52, byteArray57);
        int int65 = org.apache.commons.io.IOUtils.read(inputStream43, byteArray57);
        int int66 = org.apache.commons.io.IOUtils.read(inputStream31, byteArray57);
        java.lang.String str67 = org.apache.commons.io.IOUtils.toString(byteArray57);
        // The following exception was thrown during execution in test generation
        try {
            int int70 = org.apache.commons.io.IOUtils.read(inputStream26, byteArray57, (int) (byte) 10, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Range [10, 10 + 97) out of bounds for length 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(inputStream26);
        org.junit.Assert.assertNotNull(inputStream28);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(inputStream31);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(inputStream43);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
    }

    @Test
    public void test1550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1550");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.util.List<java.lang.String> strList4 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.OutputStream outputStream5 = null;
        long long6 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream5);
        java.io.Writer writer7 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer7);
        java.io.Writer writer9 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer9);
        java.io.InputStream inputStream12 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray13 = new byte[] {};
        int int14 = org.apache.commons.io.IOUtils.length(byteArray13);
        int int15 = org.apache.commons.io.IOUtils.read(inputStream12, byteArray13);
        byte[] byteArray16 = org.apache.commons.io.IOUtils.toByteArray(inputStream12);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer17 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream12, iOExceptionConsumer17);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream12);
        org.apache.commons.io.IOUtils.closeQuietly(inputStream12);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream12);
        java.io.BufferedInputStream bufferedInputStream23 = org.apache.commons.io.IOUtils.buffer(inputStream12, 100);
        boolean boolean24 = org.apache.commons.io.IOUtils.contentEquals(inputStream1, (java.io.InputStream) bufferedInputStream23);
        char[] charArray25 = org.apache.commons.io.IOUtils.toCharArray((java.io.InputStream) bufferedInputStream23);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(inputStream12);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[]");
    }

    @Test
    public void test1551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1551");
        java.nio.channels.ReadableByteChannel readableByteChannel0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.skipFully(readableByteChannel0, (long) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.nio.channels.ReadableByteChannel.read(java.nio.ByteBuffer)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1552");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.BufferedInputStream bufferedInputStream10 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.io.InputStream inputStream12 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, (int) (byte) 1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer13 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer13);
        java.io.BufferedInputStream bufferedInputStream16 = org.apache.commons.io.IOUtils.buffer(inputStream1, 6);
        // The following exception was thrown during execution in test generation
        try {
            java.io.InputStream inputStream18 = org.apache.commons.io.IOUtils.toBufferedInputStream((java.io.InputStream) bufferedInputStream16, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Negative initial size: -1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream10);
        org.junit.Assert.assertNotNull(inputStream12);
        org.junit.Assert.assertNotNull(bufferedInputStream16);
    }

    @Test
    public void test1553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1553");
        java.io.InputStream inputStream0 = null;
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray2 = org.apache.commons.io.IOUtils.readFully(inputStream0, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.InputStream.read(byte[], int, int)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1554");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream5 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray("");
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray10);
        long long12 = org.apache.commons.io.IOUtils.copyLarge(inputStream4, outputStream5, 0L, 0L, byteArray10);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, byteArray10);
        java.io.BufferedInputStream bufferedInputStream15 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        org.apache.commons.io.IOUtils.closeQuietly(inputStream1);
        java.nio.charset.Charset charset17 = null;
        java.util.List<java.lang.String> strList18 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset17);
        char[] charArray19 = org.apache.commons.io.IOUtils.toCharArray(inputStream1);
        java.io.InputStream inputStream21 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray22 = org.apache.commons.io.IOUtils.toByteArray(inputStream21);
        java.io.InputStream inputStream24 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray25 = new byte[] {};
        int int26 = org.apache.commons.io.IOUtils.length(byteArray25);
        int int27 = org.apache.commons.io.IOUtils.read(inputStream24, byteArray25);
        byte[] byteArray28 = org.apache.commons.io.IOUtils.toByteArray(inputStream24);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer29 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream24, iOExceptionConsumer29);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream24);
        java.io.BufferedInputStream bufferedInputStream33 = org.apache.commons.io.IOUtils.buffer(inputStream24, (int) (byte) 10);
        boolean boolean34 = org.apache.commons.io.IOUtils.contentEquals(inputStream21, inputStream24);
        java.io.OutputStream outputStream35 = null;
        long long38 = org.apache.commons.io.IOUtils.copyLarge(inputStream21, outputStream35, (long) (short) 0, (long) 2);
        java.io.OutputStream outputStream39 = null;
        int int40 = org.apache.commons.io.IOUtils.copy(inputStream21, outputStream39);
        java.io.OutputStream outputStream41 = null;
        byte[] byteArray42 = new byte[] {};
        int int43 = org.apache.commons.io.IOUtils.length(byteArray42);
        java.io.OutputStream outputStream44 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray42, outputStream44);
        long long46 = org.apache.commons.io.IOUtils.copyLarge(inputStream21, outputStream41, byteArray42);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray42, (int) (short) -1, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Range [-1, -1 + 1) out of bounds for length 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream15);
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[]");
        org.junit.Assert.assertNotNull(inputStream21);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertNotNull(inputStream24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
    }

    @Test
    public void test1555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1555");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.util.List<java.lang.String> strList4 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.OutputStream outputStream5 = null;
        long long6 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream5);
        java.io.Writer writer7 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer7);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream11 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray12 = new byte[] {};
        int int13 = org.apache.commons.io.IOUtils.length(byteArray12);
        int int14 = org.apache.commons.io.IOUtils.read(inputStream11, byteArray12);
        byte[] byteArray15 = org.apache.commons.io.IOUtils.toByteArray(inputStream11);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer16 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream11, iOExceptionConsumer16);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream11);
        java.io.BufferedInputStream bufferedInputStream20 = org.apache.commons.io.IOUtils.buffer(inputStream11, (int) (byte) 10);
        java.io.InputStream inputStream22 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream11, (int) (byte) 1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer23 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream11, iOExceptionConsumer23);
        java.io.OutputStream outputStream25 = null;
        java.io.InputStream inputStream27 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray28 = new byte[] {};
        int int29 = org.apache.commons.io.IOUtils.length(byteArray28);
        int int30 = org.apache.commons.io.IOUtils.read(inputStream27, byteArray28);
        byte[] byteArray31 = org.apache.commons.io.IOUtils.toByteArray(inputStream27);
        java.io.InputStream inputStream33 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray34 = new byte[] {};
        int int35 = org.apache.commons.io.IOUtils.length(byteArray34);
        int int36 = org.apache.commons.io.IOUtils.read(inputStream33, byteArray34);
        byte[] byteArray37 = org.apache.commons.io.IOUtils.toByteArray(inputStream33);
        int int38 = org.apache.commons.io.IOUtils.length(byteArray37);
        org.apache.commons.io.IOUtils.readFully(inputStream27, byteArray37);
        long long40 = org.apache.commons.io.IOUtils.copyLarge(inputStream11, outputStream25, byteArray37);
        boolean boolean41 = org.apache.commons.io.IOUtils.contentEquals(inputStream1, inputStream11);
        java.io.BufferedInputStream bufferedInputStream43 = org.apache.commons.io.IOUtils.buffer(inputStream1, 5);
        java.io.InputStream inputStream45 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream46 = null;
        java.io.InputStream inputStream49 = null;
        byte[] byteArray51 = org.apache.commons.io.IOUtils.toByteArray("");
        int int52 = org.apache.commons.io.IOUtils.read(inputStream49, byteArray51);
        long long53 = org.apache.commons.io.IOUtils.copyLarge(inputStream45, outputStream46, 0L, 0L, byteArray51);
        java.nio.charset.Charset charset54 = null;
        java.util.List<java.lang.String> strList55 = org.apache.commons.io.IOUtils.readLines(inputStream45, charset54);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream45);
        java.nio.charset.Charset charset57 = null;
        java.lang.String str58 = org.apache.commons.io.IOUtils.toString(inputStream45, charset57);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer59 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream45, iOExceptionConsumer59);
        boolean boolean61 = org.apache.commons.io.IOUtils.contentEquals((java.io.InputStream) bufferedInputStream43, inputStream45);
        java.nio.charset.Charset charset62 = null;
        char[] charArray63 = org.apache.commons.io.IOUtils.toCharArray((java.io.InputStream) bufferedInputStream43, charset62);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(inputStream11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream20);
        org.junit.Assert.assertNotNull(inputStream22);
        org.junit.Assert.assertNotNull(inputStream27);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(inputStream33);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(bufferedInputStream43);
        org.junit.Assert.assertNotNull(inputStream45);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertNotNull(strList55);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(charArray63);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray63), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray63), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray63), "[]");
    }

    @Test
    public void test1556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1556");
        java.io.Reader reader0 = null;
        java.io.Reader reader1 = null;
        java.io.Reader reader2 = null;
        java.io.Writer writer3 = null;
        char[] charArray6 = new char[] {};
        int int7 = org.apache.commons.io.IOUtils.length(charArray6);
        java.io.Writer writer8 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray6, writer8);
        java.io.Writer writer10 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray6, writer10);
        long long12 = org.apache.commons.io.IOUtils.copyLarge(reader2, writer3, 0L, (long) (byte) 100, charArray6);
        int int13 = org.apache.commons.io.IOUtils.read(reader1, charArray6);
        java.io.Writer writer14 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray6, writer14);
        org.apache.commons.io.IOUtils.readFully(reader0, charArray6);
        java.io.OutputStream outputStream17 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(charArray6, outputStream17, "\r\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ??");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test1557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1557");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "\n");
        java.nio.charset.Charset charset2 = null;
        java.lang.String str3 = org.apache.commons.io.IOUtils.toString(inputStream1, charset2);
        java.io.Writer writer4 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.copy(inputStream1, writer4, "");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\n" + "'", str3, "\n");
    }

    @Test
    public void test1558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1558");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly(inputStream1);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.nio.charset.Charset charset11 = null;
        org.apache.commons.io.LineIterator lineIterator12 = org.apache.commons.io.IOUtils.lineIterator(inputStream1, charset11);
        java.nio.charset.Charset charset13 = null;
        java.util.List<java.lang.String> strList14 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset13);
        java.lang.Class<?> wildcardClass15 = inputStream1.getClass();
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(lineIterator12);
        org.junit.Assert.assertNotNull(strList14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test1559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1559");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream("");
        java.io.OutputStream outputStream2 = null;
        long long3 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2);
        java.nio.charset.Charset charset4 = null;
        java.util.List<java.lang.String> strList5 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset4);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.LineIterator lineIterator7 = org.apache.commons.io.IOUtils.lineIterator(inputStream1, "\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ?");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(strList5);
    }

    @Test
    public void test1560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1560");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.BufferedInputStream bufferedInputStream10 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.io.InputStream inputStream12 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, (int) (byte) 1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer13 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer13);
        java.io.OutputStream outputStream15 = null;
        java.io.InputStream inputStream17 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray18 = new byte[] {};
        int int19 = org.apache.commons.io.IOUtils.length(byteArray18);
        int int20 = org.apache.commons.io.IOUtils.read(inputStream17, byteArray18);
        byte[] byteArray21 = org.apache.commons.io.IOUtils.toByteArray(inputStream17);
        java.io.InputStream inputStream23 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray24 = new byte[] {};
        int int25 = org.apache.commons.io.IOUtils.length(byteArray24);
        int int26 = org.apache.commons.io.IOUtils.read(inputStream23, byteArray24);
        byte[] byteArray27 = org.apache.commons.io.IOUtils.toByteArray(inputStream23);
        int int28 = org.apache.commons.io.IOUtils.length(byteArray27);
        org.apache.commons.io.IOUtils.readFully(inputStream17, byteArray27);
        long long30 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream15, byteArray27);
        java.io.BufferedInputStream bufferedInputStream32 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (short) 100);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer33 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) bufferedInputStream32, iOExceptionConsumer33);
        java.io.Writer writer35 = null;
        java.nio.charset.Charset charset36 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.copy((java.io.InputStream) bufferedInputStream32, writer35, charset36);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Stream closed");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream10);
        org.junit.Assert.assertNotNull(inputStream12);
        org.junit.Assert.assertNotNull(inputStream17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertNotNull(inputStream23);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream32);
    }

    @Test
    public void test1561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1561");
        java.io.Reader reader0 = null;
        char[] charArray1 = new char[] {};
        int int2 = org.apache.commons.io.IOUtils.length(charArray1);
        java.io.Writer writer3 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray1, writer3);
        int int5 = org.apache.commons.io.IOUtils.read(reader0, charArray1);
        java.io.Writer writer6 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray1, writer6);
        java.io.Writer writer8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(charArray1, writer8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Writer.write(char[])\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray1);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray1), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray1), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray1), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test1562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1562");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        java.io.OutputStream outputStream10 = null;
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream10, (long) (short) 0, (-1L));
        java.io.OutputStream outputStream14 = null;
        long long15 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream14);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str17 = org.apache.commons.io.IOUtils.toString(inputStream1, "hi!");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: hi!");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
    }

    @Test
    public void test1563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1563");
        java.io.Reader reader0 = null;
        java.io.Writer writer1 = null;
        java.io.InputStream inputStream3 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream4 = null;
        java.io.InputStream inputStream7 = null;
        byte[] byteArray9 = org.apache.commons.io.IOUtils.toByteArray("");
        int int10 = org.apache.commons.io.IOUtils.read(inputStream7, byteArray9);
        long long11 = org.apache.commons.io.IOUtils.copyLarge(inputStream3, outputStream4, 0L, 0L, byteArray9);
        java.io.Writer writer12 = null;
        org.apache.commons.io.IOUtils.copy(inputStream3, writer12);
        java.nio.charset.Charset charset14 = null;
        char[] charArray15 = org.apache.commons.io.IOUtils.toCharArray(inputStream3, charset14);
        // The following exception was thrown during execution in test generation
        try {
            long long16 = org.apache.commons.io.IOUtils.copyLarge(reader0, writer1, charArray15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[])\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream3);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[]");
    }

    @Test
    public void test1564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1564");
        java.io.Reader reader0 = null;
        java.io.Reader reader1 = null;
        java.io.Reader reader2 = null;
        java.io.Reader reader3 = null;
        java.io.Writer writer4 = null;
        char[] charArray7 = new char[] {};
        int int8 = org.apache.commons.io.IOUtils.length(charArray7);
        java.io.Writer writer9 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray7, writer9);
        java.io.Writer writer11 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray7, writer11);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(reader3, writer4, 0L, (long) (byte) 100, charArray7);
        int int14 = org.apache.commons.io.IOUtils.read(reader2, charArray7);
        int int15 = org.apache.commons.io.IOUtils.length(charArray7);
        java.io.Writer writer16 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray7, writer16);
        org.apache.commons.io.IOUtils.readFully(reader1, charArray7);
        java.io.Writer writer19 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray7, writer19);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.readFully(reader0, charArray7, (int) (byte) -1, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[], int, int)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test1565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1565");
        java.io.Reader reader0 = null;
        java.io.Writer writer1 = null;
        java.io.Reader reader2 = null;
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray5 = new byte[] {};
        int int6 = org.apache.commons.io.IOUtils.length(byteArray5);
        int int7 = org.apache.commons.io.IOUtils.read(inputStream4, byteArray5);
        byte[] byteArray8 = org.apache.commons.io.IOUtils.toByteArray(inputStream4);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer9 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream4, iOExceptionConsumer9);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream4);
        java.io.BufferedInputStream bufferedInputStream13 = org.apache.commons.io.IOUtils.buffer(inputStream4, (int) (byte) 10);
        java.io.InputStream inputStream15 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream4, (int) (byte) 1);
        java.io.OutputStream outputStream16 = null;
        int int17 = org.apache.commons.io.IOUtils.copy(inputStream15, outputStream16);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream15);
        java.io.Writer writer19 = null;
        org.apache.commons.io.IOUtils.copy(inputStream15, writer19);
        char[] charArray21 = org.apache.commons.io.IOUtils.toCharArray(inputStream15);
        int int22 = org.apache.commons.io.IOUtils.read(reader2, charArray21);
        // The following exception was thrown during execution in test generation
        try {
            long long23 = org.apache.commons.io.IOUtils.copyLarge(reader0, writer1, charArray21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[])\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream13);
        org.junit.Assert.assertNotNull(inputStream15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
    }

    @Test
    public void test1566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1566");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.io.InputStream inputStream7 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, (int) (byte) 0);
        java.io.Writer writer8 = null;
        org.apache.commons.io.IOUtils.copy(inputStream7, writer8);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray11 = org.apache.commons.io.IOUtils.toByteArray(inputStream7, 10L);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Unexpected read size. current: 0, expected: 10");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(inputStream7);
    }

    @Test
    public void test1567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1567");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        java.nio.charset.Charset charset5 = null;
        java.lang.String str6 = org.apache.commons.io.IOUtils.toString(inputStream1, charset5);
        java.io.InputStream inputStream8 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray9 = new byte[] {};
        int int10 = org.apache.commons.io.IOUtils.length(byteArray9);
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray9);
        java.io.InputStream inputStream12 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream8);
        byte[] byteArray13 = org.apache.commons.io.IOUtils.toByteArray(inputStream12);
        int int16 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray13, 6, 0);
        java.io.Writer writer17 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(byteArray13, writer17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Writer.write(String)\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(inputStream8);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(inputStream12);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test1568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1568");
        // The following exception was thrown during execution in test generation
        try {
            java.io.InputStream inputStream2 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "", "hi!");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: hi!");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1569");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.BufferedInputStream bufferedInputStream10 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        org.apache.commons.io.function.IOConsumer<java.io.IOException> iOExceptionIOConsumer11 = null;
        org.apache.commons.io.IOUtils.close((java.io.Closeable) bufferedInputStream10, iOExceptionIOConsumer11);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) bufferedInputStream10);
        org.apache.commons.io.IOUtils.skipFully((java.io.InputStream) bufferedInputStream10, (long) (short) 0);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer16 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) bufferedInputStream10, iOExceptionConsumer16);
        org.apache.commons.io.function.IOConsumer<java.io.IOException> iOExceptionIOConsumer18 = null;
        org.apache.commons.io.IOUtils.close((java.io.Closeable) bufferedInputStream10, iOExceptionIOConsumer18);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream10);
    }

    @Test
    public void test1570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1570");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.List<java.lang.String> strList3 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        long long5 = org.apache.commons.io.IOUtils.skip(inputStream1, (long) '/');
        java.nio.charset.Charset charset6 = null;
        java.lang.String str7 = org.apache.commons.io.IOUtils.toString(inputStream1, charset6);
        byte[] byteArray8 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.io.InputStream inputStream9 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1);
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray(inputStream9);
        java.io.Writer writer11 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(byteArray10, writer11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Writer.write(String)\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(strList3);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(inputStream9);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
    }

    @Test
    public void test1571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1571");
        java.nio.channels.ReadableByteChannel readableByteChannel0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.skipFully(readableByteChannel0, (long) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.nio.channels.ReadableByteChannel.read(java.nio.ByteBuffer)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1572");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream5 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray("");
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray10);
        long long12 = org.apache.commons.io.IOUtils.copyLarge(inputStream4, outputStream5, 0L, 0L, byteArray10);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, byteArray10);
        java.io.BufferedInputStream bufferedInputStream15 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        byte[] byteArray16 = org.apache.commons.io.IOUtils.toByteArray((java.io.InputStream) bufferedInputStream15);
        java.io.InputStream inputStream17 = null;
        java.io.OutputStream outputStream18 = null;
        byte[] byteArray21 = new byte[] {};
        int int22 = org.apache.commons.io.IOUtils.length(byteArray21);
        java.io.OutputStream outputStream23 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray21, outputStream23);
        long long25 = org.apache.commons.io.IOUtils.copyLarge(inputStream17, outputStream18, 0L, (long) (byte) -1, byteArray21);
        java.io.OutputStream outputStream26 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray21, outputStream26);
        int int28 = org.apache.commons.io.IOUtils.length(byteArray21);
        org.apache.commons.io.IOUtils.readFully((java.io.InputStream) bufferedInputStream15, byteArray21);
        java.io.InputStream inputStream31 = org.apache.commons.io.IOUtils.toBufferedInputStream((java.io.InputStream) bufferedInputStream15, 3);
        java.io.InputStream inputStream33 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream34 = null;
        java.io.InputStream inputStream36 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream37 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray42 = org.apache.commons.io.IOUtils.toByteArray("");
        int int43 = org.apache.commons.io.IOUtils.read(inputStream40, byteArray42);
        long long44 = org.apache.commons.io.IOUtils.copyLarge(inputStream36, outputStream37, 0L, 0L, byteArray42);
        long long45 = org.apache.commons.io.IOUtils.copyLarge(inputStream33, outputStream34, byteArray42);
        java.io.BufferedInputStream bufferedInputStream47 = org.apache.commons.io.IOUtils.buffer(inputStream33, (int) (byte) 10);
        org.apache.commons.io.IOUtils.closeQuietly(inputStream33);
        java.nio.charset.Charset charset49 = null;
        java.util.List<java.lang.String> strList50 = org.apache.commons.io.IOUtils.readLines(inputStream33, charset49);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream33);
        java.io.OutputStream outputStream52 = null;
        int int53 = org.apache.commons.io.IOUtils.copy(inputStream33, outputStream52);
        java.io.InputStream inputStream55 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray56 = new byte[] {};
        int int57 = org.apache.commons.io.IOUtils.length(byteArray56);
        int int58 = org.apache.commons.io.IOUtils.read(inputStream55, byteArray56);
        byte[] byteArray59 = org.apache.commons.io.IOUtils.toByteArray(inputStream55);
        byte[] byteArray61 = org.apache.commons.io.IOUtils.toByteArray(inputStream55, (int) (short) 0);
        byte[] byteArray62 = new byte[] {};
        int int63 = org.apache.commons.io.IOUtils.length(byteArray62);
        org.apache.commons.io.IOUtils.readFully(inputStream55, byteArray62);
        int int65 = org.apache.commons.io.IOUtils.read(inputStream33, byteArray62);
        java.lang.String str66 = org.apache.commons.io.IOUtils.toString(byteArray62);
        java.io.OutputStream outputStream67 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray62, outputStream67);
        // The following exception was thrown during execution in test generation
        try {
            int int71 = org.apache.commons.io.IOUtils.read((java.io.InputStream) bufferedInputStream15, byteArray62, (int) ' ', (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream15);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(inputStream31);
        org.junit.Assert.assertNotNull(inputStream33);
        org.junit.Assert.assertNotNull(inputStream36);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream47);
        org.junit.Assert.assertNotNull(strList50);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(inputStream55);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[]");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[]");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
    }

    @Test
    public void test1573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1573");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly(inputStream1);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.BufferedInputStream bufferedInputStream12 = org.apache.commons.io.IOUtils.buffer(inputStream1, 100);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray14 = org.apache.commons.io.IOUtils.readFully(inputStream1, (int) '/');
            org.junit.Assert.fail("Expected exception of type java.io.EOFException; message: Length to read: 47 actual: 0");
        } catch (java.io.EOFException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream12);
    }

    @Test
    public void test1574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1574");
        java.io.Reader reader0 = null;
        java.io.Writer writer1 = null;
        java.io.InputStream inputStream5 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray6 = new byte[] {};
        int int7 = org.apache.commons.io.IOUtils.length(byteArray6);
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray6);
        byte[] byteArray9 = org.apache.commons.io.IOUtils.toByteArray(inputStream5);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer10 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream5, iOExceptionConsumer10);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream5);
        java.io.BufferedInputStream bufferedInputStream14 = org.apache.commons.io.IOUtils.buffer(inputStream5, (int) (byte) 10);
        java.io.InputStream inputStream16 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream5, (int) (byte) 1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer17 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream5, iOExceptionConsumer17);
        java.io.BufferedInputStream bufferedInputStream20 = org.apache.commons.io.IOUtils.buffer(inputStream5, 6);
        java.nio.charset.Charset charset21 = null;
        char[] charArray22 = org.apache.commons.io.IOUtils.toCharArray(inputStream5, charset21);
        // The following exception was thrown during execution in test generation
        try {
            long long23 = org.apache.commons.io.IOUtils.copyLarge(reader0, writer1, (long) '#', (long) (short) 100, charArray22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[], int, int)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream14);
        org.junit.Assert.assertNotNull(inputStream16);
        org.junit.Assert.assertNotNull(bufferedInputStream20);
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray22), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray22), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray22), "[]");
    }

    @Test
    public void test1575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1575");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.util.List<java.lang.String> strList4 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.OutputStream outputStream5 = null;
        long long6 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream5);
        java.io.Writer writer7 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer7);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream11 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray12 = new byte[] {};
        int int13 = org.apache.commons.io.IOUtils.length(byteArray12);
        int int14 = org.apache.commons.io.IOUtils.read(inputStream11, byteArray12);
        byte[] byteArray15 = org.apache.commons.io.IOUtils.toByteArray(inputStream11);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer16 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream11, iOExceptionConsumer16);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream11);
        java.io.BufferedInputStream bufferedInputStream20 = org.apache.commons.io.IOUtils.buffer(inputStream11, (int) (byte) 10);
        java.io.InputStream inputStream22 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream11, (int) (byte) 1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer23 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream11, iOExceptionConsumer23);
        java.io.OutputStream outputStream25 = null;
        java.io.InputStream inputStream27 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray28 = new byte[] {};
        int int29 = org.apache.commons.io.IOUtils.length(byteArray28);
        int int30 = org.apache.commons.io.IOUtils.read(inputStream27, byteArray28);
        byte[] byteArray31 = org.apache.commons.io.IOUtils.toByteArray(inputStream27);
        java.io.InputStream inputStream33 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray34 = new byte[] {};
        int int35 = org.apache.commons.io.IOUtils.length(byteArray34);
        int int36 = org.apache.commons.io.IOUtils.read(inputStream33, byteArray34);
        byte[] byteArray37 = org.apache.commons.io.IOUtils.toByteArray(inputStream33);
        int int38 = org.apache.commons.io.IOUtils.length(byteArray37);
        org.apache.commons.io.IOUtils.readFully(inputStream27, byteArray37);
        long long40 = org.apache.commons.io.IOUtils.copyLarge(inputStream11, outputStream25, byteArray37);
        boolean boolean41 = org.apache.commons.io.IOUtils.contentEquals(inputStream1, inputStream11);
        java.io.BufferedInputStream bufferedInputStream43 = org.apache.commons.io.IOUtils.buffer(inputStream1, 5);
        java.io.InputStream inputStream45 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream46 = null;
        java.io.InputStream inputStream49 = null;
        byte[] byteArray51 = org.apache.commons.io.IOUtils.toByteArray("");
        int int52 = org.apache.commons.io.IOUtils.read(inputStream49, byteArray51);
        long long53 = org.apache.commons.io.IOUtils.copyLarge(inputStream45, outputStream46, 0L, 0L, byteArray51);
        java.nio.charset.Charset charset54 = null;
        java.util.List<java.lang.String> strList55 = org.apache.commons.io.IOUtils.readLines(inputStream45, charset54);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream45);
        java.nio.charset.Charset charset57 = null;
        java.lang.String str58 = org.apache.commons.io.IOUtils.toString(inputStream45, charset57);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer59 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream45, iOExceptionConsumer59);
        boolean boolean61 = org.apache.commons.io.IOUtils.contentEquals((java.io.InputStream) bufferedInputStream43, inputStream45);
        byte[] byteArray63 = org.apache.commons.io.IOUtils.toByteArray(inputStream45, 0);
        java.io.InputStream inputStream65 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream45, 2);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.String> strList67 = org.apache.commons.io.IOUtils.readLines(inputStream45, "\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ?");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(inputStream11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream20);
        org.junit.Assert.assertNotNull(inputStream22);
        org.junit.Assert.assertNotNull(inputStream27);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(inputStream33);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(bufferedInputStream43);
        org.junit.Assert.assertNotNull(inputStream45);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertNotNull(strList55);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[]");
        org.junit.Assert.assertNotNull(inputStream65);
    }

    @Test
    public void test1576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1576");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.BufferedInputStream bufferedInputStream10 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.LineIterator lineIterator12 = org.apache.commons.io.IOUtils.lineIterator(inputStream1, "\r\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ??");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream10);
    }

    @Test
    public void test1577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1577");
        java.util.Collection<java.lang.String> strCollection0 = null;
        java.io.Writer writer2 = null;
        org.apache.commons.io.IOUtils.writeLines(strCollection0, "\n", writer2);
    }

    @Test
    public void test1578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1578");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        java.io.Writer writer10 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer10);
        java.util.List<java.lang.String> strList12 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.InputStream inputStream13 = null;
        java.io.OutputStream outputStream14 = null;
        byte[] byteArray17 = new byte[] {};
        int int18 = org.apache.commons.io.IOUtils.length(byteArray17);
        java.io.OutputStream outputStream19 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray17, outputStream19);
        long long21 = org.apache.commons.io.IOUtils.copyLarge(inputStream13, outputStream14, 0L, (long) (byte) -1, byteArray17);
        java.io.OutputStream outputStream22 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray17, outputStream22);
        int int24 = org.apache.commons.io.IOUtils.length(byteArray17);
        java.io.OutputStream outputStream25 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray17, outputStream25);
        int int27 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray17);
        java.io.OutputStream outputStream28 = null;
        java.io.InputStream inputStream30 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray31 = new byte[] {};
        int int32 = org.apache.commons.io.IOUtils.length(byteArray31);
        int int33 = org.apache.commons.io.IOUtils.read(inputStream30, byteArray31);
        byte[] byteArray34 = org.apache.commons.io.IOUtils.toByteArray(inputStream30);
        byte[] byteArray36 = org.apache.commons.io.IOUtils.toByteArray(inputStream30, (int) (short) 0);
        long long38 = org.apache.commons.io.IOUtils.skip(inputStream30, 100L);
        java.io.InputStream inputStream39 = null;
        java.io.InputStream inputStream40 = null;
        java.io.OutputStream outputStream41 = null;
        byte[] byteArray44 = new byte[] {};
        int int45 = org.apache.commons.io.IOUtils.length(byteArray44);
        java.io.OutputStream outputStream46 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray44, outputStream46);
        long long48 = org.apache.commons.io.IOUtils.copyLarge(inputStream40, outputStream41, 0L, (long) (byte) -1, byteArray44);
        java.io.OutputStream outputStream49 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray44, outputStream49);
        org.apache.commons.io.IOUtils.readFully(inputStream39, byteArray44);
        int int52 = org.apache.commons.io.IOUtils.read(inputStream30, byteArray44);
        java.io.OutputStream outputStream53 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray44, outputStream53);
        java.lang.String str55 = org.apache.commons.io.IOUtils.toString(byteArray44);
        long long56 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream28, byteArray44);
        java.nio.charset.Charset charset57 = null;
        java.lang.String str58 = org.apache.commons.io.IOUtils.toString(inputStream1, charset57);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.String> strList60 = org.apache.commons.io.IOUtils.readLines(inputStream1, "");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(strList12);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(inputStream30);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
    }

    @Test
    public void test1579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1579");
        java.io.Reader reader0 = null;
        java.io.Reader reader1 = null;
        java.io.Writer writer2 = null;
        char[] charArray5 = new char[] {};
        int int6 = org.apache.commons.io.IOUtils.length(charArray5);
        java.io.Writer writer7 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray5, writer7);
        java.io.Writer writer9 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray5, writer9);
        long long11 = org.apache.commons.io.IOUtils.copyLarge(reader1, writer2, 0L, (long) (byte) 100, charArray5);
        int int12 = org.apache.commons.io.IOUtils.read(reader0, charArray5);
        java.io.OutputStream outputStream13 = null;
        java.nio.charset.Charset charset14 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(charArray5, outputStream13, charset14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.OutputStream.write(byte[])\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test1580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1580");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        java.io.InputStream inputStream6 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray(inputStream6);
        java.io.InputStream inputStream9 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray10 = new byte[] {};
        int int11 = org.apache.commons.io.IOUtils.length(byteArray10);
        int int12 = org.apache.commons.io.IOUtils.read(inputStream9, byteArray10);
        byte[] byteArray13 = org.apache.commons.io.IOUtils.toByteArray(inputStream9);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer14 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream9, iOExceptionConsumer14);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream9);
        java.io.BufferedInputStream bufferedInputStream18 = org.apache.commons.io.IOUtils.buffer(inputStream9, (int) (byte) 10);
        boolean boolean19 = org.apache.commons.io.IOUtils.contentEquals(inputStream6, inputStream9);
        java.io.OutputStream outputStream20 = null;
        long long23 = org.apache.commons.io.IOUtils.copyLarge(inputStream6, outputStream20, (long) (short) 0, (long) 2);
        java.io.OutputStream outputStream24 = null;
        int int25 = org.apache.commons.io.IOUtils.copy(inputStream6, outputStream24);
        boolean boolean26 = org.apache.commons.io.IOUtils.contentEquals(inputStream1, inputStream6);
        java.io.Writer writer27 = null;
        java.nio.charset.Charset charset28 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer27, charset28);
        java.nio.charset.Charset charset30 = null;
        java.util.List<java.lang.String> strList31 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset30);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(inputStream6);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(inputStream9);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(strList31);
    }

    @Test
    public void test1581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1581");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream5 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray("");
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray10);
        long long12 = org.apache.commons.io.IOUtils.copyLarge(inputStream4, outputStream5, 0L, 0L, byteArray10);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, byteArray10);
        java.io.BufferedInputStream bufferedInputStream15 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer16 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer16);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        char[] charArray19 = org.apache.commons.io.IOUtils.toCharArray(inputStream1);
        java.io.Writer writer20 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(charArray19, writer20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Writer.write(char[])\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream15);
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[]");
    }

    @Test
    public void test1582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1582");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream5 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray("");
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray10);
        long long12 = org.apache.commons.io.IOUtils.copyLarge(inputStream4, outputStream5, 0L, 0L, byteArray10);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, byteArray10);
        java.io.BufferedInputStream bufferedInputStream15 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.nio.charset.Charset charset16 = null;
        java.util.List<java.lang.String> strList17 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset16);
        java.io.OutputStream outputStream18 = null;
        long long21 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream18, 0L, (long) 0);
        java.io.OutputStream outputStream22 = null;
        long long25 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream22, (long) (short) -1, (long) 10);
        java.lang.String str26 = org.apache.commons.io.IOUtils.toString(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly(inputStream1);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        long long30 = org.apache.commons.io.IOUtils.skip(inputStream1, (long) (byte) 0);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream15);
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
    }

    @Test
    public void test1583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1583");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream5 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray("");
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray10);
        long long12 = org.apache.commons.io.IOUtils.copyLarge(inputStream4, outputStream5, 0L, 0L, byteArray10);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, byteArray10);
        java.io.BufferedInputStream bufferedInputStream15 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer16 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer16);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.OutputStream outputStream19 = null;
        java.io.InputStream inputStream23 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream24 = null;
        java.io.InputStream inputStream27 = null;
        byte[] byteArray29 = org.apache.commons.io.IOUtils.toByteArray("");
        int int30 = org.apache.commons.io.IOUtils.read(inputStream27, byteArray29);
        long long31 = org.apache.commons.io.IOUtils.copyLarge(inputStream23, outputStream24, 0L, 0L, byteArray29);
        java.nio.charset.Charset charset32 = null;
        java.util.List<java.lang.String> strList33 = org.apache.commons.io.IOUtils.readLines(inputStream23, charset32);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream23);
        java.nio.charset.Charset charset35 = null;
        java.lang.String str36 = org.apache.commons.io.IOUtils.toString(inputStream23, charset35);
        java.io.Writer writer37 = null;
        org.apache.commons.io.IOUtils.copy(inputStream23, writer37);
        byte[] byteArray39 = org.apache.commons.io.IOUtils.toByteArray(inputStream23);
        // The following exception was thrown during execution in test generation
        try {
            long long40 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream19, (long) 4, (long) 6, byteArray39);
            org.junit.Assert.fail("Expected exception of type java.io.EOFException; message: Bytes to skip: 4 actual: 0");
        } catch (java.io.EOFException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream15);
        org.junit.Assert.assertNotNull(inputStream23);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertNotNull(strList33);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
    }

    @Test
    public void test1584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1584");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.io.InputStream inputStream7 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray8 = new byte[] {};
        int int9 = org.apache.commons.io.IOUtils.length(byteArray8);
        int int10 = org.apache.commons.io.IOUtils.read(inputStream7, byteArray8);
        byte[] byteArray11 = org.apache.commons.io.IOUtils.toByteArray(inputStream7);
        int int12 = org.apache.commons.io.IOUtils.length(byteArray11);
        org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray11);
        java.io.InputStream inputStream14 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1);
        java.io.OutputStream outputStream15 = null;
        java.io.InputStream inputStream17 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray18 = new byte[] {};
        int int19 = org.apache.commons.io.IOUtils.length(byteArray18);
        int int20 = org.apache.commons.io.IOUtils.read(inputStream17, byteArray18);
        byte[] byteArray21 = org.apache.commons.io.IOUtils.toByteArray(inputStream17);
        byte[] byteArray23 = org.apache.commons.io.IOUtils.toByteArray(inputStream17, (int) (short) 0);
        byte[] byteArray24 = new byte[] {};
        int int25 = org.apache.commons.io.IOUtils.length(byteArray24);
        org.apache.commons.io.IOUtils.readFully(inputStream17, byteArray24);
        java.lang.String str27 = org.apache.commons.io.IOUtils.toString(byteArray24);
        long long28 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream15, byteArray24);
        java.io.Writer writer29 = null;
        java.nio.charset.Charset charset30 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(byteArray24, writer29, charset30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Writer.write(String)\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(inputStream7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(inputStream14);
        org.junit.Assert.assertNotNull(inputStream17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
    }

    @Test
    public void test1585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1585");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream5 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray("");
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray10);
        long long12 = org.apache.commons.io.IOUtils.copyLarge(inputStream4, outputStream5, 0L, 0L, byteArray10);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, byteArray10);
        java.io.BufferedInputStream bufferedInputStream15 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.io.InputStream inputStream17 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray18 = org.apache.commons.io.IOUtils.toByteArray(inputStream17);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream17);
        java.io.InputStream inputStream21 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream22 = null;
        java.io.InputStream inputStream25 = null;
        byte[] byteArray27 = org.apache.commons.io.IOUtils.toByteArray("");
        int int28 = org.apache.commons.io.IOUtils.read(inputStream25, byteArray27);
        long long29 = org.apache.commons.io.IOUtils.copyLarge(inputStream21, outputStream22, 0L, 0L, byteArray27);
        java.nio.charset.Charset charset30 = null;
        java.util.List<java.lang.String> strList31 = org.apache.commons.io.IOUtils.readLines(inputStream21, charset30);
        java.io.InputStream inputStream33 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream34 = null;
        java.io.InputStream inputStream37 = null;
        byte[] byteArray39 = org.apache.commons.io.IOUtils.toByteArray("");
        int int40 = org.apache.commons.io.IOUtils.read(inputStream37, byteArray39);
        long long41 = org.apache.commons.io.IOUtils.copyLarge(inputStream33, outputStream34, 0L, 0L, byteArray39);
        java.nio.charset.Charset charset42 = null;
        java.util.List<java.lang.String> strList43 = org.apache.commons.io.IOUtils.readLines(inputStream33, charset42);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream33);
        boolean boolean45 = org.apache.commons.io.IOUtils.contentEquals(inputStream21, inputStream33);
        java.io.OutputStream outputStream46 = null;
        java.io.InputStream inputStream48 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream49 = null;
        java.io.InputStream inputStream52 = null;
        byte[] byteArray54 = org.apache.commons.io.IOUtils.toByteArray("");
        int int55 = org.apache.commons.io.IOUtils.read(inputStream52, byteArray54);
        long long56 = org.apache.commons.io.IOUtils.copyLarge(inputStream48, outputStream49, 0L, 0L, byteArray54);
        long long57 = org.apache.commons.io.IOUtils.copyLarge(inputStream33, outputStream46, byteArray54);
        org.apache.commons.io.IOUtils.readFully(inputStream17, byteArray54);
        org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray54);
        java.lang.String str60 = org.apache.commons.io.IOUtils.toString(inputStream1);
        java.io.InputStream inputStream62 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, (int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str64 = org.apache.commons.io.IOUtils.toString(inputStream1, "\r\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ??");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream15);
        org.junit.Assert.assertNotNull(inputStream17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(inputStream21);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNotNull(strList31);
        org.junit.Assert.assertNotNull(inputStream33);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertNotNull(strList43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(inputStream48);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(inputStream62);
    }

    @Test
    public void test1586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1586");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.nio.charset.Charset charset6 = null;
        java.util.List<java.lang.String> strList7 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset6);
        java.nio.charset.Charset charset8 = null;
        org.apache.commons.io.LineIterator lineIterator9 = org.apache.commons.io.IOUtils.lineIterator(inputStream1, charset8);
        java.io.InputStream inputStream11 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, 6);
        java.io.BufferedInputStream bufferedInputStream13 = org.apache.commons.io.IOUtils.buffer(inputStream11, 3);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer14 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream11, iOExceptionConsumer14);
        char[] charArray16 = org.apache.commons.io.IOUtils.toCharArray(inputStream11);
        int int17 = org.apache.commons.io.IOUtils.length(charArray16);
        java.io.Writer writer18 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(charArray16, writer18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Writer.write(char[])\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertNotNull(lineIterator9);
        org.junit.Assert.assertNotNull(inputStream11);
        org.junit.Assert.assertNotNull(bufferedInputStream13);
        org.junit.Assert.assertNotNull(charArray16);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray16), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray16), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray16), "[]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test1587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1587");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream5 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray("");
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray10);
        long long12 = org.apache.commons.io.IOUtils.copyLarge(inputStream4, outputStream5, 0L, 0L, byteArray10);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, byteArray10);
        java.io.BufferedInputStream bufferedInputStream15 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer16 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer16);
        byte[] byteArray23 = new byte[] { (byte) 10, (byte) 1, (byte) 0, (byte) 100, (byte) 0 };
        int int24 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray23);
        java.io.InputStream inputStream26 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, 5);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.String> strList28 = org.apache.commons.io.IOUtils.readLines(inputStream1, "hi!");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: hi!");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream15);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[10, 1, 0, 100, 0]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(inputStream26);
    }

    @Test
    public void test1588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1588");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray(inputStream1, (int) (short) 0);
        long long9 = org.apache.commons.io.IOUtils.skip(inputStream1, 100L);
        java.io.InputStream inputStream10 = null;
        java.io.InputStream inputStream11 = null;
        java.io.OutputStream outputStream12 = null;
        byte[] byteArray15 = new byte[] {};
        int int16 = org.apache.commons.io.IOUtils.length(byteArray15);
        java.io.OutputStream outputStream17 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray15, outputStream17);
        long long19 = org.apache.commons.io.IOUtils.copyLarge(inputStream11, outputStream12, 0L, (long) (byte) -1, byteArray15);
        java.io.OutputStream outputStream20 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray15, outputStream20);
        org.apache.commons.io.IOUtils.readFully(inputStream10, byteArray15);
        int int23 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray15);
        java.io.OutputStream outputStream24 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray15, outputStream24);
        java.lang.String str26 = org.apache.commons.io.IOUtils.toString(byteArray15);
        java.lang.String str27 = org.apache.commons.io.IOUtils.toString(byteArray15);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
    }

    @Test
    public void test1589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1589");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.util.List<java.lang.String> strList4 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.OutputStream outputStream5 = null;
        long long8 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream5, (long) 0, 0L);
        java.io.InputStream inputStream10 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, 100);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray12 = org.apache.commons.io.IOUtils.toByteArray(inputStream1, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Size must be equal or greater than zero: -1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(inputStream10);
    }

    @Test
    public void test1590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1590");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.util.List<java.lang.String> strList4 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.OutputStream outputStream5 = null;
        long long6 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream5);
        java.io.OutputStream outputStream7 = null;
        java.io.InputStream inputStream11 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray12 = new byte[] {};
        int int13 = org.apache.commons.io.IOUtils.length(byteArray12);
        int int14 = org.apache.commons.io.IOUtils.read(inputStream11, byteArray12);
        byte[] byteArray15 = org.apache.commons.io.IOUtils.toByteArray(inputStream11);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer16 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream11, iOExceptionConsumer16);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream11);
        java.io.BufferedInputStream bufferedInputStream20 = org.apache.commons.io.IOUtils.buffer(inputStream11, (int) (byte) 10);
        java.io.InputStream inputStream22 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream11, (int) (byte) 1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer23 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream11, iOExceptionConsumer23);
        java.io.OutputStream outputStream25 = null;
        java.io.InputStream inputStream27 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray28 = new byte[] {};
        int int29 = org.apache.commons.io.IOUtils.length(byteArray28);
        int int30 = org.apache.commons.io.IOUtils.read(inputStream27, byteArray28);
        byte[] byteArray31 = org.apache.commons.io.IOUtils.toByteArray(inputStream27);
        java.io.InputStream inputStream33 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray34 = new byte[] {};
        int int35 = org.apache.commons.io.IOUtils.length(byteArray34);
        int int36 = org.apache.commons.io.IOUtils.read(inputStream33, byteArray34);
        byte[] byteArray37 = org.apache.commons.io.IOUtils.toByteArray(inputStream33);
        int int38 = org.apache.commons.io.IOUtils.length(byteArray37);
        org.apache.commons.io.IOUtils.readFully(inputStream27, byteArray37);
        long long40 = org.apache.commons.io.IOUtils.copyLarge(inputStream11, outputStream25, byteArray37);
        long long41 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream7, (long) (short) 0, 1L, byteArray37);
        java.nio.charset.Charset charset42 = null;
        org.apache.commons.io.LineIterator lineIterator43 = org.apache.commons.io.IOUtils.lineIterator(inputStream1, charset42);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray45 = org.apache.commons.io.IOUtils.toByteArray(inputStream1, (long) 6);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Unexpected read size. current: 0, expected: 6");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(inputStream11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream20);
        org.junit.Assert.assertNotNull(inputStream22);
        org.junit.Assert.assertNotNull(inputStream27);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(inputStream33);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertNotNull(lineIterator43);
    }

    @Test
    public void test1591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1591");
        // The following exception was thrown during execution in test generation
        try {
            java.io.InputStream inputStream2 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "", "\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ?");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1592");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray(inputStream1, (int) (short) 0);
        java.io.BufferedInputStream bufferedInputStream8 = org.apache.commons.io.IOUtils.buffer(inputStream1);
        // The following exception was thrown during execution in test generation
        try {
            long long10 = org.apache.commons.io.IOUtils.skip(inputStream1, (-1L));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Skip count must be non-negative, actual: -1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream8);
    }

    @Test
    public void test1593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1593");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        java.nio.charset.Charset charset10 = null;
        java.util.List<java.lang.String> strList11 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset10);
        java.nio.charset.Charset charset12 = null;
        char[] charArray13 = org.apache.commons.io.IOUtils.toCharArray(inputStream1, charset12);
        byte[] byteArray15 = org.apache.commons.io.IOUtils.toByteArray(inputStream1, (long) (byte) 0);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
    }

    @Test
    public void test1594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1594");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        byte[] byteArray11 = org.apache.commons.io.IOUtils.toByteArray(inputStream1, (long) 0);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.skipFully(inputStream1, (long) ' ');
            org.junit.Assert.fail("Expected exception of type java.io.EOFException; message: Bytes to skip: 32 actual: 0");
        } catch (java.io.EOFException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
    }

    @Test
    public void test1595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1595");
        java.io.InputStream inputStream0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.InputStream inputStream2 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream0, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.InputStream.read(byte[], int, int)\" because \"in\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1596");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.BufferedInputStream bufferedInputStream10 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.io.InputStream inputStream12 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, (int) (byte) 1);
        java.io.OutputStream outputStream13 = null;
        int int14 = org.apache.commons.io.IOUtils.copy(inputStream12, outputStream13);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream12);
        java.io.Writer writer16 = null;
        org.apache.commons.io.IOUtils.copy(inputStream12, writer16);
        java.io.OutputStream outputStream18 = null;
        java.io.InputStream inputStream22 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray23 = org.apache.commons.io.IOUtils.toByteArray(inputStream22);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream22);
        java.io.InputStream inputStream26 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream27 = null;
        java.io.InputStream inputStream30 = null;
        byte[] byteArray32 = org.apache.commons.io.IOUtils.toByteArray("");
        int int33 = org.apache.commons.io.IOUtils.read(inputStream30, byteArray32);
        long long34 = org.apache.commons.io.IOUtils.copyLarge(inputStream26, outputStream27, 0L, 0L, byteArray32);
        java.nio.charset.Charset charset35 = null;
        java.util.List<java.lang.String> strList36 = org.apache.commons.io.IOUtils.readLines(inputStream26, charset35);
        java.io.InputStream inputStream38 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream39 = null;
        java.io.InputStream inputStream42 = null;
        byte[] byteArray44 = org.apache.commons.io.IOUtils.toByteArray("");
        int int45 = org.apache.commons.io.IOUtils.read(inputStream42, byteArray44);
        long long46 = org.apache.commons.io.IOUtils.copyLarge(inputStream38, outputStream39, 0L, 0L, byteArray44);
        java.nio.charset.Charset charset47 = null;
        java.util.List<java.lang.String> strList48 = org.apache.commons.io.IOUtils.readLines(inputStream38, charset47);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream38);
        boolean boolean50 = org.apache.commons.io.IOUtils.contentEquals(inputStream26, inputStream38);
        java.io.OutputStream outputStream51 = null;
        java.io.InputStream inputStream53 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream54 = null;
        java.io.InputStream inputStream57 = null;
        byte[] byteArray59 = org.apache.commons.io.IOUtils.toByteArray("");
        int int60 = org.apache.commons.io.IOUtils.read(inputStream57, byteArray59);
        long long61 = org.apache.commons.io.IOUtils.copyLarge(inputStream53, outputStream54, 0L, 0L, byteArray59);
        long long62 = org.apache.commons.io.IOUtils.copyLarge(inputStream38, outputStream51, byteArray59);
        org.apache.commons.io.IOUtils.readFully(inputStream22, byteArray59);
        // The following exception was thrown during execution in test generation
        try {
            long long64 = org.apache.commons.io.IOUtils.copyLarge(inputStream12, outputStream18, 1L, (long) (byte) 100, byteArray59);
            org.junit.Assert.fail("Expected exception of type java.io.EOFException; message: Bytes to skip: 1 actual: 0");
        } catch (java.io.EOFException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream10);
        org.junit.Assert.assertNotNull(inputStream12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(inputStream22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertNotNull(inputStream26);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(strList36);
        org.junit.Assert.assertNotNull(inputStream38);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertNotNull(strList48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(inputStream53);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 0L + "'", long62 == 0L);
    }

    @Test
    public void test1597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1597");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        java.io.BufferedInputStream bufferedInputStream10 = org.apache.commons.io.IOUtils.buffer(inputStream1);
        org.apache.commons.io.function.IOConsumer<java.io.IOException> iOExceptionIOConsumer11 = null;
        org.apache.commons.io.IOUtils.close((java.io.Closeable) bufferedInputStream10, iOExceptionIOConsumer11);
        java.io.OutputStream outputStream13 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long15 = org.apache.commons.io.IOUtils.copy((java.io.InputStream) bufferedInputStream10, outputStream13, 2);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Stream closed");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream10);
    }

    @Test
    public void test1598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1598");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.util.List<java.lang.String> strList4 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.OutputStream outputStream5 = null;
        long long6 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream5);
        java.io.Writer writer7 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer7);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream11 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray12 = new byte[] {};
        int int13 = org.apache.commons.io.IOUtils.length(byteArray12);
        int int14 = org.apache.commons.io.IOUtils.read(inputStream11, byteArray12);
        byte[] byteArray15 = org.apache.commons.io.IOUtils.toByteArray(inputStream11);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer16 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream11, iOExceptionConsumer16);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream11);
        java.io.BufferedInputStream bufferedInputStream20 = org.apache.commons.io.IOUtils.buffer(inputStream11, (int) (byte) 10);
        java.io.InputStream inputStream22 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream11, (int) (byte) 1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer23 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream11, iOExceptionConsumer23);
        java.io.OutputStream outputStream25 = null;
        java.io.InputStream inputStream27 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray28 = new byte[] {};
        int int29 = org.apache.commons.io.IOUtils.length(byteArray28);
        int int30 = org.apache.commons.io.IOUtils.read(inputStream27, byteArray28);
        byte[] byteArray31 = org.apache.commons.io.IOUtils.toByteArray(inputStream27);
        java.io.InputStream inputStream33 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray34 = new byte[] {};
        int int35 = org.apache.commons.io.IOUtils.length(byteArray34);
        int int36 = org.apache.commons.io.IOUtils.read(inputStream33, byteArray34);
        byte[] byteArray37 = org.apache.commons.io.IOUtils.toByteArray(inputStream33);
        int int38 = org.apache.commons.io.IOUtils.length(byteArray37);
        org.apache.commons.io.IOUtils.readFully(inputStream27, byteArray37);
        long long40 = org.apache.commons.io.IOUtils.copyLarge(inputStream11, outputStream25, byteArray37);
        boolean boolean41 = org.apache.commons.io.IOUtils.contentEquals(inputStream1, inputStream11);
        java.io.BufferedInputStream bufferedInputStream42 = org.apache.commons.io.IOUtils.buffer(inputStream1);
        java.io.BufferedInputStream bufferedInputStream44 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (short) 100);
        java.io.InputStream inputStream46 = org.apache.commons.io.IOUtils.toBufferedInputStream((java.io.InputStream) bufferedInputStream44, 6);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream46);
        java.io.OutputStream outputStream48 = null;
        java.io.InputStream inputStream49 = null;
        java.io.OutputStream outputStream50 = null;
        byte[] byteArray53 = new byte[] {};
        int int54 = org.apache.commons.io.IOUtils.length(byteArray53);
        java.io.OutputStream outputStream55 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray53, outputStream55);
        long long57 = org.apache.commons.io.IOUtils.copyLarge(inputStream49, outputStream50, 0L, (long) (byte) -1, byteArray53);
        java.io.OutputStream outputStream58 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray53, outputStream58);
        int int60 = org.apache.commons.io.IOUtils.length(byteArray53);
        java.io.OutputStream outputStream61 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray53, outputStream61);
        // The following exception was thrown during execution in test generation
        try {
            long long63 = org.apache.commons.io.IOUtils.copyLarge(inputStream46, outputStream48, byteArray53);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.OutputStream.write(byte[], int, int)\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(inputStream11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream20);
        org.junit.Assert.assertNotNull(inputStream22);
        org.junit.Assert.assertNotNull(inputStream27);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(inputStream33);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(bufferedInputStream42);
        org.junit.Assert.assertNotNull(bufferedInputStream44);
        org.junit.Assert.assertNotNull(inputStream46);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
    }

    @Test
    public void test1599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1599");
        java.io.Reader reader0 = null;
        java.io.Writer writer1 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long4 = org.apache.commons.io.IOUtils.copyLarge(reader0, writer1, 0L, (long) 5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[], int, int)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1600");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        java.nio.charset.Charset charset10 = null;
        java.util.List<java.lang.String> strList11 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset10);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.nio.charset.Charset charset13 = null;
        java.lang.String str14 = org.apache.commons.io.IOUtils.toString(inputStream1, charset13);
        java.nio.charset.Charset charset15 = null;
        char[] charArray16 = org.apache.commons.io.IOUtils.toCharArray(inputStream1, charset15);
        java.io.Writer writer17 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(charArray16, writer17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Writer.write(char[])\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(charArray16);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray16), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray16), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray16), "[]");
    }

    @Test
    public void test1601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1601");
        java.util.Collection<java.lang.String> strCollection0 = null;
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.io.IOUtils.writeLines(strCollection0, "\n", outputStream2);
    }

    @Test
    public void test1602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1602");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly(inputStream1);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.nio.charset.Charset charset11 = null;
        org.apache.commons.io.LineIterator lineIterator12 = org.apache.commons.io.IOUtils.lineIterator(inputStream1, charset11);
        long long14 = org.apache.commons.io.IOUtils.skip(inputStream1, 1L);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(lineIterator12);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
    }

    @Test
    public void test1603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1603");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.BufferedInputStream bufferedInputStream10 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.io.InputStream inputStream12 = org.apache.commons.io.IOUtils.toBufferedInputStream((java.io.InputStream) bufferedInputStream10, (int) '#');
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream12);
        java.util.List<java.lang.String> strList14 = org.apache.commons.io.IOUtils.readLines(inputStream12);
        java.io.OutputStream outputStream16 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList14, "hi!", outputStream16, "\r\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ??");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream10);
        org.junit.Assert.assertNotNull(inputStream12);
        org.junit.Assert.assertNotNull(strList14);
    }

    @Test
    public void test1604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1604");
        java.io.Reader reader0 = null;
        java.io.Reader reader1 = null;
        java.io.Reader reader2 = null;
        char[] charArray3 = new char[] {};
        int int4 = org.apache.commons.io.IOUtils.length(charArray3);
        java.io.Writer writer5 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray3, writer5);
        int int7 = org.apache.commons.io.IOUtils.length(charArray3);
        java.io.Writer writer8 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray3, writer8);
        int int10 = org.apache.commons.io.IOUtils.length(charArray3);
        int int11 = org.apache.commons.io.IOUtils.read(reader2, charArray3);
        int int12 = org.apache.commons.io.IOUtils.read(reader1, charArray3);
        int int13 = org.apache.commons.io.IOUtils.length(charArray3);
        org.apache.commons.io.IOUtils.readFully(reader0, charArray3);
        java.io.OutputStream outputStream15 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(charArray3, outputStream15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.OutputStream.write(byte[])\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray3), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray3), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray3), "[]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test1605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1605");
        java.io.Reader reader0 = null;
        java.io.Writer writer1 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long4 = org.apache.commons.io.IOUtils.copyLarge(reader0, writer1, (long) (byte) 1, (long) 2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[], int, int)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1606");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.nio.charset.Charset charset6 = null;
        java.util.List<java.lang.String> strList7 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset6);
        java.nio.charset.Charset charset8 = null;
        org.apache.commons.io.LineIterator lineIterator9 = org.apache.commons.io.IOUtils.lineIterator(inputStream1, charset8);
        java.io.InputStream inputStream11 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, 6);
        java.io.InputStream inputStream13 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray14 = new byte[] {};
        int int15 = org.apache.commons.io.IOUtils.length(byteArray14);
        int int16 = org.apache.commons.io.IOUtils.read(inputStream13, byteArray14);
        byte[] byteArray17 = org.apache.commons.io.IOUtils.toByteArray(inputStream13);
        byte[] byteArray18 = org.apache.commons.io.IOUtils.toByteArray(inputStream13);
        int int21 = org.apache.commons.io.IOUtils.read(inputStream11, byteArray18, (int) '#', 0);
        java.io.InputStream inputStream23 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream11, 10);
        java.io.InputStream inputStream24 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream11);
        java.io.InputStream inputStream26 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray27 = org.apache.commons.io.IOUtils.toByteArray(inputStream26);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream26);
        java.io.InputStream inputStream30 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream31 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray36 = org.apache.commons.io.IOUtils.toByteArray("");
        int int37 = org.apache.commons.io.IOUtils.read(inputStream34, byteArray36);
        long long38 = org.apache.commons.io.IOUtils.copyLarge(inputStream30, outputStream31, 0L, 0L, byteArray36);
        java.nio.charset.Charset charset39 = null;
        java.util.List<java.lang.String> strList40 = org.apache.commons.io.IOUtils.readLines(inputStream30, charset39);
        java.io.InputStream inputStream42 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream43 = null;
        java.io.InputStream inputStream46 = null;
        byte[] byteArray48 = org.apache.commons.io.IOUtils.toByteArray("");
        int int49 = org.apache.commons.io.IOUtils.read(inputStream46, byteArray48);
        long long50 = org.apache.commons.io.IOUtils.copyLarge(inputStream42, outputStream43, 0L, 0L, byteArray48);
        java.nio.charset.Charset charset51 = null;
        java.util.List<java.lang.String> strList52 = org.apache.commons.io.IOUtils.readLines(inputStream42, charset51);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream42);
        boolean boolean54 = org.apache.commons.io.IOUtils.contentEquals(inputStream30, inputStream42);
        java.io.OutputStream outputStream55 = null;
        java.io.InputStream inputStream57 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream58 = null;
        java.io.InputStream inputStream61 = null;
        byte[] byteArray63 = org.apache.commons.io.IOUtils.toByteArray("");
        int int64 = org.apache.commons.io.IOUtils.read(inputStream61, byteArray63);
        long long65 = org.apache.commons.io.IOUtils.copyLarge(inputStream57, outputStream58, 0L, 0L, byteArray63);
        long long66 = org.apache.commons.io.IOUtils.copyLarge(inputStream42, outputStream55, byteArray63);
        org.apache.commons.io.IOUtils.readFully(inputStream26, byteArray63);
        java.io.OutputStream outputStream68 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray63, outputStream68);
        int int70 = org.apache.commons.io.IOUtils.length(byteArray63);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.readFully(inputStream11, byteArray63, (int) (byte) -1, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Range [-1, -1 + 1) out of bounds for length 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertNotNull(lineIterator9);
        org.junit.Assert.assertNotNull(inputStream11);
        org.junit.Assert.assertNotNull(inputStream13);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(inputStream23);
        org.junit.Assert.assertNotNull(inputStream24);
        org.junit.Assert.assertNotNull(inputStream26);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertNotNull(inputStream30);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertNotNull(strList40);
        org.junit.Assert.assertNotNull(inputStream42);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertNotNull(strList52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(inputStream57);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 0L + "'", long65 == 0L);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 0L + "'", long66 == 0L);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
    }

    @Test
    public void test1607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1607");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream3 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1);
        java.lang.String str4 = org.apache.commons.io.IOUtils.toString(inputStream1);
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray7);
        java.io.InputStream inputStream11 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray12 = new byte[] {};
        int int13 = org.apache.commons.io.IOUtils.length(byteArray12);
        int int14 = org.apache.commons.io.IOUtils.read(inputStream11, byteArray12);
        byte[] byteArray15 = org.apache.commons.io.IOUtils.toByteArray(inputStream11);
        byte[] byteArray17 = org.apache.commons.io.IOUtils.toByteArray(inputStream11, (int) (short) 0);
        java.io.Writer writer18 = null;
        java.nio.charset.Charset charset19 = null;
        org.apache.commons.io.IOUtils.copy(inputStream11, writer18, charset19);
        java.io.InputStream inputStream22 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream23 = null;
        java.io.InputStream inputStream25 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream26 = null;
        java.io.InputStream inputStream29 = null;
        byte[] byteArray31 = org.apache.commons.io.IOUtils.toByteArray("");
        int int32 = org.apache.commons.io.IOUtils.read(inputStream29, byteArray31);
        long long33 = org.apache.commons.io.IOUtils.copyLarge(inputStream25, outputStream26, 0L, 0L, byteArray31);
        long long34 = org.apache.commons.io.IOUtils.copyLarge(inputStream22, outputStream23, byteArray31);
        java.lang.String str35 = org.apache.commons.io.IOUtils.toString(byteArray31);
        int int36 = org.apache.commons.io.IOUtils.read(inputStream11, byteArray31);
        org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray31);
        java.io.InputStream inputStream39 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream40 = null;
        java.io.InputStream inputStream43 = null;
        byte[] byteArray45 = org.apache.commons.io.IOUtils.toByteArray("");
        int int46 = org.apache.commons.io.IOUtils.read(inputStream43, byteArray45);
        long long47 = org.apache.commons.io.IOUtils.copyLarge(inputStream39, outputStream40, 0L, 0L, byteArray45);
        java.nio.charset.Charset charset48 = null;
        java.util.List<java.lang.String> strList49 = org.apache.commons.io.IOUtils.readLines(inputStream39, charset48);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream39);
        java.nio.charset.Charset charset51 = null;
        java.lang.String str52 = org.apache.commons.io.IOUtils.toString(inputStream39, charset51);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer53 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream39, iOExceptionConsumer53);
        java.nio.charset.Charset charset55 = null;
        org.apache.commons.io.LineIterator lineIterator56 = org.apache.commons.io.IOUtils.lineIterator(inputStream39, charset55);
        boolean boolean57 = org.apache.commons.io.IOUtils.contentEquals(inputStream1, inputStream39);
        java.io.InputStream inputStream58 = null;
        boolean boolean59 = org.apache.commons.io.IOUtils.contentEquals(inputStream39, inputStream58);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(inputStream11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertNotNull(inputStream22);
        org.junit.Assert.assertNotNull(inputStream25);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(inputStream39);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertNotNull(strList49);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(lineIterator56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test1608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1608");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream5 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray("");
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray10);
        long long12 = org.apache.commons.io.IOUtils.copyLarge(inputStream4, outputStream5, 0L, 0L, byteArray10);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, byteArray10);
        java.io.BufferedInputStream bufferedInputStream15 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.io.InputStream inputStream17 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray18 = org.apache.commons.io.IOUtils.toByteArray(inputStream17);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream17);
        java.io.InputStream inputStream21 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream22 = null;
        java.io.InputStream inputStream25 = null;
        byte[] byteArray27 = org.apache.commons.io.IOUtils.toByteArray("");
        int int28 = org.apache.commons.io.IOUtils.read(inputStream25, byteArray27);
        long long29 = org.apache.commons.io.IOUtils.copyLarge(inputStream21, outputStream22, 0L, 0L, byteArray27);
        java.nio.charset.Charset charset30 = null;
        java.util.List<java.lang.String> strList31 = org.apache.commons.io.IOUtils.readLines(inputStream21, charset30);
        java.io.InputStream inputStream33 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream34 = null;
        java.io.InputStream inputStream37 = null;
        byte[] byteArray39 = org.apache.commons.io.IOUtils.toByteArray("");
        int int40 = org.apache.commons.io.IOUtils.read(inputStream37, byteArray39);
        long long41 = org.apache.commons.io.IOUtils.copyLarge(inputStream33, outputStream34, 0L, 0L, byteArray39);
        java.nio.charset.Charset charset42 = null;
        java.util.List<java.lang.String> strList43 = org.apache.commons.io.IOUtils.readLines(inputStream33, charset42);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream33);
        boolean boolean45 = org.apache.commons.io.IOUtils.contentEquals(inputStream21, inputStream33);
        java.io.OutputStream outputStream46 = null;
        java.io.InputStream inputStream48 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream49 = null;
        java.io.InputStream inputStream52 = null;
        byte[] byteArray54 = org.apache.commons.io.IOUtils.toByteArray("");
        int int55 = org.apache.commons.io.IOUtils.read(inputStream52, byteArray54);
        long long56 = org.apache.commons.io.IOUtils.copyLarge(inputStream48, outputStream49, 0L, 0L, byteArray54);
        long long57 = org.apache.commons.io.IOUtils.copyLarge(inputStream33, outputStream46, byteArray54);
        org.apache.commons.io.IOUtils.readFully(inputStream17, byteArray54);
        org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray54);
        java.lang.String str60 = org.apache.commons.io.IOUtils.toString(inputStream1);
        java.io.BufferedInputStream bufferedInputStream62 = org.apache.commons.io.IOUtils.buffer(inputStream1, 100);
        java.io.OutputStream outputStream63 = null;
        java.io.InputStream inputStream66 = null;
        byte[] byteArray68 = org.apache.commons.io.IOUtils.toByteArray("");
        int int69 = org.apache.commons.io.IOUtils.read(inputStream66, byteArray68);
        java.lang.String str70 = org.apache.commons.io.IOUtils.toString(byteArray68);
        long long71 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream63, (-1L), (long) (short) -1, byteArray68);
        java.io.InputStream inputStream72 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1);
        java.lang.String str73 = org.apache.commons.io.IOUtils.toString(inputStream72);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.LineIterator lineIterator75 = org.apache.commons.io.IOUtils.lineIterator(inputStream72, "");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream15);
        org.junit.Assert.assertNotNull(inputStream17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(inputStream21);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNotNull(strList31);
        org.junit.Assert.assertNotNull(inputStream33);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertNotNull(strList43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(inputStream48);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(bufferedInputStream62);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 0L + "'", long71 == 0L);
        org.junit.Assert.assertNotNull(inputStream72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
    }

    @Test
    public void test1609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1609");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        java.io.Writer writer5 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer5);
        java.nio.charset.Charset charset7 = null;
        org.apache.commons.io.LineIterator lineIterator8 = org.apache.commons.io.IOUtils.lineIterator(inputStream1, charset7);
        java.io.InputStream inputStream10 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream11 = null;
        java.io.InputStream inputStream13 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream14 = null;
        java.io.InputStream inputStream17 = null;
        byte[] byteArray19 = org.apache.commons.io.IOUtils.toByteArray("");
        int int20 = org.apache.commons.io.IOUtils.read(inputStream17, byteArray19);
        long long21 = org.apache.commons.io.IOUtils.copyLarge(inputStream13, outputStream14, 0L, 0L, byteArray19);
        long long22 = org.apache.commons.io.IOUtils.copyLarge(inputStream10, outputStream11, byteArray19);
        java.io.BufferedInputStream bufferedInputStream24 = org.apache.commons.io.IOUtils.buffer(inputStream10, (int) (byte) 10);
        byte[] byteArray25 = org.apache.commons.io.IOUtils.toByteArray((java.io.InputStream) bufferedInputStream24);
        java.lang.String str26 = org.apache.commons.io.IOUtils.toString(byteArray25);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray25, 3, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Range [3, 3 + 10) out of bounds for length 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(lineIterator8);
        org.junit.Assert.assertNotNull(inputStream10);
        org.junit.Assert.assertNotNull(inputStream13);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
    }

    @Test
    public void test1610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1610");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        java.nio.charset.Charset charset10 = null;
        java.util.List<java.lang.String> strList11 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset10);
        java.io.OutputStream outputStream13 = null;
        java.nio.charset.Charset charset14 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList11, "\r\n", outputStream13, charset14);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(strList11);
    }

    @Test
    public void test1611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1611");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.util.List<java.lang.String> strList4 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.OutputStream outputStream5 = null;
        long long6 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream5);
        java.io.Writer writer7 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer7);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream11 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray12 = new byte[] {};
        int int13 = org.apache.commons.io.IOUtils.length(byteArray12);
        int int14 = org.apache.commons.io.IOUtils.read(inputStream11, byteArray12);
        byte[] byteArray15 = org.apache.commons.io.IOUtils.toByteArray(inputStream11);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer16 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream11, iOExceptionConsumer16);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream11);
        java.io.BufferedInputStream bufferedInputStream20 = org.apache.commons.io.IOUtils.buffer(inputStream11, (int) (byte) 10);
        java.io.InputStream inputStream22 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream11, (int) (byte) 1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer23 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream11, iOExceptionConsumer23);
        java.io.OutputStream outputStream25 = null;
        java.io.InputStream inputStream27 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray28 = new byte[] {};
        int int29 = org.apache.commons.io.IOUtils.length(byteArray28);
        int int30 = org.apache.commons.io.IOUtils.read(inputStream27, byteArray28);
        byte[] byteArray31 = org.apache.commons.io.IOUtils.toByteArray(inputStream27);
        java.io.InputStream inputStream33 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray34 = new byte[] {};
        int int35 = org.apache.commons.io.IOUtils.length(byteArray34);
        int int36 = org.apache.commons.io.IOUtils.read(inputStream33, byteArray34);
        byte[] byteArray37 = org.apache.commons.io.IOUtils.toByteArray(inputStream33);
        int int38 = org.apache.commons.io.IOUtils.length(byteArray37);
        org.apache.commons.io.IOUtils.readFully(inputStream27, byteArray37);
        long long40 = org.apache.commons.io.IOUtils.copyLarge(inputStream11, outputStream25, byteArray37);
        boolean boolean41 = org.apache.commons.io.IOUtils.contentEquals(inputStream1, inputStream11);
        java.io.OutputStream outputStream42 = null;
        long long44 = org.apache.commons.io.IOUtils.copy(inputStream1, outputStream42, (int) '/');
        long long46 = org.apache.commons.io.IOUtils.skip(inputStream1, (long) 10);
        java.io.InputStream inputStream48 = org.apache.commons.io.IOUtils.toInputStream("\n");
        byte[] byteArray50 = org.apache.commons.io.IOUtils.toByteArray(inputStream48, (int) (byte) 0);
        java.io.InputStream inputStream52 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray53 = new byte[] {};
        int int54 = org.apache.commons.io.IOUtils.length(byteArray53);
        int int55 = org.apache.commons.io.IOUtils.read(inputStream52, byteArray53);
        byte[] byteArray56 = org.apache.commons.io.IOUtils.toByteArray(inputStream52);
        byte[] byteArray58 = org.apache.commons.io.IOUtils.toByteArray(inputStream52, (int) (short) 0);
        byte[] byteArray59 = new byte[] {};
        int int60 = org.apache.commons.io.IOUtils.length(byteArray59);
        org.apache.commons.io.IOUtils.readFully(inputStream52, byteArray59);
        org.apache.commons.io.IOUtils.readFully(inputStream48, byteArray59);
        int int63 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray59);
        java.lang.String str64 = org.apache.commons.io.IOUtils.toString(inputStream1);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(inputStream11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream20);
        org.junit.Assert.assertNotNull(inputStream22);
        org.junit.Assert.assertNotNull(inputStream27);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(inputStream33);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertNotNull(inputStream48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[]");
        org.junit.Assert.assertNotNull(inputStream52);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[]");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[]");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
    }

    @Test
    public void test1612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1612");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.BufferedInputStream bufferedInputStream10 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.io.InputStream inputStream12 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, (int) (byte) 1);
        java.io.OutputStream outputStream13 = null;
        int int14 = org.apache.commons.io.IOUtils.copy(inputStream12, outputStream13);
        java.io.BufferedInputStream bufferedInputStream16 = org.apache.commons.io.IOUtils.buffer(inputStream12, (int) (byte) 10);
        java.io.InputStream inputStream18 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray19 = new byte[] {};
        int int20 = org.apache.commons.io.IOUtils.length(byteArray19);
        int int21 = org.apache.commons.io.IOUtils.read(inputStream18, byteArray19);
        byte[] byteArray22 = org.apache.commons.io.IOUtils.toByteArray(inputStream18);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer23 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream18, iOExceptionConsumer23);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream18);
        java.io.BufferedInputStream bufferedInputStream27 = org.apache.commons.io.IOUtils.buffer(inputStream18, (int) (byte) 10);
        java.io.InputStream inputStream29 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream18, (int) (byte) 1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer30 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream18, iOExceptionConsumer30);
        java.io.OutputStream outputStream32 = null;
        java.io.InputStream inputStream34 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray35 = new byte[] {};
        int int36 = org.apache.commons.io.IOUtils.length(byteArray35);
        int int37 = org.apache.commons.io.IOUtils.read(inputStream34, byteArray35);
        byte[] byteArray38 = org.apache.commons.io.IOUtils.toByteArray(inputStream34);
        java.io.InputStream inputStream40 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray41 = new byte[] {};
        int int42 = org.apache.commons.io.IOUtils.length(byteArray41);
        int int43 = org.apache.commons.io.IOUtils.read(inputStream40, byteArray41);
        byte[] byteArray44 = org.apache.commons.io.IOUtils.toByteArray(inputStream40);
        int int45 = org.apache.commons.io.IOUtils.length(byteArray44);
        org.apache.commons.io.IOUtils.readFully(inputStream34, byteArray44);
        long long47 = org.apache.commons.io.IOUtils.copyLarge(inputStream18, outputStream32, byteArray44);
        java.io.InputStream inputStream49 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream50 = null;
        java.io.InputStream inputStream53 = null;
        byte[] byteArray55 = org.apache.commons.io.IOUtils.toByteArray("");
        int int56 = org.apache.commons.io.IOUtils.read(inputStream53, byteArray55);
        long long57 = org.apache.commons.io.IOUtils.copyLarge(inputStream49, outputStream50, 0L, 0L, byteArray55);
        java.nio.charset.Charset charset58 = null;
        java.util.List<java.lang.String> strList59 = org.apache.commons.io.IOUtils.readLines(inputStream49, charset58);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream49);
        java.nio.charset.Charset charset61 = null;
        java.lang.String str62 = org.apache.commons.io.IOUtils.toString(inputStream49, charset61);
        java.io.Writer writer63 = null;
        org.apache.commons.io.IOUtils.copy(inputStream49, writer63);
        byte[] byteArray65 = org.apache.commons.io.IOUtils.toByteArray(inputStream49);
        int int66 = org.apache.commons.io.IOUtils.read(inputStream18, byteArray65);
        org.apache.commons.io.IOUtils.readFully(inputStream12, byteArray65);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.String> strList69 = org.apache.commons.io.IOUtils.readLines(inputStream12, "\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ?");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream10);
        org.junit.Assert.assertNotNull(inputStream12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(bufferedInputStream16);
        org.junit.Assert.assertNotNull(inputStream18);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream27);
        org.junit.Assert.assertNotNull(inputStream29);
        org.junit.Assert.assertNotNull(inputStream34);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertNotNull(inputStream40);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertNotNull(inputStream49);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertNotNull(strList59);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
    }

    @Test
    public void test1613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1613");
        java.io.Reader reader0 = null;
        java.io.InputStream inputStream2 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray3 = new byte[] {};
        int int4 = org.apache.commons.io.IOUtils.length(byteArray3);
        int int5 = org.apache.commons.io.IOUtils.read(inputStream2, byteArray3);
        byte[] byteArray6 = org.apache.commons.io.IOUtils.toByteArray(inputStream2);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer7 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream2, iOExceptionConsumer7);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream2);
        java.io.BufferedInputStream bufferedInputStream11 = org.apache.commons.io.IOUtils.buffer(inputStream2, (int) (byte) 10);
        java.io.InputStream inputStream13 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream2, (int) (byte) 1);
        java.nio.charset.Charset charset14 = null;
        char[] charArray15 = org.apache.commons.io.IOUtils.toCharArray(inputStream2, charset14);
        int int16 = org.apache.commons.io.IOUtils.read(reader0, charArray15);
        int int17 = org.apache.commons.io.IOUtils.length(charArray15);
        java.io.OutputStream outputStream18 = null;
        java.nio.charset.Charset charset19 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(charArray15, outputStream18, charset19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.OutputStream.write(byte[])\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream11);
        org.junit.Assert.assertNotNull(inputStream13);
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test1614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1614");
        java.io.Closeable closeable0 = null;
        java.io.Closeable[] closeableArray1 = new java.io.Closeable[] { closeable0 };
        org.apache.commons.io.IOUtils.closeQuietly(closeableArray1);
        org.apache.commons.io.IOUtils.closeQuietly(closeableArray1);
        org.apache.commons.io.IOUtils.closeQuietly(closeableArray1);
        int int5 = org.apache.commons.io.IOUtils.length((java.lang.Object[]) closeableArray1);
        int int6 = org.apache.commons.io.IOUtils.length((java.lang.Object[]) closeableArray1);
        org.junit.Assert.assertNotNull(closeableArray1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
    }

    @Test
    public void test1615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1615");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        java.io.Writer writer10 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer10);
        java.util.List<java.lang.String> strList12 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.InputStream inputStream14 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, 4);
        java.io.BufferedInputStream bufferedInputStream15 = org.apache.commons.io.IOUtils.buffer(inputStream1);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str17 = org.apache.commons.io.IOUtils.toString((java.io.InputStream) bufferedInputStream15, "\r\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ??");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(strList12);
        org.junit.Assert.assertNotNull(inputStream14);
        org.junit.Assert.assertNotNull(bufferedInputStream15);
    }

    @Test
    public void test1616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1616");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream5 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray("");
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray10);
        long long12 = org.apache.commons.io.IOUtils.copyLarge(inputStream4, outputStream5, 0L, 0L, byteArray10);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, byteArray10);
        java.io.BufferedInputStream bufferedInputStream15 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.nio.charset.Charset charset16 = null;
        java.util.List<java.lang.String> strList17 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset16);
        java.io.OutputStream outputStream18 = null;
        long long21 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream18, 0L, (long) 0);
        java.io.BufferedInputStream bufferedInputStream22 = org.apache.commons.io.IOUtils.buffer(inputStream1);
        java.io.BufferedInputStream bufferedInputStream23 = org.apache.commons.io.IOUtils.buffer(inputStream1);
        java.io.OutputStream outputStream24 = null;
        java.io.InputStream inputStream26 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray27 = org.apache.commons.io.IOUtils.toByteArray(inputStream26);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream26);
        java.util.List<java.lang.String> strList29 = org.apache.commons.io.IOUtils.readLines(inputStream26);
        java.io.OutputStream outputStream30 = null;
        long long31 = org.apache.commons.io.IOUtils.copyLarge(inputStream26, outputStream30);
        java.io.Writer writer32 = null;
        org.apache.commons.io.IOUtils.copy(inputStream26, writer32);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream26);
        java.io.InputStream inputStream36 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray37 = new byte[] {};
        int int38 = org.apache.commons.io.IOUtils.length(byteArray37);
        int int39 = org.apache.commons.io.IOUtils.read(inputStream36, byteArray37);
        byte[] byteArray40 = org.apache.commons.io.IOUtils.toByteArray(inputStream36);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer41 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream36, iOExceptionConsumer41);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream36);
        java.io.BufferedInputStream bufferedInputStream45 = org.apache.commons.io.IOUtils.buffer(inputStream36, (int) (byte) 10);
        java.io.InputStream inputStream47 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream36, (int) (byte) 1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer48 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream36, iOExceptionConsumer48);
        java.io.OutputStream outputStream50 = null;
        java.io.InputStream inputStream52 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray53 = new byte[] {};
        int int54 = org.apache.commons.io.IOUtils.length(byteArray53);
        int int55 = org.apache.commons.io.IOUtils.read(inputStream52, byteArray53);
        byte[] byteArray56 = org.apache.commons.io.IOUtils.toByteArray(inputStream52);
        java.io.InputStream inputStream58 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray59 = new byte[] {};
        int int60 = org.apache.commons.io.IOUtils.length(byteArray59);
        int int61 = org.apache.commons.io.IOUtils.read(inputStream58, byteArray59);
        byte[] byteArray62 = org.apache.commons.io.IOUtils.toByteArray(inputStream58);
        int int63 = org.apache.commons.io.IOUtils.length(byteArray62);
        org.apache.commons.io.IOUtils.readFully(inputStream52, byteArray62);
        long long65 = org.apache.commons.io.IOUtils.copyLarge(inputStream36, outputStream50, byteArray62);
        boolean boolean66 = org.apache.commons.io.IOUtils.contentEquals(inputStream26, inputStream36);
        java.io.BufferedInputStream bufferedInputStream68 = org.apache.commons.io.IOUtils.buffer(inputStream26, 5);
        java.io.InputStream inputStream70 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream71 = null;
        java.io.InputStream inputStream74 = null;
        byte[] byteArray76 = org.apache.commons.io.IOUtils.toByteArray("");
        int int77 = org.apache.commons.io.IOUtils.read(inputStream74, byteArray76);
        long long78 = org.apache.commons.io.IOUtils.copyLarge(inputStream70, outputStream71, 0L, 0L, byteArray76);
        java.nio.charset.Charset charset79 = null;
        java.util.List<java.lang.String> strList80 = org.apache.commons.io.IOUtils.readLines(inputStream70, charset79);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream70);
        java.nio.charset.Charset charset82 = null;
        java.lang.String str83 = org.apache.commons.io.IOUtils.toString(inputStream70, charset82);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer84 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream70, iOExceptionConsumer84);
        boolean boolean86 = org.apache.commons.io.IOUtils.contentEquals((java.io.InputStream) bufferedInputStream68, inputStream70);
        byte[] byteArray88 = org.apache.commons.io.IOUtils.toByteArray(inputStream70, 0);
        long long89 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream24, byteArray88);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream15);
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream22);
        org.junit.Assert.assertNotNull(bufferedInputStream23);
        org.junit.Assert.assertNotNull(inputStream26);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertNotNull(strList29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertNotNull(inputStream36);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream45);
        org.junit.Assert.assertNotNull(inputStream47);
        org.junit.Assert.assertNotNull(inputStream52);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[]");
        org.junit.Assert.assertNotNull(inputStream58);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 0L + "'", long65 == 0L);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(bufferedInputStream68);
        org.junit.Assert.assertNotNull(inputStream70);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 0L + "'", long78 == 0L);
        org.junit.Assert.assertNotNull(strList80);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(byteArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[]");
        org.junit.Assert.assertTrue("'" + long89 + "' != '" + 0L + "'", long89 == 0L);
    }

    @Test
    public void test1617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1617");
        java.lang.Object[] objArray0 = null;
        int int1 = org.apache.commons.io.IOUtils.length(objArray0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
    }

    @Test
    public void test1618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1618");
        java.io.Reader reader0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.BufferedReader bufferedReader2 = org.apache.commons.io.IOUtils.toBufferedReader(reader0, (int) '\\');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1619");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.util.List<java.lang.String> strList4 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.BufferedInputStream bufferedInputStream5 = org.apache.commons.io.IOUtils.buffer(inputStream1);
        java.io.OutputStream outputStream6 = null;
        long long7 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream6);
        java.util.List<java.lang.String> strList8 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.InputStream inputStream10 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream11 = null;
        java.io.InputStream inputStream14 = null;
        byte[] byteArray16 = org.apache.commons.io.IOUtils.toByteArray("");
        int int17 = org.apache.commons.io.IOUtils.read(inputStream14, byteArray16);
        long long18 = org.apache.commons.io.IOUtils.copyLarge(inputStream10, outputStream11, 0L, 0L, byteArray16);
        java.io.OutputStream outputStream19 = null;
        long long22 = org.apache.commons.io.IOUtils.copyLarge(inputStream10, outputStream19, (long) (short) 0, (-1L));
        java.lang.String str23 = org.apache.commons.io.IOUtils.toString(inputStream10);
        org.apache.commons.io.IOUtils.closeQuietly(inputStream10);
        org.apache.commons.io.function.IOConsumer<java.io.IOException> iOExceptionIOConsumer25 = null;
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream10, iOExceptionIOConsumer25);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream10);
        boolean boolean28 = org.apache.commons.io.IOUtils.contentEquals(inputStream1, inputStream10);
        // The following exception was thrown during execution in test generation
        try {
            java.io.InputStream inputStream30 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Negative initial size: -1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertNotNull(bufferedInputStream5);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertNotNull(inputStream10);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
    }

    @Test
    public void test1620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1620");
        java.io.Reader reader0 = null;
        java.io.Reader reader1 = null;
        java.io.Reader reader2 = null;
        java.io.Writer writer3 = null;
        char[] charArray6 = new char[] {};
        int int7 = org.apache.commons.io.IOUtils.length(charArray6);
        java.io.Writer writer8 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray6, writer8);
        java.io.Writer writer10 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray6, writer10);
        long long12 = org.apache.commons.io.IOUtils.copyLarge(reader2, writer3, 0L, (long) (byte) 100, charArray6);
        int int13 = org.apache.commons.io.IOUtils.read(reader1, charArray6);
        int int14 = org.apache.commons.io.IOUtils.length(charArray6);
        java.io.Writer writer15 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray6, writer15);
        org.apache.commons.io.IOUtils.readFully(reader0, charArray6);
        int int18 = org.apache.commons.io.IOUtils.length(charArray6);
        java.io.OutputStream outputStream19 = null;
        java.nio.charset.Charset charset20 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(charArray6, outputStream19, charset20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.OutputStream.write(byte[])\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test1621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1621");
        java.io.Reader reader0 = null;
        java.io.Writer writer1 = null;
        java.io.Reader reader2 = null;
        java.io.Writer writer3 = null;
        char[] charArray6 = new char[] {};
        long long7 = org.apache.commons.io.IOUtils.copyLarge(reader2, writer3, (long) (byte) 0, (long) 1, charArray6);
        // The following exception was thrown during execution in test generation
        try {
            long long8 = org.apache.commons.io.IOUtils.copyLarge(reader0, writer1, charArray6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[])\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[]");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
    }

    @Test
    public void test1622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1622");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.io.InputStream inputStream7 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, (int) (byte) 0);
        byte[] byteArray9 = org.apache.commons.io.IOUtils.toByteArray("hi!");
        int int10 = org.apache.commons.io.IOUtils.read(inputStream7, byteArray9);
        java.io.Writer writer11 = null;
        java.nio.charset.Charset charset12 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(byteArray9, writer11, charset12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Writer.write(String)\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(inputStream7);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[104, 105, 33]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test1623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1623");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly(inputStream1);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.BufferedInputStream bufferedInputStream12 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) '#');
        java.nio.charset.Charset charset13 = null;
        java.util.List<java.lang.String> strList14 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset13);
        java.io.OutputStream outputStream15 = null;
        long long16 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream15);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream12);
        org.junit.Assert.assertNotNull(strList14);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
    }

    @Test
    public void test1624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1624");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.BufferedInputStream bufferedInputStream10 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.io.InputStream inputStream12 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, (int) (byte) 1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer13 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer13);
        java.io.OutputStream outputStream15 = null;
        java.io.InputStream inputStream17 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray18 = new byte[] {};
        int int19 = org.apache.commons.io.IOUtils.length(byteArray18);
        int int20 = org.apache.commons.io.IOUtils.read(inputStream17, byteArray18);
        byte[] byteArray21 = org.apache.commons.io.IOUtils.toByteArray(inputStream17);
        java.io.InputStream inputStream23 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray24 = new byte[] {};
        int int25 = org.apache.commons.io.IOUtils.length(byteArray24);
        int int26 = org.apache.commons.io.IOUtils.read(inputStream23, byteArray24);
        byte[] byteArray27 = org.apache.commons.io.IOUtils.toByteArray(inputStream23);
        int int28 = org.apache.commons.io.IOUtils.length(byteArray27);
        org.apache.commons.io.IOUtils.readFully(inputStream17, byteArray27);
        long long30 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream15, byteArray27);
        java.io.InputStream inputStream32 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream33 = null;
        java.io.InputStream inputStream36 = null;
        byte[] byteArray38 = org.apache.commons.io.IOUtils.toByteArray("");
        int int39 = org.apache.commons.io.IOUtils.read(inputStream36, byteArray38);
        long long40 = org.apache.commons.io.IOUtils.copyLarge(inputStream32, outputStream33, 0L, 0L, byteArray38);
        java.nio.charset.Charset charset41 = null;
        java.util.List<java.lang.String> strList42 = org.apache.commons.io.IOUtils.readLines(inputStream32, charset41);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream32);
        java.nio.charset.Charset charset44 = null;
        java.lang.String str45 = org.apache.commons.io.IOUtils.toString(inputStream32, charset44);
        java.io.Writer writer46 = null;
        org.apache.commons.io.IOUtils.copy(inputStream32, writer46);
        byte[] byteArray48 = org.apache.commons.io.IOUtils.toByteArray(inputStream32);
        int int49 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray48);
        java.io.Writer writer50 = null;
        java.nio.charset.Charset charset51 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer50, charset51);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer53 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer53);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream10);
        org.junit.Assert.assertNotNull(inputStream12);
        org.junit.Assert.assertNotNull(inputStream17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertNotNull(inputStream23);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(inputStream32);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertNotNull(strList42);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
    }

    @Test
    public void test1625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1625");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.util.List<java.lang.String> strList4 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.OutputStream outputStream5 = null;
        long long6 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream5);
        java.io.Writer writer7 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer7);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream11 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray12 = new byte[] {};
        int int13 = org.apache.commons.io.IOUtils.length(byteArray12);
        int int14 = org.apache.commons.io.IOUtils.read(inputStream11, byteArray12);
        byte[] byteArray15 = org.apache.commons.io.IOUtils.toByteArray(inputStream11);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer16 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream11, iOExceptionConsumer16);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream11);
        java.io.BufferedInputStream bufferedInputStream20 = org.apache.commons.io.IOUtils.buffer(inputStream11, (int) (byte) 10);
        java.io.InputStream inputStream22 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream11, (int) (byte) 1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer23 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream11, iOExceptionConsumer23);
        java.io.OutputStream outputStream25 = null;
        java.io.InputStream inputStream27 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray28 = new byte[] {};
        int int29 = org.apache.commons.io.IOUtils.length(byteArray28);
        int int30 = org.apache.commons.io.IOUtils.read(inputStream27, byteArray28);
        byte[] byteArray31 = org.apache.commons.io.IOUtils.toByteArray(inputStream27);
        java.io.InputStream inputStream33 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray34 = new byte[] {};
        int int35 = org.apache.commons.io.IOUtils.length(byteArray34);
        int int36 = org.apache.commons.io.IOUtils.read(inputStream33, byteArray34);
        byte[] byteArray37 = org.apache.commons.io.IOUtils.toByteArray(inputStream33);
        int int38 = org.apache.commons.io.IOUtils.length(byteArray37);
        org.apache.commons.io.IOUtils.readFully(inputStream27, byteArray37);
        long long40 = org.apache.commons.io.IOUtils.copyLarge(inputStream11, outputStream25, byteArray37);
        boolean boolean41 = org.apache.commons.io.IOUtils.contentEquals(inputStream1, inputStream11);
        java.io.BufferedInputStream bufferedInputStream43 = org.apache.commons.io.IOUtils.buffer(inputStream1, 5);
        java.io.InputStream inputStream45 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream46 = null;
        java.io.InputStream inputStream49 = null;
        byte[] byteArray51 = org.apache.commons.io.IOUtils.toByteArray("");
        int int52 = org.apache.commons.io.IOUtils.read(inputStream49, byteArray51);
        long long53 = org.apache.commons.io.IOUtils.copyLarge(inputStream45, outputStream46, 0L, 0L, byteArray51);
        java.nio.charset.Charset charset54 = null;
        java.util.List<java.lang.String> strList55 = org.apache.commons.io.IOUtils.readLines(inputStream45, charset54);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream45);
        java.nio.charset.Charset charset57 = null;
        java.lang.String str58 = org.apache.commons.io.IOUtils.toString(inputStream45, charset57);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer59 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream45, iOExceptionConsumer59);
        boolean boolean61 = org.apache.commons.io.IOUtils.contentEquals((java.io.InputStream) bufferedInputStream43, inputStream45);
        byte[] byteArray63 = org.apache.commons.io.IOUtils.toByteArray(inputStream45, 0);
        java.nio.charset.Charset charset64 = null;
        char[] charArray65 = org.apache.commons.io.IOUtils.toCharArray(inputStream45, charset64);
        java.io.OutputStream outputStream66 = null;
        java.io.InputStream inputStream70 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray71 = new byte[] {};
        int int72 = org.apache.commons.io.IOUtils.length(byteArray71);
        int int73 = org.apache.commons.io.IOUtils.read(inputStream70, byteArray71);
        byte[] byteArray74 = org.apache.commons.io.IOUtils.toByteArray(inputStream70);
        byte[] byteArray76 = org.apache.commons.io.IOUtils.toByteArray(inputStream70, (int) (short) 0);
        long long78 = org.apache.commons.io.IOUtils.skip(inputStream70, 100L);
        java.io.InputStream inputStream79 = null;
        java.io.InputStream inputStream80 = null;
        java.io.OutputStream outputStream81 = null;
        byte[] byteArray84 = new byte[] {};
        int int85 = org.apache.commons.io.IOUtils.length(byteArray84);
        java.io.OutputStream outputStream86 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray84, outputStream86);
        long long88 = org.apache.commons.io.IOUtils.copyLarge(inputStream80, outputStream81, 0L, (long) (byte) -1, byteArray84);
        java.io.OutputStream outputStream89 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray84, outputStream89);
        org.apache.commons.io.IOUtils.readFully(inputStream79, byteArray84);
        int int92 = org.apache.commons.io.IOUtils.read(inputStream70, byteArray84);
        java.io.InputStream inputStream93 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream70);
        byte[] byteArray95 = org.apache.commons.io.IOUtils.readFully(inputStream93, 0);
        long long96 = org.apache.commons.io.IOUtils.copyLarge(inputStream45, outputStream66, (-1L), 0L, byteArray95);
        java.io.OutputStream outputStream97 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(byteArray95, outputStream97);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.OutputStream.write(byte[])\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(inputStream11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream20);
        org.junit.Assert.assertNotNull(inputStream22);
        org.junit.Assert.assertNotNull(inputStream27);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(inputStream33);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(bufferedInputStream43);
        org.junit.Assert.assertNotNull(inputStream45);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertNotNull(strList55);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[]");
        org.junit.Assert.assertNotNull(charArray65);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray65), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray65), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray65), "[]");
        org.junit.Assert.assertNotNull(inputStream70);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 0L + "'", long78 == 0L);
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + long88 + "' != '" + 0L + "'", long88 == 0L);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertNotNull(inputStream93);
        org.junit.Assert.assertNotNull(byteArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray95), "[]");
        org.junit.Assert.assertTrue("'" + long96 + "' != '" + 0L + "'", long96 == 0L);
    }

    @Test
    public void test1626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1626");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        java.nio.charset.Charset charset10 = null;
        java.util.List<java.lang.String> strList11 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset10);
        java.io.InputStream inputStream13 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream14 = null;
        java.io.InputStream inputStream17 = null;
        byte[] byteArray19 = org.apache.commons.io.IOUtils.toByteArray("");
        int int20 = org.apache.commons.io.IOUtils.read(inputStream17, byteArray19);
        long long21 = org.apache.commons.io.IOUtils.copyLarge(inputStream13, outputStream14, 0L, 0L, byteArray19);
        java.nio.charset.Charset charset22 = null;
        java.util.List<java.lang.String> strList23 = org.apache.commons.io.IOUtils.readLines(inputStream13, charset22);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream13);
        boolean boolean25 = org.apache.commons.io.IOUtils.contentEquals(inputStream1, inputStream13);
        java.io.OutputStream outputStream26 = null;
        java.io.InputStream inputStream28 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream29 = null;
        java.io.InputStream inputStream32 = null;
        byte[] byteArray34 = org.apache.commons.io.IOUtils.toByteArray("");
        int int35 = org.apache.commons.io.IOUtils.read(inputStream32, byteArray34);
        long long36 = org.apache.commons.io.IOUtils.copyLarge(inputStream28, outputStream29, 0L, 0L, byteArray34);
        long long37 = org.apache.commons.io.IOUtils.copyLarge(inputStream13, outputStream26, byteArray34);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str39 = org.apache.commons.io.IOUtils.toString(byteArray34, "");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertNotNull(inputStream13);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(strList23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(inputStream28);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
    }

    @Test
    public void test1627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1627");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        java.nio.charset.Charset charset10 = null;
        java.util.List<java.lang.String> strList11 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset10);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.BufferedInputStream bufferedInputStream13 = org.apache.commons.io.IOUtils.buffer(inputStream1);
        java.nio.charset.Charset charset14 = null;
        char[] charArray15 = org.apache.commons.io.IOUtils.toCharArray(inputStream1, charset14);
        char[] charArray16 = org.apache.commons.io.IOUtils.toCharArray(inputStream1);
        java.io.OutputStream outputStream17 = null;
        java.nio.charset.Charset charset18 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(charArray16, outputStream17, charset18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.OutputStream.write(byte[])\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertNotNull(bufferedInputStream13);
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[]");
        org.junit.Assert.assertNotNull(charArray16);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray16), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray16), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray16), "[]");
    }

    @Test
    public void test1628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1628");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        java.io.OutputStream outputStream10 = null;
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream10, (long) (short) 0, (-1L));
        java.lang.String str14 = org.apache.commons.io.IOUtils.toString(inputStream1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.String> strList16 = org.apache.commons.io.IOUtils.readLines(inputStream1, "\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ?");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
    }

    @Test
    public void test1629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1629");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        org.apache.commons.io.IOUtils.closeQuietly(inputStream1);
        // The following exception was thrown during execution in test generation
        try {
            char[] charArray7 = org.apache.commons.io.IOUtils.toCharArray(inputStream1, "");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test1630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1630");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly(inputStream1);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.BufferedInputStream bufferedInputStream12 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) '#');
        java.nio.charset.Charset charset13 = null;
        java.util.List<java.lang.String> strList14 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset13);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray16 = org.apache.commons.io.IOUtils.readFully(inputStream1, (int) '\\');
            org.junit.Assert.fail("Expected exception of type java.io.EOFException; message: Length to read: 92 actual: 0");
        } catch (java.io.EOFException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream12);
        org.junit.Assert.assertNotNull(strList14);
    }

    @Test
    public void test1631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1631");
        java.io.Reader reader0 = null;
        java.io.Writer writer1 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long4 = org.apache.commons.io.IOUtils.copyLarge(reader0, writer1, (long) (short) 1, (long) 6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[], int, int)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1632");
        java.io.Reader reader0 = null;
        java.io.Writer writer1 = null;
        java.io.Reader reader4 = null;
        java.io.Reader reader5 = null;
        java.io.Reader reader6 = null;
        java.io.Writer writer7 = null;
        char[] charArray10 = new char[] {};
        int int11 = org.apache.commons.io.IOUtils.length(charArray10);
        java.io.Writer writer12 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray10, writer12);
        java.io.Writer writer14 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray10, writer14);
        long long16 = org.apache.commons.io.IOUtils.copyLarge(reader6, writer7, 0L, (long) (byte) 100, charArray10);
        int int17 = org.apache.commons.io.IOUtils.read(reader5, charArray10);
        int int18 = org.apache.commons.io.IOUtils.length(charArray10);
        int int19 = org.apache.commons.io.IOUtils.read(reader4, charArray10);
        long long20 = org.apache.commons.io.IOUtils.copyLarge(reader0, writer1, (long) (byte) -1, (long) 6, charArray10);
        int int21 = org.apache.commons.io.IOUtils.length(charArray10);
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
    }

    @Test
    public void test1633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1633");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream3 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1);
        java.io.Writer writer4 = null;
        java.nio.charset.Charset charset5 = null;
        org.apache.commons.io.IOUtils.copy(inputStream3, writer4, charset5);
        org.apache.commons.io.function.IOConsumer<java.io.IOException> iOExceptionIOConsumer7 = null;
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream3, iOExceptionIOConsumer7);
        char[] charArray9 = org.apache.commons.io.IOUtils.toCharArray(inputStream3);
        java.io.Writer writer10 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(charArray9, writer10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Writer.write(char[])\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream3);
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[]");
    }

    @Test
    public void test1634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1634");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.BufferedInputStream bufferedInputStream10 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.io.InputStream inputStream12 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, (int) (byte) 1);
        java.io.OutputStream outputStream13 = null;
        int int14 = org.apache.commons.io.IOUtils.copy(inputStream12, outputStream13);
        java.io.BufferedInputStream bufferedInputStream16 = org.apache.commons.io.IOUtils.buffer(inputStream12, (int) (byte) 10);
        java.io.OutputStream outputStream17 = null;
        java.io.InputStream inputStream21 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray22 = org.apache.commons.io.IOUtils.toByteArray(inputStream21);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream21);
        java.util.List<java.lang.String> strList24 = org.apache.commons.io.IOUtils.readLines(inputStream21);
        java.io.OutputStream outputStream25 = null;
        long long26 = org.apache.commons.io.IOUtils.copyLarge(inputStream21, outputStream25);
        java.io.Writer writer27 = null;
        org.apache.commons.io.IOUtils.copy(inputStream21, writer27);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream21);
        java.io.InputStream inputStream31 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray32 = new byte[] {};
        int int33 = org.apache.commons.io.IOUtils.length(byteArray32);
        int int34 = org.apache.commons.io.IOUtils.read(inputStream31, byteArray32);
        byte[] byteArray35 = org.apache.commons.io.IOUtils.toByteArray(inputStream31);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer36 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream31, iOExceptionConsumer36);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream31);
        java.io.BufferedInputStream bufferedInputStream40 = org.apache.commons.io.IOUtils.buffer(inputStream31, (int) (byte) 10);
        java.io.InputStream inputStream42 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream31, (int) (byte) 1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer43 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream31, iOExceptionConsumer43);
        java.io.OutputStream outputStream45 = null;
        java.io.InputStream inputStream47 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray48 = new byte[] {};
        int int49 = org.apache.commons.io.IOUtils.length(byteArray48);
        int int50 = org.apache.commons.io.IOUtils.read(inputStream47, byteArray48);
        byte[] byteArray51 = org.apache.commons.io.IOUtils.toByteArray(inputStream47);
        java.io.InputStream inputStream53 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray54 = new byte[] {};
        int int55 = org.apache.commons.io.IOUtils.length(byteArray54);
        int int56 = org.apache.commons.io.IOUtils.read(inputStream53, byteArray54);
        byte[] byteArray57 = org.apache.commons.io.IOUtils.toByteArray(inputStream53);
        int int58 = org.apache.commons.io.IOUtils.length(byteArray57);
        org.apache.commons.io.IOUtils.readFully(inputStream47, byteArray57);
        long long60 = org.apache.commons.io.IOUtils.copyLarge(inputStream31, outputStream45, byteArray57);
        boolean boolean61 = org.apache.commons.io.IOUtils.contentEquals(inputStream21, inputStream31);
        java.io.OutputStream outputStream62 = null;
        java.io.InputStream inputStream64 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray65 = new byte[] {};
        int int66 = org.apache.commons.io.IOUtils.length(byteArray65);
        int int67 = org.apache.commons.io.IOUtils.read(inputStream64, byteArray65);
        byte[] byteArray68 = org.apache.commons.io.IOUtils.toByteArray(inputStream64);
        java.io.InputStream inputStream70 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray71 = new byte[] {};
        int int72 = org.apache.commons.io.IOUtils.length(byteArray71);
        int int73 = org.apache.commons.io.IOUtils.read(inputStream70, byteArray71);
        byte[] byteArray74 = org.apache.commons.io.IOUtils.toByteArray(inputStream70);
        int int75 = org.apache.commons.io.IOUtils.length(byteArray74);
        org.apache.commons.io.IOUtils.readFully(inputStream64, byteArray74);
        java.io.InputStream inputStream77 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream64);
        java.io.InputStream inputStream79 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray80 = new byte[] {};
        int int81 = org.apache.commons.io.IOUtils.length(byteArray80);
        int int82 = org.apache.commons.io.IOUtils.read(inputStream79, byteArray80);
        org.apache.commons.io.IOUtils.closeQuietly(inputStream79);
        java.io.InputStream inputStream85 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray86 = new byte[] {};
        int int87 = org.apache.commons.io.IOUtils.length(byteArray86);
        int int88 = org.apache.commons.io.IOUtils.read(inputStream85, byteArray86);
        java.lang.String str89 = org.apache.commons.io.IOUtils.toString(byteArray86);
        int int92 = org.apache.commons.io.IOUtils.read(inputStream79, byteArray86, (int) (byte) 10, (int) (short) 0);
        java.lang.String str93 = org.apache.commons.io.IOUtils.toString(byteArray86);
        int int94 = org.apache.commons.io.IOUtils.length(byteArray86);
        int int95 = org.apache.commons.io.IOUtils.read(inputStream64, byteArray86);
        long long96 = org.apache.commons.io.IOUtils.copyLarge(inputStream21, outputStream62, byteArray86);
        // The following exception was thrown during execution in test generation
        try {
            long long97 = org.apache.commons.io.IOUtils.copyLarge((java.io.InputStream) bufferedInputStream16, outputStream17, (long) '4', (long) (short) 0, byteArray86);
            org.junit.Assert.fail("Expected exception of type java.io.EOFException; message: Bytes to skip: 52 actual: 0");
        } catch (java.io.EOFException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream10);
        org.junit.Assert.assertNotNull(inputStream12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(bufferedInputStream16);
        org.junit.Assert.assertNotNull(inputStream21);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertNotNull(strList24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(inputStream31);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream40);
        org.junit.Assert.assertNotNull(inputStream42);
        org.junit.Assert.assertNotNull(inputStream47);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
        org.junit.Assert.assertNotNull(inputStream53);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 0L + "'", long60 == 0L);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(inputStream64);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[]");
        org.junit.Assert.assertNotNull(inputStream70);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(inputStream77);
        org.junit.Assert.assertNotNull(inputStream79);
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertNotNull(inputStream85);
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[]");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "" + "'", str89, "");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "" + "'", str93, "");
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 0 + "'", int95 == 0);
        org.junit.Assert.assertTrue("'" + long96 + "' != '" + 0L + "'", long96 == 0L);
    }

    @Test
    public void test1635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1635");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        org.apache.commons.io.IOUtils.closeQuietly(inputStream1);
        java.io.InputStream inputStream7 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray8 = new byte[] {};
        int int9 = org.apache.commons.io.IOUtils.length(byteArray8);
        int int10 = org.apache.commons.io.IOUtils.read(inputStream7, byteArray8);
        java.lang.String str11 = org.apache.commons.io.IOUtils.toString(byteArray8);
        int int14 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray8, (int) (byte) 10, (int) (short) 0);
        java.io.OutputStream outputStream15 = null;
        long long17 = org.apache.commons.io.IOUtils.copy(inputStream1, outputStream15, (int) (byte) 100);
        java.io.InputStream inputStream18 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray20 = org.apache.commons.io.IOUtils.readFully(inputStream1, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.io.EOFException; message: Length to read: 10 actual: 0");
        } catch (java.io.EOFException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(inputStream7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(inputStream18);
    }

    @Test
    public void test1636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1636");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.nio.charset.Charset charset6 = null;
        java.util.List<java.lang.String> strList7 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset6);
        java.io.Writer writer8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.copy(inputStream1, writer8, "\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ?");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(strList7);
    }

    @Test
    public void test1637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1637");
        char[] charArray0 = null;
        java.io.OutputStream outputStream1 = null;
        java.nio.charset.Charset charset2 = null;
        org.apache.commons.io.IOUtils.write(charArray0, outputStream1, charset2);
    }

    @Test
    public void test1638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1638");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        java.nio.charset.Charset charset10 = null;
        java.util.List<java.lang.String> strList11 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset10);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        char[] charArray13 = org.apache.commons.io.IOUtils.toCharArray(inputStream1);
        java.io.OutputStream outputStream14 = null;
        java.io.InputStream inputStream18 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream19 = null;
        java.io.InputStream inputStream22 = null;
        byte[] byteArray24 = org.apache.commons.io.IOUtils.toByteArray("");
        int int25 = org.apache.commons.io.IOUtils.read(inputStream22, byteArray24);
        long long26 = org.apache.commons.io.IOUtils.copyLarge(inputStream18, outputStream19, 0L, 0L, byteArray24);
        java.io.OutputStream outputStream27 = null;
        long long30 = org.apache.commons.io.IOUtils.copyLarge(inputStream18, outputStream27, (long) (short) 0, (-1L));
        char[] charArray31 = org.apache.commons.io.IOUtils.toCharArray(inputStream18);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream18);
        java.io.InputStream inputStream34 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray35 = new byte[] {};
        int int36 = org.apache.commons.io.IOUtils.length(byteArray35);
        int int37 = org.apache.commons.io.IOUtils.read(inputStream34, byteArray35);
        byte[] byteArray38 = org.apache.commons.io.IOUtils.toByteArray(inputStream34);
        byte[] byteArray40 = org.apache.commons.io.IOUtils.toByteArray(inputStream34, (int) (short) 0);
        java.io.BufferedInputStream bufferedInputStream41 = org.apache.commons.io.IOUtils.buffer(inputStream34);
        byte[] byteArray42 = org.apache.commons.io.IOUtils.toByteArray((java.io.InputStream) bufferedInputStream41);
        int int43 = org.apache.commons.io.IOUtils.read(inputStream18, byteArray42);
        int int44 = org.apache.commons.io.IOUtils.length(byteArray42);
        // The following exception was thrown during execution in test generation
        try {
            long long45 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream14, (long) (byte) 1, (long) 10, byteArray42);
            org.junit.Assert.fail("Expected exception of type java.io.EOFException; message: Bytes to skip: 1 actual: 0");
        } catch (java.io.EOFException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[]");
        org.junit.Assert.assertNotNull(inputStream18);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray31), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray31), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray31), "[]");
        org.junit.Assert.assertNotNull(inputStream34);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream41);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
    }

    @Test
    public void test1639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1639");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.BufferedInputStream bufferedInputStream10 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.io.InputStream inputStream12 = org.apache.commons.io.IOUtils.toBufferedInputStream((java.io.InputStream) bufferedInputStream10, (int) '#');
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream12);
        java.util.List<java.lang.String> strList14 = org.apache.commons.io.IOUtils.readLines(inputStream12);
        java.io.OutputStream outputStream16 = null;
        java.nio.charset.Charset charset17 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList14, "\r\n", outputStream16, charset17);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream10);
        org.junit.Assert.assertNotNull(inputStream12);
        org.junit.Assert.assertNotNull(strList14);
    }

    @Test
    public void test1640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1640");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        java.io.Writer writer10 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer10);
        java.util.List<java.lang.String> strList12 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.nio.charset.Charset charset13 = null;
        org.apache.commons.io.LineIterator lineIterator14 = org.apache.commons.io.IOUtils.lineIterator(inputStream1, charset13);
        java.lang.String str15 = org.apache.commons.io.IOUtils.toString(inputStream1);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(strList12);
        org.junit.Assert.assertNotNull(lineIterator14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
    }

    @Test
    public void test1641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1641");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream5 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray("");
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray10);
        long long12 = org.apache.commons.io.IOUtils.copyLarge(inputStream4, outputStream5, 0L, 0L, byteArray10);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, byteArray10);
        java.io.BufferedInputStream bufferedInputStream15 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.nio.charset.Charset charset16 = null;
        java.util.List<java.lang.String> strList17 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset16);
        java.io.OutputStream outputStream18 = null;
        long long21 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream18, 0L, (long) 0);
        java.nio.charset.Charset charset22 = null;
        char[] charArray23 = org.apache.commons.io.IOUtils.toCharArray(inputStream1, charset22);
        java.io.Writer writer24 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray23, writer24);
        java.lang.Class<?> wildcardClass26 = charArray23.getClass();
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream15);
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[]");
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test1642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1642");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.util.List<java.lang.String> strList4 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.OutputStream outputStream5 = null;
        long long6 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream5);
        java.io.OutputStream outputStream7 = null;
        java.io.InputStream inputStream11 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray12 = new byte[] {};
        int int13 = org.apache.commons.io.IOUtils.length(byteArray12);
        int int14 = org.apache.commons.io.IOUtils.read(inputStream11, byteArray12);
        long long15 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream7, (-1L), 1L, byteArray12);
        java.io.BufferedInputStream bufferedInputStream16 = org.apache.commons.io.IOUtils.buffer(inputStream1);
        // The following exception was thrown during execution in test generation
        try {
            char[] charArray18 = org.apache.commons.io.IOUtils.toCharArray((java.io.InputStream) bufferedInputStream16, "hi!");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: hi!");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(inputStream11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream16);
    }

    @Test
    public void test1643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1643");
        java.io.Reader reader0 = null;
        char[] charArray2 = new char[] { 'a' };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.readFully(reader0, charArray2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[], int, int)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray2), "a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray2), "a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray2), "[a]");
    }

    @Test
    public void test1644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1644");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream5 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray("");
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray10);
        long long12 = org.apache.commons.io.IOUtils.copyLarge(inputStream4, outputStream5, 0L, 0L, byteArray10);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, byteArray10);
        java.io.BufferedInputStream bufferedInputStream15 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        org.apache.commons.io.IOUtils.closeQuietly(inputStream1);
        java.nio.charset.Charset charset17 = null;
        java.util.List<java.lang.String> strList18 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset17);
        java.io.OutputStream outputStream19 = null;
        int int20 = org.apache.commons.io.IOUtils.copy(inputStream1, outputStream19);
        java.io.OutputStream outputStream21 = null;
        java.io.InputStream inputStream23 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream24 = null;
        java.io.InputStream inputStream26 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream27 = null;
        java.io.InputStream inputStream30 = null;
        byte[] byteArray32 = org.apache.commons.io.IOUtils.toByteArray("");
        int int33 = org.apache.commons.io.IOUtils.read(inputStream30, byteArray32);
        long long34 = org.apache.commons.io.IOUtils.copyLarge(inputStream26, outputStream27, 0L, 0L, byteArray32);
        long long35 = org.apache.commons.io.IOUtils.copyLarge(inputStream23, outputStream24, byteArray32);
        java.io.BufferedInputStream bufferedInputStream37 = org.apache.commons.io.IOUtils.buffer(inputStream23, (int) (byte) 10);
        java.nio.charset.Charset charset38 = null;
        java.util.List<java.lang.String> strList39 = org.apache.commons.io.IOUtils.readLines(inputStream23, charset38);
        java.io.OutputStream outputStream40 = null;
        long long43 = org.apache.commons.io.IOUtils.copyLarge(inputStream23, outputStream40, 0L, (long) 0);
        java.nio.charset.Charset charset44 = null;
        char[] charArray45 = org.apache.commons.io.IOUtils.toCharArray(inputStream23, charset44);
        java.io.InputStream inputStream47 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream47);
        java.io.InputStream inputStream49 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream47);
        java.lang.String str50 = org.apache.commons.io.IOUtils.toString(inputStream47);
        java.io.InputStream inputStream51 = null;
        byte[] byteArray53 = org.apache.commons.io.IOUtils.toByteArray("");
        int int54 = org.apache.commons.io.IOUtils.read(inputStream51, byteArray53);
        org.apache.commons.io.IOUtils.readFully(inputStream47, byteArray53);
        int int56 = org.apache.commons.io.IOUtils.length(byteArray53);
        org.apache.commons.io.IOUtils.readFully(inputStream23, byteArray53);
        int int58 = org.apache.commons.io.IOUtils.length(byteArray53);
        long long59 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream21, byteArray53);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream15);
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(inputStream23);
        org.junit.Assert.assertNotNull(inputStream26);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream37);
        org.junit.Assert.assertNotNull(strList39);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertNotNull(charArray45);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray45), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray45), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray45), "[]");
        org.junit.Assert.assertNotNull(inputStream47);
        org.junit.Assert.assertNotNull(inputStream49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
    }

    @Test
    public void test1645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1645");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        java.io.OutputStream outputStream10 = null;
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream10, (long) (short) 0, (-1L));
        char[] charArray14 = org.apache.commons.io.IOUtils.toCharArray(inputStream1);
        long long16 = org.apache.commons.io.IOUtils.skip(inputStream1, (long) (byte) 1);
        org.apache.commons.io.function.IOConsumer<java.io.IOException> iOExceptionIOConsumer17 = null;
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1, iOExceptionIOConsumer17);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[]");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
    }

    @Test
    public void test1646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1646");
        java.io.Reader reader0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.BufferedReader bufferedReader2 = org.apache.commons.io.IOUtils.toBufferedReader(reader0, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1647");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        java.io.InputStream inputStream5 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1);
        java.nio.charset.Charset charset6 = null;
        org.apache.commons.io.LineIterator lineIterator7 = org.apache.commons.io.IOUtils.lineIterator(inputStream5, charset6);
        java.io.InputStream inputStream8 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream5);
        long long10 = org.apache.commons.io.IOUtils.skip(inputStream5, (long) 10);
        java.io.BufferedInputStream bufferedInputStream11 = org.apache.commons.io.IOUtils.buffer(inputStream5);
        java.io.OutputStream outputStream12 = null;
        java.io.InputStream inputStream14 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "hi!");
        java.io.InputStream inputStream16 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray17 = new byte[] {};
        int int18 = org.apache.commons.io.IOUtils.length(byteArray17);
        int int19 = org.apache.commons.io.IOUtils.read(inputStream16, byteArray17);
        byte[] byteArray20 = org.apache.commons.io.IOUtils.toByteArray(inputStream16);
        byte[] byteArray22 = org.apache.commons.io.IOUtils.toByteArray(inputStream16, (int) (short) 0);
        java.io.BufferedInputStream bufferedInputStream23 = org.apache.commons.io.IOUtils.buffer(inputStream16);
        byte[] byteArray24 = org.apache.commons.io.IOUtils.toByteArray((java.io.InputStream) bufferedInputStream23);
        int int27 = org.apache.commons.io.IOUtils.read(inputStream14, byteArray24, 0, 0);
        // The following exception was thrown during execution in test generation
        try {
            long long28 = org.apache.commons.io.IOUtils.copyLarge((java.io.InputStream) bufferedInputStream11, outputStream12, byteArray24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.OutputStream.write(byte[], int, int)\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(inputStream5);
        org.junit.Assert.assertNotNull(lineIterator7);
        org.junit.Assert.assertNotNull(inputStream8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream11);
        org.junit.Assert.assertNotNull(inputStream14);
        org.junit.Assert.assertNotNull(inputStream16);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream23);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
    }

    @Test
    public void test1648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1648");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream5 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray("");
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray10);
        long long12 = org.apache.commons.io.IOUtils.copyLarge(inputStream4, outputStream5, 0L, 0L, byteArray10);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, byteArray10);
        java.io.BufferedInputStream bufferedInputStream15 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.nio.charset.Charset charset16 = null;
        java.util.List<java.lang.String> strList17 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset16);
        java.io.OutputStream outputStream18 = null;
        long long21 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream18, 0L, (long) 0);
        java.io.BufferedInputStream bufferedInputStream22 = org.apache.commons.io.IOUtils.buffer(inputStream1);
        org.apache.commons.io.function.IOConsumer<java.io.IOException> iOExceptionIOConsumer23 = null;
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1, iOExceptionIOConsumer23);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray26 = org.apache.commons.io.IOUtils.toByteArray(inputStream1, (int) '\\');
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Unexpected read size. current: 0, expected: 92");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream15);
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream22);
    }

    @Test
    public void test1649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1649");
        java.io.Reader reader0 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long2 = org.apache.commons.io.IOUtils.skip(reader0, (long) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[], int, int)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1650");
        // The following exception was thrown during execution in test generation
        try {
            java.io.InputStream inputStream2 = org.apache.commons.io.IOUtils.toInputStream("\n", "\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ?");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1651");
        java.io.Reader reader0 = null;
        java.io.InputStream inputStream2 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray3 = new byte[] {};
        int int4 = org.apache.commons.io.IOUtils.length(byteArray3);
        int int5 = org.apache.commons.io.IOUtils.read(inputStream2, byteArray3);
        org.apache.commons.io.IOUtils.closeQuietly(inputStream2);
        java.io.InputStream inputStream8 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray9 = new byte[] {};
        int int10 = org.apache.commons.io.IOUtils.length(byteArray9);
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray9);
        java.lang.String str12 = org.apache.commons.io.IOUtils.toString(byteArray9);
        int int15 = org.apache.commons.io.IOUtils.read(inputStream2, byteArray9, (int) (byte) 10, (int) (short) 0);
        char[] charArray16 = org.apache.commons.io.IOUtils.toCharArray(inputStream2);
        // The following exception was thrown during execution in test generation
        try {
            int int19 = org.apache.commons.io.IOUtils.read(reader0, charArray16, 5, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[], int, int)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(inputStream8);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(charArray16);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray16), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray16), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray16), "[]");
    }

    @Test
    public void test1652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1652");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream5 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray("");
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray10);
        long long12 = org.apache.commons.io.IOUtils.copyLarge(inputStream4, outputStream5, 0L, 0L, byteArray10);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, byteArray10);
        java.io.BufferedInputStream bufferedInputStream15 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.nio.charset.Charset charset16 = null;
        java.util.List<java.lang.String> strList17 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset16);
        java.io.OutputStream outputStream18 = null;
        long long21 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream18, 0L, (long) 0);
        java.io.BufferedInputStream bufferedInputStream22 = org.apache.commons.io.IOUtils.buffer(inputStream1);
        java.io.BufferedInputStream bufferedInputStream23 = org.apache.commons.io.IOUtils.buffer(inputStream1);
        java.io.BufferedInputStream bufferedInputStream25 = org.apache.commons.io.IOUtils.buffer((java.io.InputStream) bufferedInputStream23, 4);
        java.nio.charset.Charset charset26 = null;
        org.apache.commons.io.LineIterator lineIterator27 = org.apache.commons.io.IOUtils.lineIterator((java.io.InputStream) bufferedInputStream23, charset26);
        java.io.InputStream inputStream29 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream29);
        java.io.InputStream inputStream31 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream29);
        java.lang.String str32 = org.apache.commons.io.IOUtils.toString(inputStream29);
        java.io.InputStream inputStream33 = null;
        byte[] byteArray35 = org.apache.commons.io.IOUtils.toByteArray("");
        int int36 = org.apache.commons.io.IOUtils.read(inputStream33, byteArray35);
        org.apache.commons.io.IOUtils.readFully(inputStream29, byteArray35);
        org.apache.commons.io.IOUtils.readFully((java.io.InputStream) bufferedInputStream23, byteArray35);
        byte[] byteArray39 = org.apache.commons.io.IOUtils.toByteArray((java.io.InputStream) bufferedInputStream23);
        java.lang.String str40 = org.apache.commons.io.IOUtils.toString((java.io.InputStream) bufferedInputStream23);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream15);
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream22);
        org.junit.Assert.assertNotNull(bufferedInputStream23);
        org.junit.Assert.assertNotNull(bufferedInputStream25);
        org.junit.Assert.assertNotNull(lineIterator27);
        org.junit.Assert.assertNotNull(inputStream29);
        org.junit.Assert.assertNotNull(inputStream31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
    }

    @Test
    public void test1653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1653");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.BufferedInputStream bufferedInputStream10 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        byte[] byteArray11 = null;
        org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray11, (int) '4', 0);
        java.util.List<java.lang.String> strList15 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.OutputStream outputStream16 = null;
        long long17 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream16);
        java.io.OutputStream outputStream18 = null;
        java.io.InputStream inputStream22 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray23 = org.apache.commons.io.IOUtils.toByteArray(inputStream22);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream22);
        java.util.List<java.lang.String> strList25 = org.apache.commons.io.IOUtils.readLines(inputStream22);
        java.io.OutputStream outputStream26 = null;
        long long27 = org.apache.commons.io.IOUtils.copyLarge(inputStream22, outputStream26);
        java.io.OutputStream outputStream28 = null;
        java.io.InputStream inputStream32 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray33 = new byte[] {};
        int int34 = org.apache.commons.io.IOUtils.length(byteArray33);
        int int35 = org.apache.commons.io.IOUtils.read(inputStream32, byteArray33);
        byte[] byteArray36 = org.apache.commons.io.IOUtils.toByteArray(inputStream32);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer37 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream32, iOExceptionConsumer37);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream32);
        java.io.BufferedInputStream bufferedInputStream41 = org.apache.commons.io.IOUtils.buffer(inputStream32, (int) (byte) 10);
        java.io.InputStream inputStream43 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream32, (int) (byte) 1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer44 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream32, iOExceptionConsumer44);
        java.io.OutputStream outputStream46 = null;
        java.io.InputStream inputStream48 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray49 = new byte[] {};
        int int50 = org.apache.commons.io.IOUtils.length(byteArray49);
        int int51 = org.apache.commons.io.IOUtils.read(inputStream48, byteArray49);
        byte[] byteArray52 = org.apache.commons.io.IOUtils.toByteArray(inputStream48);
        java.io.InputStream inputStream54 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray55 = new byte[] {};
        int int56 = org.apache.commons.io.IOUtils.length(byteArray55);
        int int57 = org.apache.commons.io.IOUtils.read(inputStream54, byteArray55);
        byte[] byteArray58 = org.apache.commons.io.IOUtils.toByteArray(inputStream54);
        int int59 = org.apache.commons.io.IOUtils.length(byteArray58);
        org.apache.commons.io.IOUtils.readFully(inputStream48, byteArray58);
        long long61 = org.apache.commons.io.IOUtils.copyLarge(inputStream32, outputStream46, byteArray58);
        long long62 = org.apache.commons.io.IOUtils.copyLarge(inputStream22, outputStream28, (long) (short) 0, 1L, byteArray58);
        // The following exception was thrown during execution in test generation
        try {
            long long63 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream18, (long) '\\', 100L, byteArray58);
            org.junit.Assert.fail("Expected exception of type java.io.EOFException; message: Bytes to skip: 92 actual: 0");
        } catch (java.io.EOFException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream10);
        org.junit.Assert.assertNotNull(strList15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(inputStream22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertNotNull(strList25);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNotNull(inputStream32);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream41);
        org.junit.Assert.assertNotNull(inputStream43);
        org.junit.Assert.assertNotNull(inputStream48);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[]");
        org.junit.Assert.assertNotNull(inputStream54);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 0L + "'", long62 == 0L);
    }

    @Test
    public void test1654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1654");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream3 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1);
        java.lang.String str4 = org.apache.commons.io.IOUtils.toString(inputStream1);
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray7);
        java.nio.charset.Charset charset10 = null;
        char[] charArray11 = org.apache.commons.io.IOUtils.toCharArray(inputStream1, charset10);
        java.io.OutputStream outputStream12 = null;
        java.nio.charset.Charset charset13 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(charArray11, outputStream12, charset13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.OutputStream.write(byte[])\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[]");
    }

    @Test
    public void test1655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1655");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.nio.charset.Charset charset6 = null;
        java.util.List<java.lang.String> strList7 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset6);
        java.nio.charset.Charset charset8 = null;
        org.apache.commons.io.LineIterator lineIterator9 = org.apache.commons.io.IOUtils.lineIterator(inputStream1, charset8);
        java.io.InputStream inputStream11 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, 6);
        java.io.BufferedInputStream bufferedInputStream13 = org.apache.commons.io.IOUtils.buffer(inputStream11, 3);
        java.io.InputStream inputStream15 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray16 = org.apache.commons.io.IOUtils.toByteArray(inputStream15);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream15);
        java.util.List<java.lang.String> strList18 = org.apache.commons.io.IOUtils.readLines(inputStream15);
        java.io.OutputStream outputStream19 = null;
        long long20 = org.apache.commons.io.IOUtils.copyLarge(inputStream15, outputStream19);
        java.io.Writer writer21 = null;
        org.apache.commons.io.IOUtils.copy(inputStream15, writer21);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream15);
        java.io.InputStream inputStream25 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray26 = new byte[] {};
        int int27 = org.apache.commons.io.IOUtils.length(byteArray26);
        int int28 = org.apache.commons.io.IOUtils.read(inputStream25, byteArray26);
        byte[] byteArray29 = org.apache.commons.io.IOUtils.toByteArray(inputStream25);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer30 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream25, iOExceptionConsumer30);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream25);
        java.io.BufferedInputStream bufferedInputStream34 = org.apache.commons.io.IOUtils.buffer(inputStream25, (int) (byte) 10);
        java.io.InputStream inputStream36 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream25, (int) (byte) 1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer37 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream25, iOExceptionConsumer37);
        java.io.OutputStream outputStream39 = null;
        java.io.InputStream inputStream41 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray42 = new byte[] {};
        int int43 = org.apache.commons.io.IOUtils.length(byteArray42);
        int int44 = org.apache.commons.io.IOUtils.read(inputStream41, byteArray42);
        byte[] byteArray45 = org.apache.commons.io.IOUtils.toByteArray(inputStream41);
        java.io.InputStream inputStream47 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray48 = new byte[] {};
        int int49 = org.apache.commons.io.IOUtils.length(byteArray48);
        int int50 = org.apache.commons.io.IOUtils.read(inputStream47, byteArray48);
        byte[] byteArray51 = org.apache.commons.io.IOUtils.toByteArray(inputStream47);
        int int52 = org.apache.commons.io.IOUtils.length(byteArray51);
        org.apache.commons.io.IOUtils.readFully(inputStream41, byteArray51);
        long long54 = org.apache.commons.io.IOUtils.copyLarge(inputStream25, outputStream39, byteArray51);
        boolean boolean55 = org.apache.commons.io.IOUtils.contentEquals(inputStream15, inputStream25);
        java.io.BufferedInputStream bufferedInputStream56 = org.apache.commons.io.IOUtils.buffer(inputStream15);
        java.io.BufferedInputStream bufferedInputStream58 = org.apache.commons.io.IOUtils.buffer(inputStream15, (int) (short) 100);
        boolean boolean59 = org.apache.commons.io.IOUtils.contentEquals(inputStream11, inputStream15);
        char[] charArray60 = org.apache.commons.io.IOUtils.toCharArray(inputStream15);
        java.io.InputStream inputStream62 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray63 = new byte[] {};
        int int64 = org.apache.commons.io.IOUtils.length(byteArray63);
        int int65 = org.apache.commons.io.IOUtils.read(inputStream62, byteArray63);
        java.nio.charset.Charset charset66 = null;
        java.lang.String str67 = org.apache.commons.io.IOUtils.toString(inputStream62, charset66);
        java.io.InputStream inputStream69 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray70 = new byte[] {};
        int int71 = org.apache.commons.io.IOUtils.length(byteArray70);
        int int72 = org.apache.commons.io.IOUtils.read(inputStream69, byteArray70);
        java.io.InputStream inputStream73 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream69);
        byte[] byteArray74 = org.apache.commons.io.IOUtils.toByteArray(inputStream73);
        int int77 = org.apache.commons.io.IOUtils.read(inputStream62, byteArray74, 6, 0);
        // The following exception was thrown during execution in test generation
        try {
            int int80 = org.apache.commons.io.IOUtils.read(inputStream15, byteArray74, (int) (byte) -1, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Range [-1, -1 + 100) out of bounds for length 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertNotNull(lineIterator9);
        org.junit.Assert.assertNotNull(inputStream11);
        org.junit.Assert.assertNotNull(bufferedInputStream13);
        org.junit.Assert.assertNotNull(inputStream15);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(inputStream25);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream34);
        org.junit.Assert.assertNotNull(inputStream36);
        org.junit.Assert.assertNotNull(inputStream41);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
        org.junit.Assert.assertNotNull(inputStream47);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(bufferedInputStream56);
        org.junit.Assert.assertNotNull(bufferedInputStream58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(charArray60);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray60), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray60), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray60), "[]");
        org.junit.Assert.assertNotNull(inputStream62);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertNotNull(inputStream69);
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(inputStream73);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
    }

    @Test
    public void test1656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1656");
        java.io.Reader reader0 = null;
        char[] charArray5 = new char[] { '4', 'a', '#', 'a' };
        int int6 = org.apache.commons.io.IOUtils.length(charArray5);
        // The following exception was thrown during execution in test generation
        try {
            int int9 = org.apache.commons.io.IOUtils.read(reader0, charArray5, (int) (byte) 1, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[], int, int)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "4a#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "4a#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[4, a, #, a]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 4 + "'", int6 == 4);
    }

    @Test
    public void test1657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1657");
        java.nio.channels.ReadableByteChannel readableByteChannel0 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long2 = org.apache.commons.io.IOUtils.skip(readableByteChannel0, (long) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.nio.channels.ReadableByteChannel.read(java.nio.ByteBuffer)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1658");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.BufferedInputStream bufferedInputStream10 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        org.apache.commons.io.function.IOConsumer<java.io.IOException> iOExceptionIOConsumer11 = null;
        org.apache.commons.io.IOUtils.close((java.io.Closeable) bufferedInputStream10, iOExceptionIOConsumer11);
        java.nio.charset.Charset charset13 = null;
        org.apache.commons.io.LineIterator lineIterator14 = org.apache.commons.io.IOUtils.lineIterator((java.io.InputStream) bufferedInputStream10, charset13);
        java.io.OutputStream outputStream15 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long18 = org.apache.commons.io.IOUtils.copyLarge((java.io.InputStream) bufferedInputStream10, outputStream15, (long) (byte) 100, (long) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Stream closed");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream10);
        org.junit.Assert.assertNotNull(lineIterator14);
    }

    @Test
    public void test1659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1659");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        java.io.OutputStream outputStream10 = null;
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream10, (long) (short) 0, (-1L));
        java.lang.String str14 = org.apache.commons.io.IOUtils.toString(inputStream1);
        java.io.InputStream inputStream15 = null;
        java.io.OutputStream outputStream16 = null;
        byte[] byteArray19 = new byte[] {};
        int int20 = org.apache.commons.io.IOUtils.length(byteArray19);
        java.io.OutputStream outputStream21 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray19, outputStream21);
        long long23 = org.apache.commons.io.IOUtils.copyLarge(inputStream15, outputStream16, 0L, (long) (byte) -1, byteArray19);
        java.io.OutputStream outputStream24 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray19, outputStream24);
        int int26 = org.apache.commons.io.IOUtils.length(byteArray19);
        int int27 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray19);
        java.io.InputStream inputStream29 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray30 = new byte[] {};
        int int31 = org.apache.commons.io.IOUtils.length(byteArray30);
        int int32 = org.apache.commons.io.IOUtils.read(inputStream29, byteArray30);
        byte[] byteArray33 = org.apache.commons.io.IOUtils.toByteArray(inputStream29);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer34 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream29, iOExceptionConsumer34);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream29);
        java.io.BufferedInputStream bufferedInputStream38 = org.apache.commons.io.IOUtils.buffer(inputStream29, (int) (byte) 10);
        java.io.InputStream inputStream40 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream29, (int) (byte) 1);
        java.io.OutputStream outputStream41 = null;
        int int42 = org.apache.commons.io.IOUtils.copy(inputStream40, outputStream41);
        java.io.BufferedInputStream bufferedInputStream44 = org.apache.commons.io.IOUtils.buffer(inputStream40, (int) (byte) 10);
        byte[] byteArray46 = org.apache.commons.io.IOUtils.toByteArray(inputStream40, 0);
        org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray46, 0, 0);
        java.io.Writer writer50 = null;
        java.nio.charset.Charset charset51 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(byteArray46, writer50, charset51);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Writer.write(String)\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(inputStream29);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream38);
        org.junit.Assert.assertNotNull(inputStream40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(bufferedInputStream44);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
    }

    @Test
    public void test1660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1660");
        java.io.Reader reader0 = null;
        java.io.Writer writer1 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long4 = org.apache.commons.io.IOUtils.copyLarge(reader0, writer1, 10L, (long) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[], int, int)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1661");
        java.io.Reader reader0 = null;
        java.io.Reader reader1 = null;
        char[] charArray2 = new char[] {};
        int int3 = org.apache.commons.io.IOUtils.length(charArray2);
        org.apache.commons.io.IOUtils.readFully(reader1, charArray2);
        int int5 = org.apache.commons.io.IOUtils.length(charArray2);
        java.io.Writer writer6 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray2, writer6);
        // The following exception was thrown during execution in test generation
        try {
            int int10 = org.apache.commons.io.IOUtils.read(reader0, charArray2, 1, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[], int, int)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray2), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray2), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test1662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1662");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.BufferedInputStream bufferedInputStream10 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.io.InputStream inputStream12 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, (int) (byte) 1);
        java.io.OutputStream outputStream13 = null;
        int int14 = org.apache.commons.io.IOUtils.copy(inputStream12, outputStream13);
        java.io.BufferedInputStream bufferedInputStream16 = org.apache.commons.io.IOUtils.buffer(inputStream12, (int) (byte) 10);
        byte[] byteArray18 = org.apache.commons.io.IOUtils.toByteArray(inputStream12, 0);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream12);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream10);
        org.junit.Assert.assertNotNull(inputStream12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(bufferedInputStream16);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
    }

    @Test
    public void test1663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1663");
        java.io.InputStream inputStream0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.LineIterator lineIterator2 = org.apache.commons.io.IOUtils.lineIterator(inputStream0, "\r\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ??");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1664");
        java.io.Reader reader0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.BufferedReader bufferedReader2 = org.apache.commons.io.IOUtils.toBufferedReader(reader0, 4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1665");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream3 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1);
        byte[] byteArray8 = new byte[] { (byte) -1, (byte) 100, (byte) 1, (byte) -1 };
        int int9 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray8);
        java.nio.charset.Charset charset10 = null;
        java.util.List<java.lang.String> strList11 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset10);
        java.io.OutputStream outputStream13 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList11, "\r\n", outputStream13);
        java.io.OutputStream outputStream16 = null;
        java.nio.charset.Charset charset17 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList11, "hi!", outputStream16, charset17);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream3);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-1, 100, 1, -1]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(strList11);
    }

    @Test
    public void test1666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1666");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.util.List<java.lang.String> strList4 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.BufferedInputStream bufferedInputStream5 = org.apache.commons.io.IOUtils.buffer(inputStream1);
        java.io.Writer writer6 = null;
        java.nio.charset.Charset charset7 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer6, charset7);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.skipFully(inputStream1, (long) 3);
            org.junit.Assert.fail("Expected exception of type java.io.EOFException; message: Bytes to skip: 3 actual: 0");
        } catch (java.io.EOFException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertNotNull(bufferedInputStream5);
    }

    @Test
    public void test1667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1667");
        java.io.InputStream inputStream0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str2 = org.apache.commons.io.IOUtils.toString(inputStream0, "\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ?");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1668");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer9 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer9);
        java.io.BufferedInputStream bufferedInputStream11 = org.apache.commons.io.IOUtils.buffer(inputStream1);
        java.io.OutputStream outputStream12 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long15 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream12, 1L, (long) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.io.EOFException; message: Bytes to skip: 1 actual: 0");
        } catch (java.io.EOFException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream11);
    }

    @Test
    public void test1669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1669");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream5 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray("");
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray10);
        long long12 = org.apache.commons.io.IOUtils.copyLarge(inputStream4, outputStream5, 0L, 0L, byteArray10);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, byteArray10);
        java.lang.String str14 = org.apache.commons.io.IOUtils.toString(byteArray10);
        java.io.OutputStream outputStream15 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(byteArray10, outputStream15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.OutputStream.write(byte[])\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
    }

    @Test
    public void test1670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1670");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        java.nio.charset.Charset charset5 = null;
        org.apache.commons.io.LineIterator lineIterator6 = org.apache.commons.io.IOUtils.lineIterator(inputStream1, charset5);
        java.io.InputStream inputStream8 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray9 = new byte[] {};
        int int10 = org.apache.commons.io.IOUtils.length(byteArray9);
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray9);
        byte[] byteArray12 = org.apache.commons.io.IOUtils.toByteArray(inputStream8);
        boolean boolean13 = org.apache.commons.io.IOUtils.contentEquals(inputStream1, inputStream8);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.LineIterator lineIterator15 = org.apache.commons.io.IOUtils.lineIterator(inputStream8, "\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ?");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(lineIterator6);
        org.junit.Assert.assertNotNull(inputStream8);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test1671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1671");
        java.io.Reader reader0 = null;
        java.io.Writer writer1 = null;
        java.io.InputStream inputStream5 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray6 = org.apache.commons.io.IOUtils.toByteArray(inputStream5);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream5);
        java.util.List<java.lang.String> strList8 = org.apache.commons.io.IOUtils.readLines(inputStream5);
        java.io.OutputStream outputStream9 = null;
        long long12 = org.apache.commons.io.IOUtils.copyLarge(inputStream5, outputStream9, (long) 0, 0L);
        java.io.InputStream inputStream14 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream5, 100);
        java.nio.charset.Charset charset15 = null;
        char[] charArray16 = org.apache.commons.io.IOUtils.toCharArray(inputStream5, charset15);
        // The following exception was thrown during execution in test generation
        try {
            long long17 = org.apache.commons.io.IOUtils.copyLarge(reader0, writer1, (long) 10, (long) 2, charArray16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[], int, int)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(inputStream14);
        org.junit.Assert.assertNotNull(charArray16);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray16), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray16), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray16), "[]");
    }

    @Test
    public void test1672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1672");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.BufferedInputStream bufferedInputStream10 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.io.InputStream inputStream12 = org.apache.commons.io.IOUtils.toBufferedInputStream((java.io.InputStream) bufferedInputStream10, (int) '#');
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream12);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream12);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str16 = org.apache.commons.io.IOUtils.toString(inputStream12, "\r\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ??");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream10);
        org.junit.Assert.assertNotNull(inputStream12);
    }

    @Test
    public void test1673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1673");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly(inputStream1);
        java.io.BufferedInputStream bufferedInputStream10 = org.apache.commons.io.IOUtils.buffer(inputStream1);
        java.nio.charset.Charset charset11 = null;
        org.apache.commons.io.LineIterator lineIterator12 = org.apache.commons.io.IOUtils.lineIterator((java.io.InputStream) bufferedInputStream10, charset11);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str14 = org.apache.commons.io.IOUtils.toString((java.io.InputStream) bufferedInputStream10, "\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ?");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream10);
        org.junit.Assert.assertNotNull(lineIterator12);
    }

    @Test
    public void test1674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1674");
        char[] charArray0 = new char[] {};
        int int1 = org.apache.commons.io.IOUtils.length(charArray0);
        java.io.Writer writer2 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray0, writer2);
        int int4 = org.apache.commons.io.IOUtils.length(charArray0);
        java.io.Writer writer5 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray0, writer5);
        java.io.OutputStream outputStream7 = null;
        java.nio.charset.Charset charset8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(charArray0, outputStream7, charset8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.OutputStream.write(byte[])\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray0);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray0), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray0), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test1675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1675");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.nio.charset.Charset charset6 = null;
        java.util.List<java.lang.String> strList7 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset6);
        java.io.OutputStream outputStream8 = null;
        java.io.InputStream inputStream10 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray11 = new byte[] {};
        int int12 = org.apache.commons.io.IOUtils.length(byteArray11);
        int int13 = org.apache.commons.io.IOUtils.read(inputStream10, byteArray11);
        java.lang.String str14 = org.apache.commons.io.IOUtils.toString(byteArray11);
        long long15 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream8, byteArray11);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.skipFully(inputStream1, (long) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.io.EOFException; message: Bytes to skip: 1 actual: 0");
        } catch (java.io.EOFException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertNotNull(inputStream10);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
    }

    @Test
    public void test1676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1676");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.nio.charset.Charset charset6 = null;
        java.util.List<java.lang.String> strList7 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset6);
        java.nio.charset.Charset charset8 = null;
        org.apache.commons.io.LineIterator lineIterator9 = org.apache.commons.io.IOUtils.lineIterator(inputStream1, charset8);
        java.io.InputStream inputStream11 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, 6);
        java.io.BufferedInputStream bufferedInputStream13 = org.apache.commons.io.IOUtils.buffer(inputStream11, 3);
        java.lang.String str14 = org.apache.commons.io.IOUtils.toString(inputStream11);
        java.io.Writer writer15 = null;
        java.nio.charset.Charset charset16 = null;
        org.apache.commons.io.IOUtils.copy(inputStream11, writer15, charset16);
        java.io.Writer writer18 = null;
        java.nio.charset.Charset charset19 = null;
        org.apache.commons.io.IOUtils.copy(inputStream11, writer18, charset19);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertNotNull(lineIterator9);
        org.junit.Assert.assertNotNull(inputStream11);
        org.junit.Assert.assertNotNull(bufferedInputStream13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
    }

    @Test
    public void test1677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1677");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.BufferedInputStream bufferedInputStream10 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        byte[] byteArray11 = null;
        org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray11, (int) '4', 0);
        java.util.List<java.lang.String> strList15 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.OutputStream outputStream16 = null;
        int int17 = org.apache.commons.io.IOUtils.copy(inputStream1, outputStream16);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream10);
        org.junit.Assert.assertNotNull(strList15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test1678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1678");
        java.io.Reader reader0 = null;
        java.io.Writer writer1 = null;
        java.io.InputStream inputStream3 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream3);
        java.io.InputStream inputStream5 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream3);
        java.lang.String str6 = org.apache.commons.io.IOUtils.toString(inputStream3);
        java.io.InputStream inputStream7 = null;
        byte[] byteArray9 = org.apache.commons.io.IOUtils.toByteArray("");
        int int10 = org.apache.commons.io.IOUtils.read(inputStream7, byteArray9);
        org.apache.commons.io.IOUtils.readFully(inputStream3, byteArray9);
        java.nio.charset.Charset charset12 = null;
        char[] charArray13 = org.apache.commons.io.IOUtils.toCharArray(inputStream3, charset12);
        // The following exception was thrown during execution in test generation
        try {
            long long14 = org.apache.commons.io.IOUtils.copyLarge(reader0, writer1, charArray13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[])\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream3);
        org.junit.Assert.assertNotNull(inputStream5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[]");
    }

    @Test
    public void test1679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1679");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.BufferedInputStream bufferedInputStream10 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.io.InputStream inputStream12 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, (int) (byte) 1);
        java.nio.charset.Charset charset13 = null;
        org.apache.commons.io.LineIterator lineIterator14 = org.apache.commons.io.IOUtils.lineIterator(inputStream12, charset13);
        java.io.OutputStream outputStream15 = null;
        long long16 = org.apache.commons.io.IOUtils.copyLarge(inputStream12, outputStream15);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.LineIterator lineIterator18 = org.apache.commons.io.IOUtils.lineIterator(inputStream12, "\r\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ??");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream10);
        org.junit.Assert.assertNotNull(inputStream12);
        org.junit.Assert.assertNotNull(lineIterator14);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
    }

    @Test
    public void test1680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1680");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.nio.charset.Charset charset6 = null;
        java.util.List<java.lang.String> strList7 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset6);
        java.nio.charset.Charset charset8 = null;
        org.apache.commons.io.LineIterator lineIterator9 = org.apache.commons.io.IOUtils.lineIterator(inputStream1, charset8);
        java.io.InputStream inputStream11 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, 6);
        java.io.BufferedInputStream bufferedInputStream13 = org.apache.commons.io.IOUtils.buffer(inputStream11, 3);
        java.util.List<java.lang.String> strList14 = org.apache.commons.io.IOUtils.readLines(inputStream11);
        java.io.OutputStream outputStream16 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList14, "\r\n", outputStream16, "\r\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ??");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertNotNull(lineIterator9);
        org.junit.Assert.assertNotNull(inputStream11);
        org.junit.Assert.assertNotNull(bufferedInputStream13);
        org.junit.Assert.assertNotNull(strList14);
    }

    @Test
    public void test1681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1681");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray5 = new byte[] {};
        int int6 = org.apache.commons.io.IOUtils.length(byteArray5);
        int int7 = org.apache.commons.io.IOUtils.read(inputStream4, byteArray5);
        byte[] byteArray8 = org.apache.commons.io.IOUtils.toByteArray(inputStream4);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer9 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream4, iOExceptionConsumer9);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream4);
        java.io.BufferedInputStream bufferedInputStream13 = org.apache.commons.io.IOUtils.buffer(inputStream4, (int) (byte) 10);
        boolean boolean14 = org.apache.commons.io.IOUtils.contentEquals(inputStream1, inputStream4);
        java.io.InputStream inputStream16 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray17 = new byte[] {};
        int int18 = org.apache.commons.io.IOUtils.length(byteArray17);
        int int19 = org.apache.commons.io.IOUtils.read(inputStream16, byteArray17);
        byte[] byteArray20 = org.apache.commons.io.IOUtils.toByteArray(inputStream16);
        byte[] byteArray22 = org.apache.commons.io.IOUtils.toByteArray(inputStream16, (int) (short) 0);
        long long24 = org.apache.commons.io.IOUtils.skip(inputStream16, 100L);
        java.io.InputStream inputStream25 = null;
        java.io.InputStream inputStream26 = null;
        java.io.OutputStream outputStream27 = null;
        byte[] byteArray30 = new byte[] {};
        int int31 = org.apache.commons.io.IOUtils.length(byteArray30);
        java.io.OutputStream outputStream32 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray30, outputStream32);
        long long34 = org.apache.commons.io.IOUtils.copyLarge(inputStream26, outputStream27, 0L, (long) (byte) -1, byteArray30);
        java.io.OutputStream outputStream35 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray30, outputStream35);
        org.apache.commons.io.IOUtils.readFully(inputStream25, byteArray30);
        int int38 = org.apache.commons.io.IOUtils.read(inputStream16, byteArray30);
        int int39 = org.apache.commons.io.IOUtils.read(inputStream4, byteArray30);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray41 = org.apache.commons.io.IOUtils.toByteArray(inputStream4, (long) '#');
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Unexpected read size. current: 0, expected: 35");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(inputStream16);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
    }

    @Test
    public void test1682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1682");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream3 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1);
        java.io.InputStream inputStream5 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream6 = null;
        java.io.InputStream inputStream9 = null;
        byte[] byteArray11 = org.apache.commons.io.IOUtils.toByteArray("");
        int int12 = org.apache.commons.io.IOUtils.read(inputStream9, byteArray11);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream5, outputStream6, 0L, 0L, byteArray11);
        java.io.Writer writer14 = null;
        org.apache.commons.io.IOUtils.copy(inputStream5, writer14);
        java.util.List<java.lang.String> strList16 = org.apache.commons.io.IOUtils.readLines(inputStream5);
        java.io.InputStream inputStream17 = null;
        java.io.OutputStream outputStream18 = null;
        byte[] byteArray21 = new byte[] {};
        int int22 = org.apache.commons.io.IOUtils.length(byteArray21);
        java.io.OutputStream outputStream23 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray21, outputStream23);
        long long25 = org.apache.commons.io.IOUtils.copyLarge(inputStream17, outputStream18, 0L, (long) (byte) -1, byteArray21);
        java.io.OutputStream outputStream26 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray21, outputStream26);
        int int28 = org.apache.commons.io.IOUtils.length(byteArray21);
        java.io.OutputStream outputStream29 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray21, outputStream29);
        int int31 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray21);
        java.io.OutputStream outputStream32 = null;
        java.io.InputStream inputStream34 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray35 = new byte[] {};
        int int36 = org.apache.commons.io.IOUtils.length(byteArray35);
        int int37 = org.apache.commons.io.IOUtils.read(inputStream34, byteArray35);
        byte[] byteArray38 = org.apache.commons.io.IOUtils.toByteArray(inputStream34);
        byte[] byteArray40 = org.apache.commons.io.IOUtils.toByteArray(inputStream34, (int) (short) 0);
        long long42 = org.apache.commons.io.IOUtils.skip(inputStream34, 100L);
        java.io.InputStream inputStream43 = null;
        java.io.InputStream inputStream44 = null;
        java.io.OutputStream outputStream45 = null;
        byte[] byteArray48 = new byte[] {};
        int int49 = org.apache.commons.io.IOUtils.length(byteArray48);
        java.io.OutputStream outputStream50 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray48, outputStream50);
        long long52 = org.apache.commons.io.IOUtils.copyLarge(inputStream44, outputStream45, 0L, (long) (byte) -1, byteArray48);
        java.io.OutputStream outputStream53 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray48, outputStream53);
        org.apache.commons.io.IOUtils.readFully(inputStream43, byteArray48);
        int int56 = org.apache.commons.io.IOUtils.read(inputStream34, byteArray48);
        java.io.OutputStream outputStream57 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray48, outputStream57);
        java.lang.String str59 = org.apache.commons.io.IOUtils.toString(byteArray48);
        long long60 = org.apache.commons.io.IOUtils.copyLarge(inputStream5, outputStream32, byteArray48);
        int int61 = org.apache.commons.io.IOUtils.length(byteArray48);
        int int62 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray48);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str64 = org.apache.commons.io.IOUtils.toString(byteArray48, "hi!");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: hi!");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream3);
        org.junit.Assert.assertNotNull(inputStream5);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(inputStream34);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 0L + "'", long60 == 0L);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
    }

    @Test
    public void test1683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1683");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream5 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray("");
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray10);
        long long12 = org.apache.commons.io.IOUtils.copyLarge(inputStream4, outputStream5, 0L, 0L, byteArray10);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, byteArray10);
        java.io.BufferedInputStream bufferedInputStream15 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.nio.charset.Charset charset16 = null;
        java.util.List<java.lang.String> strList17 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset16);
        java.io.OutputStream outputStream18 = null;
        long long21 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream18, 0L, (long) 0);
        java.nio.charset.Charset charset22 = null;
        char[] charArray23 = org.apache.commons.io.IOUtils.toCharArray(inputStream1, charset22);
        java.io.Writer writer24 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray23, writer24);
        java.io.Writer writer26 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray23, writer26);
        java.io.OutputStream outputStream28 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(charArray23, outputStream28, "");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream15);
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[]");
    }

    @Test
    public void test1684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1684");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream5 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray("");
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray10);
        long long12 = org.apache.commons.io.IOUtils.copyLarge(inputStream4, outputStream5, 0L, 0L, byteArray10);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, byteArray10);
        java.io.BufferedInputStream bufferedInputStream15 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.nio.charset.Charset charset16 = null;
        java.util.List<java.lang.String> strList17 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset16);
        java.io.OutputStream outputStream18 = null;
        long long21 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream18, 0L, (long) 0);
        java.io.BufferedInputStream bufferedInputStream22 = org.apache.commons.io.IOUtils.buffer(inputStream1);
        java.io.BufferedInputStream bufferedInputStream23 = org.apache.commons.io.IOUtils.buffer(inputStream1);
        java.io.OutputStream outputStream24 = null;
        long long25 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream24);
        java.nio.charset.Charset charset26 = null;
        char[] charArray27 = org.apache.commons.io.IOUtils.toCharArray(inputStream1, charset26);
        java.io.OutputStream outputStream28 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(charArray27, outputStream28, "");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream15);
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream22);
        org.junit.Assert.assertNotNull(bufferedInputStream23);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[]");
    }

    @Test
    public void test1685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1685");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.util.List<java.lang.String> strList4 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.OutputStream outputStream5 = null;
        long long6 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream5);
        java.io.OutputStream outputStream7 = null;
        java.io.InputStream inputStream11 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray12 = new byte[] {};
        int int13 = org.apache.commons.io.IOUtils.length(byteArray12);
        int int14 = org.apache.commons.io.IOUtils.read(inputStream11, byteArray12);
        byte[] byteArray15 = org.apache.commons.io.IOUtils.toByteArray(inputStream11);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer16 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream11, iOExceptionConsumer16);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream11);
        java.io.BufferedInputStream bufferedInputStream20 = org.apache.commons.io.IOUtils.buffer(inputStream11, (int) (byte) 10);
        java.io.InputStream inputStream22 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream11, (int) (byte) 1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer23 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream11, iOExceptionConsumer23);
        java.io.OutputStream outputStream25 = null;
        java.io.InputStream inputStream27 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray28 = new byte[] {};
        int int29 = org.apache.commons.io.IOUtils.length(byteArray28);
        int int30 = org.apache.commons.io.IOUtils.read(inputStream27, byteArray28);
        byte[] byteArray31 = org.apache.commons.io.IOUtils.toByteArray(inputStream27);
        java.io.InputStream inputStream33 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray34 = new byte[] {};
        int int35 = org.apache.commons.io.IOUtils.length(byteArray34);
        int int36 = org.apache.commons.io.IOUtils.read(inputStream33, byteArray34);
        byte[] byteArray37 = org.apache.commons.io.IOUtils.toByteArray(inputStream33);
        int int38 = org.apache.commons.io.IOUtils.length(byteArray37);
        org.apache.commons.io.IOUtils.readFully(inputStream27, byteArray37);
        long long40 = org.apache.commons.io.IOUtils.copyLarge(inputStream11, outputStream25, byteArray37);
        long long41 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream7, (long) (short) 0, 1L, byteArray37);
        java.nio.charset.Charset charset42 = null;
        org.apache.commons.io.LineIterator lineIterator43 = org.apache.commons.io.IOUtils.lineIterator(inputStream1, charset42);
        java.lang.String str44 = org.apache.commons.io.IOUtils.toString(inputStream1);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(inputStream11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream20);
        org.junit.Assert.assertNotNull(inputStream22);
        org.junit.Assert.assertNotNull(inputStream27);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(inputStream33);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertNotNull(lineIterator43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
    }

    @Test
    public void test1686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1686");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.util.List<java.lang.String> strList4 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.OutputStream outputStream5 = null;
        long long6 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream5);
        java.io.Writer writer7 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer7);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream11 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray12 = new byte[] {};
        int int13 = org.apache.commons.io.IOUtils.length(byteArray12);
        int int14 = org.apache.commons.io.IOUtils.read(inputStream11, byteArray12);
        byte[] byteArray15 = org.apache.commons.io.IOUtils.toByteArray(inputStream11);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer16 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream11, iOExceptionConsumer16);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream11);
        java.io.BufferedInputStream bufferedInputStream20 = org.apache.commons.io.IOUtils.buffer(inputStream11, (int) (byte) 10);
        java.io.InputStream inputStream22 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream11, (int) (byte) 1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer23 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream11, iOExceptionConsumer23);
        java.io.OutputStream outputStream25 = null;
        java.io.InputStream inputStream27 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray28 = new byte[] {};
        int int29 = org.apache.commons.io.IOUtils.length(byteArray28);
        int int30 = org.apache.commons.io.IOUtils.read(inputStream27, byteArray28);
        byte[] byteArray31 = org.apache.commons.io.IOUtils.toByteArray(inputStream27);
        java.io.InputStream inputStream33 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray34 = new byte[] {};
        int int35 = org.apache.commons.io.IOUtils.length(byteArray34);
        int int36 = org.apache.commons.io.IOUtils.read(inputStream33, byteArray34);
        byte[] byteArray37 = org.apache.commons.io.IOUtils.toByteArray(inputStream33);
        int int38 = org.apache.commons.io.IOUtils.length(byteArray37);
        org.apache.commons.io.IOUtils.readFully(inputStream27, byteArray37);
        long long40 = org.apache.commons.io.IOUtils.copyLarge(inputStream11, outputStream25, byteArray37);
        boolean boolean41 = org.apache.commons.io.IOUtils.contentEquals(inputStream1, inputStream11);
        java.io.BufferedInputStream bufferedInputStream43 = org.apache.commons.io.IOUtils.buffer(inputStream1, 5);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer44 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) bufferedInputStream43, iOExceptionConsumer44);
        java.nio.charset.Charset charset46 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str47 = org.apache.commons.io.IOUtils.toString((java.io.InputStream) bufferedInputStream43, charset46);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Stream closed");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(inputStream11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream20);
        org.junit.Assert.assertNotNull(inputStream22);
        org.junit.Assert.assertNotNull(inputStream27);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(inputStream33);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(bufferedInputStream43);
    }

    @Test
    public void test1687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1687");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream3 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1);
        java.io.Writer writer4 = null;
        java.nio.charset.Charset charset5 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer4, charset5);
        java.io.OutputStream outputStream7 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray("");
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray10);
        java.lang.String str12 = org.apache.commons.io.IOUtils.toString(byteArray10);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream7, byteArray10);
        java.util.List<java.lang.String> strList14 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.OutputStream outputStream15 = null;
        int int16 = org.apache.commons.io.IOUtils.copy(inputStream1, outputStream15);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream3);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(strList14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test1688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1688");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream3 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1);
        java.io.Writer writer4 = null;
        java.nio.charset.Charset charset5 = null;
        org.apache.commons.io.IOUtils.copy(inputStream3, writer4, charset5);
        org.apache.commons.io.function.IOConsumer<java.io.IOException> iOExceptionIOConsumer7 = null;
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream3, iOExceptionIOConsumer7);
        java.io.Writer writer9 = null;
        java.nio.charset.Charset charset10 = null;
        org.apache.commons.io.IOUtils.copy(inputStream3, writer9, charset10);
        java.io.Writer writer12 = null;
        org.apache.commons.io.IOUtils.copy(inputStream3, writer12);
        java.nio.charset.Charset charset14 = null;
        java.util.List<java.lang.String> strList15 = org.apache.commons.io.IOUtils.readLines(inputStream3, charset14);
        java.io.OutputStream outputStream17 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList15, "hi!", outputStream17);
        java.io.Writer writer20 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList15, "\r\n", writer20);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream3);
        org.junit.Assert.assertNotNull(strList15);
    }

    @Test
    public void test1689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1689");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray(inputStream1, (int) (short) 0);
        long long9 = org.apache.commons.io.IOUtils.skip(inputStream1, 100L);
        java.io.InputStream inputStream10 = null;
        java.io.InputStream inputStream11 = null;
        java.io.OutputStream outputStream12 = null;
        byte[] byteArray15 = new byte[] {};
        int int16 = org.apache.commons.io.IOUtils.length(byteArray15);
        java.io.OutputStream outputStream17 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray15, outputStream17);
        long long19 = org.apache.commons.io.IOUtils.copyLarge(inputStream11, outputStream12, 0L, (long) (byte) -1, byteArray15);
        java.io.OutputStream outputStream20 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray15, outputStream20);
        org.apache.commons.io.IOUtils.readFully(inputStream10, byteArray15);
        int int23 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray15);
        java.io.InputStream inputStream24 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1);
        byte[] byteArray26 = org.apache.commons.io.IOUtils.readFully(inputStream24, 0);
        java.io.OutputStream outputStream27 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray26, outputStream27);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(inputStream24);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
    }

    @Test
    public void test1690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1690");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.BufferedInputStream bufferedInputStream10 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        byte[] byteArray11 = null;
        org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray11, (int) '4', 0);
        java.io.OutputStream outputStream15 = null;
        long long17 = org.apache.commons.io.IOUtils.copy(inputStream1, outputStream15, 0);
        char[] charArray18 = org.apache.commons.io.IOUtils.toCharArray(inputStream1);
        java.io.BufferedInputStream bufferedInputStream19 = org.apache.commons.io.IOUtils.buffer(inputStream1);
        org.apache.commons.io.function.IOConsumer<java.io.IOException> iOExceptionIOConsumer20 = null;
        org.apache.commons.io.IOUtils.close((java.io.Closeable) bufferedInputStream19, iOExceptionIOConsumer20);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream10);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(charArray18);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray18), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray18), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray18), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream19);
    }

    @Test
    public void test1691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1691");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        java.nio.charset.Charset charset10 = null;
        java.util.List<java.lang.String> strList11 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset10);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        char[] charArray13 = org.apache.commons.io.IOUtils.toCharArray(inputStream1);
        int int14 = org.apache.commons.io.IOUtils.length(charArray13);
        int int15 = org.apache.commons.io.IOUtils.length(charArray13);
        java.io.OutputStream outputStream16 = null;
        java.nio.charset.Charset charset17 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(charArray13, outputStream16, charset17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.OutputStream.write(byte[])\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test1692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1692");
        java.io.OutputStream outputStream0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.BufferedOutputStream bufferedOutputStream2 = org.apache.commons.io.IOUtils.buffer(outputStream0, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: outputStream");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1693");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.util.List<java.lang.String> strList4 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.OutputStream outputStream6 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList4, "\n", outputStream6);
        java.io.Writer writer9 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList4, "hi!", writer9);
        java.io.OutputStream outputStream12 = null;
        java.nio.charset.Charset charset13 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList4, "\n", outputStream12, charset13);
        java.io.Writer writer16 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList4, "\n", writer16);
        java.io.Writer writer19 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList4, "\r\n", writer19);
        java.io.Writer writer22 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList4, "\n", writer22);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(strList4);
    }

    @Test
    public void test1694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1694");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.BufferedInputStream bufferedInputStream3 = org.apache.commons.io.IOUtils.buffer(inputStream1, 100);
        java.io.Writer writer4 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.copy((java.io.InputStream) bufferedInputStream3, writer4, "");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(bufferedInputStream3);
    }

    @Test
    public void test1695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1695");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.nio.charset.Charset charset6 = null;
        java.util.List<java.lang.String> strList7 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset6);
        java.nio.charset.Charset charset8 = null;
        org.apache.commons.io.LineIterator lineIterator9 = org.apache.commons.io.IOUtils.lineIterator(inputStream1, charset8);
        java.io.InputStream inputStream11 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, 6);
        java.io.InputStream inputStream13 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray14 = new byte[] {};
        int int15 = org.apache.commons.io.IOUtils.length(byteArray14);
        int int16 = org.apache.commons.io.IOUtils.read(inputStream13, byteArray14);
        byte[] byteArray17 = org.apache.commons.io.IOUtils.toByteArray(inputStream13);
        byte[] byteArray18 = org.apache.commons.io.IOUtils.toByteArray(inputStream13);
        int int21 = org.apache.commons.io.IOUtils.read(inputStream11, byteArray18, (int) '#', 0);
        java.io.InputStream inputStream23 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream11, 10);
        java.io.InputStream inputStream24 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream11);
        java.io.InputStream inputStream26 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream24, (int) '4');
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream26);
        java.io.OutputStream outputStream28 = null;
        java.io.InputStream inputStream30 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray31 = new byte[] {};
        int int32 = org.apache.commons.io.IOUtils.length(byteArray31);
        int int33 = org.apache.commons.io.IOUtils.read(inputStream30, byteArray31);
        byte[] byteArray34 = org.apache.commons.io.IOUtils.toByteArray(inputStream30);
        java.io.InputStream inputStream36 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray37 = new byte[] {};
        int int38 = org.apache.commons.io.IOUtils.length(byteArray37);
        int int39 = org.apache.commons.io.IOUtils.read(inputStream36, byteArray37);
        byte[] byteArray40 = org.apache.commons.io.IOUtils.toByteArray(inputStream36);
        int int41 = org.apache.commons.io.IOUtils.length(byteArray40);
        org.apache.commons.io.IOUtils.readFully(inputStream30, byteArray40);
        java.io.InputStream inputStream43 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream30);
        java.io.InputStream inputStream45 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray46 = new byte[] {};
        int int47 = org.apache.commons.io.IOUtils.length(byteArray46);
        int int48 = org.apache.commons.io.IOUtils.read(inputStream45, byteArray46);
        org.apache.commons.io.IOUtils.closeQuietly(inputStream45);
        java.io.InputStream inputStream51 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray52 = new byte[] {};
        int int53 = org.apache.commons.io.IOUtils.length(byteArray52);
        int int54 = org.apache.commons.io.IOUtils.read(inputStream51, byteArray52);
        java.lang.String str55 = org.apache.commons.io.IOUtils.toString(byteArray52);
        int int58 = org.apache.commons.io.IOUtils.read(inputStream45, byteArray52, (int) (byte) 10, (int) (short) 0);
        java.lang.String str59 = org.apache.commons.io.IOUtils.toString(byteArray52);
        int int60 = org.apache.commons.io.IOUtils.length(byteArray52);
        int int61 = org.apache.commons.io.IOUtils.read(inputStream30, byteArray52);
        // The following exception was thrown during execution in test generation
        try {
            long long62 = org.apache.commons.io.IOUtils.copyLarge(inputStream26, outputStream28, byteArray52);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.OutputStream.write(byte[], int, int)\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertNotNull(lineIterator9);
        org.junit.Assert.assertNotNull(inputStream11);
        org.junit.Assert.assertNotNull(inputStream13);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(inputStream23);
        org.junit.Assert.assertNotNull(inputStream24);
        org.junit.Assert.assertNotNull(inputStream26);
        org.junit.Assert.assertNotNull(inputStream30);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertNotNull(inputStream36);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(inputStream43);
        org.junit.Assert.assertNotNull(inputStream45);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(inputStream51);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
    }

    @Test
    public void test1696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1696");
        char[] charArray0 = new char[] {};
        int int1 = org.apache.commons.io.IOUtils.length(charArray0);
        java.io.Writer writer2 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray0, writer2);
        int int4 = org.apache.commons.io.IOUtils.length(charArray0);
        java.io.Writer writer5 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray0, writer5);
        int int7 = org.apache.commons.io.IOUtils.length(charArray0);
        java.io.OutputStream outputStream8 = null;
        java.nio.charset.Charset charset9 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(charArray0, outputStream8, charset9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.OutputStream.write(byte[])\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray0);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray0), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray0), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test1697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1697");
        java.io.Reader reader0 = null;
        char[] charArray1 = new char[] {};
        int int2 = org.apache.commons.io.IOUtils.length(charArray1);
        java.io.Writer writer3 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray1, writer3);
        java.io.Writer writer5 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray1, writer5);
        int int7 = org.apache.commons.io.IOUtils.read(reader0, charArray1);
        java.io.OutputStream outputStream8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(charArray1, outputStream8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.OutputStream.write(byte[])\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray1);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray1), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray1), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray1), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test1698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1698");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream4);
        java.io.InputStream inputStream7 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray8 = new byte[] {};
        int int9 = org.apache.commons.io.IOUtils.length(byteArray8);
        int int10 = org.apache.commons.io.IOUtils.read(inputStream7, byteArray8);
        byte[] byteArray11 = org.apache.commons.io.IOUtils.toByteArray(inputStream7);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer12 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream7, iOExceptionConsumer12);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream7);
        java.io.BufferedInputStream bufferedInputStream16 = org.apache.commons.io.IOUtils.buffer(inputStream7, (int) (byte) 10);
        boolean boolean17 = org.apache.commons.io.IOUtils.contentEquals(inputStream4, inputStream7);
        java.io.InputStream inputStream19 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray20 = new byte[] {};
        int int21 = org.apache.commons.io.IOUtils.length(byteArray20);
        int int22 = org.apache.commons.io.IOUtils.read(inputStream19, byteArray20);
        byte[] byteArray23 = org.apache.commons.io.IOUtils.toByteArray(inputStream19);
        byte[] byteArray25 = org.apache.commons.io.IOUtils.toByteArray(inputStream19, (int) (short) 0);
        long long27 = org.apache.commons.io.IOUtils.skip(inputStream19, 100L);
        java.io.InputStream inputStream28 = null;
        java.io.InputStream inputStream29 = null;
        java.io.OutputStream outputStream30 = null;
        byte[] byteArray33 = new byte[] {};
        int int34 = org.apache.commons.io.IOUtils.length(byteArray33);
        java.io.OutputStream outputStream35 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray33, outputStream35);
        long long37 = org.apache.commons.io.IOUtils.copyLarge(inputStream29, outputStream30, 0L, (long) (byte) -1, byteArray33);
        java.io.OutputStream outputStream38 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray33, outputStream38);
        org.apache.commons.io.IOUtils.readFully(inputStream28, byteArray33);
        int int41 = org.apache.commons.io.IOUtils.read(inputStream19, byteArray33);
        int int42 = org.apache.commons.io.IOUtils.read(inputStream7, byteArray33);
        int int45 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray33, 1, (int) (short) 0);
        java.io.BufferedInputStream bufferedInputStream47 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 100);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.InputStream) bufferedInputStream47);
        java.io.OutputStream outputStream49 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long52 = org.apache.commons.io.IOUtils.copyLarge((java.io.InputStream) bufferedInputStream47, outputStream49, (long) (-1), (long) '/');
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Stream closed");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(inputStream7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(inputStream19);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(bufferedInputStream47);
    }

    @Test
    public void test1699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1699");
        java.io.Reader reader0 = null;
        java.io.Reader reader1 = null;
        char[] charArray2 = new char[] {};
        int int3 = org.apache.commons.io.IOUtils.length(charArray2);
        int int4 = org.apache.commons.io.IOUtils.read(reader1, charArray2);
        int int5 = org.apache.commons.io.IOUtils.length(charArray2);
        org.apache.commons.io.IOUtils.readFully(reader0, charArray2);
        int int7 = org.apache.commons.io.IOUtils.length(charArray2);
        java.io.OutputStream outputStream8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(charArray2, outputStream8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.OutputStream.write(byte[])\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray2), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray2), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test1700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1700");
        java.nio.charset.Charset charset1 = null;
        java.io.InputStream inputStream2 = org.apache.commons.io.IOUtils.toInputStream("", charset1);
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream2, (int) (short) 10);
        java.io.OutputStream outputStream5 = null;
        long long7 = org.apache.commons.io.IOUtils.copy(inputStream4, outputStream5, 3);
        java.io.OutputStream outputStream8 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long11 = org.apache.commons.io.IOUtils.copyLarge(inputStream4, outputStream8, 100L, (long) 0);
            org.junit.Assert.fail("Expected exception of type java.io.EOFException; message: Bytes to skip: 100 actual: 0");
        } catch (java.io.EOFException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream2);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
    }

    @Test
    public void test1701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1701");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        java.io.OutputStream outputStream10 = null;
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream10, (long) (short) 0, (-1L));
        char[] charArray14 = org.apache.commons.io.IOUtils.toCharArray(inputStream1);
        long long16 = org.apache.commons.io.IOUtils.skip(inputStream1, (long) (byte) 1);
        java.nio.charset.Charset charset17 = null;
        java.util.List<java.lang.String> strList18 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset17);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.LineIterator lineIterator20 = org.apache.commons.io.IOUtils.lineIterator(inputStream1, "");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[]");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(strList18);
    }

    @Test
    public void test1702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1702");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.util.List<java.lang.String> strList4 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.OutputStream outputStream5 = null;
        long long6 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream5);
        java.io.Writer writer7 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer7);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream11 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray12 = new byte[] {};
        int int13 = org.apache.commons.io.IOUtils.length(byteArray12);
        int int14 = org.apache.commons.io.IOUtils.read(inputStream11, byteArray12);
        byte[] byteArray15 = org.apache.commons.io.IOUtils.toByteArray(inputStream11);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer16 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream11, iOExceptionConsumer16);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream11);
        java.io.BufferedInputStream bufferedInputStream20 = org.apache.commons.io.IOUtils.buffer(inputStream11, (int) (byte) 10);
        java.io.InputStream inputStream22 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream11, (int) (byte) 1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer23 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream11, iOExceptionConsumer23);
        java.io.OutputStream outputStream25 = null;
        java.io.InputStream inputStream27 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray28 = new byte[] {};
        int int29 = org.apache.commons.io.IOUtils.length(byteArray28);
        int int30 = org.apache.commons.io.IOUtils.read(inputStream27, byteArray28);
        byte[] byteArray31 = org.apache.commons.io.IOUtils.toByteArray(inputStream27);
        java.io.InputStream inputStream33 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray34 = new byte[] {};
        int int35 = org.apache.commons.io.IOUtils.length(byteArray34);
        int int36 = org.apache.commons.io.IOUtils.read(inputStream33, byteArray34);
        byte[] byteArray37 = org.apache.commons.io.IOUtils.toByteArray(inputStream33);
        int int38 = org.apache.commons.io.IOUtils.length(byteArray37);
        org.apache.commons.io.IOUtils.readFully(inputStream27, byteArray37);
        long long40 = org.apache.commons.io.IOUtils.copyLarge(inputStream11, outputStream25, byteArray37);
        boolean boolean41 = org.apache.commons.io.IOUtils.contentEquals(inputStream1, inputStream11);
        java.io.BufferedInputStream bufferedInputStream42 = org.apache.commons.io.IOUtils.buffer(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) bufferedInputStream42);
        // The following exception was thrown during execution in test generation
        try {
            long long45 = org.apache.commons.io.IOUtils.skip((java.io.InputStream) bufferedInputStream42, (long) '4');
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Stream closed");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(inputStream11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream20);
        org.junit.Assert.assertNotNull(inputStream22);
        org.junit.Assert.assertNotNull(inputStream27);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(inputStream33);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(bufferedInputStream42);
    }

    @Test
    public void test1703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1703");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream5 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray("");
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray10);
        long long12 = org.apache.commons.io.IOUtils.copyLarge(inputStream4, outputStream5, 0L, 0L, byteArray10);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, byteArray10);
        java.io.BufferedInputStream bufferedInputStream15 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.nio.charset.Charset charset16 = null;
        java.util.List<java.lang.String> strList17 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset16);
        java.io.OutputStream outputStream18 = null;
        long long21 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream18, 0L, (long) 0);
        java.io.BufferedInputStream bufferedInputStream22 = org.apache.commons.io.IOUtils.buffer(inputStream1);
        org.apache.commons.io.function.IOConsumer<java.io.IOException> iOExceptionIOConsumer23 = null;
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1, iOExceptionIOConsumer23);
        java.nio.charset.Charset charset25 = null;
        java.lang.String str26 = org.apache.commons.io.IOUtils.toString(inputStream1, charset25);
        java.io.OutputStream outputStream27 = null;
        long long28 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream27);
        java.io.InputStream inputStream30 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream31 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray36 = org.apache.commons.io.IOUtils.toByteArray("");
        int int37 = org.apache.commons.io.IOUtils.read(inputStream34, byteArray36);
        long long38 = org.apache.commons.io.IOUtils.copyLarge(inputStream30, outputStream31, 0L, 0L, byteArray36);
        java.nio.charset.Charset charset39 = null;
        java.util.List<java.lang.String> strList40 = org.apache.commons.io.IOUtils.readLines(inputStream30, charset39);
        java.io.InputStream inputStream42 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream43 = null;
        java.io.InputStream inputStream46 = null;
        byte[] byteArray48 = org.apache.commons.io.IOUtils.toByteArray("");
        int int49 = org.apache.commons.io.IOUtils.read(inputStream46, byteArray48);
        long long50 = org.apache.commons.io.IOUtils.copyLarge(inputStream42, outputStream43, 0L, 0L, byteArray48);
        java.nio.charset.Charset charset51 = null;
        java.util.List<java.lang.String> strList52 = org.apache.commons.io.IOUtils.readLines(inputStream42, charset51);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream42);
        boolean boolean54 = org.apache.commons.io.IOUtils.contentEquals(inputStream30, inputStream42);
        java.io.OutputStream outputStream55 = null;
        java.io.InputStream inputStream57 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream58 = null;
        java.io.InputStream inputStream61 = null;
        byte[] byteArray63 = org.apache.commons.io.IOUtils.toByteArray("");
        int int64 = org.apache.commons.io.IOUtils.read(inputStream61, byteArray63);
        long long65 = org.apache.commons.io.IOUtils.copyLarge(inputStream57, outputStream58, 0L, 0L, byteArray63);
        long long66 = org.apache.commons.io.IOUtils.copyLarge(inputStream42, outputStream55, byteArray63);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray63, (int) '#', 4);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Range [35, 35 + 4) out of bounds for length 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream15);
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream22);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertNotNull(inputStream30);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertNotNull(strList40);
        org.junit.Assert.assertNotNull(inputStream42);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertNotNull(strList52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(inputStream57);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 0L + "'", long65 == 0L);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 0L + "'", long66 == 0L);
    }

    @Test
    public void test1704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1704");
        java.io.Reader reader0 = null;
        java.io.Writer writer1 = null;
        java.io.InputStream inputStream3 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray4 = org.apache.commons.io.IOUtils.toByteArray(inputStream3);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream3);
        java.util.List<java.lang.String> strList6 = org.apache.commons.io.IOUtils.readLines(inputStream3);
        java.io.BufferedInputStream bufferedInputStream7 = org.apache.commons.io.IOUtils.buffer(inputStream3);
        java.io.OutputStream outputStream8 = null;
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream3, outputStream8);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream3);
        java.io.InputStream inputStream11 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream3);
        char[] charArray12 = org.apache.commons.io.IOUtils.toCharArray(inputStream3);
        // The following exception was thrown during execution in test generation
        try {
            long long13 = org.apache.commons.io.IOUtils.copyLarge(reader0, writer1, charArray12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[])\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream3);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(bufferedInputStream7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(inputStream11);
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray12), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray12), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray12), "[]");
    }

    @Test
    public void test1705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1705");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream5 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray("");
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray10);
        long long12 = org.apache.commons.io.IOUtils.copyLarge(inputStream4, outputStream5, 0L, 0L, byteArray10);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, byteArray10);
        java.io.BufferedInputStream bufferedInputStream15 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            long long17 = org.apache.commons.io.IOUtils.skip(inputStream1, (-1L));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Skip count must be non-negative, actual: -1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream15);
    }

    @Test
    public void test1706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1706");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.nio.charset.Charset charset6 = null;
        java.util.List<java.lang.String> strList7 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset6);
        java.nio.charset.Charset charset8 = null;
        org.apache.commons.io.LineIterator lineIterator9 = org.apache.commons.io.IOUtils.lineIterator(inputStream1, charset8);
        java.io.InputStream inputStream11 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, 6);
        java.io.BufferedInputStream bufferedInputStream13 = org.apache.commons.io.IOUtils.buffer(inputStream11, 3);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer14 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream11, iOExceptionConsumer14);
        java.io.BufferedInputStream bufferedInputStream17 = org.apache.commons.io.IOUtils.buffer(inputStream11, (int) (byte) 10);
        java.io.Writer writer18 = null;
        org.apache.commons.io.IOUtils.copy(inputStream11, writer18);
        java.io.OutputStream outputStream20 = null;
        java.io.InputStream inputStream22 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream23 = null;
        java.io.InputStream inputStream25 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream26 = null;
        java.io.InputStream inputStream29 = null;
        byte[] byteArray31 = org.apache.commons.io.IOUtils.toByteArray("");
        int int32 = org.apache.commons.io.IOUtils.read(inputStream29, byteArray31);
        long long33 = org.apache.commons.io.IOUtils.copyLarge(inputStream25, outputStream26, 0L, 0L, byteArray31);
        long long34 = org.apache.commons.io.IOUtils.copyLarge(inputStream22, outputStream23, byteArray31);
        java.io.BufferedInputStream bufferedInputStream36 = org.apache.commons.io.IOUtils.buffer(inputStream22, (int) (byte) 10);
        org.apache.commons.io.IOUtils.closeQuietly(inputStream22);
        java.nio.charset.Charset charset38 = null;
        java.util.List<java.lang.String> strList39 = org.apache.commons.io.IOUtils.readLines(inputStream22, charset38);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream22);
        java.io.OutputStream outputStream41 = null;
        int int42 = org.apache.commons.io.IOUtils.copy(inputStream22, outputStream41);
        java.io.InputStream inputStream43 = null;
        boolean boolean44 = org.apache.commons.io.IOUtils.contentEquals(inputStream22, inputStream43);
        java.io.OutputStream outputStream45 = null;
        java.nio.charset.Charset charset47 = null;
        java.io.InputStream inputStream48 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "", charset47);
        java.util.List<java.lang.String> strList49 = org.apache.commons.io.IOUtils.readLines(inputStream48);
        java.io.InputStream inputStream51 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray52 = new byte[] {};
        int int53 = org.apache.commons.io.IOUtils.length(byteArray52);
        int int54 = org.apache.commons.io.IOUtils.read(inputStream51, byteArray52);
        byte[] byteArray55 = org.apache.commons.io.IOUtils.toByteArray(inputStream51);
        int int56 = org.apache.commons.io.IOUtils.length(byteArray55);
        org.apache.commons.io.IOUtils.readFully(inputStream48, byteArray55);
        byte[] byteArray59 = org.apache.commons.io.IOUtils.toByteArray(inputStream48, 0L);
        java.io.OutputStream outputStream60 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray59, outputStream60);
        long long62 = org.apache.commons.io.IOUtils.copyLarge(inputStream22, outputStream45, byteArray59);
        // The following exception was thrown during execution in test generation
        try {
            long long63 = org.apache.commons.io.IOUtils.copyLarge(inputStream11, outputStream20, byteArray59);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.OutputStream.write(byte[], int, int)\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertNotNull(lineIterator9);
        org.junit.Assert.assertNotNull(inputStream11);
        org.junit.Assert.assertNotNull(bufferedInputStream13);
        org.junit.Assert.assertNotNull(bufferedInputStream17);
        org.junit.Assert.assertNotNull(inputStream22);
        org.junit.Assert.assertNotNull(inputStream25);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream36);
        org.junit.Assert.assertNotNull(strList39);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(inputStream48);
        org.junit.Assert.assertNotNull(strList49);
        org.junit.Assert.assertNotNull(inputStream51);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[]");
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 0L + "'", long62 == 0L);
    }

    @Test
    public void test1707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1707");
        java.nio.charset.Charset charset1 = null;
        java.io.InputStream inputStream2 = org.apache.commons.io.IOUtils.toInputStream("\r\n", charset1);
        java.io.OutputStream outputStream3 = null;
        long long6 = org.apache.commons.io.IOUtils.copyLarge(inputStream2, outputStream3, (long) 0, 0L);
        java.nio.charset.Charset charset7 = null;
        java.util.List<java.lang.String> strList8 = org.apache.commons.io.IOUtils.readLines(inputStream2, charset7);
        java.io.OutputStream outputStream10 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList8, "", outputStream10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.OutputStream.write(byte[])\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream2);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(strList8);
    }

    @Test
    public void test1708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1708");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream3 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1);
        java.lang.String str4 = org.apache.commons.io.IOUtils.toString(inputStream1);
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray7);
        java.nio.charset.Charset charset10 = null;
        char[] charArray11 = org.apache.commons.io.IOUtils.toCharArray(inputStream1, charset10);
        java.io.Writer writer12 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(charArray11, writer12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Writer.write(char[])\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[]");
    }

    @Test
    public void test1709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1709");
        java.io.Reader reader0 = null;
        java.io.InputStream inputStream2 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray3 = new byte[] {};
        int int4 = org.apache.commons.io.IOUtils.length(byteArray3);
        int int5 = org.apache.commons.io.IOUtils.read(inputStream2, byteArray3);
        java.io.Writer writer6 = null;
        org.apache.commons.io.IOUtils.copy(inputStream2, writer6);
        java.nio.charset.Charset charset8 = null;
        char[] charArray9 = org.apache.commons.io.IOUtils.toCharArray(inputStream2, charset8);
        // The following exception was thrown during execution in test generation
        try {
            int int12 = org.apache.commons.io.IOUtils.read(reader0, charArray9, (int) (byte) 10, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[], int, int)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[]");
    }

    @Test
    public void test1710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1710");
        byte[] byteArray1 = org.apache.commons.io.IOUtils.toByteArray("");
        int int2 = org.apache.commons.io.IOUtils.length(byteArray1);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str4 = org.apache.commons.io.IOUtils.toString(byteArray1, "hi!");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: hi!");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
    }

    @Test
    public void test1711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1711");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        java.nio.charset.Charset charset10 = null;
        java.util.List<java.lang.String> strList11 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset10);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.nio.charset.Charset charset13 = null;
        java.lang.String str14 = org.apache.commons.io.IOUtils.toString(inputStream1, charset13);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer15 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer15);
        java.nio.charset.Charset charset17 = null;
        org.apache.commons.io.LineIterator lineIterator18 = org.apache.commons.io.IOUtils.lineIterator(inputStream1, charset17);
        java.io.OutputStream outputStream19 = null;
        int int20 = org.apache.commons.io.IOUtils.copy(inputStream1, outputStream19);
        java.io.OutputStream outputStream21 = null;
        long long22 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream21);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.LineIterator lineIterator24 = org.apache.commons.io.IOUtils.lineIterator(inputStream1, "\r\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ??");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(lineIterator18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
    }

    @Test
    public void test1712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1712");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray(inputStream1, (int) (short) 0);
        long long9 = org.apache.commons.io.IOUtils.skip(inputStream1, 100L);
        java.io.InputStream inputStream10 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.LineIterator lineIterator12 = org.apache.commons.io.IOUtils.lineIterator(inputStream10, "hi!");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: hi!");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(inputStream10);
    }

    @Test
    public void test1713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1713");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.util.List<java.lang.String> strList4 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.BufferedInputStream bufferedInputStream5 = org.apache.commons.io.IOUtils.buffer(inputStream1);
        java.io.OutputStream outputStream6 = null;
        long long7 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream6);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream9 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1);
        char[] charArray10 = org.apache.commons.io.IOUtils.toCharArray(inputStream1);
        java.io.OutputStream outputStream11 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(charArray10, outputStream11, "hi!");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: hi!");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertNotNull(bufferedInputStream5);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(inputStream9);
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[]");
    }

    @Test
    public void test1714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1714");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "hi!");
        java.io.InputStream inputStream3 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray4 = new byte[] {};
        int int5 = org.apache.commons.io.IOUtils.length(byteArray4);
        int int6 = org.apache.commons.io.IOUtils.read(inputStream3, byteArray4);
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray(inputStream3);
        byte[] byteArray9 = org.apache.commons.io.IOUtils.toByteArray(inputStream3, (int) (short) 0);
        java.io.BufferedInputStream bufferedInputStream10 = org.apache.commons.io.IOUtils.buffer(inputStream3);
        byte[] byteArray11 = org.apache.commons.io.IOUtils.toByteArray((java.io.InputStream) bufferedInputStream10);
        int int14 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray11, 0, 0);
        byte[] byteArray15 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream3);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream10);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[104, 105, 33]");
    }

    @Test
    public void test1715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1715");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream3 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1);
        java.io.Writer writer4 = null;
        java.nio.charset.Charset charset5 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer4, charset5);
        // The following exception was thrown during execution in test generation
        try {
            java.io.BufferedInputStream bufferedInputStream8 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Buffer size <= 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream3);
    }

    @Test
    public void test1716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1716");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        java.io.OutputStream outputStream10 = null;
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream10, (long) (short) 0, (-1L));
        java.lang.String str14 = org.apache.commons.io.IOUtils.toString(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly(inputStream1);
        org.apache.commons.io.function.IOConsumer<java.io.IOException> iOExceptionIOConsumer16 = null;
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1, iOExceptionIOConsumer16);
        java.io.InputStream inputStream19 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray20 = new byte[] {};
        int int21 = org.apache.commons.io.IOUtils.length(byteArray20);
        int int22 = org.apache.commons.io.IOUtils.read(inputStream19, byteArray20);
        java.io.InputStream inputStream23 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream19);
        java.nio.charset.Charset charset24 = null;
        org.apache.commons.io.LineIterator lineIterator25 = org.apache.commons.io.IOUtils.lineIterator(inputStream23, charset24);
        java.io.InputStream inputStream26 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream23);
        long long28 = org.apache.commons.io.IOUtils.skip(inputStream23, (long) 10);
        java.io.BufferedInputStream bufferedInputStream29 = org.apache.commons.io.IOUtils.buffer(inputStream23);
        boolean boolean30 = org.apache.commons.io.IOUtils.contentEquals(inputStream1, (java.io.InputStream) bufferedInputStream29);
        org.apache.commons.io.function.IOConsumer<java.io.IOException> iOExceptionIOConsumer31 = null;
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1, iOExceptionIOConsumer31);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(inputStream19);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(inputStream23);
        org.junit.Assert.assertNotNull(lineIterator25);
        org.junit.Assert.assertNotNull(inputStream26);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
    }

    @Test
    public void test1717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1717");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream5 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray("");
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray10);
        long long12 = org.apache.commons.io.IOUtils.copyLarge(inputStream4, outputStream5, 0L, 0L, byteArray10);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, byteArray10);
        java.io.BufferedInputStream bufferedInputStream15 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        org.apache.commons.io.IOUtils.closeQuietly(inputStream1);
        java.nio.charset.Charset charset17 = null;
        java.util.List<java.lang.String> strList18 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset17);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.io.OutputStream outputStream20 = null;
        int int21 = org.apache.commons.io.IOUtils.copy(inputStream1, outputStream20);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer22 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) outputStream20, iOExceptionConsumer22);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream15);
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
    }

    @Test
    public void test1718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1718");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        java.io.OutputStream outputStream10 = null;
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream10, (long) (short) 0, (-1L));
        java.lang.String str14 = org.apache.commons.io.IOUtils.toString(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly(inputStream1);
        java.io.BufferedInputStream bufferedInputStream17 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) '\\');
        java.io.OutputStream outputStream18 = null;
        int int19 = org.apache.commons.io.IOUtils.copy(inputStream1, outputStream18);
        byte[] byteArray20 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(bufferedInputStream17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
    }

    @Test
    public void test1719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1719");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream5 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray("");
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray10);
        long long12 = org.apache.commons.io.IOUtils.copyLarge(inputStream4, outputStream5, 0L, 0L, byteArray10);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, byteArray10);
        java.io.BufferedInputStream bufferedInputStream15 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.nio.charset.Charset charset16 = null;
        java.util.List<java.lang.String> strList17 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset16);
        java.io.OutputStream outputStream18 = null;
        long long21 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream18, 0L, (long) 0);
        java.io.OutputStream outputStream22 = null;
        long long25 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream22, (long) (short) -1, (long) 10);
        byte[] byteArray26 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.nio.charset.Charset charset27 = null;
        org.apache.commons.io.LineIterator lineIterator28 = org.apache.commons.io.IOUtils.lineIterator(inputStream1, charset27);
        java.io.OutputStream outputStream29 = null;
        java.io.InputStream inputStream33 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray34 = org.apache.commons.io.IOUtils.toByteArray(inputStream33);
        java.io.InputStream inputStream36 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray37 = new byte[] {};
        int int38 = org.apache.commons.io.IOUtils.length(byteArray37);
        int int39 = org.apache.commons.io.IOUtils.read(inputStream36, byteArray37);
        byte[] byteArray40 = org.apache.commons.io.IOUtils.toByteArray(inputStream36);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer41 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream36, iOExceptionConsumer41);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream36);
        java.io.BufferedInputStream bufferedInputStream45 = org.apache.commons.io.IOUtils.buffer(inputStream36, (int) (byte) 10);
        boolean boolean46 = org.apache.commons.io.IOUtils.contentEquals(inputStream33, inputStream36);
        java.io.InputStream inputStream48 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray49 = new byte[] {};
        int int50 = org.apache.commons.io.IOUtils.length(byteArray49);
        int int51 = org.apache.commons.io.IOUtils.read(inputStream48, byteArray49);
        byte[] byteArray52 = org.apache.commons.io.IOUtils.toByteArray(inputStream48);
        byte[] byteArray54 = org.apache.commons.io.IOUtils.toByteArray(inputStream48, (int) (short) 0);
        long long56 = org.apache.commons.io.IOUtils.skip(inputStream48, 100L);
        java.io.InputStream inputStream57 = null;
        java.io.InputStream inputStream58 = null;
        java.io.OutputStream outputStream59 = null;
        byte[] byteArray62 = new byte[] {};
        int int63 = org.apache.commons.io.IOUtils.length(byteArray62);
        java.io.OutputStream outputStream64 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray62, outputStream64);
        long long66 = org.apache.commons.io.IOUtils.copyLarge(inputStream58, outputStream59, 0L, (long) (byte) -1, byteArray62);
        java.io.OutputStream outputStream67 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray62, outputStream67);
        org.apache.commons.io.IOUtils.readFully(inputStream57, byteArray62);
        int int70 = org.apache.commons.io.IOUtils.read(inputStream48, byteArray62);
        int int71 = org.apache.commons.io.IOUtils.read(inputStream36, byteArray62);
        java.io.Writer writer72 = null;
        org.apache.commons.io.IOUtils.copy(inputStream36, writer72);
        java.nio.charset.Charset charset74 = null;
        org.apache.commons.io.LineIterator lineIterator75 = org.apache.commons.io.IOUtils.lineIterator(inputStream36, charset74);
        java.io.InputStream inputStream77 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream78 = null;
        java.io.InputStream inputStream81 = null;
        byte[] byteArray83 = org.apache.commons.io.IOUtils.toByteArray("");
        int int84 = org.apache.commons.io.IOUtils.read(inputStream81, byteArray83);
        long long85 = org.apache.commons.io.IOUtils.copyLarge(inputStream77, outputStream78, 0L, 0L, byteArray83);
        java.io.BufferedInputStream bufferedInputStream86 = org.apache.commons.io.IOUtils.buffer(inputStream77);
        byte[] byteArray87 = org.apache.commons.io.IOUtils.toByteArray((java.io.InputStream) bufferedInputStream86);
        int int88 = org.apache.commons.io.IOUtils.read(inputStream36, byteArray87);
        long long89 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream29, (long) (byte) -1, (long) (byte) 100, byteArray87);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream15);
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertNotNull(lineIterator28);
        org.junit.Assert.assertNotNull(inputStream33);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertNotNull(inputStream36);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(inputStream48);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 0L + "'", long66 == 0L);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(lineIterator75);
        org.junit.Assert.assertNotNull(inputStream77);
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 0L + "'", long85 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream86);
        org.junit.Assert.assertNotNull(byteArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertTrue("'" + long89 + "' != '" + 0L + "'", long89 == 0L);
    }

    @Test
    public void test1720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1720");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        org.apache.commons.io.IOUtils.closeQuietly(inputStream1);
        java.io.InputStream inputStream7 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray8 = new byte[] {};
        int int9 = org.apache.commons.io.IOUtils.length(byteArray8);
        int int10 = org.apache.commons.io.IOUtils.read(inputStream7, byteArray8);
        java.lang.String str11 = org.apache.commons.io.IOUtils.toString(byteArray8);
        int int14 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray8, (int) (byte) 10, (int) (short) 0);
        java.nio.charset.Charset charset15 = null;
        java.lang.String str16 = org.apache.commons.io.IOUtils.toString(inputStream1, charset15);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(inputStream7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
    }

    @Test
    public void test1721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1721");
        java.io.Reader reader0 = null;
        java.io.Reader reader1 = null;
        java.io.Reader reader2 = null;
        java.io.Reader reader3 = null;
        java.io.Writer writer4 = null;
        char[] charArray7 = new char[] {};
        int int8 = org.apache.commons.io.IOUtils.length(charArray7);
        java.io.Writer writer9 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray7, writer9);
        java.io.Writer writer11 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray7, writer11);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(reader3, writer4, 0L, (long) (byte) 100, charArray7);
        int int14 = org.apache.commons.io.IOUtils.read(reader2, charArray7);
        int int15 = org.apache.commons.io.IOUtils.length(charArray7);
        java.io.Writer writer16 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray7, writer16);
        org.apache.commons.io.IOUtils.readFully(reader1, charArray7);
        // The following exception was thrown during execution in test generation
        try {
            int int21 = org.apache.commons.io.IOUtils.read(reader0, charArray7, (int) (byte) 100, 6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[], int, int)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test1722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1722");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream3 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1);
        java.io.Writer writer4 = null;
        java.nio.charset.Charset charset5 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer4, charset5);
        java.io.OutputStream outputStream7 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray("");
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray10);
        java.lang.String str12 = org.apache.commons.io.IOUtils.toString(byteArray10);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream7, byteArray10);
        java.io.Writer writer14 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.copy(inputStream1, writer14, "");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream3);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
    }

    @Test
    public void test1723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1723");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.io.InputStream inputStream7 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, (int) (byte) 0);
        java.nio.charset.Charset charset8 = null;
        org.apache.commons.io.LineIterator lineIterator9 = org.apache.commons.io.IOUtils.lineIterator(inputStream7, charset8);
        java.nio.charset.Charset charset10 = null;
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.IOUtils.lineIterator(inputStream7, charset10);
        java.io.Writer writer12 = null;
        org.apache.commons.io.IOUtils.copy(inputStream7, writer12);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.skipFully(inputStream7, (long) '#');
            org.junit.Assert.fail("Expected exception of type java.io.EOFException; message: Bytes to skip: 35 actual: 0");
        } catch (java.io.EOFException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(inputStream7);
        org.junit.Assert.assertNotNull(lineIterator9);
        org.junit.Assert.assertNotNull(lineIterator11);
    }

    @Test
    public void test1724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1724");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "\n");
        java.util.List<java.lang.String> strList2 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.OutputStream outputStream3 = null;
        java.io.InputStream inputStream5 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray6 = new byte[] {};
        int int7 = org.apache.commons.io.IOUtils.length(byteArray6);
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray6);
        byte[] byteArray9 = org.apache.commons.io.IOUtils.toByteArray(inputStream5);
        byte[] byteArray11 = org.apache.commons.io.IOUtils.toByteArray(inputStream5, (int) (short) 0);
        byte[] byteArray12 = new byte[] {};
        int int13 = org.apache.commons.io.IOUtils.length(byteArray12);
        org.apache.commons.io.IOUtils.readFully(inputStream5, byteArray12);
        java.lang.String str15 = org.apache.commons.io.IOUtils.toString(byteArray12);
        int int16 = org.apache.commons.io.IOUtils.length(byteArray12);
        long long17 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream3, byteArray12);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(strList2);
        org.junit.Assert.assertNotNull(inputStream5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
    }

    @Test
    public void test1725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1725");
        java.nio.charset.Charset charset1 = null;
        java.io.InputStream inputStream2 = org.apache.commons.io.IOUtils.toInputStream("hi!", charset1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.LineIterator lineIterator4 = org.apache.commons.io.IOUtils.lineIterator(inputStream2, "hi!");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: hi!");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream2);
    }

    @Test
    public void test1726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1726");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.util.List<java.lang.String> strList4 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.OutputStream outputStream5 = null;
        long long8 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream5, (long) 0, 0L);
        java.io.InputStream inputStream10 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, 100);
        byte[] byteArray15 = new byte[] { (byte) 100, (byte) 10, (byte) 10, (byte) 10 };
        // The following exception was thrown during execution in test generation
        try {
            int int18 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray15, (int) '#', (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Range [35, 35 + 1) out of bounds for length 4");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(inputStream10);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[100, 10, 10, 10]");
    }

    @Test
    public void test1727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1727");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.nio.charset.Charset charset6 = null;
        java.util.List<java.lang.String> strList7 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset6);
        java.nio.charset.Charset charset8 = null;
        org.apache.commons.io.LineIterator lineIterator9 = org.apache.commons.io.IOUtils.lineIterator(inputStream1, charset8);
        java.io.InputStream inputStream11 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, 6);
        java.io.BufferedInputStream bufferedInputStream13 = org.apache.commons.io.IOUtils.buffer(inputStream11, 3);
        java.io.InputStream inputStream14 = org.apache.commons.io.IOUtils.toBufferedInputStream((java.io.InputStream) bufferedInputStream13);
        java.io.BufferedInputStream bufferedInputStream16 = org.apache.commons.io.IOUtils.buffer((java.io.InputStream) bufferedInputStream13, 2);
        java.io.Writer writer17 = null;
        java.nio.charset.Charset charset18 = null;
        org.apache.commons.io.IOUtils.copy((java.io.InputStream) bufferedInputStream13, writer17, charset18);
        long long21 = org.apache.commons.io.IOUtils.skip((java.io.InputStream) bufferedInputStream13, (long) '#');
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertNotNull(lineIterator9);
        org.junit.Assert.assertNotNull(inputStream11);
        org.junit.Assert.assertNotNull(bufferedInputStream13);
        org.junit.Assert.assertNotNull(inputStream14);
        org.junit.Assert.assertNotNull(bufferedInputStream16);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
    }

    @Test
    public void test1728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1728");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        java.nio.charset.Charset charset10 = null;
        java.util.List<java.lang.String> strList11 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset10);
        java.io.InputStream inputStream13 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream14 = null;
        java.io.InputStream inputStream17 = null;
        byte[] byteArray19 = org.apache.commons.io.IOUtils.toByteArray("");
        int int20 = org.apache.commons.io.IOUtils.read(inputStream17, byteArray19);
        long long21 = org.apache.commons.io.IOUtils.copyLarge(inputStream13, outputStream14, 0L, 0L, byteArray19);
        java.nio.charset.Charset charset22 = null;
        java.util.List<java.lang.String> strList23 = org.apache.commons.io.IOUtils.readLines(inputStream13, charset22);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream13);
        boolean boolean25 = org.apache.commons.io.IOUtils.contentEquals(inputStream1, inputStream13);
        java.io.OutputStream outputStream26 = null;
        java.io.InputStream inputStream28 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream29 = null;
        java.io.InputStream inputStream32 = null;
        byte[] byteArray34 = org.apache.commons.io.IOUtils.toByteArray("");
        int int35 = org.apache.commons.io.IOUtils.read(inputStream32, byteArray34);
        long long36 = org.apache.commons.io.IOUtils.copyLarge(inputStream28, outputStream29, 0L, 0L, byteArray34);
        long long37 = org.apache.commons.io.IOUtils.copyLarge(inputStream13, outputStream26, byteArray34);
        java.io.Writer writer38 = null;
        java.nio.charset.Charset charset39 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(byteArray34, writer38, charset39);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Writer.write(String)\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertNotNull(inputStream13);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(strList23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(inputStream28);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
    }

    @Test
    public void test1729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1729");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray(inputStream1, (int) (short) 0);
        java.io.BufferedInputStream bufferedInputStream8 = org.apache.commons.io.IOUtils.buffer(inputStream1);
        java.nio.charset.Charset charset9 = null;
        org.apache.commons.io.LineIterator lineIterator10 = org.apache.commons.io.IOUtils.lineIterator(inputStream1, charset9);
        char[] charArray11 = org.apache.commons.io.IOUtils.toCharArray(inputStream1);
        java.io.Writer writer12 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(charArray11, writer12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Writer.write(char[])\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream8);
        org.junit.Assert.assertNotNull(lineIterator10);
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[]");
    }

    @Test
    public void test1730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1730");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray(inputStream1, (int) (short) 0);
        java.io.BufferedInputStream bufferedInputStream8 = org.apache.commons.io.IOUtils.buffer(inputStream1);
        org.apache.commons.io.function.IOConsumer<java.io.IOException> iOExceptionIOConsumer9 = null;
        org.apache.commons.io.IOUtils.close((java.io.Closeable) bufferedInputStream8, iOExceptionIOConsumer9);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str11 = org.apache.commons.io.IOUtils.toString((java.io.InputStream) bufferedInputStream8);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Stream closed");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream8);
    }

    @Test
    public void test1731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1731");
        java.io.Reader reader0 = null;
        char[] charArray1 = new char[] {};
        int int2 = org.apache.commons.io.IOUtils.length(charArray1);
        int int3 = org.apache.commons.io.IOUtils.read(reader0, charArray1);
        java.io.Writer writer4 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray1, writer4);
        java.io.OutputStream outputStream6 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(charArray1, outputStream6, "\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ?");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray1);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray1), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray1), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray1), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test1732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1732");
        java.io.Reader reader0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.BufferedReader bufferedReader2 = org.apache.commons.io.IOUtils.toBufferedReader(reader0, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1733");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.nio.charset.Charset charset6 = null;
        java.util.List<java.lang.String> strList7 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset6);
        java.nio.charset.Charset charset8 = null;
        org.apache.commons.io.LineIterator lineIterator9 = org.apache.commons.io.IOUtils.lineIterator(inputStream1, charset8);
        java.io.InputStream inputStream11 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, 6);
        java.io.BufferedInputStream bufferedInputStream13 = org.apache.commons.io.IOUtils.buffer(inputStream11, 3);
        java.io.InputStream inputStream15 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray16 = org.apache.commons.io.IOUtils.toByteArray(inputStream15);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream15);
        java.util.List<java.lang.String> strList18 = org.apache.commons.io.IOUtils.readLines(inputStream15);
        java.io.OutputStream outputStream19 = null;
        long long20 = org.apache.commons.io.IOUtils.copyLarge(inputStream15, outputStream19);
        java.io.Writer writer21 = null;
        org.apache.commons.io.IOUtils.copy(inputStream15, writer21);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream15);
        java.io.InputStream inputStream25 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray26 = new byte[] {};
        int int27 = org.apache.commons.io.IOUtils.length(byteArray26);
        int int28 = org.apache.commons.io.IOUtils.read(inputStream25, byteArray26);
        byte[] byteArray29 = org.apache.commons.io.IOUtils.toByteArray(inputStream25);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer30 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream25, iOExceptionConsumer30);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream25);
        java.io.BufferedInputStream bufferedInputStream34 = org.apache.commons.io.IOUtils.buffer(inputStream25, (int) (byte) 10);
        java.io.InputStream inputStream36 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream25, (int) (byte) 1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer37 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream25, iOExceptionConsumer37);
        java.io.OutputStream outputStream39 = null;
        java.io.InputStream inputStream41 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray42 = new byte[] {};
        int int43 = org.apache.commons.io.IOUtils.length(byteArray42);
        int int44 = org.apache.commons.io.IOUtils.read(inputStream41, byteArray42);
        byte[] byteArray45 = org.apache.commons.io.IOUtils.toByteArray(inputStream41);
        java.io.InputStream inputStream47 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray48 = new byte[] {};
        int int49 = org.apache.commons.io.IOUtils.length(byteArray48);
        int int50 = org.apache.commons.io.IOUtils.read(inputStream47, byteArray48);
        byte[] byteArray51 = org.apache.commons.io.IOUtils.toByteArray(inputStream47);
        int int52 = org.apache.commons.io.IOUtils.length(byteArray51);
        org.apache.commons.io.IOUtils.readFully(inputStream41, byteArray51);
        long long54 = org.apache.commons.io.IOUtils.copyLarge(inputStream25, outputStream39, byteArray51);
        boolean boolean55 = org.apache.commons.io.IOUtils.contentEquals(inputStream15, inputStream25);
        java.io.BufferedInputStream bufferedInputStream56 = org.apache.commons.io.IOUtils.buffer(inputStream15);
        java.io.BufferedInputStream bufferedInputStream58 = org.apache.commons.io.IOUtils.buffer(inputStream15, (int) (short) 100);
        boolean boolean59 = org.apache.commons.io.IOUtils.contentEquals(inputStream11, inputStream15);
        java.nio.charset.Charset charset60 = null;
        java.lang.String str61 = org.apache.commons.io.IOUtils.toString(inputStream15, charset60);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertNotNull(lineIterator9);
        org.junit.Assert.assertNotNull(inputStream11);
        org.junit.Assert.assertNotNull(bufferedInputStream13);
        org.junit.Assert.assertNotNull(inputStream15);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(inputStream25);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream34);
        org.junit.Assert.assertNotNull(inputStream36);
        org.junit.Assert.assertNotNull(inputStream41);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
        org.junit.Assert.assertNotNull(inputStream47);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(bufferedInputStream56);
        org.junit.Assert.assertNotNull(bufferedInputStream58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
    }

    @Test
    public void test1734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1734");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        long long9 = org.apache.commons.io.IOUtils.skip(inputStream1, (long) (byte) 100);
        java.lang.String str10 = org.apache.commons.io.IOUtils.toString(inputStream1);
        java.io.Writer writer11 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer11);
        java.io.OutputStream outputStream13 = null;
        java.io.InputStream inputStream15 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray16 = org.apache.commons.io.IOUtils.toByteArray(inputStream15);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream15);
        java.util.List<java.lang.String> strList18 = org.apache.commons.io.IOUtils.readLines(inputStream15);
        java.io.OutputStream outputStream19 = null;
        long long20 = org.apache.commons.io.IOUtils.copyLarge(inputStream15, outputStream19);
        java.io.OutputStream outputStream21 = null;
        java.io.InputStream inputStream25 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray26 = new byte[] {};
        int int27 = org.apache.commons.io.IOUtils.length(byteArray26);
        int int28 = org.apache.commons.io.IOUtils.read(inputStream25, byteArray26);
        long long29 = org.apache.commons.io.IOUtils.copyLarge(inputStream15, outputStream21, (-1L), 1L, byteArray26);
        long long30 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream13, byteArray26);
        java.util.List<java.lang.String> strList31 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(inputStream15);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(inputStream25);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(strList31);
    }

    @Test
    public void test1735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1735");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        java.io.Writer writer10 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer10);
        java.util.List<java.lang.String> strList12 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.Writer writer14 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList12, "\r\n", writer14);
        java.io.Writer writer17 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList12, "\r\n", writer17);
        java.io.OutputStream outputStream20 = null;
        java.nio.charset.Charset charset21 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList12, "\r\n", outputStream20, charset21);
        java.io.OutputStream outputStream24 = null;
        java.nio.charset.Charset charset25 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList12, "\r\n", outputStream24, charset25);
        java.io.OutputStream outputStream28 = null;
        java.nio.charset.Charset charset29 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList12, "\n", outputStream28, charset29);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(strList12);
    }

    @Test
    public void test1736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1736");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream3 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1);
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream3);
        java.io.InputStream inputStream6 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream3, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray8 = org.apache.commons.io.IOUtils.readFully(inputStream6, 100);
            org.junit.Assert.fail("Expected exception of type java.io.EOFException; message: Length to read: 100 actual: 0");
        } catch (java.io.EOFException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream3);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(inputStream6);
    }

    @Test
    public void test1737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1737");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream5 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray("");
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray10);
        long long12 = org.apache.commons.io.IOUtils.copyLarge(inputStream4, outputStream5, 0L, 0L, byteArray10);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, byteArray10);
        java.io.BufferedInputStream bufferedInputStream15 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        org.apache.commons.io.IOUtils.closeQuietly(inputStream1);
        java.io.InputStream inputStream18 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray19 = new byte[] {};
        int int20 = org.apache.commons.io.IOUtils.length(byteArray19);
        int int21 = org.apache.commons.io.IOUtils.read(inputStream18, byteArray19);
        byte[] byteArray22 = org.apache.commons.io.IOUtils.toByteArray(inputStream18);
        byte[] byteArray24 = org.apache.commons.io.IOUtils.toByteArray(inputStream18, (int) (short) 0);
        long long26 = org.apache.commons.io.IOUtils.skip(inputStream18, 100L);
        java.io.InputStream inputStream28 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray29 = new byte[] {};
        int int30 = org.apache.commons.io.IOUtils.length(byteArray29);
        int int31 = org.apache.commons.io.IOUtils.read(inputStream28, byteArray29);
        byte[] byteArray32 = org.apache.commons.io.IOUtils.toByteArray(inputStream28);
        byte[] byteArray34 = org.apache.commons.io.IOUtils.toByteArray(inputStream28, (int) (short) 0);
        org.apache.commons.io.IOUtils.readFully(inputStream18, byteArray34);
        org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray34);
        int int37 = org.apache.commons.io.IOUtils.length(byteArray34);
        java.io.Writer writer38 = null;
        java.nio.charset.Charset charset39 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(byteArray34, writer38, charset39);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Writer.write(String)\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream15);
        org.junit.Assert.assertNotNull(inputStream18);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(inputStream28);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
    }

    @Test
    public void test1738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1738");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.util.List<java.lang.String> strList4 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.OutputStream outputStream5 = null;
        long long6 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream5);
        java.io.Writer writer7 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer7);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream11 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray12 = new byte[] {};
        int int13 = org.apache.commons.io.IOUtils.length(byteArray12);
        int int14 = org.apache.commons.io.IOUtils.read(inputStream11, byteArray12);
        byte[] byteArray15 = org.apache.commons.io.IOUtils.toByteArray(inputStream11);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer16 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream11, iOExceptionConsumer16);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream11);
        java.io.BufferedInputStream bufferedInputStream20 = org.apache.commons.io.IOUtils.buffer(inputStream11, (int) (byte) 10);
        java.io.InputStream inputStream22 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream11, (int) (byte) 1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer23 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream11, iOExceptionConsumer23);
        java.io.OutputStream outputStream25 = null;
        java.io.InputStream inputStream27 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray28 = new byte[] {};
        int int29 = org.apache.commons.io.IOUtils.length(byteArray28);
        int int30 = org.apache.commons.io.IOUtils.read(inputStream27, byteArray28);
        byte[] byteArray31 = org.apache.commons.io.IOUtils.toByteArray(inputStream27);
        java.io.InputStream inputStream33 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray34 = new byte[] {};
        int int35 = org.apache.commons.io.IOUtils.length(byteArray34);
        int int36 = org.apache.commons.io.IOUtils.read(inputStream33, byteArray34);
        byte[] byteArray37 = org.apache.commons.io.IOUtils.toByteArray(inputStream33);
        int int38 = org.apache.commons.io.IOUtils.length(byteArray37);
        org.apache.commons.io.IOUtils.readFully(inputStream27, byteArray37);
        long long40 = org.apache.commons.io.IOUtils.copyLarge(inputStream11, outputStream25, byteArray37);
        boolean boolean41 = org.apache.commons.io.IOUtils.contentEquals(inputStream1, inputStream11);
        java.io.BufferedInputStream bufferedInputStream42 = org.apache.commons.io.IOUtils.buffer(inputStream1);
        java.io.BufferedInputStream bufferedInputStream44 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (short) 100);
        java.io.InputStream inputStream46 = org.apache.commons.io.IOUtils.toBufferedInputStream((java.io.InputStream) bufferedInputStream44, 6);
        java.io.Writer writer47 = null;
        java.nio.charset.Charset charset48 = null;
        org.apache.commons.io.IOUtils.copy(inputStream46, writer47, charset48);
        java.io.OutputStream outputStream50 = null;
        int int51 = org.apache.commons.io.IOUtils.copy(inputStream46, outputStream50);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(inputStream11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream20);
        org.junit.Assert.assertNotNull(inputStream22);
        org.junit.Assert.assertNotNull(inputStream27);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(inputStream33);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(bufferedInputStream42);
        org.junit.Assert.assertNotNull(bufferedInputStream44);
        org.junit.Assert.assertNotNull(inputStream46);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
    }

    @Test
    public void test1739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1739");
        java.io.Reader reader0 = null;
        java.io.Writer writer1 = null;
        java.io.InputStream inputStream5 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray6 = org.apache.commons.io.IOUtils.toByteArray(inputStream5);
        java.util.List<java.lang.String> strList7 = org.apache.commons.io.IOUtils.readLines(inputStream5);
        long long9 = org.apache.commons.io.IOUtils.skip(inputStream5, (long) '/');
        java.io.Writer writer10 = null;
        org.apache.commons.io.IOUtils.copy(inputStream5, writer10);
        java.nio.charset.Charset charset12 = null;
        org.apache.commons.io.LineIterator lineIterator13 = org.apache.commons.io.IOUtils.lineIterator(inputStream5, charset12);
        java.io.InputStream inputStream15 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray16 = org.apache.commons.io.IOUtils.toByteArray(inputStream15);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream15);
        java.util.List<java.lang.String> strList18 = org.apache.commons.io.IOUtils.readLines(inputStream15);
        java.io.OutputStream outputStream19 = null;
        long long20 = org.apache.commons.io.IOUtils.copyLarge(inputStream15, outputStream19);
        java.io.Writer writer21 = null;
        org.apache.commons.io.IOUtils.copy(inputStream15, writer21);
        boolean boolean23 = org.apache.commons.io.IOUtils.contentEquals(inputStream5, inputStream15);
        java.nio.charset.Charset charset24 = null;
        char[] charArray25 = org.apache.commons.io.IOUtils.toCharArray(inputStream15, charset24);
        int int26 = org.apache.commons.io.IOUtils.length(charArray25);
        // The following exception was thrown during execution in test generation
        try {
            long long27 = org.apache.commons.io.IOUtils.copyLarge(reader0, writer1, (long) (byte) 1, (long) 5, charArray25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[], int, int)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(lineIterator13);
        org.junit.Assert.assertNotNull(inputStream15);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
    }

    @Test
    public void test1740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1740");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        java.nio.charset.Charset charset10 = null;
        java.util.List<java.lang.String> strList11 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset10);
        java.nio.charset.Charset charset12 = null;
        char[] charArray13 = org.apache.commons.io.IOUtils.toCharArray(inputStream1, charset12);
        byte[] byteArray15 = org.apache.commons.io.IOUtils.toByteArray(inputStream1, (long) (byte) 0);
        java.io.Writer writer16 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(byteArray15, writer16, "\r\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ??");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
    }

    @Test
    public void test1741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1741");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray5 = new byte[] {};
        int int6 = org.apache.commons.io.IOUtils.length(byteArray5);
        int int7 = org.apache.commons.io.IOUtils.read(inputStream4, byteArray5);
        byte[] byteArray8 = org.apache.commons.io.IOUtils.toByteArray(inputStream4);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer9 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream4, iOExceptionConsumer9);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream4);
        java.io.BufferedInputStream bufferedInputStream13 = org.apache.commons.io.IOUtils.buffer(inputStream4, (int) (byte) 10);
        boolean boolean14 = org.apache.commons.io.IOUtils.contentEquals(inputStream1, inputStream4);
        java.io.InputStream inputStream16 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray17 = new byte[] {};
        int int18 = org.apache.commons.io.IOUtils.length(byteArray17);
        int int19 = org.apache.commons.io.IOUtils.read(inputStream16, byteArray17);
        byte[] byteArray20 = org.apache.commons.io.IOUtils.toByteArray(inputStream16);
        byte[] byteArray22 = org.apache.commons.io.IOUtils.toByteArray(inputStream16, (int) (short) 0);
        long long24 = org.apache.commons.io.IOUtils.skip(inputStream16, 100L);
        java.io.InputStream inputStream25 = null;
        java.io.InputStream inputStream26 = null;
        java.io.OutputStream outputStream27 = null;
        byte[] byteArray30 = new byte[] {};
        int int31 = org.apache.commons.io.IOUtils.length(byteArray30);
        java.io.OutputStream outputStream32 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray30, outputStream32);
        long long34 = org.apache.commons.io.IOUtils.copyLarge(inputStream26, outputStream27, 0L, (long) (byte) -1, byteArray30);
        java.io.OutputStream outputStream35 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray30, outputStream35);
        org.apache.commons.io.IOUtils.readFully(inputStream25, byteArray30);
        int int38 = org.apache.commons.io.IOUtils.read(inputStream16, byteArray30);
        int int39 = org.apache.commons.io.IOUtils.read(inputStream4, byteArray30);
        java.io.Writer writer40 = null;
        org.apache.commons.io.IOUtils.copy(inputStream4, writer40);
        java.nio.charset.Charset charset42 = null;
        org.apache.commons.io.LineIterator lineIterator43 = org.apache.commons.io.IOUtils.lineIterator(inputStream4, charset42);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray45 = org.apache.commons.io.IOUtils.readFully(inputStream4, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.io.EOFException; message: Length to read: 10 actual: 0");
        } catch (java.io.EOFException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(inputStream16);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(lineIterator43);
    }

    @Test
    public void test1742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1742");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.BufferedInputStream bufferedInputStream10 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.io.InputStream inputStream12 = org.apache.commons.io.IOUtils.toBufferedInputStream((java.io.InputStream) bufferedInputStream10, (int) '#');
        java.io.OutputStream outputStream13 = null;
        long long16 = org.apache.commons.io.IOUtils.copyLarge(inputStream12, outputStream13, 0L, 0L);
        java.io.InputStream inputStream18 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream19 = null;
        java.io.InputStream inputStream21 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream22 = null;
        java.io.InputStream inputStream25 = null;
        byte[] byteArray27 = org.apache.commons.io.IOUtils.toByteArray("");
        int int28 = org.apache.commons.io.IOUtils.read(inputStream25, byteArray27);
        long long29 = org.apache.commons.io.IOUtils.copyLarge(inputStream21, outputStream22, 0L, 0L, byteArray27);
        long long30 = org.apache.commons.io.IOUtils.copyLarge(inputStream18, outputStream19, byteArray27);
        java.io.BufferedInputStream bufferedInputStream32 = org.apache.commons.io.IOUtils.buffer(inputStream18, (int) (byte) 10);
        org.apache.commons.io.IOUtils.closeQuietly(inputStream18);
        java.io.InputStream inputStream35 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray36 = new byte[] {};
        int int37 = org.apache.commons.io.IOUtils.length(byteArray36);
        int int38 = org.apache.commons.io.IOUtils.read(inputStream35, byteArray36);
        byte[] byteArray39 = org.apache.commons.io.IOUtils.toByteArray(inputStream35);
        byte[] byteArray41 = org.apache.commons.io.IOUtils.toByteArray(inputStream35, (int) (short) 0);
        long long43 = org.apache.commons.io.IOUtils.skip(inputStream35, 100L);
        java.io.InputStream inputStream45 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray46 = new byte[] {};
        int int47 = org.apache.commons.io.IOUtils.length(byteArray46);
        int int48 = org.apache.commons.io.IOUtils.read(inputStream45, byteArray46);
        byte[] byteArray49 = org.apache.commons.io.IOUtils.toByteArray(inputStream45);
        byte[] byteArray51 = org.apache.commons.io.IOUtils.toByteArray(inputStream45, (int) (short) 0);
        org.apache.commons.io.IOUtils.readFully(inputStream35, byteArray51);
        org.apache.commons.io.IOUtils.readFully(inputStream18, byteArray51);
        int int54 = org.apache.commons.io.IOUtils.read(inputStream12, byteArray51);
        int int55 = org.apache.commons.io.IOUtils.length(byteArray51);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream10);
        org.junit.Assert.assertNotNull(inputStream12);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(inputStream18);
        org.junit.Assert.assertNotNull(inputStream21);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream32);
        org.junit.Assert.assertNotNull(inputStream35);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertNotNull(inputStream45);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
    }

    @Test
    public void test1743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1743");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        java.io.OutputStream outputStream10 = null;
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream10, (long) (short) 0, (-1L));
        char[] charArray14 = org.apache.commons.io.IOUtils.toCharArray(inputStream1);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream17 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray18 = new byte[] {};
        int int19 = org.apache.commons.io.IOUtils.length(byteArray18);
        int int20 = org.apache.commons.io.IOUtils.read(inputStream17, byteArray18);
        byte[] byteArray21 = org.apache.commons.io.IOUtils.toByteArray(inputStream17);
        byte[] byteArray23 = org.apache.commons.io.IOUtils.toByteArray(inputStream17, (int) (short) 0);
        java.io.BufferedInputStream bufferedInputStream24 = org.apache.commons.io.IOUtils.buffer(inputStream17);
        byte[] byteArray25 = org.apache.commons.io.IOUtils.toByteArray((java.io.InputStream) bufferedInputStream24);
        int int26 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray25);
        java.util.List<java.lang.String> strList27 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str29 = org.apache.commons.io.IOUtils.toString(inputStream1, "\r\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ??");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[]");
        org.junit.Assert.assertNotNull(inputStream17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(strList27);
    }

    @Test
    public void test1744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1744");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.util.List<java.lang.String> strList4 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer5 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer5);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        byte[] byteArray8 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.io.OutputStream outputStream9 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long12 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream9, (long) 2, (long) (-1));
            org.junit.Assert.fail("Expected exception of type java.io.EOFException; message: Bytes to skip: 2 actual: 0");
        } catch (java.io.EOFException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
    }

    @Test
    public void test1745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1745");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        java.io.Writer writer10 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer10);
        java.util.List<java.lang.String> strList12 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.InputStream inputStream13 = null;
        java.io.OutputStream outputStream14 = null;
        byte[] byteArray17 = new byte[] {};
        int int18 = org.apache.commons.io.IOUtils.length(byteArray17);
        java.io.OutputStream outputStream19 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray17, outputStream19);
        long long21 = org.apache.commons.io.IOUtils.copyLarge(inputStream13, outputStream14, 0L, (long) (byte) -1, byteArray17);
        java.io.OutputStream outputStream22 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray17, outputStream22);
        int int24 = org.apache.commons.io.IOUtils.length(byteArray17);
        java.io.OutputStream outputStream25 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray17, outputStream25);
        int int27 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray17);
        java.io.OutputStream outputStream28 = null;
        int int29 = org.apache.commons.io.IOUtils.copy(inputStream1, outputStream28);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(strList12);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
    }

    @Test
    public void test1746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1746");
        java.io.Reader reader0 = null;
        char[] charArray5 = new char[] { '4', 'a', '#', 'a' };
        int int6 = org.apache.commons.io.IOUtils.length(charArray5);
        int int7 = org.apache.commons.io.IOUtils.length(charArray5);
        // The following exception was thrown during execution in test generation
        try {
            int int8 = org.apache.commons.io.IOUtils.read(reader0, charArray5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[], int, int)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "4a#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "4a#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[4, a, #, a]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 4 + "'", int6 == 4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4 + "'", int7 == 4);
    }

    @Test
    public void test1747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1747");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray(inputStream1, (int) (short) 0);
        long long9 = org.apache.commons.io.IOUtils.skip(inputStream1, 100L);
        long long11 = org.apache.commons.io.IOUtils.skip(inputStream1, (long) 0);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.LineIterator lineIterator13 = org.apache.commons.io.IOUtils.lineIterator(inputStream1, "\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ?");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
    }

    @Test
    public void test1748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1748");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.InputStream inputStream3 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray4 = new byte[] {};
        int int5 = org.apache.commons.io.IOUtils.length(byteArray4);
        int int6 = org.apache.commons.io.IOUtils.read(inputStream3, byteArray4);
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray(inputStream3);
        byte[] byteArray9 = org.apache.commons.io.IOUtils.toByteArray(inputStream3, (int) (short) 0);
        java.io.BufferedInputStream bufferedInputStream10 = org.apache.commons.io.IOUtils.buffer(inputStream3);
        java.io.Writer writer11 = null;
        org.apache.commons.io.IOUtils.copy((java.io.InputStream) bufferedInputStream10, writer11);
        byte[] byteArray14 = org.apache.commons.io.IOUtils.toByteArray((java.io.InputStream) bufferedInputStream10, 0);
        org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray14);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream3);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream10);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
    }

    @Test
    public void test1749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1749");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        java.nio.charset.Charset charset5 = null;
        org.apache.commons.io.LineIterator lineIterator6 = org.apache.commons.io.IOUtils.lineIterator(inputStream1, charset5);
        java.io.InputStream inputStream8 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray9 = new byte[] {};
        int int10 = org.apache.commons.io.IOUtils.length(byteArray9);
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray9);
        byte[] byteArray12 = org.apache.commons.io.IOUtils.toByteArray(inputStream8);
        boolean boolean13 = org.apache.commons.io.IOUtils.contentEquals(inputStream1, inputStream8);
        java.io.Writer writer14 = null;
        org.apache.commons.io.IOUtils.copy(inputStream8, writer14);
        java.io.OutputStream outputStream16 = null;
        java.io.InputStream inputStream17 = null;
        java.io.OutputStream outputStream18 = null;
        byte[] byteArray21 = new byte[] {};
        int int22 = org.apache.commons.io.IOUtils.length(byteArray21);
        java.io.OutputStream outputStream23 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray21, outputStream23);
        long long25 = org.apache.commons.io.IOUtils.copyLarge(inputStream17, outputStream18, 0L, (long) (byte) -1, byteArray21);
        long long26 = org.apache.commons.io.IOUtils.copyLarge(inputStream8, outputStream16, byteArray21);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) outputStream16);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(lineIterator6);
        org.junit.Assert.assertNotNull(inputStream8);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
    }

    @Test
    public void test1750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1750");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.nio.charset.Charset charset6 = null;
        java.util.List<java.lang.String> strList7 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset6);
        java.nio.charset.Charset charset8 = null;
        org.apache.commons.io.LineIterator lineIterator9 = org.apache.commons.io.IOUtils.lineIterator(inputStream1, charset8);
        java.io.InputStream inputStream11 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, 6);
        java.io.BufferedInputStream bufferedInputStream13 = org.apache.commons.io.IOUtils.buffer(inputStream11, 3);
        byte[] byteArray14 = org.apache.commons.io.IOUtils.toByteArray(inputStream11);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertNotNull(lineIterator9);
        org.junit.Assert.assertNotNull(inputStream11);
        org.junit.Assert.assertNotNull(bufferedInputStream13);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
    }

    @Test
    public void test1751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1751");
        java.nio.charset.Charset charset1 = null;
        java.io.InputStream inputStream2 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "", charset1);
        java.util.List<java.lang.String> strList3 = org.apache.commons.io.IOUtils.readLines(inputStream2);
        java.io.InputStream inputStream5 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray6 = new byte[] {};
        int int7 = org.apache.commons.io.IOUtils.length(byteArray6);
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray6);
        byte[] byteArray9 = org.apache.commons.io.IOUtils.toByteArray(inputStream5);
        int int10 = org.apache.commons.io.IOUtils.length(byteArray9);
        org.apache.commons.io.IOUtils.readFully(inputStream2, byteArray9);
        byte[] byteArray13 = org.apache.commons.io.IOUtils.toByteArray(inputStream2, 0L);
        java.lang.String str14 = org.apache.commons.io.IOUtils.toString(byteArray13);
        org.junit.Assert.assertNotNull(inputStream2);
        org.junit.Assert.assertNotNull(strList3);
        org.junit.Assert.assertNotNull(inputStream5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
    }

    @Test
    public void test1752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1752");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream3 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1);
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream3);
        java.io.BufferedInputStream bufferedInputStream6 = org.apache.commons.io.IOUtils.buffer(inputStream4, 3);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.InputStream) bufferedInputStream6);
        // The following exception was thrown during execution in test generation
        try {
            java.io.InputStream inputStream8 = org.apache.commons.io.IOUtils.toBufferedInputStream((java.io.InputStream) bufferedInputStream6);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Stream closed");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream3);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(bufferedInputStream6);
    }

    @Test
    public void test1753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1753");
        java.io.InputStream inputStream0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.skipFully(inputStream0, (long) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.InputStream.read(byte[], int, int)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1754");
        java.io.Reader reader0 = null;
        java.io.Writer writer1 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long4 = org.apache.commons.io.IOUtils.copyLarge(reader0, writer1, (long) '4', (long) (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[], int, int)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1755");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream5 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray("");
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray10);
        long long12 = org.apache.commons.io.IOUtils.copyLarge(inputStream4, outputStream5, 0L, 0L, byteArray10);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, byteArray10);
        java.io.BufferedInputStream bufferedInputStream15 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.nio.charset.Charset charset16 = null;
        java.util.List<java.lang.String> strList17 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset16);
        java.io.OutputStream outputStream18 = null;
        long long21 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream18, 0L, (long) 0);
        java.io.BufferedInputStream bufferedInputStream22 = org.apache.commons.io.IOUtils.buffer(inputStream1);
        java.io.OutputStream outputStream23 = null;
        long long24 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream23);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.String> strList26 = org.apache.commons.io.IOUtils.readLines(inputStream1, "hi!");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: hi!");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream15);
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
    }

    @Test
    public void test1756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1756");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.util.List<java.lang.String> strList4 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.OutputStream outputStream5 = null;
        long long6 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream5);
        java.io.Writer writer7 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer7);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream11 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray12 = new byte[] {};
        int int13 = org.apache.commons.io.IOUtils.length(byteArray12);
        int int14 = org.apache.commons.io.IOUtils.read(inputStream11, byteArray12);
        byte[] byteArray15 = org.apache.commons.io.IOUtils.toByteArray(inputStream11);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer16 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream11, iOExceptionConsumer16);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream11);
        java.io.BufferedInputStream bufferedInputStream20 = org.apache.commons.io.IOUtils.buffer(inputStream11, (int) (byte) 10);
        java.io.InputStream inputStream22 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream11, (int) (byte) 1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer23 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream11, iOExceptionConsumer23);
        java.io.OutputStream outputStream25 = null;
        java.io.InputStream inputStream27 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray28 = new byte[] {};
        int int29 = org.apache.commons.io.IOUtils.length(byteArray28);
        int int30 = org.apache.commons.io.IOUtils.read(inputStream27, byteArray28);
        byte[] byteArray31 = org.apache.commons.io.IOUtils.toByteArray(inputStream27);
        java.io.InputStream inputStream33 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray34 = new byte[] {};
        int int35 = org.apache.commons.io.IOUtils.length(byteArray34);
        int int36 = org.apache.commons.io.IOUtils.read(inputStream33, byteArray34);
        byte[] byteArray37 = org.apache.commons.io.IOUtils.toByteArray(inputStream33);
        int int38 = org.apache.commons.io.IOUtils.length(byteArray37);
        org.apache.commons.io.IOUtils.readFully(inputStream27, byteArray37);
        long long40 = org.apache.commons.io.IOUtils.copyLarge(inputStream11, outputStream25, byteArray37);
        boolean boolean41 = org.apache.commons.io.IOUtils.contentEquals(inputStream1, inputStream11);
        java.io.BufferedInputStream bufferedInputStream42 = org.apache.commons.io.IOUtils.buffer(inputStream1);
        java.io.BufferedInputStream bufferedInputStream44 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            char[] charArray46 = org.apache.commons.io.IOUtils.toCharArray(inputStream1, "\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ?");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(inputStream11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream20);
        org.junit.Assert.assertNotNull(inputStream22);
        org.junit.Assert.assertNotNull(inputStream27);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(inputStream33);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(bufferedInputStream42);
        org.junit.Assert.assertNotNull(bufferedInputStream44);
    }

    @Test
    public void test1757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1757");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray(inputStream1, (int) (short) 0);
        java.io.BufferedInputStream bufferedInputStream8 = org.apache.commons.io.IOUtils.buffer(inputStream1);
        java.nio.charset.Charset charset9 = null;
        org.apache.commons.io.LineIterator lineIterator10 = org.apache.commons.io.IOUtils.lineIterator(inputStream1, charset9);
        char[] charArray11 = org.apache.commons.io.IOUtils.toCharArray(inputStream1);
        java.io.OutputStream outputStream12 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(charArray11, outputStream12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.OutputStream.write(byte[])\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream8);
        org.junit.Assert.assertNotNull(lineIterator10);
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[]");
    }

    @Test
    public void test1758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1758");
        java.io.Reader reader0 = null;
        long long2 = org.apache.commons.io.IOUtils.skip(reader0, (long) 0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
    }

    @Test
    public void test1759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1759");
        java.io.Reader reader0 = null;
        java.io.Writer writer1 = null;
        java.io.InputStream inputStream3 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray4 = new byte[] {};
        int int5 = org.apache.commons.io.IOUtils.length(byteArray4);
        int int6 = org.apache.commons.io.IOUtils.read(inputStream3, byteArray4);
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray(inputStream3);
        java.nio.charset.Charset charset8 = null;
        java.util.List<java.lang.String> strList9 = org.apache.commons.io.IOUtils.readLines(inputStream3, charset8);
        java.nio.charset.Charset charset10 = null;
        org.apache.commons.io.LineIterator lineIterator11 = org.apache.commons.io.IOUtils.lineIterator(inputStream3, charset10);
        java.io.InputStream inputStream13 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream3, 6);
        java.io.InputStream inputStream15 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray16 = new byte[] {};
        int int17 = org.apache.commons.io.IOUtils.length(byteArray16);
        int int18 = org.apache.commons.io.IOUtils.read(inputStream15, byteArray16);
        byte[] byteArray19 = org.apache.commons.io.IOUtils.toByteArray(inputStream15);
        byte[] byteArray20 = org.apache.commons.io.IOUtils.toByteArray(inputStream15);
        int int23 = org.apache.commons.io.IOUtils.read(inputStream13, byteArray20, (int) '#', 0);
        java.io.InputStream inputStream25 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream13, 10);
        java.io.InputStream inputStream26 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream13);
        char[] charArray27 = org.apache.commons.io.IOUtils.toCharArray(inputStream26);
        // The following exception was thrown during execution in test generation
        try {
            long long28 = org.apache.commons.io.IOUtils.copyLarge(reader0, writer1, charArray27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[])\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream3);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertNotNull(lineIterator11);
        org.junit.Assert.assertNotNull(inputStream13);
        org.junit.Assert.assertNotNull(inputStream15);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(inputStream25);
        org.junit.Assert.assertNotNull(inputStream26);
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[]");
    }

    @Test
    public void test1760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1760");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.BufferedInputStream bufferedInputStream10 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.io.InputStream inputStream12 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, (int) (byte) 1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer13 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer13);
        java.io.OutputStream outputStream15 = null;
        java.io.InputStream inputStream17 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray18 = new byte[] {};
        int int19 = org.apache.commons.io.IOUtils.length(byteArray18);
        int int20 = org.apache.commons.io.IOUtils.read(inputStream17, byteArray18);
        byte[] byteArray21 = org.apache.commons.io.IOUtils.toByteArray(inputStream17);
        java.io.InputStream inputStream23 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray24 = new byte[] {};
        int int25 = org.apache.commons.io.IOUtils.length(byteArray24);
        int int26 = org.apache.commons.io.IOUtils.read(inputStream23, byteArray24);
        byte[] byteArray27 = org.apache.commons.io.IOUtils.toByteArray(inputStream23);
        int int28 = org.apache.commons.io.IOUtils.length(byteArray27);
        org.apache.commons.io.IOUtils.readFully(inputStream17, byteArray27);
        long long30 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream15, byteArray27);
        java.nio.charset.Charset charset31 = null;
        java.lang.String str32 = org.apache.commons.io.IOUtils.toString(inputStream1, charset31);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        long long35 = org.apache.commons.io.IOUtils.skip(inputStream1, (long) 'a');
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream10);
        org.junit.Assert.assertNotNull(inputStream12);
        org.junit.Assert.assertNotNull(inputStream17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertNotNull(inputStream23);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
    }

    @Test
    public void test1761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1761");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.util.List<java.lang.String> strList4 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.OutputStream outputStream5 = null;
        long long6 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream5);
        java.io.Writer writer7 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer7);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream11 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray12 = new byte[] {};
        int int13 = org.apache.commons.io.IOUtils.length(byteArray12);
        int int14 = org.apache.commons.io.IOUtils.read(inputStream11, byteArray12);
        byte[] byteArray15 = org.apache.commons.io.IOUtils.toByteArray(inputStream11);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer16 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream11, iOExceptionConsumer16);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream11);
        java.io.BufferedInputStream bufferedInputStream20 = org.apache.commons.io.IOUtils.buffer(inputStream11, (int) (byte) 10);
        java.io.InputStream inputStream22 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream11, (int) (byte) 1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer23 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream11, iOExceptionConsumer23);
        java.io.OutputStream outputStream25 = null;
        java.io.InputStream inputStream27 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray28 = new byte[] {};
        int int29 = org.apache.commons.io.IOUtils.length(byteArray28);
        int int30 = org.apache.commons.io.IOUtils.read(inputStream27, byteArray28);
        byte[] byteArray31 = org.apache.commons.io.IOUtils.toByteArray(inputStream27);
        java.io.InputStream inputStream33 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray34 = new byte[] {};
        int int35 = org.apache.commons.io.IOUtils.length(byteArray34);
        int int36 = org.apache.commons.io.IOUtils.read(inputStream33, byteArray34);
        byte[] byteArray37 = org.apache.commons.io.IOUtils.toByteArray(inputStream33);
        int int38 = org.apache.commons.io.IOUtils.length(byteArray37);
        org.apache.commons.io.IOUtils.readFully(inputStream27, byteArray37);
        long long40 = org.apache.commons.io.IOUtils.copyLarge(inputStream11, outputStream25, byteArray37);
        boolean boolean41 = org.apache.commons.io.IOUtils.contentEquals(inputStream1, inputStream11);
        java.io.BufferedInputStream bufferedInputStream43 = org.apache.commons.io.IOUtils.buffer(inputStream1, 5);
        java.io.InputStream inputStream45 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream46 = null;
        java.io.InputStream inputStream49 = null;
        byte[] byteArray51 = org.apache.commons.io.IOUtils.toByteArray("");
        int int52 = org.apache.commons.io.IOUtils.read(inputStream49, byteArray51);
        long long53 = org.apache.commons.io.IOUtils.copyLarge(inputStream45, outputStream46, 0L, 0L, byteArray51);
        java.nio.charset.Charset charset54 = null;
        java.util.List<java.lang.String> strList55 = org.apache.commons.io.IOUtils.readLines(inputStream45, charset54);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream45);
        java.nio.charset.Charset charset57 = null;
        java.lang.String str58 = org.apache.commons.io.IOUtils.toString(inputStream45, charset57);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer59 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream45, iOExceptionConsumer59);
        boolean boolean61 = org.apache.commons.io.IOUtils.contentEquals((java.io.InputStream) bufferedInputStream43, inputStream45);
        byte[] byteArray63 = org.apache.commons.io.IOUtils.toByteArray(inputStream45, 0);
        java.io.InputStream inputStream65 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray66 = new byte[] {};
        int int67 = org.apache.commons.io.IOUtils.length(byteArray66);
        int int68 = org.apache.commons.io.IOUtils.read(inputStream65, byteArray66);
        byte[] byteArray69 = org.apache.commons.io.IOUtils.toByteArray(inputStream65);
        int int70 = org.apache.commons.io.IOUtils.read(inputStream45, byteArray69);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(inputStream11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream20);
        org.junit.Assert.assertNotNull(inputStream22);
        org.junit.Assert.assertNotNull(inputStream27);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(inputStream33);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(bufferedInputStream43);
        org.junit.Assert.assertNotNull(inputStream45);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertNotNull(strList55);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[]");
        org.junit.Assert.assertNotNull(inputStream65);
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
    }

    @Test
    public void test1762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1762");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream5 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray("");
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray10);
        long long12 = org.apache.commons.io.IOUtils.copyLarge(inputStream4, outputStream5, 0L, 0L, byteArray10);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, byteArray10);
        java.io.BufferedInputStream bufferedInputStream15 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer16 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer16);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        char[] charArray19 = org.apache.commons.io.IOUtils.toCharArray(inputStream1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.LineIterator lineIterator21 = org.apache.commons.io.IOUtils.lineIterator(inputStream1, "hi!");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: hi!");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream15);
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[]");
    }

    @Test
    public void test1763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1763");
        java.io.Reader reader0 = null;
        java.io.Reader reader1 = null;
        char[] charArray2 = new char[] {};
        int int3 = org.apache.commons.io.IOUtils.length(charArray2);
        int int4 = org.apache.commons.io.IOUtils.read(reader1, charArray2);
        int int5 = org.apache.commons.io.IOUtils.length(charArray2);
        int int6 = org.apache.commons.io.IOUtils.read(reader0, charArray2);
        java.io.OutputStream outputStream7 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(charArray2, outputStream7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.OutputStream.write(byte[])\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray2), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray2), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test1764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1764");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.util.List<java.lang.String> strList4 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.OutputStream outputStream5 = null;
        long long6 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream5);
        java.io.Writer writer7 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer7);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream11 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray12 = new byte[] {};
        int int13 = org.apache.commons.io.IOUtils.length(byteArray12);
        int int14 = org.apache.commons.io.IOUtils.read(inputStream11, byteArray12);
        byte[] byteArray15 = org.apache.commons.io.IOUtils.toByteArray(inputStream11);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer16 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream11, iOExceptionConsumer16);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream11);
        java.io.BufferedInputStream bufferedInputStream20 = org.apache.commons.io.IOUtils.buffer(inputStream11, (int) (byte) 10);
        java.io.InputStream inputStream22 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream11, (int) (byte) 1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer23 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream11, iOExceptionConsumer23);
        java.io.OutputStream outputStream25 = null;
        java.io.InputStream inputStream27 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray28 = new byte[] {};
        int int29 = org.apache.commons.io.IOUtils.length(byteArray28);
        int int30 = org.apache.commons.io.IOUtils.read(inputStream27, byteArray28);
        byte[] byteArray31 = org.apache.commons.io.IOUtils.toByteArray(inputStream27);
        java.io.InputStream inputStream33 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray34 = new byte[] {};
        int int35 = org.apache.commons.io.IOUtils.length(byteArray34);
        int int36 = org.apache.commons.io.IOUtils.read(inputStream33, byteArray34);
        byte[] byteArray37 = org.apache.commons.io.IOUtils.toByteArray(inputStream33);
        int int38 = org.apache.commons.io.IOUtils.length(byteArray37);
        org.apache.commons.io.IOUtils.readFully(inputStream27, byteArray37);
        long long40 = org.apache.commons.io.IOUtils.copyLarge(inputStream11, outputStream25, byteArray37);
        boolean boolean41 = org.apache.commons.io.IOUtils.contentEquals(inputStream1, inputStream11);
        java.io.BufferedInputStream bufferedInputStream43 = org.apache.commons.io.IOUtils.buffer(inputStream1, 5);
        java.io.InputStream inputStream45 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream46 = null;
        java.io.InputStream inputStream49 = null;
        byte[] byteArray51 = org.apache.commons.io.IOUtils.toByteArray("");
        int int52 = org.apache.commons.io.IOUtils.read(inputStream49, byteArray51);
        long long53 = org.apache.commons.io.IOUtils.copyLarge(inputStream45, outputStream46, 0L, 0L, byteArray51);
        java.nio.charset.Charset charset54 = null;
        java.util.List<java.lang.String> strList55 = org.apache.commons.io.IOUtils.readLines(inputStream45, charset54);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream45);
        java.nio.charset.Charset charset57 = null;
        java.lang.String str58 = org.apache.commons.io.IOUtils.toString(inputStream45, charset57);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer59 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream45, iOExceptionConsumer59);
        boolean boolean61 = org.apache.commons.io.IOUtils.contentEquals((java.io.InputStream) bufferedInputStream43, inputStream45);
        byte[] byteArray63 = org.apache.commons.io.IOUtils.toByteArray(inputStream45, 0);
        java.io.InputStream inputStream65 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream45, 2);
        java.io.InputStream inputStream67 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray68 = org.apache.commons.io.IOUtils.toByteArray(inputStream67);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream67);
        java.util.List<java.lang.String> strList70 = org.apache.commons.io.IOUtils.readLines(inputStream67);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer71 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream67, iOExceptionConsumer71);
        java.io.InputStream inputStream74 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray75 = org.apache.commons.io.IOUtils.toByteArray(inputStream74);
        int int76 = org.apache.commons.io.IOUtils.read(inputStream67, byteArray75);
        // The following exception was thrown during execution in test generation
        try {
            int int79 = org.apache.commons.io.IOUtils.read(inputStream65, byteArray75, 0, 2);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Range [0, 0 + 2) out of bounds for length 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(inputStream11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream20);
        org.junit.Assert.assertNotNull(inputStream22);
        org.junit.Assert.assertNotNull(inputStream27);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(inputStream33);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(bufferedInputStream43);
        org.junit.Assert.assertNotNull(inputStream45);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertNotNull(strList55);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[]");
        org.junit.Assert.assertNotNull(inputStream65);
        org.junit.Assert.assertNotNull(inputStream67);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[]");
        org.junit.Assert.assertNotNull(strList70);
        org.junit.Assert.assertNotNull(inputStream74);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
    }

    @Test
    public void test1765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1765");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream3 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1);
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream3);
        java.nio.charset.Charset charset5 = null;
        org.apache.commons.io.LineIterator lineIterator6 = org.apache.commons.io.IOUtils.lineIterator(inputStream3, charset5);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream3);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(lineIterator6);
    }

    @Test
    public void test1766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1766");
        java.io.Reader reader0 = null;
        java.io.Writer writer1 = null;
        java.io.InputStream inputStream5 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray6 = new byte[] {};
        int int7 = org.apache.commons.io.IOUtils.length(byteArray6);
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray6);
        byte[] byteArray9 = org.apache.commons.io.IOUtils.toByteArray(inputStream5);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer10 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream5, iOExceptionConsumer10);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream5);
        java.io.BufferedInputStream bufferedInputStream14 = org.apache.commons.io.IOUtils.buffer(inputStream5, (int) (byte) 10);
        byte[] byteArray15 = null;
        org.apache.commons.io.IOUtils.readFully(inputStream5, byteArray15, (int) '4', 0);
        char[] charArray19 = org.apache.commons.io.IOUtils.toCharArray(inputStream5);
        long long20 = org.apache.commons.io.IOUtils.copyLarge(reader0, writer1, 0L, (long) '\\', charArray19);
        java.io.OutputStream outputStream21 = null;
        java.nio.charset.Charset charset22 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(charArray19, outputStream21, charset22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.OutputStream.write(byte[])\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream14);
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[]");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
    }

    @Test
    public void test1767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1767");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray5 = new byte[] {};
        int int6 = org.apache.commons.io.IOUtils.length(byteArray5);
        int int7 = org.apache.commons.io.IOUtils.read(inputStream4, byteArray5);
        byte[] byteArray8 = org.apache.commons.io.IOUtils.toByteArray(inputStream4);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer9 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream4, iOExceptionConsumer9);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream4);
        java.io.BufferedInputStream bufferedInputStream13 = org.apache.commons.io.IOUtils.buffer(inputStream4, (int) (byte) 10);
        boolean boolean14 = org.apache.commons.io.IOUtils.contentEquals(inputStream1, inputStream4);
        java.io.OutputStream outputStream15 = null;
        long long18 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream15, (long) (short) 0, (long) 2);
        java.lang.String str19 = org.apache.commons.io.IOUtils.toString(inputStream1);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
    }

    @Test
    public void test1768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1768");
        java.io.InputStream inputStream0 = null;
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray("");
        int int3 = org.apache.commons.io.IOUtils.read(inputStream0, byteArray2);
        java.lang.String str4 = org.apache.commons.io.IOUtils.toString(byteArray2);
        java.io.OutputStream outputStream5 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(byteArray2, outputStream5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.OutputStream.write(byte[])\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
    }

    @Test
    public void test1769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1769");
        char[] charArray4 = new char[] { '4', 'a', '#', 'a' };
        int int5 = org.apache.commons.io.IOUtils.length(charArray4);
        int int6 = org.apache.commons.io.IOUtils.length(charArray4);
        int int7 = org.apache.commons.io.IOUtils.length(charArray4);
        java.io.OutputStream outputStream8 = null;
        java.nio.charset.Charset charset9 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(charArray4, outputStream8, charset9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.OutputStream.write(byte[])\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "4a#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "4a#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[4, a, #, a]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 4 + "'", int6 == 4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4 + "'", int7 == 4);
    }

    @Test
    public void test1770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1770");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.io.InputStream inputStream7 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray8 = new byte[] {};
        int int9 = org.apache.commons.io.IOUtils.length(byteArray8);
        int int10 = org.apache.commons.io.IOUtils.read(inputStream7, byteArray8);
        byte[] byteArray11 = org.apache.commons.io.IOUtils.toByteArray(inputStream7);
        int int12 = org.apache.commons.io.IOUtils.length(byteArray11);
        org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray11);
        java.lang.String str14 = org.apache.commons.io.IOUtils.toString(inputStream1);
        java.nio.charset.Charset charset15 = null;
        char[] charArray16 = org.apache.commons.io.IOUtils.toCharArray(inputStream1, charset15);
        java.io.Writer writer17 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray16, writer17);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(inputStream7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(charArray16);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray16), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray16), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray16), "[]");
    }

    @Test
    public void test1771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1771");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray(inputStream1, (int) (short) 0);
        java.io.Writer writer8 = null;
        java.nio.charset.Charset charset9 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer8, charset9);
        java.io.InputStream inputStream12 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream13 = null;
        java.io.InputStream inputStream15 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream16 = null;
        java.io.InputStream inputStream19 = null;
        byte[] byteArray21 = org.apache.commons.io.IOUtils.toByteArray("");
        int int22 = org.apache.commons.io.IOUtils.read(inputStream19, byteArray21);
        long long23 = org.apache.commons.io.IOUtils.copyLarge(inputStream15, outputStream16, 0L, 0L, byteArray21);
        long long24 = org.apache.commons.io.IOUtils.copyLarge(inputStream12, outputStream13, byteArray21);
        java.lang.String str25 = org.apache.commons.io.IOUtils.toString(byteArray21);
        int int26 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray21);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray28 = org.apache.commons.io.IOUtils.toByteArray(inputStream1, 100L);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Unexpected read size. current: 0, expected: 100");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(inputStream12);
        org.junit.Assert.assertNotNull(inputStream15);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
    }

    @Test
    public void test1772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1772");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        java.io.OutputStream outputStream10 = null;
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream10, (long) (short) 0, (-1L));
        java.lang.String str14 = org.apache.commons.io.IOUtils.toString(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly(inputStream1);
        org.apache.commons.io.function.IOConsumer<java.io.IOException> iOExceptionIOConsumer16 = null;
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1, iOExceptionIOConsumer16);
        java.io.InputStream inputStream19 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray20 = new byte[] {};
        int int21 = org.apache.commons.io.IOUtils.length(byteArray20);
        int int22 = org.apache.commons.io.IOUtils.read(inputStream19, byteArray20);
        java.io.InputStream inputStream23 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream19);
        java.nio.charset.Charset charset24 = null;
        org.apache.commons.io.LineIterator lineIterator25 = org.apache.commons.io.IOUtils.lineIterator(inputStream23, charset24);
        java.io.InputStream inputStream26 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream23);
        long long28 = org.apache.commons.io.IOUtils.skip(inputStream23, (long) 10);
        java.io.BufferedInputStream bufferedInputStream29 = org.apache.commons.io.IOUtils.buffer(inputStream23);
        boolean boolean30 = org.apache.commons.io.IOUtils.contentEquals(inputStream1, (java.io.InputStream) bufferedInputStream29);
        java.io.BufferedInputStream bufferedInputStream32 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) 'a');
        java.io.InputStream inputStream34 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray35 = new byte[] {};
        int int36 = org.apache.commons.io.IOUtils.length(byteArray35);
        int int37 = org.apache.commons.io.IOUtils.read(inputStream34, byteArray35);
        java.io.Writer writer38 = null;
        org.apache.commons.io.IOUtils.copy(inputStream34, writer38);
        byte[] byteArray40 = org.apache.commons.io.IOUtils.toByteArray(inputStream34);
        // The following exception was thrown during execution in test generation
        try {
            int int43 = org.apache.commons.io.IOUtils.read((java.io.InputStream) bufferedInputStream32, byteArray40, (int) (byte) -1, 5);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(inputStream19);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(inputStream23);
        org.junit.Assert.assertNotNull(lineIterator25);
        org.junit.Assert.assertNotNull(inputStream26);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(bufferedInputStream32);
        org.junit.Assert.assertNotNull(inputStream34);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
    }

    @Test
    public void test1773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1773");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream3 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1);
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream3);
        java.io.InputStream inputStream6 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream3, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray8 = org.apache.commons.io.IOUtils.toByteArray(inputStream3, 100);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Unexpected read size. current: 0, expected: 100");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream3);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(inputStream6);
    }

    @Test
    public void test1774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1774");
        java.nio.charset.Charset charset1 = null;
        java.io.InputStream inputStream2 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "", charset1);
        java.util.List<java.lang.String> strList3 = org.apache.commons.io.IOUtils.readLines(inputStream2);
        java.io.InputStream inputStream5 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray6 = new byte[] {};
        int int7 = org.apache.commons.io.IOUtils.length(byteArray6);
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray6);
        byte[] byteArray9 = org.apache.commons.io.IOUtils.toByteArray(inputStream5);
        int int10 = org.apache.commons.io.IOUtils.length(byteArray9);
        org.apache.commons.io.IOUtils.readFully(inputStream2, byteArray9);
        byte[] byteArray13 = org.apache.commons.io.IOUtils.toByteArray(inputStream2, 0L);
        java.nio.charset.Charset charset15 = null;
        java.io.InputStream inputStream16 = org.apache.commons.io.IOUtils.toInputStream("hi!", charset15);
        boolean boolean17 = org.apache.commons.io.IOUtils.contentEquals(inputStream2, inputStream16);
        java.io.BufferedInputStream bufferedInputStream18 = org.apache.commons.io.IOUtils.buffer(inputStream2);
        org.junit.Assert.assertNotNull(inputStream2);
        org.junit.Assert.assertNotNull(strList3);
        org.junit.Assert.assertNotNull(inputStream5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertNotNull(inputStream16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(bufferedInputStream18);
    }

    @Test
    public void test1775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1775");
        java.nio.charset.Charset charset1 = null;
        java.io.InputStream inputStream2 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "", charset1);
        byte[] byteArray3 = org.apache.commons.io.IOUtils.toByteArray(inputStream2);
        java.lang.String str4 = org.apache.commons.io.IOUtils.toString(byteArray3);
        org.junit.Assert.assertNotNull(inputStream2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
    }

    @Test
    public void test1776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1776");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.BufferedInputStream bufferedInputStream10 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.nio.charset.Charset charset11 = null;
        char[] charArray12 = org.apache.commons.io.IOUtils.toCharArray((java.io.InputStream) bufferedInputStream10, charset11);
        java.io.BufferedInputStream bufferedInputStream13 = org.apache.commons.io.IOUtils.buffer((java.io.InputStream) bufferedInputStream10);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream10);
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray12), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray12), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray12), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream13);
    }

    @Test
    public void test1777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1777");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.nio.charset.Charset charset4 = null;
        org.apache.commons.io.LineIterator lineIterator5 = org.apache.commons.io.IOUtils.lineIterator(inputStream1, charset4);
        java.nio.charset.Charset charset6 = null;
        java.util.List<java.lang.String> strList7 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset6);
        java.io.InputStream inputStream9 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray10 = new byte[] {};
        int int11 = org.apache.commons.io.IOUtils.length(byteArray10);
        int int12 = org.apache.commons.io.IOUtils.read(inputStream9, byteArray10);
        byte[] byteArray13 = org.apache.commons.io.IOUtils.toByteArray(inputStream9);
        byte[] byteArray15 = org.apache.commons.io.IOUtils.toByteArray(inputStream9, (int) (short) 0);
        byte[] byteArray16 = new byte[] {};
        int int17 = org.apache.commons.io.IOUtils.length(byteArray16);
        org.apache.commons.io.IOUtils.readFully(inputStream9, byteArray16);
        java.lang.String str19 = org.apache.commons.io.IOUtils.toString(byteArray16);
        int int20 = org.apache.commons.io.IOUtils.length(byteArray16);
        org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray16);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.nio.charset.Charset charset23 = null;
        char[] charArray24 = org.apache.commons.io.IOUtils.toCharArray(inputStream1, charset23);
        java.io.OutputStream outputStream25 = null;
        long long26 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream25);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(lineIterator5);
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertNotNull(inputStream9);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[]");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
    }

    @Test
    public void test1778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1778");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream3 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1);
        java.io.Writer writer4 = null;
        java.nio.charset.Charset charset5 = null;
        org.apache.commons.io.IOUtils.copy(inputStream3, writer4, charset5);
        org.apache.commons.io.function.IOConsumer<java.io.IOException> iOExceptionIOConsumer7 = null;
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream3, iOExceptionIOConsumer7);
        java.io.Writer writer9 = null;
        java.nio.charset.Charset charset10 = null;
        org.apache.commons.io.IOUtils.copy(inputStream3, writer9, charset10);
        java.io.Writer writer12 = null;
        org.apache.commons.io.IOUtils.copy(inputStream3, writer12);
        java.nio.charset.Charset charset14 = null;
        java.util.List<java.lang.String> strList15 = org.apache.commons.io.IOUtils.readLines(inputStream3, charset14);
        java.io.OutputStream outputStream17 = null;
        java.nio.charset.Charset charset18 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList15, "", outputStream17, charset18);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream3);
        org.junit.Assert.assertNotNull(strList15);
    }

    @Test
    public void test1779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1779");
        java.io.Reader reader0 = null;
        java.io.Writer writer1 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long4 = org.apache.commons.io.IOUtils.copyLarge(reader0, writer1, (long) (byte) 100, (long) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[], int, int)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1780");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream5 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray("");
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray10);
        long long12 = org.apache.commons.io.IOUtils.copyLarge(inputStream4, outputStream5, 0L, 0L, byteArray10);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, byteArray10);
        java.io.BufferedInputStream bufferedInputStream15 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer16 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer16);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.util.List<java.lang.String> strList19 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream15);
        org.junit.Assert.assertNotNull(strList19);
    }

    @Test
    public void test1781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1781");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream5 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray("");
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray10);
        long long12 = org.apache.commons.io.IOUtils.copyLarge(inputStream4, outputStream5, 0L, 0L, byteArray10);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, byteArray10);
        java.io.BufferedInputStream bufferedInputStream15 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        org.apache.commons.io.IOUtils.closeQuietly(inputStream1);
        java.io.InputStream inputStream18 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray19 = new byte[] {};
        int int20 = org.apache.commons.io.IOUtils.length(byteArray19);
        int int21 = org.apache.commons.io.IOUtils.read(inputStream18, byteArray19);
        byte[] byteArray22 = org.apache.commons.io.IOUtils.toByteArray(inputStream18);
        byte[] byteArray24 = org.apache.commons.io.IOUtils.toByteArray(inputStream18, (int) (short) 0);
        long long26 = org.apache.commons.io.IOUtils.skip(inputStream18, 100L);
        java.io.InputStream inputStream28 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray29 = new byte[] {};
        int int30 = org.apache.commons.io.IOUtils.length(byteArray29);
        int int31 = org.apache.commons.io.IOUtils.read(inputStream28, byteArray29);
        byte[] byteArray32 = org.apache.commons.io.IOUtils.toByteArray(inputStream28);
        byte[] byteArray34 = org.apache.commons.io.IOUtils.toByteArray(inputStream28, (int) (short) 0);
        org.apache.commons.io.IOUtils.readFully(inputStream18, byteArray34);
        org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray34);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.OutputStream outputStream38 = null;
        long long39 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream38);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream15);
        org.junit.Assert.assertNotNull(inputStream18);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(inputStream28);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
    }

    @Test
    public void test1782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1782");
        java.io.Reader reader0 = null;
        java.io.InputStream inputStream2 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream3 = null;
        java.io.InputStream inputStream6 = null;
        byte[] byteArray8 = org.apache.commons.io.IOUtils.toByteArray("");
        int int9 = org.apache.commons.io.IOUtils.read(inputStream6, byteArray8);
        long long10 = org.apache.commons.io.IOUtils.copyLarge(inputStream2, outputStream3, 0L, 0L, byteArray8);
        java.nio.charset.Charset charset11 = null;
        java.util.List<java.lang.String> strList12 = org.apache.commons.io.IOUtils.readLines(inputStream2, charset11);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream2);
        java.nio.charset.Charset charset14 = null;
        java.lang.String str15 = org.apache.commons.io.IOUtils.toString(inputStream2, charset14);
        java.nio.charset.Charset charset16 = null;
        char[] charArray17 = org.apache.commons.io.IOUtils.toCharArray(inputStream2, charset16);
        java.io.Writer writer18 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray17, writer18);
        // The following exception was thrown during execution in test generation
        try {
            int int22 = org.apache.commons.io.IOUtils.read(reader0, charArray17, (int) 'a', (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[], int, int)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream2);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(strList12);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[]");
    }

    @Test
    public void test1783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1783");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.List<java.lang.String> strList3 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        long long5 = org.apache.commons.io.IOUtils.skip(inputStream1, (long) '/');
        java.nio.charset.Charset charset6 = null;
        java.lang.String str7 = org.apache.commons.io.IOUtils.toString(inputStream1, charset6);
        byte[] byteArray8 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.io.InputStream inputStream9 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1);
        java.io.OutputStream outputStream10 = null;
        int int11 = org.apache.commons.io.IOUtils.copy(inputStream1, outputStream10);
        java.io.OutputStream outputStream12 = null;
        java.io.InputStream inputStream14 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream15 = null;
        java.io.InputStream inputStream17 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream18 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray23 = org.apache.commons.io.IOUtils.toByteArray("");
        int int24 = org.apache.commons.io.IOUtils.read(inputStream21, byteArray23);
        long long25 = org.apache.commons.io.IOUtils.copyLarge(inputStream17, outputStream18, 0L, 0L, byteArray23);
        long long26 = org.apache.commons.io.IOUtils.copyLarge(inputStream14, outputStream15, byteArray23);
        java.io.BufferedInputStream bufferedInputStream28 = org.apache.commons.io.IOUtils.buffer(inputStream14, (int) (byte) 10);
        byte[] byteArray29 = org.apache.commons.io.IOUtils.toByteArray((java.io.InputStream) bufferedInputStream28);
        java.io.InputStream inputStream30 = null;
        java.io.OutputStream outputStream31 = null;
        byte[] byteArray34 = new byte[] {};
        int int35 = org.apache.commons.io.IOUtils.length(byteArray34);
        java.io.OutputStream outputStream36 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray34, outputStream36);
        long long38 = org.apache.commons.io.IOUtils.copyLarge(inputStream30, outputStream31, 0L, (long) (byte) -1, byteArray34);
        java.io.OutputStream outputStream39 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray34, outputStream39);
        int int41 = org.apache.commons.io.IOUtils.length(byteArray34);
        org.apache.commons.io.IOUtils.readFully((java.io.InputStream) bufferedInputStream28, byteArray34);
        int int43 = org.apache.commons.io.IOUtils.length(byteArray34);
        long long44 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream12, byteArray34);
        java.io.OutputStream outputStream45 = null;
        long long46 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream45);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(strList3);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(inputStream9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(inputStream14);
        org.junit.Assert.assertNotNull(inputStream17);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream28);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
    }

    @Test
    public void test1784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1784");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        java.nio.charset.Charset charset10 = null;
        java.util.List<java.lang.String> strList11 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset10);
        java.io.OutputStream outputStream13 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList11, "\r\n", outputStream13, "");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(strList11);
    }

    @Test
    public void test1785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1785");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream5 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray("");
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray10);
        long long12 = org.apache.commons.io.IOUtils.copyLarge(inputStream4, outputStream5, 0L, 0L, byteArray10);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, byteArray10);
        java.io.BufferedInputStream bufferedInputStream15 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.nio.charset.Charset charset16 = null;
        java.util.List<java.lang.String> strList17 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset16);
        java.io.OutputStream outputStream18 = null;
        long long21 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream18, 0L, (long) 0);
        java.io.BufferedInputStream bufferedInputStream22 = org.apache.commons.io.IOUtils.buffer(inputStream1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.String> strList24 = org.apache.commons.io.IOUtils.readLines(inputStream1, "\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ?");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream15);
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream22);
    }

    @Test
    public void test1786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1786");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        java.io.Writer writer10 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer10);
        java.util.List<java.lang.String> strList12 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.nio.charset.Charset charset13 = null;
        org.apache.commons.io.LineIterator lineIterator14 = org.apache.commons.io.IOUtils.lineIterator(inputStream1, charset13);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.LineIterator lineIterator16 = org.apache.commons.io.IOUtils.lineIterator(inputStream1, "");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(strList12);
        org.junit.Assert.assertNotNull(lineIterator14);
    }

    @Test
    public void test1787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1787");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "\n");
        java.util.List<java.lang.String> strList2 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.OutputStream outputStream4 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList2, "", outputStream4, "hi!");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: hi!");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(strList2);
    }

    @Test
    public void test1788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1788");
        java.nio.charset.Charset charset1 = null;
        java.io.InputStream inputStream2 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "", charset1);
        java.util.List<java.lang.String> strList3 = org.apache.commons.io.IOUtils.readLines(inputStream2);
        java.io.InputStream inputStream5 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray6 = new byte[] {};
        int int7 = org.apache.commons.io.IOUtils.length(byteArray6);
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray6);
        byte[] byteArray9 = org.apache.commons.io.IOUtils.toByteArray(inputStream5);
        int int10 = org.apache.commons.io.IOUtils.length(byteArray9);
        org.apache.commons.io.IOUtils.readFully(inputStream2, byteArray9);
        java.lang.String str12 = org.apache.commons.io.IOUtils.toString(byteArray9);
        java.io.OutputStream outputStream13 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray9, outputStream13);
        java.lang.String str15 = org.apache.commons.io.IOUtils.toString(byteArray9);
        java.io.OutputStream outputStream16 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(byteArray9, outputStream16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.OutputStream.write(byte[])\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream2);
        org.junit.Assert.assertNotNull(strList3);
        org.junit.Assert.assertNotNull(inputStream5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
    }

    @Test
    public void test1789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1789");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.Writer writer9 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer9);
        java.util.List<java.lang.String> strList11 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(strList11);
    }

    @Test
    public void test1790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1790");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        java.io.InputStream inputStream5 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1);
        byte[] byteArray6 = org.apache.commons.io.IOUtils.toByteArray(inputStream5);
        java.nio.charset.Charset charset8 = null;
        java.io.InputStream inputStream9 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "", charset8);
        java.util.List<java.lang.String> strList10 = org.apache.commons.io.IOUtils.readLines(inputStream9);
        java.io.InputStream inputStream12 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray13 = new byte[] {};
        int int14 = org.apache.commons.io.IOUtils.length(byteArray13);
        int int15 = org.apache.commons.io.IOUtils.read(inputStream12, byteArray13);
        byte[] byteArray16 = org.apache.commons.io.IOUtils.toByteArray(inputStream12);
        int int17 = org.apache.commons.io.IOUtils.length(byteArray16);
        org.apache.commons.io.IOUtils.readFully(inputStream9, byteArray16);
        byte[] byteArray20 = org.apache.commons.io.IOUtils.toByteArray(inputStream9, 0L);
        java.io.OutputStream outputStream21 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray20, outputStream21);
        int int23 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray20);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream5);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(inputStream5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(inputStream9);
        org.junit.Assert.assertNotNull(strList10);
        org.junit.Assert.assertNotNull(inputStream12);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
    }

    @Test
    public void test1791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1791");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.util.List<java.lang.String> strList4 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.OutputStream outputStream5 = null;
        long long6 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream5);
        java.io.Writer writer7 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer7);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream11 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray12 = new byte[] {};
        int int13 = org.apache.commons.io.IOUtils.length(byteArray12);
        int int14 = org.apache.commons.io.IOUtils.read(inputStream11, byteArray12);
        byte[] byteArray15 = org.apache.commons.io.IOUtils.toByteArray(inputStream11);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer16 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream11, iOExceptionConsumer16);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream11);
        java.io.BufferedInputStream bufferedInputStream20 = org.apache.commons.io.IOUtils.buffer(inputStream11, (int) (byte) 10);
        java.io.InputStream inputStream22 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream11, (int) (byte) 1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer23 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream11, iOExceptionConsumer23);
        java.io.OutputStream outputStream25 = null;
        java.io.InputStream inputStream27 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray28 = new byte[] {};
        int int29 = org.apache.commons.io.IOUtils.length(byteArray28);
        int int30 = org.apache.commons.io.IOUtils.read(inputStream27, byteArray28);
        byte[] byteArray31 = org.apache.commons.io.IOUtils.toByteArray(inputStream27);
        java.io.InputStream inputStream33 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray34 = new byte[] {};
        int int35 = org.apache.commons.io.IOUtils.length(byteArray34);
        int int36 = org.apache.commons.io.IOUtils.read(inputStream33, byteArray34);
        byte[] byteArray37 = org.apache.commons.io.IOUtils.toByteArray(inputStream33);
        int int38 = org.apache.commons.io.IOUtils.length(byteArray37);
        org.apache.commons.io.IOUtils.readFully(inputStream27, byteArray37);
        long long40 = org.apache.commons.io.IOUtils.copyLarge(inputStream11, outputStream25, byteArray37);
        boolean boolean41 = org.apache.commons.io.IOUtils.contentEquals(inputStream1, inputStream11);
        java.io.BufferedInputStream bufferedInputStream43 = org.apache.commons.io.IOUtils.buffer(inputStream1, 5);
        java.io.InputStream inputStream45 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream46 = null;
        java.io.InputStream inputStream49 = null;
        byte[] byteArray51 = org.apache.commons.io.IOUtils.toByteArray("");
        int int52 = org.apache.commons.io.IOUtils.read(inputStream49, byteArray51);
        long long53 = org.apache.commons.io.IOUtils.copyLarge(inputStream45, outputStream46, 0L, 0L, byteArray51);
        java.nio.charset.Charset charset54 = null;
        java.util.List<java.lang.String> strList55 = org.apache.commons.io.IOUtils.readLines(inputStream45, charset54);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream45);
        java.nio.charset.Charset charset57 = null;
        java.lang.String str58 = org.apache.commons.io.IOUtils.toString(inputStream45, charset57);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer59 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream45, iOExceptionConsumer59);
        boolean boolean61 = org.apache.commons.io.IOUtils.contentEquals((java.io.InputStream) bufferedInputStream43, inputStream45);
        byte[] byteArray63 = org.apache.commons.io.IOUtils.toByteArray(inputStream45, 0);
        java.nio.charset.Charset charset64 = null;
        org.apache.commons.io.LineIterator lineIterator65 = org.apache.commons.io.IOUtils.lineIterator(inputStream45, charset64);
        java.io.InputStream inputStream67 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream45, (int) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.String> strList69 = org.apache.commons.io.IOUtils.readLines(inputStream45, "\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ?");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(inputStream11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream20);
        org.junit.Assert.assertNotNull(inputStream22);
        org.junit.Assert.assertNotNull(inputStream27);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(inputStream33);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(bufferedInputStream43);
        org.junit.Assert.assertNotNull(inputStream45);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertNotNull(strList55);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[]");
        org.junit.Assert.assertNotNull(lineIterator65);
        org.junit.Assert.assertNotNull(inputStream67);
    }

    @Test
    public void test1792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1792");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream5 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray("");
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray10);
        long long12 = org.apache.commons.io.IOUtils.copyLarge(inputStream4, outputStream5, 0L, 0L, byteArray10);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, byteArray10);
        java.io.BufferedInputStream bufferedInputStream15 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        org.apache.commons.io.IOUtils.closeQuietly(inputStream1);
        java.nio.charset.Charset charset17 = null;
        java.util.List<java.lang.String> strList18 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset17);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.io.OutputStream outputStream20 = null;
        int int21 = org.apache.commons.io.IOUtils.copy(inputStream1, outputStream20);
        java.io.OutputStream outputStream22 = null;
        java.io.InputStream inputStream24 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream25 = null;
        java.io.InputStream inputStream27 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream28 = null;
        java.io.InputStream inputStream31 = null;
        byte[] byteArray33 = org.apache.commons.io.IOUtils.toByteArray("");
        int int34 = org.apache.commons.io.IOUtils.read(inputStream31, byteArray33);
        long long35 = org.apache.commons.io.IOUtils.copyLarge(inputStream27, outputStream28, 0L, 0L, byteArray33);
        long long36 = org.apache.commons.io.IOUtils.copyLarge(inputStream24, outputStream25, byteArray33);
        java.lang.String str37 = org.apache.commons.io.IOUtils.toString(byteArray33);
        long long38 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream22, byteArray33);
        java.io.Writer writer39 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(byteArray33, writer39);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Writer.write(String)\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream15);
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(inputStream24);
        org.junit.Assert.assertNotNull(inputStream27);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
    }

    @Test
    public void test1793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1793");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.BufferedInputStream bufferedInputStream10 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.io.InputStream inputStream12 = org.apache.commons.io.IOUtils.toBufferedInputStream((java.io.InputStream) bufferedInputStream10, (int) '#');
        long long14 = org.apache.commons.io.IOUtils.skip(inputStream12, (long) 6);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer15 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream12, iOExceptionConsumer15);
        java.nio.charset.Charset charset17 = null;
        java.lang.String str18 = org.apache.commons.io.IOUtils.toString(inputStream12, charset17);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream12);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream10);
        org.junit.Assert.assertNotNull(inputStream12);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
    }

    @Test
    public void test1794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1794");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.util.List<java.lang.String> strList4 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.OutputStream outputStream5 = null;
        long long6 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream5);
        java.io.Writer writer7 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer7);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream11 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray12 = new byte[] {};
        int int13 = org.apache.commons.io.IOUtils.length(byteArray12);
        int int14 = org.apache.commons.io.IOUtils.read(inputStream11, byteArray12);
        byte[] byteArray15 = org.apache.commons.io.IOUtils.toByteArray(inputStream11);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer16 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream11, iOExceptionConsumer16);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream11);
        java.io.BufferedInputStream bufferedInputStream20 = org.apache.commons.io.IOUtils.buffer(inputStream11, (int) (byte) 10);
        java.io.InputStream inputStream22 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream11, (int) (byte) 1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer23 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream11, iOExceptionConsumer23);
        java.io.OutputStream outputStream25 = null;
        java.io.InputStream inputStream27 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray28 = new byte[] {};
        int int29 = org.apache.commons.io.IOUtils.length(byteArray28);
        int int30 = org.apache.commons.io.IOUtils.read(inputStream27, byteArray28);
        byte[] byteArray31 = org.apache.commons.io.IOUtils.toByteArray(inputStream27);
        java.io.InputStream inputStream33 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray34 = new byte[] {};
        int int35 = org.apache.commons.io.IOUtils.length(byteArray34);
        int int36 = org.apache.commons.io.IOUtils.read(inputStream33, byteArray34);
        byte[] byteArray37 = org.apache.commons.io.IOUtils.toByteArray(inputStream33);
        int int38 = org.apache.commons.io.IOUtils.length(byteArray37);
        org.apache.commons.io.IOUtils.readFully(inputStream27, byteArray37);
        long long40 = org.apache.commons.io.IOUtils.copyLarge(inputStream11, outputStream25, byteArray37);
        boolean boolean41 = org.apache.commons.io.IOUtils.contentEquals(inputStream1, inputStream11);
        java.lang.Class<?> wildcardClass42 = inputStream11.getClass();
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(inputStream11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream20);
        org.junit.Assert.assertNotNull(inputStream22);
        org.junit.Assert.assertNotNull(inputStream27);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(inputStream33);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(wildcardClass42);
    }

    @Test
    public void test1795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1795");
        java.io.Closeable closeable0 = null;
        java.io.Closeable[] closeableArray1 = new java.io.Closeable[] { closeable0 };
        org.apache.commons.io.IOUtils.closeQuietly(closeableArray1);
        org.apache.commons.io.IOUtils.closeQuietly(closeableArray1);
        int int4 = org.apache.commons.io.IOUtils.length((java.lang.Object[]) closeableArray1);
        int int5 = org.apache.commons.io.IOUtils.length((java.lang.Object[]) closeableArray1);
        int int6 = org.apache.commons.io.IOUtils.length((java.lang.Object[]) closeableArray1);
        org.junit.Assert.assertNotNull(closeableArray1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
    }

    @Test
    public void test1796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1796");
        java.io.Reader reader0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.skipFully(reader0, (long) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[], int, int)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1797");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.nio.charset.Charset charset4 = null;
        org.apache.commons.io.LineIterator lineIterator5 = org.apache.commons.io.IOUtils.lineIterator(inputStream1, charset4);
        java.nio.charset.Charset charset6 = null;
        java.util.List<java.lang.String> strList7 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset6);
        java.io.InputStream inputStream9 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray10 = new byte[] {};
        int int11 = org.apache.commons.io.IOUtils.length(byteArray10);
        int int12 = org.apache.commons.io.IOUtils.read(inputStream9, byteArray10);
        byte[] byteArray13 = org.apache.commons.io.IOUtils.toByteArray(inputStream9);
        byte[] byteArray15 = org.apache.commons.io.IOUtils.toByteArray(inputStream9, (int) (short) 0);
        byte[] byteArray16 = new byte[] {};
        int int17 = org.apache.commons.io.IOUtils.length(byteArray16);
        org.apache.commons.io.IOUtils.readFully(inputStream9, byteArray16);
        java.lang.String str19 = org.apache.commons.io.IOUtils.toString(byteArray16);
        int int20 = org.apache.commons.io.IOUtils.length(byteArray16);
        org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray16);
        java.lang.String str22 = org.apache.commons.io.IOUtils.toString(byteArray16);
        java.io.Writer writer23 = null;
        java.nio.charset.Charset charset24 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(byteArray16, writer23, charset24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Writer.write(String)\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(lineIterator5);
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertNotNull(inputStream9);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
    }

    @Test
    public void test1798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1798");
        java.io.Reader reader0 = null;
        java.io.InputStream inputStream2 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream3 = null;
        java.io.InputStream inputStream6 = null;
        byte[] byteArray8 = org.apache.commons.io.IOUtils.toByteArray("");
        int int9 = org.apache.commons.io.IOUtils.read(inputStream6, byteArray8);
        long long10 = org.apache.commons.io.IOUtils.copyLarge(inputStream2, outputStream3, 0L, 0L, byteArray8);
        java.nio.charset.Charset charset11 = null;
        java.util.List<java.lang.String> strList12 = org.apache.commons.io.IOUtils.readLines(inputStream2, charset11);
        java.nio.charset.Charset charset13 = null;
        char[] charArray14 = org.apache.commons.io.IOUtils.toCharArray(inputStream2, charset13);
        org.apache.commons.io.IOUtils.readFully(reader0, charArray14);
        int int16 = org.apache.commons.io.IOUtils.length(charArray14);
        java.io.Writer writer17 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(charArray14, writer17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Writer.write(char[])\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream2);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(strList12);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test1799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1799");
        java.io.Reader reader0 = null;
        java.io.Writer writer1 = null;
        java.io.InputStream inputStream3 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray4 = new byte[] {};
        int int5 = org.apache.commons.io.IOUtils.length(byteArray4);
        int int6 = org.apache.commons.io.IOUtils.read(inputStream3, byteArray4);
        java.nio.charset.Charset charset7 = null;
        org.apache.commons.io.LineIterator lineIterator8 = org.apache.commons.io.IOUtils.lineIterator(inputStream3, charset7);
        java.io.InputStream inputStream10 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray11 = new byte[] {};
        int int12 = org.apache.commons.io.IOUtils.length(byteArray11);
        int int13 = org.apache.commons.io.IOUtils.read(inputStream10, byteArray11);
        byte[] byteArray14 = org.apache.commons.io.IOUtils.toByteArray(inputStream10);
        boolean boolean15 = org.apache.commons.io.IOUtils.contentEquals(inputStream3, inputStream10);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream3);
        java.io.BufferedInputStream bufferedInputStream18 = org.apache.commons.io.IOUtils.buffer(inputStream3, 3);
        java.nio.charset.Charset charset19 = null;
        char[] charArray20 = org.apache.commons.io.IOUtils.toCharArray((java.io.InputStream) bufferedInputStream18, charset19);
        // The following exception was thrown during execution in test generation
        try {
            long long21 = org.apache.commons.io.IOUtils.copyLarge(reader0, writer1, charArray20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[])\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream3);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(lineIterator8);
        org.junit.Assert.assertNotNull(inputStream10);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(bufferedInputStream18);
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray20), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray20), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray20), "[]");
    }

    @Test
    public void test1800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1800");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.BufferedInputStream bufferedInputStream10 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.io.InputStream inputStream12 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, (int) (byte) 1);
        java.io.OutputStream outputStream13 = null;
        int int14 = org.apache.commons.io.IOUtils.copy(inputStream12, outputStream13);
        java.io.BufferedInputStream bufferedInputStream16 = org.apache.commons.io.IOUtils.buffer(inputStream12, (int) (byte) 10);
        java.io.InputStream inputStream18 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray19 = new byte[] {};
        int int20 = org.apache.commons.io.IOUtils.length(byteArray19);
        int int21 = org.apache.commons.io.IOUtils.read(inputStream18, byteArray19);
        byte[] byteArray22 = org.apache.commons.io.IOUtils.toByteArray(inputStream18);
        byte[] byteArray24 = org.apache.commons.io.IOUtils.toByteArray(inputStream18, (int) (short) 0);
        long long26 = org.apache.commons.io.IOUtils.skip(inputStream18, 100L);
        java.io.InputStream inputStream28 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray29 = org.apache.commons.io.IOUtils.toByteArray(inputStream28);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream28);
        java.util.List<java.lang.String> strList31 = org.apache.commons.io.IOUtils.readLines(inputStream28);
        java.io.OutputStream outputStream32 = null;
        long long33 = org.apache.commons.io.IOUtils.copyLarge(inputStream28, outputStream32);
        java.io.OutputStream outputStream34 = null;
        java.io.InputStream inputStream38 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray39 = new byte[] {};
        int int40 = org.apache.commons.io.IOUtils.length(byteArray39);
        int int41 = org.apache.commons.io.IOUtils.read(inputStream38, byteArray39);
        long long42 = org.apache.commons.io.IOUtils.copyLarge(inputStream28, outputStream34, (-1L), 1L, byteArray39);
        int int43 = org.apache.commons.io.IOUtils.read(inputStream18, byteArray39);
        org.apache.commons.io.IOUtils.readFully((java.io.InputStream) bufferedInputStream16, byteArray39);
        java.nio.charset.Charset charset45 = null;
        org.apache.commons.io.LineIterator lineIterator46 = org.apache.commons.io.IOUtils.lineIterator((java.io.InputStream) bufferedInputStream16, charset45);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream10);
        org.junit.Assert.assertNotNull(inputStream12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(bufferedInputStream16);
        org.junit.Assert.assertNotNull(inputStream18);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(inputStream28);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(strList31);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertNotNull(inputStream38);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(lineIterator46);
    }

    @Test
    public void test1801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1801");
        java.io.Reader reader0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.BufferedReader bufferedReader2 = org.apache.commons.io.IOUtils.buffer(reader0, (int) '\\');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1802");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        java.nio.charset.Charset charset10 = null;
        java.util.List<java.lang.String> strList11 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset10);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.nio.charset.Charset charset13 = null;
        java.lang.String str14 = org.apache.commons.io.IOUtils.toString(inputStream1, charset13);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer15 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer15);
        java.nio.charset.Charset charset17 = null;
        org.apache.commons.io.LineIterator lineIterator18 = org.apache.commons.io.IOUtils.lineIterator(inputStream1, charset17);
        java.io.OutputStream outputStream19 = null;
        int int20 = org.apache.commons.io.IOUtils.copy(inputStream1, outputStream19);
        org.apache.commons.io.function.IOConsumer<java.io.IOException> iOExceptionIOConsumer21 = null;
        org.apache.commons.io.IOUtils.close((java.io.Closeable) outputStream19, iOExceptionIOConsumer21);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(lineIterator18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    }

    @Test
    public void test1803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1803");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream5 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray("");
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray10);
        long long12 = org.apache.commons.io.IOUtils.copyLarge(inputStream4, outputStream5, 0L, 0L, byteArray10);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, byteArray10);
        java.io.BufferedInputStream bufferedInputStream15 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.io.InputStream inputStream17 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray18 = org.apache.commons.io.IOUtils.toByteArray(inputStream17);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream17);
        java.io.InputStream inputStream21 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream22 = null;
        java.io.InputStream inputStream25 = null;
        byte[] byteArray27 = org.apache.commons.io.IOUtils.toByteArray("");
        int int28 = org.apache.commons.io.IOUtils.read(inputStream25, byteArray27);
        long long29 = org.apache.commons.io.IOUtils.copyLarge(inputStream21, outputStream22, 0L, 0L, byteArray27);
        java.nio.charset.Charset charset30 = null;
        java.util.List<java.lang.String> strList31 = org.apache.commons.io.IOUtils.readLines(inputStream21, charset30);
        java.io.InputStream inputStream33 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream34 = null;
        java.io.InputStream inputStream37 = null;
        byte[] byteArray39 = org.apache.commons.io.IOUtils.toByteArray("");
        int int40 = org.apache.commons.io.IOUtils.read(inputStream37, byteArray39);
        long long41 = org.apache.commons.io.IOUtils.copyLarge(inputStream33, outputStream34, 0L, 0L, byteArray39);
        java.nio.charset.Charset charset42 = null;
        java.util.List<java.lang.String> strList43 = org.apache.commons.io.IOUtils.readLines(inputStream33, charset42);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream33);
        boolean boolean45 = org.apache.commons.io.IOUtils.contentEquals(inputStream21, inputStream33);
        java.io.OutputStream outputStream46 = null;
        java.io.InputStream inputStream48 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream49 = null;
        java.io.InputStream inputStream52 = null;
        byte[] byteArray54 = org.apache.commons.io.IOUtils.toByteArray("");
        int int55 = org.apache.commons.io.IOUtils.read(inputStream52, byteArray54);
        long long56 = org.apache.commons.io.IOUtils.copyLarge(inputStream48, outputStream49, 0L, 0L, byteArray54);
        long long57 = org.apache.commons.io.IOUtils.copyLarge(inputStream33, outputStream46, byteArray54);
        org.apache.commons.io.IOUtils.readFully(inputStream17, byteArray54);
        org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray54);
        java.lang.String str60 = org.apache.commons.io.IOUtils.toString(inputStream1);
        java.io.BufferedInputStream bufferedInputStream62 = org.apache.commons.io.IOUtils.buffer(inputStream1, 100);
        java.io.OutputStream outputStream63 = null;
        java.io.InputStream inputStream66 = null;
        byte[] byteArray68 = org.apache.commons.io.IOUtils.toByteArray("");
        int int69 = org.apache.commons.io.IOUtils.read(inputStream66, byteArray68);
        java.lang.String str70 = org.apache.commons.io.IOUtils.toString(byteArray68);
        long long71 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream63, (-1L), (long) (short) -1, byteArray68);
        java.io.InputStream inputStream72 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1);
        java.lang.String str73 = org.apache.commons.io.IOUtils.toString(inputStream72);
        byte[] byteArray74 = org.apache.commons.io.IOUtils.toByteArray(inputStream72);
        java.io.OutputStream outputStream75 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(byteArray74, outputStream75);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.OutputStream.write(byte[])\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream15);
        org.junit.Assert.assertNotNull(inputStream17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(inputStream21);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNotNull(strList31);
        org.junit.Assert.assertNotNull(inputStream33);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertNotNull(strList43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(inputStream48);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(bufferedInputStream62);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 0L + "'", long71 == 0L);
        org.junit.Assert.assertNotNull(inputStream72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[]");
    }

    @Test
    public void test1804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1804");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.BufferedInputStream bufferedInputStream10 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.io.InputStream inputStream12 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, (int) (byte) 1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer13 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer13);
        java.io.BufferedInputStream bufferedInputStream16 = org.apache.commons.io.IOUtils.buffer(inputStream1, 6);
        java.lang.Class<?> wildcardClass17 = inputStream1.getClass();
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream10);
        org.junit.Assert.assertNotNull(inputStream12);
        org.junit.Assert.assertNotNull(bufferedInputStream16);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test1805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1805");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream3 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1);
        java.io.Writer writer4 = null;
        java.nio.charset.Charset charset5 = null;
        org.apache.commons.io.IOUtils.copy(inputStream3, writer4, charset5);
        org.apache.commons.io.function.IOConsumer<java.io.IOException> iOExceptionIOConsumer7 = null;
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream3, iOExceptionIOConsumer7);
        java.nio.charset.Charset charset9 = null;
        java.util.List<java.lang.String> strList10 = org.apache.commons.io.IOUtils.readLines(inputStream3, charset9);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str12 = org.apache.commons.io.IOUtils.toString(inputStream3, "\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ?");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream3);
        org.junit.Assert.assertNotNull(strList10);
    }

    @Test
    public void test1806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1806");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly(inputStream1);
        java.io.BufferedInputStream bufferedInputStream10 = org.apache.commons.io.IOUtils.buffer(inputStream1);
        java.io.OutputStream outputStream11 = null;
        long long14 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream11, 0L, (long) 2);
        java.nio.charset.Charset charset15 = null;
        char[] charArray16 = org.apache.commons.io.IOUtils.toCharArray(inputStream1, charset15);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream10);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(charArray16);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray16), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray16), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray16), "[]");
    }

    @Test
    public void test1807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1807");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray(inputStream1, (int) (short) 0);
        long long9 = org.apache.commons.io.IOUtils.skip(inputStream1, 100L);
        char[] charArray10 = org.apache.commons.io.IOUtils.toCharArray(inputStream1);
        int int11 = org.apache.commons.io.IOUtils.length(charArray10);
        java.io.Writer writer12 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(charArray10, writer12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Writer.write(char[])\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test1808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1808");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.BufferedInputStream bufferedInputStream10 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.io.InputStream inputStream12 = org.apache.commons.io.IOUtils.toBufferedInputStream((java.io.InputStream) bufferedInputStream10, (int) '#');
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream12);
        java.util.List<java.lang.String> strList14 = org.apache.commons.io.IOUtils.readLines(inputStream12);
        org.apache.commons.io.IOUtils.closeQuietly(inputStream12);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream10);
        org.junit.Assert.assertNotNull(inputStream12);
        org.junit.Assert.assertNotNull(strList14);
    }

    @Test
    public void test1809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1809");
        java.io.Reader reader0 = null;
        java.io.InputStream inputStream2 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray3 = new byte[] {};
        int int4 = org.apache.commons.io.IOUtils.length(byteArray3);
        int int5 = org.apache.commons.io.IOUtils.read(inputStream2, byteArray3);
        byte[] byteArray6 = org.apache.commons.io.IOUtils.toByteArray(inputStream2);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer7 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream2, iOExceptionConsumer7);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream2);
        java.io.BufferedInputStream bufferedInputStream11 = org.apache.commons.io.IOUtils.buffer(inputStream2, (int) (byte) 10);
        java.io.InputStream inputStream13 = org.apache.commons.io.IOUtils.toBufferedInputStream((java.io.InputStream) bufferedInputStream11, (int) '#');
        char[] charArray14 = org.apache.commons.io.IOUtils.toCharArray((java.io.InputStream) bufferedInputStream11);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.readFully(reader0, charArray14, (int) (short) -1, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[], int, int)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream11);
        org.junit.Assert.assertNotNull(inputStream13);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[]");
    }

    @Test
    public void test1810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1810");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray(inputStream1, (int) (short) 0);
        long long9 = org.apache.commons.io.IOUtils.skip(inputStream1, 100L);
        java.io.InputStream inputStream11 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray12 = org.apache.commons.io.IOUtils.toByteArray(inputStream11);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream11);
        java.util.List<java.lang.String> strList14 = org.apache.commons.io.IOUtils.readLines(inputStream11);
        java.io.OutputStream outputStream15 = null;
        long long16 = org.apache.commons.io.IOUtils.copyLarge(inputStream11, outputStream15);
        java.io.OutputStream outputStream17 = null;
        java.io.InputStream inputStream21 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray22 = new byte[] {};
        int int23 = org.apache.commons.io.IOUtils.length(byteArray22);
        int int24 = org.apache.commons.io.IOUtils.read(inputStream21, byteArray22);
        long long25 = org.apache.commons.io.IOUtils.copyLarge(inputStream11, outputStream17, (-1L), 1L, byteArray22);
        int int26 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray22);
        java.io.InputStream inputStream28 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray29 = new byte[] {};
        int int30 = org.apache.commons.io.IOUtils.length(byteArray29);
        int int31 = org.apache.commons.io.IOUtils.read(inputStream28, byteArray29);
        byte[] byteArray32 = org.apache.commons.io.IOUtils.toByteArray(inputStream28);
        byte[] byteArray34 = org.apache.commons.io.IOUtils.toByteArray(inputStream28, (int) (short) 0);
        java.io.BufferedInputStream bufferedInputStream35 = org.apache.commons.io.IOUtils.buffer(inputStream28);
        byte[] byteArray36 = org.apache.commons.io.IOUtils.toByteArray((java.io.InputStream) bufferedInputStream35);
        org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray36);
        char[] charArray38 = org.apache.commons.io.IOUtils.toCharArray(inputStream1);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray40 = org.apache.commons.io.IOUtils.toByteArray(inputStream1, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Size must be equal or greater than zero: -1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(inputStream11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertNotNull(strList14);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(inputStream21);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(inputStream28);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream35);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertNotNull(charArray38);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray38), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray38), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray38), "[]");
    }

    @Test
    public void test1811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1811");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.io.InputStream inputStream7 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, (int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray9 = org.apache.commons.io.IOUtils.toByteArray(inputStream7, (long) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Unexpected read size. current: 0, expected: 100");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(inputStream7);
    }

    @Test
    public void test1812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1812");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly(inputStream1);
        java.io.InputStream inputStream10 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(inputStream10);
    }

    @Test
    public void test1813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1813");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.util.List<java.lang.String> strList4 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.OutputStream outputStream5 = null;
        long long6 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream5);
        java.io.Writer writer7 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer7);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream11 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray12 = new byte[] {};
        int int13 = org.apache.commons.io.IOUtils.length(byteArray12);
        int int14 = org.apache.commons.io.IOUtils.read(inputStream11, byteArray12);
        byte[] byteArray15 = org.apache.commons.io.IOUtils.toByteArray(inputStream11);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer16 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream11, iOExceptionConsumer16);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream11);
        java.io.BufferedInputStream bufferedInputStream20 = org.apache.commons.io.IOUtils.buffer(inputStream11, (int) (byte) 10);
        java.io.InputStream inputStream22 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream11, (int) (byte) 1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer23 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream11, iOExceptionConsumer23);
        java.io.OutputStream outputStream25 = null;
        java.io.InputStream inputStream27 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray28 = new byte[] {};
        int int29 = org.apache.commons.io.IOUtils.length(byteArray28);
        int int30 = org.apache.commons.io.IOUtils.read(inputStream27, byteArray28);
        byte[] byteArray31 = org.apache.commons.io.IOUtils.toByteArray(inputStream27);
        java.io.InputStream inputStream33 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray34 = new byte[] {};
        int int35 = org.apache.commons.io.IOUtils.length(byteArray34);
        int int36 = org.apache.commons.io.IOUtils.read(inputStream33, byteArray34);
        byte[] byteArray37 = org.apache.commons.io.IOUtils.toByteArray(inputStream33);
        int int38 = org.apache.commons.io.IOUtils.length(byteArray37);
        org.apache.commons.io.IOUtils.readFully(inputStream27, byteArray37);
        long long40 = org.apache.commons.io.IOUtils.copyLarge(inputStream11, outputStream25, byteArray37);
        boolean boolean41 = org.apache.commons.io.IOUtils.contentEquals(inputStream1, inputStream11);
        java.io.OutputStream outputStream42 = null;
        int int43 = org.apache.commons.io.IOUtils.copy(inputStream1, outputStream42);
        org.apache.commons.io.IOUtils.closeQuietly(inputStream1);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(inputStream11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream20);
        org.junit.Assert.assertNotNull(inputStream22);
        org.junit.Assert.assertNotNull(inputStream27);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(inputStream33);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
    }

    @Test
    public void test1814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1814");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.util.List<java.lang.String> strList4 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer5 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer5);
        java.io.InputStream inputStream8 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray9 = org.apache.commons.io.IOUtils.toByteArray(inputStream8);
        int int10 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray9);
        java.lang.String str11 = org.apache.commons.io.IOUtils.toString(inputStream1);
        java.util.List<java.lang.String> strList12 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.OutputStream outputStream14 = null;
        java.nio.charset.Charset charset15 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList12, "\r\n", outputStream14, charset15);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertNotNull(inputStream8);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(strList12);
    }

    @Test
    public void test1815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1815");
        java.io.Closeable closeable0 = null;
        java.io.Closeable[] closeableArray1 = new java.io.Closeable[] { closeable0 };
        org.apache.commons.io.IOUtils.closeQuietly(closeableArray1);
        org.apache.commons.io.IOUtils.closeQuietly(closeableArray1);
        org.apache.commons.io.IOUtils.closeQuietly(closeableArray1);
        org.apache.commons.io.IOUtils.closeQuietly(closeableArray1);
        int int6 = org.apache.commons.io.IOUtils.length((java.lang.Object[]) closeableArray1);
        int int7 = org.apache.commons.io.IOUtils.length((java.lang.Object[]) closeableArray1);
        org.apache.commons.io.IOUtils.closeQuietly(closeableArray1);
        int int9 = org.apache.commons.io.IOUtils.length((java.lang.Object[]) closeableArray1);
        org.apache.commons.io.IOUtils.closeQuietly(closeableArray1);
        int int11 = org.apache.commons.io.IOUtils.length((java.lang.Object[]) closeableArray1);
        int int12 = org.apache.commons.io.IOUtils.length((java.lang.Object[]) closeableArray1);
        int int13 = org.apache.commons.io.IOUtils.length((java.lang.Object[]) closeableArray1);
        org.junit.Assert.assertNotNull(closeableArray1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
    }

    @Test
    public void test1816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1816");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream3 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1);
        java.io.Writer writer4 = null;
        java.nio.charset.Charset charset5 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer4, charset5);
        java.io.OutputStream outputStream7 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray("");
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray10);
        java.lang.String str12 = org.apache.commons.io.IOUtils.toString(byteArray10);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream7, byteArray10);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str15 = org.apache.commons.io.IOUtils.toString(inputStream1, "\r\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ??");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream3);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
    }

    @Test
    public void test1817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1817");
        char[] charArray0 = new char[] {};
        int int1 = org.apache.commons.io.IOUtils.length(charArray0);
        java.io.Writer writer2 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray0, writer2);
        int int4 = org.apache.commons.io.IOUtils.length(charArray0);
        int int5 = org.apache.commons.io.IOUtils.length(charArray0);
        java.io.Writer writer6 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(charArray0, writer6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Writer.write(char[])\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray0);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray0), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray0), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test1818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1818");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.List<java.lang.String> strList3 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.InputStream inputStream5 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream6 = null;
        java.io.InputStream inputStream9 = null;
        byte[] byteArray11 = org.apache.commons.io.IOUtils.toByteArray("");
        int int12 = org.apache.commons.io.IOUtils.read(inputStream9, byteArray11);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream5, outputStream6, 0L, 0L, byteArray11);
        java.nio.charset.Charset charset14 = null;
        java.util.List<java.lang.String> strList15 = org.apache.commons.io.IOUtils.readLines(inputStream5, charset14);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream5);
        java.nio.charset.Charset charset17 = null;
        java.lang.String str18 = org.apache.commons.io.IOUtils.toString(inputStream5, charset17);
        java.io.Writer writer19 = null;
        org.apache.commons.io.IOUtils.copy(inputStream5, writer19);
        byte[] byteArray22 = org.apache.commons.io.IOUtils.toByteArray(inputStream5, (int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            int int25 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray22, (int) '4', (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Range [52, 52 + 52) out of bounds for length 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(strList3);
        org.junit.Assert.assertNotNull(inputStream5);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(strList15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
    }

    @Test
    public void test1819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1819");
        // The following exception was thrown during execution in test generation
        try {
            java.io.InputStream inputStream2 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "hi!", "\r\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ??");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1820");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer9 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer9);
        java.nio.charset.Charset charset11 = null;
        char[] charArray12 = org.apache.commons.io.IOUtils.toCharArray(inputStream1, charset11);
        java.io.OutputStream outputStream13 = null;
        int int14 = org.apache.commons.io.IOUtils.copy(inputStream1, outputStream13);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray12), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray12), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray12), "[]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test1821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1821");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.util.List<java.lang.String> strList4 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.OutputStream outputStream5 = null;
        long long6 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream5);
        java.io.Writer writer7 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer7);
        java.io.OutputStream outputStream9 = null;
        long long10 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream9);
        java.io.OutputStream outputStream11 = null;
        java.io.InputStream inputStream13 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream14 = null;
        java.io.InputStream inputStream16 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream17 = null;
        java.io.InputStream inputStream20 = null;
        byte[] byteArray22 = org.apache.commons.io.IOUtils.toByteArray("");
        int int23 = org.apache.commons.io.IOUtils.read(inputStream20, byteArray22);
        long long24 = org.apache.commons.io.IOUtils.copyLarge(inputStream16, outputStream17, 0L, 0L, byteArray22);
        long long25 = org.apache.commons.io.IOUtils.copyLarge(inputStream13, outputStream14, byteArray22);
        java.io.BufferedInputStream bufferedInputStream27 = org.apache.commons.io.IOUtils.buffer(inputStream13, (int) (byte) 10);
        java.nio.charset.Charset charset28 = null;
        java.util.List<java.lang.String> strList29 = org.apache.commons.io.IOUtils.readLines(inputStream13, charset28);
        java.io.OutputStream outputStream30 = null;
        long long33 = org.apache.commons.io.IOUtils.copyLarge(inputStream13, outputStream30, 0L, (long) 0);
        java.nio.charset.Charset charset34 = null;
        char[] charArray35 = org.apache.commons.io.IOUtils.toCharArray(inputStream13, charset34);
        java.io.InputStream inputStream37 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream37);
        java.io.InputStream inputStream39 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream37);
        java.lang.String str40 = org.apache.commons.io.IOUtils.toString(inputStream37);
        java.io.InputStream inputStream41 = null;
        byte[] byteArray43 = org.apache.commons.io.IOUtils.toByteArray("");
        int int44 = org.apache.commons.io.IOUtils.read(inputStream41, byteArray43);
        org.apache.commons.io.IOUtils.readFully(inputStream37, byteArray43);
        int int46 = org.apache.commons.io.IOUtils.length(byteArray43);
        org.apache.commons.io.IOUtils.readFully(inputStream13, byteArray43);
        long long48 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream11, byteArray43);
        java.lang.Class<?> wildcardClass49 = inputStream1.getClass();
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(inputStream13);
        org.junit.Assert.assertNotNull(inputStream16);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream27);
        org.junit.Assert.assertNotNull(strList29);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertNotNull(charArray35);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray35), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray35), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray35), "[]");
        org.junit.Assert.assertNotNull(inputStream37);
        org.junit.Assert.assertNotNull(inputStream39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass49);
    }

    @Test
    public void test1822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1822");
        java.io.Reader reader0 = null;
        java.io.Reader reader1 = null;
        java.io.Reader reader2 = null;
        java.io.Reader reader3 = null;
        java.io.Reader reader4 = null;
        java.io.Writer writer5 = null;
        char[] charArray8 = new char[] {};
        int int9 = org.apache.commons.io.IOUtils.length(charArray8);
        java.io.Writer writer10 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray8, writer10);
        java.io.Writer writer12 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray8, writer12);
        long long14 = org.apache.commons.io.IOUtils.copyLarge(reader4, writer5, 0L, (long) (byte) 100, charArray8);
        int int15 = org.apache.commons.io.IOUtils.read(reader3, charArray8);
        int int16 = org.apache.commons.io.IOUtils.length(charArray8);
        int int17 = org.apache.commons.io.IOUtils.read(reader2, charArray8);
        org.apache.commons.io.IOUtils.readFully(reader1, charArray8);
        org.apache.commons.io.IOUtils.readFully(reader0, charArray8);
        int int20 = org.apache.commons.io.IOUtils.length(charArray8);
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    }

    @Test
    public void test1823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1823");
        java.io.Reader reader0 = null;
        java.io.Writer writer1 = null;
        java.io.Reader reader2 = null;
        char[] charArray3 = new char[] {};
        int int4 = org.apache.commons.io.IOUtils.length(charArray3);
        int int5 = org.apache.commons.io.IOUtils.length(charArray3);
        int int6 = org.apache.commons.io.IOUtils.read(reader2, charArray3);
        // The following exception was thrown during execution in test generation
        try {
            long long7 = org.apache.commons.io.IOUtils.copyLarge(reader0, writer1, charArray3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[])\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray3), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray3), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray3), "[]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test1824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1824");
        java.io.Reader reader0 = null;
        java.io.Writer writer1 = null;
        java.io.InputStream inputStream3 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream4 = null;
        java.io.InputStream inputStream6 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream7 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray12 = org.apache.commons.io.IOUtils.toByteArray("");
        int int13 = org.apache.commons.io.IOUtils.read(inputStream10, byteArray12);
        long long14 = org.apache.commons.io.IOUtils.copyLarge(inputStream6, outputStream7, 0L, 0L, byteArray12);
        long long15 = org.apache.commons.io.IOUtils.copyLarge(inputStream3, outputStream4, byteArray12);
        java.io.BufferedInputStream bufferedInputStream17 = org.apache.commons.io.IOUtils.buffer(inputStream3, (int) (byte) 10);
        java.io.InputStream inputStream19 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray20 = org.apache.commons.io.IOUtils.toByteArray(inputStream19);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream19);
        java.io.InputStream inputStream23 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream24 = null;
        java.io.InputStream inputStream27 = null;
        byte[] byteArray29 = org.apache.commons.io.IOUtils.toByteArray("");
        int int30 = org.apache.commons.io.IOUtils.read(inputStream27, byteArray29);
        long long31 = org.apache.commons.io.IOUtils.copyLarge(inputStream23, outputStream24, 0L, 0L, byteArray29);
        java.nio.charset.Charset charset32 = null;
        java.util.List<java.lang.String> strList33 = org.apache.commons.io.IOUtils.readLines(inputStream23, charset32);
        java.io.InputStream inputStream35 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream36 = null;
        java.io.InputStream inputStream39 = null;
        byte[] byteArray41 = org.apache.commons.io.IOUtils.toByteArray("");
        int int42 = org.apache.commons.io.IOUtils.read(inputStream39, byteArray41);
        long long43 = org.apache.commons.io.IOUtils.copyLarge(inputStream35, outputStream36, 0L, 0L, byteArray41);
        java.nio.charset.Charset charset44 = null;
        java.util.List<java.lang.String> strList45 = org.apache.commons.io.IOUtils.readLines(inputStream35, charset44);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream35);
        boolean boolean47 = org.apache.commons.io.IOUtils.contentEquals(inputStream23, inputStream35);
        java.io.OutputStream outputStream48 = null;
        java.io.InputStream inputStream50 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream51 = null;
        java.io.InputStream inputStream54 = null;
        byte[] byteArray56 = org.apache.commons.io.IOUtils.toByteArray("");
        int int57 = org.apache.commons.io.IOUtils.read(inputStream54, byteArray56);
        long long58 = org.apache.commons.io.IOUtils.copyLarge(inputStream50, outputStream51, 0L, 0L, byteArray56);
        long long59 = org.apache.commons.io.IOUtils.copyLarge(inputStream35, outputStream48, byteArray56);
        org.apache.commons.io.IOUtils.readFully(inputStream19, byteArray56);
        org.apache.commons.io.IOUtils.readFully(inputStream3, byteArray56);
        java.lang.String str62 = org.apache.commons.io.IOUtils.toString(inputStream3);
        java.io.BufferedInputStream bufferedInputStream64 = org.apache.commons.io.IOUtils.buffer(inputStream3, 100);
        java.io.OutputStream outputStream65 = null;
        java.io.InputStream inputStream68 = null;
        byte[] byteArray70 = org.apache.commons.io.IOUtils.toByteArray("");
        int int71 = org.apache.commons.io.IOUtils.read(inputStream68, byteArray70);
        java.lang.String str72 = org.apache.commons.io.IOUtils.toString(byteArray70);
        long long73 = org.apache.commons.io.IOUtils.copyLarge(inputStream3, outputStream65, (-1L), (long) (short) -1, byteArray70);
        java.io.InputStream inputStream74 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream3);
        char[] charArray75 = org.apache.commons.io.IOUtils.toCharArray(inputStream3);
        // The following exception was thrown during execution in test generation
        try {
            long long76 = org.apache.commons.io.IOUtils.copyLarge(reader0, writer1, charArray75);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[])\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream3);
        org.junit.Assert.assertNotNull(inputStream6);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream17);
        org.junit.Assert.assertNotNull(inputStream19);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertNotNull(inputStream23);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertNotNull(strList33);
        org.junit.Assert.assertNotNull(inputStream35);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertNotNull(strList45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(inputStream50);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 0L + "'", long58 == 0L);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNotNull(bufferedInputStream64);
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 0L + "'", long73 == 0L);
        org.junit.Assert.assertNotNull(inputStream74);
        org.junit.Assert.assertNotNull(charArray75);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray75), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray75), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray75), "[]");
    }

    @Test
    public void test1825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1825");
        java.io.Reader reader0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.skipFully(reader0, 100L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[], int, int)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1826");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.util.List<java.lang.String> strList4 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.BufferedInputStream bufferedInputStream5 = org.apache.commons.io.IOUtils.buffer(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray9 = org.apache.commons.io.IOUtils.readFully(inputStream1, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.io.EOFException; message: Length to read: 10 actual: 0");
        } catch (java.io.EOFException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertNotNull(bufferedInputStream5);
    }

    @Test
    public void test1827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1827");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray(inputStream1, (int) (short) 0);
        java.io.BufferedInputStream bufferedInputStream8 = org.apache.commons.io.IOUtils.buffer(inputStream1);
        java.io.InputStream inputStream9 = org.apache.commons.io.IOUtils.toBufferedInputStream((java.io.InputStream) bufferedInputStream8);
        java.io.Writer writer10 = null;
        org.apache.commons.io.IOUtils.copy(inputStream9, writer10);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream8);
        org.junit.Assert.assertNotNull(inputStream9);
    }

    @Test
    public void test1828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1828");
        java.io.Reader reader0 = null;
        java.io.Reader reader1 = null;
        java.io.Writer writer2 = null;
        java.io.InputStream inputStream6 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray(inputStream6);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream6);
        java.util.List<java.lang.String> strList9 = org.apache.commons.io.IOUtils.readLines(inputStream6);
        java.io.OutputStream outputStream10 = null;
        long long11 = org.apache.commons.io.IOUtils.copyLarge(inputStream6, outputStream10);
        java.io.Writer writer12 = null;
        org.apache.commons.io.IOUtils.copy(inputStream6, writer12);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream6);
        java.io.InputStream inputStream16 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray17 = new byte[] {};
        int int18 = org.apache.commons.io.IOUtils.length(byteArray17);
        int int19 = org.apache.commons.io.IOUtils.read(inputStream16, byteArray17);
        byte[] byteArray20 = org.apache.commons.io.IOUtils.toByteArray(inputStream16);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer21 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream16, iOExceptionConsumer21);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream16);
        java.io.BufferedInputStream bufferedInputStream25 = org.apache.commons.io.IOUtils.buffer(inputStream16, (int) (byte) 10);
        java.io.InputStream inputStream27 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream16, (int) (byte) 1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer28 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream16, iOExceptionConsumer28);
        java.io.OutputStream outputStream30 = null;
        java.io.InputStream inputStream32 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray33 = new byte[] {};
        int int34 = org.apache.commons.io.IOUtils.length(byteArray33);
        int int35 = org.apache.commons.io.IOUtils.read(inputStream32, byteArray33);
        byte[] byteArray36 = org.apache.commons.io.IOUtils.toByteArray(inputStream32);
        java.io.InputStream inputStream38 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray39 = new byte[] {};
        int int40 = org.apache.commons.io.IOUtils.length(byteArray39);
        int int41 = org.apache.commons.io.IOUtils.read(inputStream38, byteArray39);
        byte[] byteArray42 = org.apache.commons.io.IOUtils.toByteArray(inputStream38);
        int int43 = org.apache.commons.io.IOUtils.length(byteArray42);
        org.apache.commons.io.IOUtils.readFully(inputStream32, byteArray42);
        long long45 = org.apache.commons.io.IOUtils.copyLarge(inputStream16, outputStream30, byteArray42);
        boolean boolean46 = org.apache.commons.io.IOUtils.contentEquals(inputStream6, inputStream16);
        java.io.BufferedInputStream bufferedInputStream47 = org.apache.commons.io.IOUtils.buffer(inputStream6);
        java.io.BufferedInputStream bufferedInputStream49 = org.apache.commons.io.IOUtils.buffer(inputStream6, (int) (short) 100);
        java.io.InputStream inputStream51 = org.apache.commons.io.IOUtils.toInputStream("\n");
        byte[] byteArray53 = org.apache.commons.io.IOUtils.toByteArray(inputStream51, (int) (byte) 0);
        java.io.InputStream inputStream55 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray56 = new byte[] {};
        int int57 = org.apache.commons.io.IOUtils.length(byteArray56);
        int int58 = org.apache.commons.io.IOUtils.read(inputStream55, byteArray56);
        byte[] byteArray59 = org.apache.commons.io.IOUtils.toByteArray(inputStream55);
        byte[] byteArray61 = org.apache.commons.io.IOUtils.toByteArray(inputStream55, (int) (short) 0);
        byte[] byteArray62 = new byte[] {};
        int int63 = org.apache.commons.io.IOUtils.length(byteArray62);
        org.apache.commons.io.IOUtils.readFully(inputStream55, byteArray62);
        org.apache.commons.io.IOUtils.readFully(inputStream51, byteArray62);
        boolean boolean66 = org.apache.commons.io.IOUtils.contentEquals(inputStream6, inputStream51);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer67 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream51, iOExceptionConsumer67);
        java.io.InputStream inputStream69 = null;
        java.io.OutputStream outputStream70 = null;
        byte[] byteArray73 = new byte[] {};
        int int74 = org.apache.commons.io.IOUtils.length(byteArray73);
        java.io.OutputStream outputStream75 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray73, outputStream75);
        long long77 = org.apache.commons.io.IOUtils.copyLarge(inputStream69, outputStream70, 0L, (long) (byte) -1, byteArray73);
        java.io.OutputStream outputStream78 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray73, outputStream78);
        org.apache.commons.io.IOUtils.readFully(inputStream51, byteArray73);
        java.nio.charset.Charset charset81 = null;
        char[] charArray82 = org.apache.commons.io.IOUtils.toCharArray(inputStream51, charset81);
        long long83 = org.apache.commons.io.IOUtils.copyLarge(reader1, writer2, (long) (byte) 0, (long) '/', charArray82);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.readFully(reader0, charArray82, 10, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[], int, int)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream6);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(inputStream16);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream25);
        org.junit.Assert.assertNotNull(inputStream27);
        org.junit.Assert.assertNotNull(inputStream32);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertNotNull(inputStream38);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(bufferedInputStream47);
        org.junit.Assert.assertNotNull(bufferedInputStream49);
        org.junit.Assert.assertNotNull(inputStream51);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[]");
        org.junit.Assert.assertNotNull(inputStream55);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[]");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[]");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 0L + "'", long77 == 0L);
        org.junit.Assert.assertNotNull(charArray82);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray82), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray82), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray82), "[]");
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 0L + "'", long83 == 0L);
    }

    @Test
    public void test1829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1829");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        java.nio.charset.Charset charset10 = null;
        java.util.List<java.lang.String> strList11 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset10);
        java.io.OutputStream outputStream13 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList11, "hi!", outputStream13);
        java.io.OutputStream outputStream16 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList11, "hi!", outputStream16);
        java.io.OutputStream outputStream19 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList11, "", outputStream19);
        java.io.OutputStream outputStream22 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList11, "\n", outputStream22);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(strList11);
    }

    @Test
    public void test1830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1830");
        java.io.OutputStream outputStream0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.BufferedOutputStream bufferedOutputStream2 = org.apache.commons.io.IOUtils.buffer(outputStream0, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: outputStream");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1831");
        java.io.Reader reader0 = null;
        java.io.Reader reader1 = null;
        java.io.Writer writer2 = null;
        char[] charArray5 = new char[] {};
        int int6 = org.apache.commons.io.IOUtils.length(charArray5);
        java.io.Writer writer7 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray5, writer7);
        java.io.Writer writer9 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray5, writer9);
        long long11 = org.apache.commons.io.IOUtils.copyLarge(reader1, writer2, 0L, (long) (byte) 100, charArray5);
        int int12 = org.apache.commons.io.IOUtils.read(reader0, charArray5);
        int int13 = org.apache.commons.io.IOUtils.length(charArray5);
        java.io.Writer writer14 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray5, writer14);
        java.io.OutputStream outputStream16 = null;
        java.nio.charset.Charset charset17 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(charArray5, outputStream16, charset17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.OutputStream.write(byte[])\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test1832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1832");
        java.io.Reader reader0 = null;
        java.io.InputStream inputStream2 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray3 = new byte[] {};
        int int4 = org.apache.commons.io.IOUtils.length(byteArray3);
        int int5 = org.apache.commons.io.IOUtils.read(inputStream2, byteArray3);
        byte[] byteArray6 = org.apache.commons.io.IOUtils.toByteArray(inputStream2);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer7 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream2, iOExceptionConsumer7);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream2);
        java.io.BufferedInputStream bufferedInputStream11 = org.apache.commons.io.IOUtils.buffer(inputStream2, (int) (byte) 10);
        java.io.InputStream inputStream13 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream2, (int) (byte) 1);
        java.nio.charset.Charset charset14 = null;
        char[] charArray15 = org.apache.commons.io.IOUtils.toCharArray(inputStream2, charset14);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.readFully(reader0, charArray15, 3, 5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[], int, int)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream11);
        org.junit.Assert.assertNotNull(inputStream13);
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[]");
    }

    @Test
    public void test1833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1833");
        java.nio.charset.Charset charset1 = null;
        java.io.InputStream inputStream2 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "", charset1);
        java.util.List<java.lang.String> strList3 = org.apache.commons.io.IOUtils.readLines(inputStream2);
        java.io.OutputStream outputStream5 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList3, "\n", outputStream5);
        java.io.Writer writer8 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList3, "hi!", writer8);
        java.io.OutputStream outputStream11 = null;
        java.nio.charset.Charset charset12 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList3, "hi!", outputStream11, charset12);
        java.io.Writer writer15 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList3, "\n", writer15);
        java.io.OutputStream outputStream18 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList3, "\r\n", outputStream18, "hi!");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: hi!");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream2);
        org.junit.Assert.assertNotNull(strList3);
    }

    @Test
    public void test1834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1834");
        java.nio.channels.ReadableByteChannel readableByteChannel0 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long2 = org.apache.commons.io.IOUtils.skip(readableByteChannel0, (long) '\\');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.nio.channels.ReadableByteChannel.read(java.nio.ByteBuffer)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1835");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.util.List<java.lang.String> strList4 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.OutputStream outputStream6 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList4, "\n", outputStream6);
        java.io.OutputStream outputStream9 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList4, "\n", outputStream9);
        java.io.OutputStream outputStream12 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList4, "\n", outputStream12);
        java.io.Writer writer15 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList4, "", writer15);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(strList4);
    }

    @Test
    public void test1836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1836");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.util.List<java.lang.String> strList4 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.OutputStream outputStream5 = null;
        long long6 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream5);
        java.io.OutputStream outputStream7 = null;
        java.io.InputStream inputStream11 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray12 = new byte[] {};
        int int13 = org.apache.commons.io.IOUtils.length(byteArray12);
        int int14 = org.apache.commons.io.IOUtils.read(inputStream11, byteArray12);
        byte[] byteArray15 = org.apache.commons.io.IOUtils.toByteArray(inputStream11);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer16 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream11, iOExceptionConsumer16);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream11);
        java.io.BufferedInputStream bufferedInputStream20 = org.apache.commons.io.IOUtils.buffer(inputStream11, (int) (byte) 10);
        java.io.InputStream inputStream22 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream11, (int) (byte) 1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer23 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream11, iOExceptionConsumer23);
        java.io.OutputStream outputStream25 = null;
        java.io.InputStream inputStream27 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray28 = new byte[] {};
        int int29 = org.apache.commons.io.IOUtils.length(byteArray28);
        int int30 = org.apache.commons.io.IOUtils.read(inputStream27, byteArray28);
        byte[] byteArray31 = org.apache.commons.io.IOUtils.toByteArray(inputStream27);
        java.io.InputStream inputStream33 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray34 = new byte[] {};
        int int35 = org.apache.commons.io.IOUtils.length(byteArray34);
        int int36 = org.apache.commons.io.IOUtils.read(inputStream33, byteArray34);
        byte[] byteArray37 = org.apache.commons.io.IOUtils.toByteArray(inputStream33);
        int int38 = org.apache.commons.io.IOUtils.length(byteArray37);
        org.apache.commons.io.IOUtils.readFully(inputStream27, byteArray37);
        long long40 = org.apache.commons.io.IOUtils.copyLarge(inputStream11, outputStream25, byteArray37);
        long long41 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream7, (long) (short) 0, 1L, byteArray37);
        java.io.Writer writer42 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer42);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(inputStream11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream20);
        org.junit.Assert.assertNotNull(inputStream22);
        org.junit.Assert.assertNotNull(inputStream27);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(inputStream33);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
    }

    @Test
    public void test1837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1837");
        java.io.Reader reader0 = null;
        java.io.Reader reader1 = null;
        java.io.Reader reader2 = null;
        java.io.Reader reader3 = null;
        char[] charArray4 = new char[] {};
        int int5 = org.apache.commons.io.IOUtils.length(charArray4);
        java.io.Writer writer6 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray4, writer6);
        int int8 = org.apache.commons.io.IOUtils.length(charArray4);
        java.io.Writer writer9 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray4, writer9);
        int int11 = org.apache.commons.io.IOUtils.length(charArray4);
        int int12 = org.apache.commons.io.IOUtils.read(reader3, charArray4);
        int int13 = org.apache.commons.io.IOUtils.read(reader2, charArray4);
        int int14 = org.apache.commons.io.IOUtils.length(charArray4);
        org.apache.commons.io.IOUtils.readFully(reader1, charArray4);
        int int16 = org.apache.commons.io.IOUtils.read(reader0, charArray4);
        java.io.Writer writer17 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(charArray4, writer17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Writer.write(char[])\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test1838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1838");
        java.io.Reader reader0 = null;
        char[] charArray1 = new char[] {};
        int int2 = org.apache.commons.io.IOUtils.length(charArray1);
        java.io.Writer writer3 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray1, writer3);
        int int5 = org.apache.commons.io.IOUtils.read(reader0, charArray1);
        java.io.Writer writer6 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray1, writer6);
        int int8 = org.apache.commons.io.IOUtils.length(charArray1);
        java.io.Writer writer9 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(charArray1, writer9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Writer.write(char[])\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray1);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray1), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray1), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray1), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test1839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1839");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream("\n");
        byte[] byteArray3 = org.apache.commons.io.IOUtils.toByteArray(inputStream1, (int) (byte) 0);
        java.io.InputStream inputStream5 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray6 = new byte[] {};
        int int7 = org.apache.commons.io.IOUtils.length(byteArray6);
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray6);
        byte[] byteArray9 = org.apache.commons.io.IOUtils.toByteArray(inputStream5);
        byte[] byteArray11 = org.apache.commons.io.IOUtils.toByteArray(inputStream5, (int) (short) 0);
        byte[] byteArray12 = new byte[] {};
        int int13 = org.apache.commons.io.IOUtils.length(byteArray12);
        org.apache.commons.io.IOUtils.readFully(inputStream5, byteArray12);
        org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray12);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.skipFully(inputStream1, (long) '\\');
            org.junit.Assert.fail("Expected exception of type java.io.EOFException; message: Bytes to skip: 92 actual: 1");
        } catch (java.io.EOFException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertNotNull(inputStream5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test1840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1840");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.nio.charset.Charset charset4 = null;
        org.apache.commons.io.LineIterator lineIterator5 = org.apache.commons.io.IOUtils.lineIterator(inputStream1, charset4);
        java.nio.charset.Charset charset6 = null;
        java.util.List<java.lang.String> strList7 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset6);
        java.io.OutputStream outputStream9 = null;
        java.nio.charset.Charset charset10 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList7, "hi!", outputStream9, charset10);
        java.io.Writer writer13 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList7, "\n", writer13);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(lineIterator5);
        org.junit.Assert.assertNotNull(strList7);
    }

    @Test
    public void test1841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1841");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.lang.Class<?> wildcardClass2 = inputStream1.getClass();
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(wildcardClass2);
    }

    @Test
    public void test1842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1842");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.util.List<java.lang.String> strList4 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.OutputStream outputStream5 = null;
        long long6 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream5);
        java.io.Writer writer7 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer7);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream11 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray12 = new byte[] {};
        int int13 = org.apache.commons.io.IOUtils.length(byteArray12);
        int int14 = org.apache.commons.io.IOUtils.read(inputStream11, byteArray12);
        byte[] byteArray15 = org.apache.commons.io.IOUtils.toByteArray(inputStream11);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer16 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream11, iOExceptionConsumer16);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream11);
        java.io.BufferedInputStream bufferedInputStream20 = org.apache.commons.io.IOUtils.buffer(inputStream11, (int) (byte) 10);
        java.io.InputStream inputStream22 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream11, (int) (byte) 1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer23 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream11, iOExceptionConsumer23);
        java.io.OutputStream outputStream25 = null;
        java.io.InputStream inputStream27 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray28 = new byte[] {};
        int int29 = org.apache.commons.io.IOUtils.length(byteArray28);
        int int30 = org.apache.commons.io.IOUtils.read(inputStream27, byteArray28);
        byte[] byteArray31 = org.apache.commons.io.IOUtils.toByteArray(inputStream27);
        java.io.InputStream inputStream33 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray34 = new byte[] {};
        int int35 = org.apache.commons.io.IOUtils.length(byteArray34);
        int int36 = org.apache.commons.io.IOUtils.read(inputStream33, byteArray34);
        byte[] byteArray37 = org.apache.commons.io.IOUtils.toByteArray(inputStream33);
        int int38 = org.apache.commons.io.IOUtils.length(byteArray37);
        org.apache.commons.io.IOUtils.readFully(inputStream27, byteArray37);
        long long40 = org.apache.commons.io.IOUtils.copyLarge(inputStream11, outputStream25, byteArray37);
        boolean boolean41 = org.apache.commons.io.IOUtils.contentEquals(inputStream1, inputStream11);
        java.io.BufferedInputStream bufferedInputStream43 = org.apache.commons.io.IOUtils.buffer(inputStream1, 5);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer44 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) bufferedInputStream43, iOExceptionConsumer44);
        java.io.BufferedInputStream bufferedInputStream47 = org.apache.commons.io.IOUtils.buffer((java.io.InputStream) bufferedInputStream43, 2);
        byte[] byteArray49 = org.apache.commons.io.IOUtils.toByteArray((java.io.InputStream) bufferedInputStream43, (long) (byte) 0);
        java.io.Writer writer50 = null;
        java.nio.charset.Charset charset51 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(byteArray49, writer50, charset51);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Writer.write(String)\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(inputStream11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream20);
        org.junit.Assert.assertNotNull(inputStream22);
        org.junit.Assert.assertNotNull(inputStream27);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(inputStream33);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(bufferedInputStream43);
        org.junit.Assert.assertNotNull(bufferedInputStream47);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
    }

    @Test
    public void test1843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1843");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.BufferedInputStream bufferedInputStream10 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.io.InputStream inputStream12 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, (int) (byte) 1);
        java.nio.charset.Charset charset13 = null;
        char[] charArray14 = org.apache.commons.io.IOUtils.toCharArray(inputStream1, charset13);
        java.io.InputStream inputStream16 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray17 = org.apache.commons.io.IOUtils.toByteArray(inputStream16);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream16);
        java.util.List<java.lang.String> strList19 = org.apache.commons.io.IOUtils.readLines(inputStream16);
        java.io.OutputStream outputStream20 = null;
        long long21 = org.apache.commons.io.IOUtils.copyLarge(inputStream16, outputStream20);
        java.io.OutputStream outputStream22 = null;
        java.io.InputStream inputStream26 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray27 = new byte[] {};
        int int28 = org.apache.commons.io.IOUtils.length(byteArray27);
        int int29 = org.apache.commons.io.IOUtils.read(inputStream26, byteArray27);
        long long30 = org.apache.commons.io.IOUtils.copyLarge(inputStream16, outputStream22, (-1L), 1L, byteArray27);
        java.io.OutputStream outputStream31 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray27, outputStream31);
        int int33 = org.apache.commons.io.IOUtils.length(byteArray27);
        java.io.OutputStream outputStream34 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray27, outputStream34);
        // The following exception was thrown during execution in test generation
        try {
            int int38 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray27, (int) (short) 10, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Length must not be negative: -1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream10);
        org.junit.Assert.assertNotNull(inputStream12);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[]");
        org.junit.Assert.assertNotNull(inputStream16);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(inputStream26);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
    }

    @Test
    public void test1844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1844");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        java.nio.charset.Charset charset10 = null;
        java.util.List<java.lang.String> strList11 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset10);
        java.io.InputStream inputStream13 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream14 = null;
        java.io.InputStream inputStream17 = null;
        byte[] byteArray19 = org.apache.commons.io.IOUtils.toByteArray("");
        int int20 = org.apache.commons.io.IOUtils.read(inputStream17, byteArray19);
        long long21 = org.apache.commons.io.IOUtils.copyLarge(inputStream13, outputStream14, 0L, 0L, byteArray19);
        java.nio.charset.Charset charset22 = null;
        java.util.List<java.lang.String> strList23 = org.apache.commons.io.IOUtils.readLines(inputStream13, charset22);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream13);
        boolean boolean25 = org.apache.commons.io.IOUtils.contentEquals(inputStream1, inputStream13);
        java.lang.String str26 = org.apache.commons.io.IOUtils.toString(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly(inputStream1);
        java.io.Writer writer28 = null;
        java.nio.charset.Charset charset29 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer28, charset29);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertNotNull(inputStream13);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(strList23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
    }

    @Test
    public void test1845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1845");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        java.nio.charset.Charset charset5 = null;
        org.apache.commons.io.LineIterator lineIterator6 = org.apache.commons.io.IOUtils.lineIterator(inputStream1, charset5);
        java.io.InputStream inputStream8 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray9 = new byte[] {};
        int int10 = org.apache.commons.io.IOUtils.length(byteArray9);
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray9);
        byte[] byteArray12 = org.apache.commons.io.IOUtils.toByteArray(inputStream8);
        boolean boolean13 = org.apache.commons.io.IOUtils.contentEquals(inputStream1, inputStream8);
        java.io.InputStream inputStream15 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray16 = new byte[] {};
        int int17 = org.apache.commons.io.IOUtils.length(byteArray16);
        int int18 = org.apache.commons.io.IOUtils.read(inputStream15, byteArray16);
        byte[] byteArray19 = org.apache.commons.io.IOUtils.toByteArray(inputStream15);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer20 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream15, iOExceptionConsumer20);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream15);
        java.io.BufferedInputStream bufferedInputStream24 = org.apache.commons.io.IOUtils.buffer(inputStream15, (int) (byte) 10);
        java.io.InputStream inputStream26 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream15, (int) (byte) 1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer27 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream15, iOExceptionConsumer27);
        java.io.OutputStream outputStream29 = null;
        java.io.InputStream inputStream31 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray32 = new byte[] {};
        int int33 = org.apache.commons.io.IOUtils.length(byteArray32);
        int int34 = org.apache.commons.io.IOUtils.read(inputStream31, byteArray32);
        byte[] byteArray35 = org.apache.commons.io.IOUtils.toByteArray(inputStream31);
        java.io.InputStream inputStream37 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray38 = new byte[] {};
        int int39 = org.apache.commons.io.IOUtils.length(byteArray38);
        int int40 = org.apache.commons.io.IOUtils.read(inputStream37, byteArray38);
        byte[] byteArray41 = org.apache.commons.io.IOUtils.toByteArray(inputStream37);
        int int42 = org.apache.commons.io.IOUtils.length(byteArray41);
        org.apache.commons.io.IOUtils.readFully(inputStream31, byteArray41);
        long long44 = org.apache.commons.io.IOUtils.copyLarge(inputStream15, outputStream29, byteArray41);
        byte[] byteArray45 = org.apache.commons.io.IOUtils.toByteArray(inputStream15);
        org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray45);
        java.io.OutputStream outputStream47 = null;
        java.io.InputStream inputStream51 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream52 = null;
        java.io.InputStream inputStream55 = null;
        byte[] byteArray57 = org.apache.commons.io.IOUtils.toByteArray("");
        int int58 = org.apache.commons.io.IOUtils.read(inputStream55, byteArray57);
        long long59 = org.apache.commons.io.IOUtils.copyLarge(inputStream51, outputStream52, 0L, 0L, byteArray57);
        java.nio.charset.Charset charset60 = null;
        java.util.List<java.lang.String> strList61 = org.apache.commons.io.IOUtils.readLines(inputStream51, charset60);
        java.nio.charset.Charset charset62 = null;
        char[] charArray63 = org.apache.commons.io.IOUtils.toCharArray(inputStream51, charset62);
        byte[] byteArray65 = org.apache.commons.io.IOUtils.toByteArray(inputStream51, (long) (byte) 0);
        long long66 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream47, 0L, 10L, byteArray65);
        long long68 = org.apache.commons.io.IOUtils.skip(inputStream1, (long) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.LineIterator lineIterator70 = org.apache.commons.io.IOUtils.lineIterator(inputStream1, "hi!");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: hi!");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(lineIterator6);
        org.junit.Assert.assertNotNull(inputStream8);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(inputStream15);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream24);
        org.junit.Assert.assertNotNull(inputStream26);
        org.junit.Assert.assertNotNull(inputStream31);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(inputStream37);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
        org.junit.Assert.assertNotNull(inputStream51);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertNotNull(strList61);
        org.junit.Assert.assertNotNull(charArray63);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray63), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray63), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray63), "[]");
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 0L + "'", long66 == 0L);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 0L + "'", long68 == 0L);
    }

    @Test
    public void test1846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1846");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "\n");
        java.util.List<java.lang.String> strList2 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.OutputStream outputStream3 = null;
        java.io.InputStream inputStream5 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray6 = new byte[] {};
        int int7 = org.apache.commons.io.IOUtils.length(byteArray6);
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray6);
        byte[] byteArray9 = org.apache.commons.io.IOUtils.toByteArray(inputStream5);
        byte[] byteArray11 = org.apache.commons.io.IOUtils.toByteArray(inputStream5, (int) (short) 0);
        byte[] byteArray12 = new byte[] {};
        int int13 = org.apache.commons.io.IOUtils.length(byteArray12);
        org.apache.commons.io.IOUtils.readFully(inputStream5, byteArray12);
        java.lang.String str15 = org.apache.commons.io.IOUtils.toString(byteArray12);
        int int16 = org.apache.commons.io.IOUtils.length(byteArray12);
        long long17 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream3, byteArray12);
        java.io.OutputStream outputStream18 = null;
        java.io.InputStream inputStream22 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray23 = new byte[] {};
        int int24 = org.apache.commons.io.IOUtils.length(byteArray23);
        int int25 = org.apache.commons.io.IOUtils.read(inputStream22, byteArray23);
        byte[] byteArray26 = org.apache.commons.io.IOUtils.toByteArray(inputStream22);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer27 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream22, iOExceptionConsumer27);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream22);
        java.io.BufferedInputStream bufferedInputStream31 = org.apache.commons.io.IOUtils.buffer(inputStream22, (int) (byte) 10);
        java.io.InputStream inputStream33 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream22, (int) (byte) 1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer34 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream22, iOExceptionConsumer34);
        java.io.OutputStream outputStream36 = null;
        java.io.InputStream inputStream38 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray39 = new byte[] {};
        int int40 = org.apache.commons.io.IOUtils.length(byteArray39);
        int int41 = org.apache.commons.io.IOUtils.read(inputStream38, byteArray39);
        byte[] byteArray42 = org.apache.commons.io.IOUtils.toByteArray(inputStream38);
        java.io.InputStream inputStream44 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray45 = new byte[] {};
        int int46 = org.apache.commons.io.IOUtils.length(byteArray45);
        int int47 = org.apache.commons.io.IOUtils.read(inputStream44, byteArray45);
        byte[] byteArray48 = org.apache.commons.io.IOUtils.toByteArray(inputStream44);
        int int49 = org.apache.commons.io.IOUtils.length(byteArray48);
        org.apache.commons.io.IOUtils.readFully(inputStream38, byteArray48);
        long long51 = org.apache.commons.io.IOUtils.copyLarge(inputStream22, outputStream36, byteArray48);
        java.io.BufferedInputStream bufferedInputStream53 = org.apache.commons.io.IOUtils.buffer(inputStream22, (int) (short) 100);
        java.io.InputStream inputStream55 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray56 = new byte[] {};
        int int57 = org.apache.commons.io.IOUtils.length(byteArray56);
        int int58 = org.apache.commons.io.IOUtils.read(inputStream55, byteArray56);
        byte[] byteArray59 = org.apache.commons.io.IOUtils.toByteArray(inputStream55);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer60 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream55, iOExceptionConsumer60);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream55);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer63 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream55, iOExceptionConsumer63);
        java.io.BufferedInputStream bufferedInputStream65 = org.apache.commons.io.IOUtils.buffer(inputStream55);
        java.io.OutputStream outputStream66 = null;
        java.io.InputStream inputStream67 = null;
        java.io.OutputStream outputStream68 = null;
        byte[] byteArray71 = new byte[] {};
        int int72 = org.apache.commons.io.IOUtils.length(byteArray71);
        java.io.OutputStream outputStream73 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray71, outputStream73);
        long long75 = org.apache.commons.io.IOUtils.copyLarge(inputStream67, outputStream68, 0L, (long) (byte) -1, byteArray71);
        long long76 = org.apache.commons.io.IOUtils.copyLarge(inputStream55, outputStream66, byteArray71);
        int int77 = org.apache.commons.io.IOUtils.read((java.io.InputStream) bufferedInputStream53, byteArray71);
        // The following exception was thrown during execution in test generation
        try {
            long long78 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream18, (long) (short) 10, 0L, byteArray71);
            org.junit.Assert.fail("Expected exception of type java.io.EOFException; message: Bytes to skip: 10 actual: 0");
        } catch (java.io.EOFException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(strList2);
        org.junit.Assert.assertNotNull(inputStream5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(inputStream22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream31);
        org.junit.Assert.assertNotNull(inputStream33);
        org.junit.Assert.assertNotNull(inputStream38);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertNotNull(inputStream44);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream53);
        org.junit.Assert.assertNotNull(inputStream55);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream65);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 0L + "'", long75 == 0L);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 0L + "'", long76 == 0L);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
    }

    @Test
    public void test1847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1847");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream5 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray("");
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray10);
        long long12 = org.apache.commons.io.IOUtils.copyLarge(inputStream4, outputStream5, 0L, 0L, byteArray10);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, byteArray10);
        java.io.BufferedInputStream bufferedInputStream15 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        org.apache.commons.io.IOUtils.closeQuietly(inputStream1);
        java.nio.charset.Charset charset17 = null;
        java.lang.String str18 = org.apache.commons.io.IOUtils.toString(inputStream1, charset17);
        java.nio.charset.Charset charset19 = null;
        java.util.List<java.lang.String> strList20 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset19);
        java.io.OutputStream outputStream21 = null;
        java.io.InputStream inputStream25 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray26 = new byte[] {};
        int int27 = org.apache.commons.io.IOUtils.length(byteArray26);
        int int28 = org.apache.commons.io.IOUtils.read(inputStream25, byteArray26);
        byte[] byteArray29 = org.apache.commons.io.IOUtils.toByteArray(inputStream25);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer30 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream25, iOExceptionConsumer30);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream25);
        java.io.BufferedInputStream bufferedInputStream34 = org.apache.commons.io.IOUtils.buffer(inputStream25, (int) (byte) 10);
        java.io.InputStream inputStream36 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream25, (int) (byte) 1);
        java.nio.charset.Charset charset37 = null;
        char[] charArray38 = org.apache.commons.io.IOUtils.toCharArray(inputStream25, charset37);
        java.nio.charset.Charset charset39 = null;
        java.lang.String str40 = org.apache.commons.io.IOUtils.toString(inputStream25, charset39);
        java.io.OutputStream outputStream41 = null;
        java.io.InputStream inputStream45 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray46 = new byte[] {};
        int int47 = org.apache.commons.io.IOUtils.length(byteArray46);
        int int48 = org.apache.commons.io.IOUtils.read(inputStream45, byteArray46);
        java.nio.charset.Charset charset49 = null;
        org.apache.commons.io.LineIterator lineIterator50 = org.apache.commons.io.IOUtils.lineIterator(inputStream45, charset49);
        java.io.InputStream inputStream52 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray53 = new byte[] {};
        int int54 = org.apache.commons.io.IOUtils.length(byteArray53);
        int int55 = org.apache.commons.io.IOUtils.read(inputStream52, byteArray53);
        byte[] byteArray56 = org.apache.commons.io.IOUtils.toByteArray(inputStream52);
        boolean boolean57 = org.apache.commons.io.IOUtils.contentEquals(inputStream45, inputStream52);
        java.io.InputStream inputStream59 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray60 = new byte[] {};
        int int61 = org.apache.commons.io.IOUtils.length(byteArray60);
        int int62 = org.apache.commons.io.IOUtils.read(inputStream59, byteArray60);
        byte[] byteArray63 = org.apache.commons.io.IOUtils.toByteArray(inputStream59);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer64 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream59, iOExceptionConsumer64);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream59);
        java.io.BufferedInputStream bufferedInputStream68 = org.apache.commons.io.IOUtils.buffer(inputStream59, (int) (byte) 10);
        java.io.InputStream inputStream70 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream59, (int) (byte) 1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer71 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream59, iOExceptionConsumer71);
        java.io.OutputStream outputStream73 = null;
        java.io.InputStream inputStream75 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray76 = new byte[] {};
        int int77 = org.apache.commons.io.IOUtils.length(byteArray76);
        int int78 = org.apache.commons.io.IOUtils.read(inputStream75, byteArray76);
        byte[] byteArray79 = org.apache.commons.io.IOUtils.toByteArray(inputStream75);
        java.io.InputStream inputStream81 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray82 = new byte[] {};
        int int83 = org.apache.commons.io.IOUtils.length(byteArray82);
        int int84 = org.apache.commons.io.IOUtils.read(inputStream81, byteArray82);
        byte[] byteArray85 = org.apache.commons.io.IOUtils.toByteArray(inputStream81);
        int int86 = org.apache.commons.io.IOUtils.length(byteArray85);
        org.apache.commons.io.IOUtils.readFully(inputStream75, byteArray85);
        long long88 = org.apache.commons.io.IOUtils.copyLarge(inputStream59, outputStream73, byteArray85);
        byte[] byteArray89 = org.apache.commons.io.IOUtils.toByteArray(inputStream59);
        org.apache.commons.io.IOUtils.readFully(inputStream45, byteArray89);
        byte[] byteArray91 = org.apache.commons.io.IOUtils.toByteArray(inputStream45);
        long long92 = org.apache.commons.io.IOUtils.copyLarge(inputStream25, outputStream41, 0L, (long) (short) 10, byteArray91);
        // The following exception was thrown during execution in test generation
        try {
            long long93 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream21, (long) 4, (long) 1, byteArray91);
            org.junit.Assert.fail("Expected exception of type java.io.EOFException; message: Bytes to skip: 4 actual: 0");
        } catch (java.io.EOFException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(strList20);
        org.junit.Assert.assertNotNull(inputStream25);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream34);
        org.junit.Assert.assertNotNull(inputStream36);
        org.junit.Assert.assertNotNull(charArray38);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray38), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray38), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray38), "[]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(inputStream45);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(lineIterator50);
        org.junit.Assert.assertNotNull(inputStream52);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(inputStream59);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream68);
        org.junit.Assert.assertNotNull(inputStream70);
        org.junit.Assert.assertNotNull(inputStream75);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[]");
        org.junit.Assert.assertNotNull(inputStream81);
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[]");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertTrue("'" + long88 + "' != '" + 0L + "'", long88 == 0L);
        org.junit.Assert.assertNotNull(byteArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray89), "[]");
        org.junit.Assert.assertNotNull(byteArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray91), "[]");
        org.junit.Assert.assertTrue("'" + long92 + "' != '" + 0L + "'", long92 == 0L);
    }

    @Test
    public void test1848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1848");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.io.InputStream inputStream7 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, (int) (byte) 0);
        java.io.InputStream inputStream9 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray10 = new byte[] {};
        int int11 = org.apache.commons.io.IOUtils.length(byteArray10);
        int int12 = org.apache.commons.io.IOUtils.read(inputStream9, byteArray10);
        byte[] byteArray13 = org.apache.commons.io.IOUtils.toByteArray(inputStream9);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer14 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream9, iOExceptionConsumer14);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream9);
        java.io.BufferedInputStream bufferedInputStream18 = org.apache.commons.io.IOUtils.buffer(inputStream9, (int) (byte) 10);
        java.io.InputStream inputStream20 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream9, (int) (byte) 1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer21 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream9, iOExceptionConsumer21);
        java.io.OutputStream outputStream23 = null;
        java.io.InputStream inputStream25 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray26 = new byte[] {};
        int int27 = org.apache.commons.io.IOUtils.length(byteArray26);
        int int28 = org.apache.commons.io.IOUtils.read(inputStream25, byteArray26);
        byte[] byteArray29 = org.apache.commons.io.IOUtils.toByteArray(inputStream25);
        java.io.InputStream inputStream31 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray32 = new byte[] {};
        int int33 = org.apache.commons.io.IOUtils.length(byteArray32);
        int int34 = org.apache.commons.io.IOUtils.read(inputStream31, byteArray32);
        byte[] byteArray35 = org.apache.commons.io.IOUtils.toByteArray(inputStream31);
        int int36 = org.apache.commons.io.IOUtils.length(byteArray35);
        org.apache.commons.io.IOUtils.readFully(inputStream25, byteArray35);
        long long38 = org.apache.commons.io.IOUtils.copyLarge(inputStream9, outputStream23, byteArray35);
        byte[] byteArray39 = org.apache.commons.io.IOUtils.toByteArray(inputStream9);
        org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray39);
        java.io.OutputStream outputStream41 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray39, outputStream41);
        java.io.Writer writer43 = null;
        java.nio.charset.Charset charset44 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(byteArray39, writer43, charset44);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Writer.write(String)\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(inputStream7);
        org.junit.Assert.assertNotNull(inputStream9);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream18);
        org.junit.Assert.assertNotNull(inputStream20);
        org.junit.Assert.assertNotNull(inputStream25);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(inputStream31);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
    }

    @Test
    public void test1849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1849");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        java.io.InputStream inputStream6 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray7 = new byte[] {};
        int int8 = org.apache.commons.io.IOUtils.length(byteArray7);
        int int9 = org.apache.commons.io.IOUtils.read(inputStream6, byteArray7);
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray(inputStream6);
        byte[] byteArray12 = org.apache.commons.io.IOUtils.toByteArray(inputStream6, (int) (short) 0);
        int int13 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray12);
        java.io.InputStream inputStream15 = org.apache.commons.io.IOUtils.toInputStream("\n");
        byte[] byteArray17 = org.apache.commons.io.IOUtils.toByteArray(inputStream15, (int) (byte) 0);
        int int18 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray17);
        java.io.Writer writer19 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(byteArray17, writer19, "");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(inputStream6);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(inputStream15);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test1850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1850");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray(inputStream1, (int) (short) 0);
        long long9 = org.apache.commons.io.IOUtils.skip(inputStream1, 100L);
        java.io.InputStream inputStream10 = null;
        java.io.InputStream inputStream11 = null;
        java.io.OutputStream outputStream12 = null;
        byte[] byteArray15 = new byte[] {};
        int int16 = org.apache.commons.io.IOUtils.length(byteArray15);
        java.io.OutputStream outputStream17 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray15, outputStream17);
        long long19 = org.apache.commons.io.IOUtils.copyLarge(inputStream11, outputStream12, 0L, (long) (byte) -1, byteArray15);
        java.io.OutputStream outputStream20 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray15, outputStream20);
        org.apache.commons.io.IOUtils.readFully(inputStream10, byteArray15);
        int int23 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray15);
        java.io.InputStream inputStream24 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1);
        byte[] byteArray26 = org.apache.commons.io.IOUtils.readFully(inputStream24, 0);
        java.io.OutputStream outputStream27 = null;
        long long29 = org.apache.commons.io.IOUtils.copy(inputStream24, outputStream27, (int) '#');
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(inputStream24);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
    }

    @Test
    public void test1851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1851");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        java.io.OutputStream outputStream10 = null;
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream10, (long) (short) 0, (-1L));
        char[] charArray14 = org.apache.commons.io.IOUtils.toCharArray(inputStream1);
        long long16 = org.apache.commons.io.IOUtils.skip(inputStream1, (long) (byte) 1);
        java.nio.charset.Charset charset17 = null;
        java.util.List<java.lang.String> strList18 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset17);
        java.io.OutputStream outputStream20 = null;
        java.nio.charset.Charset charset21 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList18, "", outputStream20, charset21);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[]");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(strList18);
    }

    @Test
    public void test1852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1852");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "\n");
        java.nio.charset.Charset charset2 = null;
        java.lang.String str3 = org.apache.commons.io.IOUtils.toString(inputStream1, charset2);
        java.io.OutputStream outputStream4 = null;
        java.io.InputStream inputStream8 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray9 = org.apache.commons.io.IOUtils.toByteArray(inputStream8);
        java.lang.String str10 = org.apache.commons.io.IOUtils.toString(byteArray9);
        java.lang.String str11 = org.apache.commons.io.IOUtils.toString(byteArray9);
        long long12 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream4, (long) 0, (long) 5, byteArray9);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer13 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) outputStream4, iOExceptionConsumer13);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\n" + "'", str3, "\n");
        org.junit.Assert.assertNotNull(inputStream8);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
    }

    @Test
    public void test1853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1853");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray(inputStream1, (int) (short) 0);
        java.io.BufferedInputStream bufferedInputStream8 = org.apache.commons.io.IOUtils.buffer(inputStream1);
        java.io.BufferedInputStream bufferedInputStream9 = org.apache.commons.io.IOUtils.buffer(inputStream1);
        java.nio.charset.Charset charset10 = null;
        java.util.List<java.lang.String> strList11 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset10);
        java.util.List<java.lang.String> strList12 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream8);
        org.junit.Assert.assertNotNull(bufferedInputStream9);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertNotNull(strList12);
    }

    @Test
    public void test1854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1854");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        java.nio.charset.Charset charset5 = null;
        org.apache.commons.io.LineIterator lineIterator6 = org.apache.commons.io.IOUtils.lineIterator(inputStream1, charset5);
        java.io.InputStream inputStream8 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray9 = new byte[] {};
        int int10 = org.apache.commons.io.IOUtils.length(byteArray9);
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray9);
        byte[] byteArray12 = org.apache.commons.io.IOUtils.toByteArray(inputStream8);
        boolean boolean13 = org.apache.commons.io.IOUtils.contentEquals(inputStream1, inputStream8);
        java.io.InputStream inputStream15 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray16 = new byte[] {};
        int int17 = org.apache.commons.io.IOUtils.length(byteArray16);
        int int18 = org.apache.commons.io.IOUtils.read(inputStream15, byteArray16);
        byte[] byteArray19 = org.apache.commons.io.IOUtils.toByteArray(inputStream15);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer20 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream15, iOExceptionConsumer20);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream15);
        java.io.BufferedInputStream bufferedInputStream24 = org.apache.commons.io.IOUtils.buffer(inputStream15, (int) (byte) 10);
        java.io.InputStream inputStream26 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream15, (int) (byte) 1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer27 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream15, iOExceptionConsumer27);
        java.io.OutputStream outputStream29 = null;
        java.io.InputStream inputStream31 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray32 = new byte[] {};
        int int33 = org.apache.commons.io.IOUtils.length(byteArray32);
        int int34 = org.apache.commons.io.IOUtils.read(inputStream31, byteArray32);
        byte[] byteArray35 = org.apache.commons.io.IOUtils.toByteArray(inputStream31);
        java.io.InputStream inputStream37 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray38 = new byte[] {};
        int int39 = org.apache.commons.io.IOUtils.length(byteArray38);
        int int40 = org.apache.commons.io.IOUtils.read(inputStream37, byteArray38);
        byte[] byteArray41 = org.apache.commons.io.IOUtils.toByteArray(inputStream37);
        int int42 = org.apache.commons.io.IOUtils.length(byteArray41);
        org.apache.commons.io.IOUtils.readFully(inputStream31, byteArray41);
        long long44 = org.apache.commons.io.IOUtils.copyLarge(inputStream15, outputStream29, byteArray41);
        byte[] byteArray45 = org.apache.commons.io.IOUtils.toByteArray(inputStream15);
        org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray45);
        java.io.OutputStream outputStream47 = null;
        java.io.InputStream inputStream51 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream52 = null;
        java.io.InputStream inputStream55 = null;
        byte[] byteArray57 = org.apache.commons.io.IOUtils.toByteArray("");
        int int58 = org.apache.commons.io.IOUtils.read(inputStream55, byteArray57);
        long long59 = org.apache.commons.io.IOUtils.copyLarge(inputStream51, outputStream52, 0L, 0L, byteArray57);
        java.nio.charset.Charset charset60 = null;
        java.util.List<java.lang.String> strList61 = org.apache.commons.io.IOUtils.readLines(inputStream51, charset60);
        java.nio.charset.Charset charset62 = null;
        char[] charArray63 = org.apache.commons.io.IOUtils.toCharArray(inputStream51, charset62);
        byte[] byteArray65 = org.apache.commons.io.IOUtils.toByteArray(inputStream51, (long) (byte) 0);
        long long66 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream47, 0L, 10L, byteArray65);
        java.io.Writer writer67 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(byteArray65, writer67, "\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ?");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(lineIterator6);
        org.junit.Assert.assertNotNull(inputStream8);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(inputStream15);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream24);
        org.junit.Assert.assertNotNull(inputStream26);
        org.junit.Assert.assertNotNull(inputStream31);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(inputStream37);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
        org.junit.Assert.assertNotNull(inputStream51);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertNotNull(strList61);
        org.junit.Assert.assertNotNull(charArray63);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray63), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray63), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray63), "[]");
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 0L + "'", long66 == 0L);
    }

    @Test
    public void test1855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1855");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream5 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray("");
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray10);
        long long12 = org.apache.commons.io.IOUtils.copyLarge(inputStream4, outputStream5, 0L, 0L, byteArray10);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, byteArray10);
        java.io.BufferedInputStream bufferedInputStream15 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        org.apache.commons.io.IOUtils.closeQuietly(inputStream1);
        java.io.InputStream inputStream18 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray19 = new byte[] {};
        int int20 = org.apache.commons.io.IOUtils.length(byteArray19);
        int int21 = org.apache.commons.io.IOUtils.read(inputStream18, byteArray19);
        byte[] byteArray22 = org.apache.commons.io.IOUtils.toByteArray(inputStream18);
        byte[] byteArray24 = org.apache.commons.io.IOUtils.toByteArray(inputStream18, (int) (short) 0);
        long long26 = org.apache.commons.io.IOUtils.skip(inputStream18, 100L);
        java.io.InputStream inputStream28 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray29 = new byte[] {};
        int int30 = org.apache.commons.io.IOUtils.length(byteArray29);
        int int31 = org.apache.commons.io.IOUtils.read(inputStream28, byteArray29);
        byte[] byteArray32 = org.apache.commons.io.IOUtils.toByteArray(inputStream28);
        byte[] byteArray34 = org.apache.commons.io.IOUtils.toByteArray(inputStream28, (int) (short) 0);
        org.apache.commons.io.IOUtils.readFully(inputStream18, byteArray34);
        org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray34);
        java.nio.charset.Charset charset37 = null;
        java.util.List<java.lang.String> strList38 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset37);
        java.io.OutputStream outputStream40 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList38, "", outputStream40, "hi!");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: hi!");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream15);
        org.junit.Assert.assertNotNull(inputStream18);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(inputStream28);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertNotNull(strList38);
    }

    @Test
    public void test1856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1856");
        java.io.Reader reader0 = null;
        java.io.Writer writer1 = null;
        java.io.InputStream inputStream3 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray4 = new byte[] {};
        int int5 = org.apache.commons.io.IOUtils.length(byteArray4);
        int int6 = org.apache.commons.io.IOUtils.read(inputStream3, byteArray4);
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray(inputStream3);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer8 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream3, iOExceptionConsumer8);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream3);
        java.io.BufferedInputStream bufferedInputStream12 = org.apache.commons.io.IOUtils.buffer(inputStream3, (int) (byte) 10);
        java.io.InputStream inputStream14 = org.apache.commons.io.IOUtils.toBufferedInputStream((java.io.InputStream) bufferedInputStream12, (int) '#');
        java.nio.charset.Charset charset15 = null;
        char[] charArray16 = org.apache.commons.io.IOUtils.toCharArray(inputStream14, charset15);
        java.io.Writer writer17 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray16, writer17);
        // The following exception was thrown during execution in test generation
        try {
            long long19 = org.apache.commons.io.IOUtils.copyLarge(reader0, writer1, charArray16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[])\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream3);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream12);
        org.junit.Assert.assertNotNull(inputStream14);
        org.junit.Assert.assertNotNull(charArray16);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray16), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray16), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray16), "[]");
    }

    @Test
    public void test1857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1857");
        java.io.Reader reader0 = null;
        java.io.Writer writer1 = null;
        java.io.Reader reader4 = null;
        java.io.Reader reader5 = null;
        char[] charArray6 = new char[] {};
        int int7 = org.apache.commons.io.IOUtils.length(charArray6);
        java.io.Writer writer8 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray6, writer8);
        int int10 = org.apache.commons.io.IOUtils.read(reader5, charArray6);
        int int11 = org.apache.commons.io.IOUtils.read(reader4, charArray6);
        // The following exception was thrown during execution in test generation
        try {
            long long12 = org.apache.commons.io.IOUtils.copyLarge(reader0, writer1, (long) (byte) 100, (long) (short) 100, charArray6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[], int, int)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test1858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1858");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.OutputStream outputStream9 = null;
        long long11 = org.apache.commons.io.IOUtils.copy(inputStream1, outputStream9, (int) '#');
        java.lang.String str12 = org.apache.commons.io.IOUtils.toString(inputStream1);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
    }

    @Test
    public void test1859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1859");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.util.List<java.lang.String> strList4 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer5 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer5);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        byte[] byteArray8 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.nio.charset.Charset charset9 = null;
        java.util.List<java.lang.String> strList10 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset9);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(strList10);
    }

    @Test
    public void test1860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1860");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        java.io.Writer writer10 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer10);
        java.util.List<java.lang.String> strList12 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        char[] charArray13 = org.apache.commons.io.IOUtils.toCharArray(inputStream1);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(strList12);
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[]");
    }

    @Test
    public void test1861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1861");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        java.nio.charset.Charset charset10 = null;
        java.util.List<java.lang.String> strList11 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset10);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.BufferedInputStream bufferedInputStream13 = org.apache.commons.io.IOUtils.buffer(inputStream1);
        java.nio.charset.Charset charset14 = null;
        char[] charArray15 = org.apache.commons.io.IOUtils.toCharArray(inputStream1, charset14);
        java.io.OutputStream outputStream16 = null;
        java.nio.charset.Charset charset17 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(charArray15, outputStream16, charset17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.OutputStream.write(byte[])\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertNotNull(bufferedInputStream13);
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[]");
    }

    @Test
    public void test1862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1862");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        java.nio.charset.Charset charset10 = null;
        java.util.List<java.lang.String> strList11 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset10);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream14 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, (int) (byte) 0);
        java.io.OutputStream outputStream15 = null;
        long long18 = org.apache.commons.io.IOUtils.copyLarge(inputStream14, outputStream15, 0L, (long) 5);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray20 = org.apache.commons.io.IOUtils.toByteArray(inputStream14, (long) 1);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Unexpected read size. current: 0, expected: 1");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertNotNull(inputStream14);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
    }

    @Test
    public void test1863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1863");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.BufferedInputStream bufferedInputStream10 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        byte[] byteArray11 = null;
        org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray11, (int) '4', 0);
        java.lang.String str15 = org.apache.commons.io.IOUtils.toString(inputStream1);
        java.util.List<java.lang.String> strList16 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.skipFully(inputStream1, (long) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.io.EOFException; message: Bytes to skip: 1 actual: 0");
        } catch (java.io.EOFException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream10);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(strList16);
    }

    @Test
    public void test1864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1864");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray5 = new byte[] {};
        int int6 = org.apache.commons.io.IOUtils.length(byteArray5);
        int int7 = org.apache.commons.io.IOUtils.read(inputStream4, byteArray5);
        byte[] byteArray8 = org.apache.commons.io.IOUtils.toByteArray(inputStream4);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer9 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream4, iOExceptionConsumer9);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream4);
        java.io.BufferedInputStream bufferedInputStream13 = org.apache.commons.io.IOUtils.buffer(inputStream4, (int) (byte) 10);
        boolean boolean14 = org.apache.commons.io.IOUtils.contentEquals(inputStream1, inputStream4);
        java.io.OutputStream outputStream15 = null;
        long long18 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream15, (long) (short) 0, (long) 2);
        java.io.OutputStream outputStream19 = null;
        int int20 = org.apache.commons.io.IOUtils.copy(inputStream1, outputStream19);
        java.io.InputStream inputStream22 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream23 = null;
        java.io.InputStream inputStream25 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream26 = null;
        java.io.InputStream inputStream29 = null;
        byte[] byteArray31 = org.apache.commons.io.IOUtils.toByteArray("");
        int int32 = org.apache.commons.io.IOUtils.read(inputStream29, byteArray31);
        long long33 = org.apache.commons.io.IOUtils.copyLarge(inputStream25, outputStream26, 0L, 0L, byteArray31);
        long long34 = org.apache.commons.io.IOUtils.copyLarge(inputStream22, outputStream23, byteArray31);
        java.io.InputStream inputStream36 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream37 = null;
        java.io.InputStream inputStream39 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream40 = null;
        java.io.InputStream inputStream43 = null;
        byte[] byteArray45 = org.apache.commons.io.IOUtils.toByteArray("");
        int int46 = org.apache.commons.io.IOUtils.read(inputStream43, byteArray45);
        long long47 = org.apache.commons.io.IOUtils.copyLarge(inputStream39, outputStream40, 0L, 0L, byteArray45);
        long long48 = org.apache.commons.io.IOUtils.copyLarge(inputStream36, outputStream37, byteArray45);
        java.io.BufferedInputStream bufferedInputStream50 = org.apache.commons.io.IOUtils.buffer(inputStream36, (int) (byte) 10);
        java.nio.charset.Charset charset51 = null;
        java.util.List<java.lang.String> strList52 = org.apache.commons.io.IOUtils.readLines(inputStream36, charset51);
        java.io.OutputStream outputStream53 = null;
        int int54 = org.apache.commons.io.IOUtils.copy(inputStream36, outputStream53);
        java.io.InputStream inputStream56 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream57 = null;
        java.io.InputStream inputStream60 = null;
        byte[] byteArray62 = org.apache.commons.io.IOUtils.toByteArray("");
        int int63 = org.apache.commons.io.IOUtils.read(inputStream60, byteArray62);
        long long64 = org.apache.commons.io.IOUtils.copyLarge(inputStream56, outputStream57, 0L, 0L, byteArray62);
        java.io.Writer writer65 = null;
        org.apache.commons.io.IOUtils.copy(inputStream56, writer65);
        java.util.List<java.lang.String> strList67 = org.apache.commons.io.IOUtils.readLines(inputStream56);
        java.io.InputStream inputStream69 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream56, 4);
        java.io.InputStream inputStream71 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream71);
        java.io.InputStream inputStream73 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream71);
        java.lang.String str74 = org.apache.commons.io.IOUtils.toString(inputStream71);
        java.lang.Object[] objArray75 = new java.lang.Object[] { int20, long34, inputStream36, inputStream69, inputStream71 };
        int int76 = org.apache.commons.io.IOUtils.length(objArray75);
        int int77 = org.apache.commons.io.IOUtils.length(objArray75);
        int int78 = org.apache.commons.io.IOUtils.length(objArray75);
        int int79 = org.apache.commons.io.IOUtils.length(objArray75);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(inputStream22);
        org.junit.Assert.assertNotNull(inputStream25);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(inputStream36);
        org.junit.Assert.assertNotNull(inputStream39);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream50);
        org.junit.Assert.assertNotNull(strList52);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(inputStream56);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L);
        org.junit.Assert.assertNotNull(strList67);
        org.junit.Assert.assertNotNull(inputStream69);
        org.junit.Assert.assertNotNull(inputStream71);
        org.junit.Assert.assertNotNull(inputStream73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertNotNull(objArray75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 5 + "'", int76 == 5);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 5 + "'", int77 == 5);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 5 + "'", int78 == 5);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 5 + "'", int79 == 5);
    }

    @Test
    public void test1865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1865");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray5 = new byte[] {};
        int int6 = org.apache.commons.io.IOUtils.length(byteArray5);
        int int7 = org.apache.commons.io.IOUtils.read(inputStream4, byteArray5);
        byte[] byteArray8 = org.apache.commons.io.IOUtils.toByteArray(inputStream4);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer9 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream4, iOExceptionConsumer9);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream4);
        java.io.BufferedInputStream bufferedInputStream13 = org.apache.commons.io.IOUtils.buffer(inputStream4, (int) (byte) 10);
        boolean boolean14 = org.apache.commons.io.IOUtils.contentEquals(inputStream1, inputStream4);
        java.io.OutputStream outputStream15 = null;
        long long18 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream15, (long) (short) 0, (long) 2);
        java.io.InputStream inputStream20 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, 0);
        java.nio.charset.Charset charset21 = null;
        char[] charArray22 = org.apache.commons.io.IOUtils.toCharArray(inputStream20, charset21);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(inputStream20);
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray22), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray22), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray22), "[]");
    }

    @Test
    public void test1866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1866");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.util.List<java.lang.String> strList4 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.OutputStream outputStream6 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList4, "\n", outputStream6);
        java.io.OutputStream outputStream9 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList4, "", outputStream9);
        java.io.OutputStream outputStream12 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList4, "hi!", outputStream12, "hi!");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: hi!");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(strList4);
    }

    @Test
    public void test1867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1867");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        java.nio.charset.Charset charset5 = null;
        org.apache.commons.io.LineIterator lineIterator6 = org.apache.commons.io.IOUtils.lineIterator(inputStream1, charset5);
        java.io.InputStream inputStream8 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray9 = new byte[] {};
        int int10 = org.apache.commons.io.IOUtils.length(byteArray9);
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray9);
        byte[] byteArray12 = org.apache.commons.io.IOUtils.toByteArray(inputStream8);
        boolean boolean13 = org.apache.commons.io.IOUtils.contentEquals(inputStream1, inputStream8);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.BufferedInputStream bufferedInputStream16 = org.apache.commons.io.IOUtils.buffer(inputStream1, 3);
        java.util.List<java.lang.String> strList17 = org.apache.commons.io.IOUtils.readLines((java.io.InputStream) bufferedInputStream16);
        java.io.OutputStream outputStream19 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList17, "\r\n", outputStream19, "hi!");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: hi!");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(lineIterator6);
        org.junit.Assert.assertNotNull(inputStream8);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(bufferedInputStream16);
        org.junit.Assert.assertNotNull(strList17);
    }

    @Test
    public void test1868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1868");
        java.nio.channels.ReadableByteChannel readableByteChannel0 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long2 = org.apache.commons.io.IOUtils.skip(readableByteChannel0, (long) 2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.nio.channels.ReadableByteChannel.read(java.nio.ByteBuffer)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1869");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream5 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray("");
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray10);
        long long12 = org.apache.commons.io.IOUtils.copyLarge(inputStream4, outputStream5, 0L, 0L, byteArray10);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, byteArray10);
        java.io.BufferedInputStream bufferedInputStream15 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        org.apache.commons.io.IOUtils.closeQuietly(inputStream1);
        java.nio.charset.Charset charset17 = null;
        java.lang.String str18 = org.apache.commons.io.IOUtils.toString(inputStream1, charset17);
        java.nio.charset.Charset charset19 = null;
        java.util.List<java.lang.String> strList20 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset19);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.OutputStream outputStream22 = null;
        java.io.InputStream inputStream26 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray27 = org.apache.commons.io.IOUtils.toByteArray(inputStream26);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream26);
        java.util.List<java.lang.String> strList29 = org.apache.commons.io.IOUtils.readLines(inputStream26);
        java.io.OutputStream outputStream30 = null;
        long long31 = org.apache.commons.io.IOUtils.copyLarge(inputStream26, outputStream30);
        java.io.Writer writer32 = null;
        org.apache.commons.io.IOUtils.copy(inputStream26, writer32);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream26);
        java.io.InputStream inputStream36 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray37 = new byte[] {};
        int int38 = org.apache.commons.io.IOUtils.length(byteArray37);
        int int39 = org.apache.commons.io.IOUtils.read(inputStream36, byteArray37);
        byte[] byteArray40 = org.apache.commons.io.IOUtils.toByteArray(inputStream36);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer41 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream36, iOExceptionConsumer41);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream36);
        java.io.BufferedInputStream bufferedInputStream45 = org.apache.commons.io.IOUtils.buffer(inputStream36, (int) (byte) 10);
        java.io.InputStream inputStream47 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream36, (int) (byte) 1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer48 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream36, iOExceptionConsumer48);
        java.io.OutputStream outputStream50 = null;
        java.io.InputStream inputStream52 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray53 = new byte[] {};
        int int54 = org.apache.commons.io.IOUtils.length(byteArray53);
        int int55 = org.apache.commons.io.IOUtils.read(inputStream52, byteArray53);
        byte[] byteArray56 = org.apache.commons.io.IOUtils.toByteArray(inputStream52);
        java.io.InputStream inputStream58 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray59 = new byte[] {};
        int int60 = org.apache.commons.io.IOUtils.length(byteArray59);
        int int61 = org.apache.commons.io.IOUtils.read(inputStream58, byteArray59);
        byte[] byteArray62 = org.apache.commons.io.IOUtils.toByteArray(inputStream58);
        int int63 = org.apache.commons.io.IOUtils.length(byteArray62);
        org.apache.commons.io.IOUtils.readFully(inputStream52, byteArray62);
        long long65 = org.apache.commons.io.IOUtils.copyLarge(inputStream36, outputStream50, byteArray62);
        boolean boolean66 = org.apache.commons.io.IOUtils.contentEquals(inputStream26, inputStream36);
        java.io.BufferedInputStream bufferedInputStream67 = org.apache.commons.io.IOUtils.buffer(inputStream26);
        java.io.BufferedInputStream bufferedInputStream69 = org.apache.commons.io.IOUtils.buffer(inputStream26, (int) (short) 100);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) bufferedInputStream69);
        byte[] byteArray72 = org.apache.commons.io.IOUtils.toByteArray((java.io.InputStream) bufferedInputStream69, 0L);
        // The following exception was thrown during execution in test generation
        try {
            long long73 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream22, (long) (byte) 1, (long) (short) 1, byteArray72);
            org.junit.Assert.fail("Expected exception of type java.io.EOFException; message: Bytes to skip: 1 actual: 0");
        } catch (java.io.EOFException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(strList20);
        org.junit.Assert.assertNotNull(inputStream26);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertNotNull(strList29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertNotNull(inputStream36);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream45);
        org.junit.Assert.assertNotNull(inputStream47);
        org.junit.Assert.assertNotNull(inputStream52);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[]");
        org.junit.Assert.assertNotNull(inputStream58);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 0L + "'", long65 == 0L);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(bufferedInputStream67);
        org.junit.Assert.assertNotNull(bufferedInputStream69);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[]");
    }

    @Test
    public void test1870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1870");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream5 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray("");
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray10);
        long long12 = org.apache.commons.io.IOUtils.copyLarge(inputStream4, outputStream5, 0L, 0L, byteArray10);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, byteArray10);
        java.io.BufferedInputStream bufferedInputStream15 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.nio.charset.Charset charset16 = null;
        java.util.List<java.lang.String> strList17 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset16);
        java.io.OutputStream outputStream18 = null;
        long long21 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream18, 0L, (long) 0);
        java.io.BufferedInputStream bufferedInputStream22 = org.apache.commons.io.IOUtils.buffer(inputStream1);
        org.apache.commons.io.function.IOConsumer<java.io.IOException> iOExceptionIOConsumer23 = null;
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1, iOExceptionIOConsumer23);
        java.nio.charset.Charset charset25 = null;
        java.lang.String str26 = org.apache.commons.io.IOUtils.toString(inputStream1, charset25);
        java.io.OutputStream outputStream27 = null;
        long long28 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream27);
        java.io.InputStream inputStream30 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray31 = new byte[] {};
        int int32 = org.apache.commons.io.IOUtils.length(byteArray31);
        int int33 = org.apache.commons.io.IOUtils.read(inputStream30, byteArray31);
        byte[] byteArray34 = org.apache.commons.io.IOUtils.toByteArray(inputStream30);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer35 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream30, iOExceptionConsumer35);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream30);
        java.io.BufferedInputStream bufferedInputStream39 = org.apache.commons.io.IOUtils.buffer(inputStream30, (int) (byte) 10);
        java.io.InputStream inputStream41 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream30, (int) (byte) 1);
        java.io.OutputStream outputStream42 = null;
        int int43 = org.apache.commons.io.IOUtils.copy(inputStream41, outputStream42);
        java.io.OutputStream outputStream44 = null;
        int int45 = org.apache.commons.io.IOUtils.copy(inputStream41, outputStream44);
        boolean boolean46 = org.apache.commons.io.IOUtils.contentEquals(inputStream1, inputStream41);
        java.nio.charset.Charset charset47 = null;
        char[] charArray48 = org.apache.commons.io.IOUtils.toCharArray(inputStream1, charset47);
        java.io.OutputStream outputStream49 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(charArray48, outputStream49, "\r\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ??");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream15);
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream22);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertNotNull(inputStream30);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream39);
        org.junit.Assert.assertNotNull(inputStream41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(charArray48);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray48), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray48), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray48), "[]");
    }

    @Test
    public void test1871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1871");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        java.nio.charset.Charset charset10 = null;
        java.util.List<java.lang.String> strList11 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset10);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.lang.String str13 = org.apache.commons.io.IOUtils.toString(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer14 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer14);
        java.io.OutputStream outputStream16 = null;
        java.io.InputStream inputStream20 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray21 = new byte[] {};
        int int22 = org.apache.commons.io.IOUtils.length(byteArray21);
        int int23 = org.apache.commons.io.IOUtils.read(inputStream20, byteArray21);
        java.io.InputStream inputStream25 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray26 = new byte[] {};
        int int27 = org.apache.commons.io.IOUtils.length(byteArray26);
        int int28 = org.apache.commons.io.IOUtils.read(inputStream25, byteArray26);
        byte[] byteArray29 = org.apache.commons.io.IOUtils.toByteArray(inputStream25);
        byte[] byteArray31 = org.apache.commons.io.IOUtils.toByteArray(inputStream25, (int) (short) 0);
        int int32 = org.apache.commons.io.IOUtils.read(inputStream20, byteArray31);
        java.io.OutputStream outputStream33 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray31, outputStream33);
        // The following exception was thrown during execution in test generation
        try {
            long long35 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream16, (long) 3, (long) '/', byteArray31);
            org.junit.Assert.fail("Expected exception of type java.io.EOFException; message: Bytes to skip: 3 actual: 0");
        } catch (java.io.EOFException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(inputStream20);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(inputStream25);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
    }

    @Test
    public void test1872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1872");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray(inputStream1, (int) (short) 0);
        long long9 = org.apache.commons.io.IOUtils.skip(inputStream1, 100L);
        java.io.InputStream inputStream11 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray12 = org.apache.commons.io.IOUtils.toByteArray(inputStream11);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream11);
        java.util.List<java.lang.String> strList14 = org.apache.commons.io.IOUtils.readLines(inputStream11);
        java.io.OutputStream outputStream15 = null;
        long long16 = org.apache.commons.io.IOUtils.copyLarge(inputStream11, outputStream15);
        java.io.OutputStream outputStream17 = null;
        java.io.InputStream inputStream21 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray22 = new byte[] {};
        int int23 = org.apache.commons.io.IOUtils.length(byteArray22);
        int int24 = org.apache.commons.io.IOUtils.read(inputStream21, byteArray22);
        long long25 = org.apache.commons.io.IOUtils.copyLarge(inputStream11, outputStream17, (-1L), 1L, byteArray22);
        int int26 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray22);
        java.io.InputStream inputStream28 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray29 = new byte[] {};
        int int30 = org.apache.commons.io.IOUtils.length(byteArray29);
        int int31 = org.apache.commons.io.IOUtils.read(inputStream28, byteArray29);
        byte[] byteArray32 = org.apache.commons.io.IOUtils.toByteArray(inputStream28);
        byte[] byteArray34 = org.apache.commons.io.IOUtils.toByteArray(inputStream28, (int) (short) 0);
        java.io.BufferedInputStream bufferedInputStream35 = org.apache.commons.io.IOUtils.buffer(inputStream28);
        byte[] byteArray36 = org.apache.commons.io.IOUtils.toByteArray((java.io.InputStream) bufferedInputStream35);
        org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray36);
        char[] charArray38 = org.apache.commons.io.IOUtils.toCharArray(inputStream1);
        java.io.InputStream inputStream40 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream41 = null;
        java.io.InputStream inputStream43 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream44 = null;
        java.io.InputStream inputStream47 = null;
        byte[] byteArray49 = org.apache.commons.io.IOUtils.toByteArray("");
        int int50 = org.apache.commons.io.IOUtils.read(inputStream47, byteArray49);
        long long51 = org.apache.commons.io.IOUtils.copyLarge(inputStream43, outputStream44, 0L, 0L, byteArray49);
        long long52 = org.apache.commons.io.IOUtils.copyLarge(inputStream40, outputStream41, byteArray49);
        java.io.BufferedInputStream bufferedInputStream54 = org.apache.commons.io.IOUtils.buffer(inputStream40, (int) (byte) 10);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer55 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream40, iOExceptionConsumer55);
        byte[] byteArray62 = new byte[] { (byte) 10, (byte) 1, (byte) 0, (byte) 100, (byte) 0 };
        int int63 = org.apache.commons.io.IOUtils.read(inputStream40, byteArray62);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray62);
            org.junit.Assert.fail("Expected exception of type java.io.EOFException; message: Length to read: 5 actual: 0");
        } catch (java.io.EOFException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(inputStream11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertNotNull(strList14);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(inputStream21);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(inputStream28);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream35);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertNotNull(charArray38);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray38), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray38), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray38), "[]");
        org.junit.Assert.assertNotNull(inputStream40);
        org.junit.Assert.assertNotNull(inputStream43);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream54);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[10, 1, 0, 100, 0]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
    }

    @Test
    public void test1873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1873");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        java.io.Writer writer10 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer10);
        java.util.List<java.lang.String> strList12 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.InputStream inputStream13 = null;
        java.io.OutputStream outputStream14 = null;
        byte[] byteArray17 = new byte[] {};
        int int18 = org.apache.commons.io.IOUtils.length(byteArray17);
        java.io.OutputStream outputStream19 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray17, outputStream19);
        long long21 = org.apache.commons.io.IOUtils.copyLarge(inputStream13, outputStream14, 0L, (long) (byte) -1, byteArray17);
        java.io.OutputStream outputStream22 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray17, outputStream22);
        int int24 = org.apache.commons.io.IOUtils.length(byteArray17);
        java.io.OutputStream outputStream25 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray17, outputStream25);
        int int27 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray17);
        java.lang.String str28 = org.apache.commons.io.IOUtils.toString(byteArray17);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str30 = org.apache.commons.io.IOUtils.toString(byteArray17, "");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(strList12);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
    }

    @Test
    public void test1874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1874");
        java.io.Reader reader0 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long2 = org.apache.commons.io.IOUtils.skip(reader0, (long) 3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[], int, int)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1875");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream5 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray("");
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray10);
        long long12 = org.apache.commons.io.IOUtils.copyLarge(inputStream4, outputStream5, 0L, 0L, byteArray10);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, byteArray10);
        java.io.BufferedInputStream bufferedInputStream15 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.nio.charset.Charset charset16 = null;
        java.util.List<java.lang.String> strList17 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset16);
        java.io.OutputStream outputStream18 = null;
        long long21 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream18, 0L, (long) 0);
        java.io.BufferedInputStream bufferedInputStream22 = org.apache.commons.io.IOUtils.buffer(inputStream1);
        java.io.BufferedInputStream bufferedInputStream23 = org.apache.commons.io.IOUtils.buffer(inputStream1);
        java.io.BufferedInputStream bufferedInputStream25 = org.apache.commons.io.IOUtils.buffer((java.io.InputStream) bufferedInputStream23, 4);
        java.nio.charset.Charset charset26 = null;
        org.apache.commons.io.LineIterator lineIterator27 = org.apache.commons.io.IOUtils.lineIterator((java.io.InputStream) bufferedInputStream23, charset26);
        java.nio.charset.Charset charset29 = null;
        java.io.InputStream inputStream30 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "", charset29);
        java.util.List<java.lang.String> strList31 = org.apache.commons.io.IOUtils.readLines(inputStream30);
        java.io.InputStream inputStream33 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray34 = new byte[] {};
        int int35 = org.apache.commons.io.IOUtils.length(byteArray34);
        int int36 = org.apache.commons.io.IOUtils.read(inputStream33, byteArray34);
        byte[] byteArray37 = org.apache.commons.io.IOUtils.toByteArray(inputStream33);
        int int38 = org.apache.commons.io.IOUtils.length(byteArray37);
        org.apache.commons.io.IOUtils.readFully(inputStream30, byteArray37);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.readFully((java.io.InputStream) bufferedInputStream23, byteArray37, (int) '#', 4);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream15);
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream22);
        org.junit.Assert.assertNotNull(bufferedInputStream23);
        org.junit.Assert.assertNotNull(bufferedInputStream25);
        org.junit.Assert.assertNotNull(lineIterator27);
        org.junit.Assert.assertNotNull(inputStream30);
        org.junit.Assert.assertNotNull(strList31);
        org.junit.Assert.assertNotNull(inputStream33);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
    }

    @Test
    public void test1876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1876");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "\n");
        java.util.List<java.lang.String> strList2 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.Writer writer4 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList2, "", writer4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Writer.write(String)\" because \"writer\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(strList2);
    }

    @Test
    public void test1877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1877");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        java.io.Writer writer10 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer10);
        java.util.List<java.lang.String> strList12 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.InputStream inputStream14 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, 4);
        java.io.InputStream inputStream16 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream14, 100);
        // The following exception was thrown during execution in test generation
        try {
            char[] charArray18 = org.apache.commons.io.IOUtils.toCharArray(inputStream14, "");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(strList12);
        org.junit.Assert.assertNotNull(inputStream14);
        org.junit.Assert.assertNotNull(inputStream16);
    }

    @Test
    public void test1878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1878");
        java.io.Reader reader0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.BufferedReader bufferedReader2 = org.apache.commons.io.IOUtils.buffer(reader0, 4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1879");
        java.io.Reader reader0 = null;
        java.io.Writer writer1 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long4 = org.apache.commons.io.IOUtils.copyLarge(reader0, writer1, 0L, (long) 6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[], int, int)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1880");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.BufferedInputStream bufferedInputStream10 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.io.InputStream inputStream12 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, (int) (byte) 1);
        java.io.OutputStream outputStream13 = null;
        int int14 = org.apache.commons.io.IOUtils.copy(inputStream12, outputStream13);
        java.io.BufferedInputStream bufferedInputStream16 = org.apache.commons.io.IOUtils.buffer(inputStream12, (int) (byte) 10);
        byte[] byteArray18 = org.apache.commons.io.IOUtils.toByteArray(inputStream12, 0);
        java.io.BufferedInputStream bufferedInputStream19 = org.apache.commons.io.IOUtils.buffer(inputStream12);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray21 = org.apache.commons.io.IOUtils.toByteArray(inputStream12, (int) '\\');
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Unexpected read size. current: 0, expected: 92");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream10);
        org.junit.Assert.assertNotNull(inputStream12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(bufferedInputStream16);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream19);
    }

    @Test
    public void test1881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1881");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        java.io.OutputStream outputStream10 = null;
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream10, (long) (short) 0, (-1L));
        java.lang.String str14 = org.apache.commons.io.IOUtils.toString(inputStream1);
        java.io.BufferedInputStream bufferedInputStream16 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 100);
        java.nio.charset.Charset charset17 = null;
        org.apache.commons.io.LineIterator lineIterator18 = org.apache.commons.io.IOUtils.lineIterator((java.io.InputStream) bufferedInputStream16, charset17);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) lineIterator18);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(bufferedInputStream16);
        org.junit.Assert.assertNotNull(lineIterator18);
    }

    @Test
    public void test1882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1882");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray(inputStream1, (int) (short) 0);
        java.io.Writer writer8 = null;
        java.nio.charset.Charset charset9 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer8, charset9);
        java.io.InputStream inputStream12 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream13 = null;
        java.io.InputStream inputStream15 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream16 = null;
        java.io.InputStream inputStream19 = null;
        byte[] byteArray21 = org.apache.commons.io.IOUtils.toByteArray("");
        int int22 = org.apache.commons.io.IOUtils.read(inputStream19, byteArray21);
        long long23 = org.apache.commons.io.IOUtils.copyLarge(inputStream15, outputStream16, 0L, 0L, byteArray21);
        long long24 = org.apache.commons.io.IOUtils.copyLarge(inputStream12, outputStream13, byteArray21);
        java.lang.String str25 = org.apache.commons.io.IOUtils.toString(byteArray21);
        int int26 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray21);
        java.nio.charset.Charset charset27 = null;
        java.util.List<java.lang.String> strList28 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset27);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(inputStream12);
        org.junit.Assert.assertNotNull(inputStream15);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(strList28);
    }

    @Test
    public void test1883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1883");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream5 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray("");
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray10);
        long long12 = org.apache.commons.io.IOUtils.copyLarge(inputStream4, outputStream5, 0L, 0L, byteArray10);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, byteArray10);
        java.io.BufferedInputStream bufferedInputStream15 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.nio.charset.Charset charset16 = null;
        java.util.List<java.lang.String> strList17 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset16);
        java.io.OutputStream outputStream18 = null;
        long long21 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream18, 0L, (long) 0);
        java.io.OutputStream outputStream22 = null;
        long long25 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream22, (long) (short) -1, (long) 10);
        byte[] byteArray26 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str28 = org.apache.commons.io.IOUtils.toString(inputStream1, "");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream15);
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
    }

    @Test
    public void test1884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1884");
        java.io.Closeable closeable0 = null;
        java.io.Closeable[] closeableArray1 = new java.io.Closeable[] { closeable0 };
        org.apache.commons.io.IOUtils.closeQuietly(closeableArray1);
        org.apache.commons.io.IOUtils.closeQuietly(closeableArray1);
        org.apache.commons.io.IOUtils.closeQuietly(closeableArray1);
        org.apache.commons.io.IOUtils.closeQuietly(closeableArray1);
        int int6 = org.apache.commons.io.IOUtils.length((java.lang.Object[]) closeableArray1);
        org.apache.commons.io.IOUtils.closeQuietly(closeableArray1);
        org.junit.Assert.assertNotNull(closeableArray1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
    }

    @Test
    public void test1885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1885");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.BufferedInputStream bufferedInputStream10 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.io.InputStream inputStream12 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, (int) (byte) 1);
        java.nio.charset.Charset charset13 = null;
        char[] charArray14 = org.apache.commons.io.IOUtils.toCharArray(inputStream1, charset13);
        java.nio.charset.Charset charset15 = null;
        java.lang.String str16 = org.apache.commons.io.IOUtils.toString(inputStream1, charset15);
        java.io.OutputStream outputStream17 = null;
        java.io.InputStream inputStream21 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray22 = new byte[] {};
        int int23 = org.apache.commons.io.IOUtils.length(byteArray22);
        int int24 = org.apache.commons.io.IOUtils.read(inputStream21, byteArray22);
        java.nio.charset.Charset charset25 = null;
        org.apache.commons.io.LineIterator lineIterator26 = org.apache.commons.io.IOUtils.lineIterator(inputStream21, charset25);
        java.io.InputStream inputStream28 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray29 = new byte[] {};
        int int30 = org.apache.commons.io.IOUtils.length(byteArray29);
        int int31 = org.apache.commons.io.IOUtils.read(inputStream28, byteArray29);
        byte[] byteArray32 = org.apache.commons.io.IOUtils.toByteArray(inputStream28);
        boolean boolean33 = org.apache.commons.io.IOUtils.contentEquals(inputStream21, inputStream28);
        java.io.InputStream inputStream35 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray36 = new byte[] {};
        int int37 = org.apache.commons.io.IOUtils.length(byteArray36);
        int int38 = org.apache.commons.io.IOUtils.read(inputStream35, byteArray36);
        byte[] byteArray39 = org.apache.commons.io.IOUtils.toByteArray(inputStream35);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer40 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream35, iOExceptionConsumer40);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream35);
        java.io.BufferedInputStream bufferedInputStream44 = org.apache.commons.io.IOUtils.buffer(inputStream35, (int) (byte) 10);
        java.io.InputStream inputStream46 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream35, (int) (byte) 1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer47 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream35, iOExceptionConsumer47);
        java.io.OutputStream outputStream49 = null;
        java.io.InputStream inputStream51 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray52 = new byte[] {};
        int int53 = org.apache.commons.io.IOUtils.length(byteArray52);
        int int54 = org.apache.commons.io.IOUtils.read(inputStream51, byteArray52);
        byte[] byteArray55 = org.apache.commons.io.IOUtils.toByteArray(inputStream51);
        java.io.InputStream inputStream57 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray58 = new byte[] {};
        int int59 = org.apache.commons.io.IOUtils.length(byteArray58);
        int int60 = org.apache.commons.io.IOUtils.read(inputStream57, byteArray58);
        byte[] byteArray61 = org.apache.commons.io.IOUtils.toByteArray(inputStream57);
        int int62 = org.apache.commons.io.IOUtils.length(byteArray61);
        org.apache.commons.io.IOUtils.readFully(inputStream51, byteArray61);
        long long64 = org.apache.commons.io.IOUtils.copyLarge(inputStream35, outputStream49, byteArray61);
        byte[] byteArray65 = org.apache.commons.io.IOUtils.toByteArray(inputStream35);
        org.apache.commons.io.IOUtils.readFully(inputStream21, byteArray65);
        byte[] byteArray67 = org.apache.commons.io.IOUtils.toByteArray(inputStream21);
        long long68 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream17, 0L, (long) (short) 10, byteArray67);
        java.io.OutputStream outputStream69 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(byteArray67, outputStream69);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.OutputStream.write(byte[])\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream10);
        org.junit.Assert.assertNotNull(inputStream12);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(inputStream21);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(lineIterator26);
        org.junit.Assert.assertNotNull(inputStream28);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(inputStream35);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream44);
        org.junit.Assert.assertNotNull(inputStream46);
        org.junit.Assert.assertNotNull(inputStream51);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[]");
        org.junit.Assert.assertNotNull(inputStream57);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[]");
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[]");
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 0L + "'", long68 == 0L);
    }

    @Test
    public void test1886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1886");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.io.InputStream inputStream7 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray8 = new byte[] {};
        int int9 = org.apache.commons.io.IOUtils.length(byteArray8);
        int int10 = org.apache.commons.io.IOUtils.read(inputStream7, byteArray8);
        byte[] byteArray11 = org.apache.commons.io.IOUtils.toByteArray(inputStream7);
        int int12 = org.apache.commons.io.IOUtils.length(byteArray11);
        org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray11);
        java.io.InputStream inputStream14 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1);
        java.io.OutputStream outputStream15 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long17 = org.apache.commons.io.IOUtils.copy(inputStream1, outputStream15, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: -1");
        } catch (java.lang.NegativeArraySizeException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(inputStream7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(inputStream14);
    }

    @Test
    public void test1887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1887");
        java.io.InputStream inputStream0 = null;
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray2 = org.apache.commons.io.IOUtils.readFully(inputStream0, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.InputStream.read(byte[], int, int)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1888");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.BufferedInputStream bufferedInputStream10 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.io.InputStream inputStream12 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, (int) (byte) 1);
        java.io.OutputStream outputStream13 = null;
        int int14 = org.apache.commons.io.IOUtils.copy(inputStream12, outputStream13);
        java.io.BufferedInputStream bufferedInputStream16 = org.apache.commons.io.IOUtils.buffer(inputStream12, (int) (byte) 10);
        byte[] byteArray18 = org.apache.commons.io.IOUtils.toByteArray(inputStream12, 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.String> strList20 = org.apache.commons.io.IOUtils.readLines(inputStream12, "");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream10);
        org.junit.Assert.assertNotNull(inputStream12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(bufferedInputStream16);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
    }

    @Test
    public void test1889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1889");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.io.InputStream inputStream7 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, (int) (byte) 0);
        java.nio.charset.Charset charset8 = null;
        org.apache.commons.io.LineIterator lineIterator9 = org.apache.commons.io.IOUtils.lineIterator(inputStream7, charset8);
        org.apache.commons.io.IOUtils.skipFully(inputStream7, 0L);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray13 = org.apache.commons.io.IOUtils.readFully(inputStream7, (int) '/');
            org.junit.Assert.fail("Expected exception of type java.io.EOFException; message: Length to read: 47 actual: 0");
        } catch (java.io.EOFException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(inputStream7);
        org.junit.Assert.assertNotNull(lineIterator9);
    }

    @Test
    public void test1890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1890");
        java.lang.CharSequence charSequence0 = null;
        java.io.OutputStream outputStream1 = null;
        java.nio.charset.Charset charset2 = null;
        org.apache.commons.io.IOUtils.write(charSequence0, outputStream1, charset2);
    }

    @Test
    public void test1891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1891");
        java.nio.charset.Charset charset1 = null;
        java.io.InputStream inputStream2 = org.apache.commons.io.IOUtils.toInputStream("\n", charset1);
        char[] charArray3 = org.apache.commons.io.IOUtils.toCharArray(inputStream2);
        java.io.OutputStream outputStream4 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(charArray3, outputStream4, "");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream2);
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray3), "\n");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray3), "\n");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray3), "[\n]");
    }

    @Test
    public void test1892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1892");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        java.io.OutputStream outputStream10 = null;
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream10, (long) (short) 0, (-1L));
        char[] charArray14 = org.apache.commons.io.IOUtils.toCharArray(inputStream1);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.Writer writer16 = null;
        java.nio.charset.Charset charset17 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer16, charset17);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[]");
    }

    @Test
    public void test1893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1893");
        java.io.Reader reader0 = null;
        java.io.Reader reader1 = null;
        char[] charArray2 = new char[] {};
        int int3 = org.apache.commons.io.IOUtils.length(charArray2);
        int int4 = org.apache.commons.io.IOUtils.read(reader1, charArray2);
        java.io.Writer writer5 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray2, writer5);
        int int7 = org.apache.commons.io.IOUtils.length(charArray2);
        // The following exception was thrown during execution in test generation
        try {
            int int10 = org.apache.commons.io.IOUtils.read(reader0, charArray2, (int) (byte) 0, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[], int, int)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray2), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray2), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test1894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1894");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        java.io.Writer writer10 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer10);
        java.util.List<java.lang.String> strList12 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.InputStream inputStream14 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, 4);
        java.io.BufferedInputStream bufferedInputStream15 = org.apache.commons.io.IOUtils.buffer(inputStream14);
        java.io.OutputStream outputStream16 = null;
        long long17 = org.apache.commons.io.IOUtils.copyLarge(inputStream14, outputStream16);
        org.apache.commons.io.function.IOConsumer<java.io.IOException> iOExceptionIOConsumer18 = null;
        org.apache.commons.io.IOUtils.close((java.io.Closeable) outputStream16, iOExceptionIOConsumer18);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(strList12);
        org.junit.Assert.assertNotNull(inputStream14);
        org.junit.Assert.assertNotNull(bufferedInputStream15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
    }

    @Test
    public void test1895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1895");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.BufferedInputStream bufferedInputStream10 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.io.InputStream inputStream12 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, (int) (byte) 1);
        java.io.OutputStream outputStream13 = null;
        int int14 = org.apache.commons.io.IOUtils.copy(inputStream12, outputStream13);
        java.io.BufferedInputStream bufferedInputStream16 = org.apache.commons.io.IOUtils.buffer(inputStream12, (int) (byte) 10);
        byte[] byteArray18 = org.apache.commons.io.IOUtils.toByteArray(inputStream12, 0);
        java.io.BufferedInputStream bufferedInputStream19 = org.apache.commons.io.IOUtils.buffer(inputStream12);
        java.nio.charset.Charset charset20 = null;
        java.util.List<java.lang.String> strList21 = org.apache.commons.io.IOUtils.readLines(inputStream12, charset20);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream10);
        org.junit.Assert.assertNotNull(inputStream12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(bufferedInputStream16);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream19);
        org.junit.Assert.assertNotNull(strList21);
    }

    @Test
    public void test1896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1896");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.util.List<java.lang.String> strList4 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.OutputStream outputStream5 = null;
        long long8 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream5, (long) 0, 0L);
        java.io.InputStream inputStream10 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, 100);
        java.nio.charset.Charset charset11 = null;
        char[] charArray12 = org.apache.commons.io.IOUtils.toCharArray(inputStream1, charset11);
        java.io.InputStream inputStream14 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray15 = org.apache.commons.io.IOUtils.toByteArray(inputStream14);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream14);
        java.util.List<java.lang.String> strList17 = org.apache.commons.io.IOUtils.readLines(inputStream14);
        java.io.OutputStream outputStream18 = null;
        long long19 = org.apache.commons.io.IOUtils.copyLarge(inputStream14, outputStream18);
        java.io.OutputStream outputStream20 = null;
        java.io.InputStream inputStream24 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray25 = new byte[] {};
        int int26 = org.apache.commons.io.IOUtils.length(byteArray25);
        int int27 = org.apache.commons.io.IOUtils.read(inputStream24, byteArray25);
        long long28 = org.apache.commons.io.IOUtils.copyLarge(inputStream14, outputStream20, (-1L), 1L, byteArray25);
        java.io.OutputStream outputStream29 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray25, outputStream29);
        int int31 = org.apache.commons.io.IOUtils.length(byteArray25);
        org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray25);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(inputStream10);
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray12), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray12), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray12), "[]");
        org.junit.Assert.assertNotNull(inputStream14);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(inputStream24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
    }

    @Test
    public void test1897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1897");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        java.io.OutputStream outputStream10 = null;
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream10, (long) (short) 0, (-1L));
        char[] charArray14 = org.apache.commons.io.IOUtils.toCharArray(inputStream1);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream17 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray18 = new byte[] {};
        int int19 = org.apache.commons.io.IOUtils.length(byteArray18);
        int int20 = org.apache.commons.io.IOUtils.read(inputStream17, byteArray18);
        byte[] byteArray21 = org.apache.commons.io.IOUtils.toByteArray(inputStream17);
        byte[] byteArray23 = org.apache.commons.io.IOUtils.toByteArray(inputStream17, (int) (short) 0);
        java.io.BufferedInputStream bufferedInputStream24 = org.apache.commons.io.IOUtils.buffer(inputStream17);
        byte[] byteArray25 = org.apache.commons.io.IOUtils.toByteArray((java.io.InputStream) bufferedInputStream24);
        int int26 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray25);
        java.util.List<java.lang.String> strList27 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray29 = org.apache.commons.io.IOUtils.toByteArray(inputStream1, (long) 1);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Unexpected read size. current: 0, expected: 1");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[]");
        org.junit.Assert.assertNotNull(inputStream17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(strList27);
    }

    @Test
    public void test1898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1898");
        java.io.Reader reader0 = null;
        java.io.Reader reader1 = null;
        java.io.Reader reader2 = null;
        java.io.Reader reader3 = null;
        java.io.Writer writer4 = null;
        char[] charArray7 = new char[] {};
        int int8 = org.apache.commons.io.IOUtils.length(charArray7);
        java.io.Writer writer9 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray7, writer9);
        java.io.Writer writer11 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray7, writer11);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(reader3, writer4, 0L, (long) (byte) 100, charArray7);
        int int14 = org.apache.commons.io.IOUtils.read(reader2, charArray7);
        int int15 = org.apache.commons.io.IOUtils.length(charArray7);
        int int16 = org.apache.commons.io.IOUtils.read(reader1, charArray7);
        // The following exception was thrown during execution in test generation
        try {
            int int19 = org.apache.commons.io.IOUtils.read(reader0, charArray7, 10, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[], int, int)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test1899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1899");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.BufferedInputStream bufferedInputStream10 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.io.InputStream inputStream12 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, (int) (byte) 1);
        java.io.OutputStream outputStream13 = null;
        int int14 = org.apache.commons.io.IOUtils.copy(inputStream12, outputStream13);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream12);
        java.io.Writer writer16 = null;
        org.apache.commons.io.IOUtils.copy(inputStream12, writer16);
        char[] charArray18 = org.apache.commons.io.IOUtils.toCharArray(inputStream12);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.LineIterator lineIterator20 = org.apache.commons.io.IOUtils.lineIterator(inputStream12, "\r\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ??");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream10);
        org.junit.Assert.assertNotNull(inputStream12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(charArray18);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray18), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray18), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray18), "[]");
    }

    @Test
    public void test1900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1900");
        java.io.InputStream inputStream0 = null;
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray2 = org.apache.commons.io.IOUtils.readFully(inputStream0, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.InputStream.read(byte[], int, int)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1901");
        java.nio.charset.Charset charset1 = null;
        java.io.InputStream inputStream2 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "", charset1);
        java.util.List<java.lang.String> strList3 = org.apache.commons.io.IOUtils.readLines(inputStream2);
        java.io.InputStream inputStream5 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray6 = new byte[] {};
        int int7 = org.apache.commons.io.IOUtils.length(byteArray6);
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray6);
        byte[] byteArray9 = org.apache.commons.io.IOUtils.toByteArray(inputStream5);
        int int10 = org.apache.commons.io.IOUtils.length(byteArray9);
        org.apache.commons.io.IOUtils.readFully(inputStream2, byteArray9);
        byte[] byteArray13 = org.apache.commons.io.IOUtils.toByteArray(inputStream2, 0L);
        java.nio.charset.Charset charset15 = null;
        java.io.InputStream inputStream16 = org.apache.commons.io.IOUtils.toInputStream("hi!", charset15);
        boolean boolean17 = org.apache.commons.io.IOUtils.contentEquals(inputStream2, inputStream16);
        // The following exception was thrown during execution in test generation
        try {
            long long19 = org.apache.commons.io.IOUtils.skip(inputStream2, (long) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Skip count must be non-negative, actual: -1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream2);
        org.junit.Assert.assertNotNull(strList3);
        org.junit.Assert.assertNotNull(inputStream5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertNotNull(inputStream16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test1902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1902");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray(inputStream1, (int) (short) 0);
        java.io.BufferedInputStream bufferedInputStream8 = org.apache.commons.io.IOUtils.buffer(inputStream1);
        java.nio.charset.Charset charset9 = null;
        org.apache.commons.io.LineIterator lineIterator10 = org.apache.commons.io.IOUtils.lineIterator(inputStream1, charset9);
        org.apache.commons.io.IOUtils.closeQuietly(inputStream1);
        java.io.InputStream inputStream13 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray14 = new byte[] {};
        int int15 = org.apache.commons.io.IOUtils.length(byteArray14);
        int int16 = org.apache.commons.io.IOUtils.read(inputStream13, byteArray14);
        byte[] byteArray17 = org.apache.commons.io.IOUtils.toByteArray(inputStream13);
        java.nio.charset.Charset charset18 = null;
        java.util.List<java.lang.String> strList19 = org.apache.commons.io.IOUtils.readLines(inputStream13, charset18);
        java.nio.charset.Charset charset20 = null;
        org.apache.commons.io.LineIterator lineIterator21 = org.apache.commons.io.IOUtils.lineIterator(inputStream13, charset20);
        java.io.InputStream inputStream23 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream13, 6);
        java.io.BufferedInputStream bufferedInputStream25 = org.apache.commons.io.IOUtils.buffer(inputStream23, 3);
        boolean boolean26 = org.apache.commons.io.IOUtils.contentEquals(inputStream1, inputStream23);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray28 = org.apache.commons.io.IOUtils.toByteArray(inputStream23, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Unexpected read size. current: 0, expected: 32");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream8);
        org.junit.Assert.assertNotNull(lineIterator10);
        org.junit.Assert.assertNotNull(inputStream13);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertNotNull(lineIterator21);
        org.junit.Assert.assertNotNull(inputStream23);
        org.junit.Assert.assertNotNull(bufferedInputStream25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
    }

    @Test
    public void test1903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1903");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        java.nio.charset.Charset charset10 = null;
        java.util.List<java.lang.String> strList11 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset10);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream14 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, (int) (byte) 0);
        java.io.Writer writer15 = null;
        java.nio.charset.Charset charset16 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer15, charset16);
        java.nio.charset.Charset charset18 = null;
        java.util.List<java.lang.String> strList19 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset18);
        long long21 = org.apache.commons.io.IOUtils.skip(inputStream1, (long) (byte) 100);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertNotNull(inputStream14);
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
    }

    @Test
    public void test1904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1904");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream5 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray("");
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray10);
        long long12 = org.apache.commons.io.IOUtils.copyLarge(inputStream4, outputStream5, 0L, 0L, byteArray10);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, byteArray10);
        java.io.BufferedInputStream bufferedInputStream15 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        org.apache.commons.io.IOUtils.closeQuietly(inputStream1);
        java.nio.charset.Charset charset17 = null;
        java.util.List<java.lang.String> strList18 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset17);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.nio.charset.Charset charset20 = null;
        java.lang.String str21 = org.apache.commons.io.IOUtils.toString(inputStream1, charset20);
        java.lang.String str22 = org.apache.commons.io.IOUtils.toString(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer23 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer23);
        java.io.OutputStream outputStream25 = null;
        java.nio.charset.Charset charset27 = null;
        java.io.InputStream inputStream28 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "", charset27);
        java.io.OutputStream outputStream29 = null;
        java.io.InputStream inputStream31 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream32 = null;
        java.io.InputStream inputStream34 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream35 = null;
        java.io.InputStream inputStream38 = null;
        byte[] byteArray40 = org.apache.commons.io.IOUtils.toByteArray("");
        int int41 = org.apache.commons.io.IOUtils.read(inputStream38, byteArray40);
        long long42 = org.apache.commons.io.IOUtils.copyLarge(inputStream34, outputStream35, 0L, 0L, byteArray40);
        long long43 = org.apache.commons.io.IOUtils.copyLarge(inputStream31, outputStream32, byteArray40);
        java.io.BufferedInputStream bufferedInputStream45 = org.apache.commons.io.IOUtils.buffer(inputStream31, (int) (byte) 10);
        java.io.InputStream inputStream47 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray48 = org.apache.commons.io.IOUtils.toByteArray(inputStream47);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream47);
        java.io.InputStream inputStream51 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream52 = null;
        java.io.InputStream inputStream55 = null;
        byte[] byteArray57 = org.apache.commons.io.IOUtils.toByteArray("");
        int int58 = org.apache.commons.io.IOUtils.read(inputStream55, byteArray57);
        long long59 = org.apache.commons.io.IOUtils.copyLarge(inputStream51, outputStream52, 0L, 0L, byteArray57);
        java.nio.charset.Charset charset60 = null;
        java.util.List<java.lang.String> strList61 = org.apache.commons.io.IOUtils.readLines(inputStream51, charset60);
        java.io.InputStream inputStream63 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream64 = null;
        java.io.InputStream inputStream67 = null;
        byte[] byteArray69 = org.apache.commons.io.IOUtils.toByteArray("");
        int int70 = org.apache.commons.io.IOUtils.read(inputStream67, byteArray69);
        long long71 = org.apache.commons.io.IOUtils.copyLarge(inputStream63, outputStream64, 0L, 0L, byteArray69);
        java.nio.charset.Charset charset72 = null;
        java.util.List<java.lang.String> strList73 = org.apache.commons.io.IOUtils.readLines(inputStream63, charset72);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream63);
        boolean boolean75 = org.apache.commons.io.IOUtils.contentEquals(inputStream51, inputStream63);
        java.io.OutputStream outputStream76 = null;
        java.io.InputStream inputStream78 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream79 = null;
        java.io.InputStream inputStream82 = null;
        byte[] byteArray84 = org.apache.commons.io.IOUtils.toByteArray("");
        int int85 = org.apache.commons.io.IOUtils.read(inputStream82, byteArray84);
        long long86 = org.apache.commons.io.IOUtils.copyLarge(inputStream78, outputStream79, 0L, 0L, byteArray84);
        long long87 = org.apache.commons.io.IOUtils.copyLarge(inputStream63, outputStream76, byteArray84);
        org.apache.commons.io.IOUtils.readFully(inputStream47, byteArray84);
        org.apache.commons.io.IOUtils.readFully(inputStream31, byteArray84);
        int int90 = org.apache.commons.io.IOUtils.length(byteArray84);
        long long91 = org.apache.commons.io.IOUtils.copyLarge(inputStream28, outputStream29, byteArray84);
        long long92 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream25, byteArray84);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream15);
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(inputStream28);
        org.junit.Assert.assertNotNull(inputStream31);
        org.junit.Assert.assertNotNull(inputStream34);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream45);
        org.junit.Assert.assertNotNull(inputStream47);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertNotNull(inputStream51);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertNotNull(strList61);
        org.junit.Assert.assertNotNull(inputStream63);
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 0L + "'", long71 == 0L);
        org.junit.Assert.assertNotNull(strList73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(inputStream78);
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + 0L + "'", long86 == 0L);
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + 0L + "'", long87 == 0L);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertTrue("'" + long91 + "' != '" + 0L + "'", long91 == 0L);
        org.junit.Assert.assertTrue("'" + long92 + "' != '" + 0L + "'", long92 == 0L);
    }

    @Test
    public void test1905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1905");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.util.List<java.lang.String> strList4 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer5 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer5);
        java.io.InputStream inputStream8 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray9 = org.apache.commons.io.IOUtils.toByteArray(inputStream8);
        int int10 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray9);
        java.io.InputStream inputStream12 = org.apache.commons.io.IOUtils.toInputStream("\n");
        byte[] byteArray14 = org.apache.commons.io.IOUtils.toByteArray(inputStream12, (int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            int int17 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray14, 100, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Range [100, 100 + 10) out of bounds for length 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertNotNull(inputStream8);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(inputStream12);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
    }

    @Test
    public void test1906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1906");
        java.nio.charset.Charset charset1 = null;
        java.io.InputStream inputStream2 = org.apache.commons.io.IOUtils.toInputStream("", charset1);
        java.nio.charset.Charset charset3 = null;
        java.lang.String str4 = org.apache.commons.io.IOUtils.toString(inputStream2, charset3);
        char[] charArray5 = org.apache.commons.io.IOUtils.toCharArray(inputStream2);
        java.io.Writer writer6 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(charArray5, writer6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Writer.write(char[])\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[]");
    }

    @Test
    public void test1907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1907");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream5 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray("");
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray10);
        long long12 = org.apache.commons.io.IOUtils.copyLarge(inputStream4, outputStream5, 0L, 0L, byteArray10);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, byteArray10);
        java.io.BufferedInputStream bufferedInputStream15 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.io.InputStream inputStream17 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray18 = org.apache.commons.io.IOUtils.toByteArray(inputStream17);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream17);
        java.io.InputStream inputStream21 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream22 = null;
        java.io.InputStream inputStream25 = null;
        byte[] byteArray27 = org.apache.commons.io.IOUtils.toByteArray("");
        int int28 = org.apache.commons.io.IOUtils.read(inputStream25, byteArray27);
        long long29 = org.apache.commons.io.IOUtils.copyLarge(inputStream21, outputStream22, 0L, 0L, byteArray27);
        java.nio.charset.Charset charset30 = null;
        java.util.List<java.lang.String> strList31 = org.apache.commons.io.IOUtils.readLines(inputStream21, charset30);
        java.io.InputStream inputStream33 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream34 = null;
        java.io.InputStream inputStream37 = null;
        byte[] byteArray39 = org.apache.commons.io.IOUtils.toByteArray("");
        int int40 = org.apache.commons.io.IOUtils.read(inputStream37, byteArray39);
        long long41 = org.apache.commons.io.IOUtils.copyLarge(inputStream33, outputStream34, 0L, 0L, byteArray39);
        java.nio.charset.Charset charset42 = null;
        java.util.List<java.lang.String> strList43 = org.apache.commons.io.IOUtils.readLines(inputStream33, charset42);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream33);
        boolean boolean45 = org.apache.commons.io.IOUtils.contentEquals(inputStream21, inputStream33);
        java.io.OutputStream outputStream46 = null;
        java.io.InputStream inputStream48 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream49 = null;
        java.io.InputStream inputStream52 = null;
        byte[] byteArray54 = org.apache.commons.io.IOUtils.toByteArray("");
        int int55 = org.apache.commons.io.IOUtils.read(inputStream52, byteArray54);
        long long56 = org.apache.commons.io.IOUtils.copyLarge(inputStream48, outputStream49, 0L, 0L, byteArray54);
        long long57 = org.apache.commons.io.IOUtils.copyLarge(inputStream33, outputStream46, byteArray54);
        org.apache.commons.io.IOUtils.readFully(inputStream17, byteArray54);
        org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray54);
        java.lang.String str60 = org.apache.commons.io.IOUtils.toString(inputStream1);
        java.io.BufferedInputStream bufferedInputStream62 = org.apache.commons.io.IOUtils.buffer(inputStream1, 100);
        java.io.OutputStream outputStream63 = null;
        java.io.InputStream inputStream67 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray68 = new byte[] {};
        int int69 = org.apache.commons.io.IOUtils.length(byteArray68);
        int int70 = org.apache.commons.io.IOUtils.read(inputStream67, byteArray68);
        byte[] byteArray71 = org.apache.commons.io.IOUtils.toByteArray(inputStream67);
        byte[] byteArray73 = org.apache.commons.io.IOUtils.toByteArray(inputStream67, (int) (short) 0);
        long long75 = org.apache.commons.io.IOUtils.skip(inputStream67, 100L);
        java.io.InputStream inputStream76 = null;
        java.io.InputStream inputStream77 = null;
        java.io.OutputStream outputStream78 = null;
        byte[] byteArray81 = new byte[] {};
        int int82 = org.apache.commons.io.IOUtils.length(byteArray81);
        java.io.OutputStream outputStream83 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray81, outputStream83);
        long long85 = org.apache.commons.io.IOUtils.copyLarge(inputStream77, outputStream78, 0L, (long) (byte) -1, byteArray81);
        java.io.OutputStream outputStream86 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray81, outputStream86);
        org.apache.commons.io.IOUtils.readFully(inputStream76, byteArray81);
        int int89 = org.apache.commons.io.IOUtils.read(inputStream67, byteArray81);
        long long90 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream63, 0L, 1L, byteArray81);
        java.io.BufferedInputStream bufferedInputStream91 = org.apache.commons.io.IOUtils.buffer(inputStream1);
        java.io.Writer writer92 = null;
        org.apache.commons.io.IOUtils.copy((java.io.InputStream) bufferedInputStream91, writer92);
        java.io.OutputStream outputStream94 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long97 = org.apache.commons.io.IOUtils.copyLarge((java.io.InputStream) bufferedInputStream91, outputStream94, (long) ' ', (long) 5);
            org.junit.Assert.fail("Expected exception of type java.io.EOFException; message: Bytes to skip: 32 actual: 0");
        } catch (java.io.EOFException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream15);
        org.junit.Assert.assertNotNull(inputStream17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(inputStream21);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNotNull(strList31);
        org.junit.Assert.assertNotNull(inputStream33);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertNotNull(strList43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(inputStream48);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(bufferedInputStream62);
        org.junit.Assert.assertNotNull(inputStream67);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[]");
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[]");
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 0L + "'", long75 == 0L);
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 0L + "'", long85 == 0L);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + 0L + "'", long90 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream91);
    }

    @Test
    public void test1908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1908");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream("");
        java.io.OutputStream outputStream2 = null;
        long long3 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) outputStream2);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
    }

    @Test
    public void test1909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1909");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream5 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray("");
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray10);
        long long12 = org.apache.commons.io.IOUtils.copyLarge(inputStream4, outputStream5, 0L, 0L, byteArray10);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, byteArray10);
        java.io.BufferedInputStream bufferedInputStream15 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.nio.charset.Charset charset16 = null;
        java.util.List<java.lang.String> strList17 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset16);
        java.io.OutputStream outputStream18 = null;
        long long21 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream18, 0L, (long) 0);
        java.io.OutputStream outputStream22 = null;
        long long25 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream22, (long) (short) -1, (long) 10);
        java.lang.String str26 = org.apache.commons.io.IOUtils.toString(inputStream1);
        long long28 = org.apache.commons.io.IOUtils.skip(inputStream1, (long) '/');
        java.io.Writer writer29 = null;
        java.nio.charset.Charset charset30 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer29, charset30);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray33 = org.apache.commons.io.IOUtils.toByteArray(inputStream1, (long) '#');
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Unexpected read size. current: 0, expected: 35");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream15);
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
    }

    @Test
    public void test1910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1910");
        java.io.Reader reader0 = null;
        java.io.InputStream inputStream2 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray3 = new byte[] {};
        int int4 = org.apache.commons.io.IOUtils.length(byteArray3);
        int int5 = org.apache.commons.io.IOUtils.read(inputStream2, byteArray3);
        byte[] byteArray6 = org.apache.commons.io.IOUtils.toByteArray(inputStream2);
        java.nio.charset.Charset charset7 = null;
        java.util.List<java.lang.String> strList8 = org.apache.commons.io.IOUtils.readLines(inputStream2, charset7);
        java.nio.charset.Charset charset9 = null;
        org.apache.commons.io.LineIterator lineIterator10 = org.apache.commons.io.IOUtils.lineIterator(inputStream2, charset9);
        java.io.InputStream inputStream12 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream2, 6);
        java.io.BufferedInputStream bufferedInputStream14 = org.apache.commons.io.IOUtils.buffer(inputStream12, 3);
        java.io.InputStream inputStream16 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray17 = org.apache.commons.io.IOUtils.toByteArray(inputStream16);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream16);
        java.util.List<java.lang.String> strList19 = org.apache.commons.io.IOUtils.readLines(inputStream16);
        java.io.OutputStream outputStream20 = null;
        long long21 = org.apache.commons.io.IOUtils.copyLarge(inputStream16, outputStream20);
        java.io.Writer writer22 = null;
        org.apache.commons.io.IOUtils.copy(inputStream16, writer22);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream16);
        java.io.InputStream inputStream26 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray27 = new byte[] {};
        int int28 = org.apache.commons.io.IOUtils.length(byteArray27);
        int int29 = org.apache.commons.io.IOUtils.read(inputStream26, byteArray27);
        byte[] byteArray30 = org.apache.commons.io.IOUtils.toByteArray(inputStream26);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer31 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream26, iOExceptionConsumer31);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream26);
        java.io.BufferedInputStream bufferedInputStream35 = org.apache.commons.io.IOUtils.buffer(inputStream26, (int) (byte) 10);
        java.io.InputStream inputStream37 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream26, (int) (byte) 1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer38 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream26, iOExceptionConsumer38);
        java.io.OutputStream outputStream40 = null;
        java.io.InputStream inputStream42 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray43 = new byte[] {};
        int int44 = org.apache.commons.io.IOUtils.length(byteArray43);
        int int45 = org.apache.commons.io.IOUtils.read(inputStream42, byteArray43);
        byte[] byteArray46 = org.apache.commons.io.IOUtils.toByteArray(inputStream42);
        java.io.InputStream inputStream48 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray49 = new byte[] {};
        int int50 = org.apache.commons.io.IOUtils.length(byteArray49);
        int int51 = org.apache.commons.io.IOUtils.read(inputStream48, byteArray49);
        byte[] byteArray52 = org.apache.commons.io.IOUtils.toByteArray(inputStream48);
        int int53 = org.apache.commons.io.IOUtils.length(byteArray52);
        org.apache.commons.io.IOUtils.readFully(inputStream42, byteArray52);
        long long55 = org.apache.commons.io.IOUtils.copyLarge(inputStream26, outputStream40, byteArray52);
        boolean boolean56 = org.apache.commons.io.IOUtils.contentEquals(inputStream16, inputStream26);
        java.io.BufferedInputStream bufferedInputStream57 = org.apache.commons.io.IOUtils.buffer(inputStream16);
        java.io.BufferedInputStream bufferedInputStream59 = org.apache.commons.io.IOUtils.buffer(inputStream16, (int) (short) 100);
        boolean boolean60 = org.apache.commons.io.IOUtils.contentEquals(inputStream12, inputStream16);
        char[] charArray61 = org.apache.commons.io.IOUtils.toCharArray(inputStream16);
        int int62 = org.apache.commons.io.IOUtils.read(reader0, charArray61);
        org.junit.Assert.assertNotNull(inputStream2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertNotNull(lineIterator10);
        org.junit.Assert.assertNotNull(inputStream12);
        org.junit.Assert.assertNotNull(bufferedInputStream14);
        org.junit.Assert.assertNotNull(inputStream16);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(inputStream26);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream35);
        org.junit.Assert.assertNotNull(inputStream37);
        org.junit.Assert.assertNotNull(inputStream42);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertNotNull(inputStream48);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(bufferedInputStream57);
        org.junit.Assert.assertNotNull(bufferedInputStream59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(charArray61);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray61), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray61), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray61), "[]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
    }

    @Test
    public void test1911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1911");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "hi!");
        java.io.InputStream inputStream3 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray4 = new byte[] {};
        int int5 = org.apache.commons.io.IOUtils.length(byteArray4);
        int int6 = org.apache.commons.io.IOUtils.read(inputStream3, byteArray4);
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray(inputStream3);
        byte[] byteArray9 = org.apache.commons.io.IOUtils.toByteArray(inputStream3, (int) (short) 0);
        java.io.BufferedInputStream bufferedInputStream10 = org.apache.commons.io.IOUtils.buffer(inputStream3);
        byte[] byteArray11 = org.apache.commons.io.IOUtils.toByteArray((java.io.InputStream) bufferedInputStream10);
        int int14 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray11, 0, 0);
        java.io.OutputStream outputStream15 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long16 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.OutputStream.write(byte[], int, int)\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream3);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream10);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test1912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1912");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        java.io.OutputStream outputStream10 = null;
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream10, (long) (short) 0, (-1L));
        java.lang.String str14 = org.apache.commons.io.IOUtils.toString(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly(inputStream1);
        java.io.BufferedInputStream bufferedInputStream17 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 100);
        java.io.InputStream inputStream19 = org.apache.commons.io.IOUtils.toBufferedInputStream((java.io.InputStream) bufferedInputStream17, 100);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.LineIterator lineIterator21 = org.apache.commons.io.IOUtils.lineIterator(inputStream19, "\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ?");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(bufferedInputStream17);
        org.junit.Assert.assertNotNull(inputStream19);
    }

    @Test
    public void test1913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1913");
        java.io.Reader reader0 = null;
        java.io.Writer writer1 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long4 = org.apache.commons.io.IOUtils.copyLarge(reader0, writer1, (long) 10, (long) 4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[], int, int)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1914");
        java.io.Reader reader0 = null;
        char[] charArray1 = new char[] {};
        int int2 = org.apache.commons.io.IOUtils.length(charArray1);
        int int3 = org.apache.commons.io.IOUtils.read(reader0, charArray1);
        java.io.Writer writer4 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray1, writer4);
        int int6 = org.apache.commons.io.IOUtils.length(charArray1);
        java.io.OutputStream outputStream7 = null;
        java.nio.charset.Charset charset8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(charArray1, outputStream7, charset8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.OutputStream.write(byte[])\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray1);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray1), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray1), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray1), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test1915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1915");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        java.io.Writer writer10 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer10);
        java.nio.charset.Charset charset12 = null;
        char[] charArray13 = org.apache.commons.io.IOUtils.toCharArray(inputStream1, charset12);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray15 = org.apache.commons.io.IOUtils.readFully(inputStream1, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: -1");
        } catch (java.lang.NegativeArraySizeException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[]");
    }

    @Test
    public void test1916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1916");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.BufferedInputStream bufferedInputStream10 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.io.InputStream inputStream12 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, (int) (byte) 1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer13 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer13);
        java.io.OutputStream outputStream15 = null;
        java.io.InputStream inputStream17 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray18 = new byte[] {};
        int int19 = org.apache.commons.io.IOUtils.length(byteArray18);
        int int20 = org.apache.commons.io.IOUtils.read(inputStream17, byteArray18);
        byte[] byteArray21 = org.apache.commons.io.IOUtils.toByteArray(inputStream17);
        java.io.InputStream inputStream23 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray24 = new byte[] {};
        int int25 = org.apache.commons.io.IOUtils.length(byteArray24);
        int int26 = org.apache.commons.io.IOUtils.read(inputStream23, byteArray24);
        byte[] byteArray27 = org.apache.commons.io.IOUtils.toByteArray(inputStream23);
        int int28 = org.apache.commons.io.IOUtils.length(byteArray27);
        org.apache.commons.io.IOUtils.readFully(inputStream17, byteArray27);
        long long30 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream15, byteArray27);
        java.io.BufferedInputStream bufferedInputStream32 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (short) 1);
        java.lang.String str33 = org.apache.commons.io.IOUtils.toString((java.io.InputStream) bufferedInputStream32);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream10);
        org.junit.Assert.assertNotNull(inputStream12);
        org.junit.Assert.assertNotNull(inputStream17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertNotNull(inputStream23);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
    }

    @Test
    public void test1917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1917");
        byte[] byteArray1 = org.apache.commons.io.IOUtils.toByteArray("hi!");
        java.lang.String str2 = org.apache.commons.io.IOUtils.toString(byteArray1);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[104, 105, 33]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
    }

    @Test
    public void test1918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1918");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream5 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray("");
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray10);
        long long12 = org.apache.commons.io.IOUtils.copyLarge(inputStream4, outputStream5, 0L, 0L, byteArray10);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, byteArray10);
        java.io.BufferedInputStream bufferedInputStream15 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        org.apache.commons.io.IOUtils.closeQuietly(inputStream1);
        java.nio.charset.Charset charset17 = null;
        java.util.List<java.lang.String> strList18 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset17);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.io.OutputStream outputStream20 = null;
        int int21 = org.apache.commons.io.IOUtils.copy(inputStream1, outputStream20);
        java.io.InputStream inputStream23 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray24 = new byte[] {};
        int int25 = org.apache.commons.io.IOUtils.length(byteArray24);
        int int26 = org.apache.commons.io.IOUtils.read(inputStream23, byteArray24);
        byte[] byteArray27 = org.apache.commons.io.IOUtils.toByteArray(inputStream23);
        byte[] byteArray29 = org.apache.commons.io.IOUtils.toByteArray(inputStream23, (int) (short) 0);
        byte[] byteArray30 = new byte[] {};
        int int31 = org.apache.commons.io.IOUtils.length(byteArray30);
        org.apache.commons.io.IOUtils.readFully(inputStream23, byteArray30);
        int int33 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray30);
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        int int36 = org.apache.commons.io.IOUtils.read(inputStream34, byteArray35);
        org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray35);
        java.io.OutputStream outputStream38 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(byteArray35, outputStream38);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.OutputStream.write(byte[])\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream15);
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(inputStream23);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
    }

    @Test
    public void test1919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1919");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        java.io.Writer writer10 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer10);
        java.util.List<java.lang.String> strList12 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.Writer writer14 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList12, "\r\n", writer14);
        java.io.Writer writer17 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList12, "\r\n", writer17);
        java.io.OutputStream outputStream20 = null;
        java.nio.charset.Charset charset21 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList12, "\r\n", outputStream20, charset21);
        java.io.OutputStream outputStream24 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList12, "", outputStream24);
        java.io.OutputStream outputStream27 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList12, "", outputStream27, "\r\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ??");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(strList12);
    }

    @Test
    public void test1920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1920");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream3 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1);
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream3);
        java.io.BufferedInputStream bufferedInputStream6 = org.apache.commons.io.IOUtils.buffer(inputStream4, 3);
        java.nio.charset.Charset charset7 = null;
        char[] charArray8 = org.apache.commons.io.IOUtils.toCharArray((java.io.InputStream) bufferedInputStream6, charset7);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream3);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(bufferedInputStream6);
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[]");
    }

    @Test
    public void test1921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1921");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream5 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray("");
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray10);
        long long12 = org.apache.commons.io.IOUtils.copyLarge(inputStream4, outputStream5, 0L, 0L, byteArray10);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, byteArray10);
        java.io.BufferedInputStream bufferedInputStream15 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.io.OutputStream outputStream16 = null;
        long long17 = org.apache.commons.io.IOUtils.copyLarge((java.io.InputStream) bufferedInputStream15, outputStream16);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) bufferedInputStream15);
        java.io.InputStream inputStream20 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream21 = null;
        java.io.InputStream inputStream23 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream24 = null;
        java.io.InputStream inputStream27 = null;
        byte[] byteArray29 = org.apache.commons.io.IOUtils.toByteArray("");
        int int30 = org.apache.commons.io.IOUtils.read(inputStream27, byteArray29);
        long long31 = org.apache.commons.io.IOUtils.copyLarge(inputStream23, outputStream24, 0L, 0L, byteArray29);
        long long32 = org.apache.commons.io.IOUtils.copyLarge(inputStream20, outputStream21, byteArray29);
        java.io.BufferedInputStream bufferedInputStream34 = org.apache.commons.io.IOUtils.buffer(inputStream20, (int) (byte) 10);
        java.nio.charset.Charset charset35 = null;
        java.util.List<java.lang.String> strList36 = org.apache.commons.io.IOUtils.readLines(inputStream20, charset35);
        java.io.OutputStream outputStream37 = null;
        long long40 = org.apache.commons.io.IOUtils.copyLarge(inputStream20, outputStream37, 0L, (long) 0);
        java.io.BufferedInputStream bufferedInputStream41 = org.apache.commons.io.IOUtils.buffer(inputStream20);
        java.io.BufferedInputStream bufferedInputStream42 = org.apache.commons.io.IOUtils.buffer(inputStream20);
        java.io.InputStream inputStream44 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream44);
        java.io.InputStream inputStream46 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream44);
        java.lang.String str47 = org.apache.commons.io.IOUtils.toString(inputStream44);
        java.io.InputStream inputStream48 = null;
        byte[] byteArray50 = org.apache.commons.io.IOUtils.toByteArray("");
        int int51 = org.apache.commons.io.IOUtils.read(inputStream48, byteArray50);
        org.apache.commons.io.IOUtils.readFully(inputStream44, byteArray50);
        org.apache.commons.io.IOUtils.readFully((java.io.InputStream) bufferedInputStream42, byteArray50);
        java.io.OutputStream outputStream54 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray50, outputStream54);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.readFully((java.io.InputStream) bufferedInputStream15, byteArray50, (int) (byte) 10, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Stream closed");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(inputStream20);
        org.junit.Assert.assertNotNull(inputStream23);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream34);
        org.junit.Assert.assertNotNull(strList36);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream41);
        org.junit.Assert.assertNotNull(bufferedInputStream42);
        org.junit.Assert.assertNotNull(inputStream44);
        org.junit.Assert.assertNotNull(inputStream46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
    }

    @Test
    public void test1922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1922");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.BufferedInputStream bufferedInputStream10 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.io.InputStream inputStream12 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, (int) (byte) 1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer13 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer13);
        java.nio.charset.Charset charset15 = null;
        java.util.List<java.lang.String> strList16 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset15);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream10);
        org.junit.Assert.assertNotNull(inputStream12);
        org.junit.Assert.assertNotNull(strList16);
    }

    @Test
    public void test1923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1923");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.BufferedInputStream bufferedInputStream10 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        byte[] byteArray11 = null;
        org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray11, (int) '4', 0);
        java.io.OutputStream outputStream15 = null;
        long long16 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream15);
        java.io.OutputStream outputStream17 = null;
        long long19 = org.apache.commons.io.IOUtils.copy(inputStream1, outputStream17, (int) (short) 100);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer20 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) outputStream17, iOExceptionConsumer20);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream10);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
    }

    @Test
    public void test1924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1924");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream5 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray("");
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray10);
        long long12 = org.apache.commons.io.IOUtils.copyLarge(inputStream4, outputStream5, 0L, 0L, byteArray10);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, byteArray10);
        java.io.BufferedInputStream bufferedInputStream15 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        org.apache.commons.io.IOUtils.closeQuietly(inputStream1);
        java.nio.charset.Charset charset17 = null;
        java.util.List<java.lang.String> strList18 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset17);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream20 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly(inputStream1);
        char[] charArray22 = org.apache.commons.io.IOUtils.toCharArray(inputStream1);
        java.io.OutputStream outputStream23 = null;
        java.io.InputStream inputStream25 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray26 = new byte[] {};
        int int27 = org.apache.commons.io.IOUtils.length(byteArray26);
        int int28 = org.apache.commons.io.IOUtils.read(inputStream25, byteArray26);
        byte[] byteArray29 = org.apache.commons.io.IOUtils.toByteArray(inputStream25);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer30 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream25, iOExceptionConsumer30);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream25);
        java.io.BufferedInputStream bufferedInputStream34 = org.apache.commons.io.IOUtils.buffer(inputStream25, (int) (byte) 10);
        java.io.InputStream inputStream36 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream25, (int) (byte) 1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer37 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream25, iOExceptionConsumer37);
        java.io.OutputStream outputStream39 = null;
        java.io.InputStream inputStream41 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray42 = new byte[] {};
        int int43 = org.apache.commons.io.IOUtils.length(byteArray42);
        int int44 = org.apache.commons.io.IOUtils.read(inputStream41, byteArray42);
        byte[] byteArray45 = org.apache.commons.io.IOUtils.toByteArray(inputStream41);
        java.io.InputStream inputStream47 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray48 = new byte[] {};
        int int49 = org.apache.commons.io.IOUtils.length(byteArray48);
        int int50 = org.apache.commons.io.IOUtils.read(inputStream47, byteArray48);
        byte[] byteArray51 = org.apache.commons.io.IOUtils.toByteArray(inputStream47);
        int int52 = org.apache.commons.io.IOUtils.length(byteArray51);
        org.apache.commons.io.IOUtils.readFully(inputStream41, byteArray51);
        long long54 = org.apache.commons.io.IOUtils.copyLarge(inputStream25, outputStream39, byteArray51);
        java.io.InputStream inputStream56 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream57 = null;
        java.io.InputStream inputStream60 = null;
        byte[] byteArray62 = org.apache.commons.io.IOUtils.toByteArray("");
        int int63 = org.apache.commons.io.IOUtils.read(inputStream60, byteArray62);
        long long64 = org.apache.commons.io.IOUtils.copyLarge(inputStream56, outputStream57, 0L, 0L, byteArray62);
        java.nio.charset.Charset charset65 = null;
        java.util.List<java.lang.String> strList66 = org.apache.commons.io.IOUtils.readLines(inputStream56, charset65);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream56);
        java.nio.charset.Charset charset68 = null;
        java.lang.String str69 = org.apache.commons.io.IOUtils.toString(inputStream56, charset68);
        java.io.Writer writer70 = null;
        org.apache.commons.io.IOUtils.copy(inputStream56, writer70);
        byte[] byteArray72 = org.apache.commons.io.IOUtils.toByteArray(inputStream56);
        int int73 = org.apache.commons.io.IOUtils.read(inputStream25, byteArray72);
        long long74 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream23, byteArray72);
        java.io.OutputStream outputStream75 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray72, outputStream75);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream15);
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertNotNull(inputStream20);
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray22), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray22), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray22), "[]");
        org.junit.Assert.assertNotNull(inputStream25);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream34);
        org.junit.Assert.assertNotNull(inputStream36);
        org.junit.Assert.assertNotNull(inputStream41);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
        org.junit.Assert.assertNotNull(inputStream47);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertNotNull(inputStream56);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L);
        org.junit.Assert.assertNotNull(strList66);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 0L + "'", long74 == 0L);
    }

    @Test
    public void test1925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1925");
        java.nio.charset.Charset charset1 = null;
        java.io.InputStream inputStream2 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "", charset1);
        byte[] byteArray3 = org.apache.commons.io.IOUtils.toByteArray(inputStream2);
        java.io.Writer writer4 = null;
        java.nio.charset.Charset charset5 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(byteArray3, writer4, charset5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Writer.write(String)\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
    }

    @Test
    public void test1926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1926");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        java.nio.charset.Charset charset10 = null;
        java.util.List<java.lang.String> strList11 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset10);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream14 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, (int) (byte) 0);
        java.io.OutputStream outputStream15 = null;
        long long18 = org.apache.commons.io.IOUtils.copyLarge(inputStream14, outputStream15, 0L, (long) 5);
        byte[] byteArray20 = org.apache.commons.io.IOUtils.toByteArray("\n");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.readFully(inputStream14, byteArray20, (int) (byte) 100, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Range [100, 100 + 10) out of bounds for length 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertNotNull(inputStream14);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[10]");
    }

    @Test
    public void test1927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1927");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        java.nio.charset.Charset charset10 = null;
        java.util.List<java.lang.String> strList11 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset10);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream14 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, (int) (byte) 0);
        java.nio.charset.Charset charset15 = null;
        org.apache.commons.io.LineIterator lineIterator16 = org.apache.commons.io.IOUtils.lineIterator(inputStream1, charset15);
        org.apache.commons.io.IOUtils.closeQuietly(inputStream1);
        java.io.OutputStream outputStream18 = null;
        long long21 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream18, (long) 0, 0L);
        java.io.Writer writer22 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.copy(inputStream1, writer22, "\r\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ??");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertNotNull(inputStream14);
        org.junit.Assert.assertNotNull(lineIterator16);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
    }

    @Test
    public void test1928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1928");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "\n");
        java.util.List<java.lang.String> strList2 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.InputStream inputStream3 = null;
        java.io.InputStream inputStream4 = null;
        java.io.OutputStream outputStream5 = null;
        byte[] byteArray8 = new byte[] {};
        int int9 = org.apache.commons.io.IOUtils.length(byteArray8);
        java.io.OutputStream outputStream10 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray8, outputStream10);
        long long12 = org.apache.commons.io.IOUtils.copyLarge(inputStream4, outputStream5, 0L, (long) (byte) -1, byteArray8);
        java.io.OutputStream outputStream13 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray8, outputStream13);
        org.apache.commons.io.IOUtils.readFully(inputStream3, byteArray8);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray8, (int) '#', (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Range [35, 35 + 52) out of bounds for length 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(strList2);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
    }

    @Test
    public void test1929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1929");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream5 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray("");
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray10);
        long long12 = org.apache.commons.io.IOUtils.copyLarge(inputStream4, outputStream5, 0L, 0L, byteArray10);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, byteArray10);
        java.io.BufferedInputStream bufferedInputStream15 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.nio.charset.Charset charset16 = null;
        java.util.List<java.lang.String> strList17 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset16);
        java.io.OutputStream outputStream18 = null;
        long long21 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream18, 0L, (long) 0);
        java.io.BufferedInputStream bufferedInputStream22 = org.apache.commons.io.IOUtils.buffer(inputStream1);
        java.io.OutputStream outputStream23 = null;
        long long24 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream23);
        // The following exception was thrown during execution in test generation
        try {
            java.io.BufferedInputStream bufferedInputStream26 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Buffer size <= 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream15);
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
    }

    @Test
    public void test1930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1930");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream4);
        java.io.InputStream inputStream7 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray8 = new byte[] {};
        int int9 = org.apache.commons.io.IOUtils.length(byteArray8);
        int int10 = org.apache.commons.io.IOUtils.read(inputStream7, byteArray8);
        byte[] byteArray11 = org.apache.commons.io.IOUtils.toByteArray(inputStream7);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer12 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream7, iOExceptionConsumer12);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream7);
        java.io.BufferedInputStream bufferedInputStream16 = org.apache.commons.io.IOUtils.buffer(inputStream7, (int) (byte) 10);
        boolean boolean17 = org.apache.commons.io.IOUtils.contentEquals(inputStream4, inputStream7);
        java.io.InputStream inputStream19 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray20 = new byte[] {};
        int int21 = org.apache.commons.io.IOUtils.length(byteArray20);
        int int22 = org.apache.commons.io.IOUtils.read(inputStream19, byteArray20);
        byte[] byteArray23 = org.apache.commons.io.IOUtils.toByteArray(inputStream19);
        byte[] byteArray25 = org.apache.commons.io.IOUtils.toByteArray(inputStream19, (int) (short) 0);
        long long27 = org.apache.commons.io.IOUtils.skip(inputStream19, 100L);
        java.io.InputStream inputStream28 = null;
        java.io.InputStream inputStream29 = null;
        java.io.OutputStream outputStream30 = null;
        byte[] byteArray33 = new byte[] {};
        int int34 = org.apache.commons.io.IOUtils.length(byteArray33);
        java.io.OutputStream outputStream35 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray33, outputStream35);
        long long37 = org.apache.commons.io.IOUtils.copyLarge(inputStream29, outputStream30, 0L, (long) (byte) -1, byteArray33);
        java.io.OutputStream outputStream38 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray33, outputStream38);
        org.apache.commons.io.IOUtils.readFully(inputStream28, byteArray33);
        int int41 = org.apache.commons.io.IOUtils.read(inputStream19, byteArray33);
        int int42 = org.apache.commons.io.IOUtils.read(inputStream7, byteArray33);
        int int45 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray33, 1, (int) (short) 0);
        java.io.InputStream inputStream47 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, (int) (short) 10);
        java.io.Writer writer48 = null;
        java.nio.charset.Charset charset49 = null;
        org.apache.commons.io.IOUtils.copy(inputStream47, writer48, charset49);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(inputStream7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(inputStream19);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(inputStream47);
    }

    @Test
    public void test1931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1931");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray(inputStream1, (int) (short) 0);
        long long9 = org.apache.commons.io.IOUtils.skip(inputStream1, 100L);
        java.io.InputStream inputStream11 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray12 = org.apache.commons.io.IOUtils.toByteArray(inputStream11);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream11);
        java.util.List<java.lang.String> strList14 = org.apache.commons.io.IOUtils.readLines(inputStream11);
        java.io.OutputStream outputStream15 = null;
        long long16 = org.apache.commons.io.IOUtils.copyLarge(inputStream11, outputStream15);
        java.io.OutputStream outputStream17 = null;
        java.io.InputStream inputStream21 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray22 = new byte[] {};
        int int23 = org.apache.commons.io.IOUtils.length(byteArray22);
        int int24 = org.apache.commons.io.IOUtils.read(inputStream21, byteArray22);
        long long25 = org.apache.commons.io.IOUtils.copyLarge(inputStream11, outputStream17, (-1L), 1L, byteArray22);
        int int26 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray22);
        java.io.InputStream inputStream28 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray29 = new byte[] {};
        int int30 = org.apache.commons.io.IOUtils.length(byteArray29);
        int int31 = org.apache.commons.io.IOUtils.read(inputStream28, byteArray29);
        byte[] byteArray32 = org.apache.commons.io.IOUtils.toByteArray(inputStream28);
        byte[] byteArray34 = org.apache.commons.io.IOUtils.toByteArray(inputStream28, (int) (short) 0);
        java.io.BufferedInputStream bufferedInputStream35 = org.apache.commons.io.IOUtils.buffer(inputStream28);
        byte[] byteArray36 = org.apache.commons.io.IOUtils.toByteArray((java.io.InputStream) bufferedInputStream35);
        org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray36);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str39 = org.apache.commons.io.IOUtils.toString(byteArray36, "\r\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ??");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(inputStream11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertNotNull(strList14);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(inputStream21);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(inputStream28);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream35);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
    }

    @Test
    public void test1932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1932");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.BufferedInputStream bufferedInputStream10 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.io.InputStream inputStream12 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, (int) (byte) 1);
        java.nio.charset.Charset charset13 = null;
        char[] charArray14 = org.apache.commons.io.IOUtils.toCharArray(inputStream1, charset13);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream17 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray18 = new byte[] {};
        int int19 = org.apache.commons.io.IOUtils.length(byteArray18);
        int int20 = org.apache.commons.io.IOUtils.read(inputStream17, byteArray18);
        byte[] byteArray21 = org.apache.commons.io.IOUtils.toByteArray(inputStream17);
        byte[] byteArray23 = org.apache.commons.io.IOUtils.toByteArray(inputStream17, (int) (short) 0);
        byte[] byteArray24 = new byte[] {};
        int int25 = org.apache.commons.io.IOUtils.length(byteArray24);
        org.apache.commons.io.IOUtils.readFully(inputStream17, byteArray24);
        java.lang.String str27 = org.apache.commons.io.IOUtils.toString(byteArray24);
        int int28 = org.apache.commons.io.IOUtils.length(byteArray24);
        org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray24);
        java.io.Writer writer30 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer30);
        java.io.InputStream inputStream32 = null;
        boolean boolean33 = org.apache.commons.io.IOUtils.contentEquals(inputStream1, inputStream32);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray35 = org.apache.commons.io.IOUtils.readFully(inputStream1, 1);
            org.junit.Assert.fail("Expected exception of type java.io.EOFException; message: Length to read: 1 actual: 0");
        } catch (java.io.EOFException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream10);
        org.junit.Assert.assertNotNull(inputStream12);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[]");
        org.junit.Assert.assertNotNull(inputStream17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test1933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1933");
        java.io.Reader reader0 = null;
        java.io.Reader reader1 = null;
        java.io.Reader reader2 = null;
        java.io.Reader reader3 = null;
        java.io.Reader reader4 = null;
        java.io.Reader reader5 = null;
        java.io.Writer writer6 = null;
        char[] charArray9 = new char[] {};
        int int10 = org.apache.commons.io.IOUtils.length(charArray9);
        java.io.Writer writer11 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray9, writer11);
        java.io.Writer writer13 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray9, writer13);
        long long15 = org.apache.commons.io.IOUtils.copyLarge(reader5, writer6, 0L, (long) (byte) 100, charArray9);
        int int16 = org.apache.commons.io.IOUtils.read(reader4, charArray9);
        int int17 = org.apache.commons.io.IOUtils.length(charArray9);
        int int18 = org.apache.commons.io.IOUtils.read(reader3, charArray9);
        int int19 = org.apache.commons.io.IOUtils.read(reader2, charArray9);
        int int20 = org.apache.commons.io.IOUtils.length(charArray9);
        org.apache.commons.io.IOUtils.readFully(reader1, charArray9);
        int int22 = org.apache.commons.io.IOUtils.read(reader0, charArray9);
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
    }

    @Test
    public void test1934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1934");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream4);
        java.io.InputStream inputStream7 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray8 = new byte[] {};
        int int9 = org.apache.commons.io.IOUtils.length(byteArray8);
        int int10 = org.apache.commons.io.IOUtils.read(inputStream7, byteArray8);
        byte[] byteArray11 = org.apache.commons.io.IOUtils.toByteArray(inputStream7);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer12 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream7, iOExceptionConsumer12);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream7);
        java.io.BufferedInputStream bufferedInputStream16 = org.apache.commons.io.IOUtils.buffer(inputStream7, (int) (byte) 10);
        boolean boolean17 = org.apache.commons.io.IOUtils.contentEquals(inputStream4, inputStream7);
        java.io.InputStream inputStream19 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray20 = new byte[] {};
        int int21 = org.apache.commons.io.IOUtils.length(byteArray20);
        int int22 = org.apache.commons.io.IOUtils.read(inputStream19, byteArray20);
        byte[] byteArray23 = org.apache.commons.io.IOUtils.toByteArray(inputStream19);
        byte[] byteArray25 = org.apache.commons.io.IOUtils.toByteArray(inputStream19, (int) (short) 0);
        long long27 = org.apache.commons.io.IOUtils.skip(inputStream19, 100L);
        java.io.InputStream inputStream28 = null;
        java.io.InputStream inputStream29 = null;
        java.io.OutputStream outputStream30 = null;
        byte[] byteArray33 = new byte[] {};
        int int34 = org.apache.commons.io.IOUtils.length(byteArray33);
        java.io.OutputStream outputStream35 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray33, outputStream35);
        long long37 = org.apache.commons.io.IOUtils.copyLarge(inputStream29, outputStream30, 0L, (long) (byte) -1, byteArray33);
        java.io.OutputStream outputStream38 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray33, outputStream38);
        org.apache.commons.io.IOUtils.readFully(inputStream28, byteArray33);
        int int41 = org.apache.commons.io.IOUtils.read(inputStream19, byteArray33);
        int int42 = org.apache.commons.io.IOUtils.read(inputStream7, byteArray33);
        int int45 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray33, 1, (int) (short) 0);
        java.io.InputStream inputStream47 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, (int) (short) 10);
        java.util.List<java.lang.String> strList48 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.OutputStream outputStream50 = null;
        java.nio.charset.Charset charset51 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList48, "", outputStream50, charset51);
        java.io.Writer writer54 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList48, "\r\n", writer54);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(inputStream7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(inputStream19);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(inputStream47);
        org.junit.Assert.assertNotNull(strList48);
    }

    @Test
    public void test1935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1935");
        java.io.InputStream inputStream0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.InputStream inputStream2 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream0, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.InputStream.read(byte[], int, int)\" because \"in\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1936");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.io.InputStream inputStream7 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, (int) (byte) 0);
        java.io.InputStream inputStream9 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray10 = new byte[] {};
        int int11 = org.apache.commons.io.IOUtils.length(byteArray10);
        int int12 = org.apache.commons.io.IOUtils.read(inputStream9, byteArray10);
        byte[] byteArray13 = org.apache.commons.io.IOUtils.toByteArray(inputStream9);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer14 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream9, iOExceptionConsumer14);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream9);
        java.io.BufferedInputStream bufferedInputStream18 = org.apache.commons.io.IOUtils.buffer(inputStream9, (int) (byte) 10);
        java.io.InputStream inputStream20 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream9, (int) (byte) 1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer21 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream9, iOExceptionConsumer21);
        java.io.OutputStream outputStream23 = null;
        java.io.InputStream inputStream25 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray26 = new byte[] {};
        int int27 = org.apache.commons.io.IOUtils.length(byteArray26);
        int int28 = org.apache.commons.io.IOUtils.read(inputStream25, byteArray26);
        byte[] byteArray29 = org.apache.commons.io.IOUtils.toByteArray(inputStream25);
        java.io.InputStream inputStream31 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray32 = new byte[] {};
        int int33 = org.apache.commons.io.IOUtils.length(byteArray32);
        int int34 = org.apache.commons.io.IOUtils.read(inputStream31, byteArray32);
        byte[] byteArray35 = org.apache.commons.io.IOUtils.toByteArray(inputStream31);
        int int36 = org.apache.commons.io.IOUtils.length(byteArray35);
        org.apache.commons.io.IOUtils.readFully(inputStream25, byteArray35);
        long long38 = org.apache.commons.io.IOUtils.copyLarge(inputStream9, outputStream23, byteArray35);
        byte[] byteArray39 = org.apache.commons.io.IOUtils.toByteArray(inputStream9);
        org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray39);
        int int41 = org.apache.commons.io.IOUtils.length(byteArray39);
        java.io.Writer writer42 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(byteArray39, writer42);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Writer.write(String)\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(inputStream7);
        org.junit.Assert.assertNotNull(inputStream9);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream18);
        org.junit.Assert.assertNotNull(inputStream20);
        org.junit.Assert.assertNotNull(inputStream25);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(inputStream31);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
    }

    @Test
    public void test1937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1937");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray5 = new byte[] {};
        int int6 = org.apache.commons.io.IOUtils.length(byteArray5);
        int int7 = org.apache.commons.io.IOUtils.read(inputStream4, byteArray5);
        byte[] byteArray8 = org.apache.commons.io.IOUtils.toByteArray(inputStream4);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer9 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream4, iOExceptionConsumer9);
        long long12 = org.apache.commons.io.IOUtils.skip(inputStream4, (long) (byte) 100);
        java.io.InputStream inputStream16 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray17 = new byte[] {};
        int int18 = org.apache.commons.io.IOUtils.length(byteArray17);
        int int19 = org.apache.commons.io.IOUtils.read(inputStream16, byteArray17);
        byte[] byteArray20 = org.apache.commons.io.IOUtils.toByteArray(inputStream16);
        byte[] byteArray22 = org.apache.commons.io.IOUtils.toByteArray(inputStream16, (int) (short) 0);
        byte[] byteArray23 = new byte[] {};
        int int24 = org.apache.commons.io.IOUtils.length(byteArray23);
        org.apache.commons.io.IOUtils.readFully(inputStream16, byteArray23);
        java.io.InputStream inputStream27 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray28 = org.apache.commons.io.IOUtils.toByteArray(inputStream27);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream27);
        java.nio.charset.Charset charset30 = null;
        org.apache.commons.io.LineIterator lineIterator31 = org.apache.commons.io.IOUtils.lineIterator(inputStream27, charset30);
        java.lang.Object[] objArray32 = new java.lang.Object[] { inputStream1, (byte) 100, "hi!", 10.0d, inputStream16, inputStream27 };
        int int33 = org.apache.commons.io.IOUtils.length(objArray32);
        int int34 = org.apache.commons.io.IOUtils.length(objArray32);
        int int35 = org.apache.commons.io.IOUtils.length(objArray32);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(inputStream16);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(inputStream27);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertNotNull(lineIterator31);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 6 + "'", int33 == 6);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 6 + "'", int34 == 6);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 6 + "'", int35 == 6);
    }

    @Test
    public void test1938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1938");
        java.io.Reader reader0 = null;
        java.io.Writer writer1 = null;
        java.io.Reader reader4 = null;
        char[] charArray5 = new char[] {};
        int int6 = org.apache.commons.io.IOUtils.length(charArray5);
        java.io.Writer writer7 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray5, writer7);
        int int9 = org.apache.commons.io.IOUtils.read(reader4, charArray5);
        java.io.Writer writer10 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray5, writer10);
        int int12 = org.apache.commons.io.IOUtils.length(charArray5);
        int int13 = org.apache.commons.io.IOUtils.length(charArray5);
        // The following exception was thrown during execution in test generation
        try {
            long long14 = org.apache.commons.io.IOUtils.copyLarge(reader0, writer1, (long) 'a', 0L, charArray5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[], int, int)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test1939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1939");
        java.nio.charset.Charset charset1 = null;
        java.io.InputStream inputStream2 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "", charset1);
        java.util.List<java.lang.String> strList3 = org.apache.commons.io.IOUtils.readLines(inputStream2);
        java.io.OutputStream outputStream5 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList3, "\n", outputStream5);
        java.io.Writer writer8 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList3, "\r\n", writer8);
        java.io.Writer writer11 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList3, "", writer11);
        java.io.OutputStream outputStream14 = null;
        java.nio.charset.Charset charset15 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList3, "", outputStream14, charset15);
        java.io.OutputStream outputStream18 = null;
        java.nio.charset.Charset charset19 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList3, "\r\n", outputStream18, charset19);
        org.junit.Assert.assertNotNull(inputStream2);
        org.junit.Assert.assertNotNull(strList3);
    }

    @Test
    public void test1940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1940");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray5 = new byte[] {};
        int int6 = org.apache.commons.io.IOUtils.length(byteArray5);
        int int7 = org.apache.commons.io.IOUtils.read(inputStream4, byteArray5);
        byte[] byteArray8 = org.apache.commons.io.IOUtils.toByteArray(inputStream4);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer9 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream4, iOExceptionConsumer9);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream4);
        java.io.BufferedInputStream bufferedInputStream13 = org.apache.commons.io.IOUtils.buffer(inputStream4, (int) (byte) 10);
        boolean boolean14 = org.apache.commons.io.IOUtils.contentEquals(inputStream1, inputStream4);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.String> strList16 = org.apache.commons.io.IOUtils.readLines(inputStream1, "\r\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ??");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test1941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1941");
        java.nio.charset.Charset charset1 = null;
        java.io.InputStream inputStream2 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "\r\n", charset1);
        java.io.OutputStream outputStream3 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long6 = org.apache.commons.io.IOUtils.copyLarge(inputStream2, outputStream3, (long) '\\', (long) 4);
            org.junit.Assert.fail("Expected exception of type java.io.EOFException; message: Bytes to skip: 92 actual: 2");
        } catch (java.io.EOFException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream2);
    }

    @Test
    public void test1942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1942");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.util.List<java.lang.String> strList4 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.OutputStream outputStream5 = null;
        long long6 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream5);
        java.io.Writer writer7 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer7);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream11 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray12 = new byte[] {};
        int int13 = org.apache.commons.io.IOUtils.length(byteArray12);
        int int14 = org.apache.commons.io.IOUtils.read(inputStream11, byteArray12);
        byte[] byteArray15 = org.apache.commons.io.IOUtils.toByteArray(inputStream11);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer16 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream11, iOExceptionConsumer16);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream11);
        java.io.BufferedInputStream bufferedInputStream20 = org.apache.commons.io.IOUtils.buffer(inputStream11, (int) (byte) 10);
        java.io.InputStream inputStream22 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream11, (int) (byte) 1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer23 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream11, iOExceptionConsumer23);
        java.io.OutputStream outputStream25 = null;
        java.io.InputStream inputStream27 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray28 = new byte[] {};
        int int29 = org.apache.commons.io.IOUtils.length(byteArray28);
        int int30 = org.apache.commons.io.IOUtils.read(inputStream27, byteArray28);
        byte[] byteArray31 = org.apache.commons.io.IOUtils.toByteArray(inputStream27);
        java.io.InputStream inputStream33 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray34 = new byte[] {};
        int int35 = org.apache.commons.io.IOUtils.length(byteArray34);
        int int36 = org.apache.commons.io.IOUtils.read(inputStream33, byteArray34);
        byte[] byteArray37 = org.apache.commons.io.IOUtils.toByteArray(inputStream33);
        int int38 = org.apache.commons.io.IOUtils.length(byteArray37);
        org.apache.commons.io.IOUtils.readFully(inputStream27, byteArray37);
        long long40 = org.apache.commons.io.IOUtils.copyLarge(inputStream11, outputStream25, byteArray37);
        boolean boolean41 = org.apache.commons.io.IOUtils.contentEquals(inputStream1, inputStream11);
        java.io.BufferedInputStream bufferedInputStream42 = org.apache.commons.io.IOUtils.buffer(inputStream1);
        java.io.InputStream inputStream43 = null;
        byte[] byteArray45 = org.apache.commons.io.IOUtils.toByteArray("");
        int int46 = org.apache.commons.io.IOUtils.read(inputStream43, byteArray45);
        org.apache.commons.io.IOUtils.readFully((java.io.InputStream) bufferedInputStream42, byteArray45);
        java.io.InputStream inputStream48 = org.apache.commons.io.IOUtils.toBufferedInputStream((java.io.InputStream) bufferedInputStream42);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(inputStream11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream20);
        org.junit.Assert.assertNotNull(inputStream22);
        org.junit.Assert.assertNotNull(inputStream27);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(inputStream33);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(bufferedInputStream42);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(inputStream48);
    }

    @Test
    public void test1943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1943");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream3 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1);
        java.io.Writer writer4 = null;
        java.nio.charset.Charset charset5 = null;
        org.apache.commons.io.IOUtils.copy(inputStream3, writer4, charset5);
        org.apache.commons.io.function.IOConsumer<java.io.IOException> iOExceptionIOConsumer7 = null;
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream3, iOExceptionIOConsumer7);
        java.nio.charset.Charset charset9 = null;
        java.util.List<java.lang.String> strList10 = org.apache.commons.io.IOUtils.readLines(inputStream3, charset9);
        java.io.OutputStream outputStream12 = null;
        java.nio.charset.Charset charset13 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList10, "\n", outputStream12, charset13);
        java.io.Writer writer16 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList10, "\r\n", writer16);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream3);
        org.junit.Assert.assertNotNull(strList10);
    }

    @Test
    public void test1944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1944");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.util.List<java.lang.String> strList4 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.Writer writer6 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList4, "\r\n", writer6);
        java.io.Writer writer9 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList4, "\n", writer9);
        java.io.OutputStream outputStream12 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList4, "\n", outputStream12);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(strList4);
    }

    @Test
    public void test1945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1945");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        java.nio.charset.Charset charset5 = null;
        org.apache.commons.io.LineIterator lineIterator6 = org.apache.commons.io.IOUtils.lineIterator(inputStream1, charset5);
        java.io.InputStream inputStream8 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray9 = new byte[] {};
        int int10 = org.apache.commons.io.IOUtils.length(byteArray9);
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray9);
        byte[] byteArray12 = org.apache.commons.io.IOUtils.toByteArray(inputStream8);
        boolean boolean13 = org.apache.commons.io.IOUtils.contentEquals(inputStream1, inputStream8);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.BufferedInputStream bufferedInputStream16 = org.apache.commons.io.IOUtils.buffer(inputStream1, 3);
        java.util.List<java.lang.String> strList17 = org.apache.commons.io.IOUtils.readLines((java.io.InputStream) bufferedInputStream16);
        byte[] byteArray19 = org.apache.commons.io.IOUtils.toByteArray((java.io.InputStream) bufferedInputStream16, 0L);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) bufferedInputStream16);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.String> strList22 = org.apache.commons.io.IOUtils.readLines((java.io.InputStream) bufferedInputStream16, "hi!");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: hi!");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(lineIterator6);
        org.junit.Assert.assertNotNull(inputStream8);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(bufferedInputStream16);
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
    }

    @Test
    public void test1946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1946");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        java.io.Writer writer10 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer10);
        java.util.List<java.lang.String> strList12 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.InputStream inputStream14 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray15 = new byte[] {};
        int int16 = org.apache.commons.io.IOUtils.length(byteArray15);
        int int17 = org.apache.commons.io.IOUtils.read(inputStream14, byteArray15);
        byte[] byteArray18 = org.apache.commons.io.IOUtils.toByteArray(inputStream14);
        byte[] byteArray20 = org.apache.commons.io.IOUtils.toByteArray(inputStream14, (int) (short) 0);
        java.io.BufferedInputStream bufferedInputStream21 = org.apache.commons.io.IOUtils.buffer(inputStream14);
        byte[] byteArray22 = org.apache.commons.io.IOUtils.toByteArray((java.io.InputStream) bufferedInputStream21);
        java.lang.String str23 = org.apache.commons.io.IOUtils.toString(byteArray22);
        int int24 = org.apache.commons.io.IOUtils.length(byteArray22);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray22, (int) '/', (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Range [47, 47 + 10) out of bounds for length 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(strList12);
        org.junit.Assert.assertNotNull(inputStream14);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream21);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
    }

    @Test
    public void test1947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1947");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        java.io.OutputStream outputStream10 = null;
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream10, (long) (short) 0, (-1L));
        char[] charArray14 = org.apache.commons.io.IOUtils.toCharArray(inputStream1);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        org.apache.commons.io.function.IOConsumer<java.io.IOException> iOExceptionIOConsumer16 = null;
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1, iOExceptionIOConsumer16);
        // The following exception was thrown during execution in test generation
        try {
            java.io.BufferedInputStream bufferedInputStream19 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Buffer size <= 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[]");
    }

    @Test
    public void test1948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1948");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream5 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray("");
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray10);
        long long12 = org.apache.commons.io.IOUtils.copyLarge(inputStream4, outputStream5, 0L, 0L, byteArray10);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, byteArray10);
        java.io.BufferedInputStream bufferedInputStream15 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.nio.charset.Charset charset16 = null;
        java.util.List<java.lang.String> strList17 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset16);
        java.io.OutputStream outputStream18 = null;
        long long21 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream18, 0L, (long) 0);
        java.io.BufferedInputStream bufferedInputStream22 = org.apache.commons.io.IOUtils.buffer(inputStream1);
        java.io.OutputStream outputStream23 = null;
        java.io.InputStream inputStream27 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream28 = null;
        java.io.InputStream inputStream31 = null;
        byte[] byteArray33 = org.apache.commons.io.IOUtils.toByteArray("");
        int int34 = org.apache.commons.io.IOUtils.read(inputStream31, byteArray33);
        long long35 = org.apache.commons.io.IOUtils.copyLarge(inputStream27, outputStream28, 0L, 0L, byteArray33);
        java.io.OutputStream outputStream36 = null;
        long long39 = org.apache.commons.io.IOUtils.copyLarge(inputStream27, outputStream36, (long) (short) 0, (-1L));
        char[] charArray40 = org.apache.commons.io.IOUtils.toCharArray(inputStream27);
        long long42 = org.apache.commons.io.IOUtils.skip(inputStream27, (long) (byte) 1);
        java.io.OutputStream outputStream43 = null;
        java.io.InputStream inputStream45 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream46 = null;
        java.io.InputStream inputStream49 = null;
        byte[] byteArray51 = org.apache.commons.io.IOUtils.toByteArray("");
        int int52 = org.apache.commons.io.IOUtils.read(inputStream49, byteArray51);
        long long53 = org.apache.commons.io.IOUtils.copyLarge(inputStream45, outputStream46, 0L, 0L, byteArray51);
        java.io.OutputStream outputStream54 = null;
        long long57 = org.apache.commons.io.IOUtils.copyLarge(inputStream45, outputStream54, (long) (short) 0, (-1L));
        java.util.List<java.lang.String> strList58 = org.apache.commons.io.IOUtils.readLines(inputStream45);
        byte[] byteArray59 = org.apache.commons.io.IOUtils.toByteArray(inputStream45);
        long long60 = org.apache.commons.io.IOUtils.copyLarge(inputStream27, outputStream43, byteArray59);
        // The following exception was thrown during execution in test generation
        try {
            long long61 = org.apache.commons.io.IOUtils.copyLarge((java.io.InputStream) bufferedInputStream22, outputStream23, (long) 5, (long) (byte) 1, byteArray59);
            org.junit.Assert.fail("Expected exception of type java.io.EOFException; message: Bytes to skip: 5 actual: 0");
        } catch (java.io.EOFException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream15);
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream22);
        org.junit.Assert.assertNotNull(inputStream27);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertNotNull(charArray40);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray40), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray40), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray40), "[]");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(inputStream45);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertNotNull(strList58);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[]");
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 0L + "'", long60 == 0L);
    }

    @Test
    public void test1949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1949");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        java.io.BufferedInputStream bufferedInputStream6 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str8 = org.apache.commons.io.IOUtils.toString((java.io.InputStream) bufferedInputStream6, "\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ?");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(bufferedInputStream6);
    }

    @Test
    public void test1950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1950");
        java.io.Reader reader0 = null;
        java.io.Writer writer1 = null;
        java.io.InputStream inputStream5 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray6 = new byte[] {};
        int int7 = org.apache.commons.io.IOUtils.length(byteArray6);
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray6);
        byte[] byteArray9 = org.apache.commons.io.IOUtils.toByteArray(inputStream5);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer10 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream5, iOExceptionConsumer10);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream5);
        java.io.BufferedInputStream bufferedInputStream14 = org.apache.commons.io.IOUtils.buffer(inputStream5, (int) (byte) 10);
        byte[] byteArray15 = null;
        org.apache.commons.io.IOUtils.readFully(inputStream5, byteArray15, (int) '4', 0);
        java.io.OutputStream outputStream19 = null;
        long long21 = org.apache.commons.io.IOUtils.copy(inputStream5, outputStream19, 0);
        char[] charArray22 = org.apache.commons.io.IOUtils.toCharArray(inputStream5);
        java.io.Writer writer23 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray22, writer23);
        // The following exception was thrown during execution in test generation
        try {
            long long25 = org.apache.commons.io.IOUtils.copyLarge(reader0, writer1, (long) (byte) 100, 0L, charArray22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[], int, int)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream14);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray22), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray22), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray22), "[]");
    }

    @Test
    public void test1951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1951");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.nio.charset.Charset charset6 = null;
        java.util.List<java.lang.String> strList7 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset6);
        java.nio.charset.Charset charset8 = null;
        org.apache.commons.io.LineIterator lineIterator9 = org.apache.commons.io.IOUtils.lineIterator(inputStream1, charset8);
        java.io.InputStream inputStream11 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, 6);
        java.io.BufferedInputStream bufferedInputStream13 = org.apache.commons.io.IOUtils.buffer(inputStream11, 3);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer14 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream11, iOExceptionConsumer14);
        char[] charArray16 = org.apache.commons.io.IOUtils.toCharArray(inputStream11);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer17 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream11, iOExceptionConsumer17);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertNotNull(lineIterator9);
        org.junit.Assert.assertNotNull(inputStream11);
        org.junit.Assert.assertNotNull(bufferedInputStream13);
        org.junit.Assert.assertNotNull(charArray16);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray16), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray16), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray16), "[]");
    }

    @Test
    public void test1952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1952");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream5 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray("");
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray10);
        long long12 = org.apache.commons.io.IOUtils.copyLarge(inputStream4, outputStream5, 0L, 0L, byteArray10);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, byteArray10);
        java.io.BufferedInputStream bufferedInputStream15 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        org.apache.commons.io.IOUtils.closeQuietly(inputStream1);
        java.nio.charset.Charset charset17 = null;
        java.util.List<java.lang.String> strList18 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset17);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.io.OutputStream outputStream20 = null;
        int int21 = org.apache.commons.io.IOUtils.copy(inputStream1, outputStream20);
        java.io.InputStream inputStream23 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray24 = new byte[] {};
        int int25 = org.apache.commons.io.IOUtils.length(byteArray24);
        int int26 = org.apache.commons.io.IOUtils.read(inputStream23, byteArray24);
        byte[] byteArray27 = org.apache.commons.io.IOUtils.toByteArray(inputStream23);
        byte[] byteArray29 = org.apache.commons.io.IOUtils.toByteArray(inputStream23, (int) (short) 0);
        byte[] byteArray30 = new byte[] {};
        int int31 = org.apache.commons.io.IOUtils.length(byteArray30);
        org.apache.commons.io.IOUtils.readFully(inputStream23, byteArray30);
        int int33 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray30);
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        int int36 = org.apache.commons.io.IOUtils.read(inputStream34, byteArray35);
        org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray35);
        java.io.OutputStream outputStream38 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long40 = org.apache.commons.io.IOUtils.copy(inputStream1, outputStream38, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: -1");
        } catch (java.lang.NegativeArraySizeException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream15);
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(inputStream23);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
    }

    @Test
    public void test1953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1953");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.util.List<java.lang.String> strList4 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.BufferedInputStream bufferedInputStream5 = org.apache.commons.io.IOUtils.buffer(inputStream1);
        java.io.OutputStream outputStream6 = null;
        long long7 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream6);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream9 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray11 = org.apache.commons.io.IOUtils.readFully(inputStream1, 10);
            org.junit.Assert.fail("Expected exception of type java.io.EOFException; message: Length to read: 10 actual: 0");
        } catch (java.io.EOFException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertNotNull(bufferedInputStream5);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(inputStream9);
    }

    @Test
    public void test1954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1954");
        java.io.Reader reader0 = null;
        java.io.Reader reader1 = null;
        java.io.Writer writer2 = null;
        char[] charArray5 = new char[] {};
        int int6 = org.apache.commons.io.IOUtils.length(charArray5);
        java.io.Writer writer7 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray5, writer7);
        java.io.Writer writer9 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray5, writer9);
        long long11 = org.apache.commons.io.IOUtils.copyLarge(reader1, writer2, 0L, (long) (byte) 100, charArray5);
        int int12 = org.apache.commons.io.IOUtils.read(reader0, charArray5);
        int int13 = org.apache.commons.io.IOUtils.length(charArray5);
        java.io.OutputStream outputStream14 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(charArray5, outputStream14, "hi!");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: hi!");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test1955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1955");
        java.nio.charset.Charset charset1 = null;
        java.io.InputStream inputStream2 = org.apache.commons.io.IOUtils.toInputStream("", charset1);
        java.nio.charset.Charset charset3 = null;
        java.lang.String str4 = org.apache.commons.io.IOUtils.toString(inputStream2, charset3);
        java.nio.charset.Charset charset5 = null;
        char[] charArray6 = org.apache.commons.io.IOUtils.toCharArray(inputStream2, charset5);
        java.io.OutputStream outputStream7 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(charArray6, outputStream7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.OutputStream.write(byte[])\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[]");
    }

    @Test
    public void test1956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1956");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream3 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1);
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream3);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream4);
        java.io.Writer writer6 = null;
        org.apache.commons.io.IOUtils.copy(inputStream4, writer6);
        java.lang.String str8 = org.apache.commons.io.IOUtils.toString(inputStream4);
        java.nio.charset.Charset charset9 = null;
        char[] charArray10 = org.apache.commons.io.IOUtils.toCharArray(inputStream4, charset9);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream3);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[]");
    }

    @Test
    public void test1957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1957");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        org.apache.commons.io.IOUtils.closeQuietly(inputStream1);
        java.io.InputStream inputStream7 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray8 = new byte[] {};
        int int9 = org.apache.commons.io.IOUtils.length(byteArray8);
        int int10 = org.apache.commons.io.IOUtils.read(inputStream7, byteArray8);
        java.lang.String str11 = org.apache.commons.io.IOUtils.toString(byteArray8);
        int int14 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray8, (int) (byte) 10, (int) (short) 0);
        java.io.InputStream inputStream16 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray17 = new byte[] {};
        int int18 = org.apache.commons.io.IOUtils.length(byteArray17);
        int int19 = org.apache.commons.io.IOUtils.read(inputStream16, byteArray17);
        byte[] byteArray20 = org.apache.commons.io.IOUtils.toByteArray(inputStream16);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer21 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream16, iOExceptionConsumer21);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream16);
        java.io.BufferedInputStream bufferedInputStream25 = org.apache.commons.io.IOUtils.buffer(inputStream16, (int) (byte) 10);
        java.io.InputStream inputStream27 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream16, (int) (byte) 1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer28 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream16, iOExceptionConsumer28);
        java.io.OutputStream outputStream30 = null;
        java.io.InputStream inputStream32 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray33 = new byte[] {};
        int int34 = org.apache.commons.io.IOUtils.length(byteArray33);
        int int35 = org.apache.commons.io.IOUtils.read(inputStream32, byteArray33);
        byte[] byteArray36 = org.apache.commons.io.IOUtils.toByteArray(inputStream32);
        java.io.InputStream inputStream38 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray39 = new byte[] {};
        int int40 = org.apache.commons.io.IOUtils.length(byteArray39);
        int int41 = org.apache.commons.io.IOUtils.read(inputStream38, byteArray39);
        byte[] byteArray42 = org.apache.commons.io.IOUtils.toByteArray(inputStream38);
        int int43 = org.apache.commons.io.IOUtils.length(byteArray42);
        org.apache.commons.io.IOUtils.readFully(inputStream32, byteArray42);
        long long45 = org.apache.commons.io.IOUtils.copyLarge(inputStream16, outputStream30, byteArray42);
        byte[] byteArray46 = org.apache.commons.io.IOUtils.toByteArray(inputStream16);
        java.io.InputStream inputStream48 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray49 = org.apache.commons.io.IOUtils.toByteArray(inputStream48);
        java.io.InputStream inputStream51 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray52 = new byte[] {};
        int int53 = org.apache.commons.io.IOUtils.length(byteArray52);
        int int54 = org.apache.commons.io.IOUtils.read(inputStream51, byteArray52);
        byte[] byteArray55 = org.apache.commons.io.IOUtils.toByteArray(inputStream51);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer56 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream51, iOExceptionConsumer56);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream51);
        java.io.BufferedInputStream bufferedInputStream60 = org.apache.commons.io.IOUtils.buffer(inputStream51, (int) (byte) 10);
        boolean boolean61 = org.apache.commons.io.IOUtils.contentEquals(inputStream48, inputStream51);
        java.io.OutputStream outputStream62 = null;
        long long65 = org.apache.commons.io.IOUtils.copyLarge(inputStream48, outputStream62, (long) (short) 0, (long) 2);
        java.io.OutputStream outputStream66 = null;
        int int67 = org.apache.commons.io.IOUtils.copy(inputStream48, outputStream66);
        java.io.OutputStream outputStream68 = null;
        byte[] byteArray69 = new byte[] {};
        int int70 = org.apache.commons.io.IOUtils.length(byteArray69);
        java.io.OutputStream outputStream71 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray69, outputStream71);
        long long73 = org.apache.commons.io.IOUtils.copyLarge(inputStream48, outputStream68, byteArray69);
        org.apache.commons.io.IOUtils.readFully(inputStream16, byteArray69);
        // The following exception was thrown during execution in test generation
        try {
            int int77 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray69, 100, 4);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Range [100, 100 + 4) out of bounds for length 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(inputStream7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(inputStream16);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream25);
        org.junit.Assert.assertNotNull(inputStream27);
        org.junit.Assert.assertNotNull(inputStream32);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertNotNull(inputStream38);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertNotNull(inputStream48);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
        org.junit.Assert.assertNotNull(inputStream51);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 0L + "'", long65 == 0L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 0L + "'", long73 == 0L);
    }

    @Test
    public void test1958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1958");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        java.io.OutputStream outputStream10 = null;
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream10, (long) (short) 0, (-1L));
        char[] charArray14 = org.apache.commons.io.IOUtils.toCharArray(inputStream1);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream17 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray18 = new byte[] {};
        int int19 = org.apache.commons.io.IOUtils.length(byteArray18);
        int int20 = org.apache.commons.io.IOUtils.read(inputStream17, byteArray18);
        byte[] byteArray21 = org.apache.commons.io.IOUtils.toByteArray(inputStream17);
        byte[] byteArray23 = org.apache.commons.io.IOUtils.toByteArray(inputStream17, (int) (short) 0);
        java.io.BufferedInputStream bufferedInputStream24 = org.apache.commons.io.IOUtils.buffer(inputStream17);
        byte[] byteArray25 = org.apache.commons.io.IOUtils.toByteArray((java.io.InputStream) bufferedInputStream24);
        int int26 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray25);
        java.io.InputStream inputStream27 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1);
        long long29 = org.apache.commons.io.IOUtils.skip(inputStream27, (long) 1);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[]");
        org.junit.Assert.assertNotNull(inputStream17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(inputStream27);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
    }

    @Test
    public void test1959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1959");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        byte[] byteArray11 = org.apache.commons.io.IOUtils.toByteArray(inputStream1, (long) 0);
        java.lang.String str12 = org.apache.commons.io.IOUtils.toString(byteArray11);
        java.io.OutputStream outputStream13 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray11, outputStream13);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
    }

    @Test
    public void test1960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1960");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.BufferedInputStream bufferedInputStream10 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        byte[] byteArray11 = null;
        org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray11, (int) '4', 0);
        java.lang.String str15 = org.apache.commons.io.IOUtils.toString(inputStream1);
        java.util.List<java.lang.String> strList16 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.Writer writer18 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList16, "\r\n", writer18);
        java.io.OutputStream outputStream21 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList16, "hi!", outputStream21);
        java.lang.Class<?> wildcardClass23 = strList16.getClass();
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream10);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test1961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1961");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        java.io.InputStream inputStream5 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1);
        java.nio.charset.Charset charset6 = null;
        org.apache.commons.io.LineIterator lineIterator7 = org.apache.commons.io.IOUtils.lineIterator(inputStream5, charset6);
        java.io.InputStream inputStream8 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream5);
        java.io.InputStream inputStream10 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray11 = org.apache.commons.io.IOUtils.toByteArray(inputStream10);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream10);
        java.util.List<java.lang.String> strList13 = org.apache.commons.io.IOUtils.readLines(inputStream10);
        java.io.OutputStream outputStream14 = null;
        long long15 = org.apache.commons.io.IOUtils.copyLarge(inputStream10, outputStream14);
        java.io.Writer writer16 = null;
        org.apache.commons.io.IOUtils.copy(inputStream10, writer16);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream10);
        java.io.InputStream inputStream20 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray21 = new byte[] {};
        int int22 = org.apache.commons.io.IOUtils.length(byteArray21);
        int int23 = org.apache.commons.io.IOUtils.read(inputStream20, byteArray21);
        byte[] byteArray24 = org.apache.commons.io.IOUtils.toByteArray(inputStream20);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer25 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream20, iOExceptionConsumer25);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream20);
        java.io.BufferedInputStream bufferedInputStream29 = org.apache.commons.io.IOUtils.buffer(inputStream20, (int) (byte) 10);
        java.io.InputStream inputStream31 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream20, (int) (byte) 1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer32 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream20, iOExceptionConsumer32);
        java.io.OutputStream outputStream34 = null;
        java.io.InputStream inputStream36 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray37 = new byte[] {};
        int int38 = org.apache.commons.io.IOUtils.length(byteArray37);
        int int39 = org.apache.commons.io.IOUtils.read(inputStream36, byteArray37);
        byte[] byteArray40 = org.apache.commons.io.IOUtils.toByteArray(inputStream36);
        java.io.InputStream inputStream42 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray43 = new byte[] {};
        int int44 = org.apache.commons.io.IOUtils.length(byteArray43);
        int int45 = org.apache.commons.io.IOUtils.read(inputStream42, byteArray43);
        byte[] byteArray46 = org.apache.commons.io.IOUtils.toByteArray(inputStream42);
        int int47 = org.apache.commons.io.IOUtils.length(byteArray46);
        org.apache.commons.io.IOUtils.readFully(inputStream36, byteArray46);
        long long49 = org.apache.commons.io.IOUtils.copyLarge(inputStream20, outputStream34, byteArray46);
        boolean boolean50 = org.apache.commons.io.IOUtils.contentEquals(inputStream10, inputStream20);
        java.io.BufferedInputStream bufferedInputStream52 = org.apache.commons.io.IOUtils.buffer(inputStream10, 5);
        java.io.InputStream inputStream54 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream55 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray60 = org.apache.commons.io.IOUtils.toByteArray("");
        int int61 = org.apache.commons.io.IOUtils.read(inputStream58, byteArray60);
        long long62 = org.apache.commons.io.IOUtils.copyLarge(inputStream54, outputStream55, 0L, 0L, byteArray60);
        java.nio.charset.Charset charset63 = null;
        java.util.List<java.lang.String> strList64 = org.apache.commons.io.IOUtils.readLines(inputStream54, charset63);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream54);
        java.nio.charset.Charset charset66 = null;
        java.lang.String str67 = org.apache.commons.io.IOUtils.toString(inputStream54, charset66);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer68 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream54, iOExceptionConsumer68);
        boolean boolean70 = org.apache.commons.io.IOUtils.contentEquals((java.io.InputStream) bufferedInputStream52, inputStream54);
        java.io.InputStream inputStream72 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream73 = null;
        java.io.InputStream inputStream75 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream76 = null;
        java.io.InputStream inputStream79 = null;
        byte[] byteArray81 = org.apache.commons.io.IOUtils.toByteArray("");
        int int82 = org.apache.commons.io.IOUtils.read(inputStream79, byteArray81);
        long long83 = org.apache.commons.io.IOUtils.copyLarge(inputStream75, outputStream76, 0L, 0L, byteArray81);
        long long84 = org.apache.commons.io.IOUtils.copyLarge(inputStream72, outputStream73, byteArray81);
        java.lang.String str85 = org.apache.commons.io.IOUtils.toString(byteArray81);
        org.apache.commons.io.IOUtils.readFully(inputStream54, byteArray81);
        // The following exception was thrown during execution in test generation
        try {
            int int89 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray81, (int) (byte) -1, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Range [-1, -1 + 1) out of bounds for length 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(inputStream5);
        org.junit.Assert.assertNotNull(lineIterator7);
        org.junit.Assert.assertNotNull(inputStream8);
        org.junit.Assert.assertNotNull(inputStream10);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(inputStream20);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream29);
        org.junit.Assert.assertNotNull(inputStream31);
        org.junit.Assert.assertNotNull(inputStream36);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertNotNull(inputStream42);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(bufferedInputStream52);
        org.junit.Assert.assertNotNull(inputStream54);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 0L + "'", long62 == 0L);
        org.junit.Assert.assertNotNull(strList64);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(inputStream72);
        org.junit.Assert.assertNotNull(inputStream75);
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 0L + "'", long83 == 0L);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 0L + "'", long84 == 0L);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "" + "'", str85, "");
    }

    @Test
    public void test1962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1962");
        java.io.Reader reader0 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long2 = org.apache.commons.io.IOUtils.skip(reader0, (long) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[], int, int)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1963");
        java.io.Reader reader0 = null;
        java.io.Writer writer1 = null;
        long long4 = org.apache.commons.io.IOUtils.copyLarge(reader0, writer1, (long) (byte) 0, 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
    }

    @Test
    public void test1964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1964");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        java.nio.charset.Charset charset10 = null;
        java.util.List<java.lang.String> strList11 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset10);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        byte[] byteArray14 = org.apache.commons.io.IOUtils.toByteArray("");
        org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray14);
        // The following exception was thrown during execution in test generation
        try {
            char[] charArray17 = org.apache.commons.io.IOUtils.toCharArray(inputStream1, "\r\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ??");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
    }

    @Test
    public void test1965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1965");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        java.io.OutputStream outputStream10 = null;
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream10, (long) (short) 0, (-1L));
        java.lang.String str14 = org.apache.commons.io.IOUtils.toString(inputStream1);
        java.io.BufferedInputStream bufferedInputStream16 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 100);
        java.io.InputStream inputStream18 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, (int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.skipFully(inputStream1, (long) 5);
            org.junit.Assert.fail("Expected exception of type java.io.EOFException; message: Bytes to skip: 5 actual: 0");
        } catch (java.io.EOFException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(bufferedInputStream16);
        org.junit.Assert.assertNotNull(inputStream18);
    }

    @Test
    public void test1966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1966");
        java.io.Reader reader0 = null;
        java.io.Reader reader1 = null;
        java.io.Writer writer2 = null;
        char[] charArray5 = new char[] {};
        int int6 = org.apache.commons.io.IOUtils.length(charArray5);
        java.io.Writer writer7 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray5, writer7);
        java.io.Writer writer9 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray5, writer9);
        long long11 = org.apache.commons.io.IOUtils.copyLarge(reader1, writer2, 0L, (long) (byte) 100, charArray5);
        int int12 = org.apache.commons.io.IOUtils.read(reader0, charArray5);
        java.io.Writer writer13 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray5, writer13);
        java.io.Writer writer15 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray5, writer15);
        java.io.OutputStream outputStream17 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(charArray5, outputStream17, "hi!");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: hi!");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test1967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1967");
        java.io.InputStream inputStream0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.InputStream inputStream2 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream0, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.InputStream.read(byte[], int, int)\" because \"in\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1968");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        java.nio.charset.Charset charset5 = null;
        org.apache.commons.io.LineIterator lineIterator6 = org.apache.commons.io.IOUtils.lineIterator(inputStream1, charset5);
        java.io.InputStream inputStream8 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray9 = new byte[] {};
        int int10 = org.apache.commons.io.IOUtils.length(byteArray9);
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray9);
        byte[] byteArray12 = org.apache.commons.io.IOUtils.toByteArray(inputStream8);
        boolean boolean13 = org.apache.commons.io.IOUtils.contentEquals(inputStream1, inputStream8);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.BufferedInputStream bufferedInputStream16 = org.apache.commons.io.IOUtils.buffer(inputStream1, 3);
        char[] charArray17 = org.apache.commons.io.IOUtils.toCharArray((java.io.InputStream) bufferedInputStream16);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(lineIterator6);
        org.junit.Assert.assertNotNull(inputStream8);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(bufferedInputStream16);
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[]");
    }

    @Test
    public void test1969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1969");
        java.io.Reader reader0 = null;
        java.io.InputStream inputStream2 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray3 = new byte[] {};
        int int4 = org.apache.commons.io.IOUtils.length(byteArray3);
        int int5 = org.apache.commons.io.IOUtils.read(inputStream2, byteArray3);
        byte[] byteArray6 = org.apache.commons.io.IOUtils.toByteArray(inputStream2);
        byte[] byteArray8 = org.apache.commons.io.IOUtils.toByteArray(inputStream2, (int) (short) 0);
        long long10 = org.apache.commons.io.IOUtils.skip(inputStream2, 100L);
        java.io.InputStream inputStream12 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray13 = new byte[] {};
        int int14 = org.apache.commons.io.IOUtils.length(byteArray13);
        int int15 = org.apache.commons.io.IOUtils.read(inputStream12, byteArray13);
        byte[] byteArray16 = org.apache.commons.io.IOUtils.toByteArray(inputStream12);
        byte[] byteArray18 = org.apache.commons.io.IOUtils.toByteArray(inputStream12, (int) (short) 0);
        org.apache.commons.io.IOUtils.readFully(inputStream2, byteArray18);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream2);
        java.nio.charset.Charset charset21 = null;
        char[] charArray22 = org.apache.commons.io.IOUtils.toCharArray(inputStream2, charset21);
        int int23 = org.apache.commons.io.IOUtils.read(reader0, charArray22);
        org.junit.Assert.assertNotNull(inputStream2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(inputStream12);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray22), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray22), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray22), "[]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
    }

    @Test
    public void test1970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1970");
        java.io.Reader reader0 = null;
        java.io.Writer writer1 = null;
        java.io.InputStream inputStream3 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream4 = null;
        java.io.InputStream inputStream6 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream7 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray12 = org.apache.commons.io.IOUtils.toByteArray("");
        int int13 = org.apache.commons.io.IOUtils.read(inputStream10, byteArray12);
        long long14 = org.apache.commons.io.IOUtils.copyLarge(inputStream6, outputStream7, 0L, 0L, byteArray12);
        long long15 = org.apache.commons.io.IOUtils.copyLarge(inputStream3, outputStream4, byteArray12);
        java.io.BufferedInputStream bufferedInputStream17 = org.apache.commons.io.IOUtils.buffer(inputStream3, (int) (byte) 10);
        java.nio.charset.Charset charset18 = null;
        java.util.List<java.lang.String> strList19 = org.apache.commons.io.IOUtils.readLines(inputStream3, charset18);
        java.io.OutputStream outputStream20 = null;
        long long23 = org.apache.commons.io.IOUtils.copyLarge(inputStream3, outputStream20, 0L, (long) 0);
        java.nio.charset.Charset charset24 = null;
        char[] charArray25 = org.apache.commons.io.IOUtils.toCharArray(inputStream3, charset24);
        java.io.Writer writer26 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray25, writer26);
        java.io.Writer writer28 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray25, writer28);
        int int30 = org.apache.commons.io.IOUtils.length(charArray25);
        // The following exception was thrown during execution in test generation
        try {
            long long31 = org.apache.commons.io.IOUtils.copyLarge(reader0, writer1, charArray25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[])\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream3);
        org.junit.Assert.assertNotNull(inputStream6);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream17);
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
    }

    @Test
    public void test1971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1971");
        java.io.Reader reader0 = null;
        char[] charArray1 = new char[] {};
        int int2 = org.apache.commons.io.IOUtils.length(charArray1);
        int int3 = org.apache.commons.io.IOUtils.read(reader0, charArray1);
        java.io.OutputStream outputStream4 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(charArray1, outputStream4, "hi!");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: hi!");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray1);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray1), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray1), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray1), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test1972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1972");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.BufferedInputStream bufferedInputStream10 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        org.apache.commons.io.function.IOConsumer<java.io.IOException> iOExceptionIOConsumer11 = null;
        org.apache.commons.io.IOUtils.close((java.io.Closeable) bufferedInputStream10, iOExceptionIOConsumer11);
        java.nio.charset.Charset charset13 = null;
        org.apache.commons.io.LineIterator lineIterator14 = org.apache.commons.io.IOUtils.lineIterator((java.io.InputStream) bufferedInputStream10, charset13);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.InputStream) bufferedInputStream10);
        java.io.InputStream inputStream17 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray18 = new byte[] {};
        int int19 = org.apache.commons.io.IOUtils.length(byteArray18);
        int int20 = org.apache.commons.io.IOUtils.read(inputStream17, byteArray18);
        byte[] byteArray21 = org.apache.commons.io.IOUtils.toByteArray(inputStream17);
        byte[] byteArray23 = org.apache.commons.io.IOUtils.toByteArray(inputStream17, (int) (short) 0);
        byte[] byteArray24 = new byte[] {};
        int int25 = org.apache.commons.io.IOUtils.length(byteArray24);
        org.apache.commons.io.IOUtils.readFully(inputStream17, byteArray24);
        int int29 = org.apache.commons.io.IOUtils.read((java.io.InputStream) bufferedInputStream10, byteArray24, 1, (int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            char[] charArray30 = org.apache.commons.io.IOUtils.toCharArray((java.io.InputStream) bufferedInputStream10);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Stream closed");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream10);
        org.junit.Assert.assertNotNull(lineIterator14);
        org.junit.Assert.assertNotNull(inputStream17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
    }

    @Test
    public void test1973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1973");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.io.OutputStream outputStream4 = null;
        long long5 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream4);
        // The following exception was thrown during execution in test generation
        try {
            char[] charArray7 = org.apache.commons.io.IOUtils.toCharArray(inputStream1, "\r\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ??");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
    }

    @Test
    public void test1974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1974");
        java.io.Reader reader0 = null;
        java.io.Writer writer1 = null;
        char[] charArray4 = new char[] {};
        java.io.Writer writer5 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray4, writer5);
        int int7 = org.apache.commons.io.IOUtils.length(charArray4);
        // The following exception was thrown during execution in test generation
        try {
            long long8 = org.apache.commons.io.IOUtils.copyLarge(reader0, writer1, (long) '\\', 100L, charArray4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[], int, int)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test1975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1975");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.List<java.lang.String> strList3 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        long long5 = org.apache.commons.io.IOUtils.skip(inputStream1, (long) '/');
        java.nio.charset.Charset charset6 = null;
        java.lang.String str7 = org.apache.commons.io.IOUtils.toString(inputStream1, charset6);
        byte[] byteArray8 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.LineIterator lineIterator10 = org.apache.commons.io.IOUtils.lineIterator(inputStream1, "\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ?");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(strList3);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
    }

    @Test
    public void test1976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1976");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        java.io.BufferedInputStream bufferedInputStream6 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) ' ');
        java.io.InputStream inputStream8 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, 4);
        org.apache.commons.io.IOUtils.closeQuietly(inputStream8);
        java.io.InputStream inputStream11 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream11);
        java.io.InputStream inputStream13 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream11);
        java.io.InputStream inputStream14 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream13);
        java.io.BufferedInputStream bufferedInputStream16 = org.apache.commons.io.IOUtils.buffer(inputStream14, 3);
        java.io.OutputStream outputStream17 = null;
        long long18 = org.apache.commons.io.IOUtils.copyLarge(inputStream14, outputStream17);
        boolean boolean19 = org.apache.commons.io.IOUtils.contentEquals(inputStream8, inputStream14);
        java.io.InputStream inputStream21 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream21);
        java.io.InputStream inputStream24 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray25 = org.apache.commons.io.IOUtils.toByteArray(inputStream24);
        java.io.InputStream inputStream27 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray28 = new byte[] {};
        int int29 = org.apache.commons.io.IOUtils.length(byteArray28);
        int int30 = org.apache.commons.io.IOUtils.read(inputStream27, byteArray28);
        byte[] byteArray31 = org.apache.commons.io.IOUtils.toByteArray(inputStream27);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer32 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream27, iOExceptionConsumer32);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream27);
        java.io.BufferedInputStream bufferedInputStream36 = org.apache.commons.io.IOUtils.buffer(inputStream27, (int) (byte) 10);
        boolean boolean37 = org.apache.commons.io.IOUtils.contentEquals(inputStream24, inputStream27);
        java.io.InputStream inputStream39 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray40 = new byte[] {};
        int int41 = org.apache.commons.io.IOUtils.length(byteArray40);
        int int42 = org.apache.commons.io.IOUtils.read(inputStream39, byteArray40);
        byte[] byteArray43 = org.apache.commons.io.IOUtils.toByteArray(inputStream39);
        byte[] byteArray45 = org.apache.commons.io.IOUtils.toByteArray(inputStream39, (int) (short) 0);
        long long47 = org.apache.commons.io.IOUtils.skip(inputStream39, 100L);
        java.io.InputStream inputStream48 = null;
        java.io.InputStream inputStream49 = null;
        java.io.OutputStream outputStream50 = null;
        byte[] byteArray53 = new byte[] {};
        int int54 = org.apache.commons.io.IOUtils.length(byteArray53);
        java.io.OutputStream outputStream55 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray53, outputStream55);
        long long57 = org.apache.commons.io.IOUtils.copyLarge(inputStream49, outputStream50, 0L, (long) (byte) -1, byteArray53);
        java.io.OutputStream outputStream58 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray53, outputStream58);
        org.apache.commons.io.IOUtils.readFully(inputStream48, byteArray53);
        int int61 = org.apache.commons.io.IOUtils.read(inputStream39, byteArray53);
        int int62 = org.apache.commons.io.IOUtils.read(inputStream27, byteArray53);
        int int65 = org.apache.commons.io.IOUtils.read(inputStream21, byteArray53, 1, (int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.readFully(inputStream8, byteArray53, 100, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Range [100, 100 + 100) out of bounds for length 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(bufferedInputStream6);
        org.junit.Assert.assertNotNull(inputStream8);
        org.junit.Assert.assertNotNull(inputStream11);
        org.junit.Assert.assertNotNull(inputStream13);
        org.junit.Assert.assertNotNull(inputStream14);
        org.junit.Assert.assertNotNull(bufferedInputStream16);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(inputStream21);
        org.junit.Assert.assertNotNull(inputStream24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertNotNull(inputStream27);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(inputStream39);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
    }

    @Test
    public void test1977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1977");
        java.io.Reader reader0 = null;
        java.io.Writer writer1 = null;
        char[] charArray4 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long5 = org.apache.commons.io.IOUtils.copyLarge(reader0, writer1, (long) 2, (long) '/', charArray4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[], int, int)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1978");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, 0L, 0L, byteArray7);
        java.nio.charset.Charset charset10 = null;
        java.util.List<java.lang.String> strList11 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset10);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.nio.charset.Charset charset13 = null;
        java.lang.String str14 = org.apache.commons.io.IOUtils.toString(inputStream1, charset13);
        java.io.OutputStream outputStream15 = null;
        java.io.InputStream inputStream16 = null;
        java.io.OutputStream outputStream17 = null;
        byte[] byteArray20 = new byte[] {};
        int int21 = org.apache.commons.io.IOUtils.length(byteArray20);
        java.io.OutputStream outputStream22 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray20, outputStream22);
        long long24 = org.apache.commons.io.IOUtils.copyLarge(inputStream16, outputStream17, 0L, (long) (byte) -1, byteArray20);
        long long25 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream15, byteArray20);
        java.lang.Class<?> wildcardClass26 = inputStream1.getClass();
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test1979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1979");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray(inputStream1, (int) (short) 0);
        java.io.BufferedInputStream bufferedInputStream8 = org.apache.commons.io.IOUtils.buffer(inputStream1);
        byte[] byteArray9 = org.apache.commons.io.IOUtils.toByteArray((java.io.InputStream) bufferedInputStream8);
        java.io.OutputStream outputStream10 = null;
        long long12 = org.apache.commons.io.IOUtils.copy((java.io.InputStream) bufferedInputStream8, outputStream10, 10);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream8);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
    }

    @Test
    public void test1980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1980");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.BufferedInputStream bufferedInputStream3 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) ' ');
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer4 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer4);
        java.io.OutputStream outputStream6 = null;
        long long9 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream6, (long) (short) 0, (long) (byte) 1);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(bufferedInputStream3);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
    }

    @Test
    public void test1981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1981");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.util.List<java.lang.String> strList4 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.OutputStream outputStream5 = null;
        long long6 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream5);
        java.io.Writer writer7 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer7);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream11 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray12 = new byte[] {};
        int int13 = org.apache.commons.io.IOUtils.length(byteArray12);
        int int14 = org.apache.commons.io.IOUtils.read(inputStream11, byteArray12);
        byte[] byteArray15 = org.apache.commons.io.IOUtils.toByteArray(inputStream11);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer16 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream11, iOExceptionConsumer16);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream11);
        java.io.BufferedInputStream bufferedInputStream20 = org.apache.commons.io.IOUtils.buffer(inputStream11, (int) (byte) 10);
        java.io.InputStream inputStream22 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream11, (int) (byte) 1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer23 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream11, iOExceptionConsumer23);
        java.io.OutputStream outputStream25 = null;
        java.io.InputStream inputStream27 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray28 = new byte[] {};
        int int29 = org.apache.commons.io.IOUtils.length(byteArray28);
        int int30 = org.apache.commons.io.IOUtils.read(inputStream27, byteArray28);
        byte[] byteArray31 = org.apache.commons.io.IOUtils.toByteArray(inputStream27);
        java.io.InputStream inputStream33 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray34 = new byte[] {};
        int int35 = org.apache.commons.io.IOUtils.length(byteArray34);
        int int36 = org.apache.commons.io.IOUtils.read(inputStream33, byteArray34);
        byte[] byteArray37 = org.apache.commons.io.IOUtils.toByteArray(inputStream33);
        int int38 = org.apache.commons.io.IOUtils.length(byteArray37);
        org.apache.commons.io.IOUtils.readFully(inputStream27, byteArray37);
        long long40 = org.apache.commons.io.IOUtils.copyLarge(inputStream11, outputStream25, byteArray37);
        boolean boolean41 = org.apache.commons.io.IOUtils.contentEquals(inputStream1, inputStream11);
        java.io.BufferedInputStream bufferedInputStream43 = org.apache.commons.io.IOUtils.buffer(inputStream1, 5);
        java.io.InputStream inputStream45 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream46 = null;
        java.io.InputStream inputStream49 = null;
        byte[] byteArray51 = org.apache.commons.io.IOUtils.toByteArray("");
        int int52 = org.apache.commons.io.IOUtils.read(inputStream49, byteArray51);
        long long53 = org.apache.commons.io.IOUtils.copyLarge(inputStream45, outputStream46, 0L, 0L, byteArray51);
        java.nio.charset.Charset charset54 = null;
        java.util.List<java.lang.String> strList55 = org.apache.commons.io.IOUtils.readLines(inputStream45, charset54);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream45);
        java.nio.charset.Charset charset57 = null;
        java.lang.String str58 = org.apache.commons.io.IOUtils.toString(inputStream45, charset57);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer59 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream45, iOExceptionConsumer59);
        boolean boolean61 = org.apache.commons.io.IOUtils.contentEquals((java.io.InputStream) bufferedInputStream43, inputStream45);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.InputStream) bufferedInputStream43);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(inputStream11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream20);
        org.junit.Assert.assertNotNull(inputStream22);
        org.junit.Assert.assertNotNull(inputStream27);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(inputStream33);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(bufferedInputStream43);
        org.junit.Assert.assertNotNull(inputStream45);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertNotNull(strList55);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
    }

    @Test
    public void test1982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1982");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.BufferedInputStream bufferedInputStream10 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.io.InputStream inputStream12 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, (int) (byte) 1);
        java.io.OutputStream outputStream13 = null;
        int int14 = org.apache.commons.io.IOUtils.copy(inputStream12, outputStream13);
        java.io.BufferedInputStream bufferedInputStream16 = org.apache.commons.io.IOUtils.buffer(inputStream12, (int) (byte) 10);
        java.nio.charset.Charset charset17 = null;
        java.util.List<java.lang.String> strList18 = org.apache.commons.io.IOUtils.readLines(inputStream12, charset17);
        java.io.OutputStream outputStream20 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList18, "", outputStream20);
        java.io.OutputStream outputStream23 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList18, "", outputStream23);
        java.io.OutputStream outputStream26 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList18, "hi!", outputStream26);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream10);
        org.junit.Assert.assertNotNull(inputStream12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(bufferedInputStream16);
        org.junit.Assert.assertNotNull(strList18);
    }

    @Test
    public void test1983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1983");
        java.io.Reader reader0 = null;
        java.nio.charset.Charset charset2 = null;
        java.io.InputStream inputStream3 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "", charset2);
        java.io.OutputStream outputStream4 = null;
        java.io.InputStream inputStream6 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream7 = null;
        java.io.InputStream inputStream9 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream10 = null;
        java.io.InputStream inputStream13 = null;
        byte[] byteArray15 = org.apache.commons.io.IOUtils.toByteArray("");
        int int16 = org.apache.commons.io.IOUtils.read(inputStream13, byteArray15);
        long long17 = org.apache.commons.io.IOUtils.copyLarge(inputStream9, outputStream10, 0L, 0L, byteArray15);
        long long18 = org.apache.commons.io.IOUtils.copyLarge(inputStream6, outputStream7, byteArray15);
        java.io.BufferedInputStream bufferedInputStream20 = org.apache.commons.io.IOUtils.buffer(inputStream6, (int) (byte) 10);
        java.io.InputStream inputStream22 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray23 = org.apache.commons.io.IOUtils.toByteArray(inputStream22);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream22);
        java.io.InputStream inputStream26 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream27 = null;
        java.io.InputStream inputStream30 = null;
        byte[] byteArray32 = org.apache.commons.io.IOUtils.toByteArray("");
        int int33 = org.apache.commons.io.IOUtils.read(inputStream30, byteArray32);
        long long34 = org.apache.commons.io.IOUtils.copyLarge(inputStream26, outputStream27, 0L, 0L, byteArray32);
        java.nio.charset.Charset charset35 = null;
        java.util.List<java.lang.String> strList36 = org.apache.commons.io.IOUtils.readLines(inputStream26, charset35);
        java.io.InputStream inputStream38 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream39 = null;
        java.io.InputStream inputStream42 = null;
        byte[] byteArray44 = org.apache.commons.io.IOUtils.toByteArray("");
        int int45 = org.apache.commons.io.IOUtils.read(inputStream42, byteArray44);
        long long46 = org.apache.commons.io.IOUtils.copyLarge(inputStream38, outputStream39, 0L, 0L, byteArray44);
        java.nio.charset.Charset charset47 = null;
        java.util.List<java.lang.String> strList48 = org.apache.commons.io.IOUtils.readLines(inputStream38, charset47);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream38);
        boolean boolean50 = org.apache.commons.io.IOUtils.contentEquals(inputStream26, inputStream38);
        java.io.OutputStream outputStream51 = null;
        java.io.InputStream inputStream53 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream54 = null;
        java.io.InputStream inputStream57 = null;
        byte[] byteArray59 = org.apache.commons.io.IOUtils.toByteArray("");
        int int60 = org.apache.commons.io.IOUtils.read(inputStream57, byteArray59);
        long long61 = org.apache.commons.io.IOUtils.copyLarge(inputStream53, outputStream54, 0L, 0L, byteArray59);
        long long62 = org.apache.commons.io.IOUtils.copyLarge(inputStream38, outputStream51, byteArray59);
        org.apache.commons.io.IOUtils.readFully(inputStream22, byteArray59);
        org.apache.commons.io.IOUtils.readFully(inputStream6, byteArray59);
        int int65 = org.apache.commons.io.IOUtils.length(byteArray59);
        long long66 = org.apache.commons.io.IOUtils.copyLarge(inputStream3, outputStream4, byteArray59);
        java.nio.charset.Charset charset67 = null;
        char[] charArray68 = org.apache.commons.io.IOUtils.toCharArray(inputStream3, charset67);
        // The following exception was thrown during execution in test generation
        try {
            int int71 = org.apache.commons.io.IOUtils.read(reader0, charArray68, (int) '#', 5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[], int, int)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream3);
        org.junit.Assert.assertNotNull(inputStream6);
        org.junit.Assert.assertNotNull(inputStream9);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream20);
        org.junit.Assert.assertNotNull(inputStream22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertNotNull(inputStream26);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(strList36);
        org.junit.Assert.assertNotNull(inputStream38);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertNotNull(strList48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(inputStream53);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 0L + "'", long62 == 0L);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 0L + "'", long66 == 0L);
        org.junit.Assert.assertNotNull(charArray68);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray68), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray68), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray68), "[]");
    }

    @Test
    public void test1984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1984");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.BufferedInputStream bufferedInputStream10 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        byte[] byteArray11 = null;
        org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray11, (int) '4', 0);
        java.io.OutputStream outputStream15 = null;
        long long16 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream15);
        java.io.OutputStream outputStream17 = null;
        long long19 = org.apache.commons.io.IOUtils.copy(inputStream1, outputStream17, (int) (short) 100);
        java.nio.charset.Charset charset20 = null;
        char[] charArray21 = org.apache.commons.io.IOUtils.toCharArray(inputStream1, charset20);
        java.io.Writer writer22 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(charArray21, writer22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Writer.write(char[])\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream10);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[]");
    }

    @Test
    public void test1985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1985");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        java.io.BufferedInputStream bufferedInputStream6 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) ' ');
        java.io.InputStream inputStream8 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, 4);
        char[] charArray9 = org.apache.commons.io.IOUtils.toCharArray(inputStream8);
        int int10 = org.apache.commons.io.IOUtils.length(charArray9);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(bufferedInputStream6);
        org.junit.Assert.assertNotNull(inputStream8);
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test1986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1986");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.util.List<java.lang.String> strList4 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.BufferedInputStream bufferedInputStream5 = org.apache.commons.io.IOUtils.buffer(inputStream1);
        java.io.OutputStream outputStream6 = null;
        long long7 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream6);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream9 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.String> strList11 = org.apache.commons.io.IOUtils.readLines(inputStream9, "hi!");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: hi!");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertNotNull(bufferedInputStream5);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(inputStream9);
    }

    @Test
    public void test1987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1987");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream5 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray("");
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray10);
        long long12 = org.apache.commons.io.IOUtils.copyLarge(inputStream4, outputStream5, 0L, 0L, byteArray10);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, byteArray10);
        java.io.BufferedInputStream bufferedInputStream15 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        org.apache.commons.io.IOUtils.closeQuietly(inputStream1);
        java.nio.charset.Charset charset17 = null;
        java.util.List<java.lang.String> strList18 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset17);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream20 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1);
        // The following exception was thrown during execution in test generation
        try {
            char[] charArray22 = org.apache.commons.io.IOUtils.toCharArray(inputStream1, "\r\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ??");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream15);
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertNotNull(inputStream20);
    }

    @Test
    public void test1988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1988");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.io.InputStream inputStream7 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, (int) (byte) 0);
        byte[] byteArray9 = org.apache.commons.io.IOUtils.toByteArray("hi!");
        int int10 = org.apache.commons.io.IOUtils.read(inputStream7, byteArray9);
        java.io.Writer writer11 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.copy(inputStream7, writer11, "\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ?");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(inputStream7);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[104, 105, 33]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test1989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1989");
        java.io.Reader reader0 = null;
        char[] charArray1 = new char[] {};
        int int2 = org.apache.commons.io.IOUtils.length(charArray1);
        org.apache.commons.io.IOUtils.readFully(reader0, charArray1);
        int int4 = org.apache.commons.io.IOUtils.length(charArray1);
        java.io.Writer writer5 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray1, writer5);
        java.io.Writer writer7 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.write(charArray1, writer7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Writer.write(char[])\" because \"output\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray1);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray1), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray1), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray1), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test1990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1990");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream3 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1);
        java.lang.String str4 = org.apache.commons.io.IOUtils.toString(inputStream1);
        java.io.InputStream inputStream5 = null;
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray("");
        int int8 = org.apache.commons.io.IOUtils.read(inputStream5, byteArray7);
        org.apache.commons.io.IOUtils.readFully(inputStream1, byteArray7);
        long long11 = org.apache.commons.io.IOUtils.skip(inputStream1, (long) (short) 100);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
    }

    @Test
    public void test1991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1991");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream2 = null;
        java.io.InputStream inputStream4 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream5 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray10 = org.apache.commons.io.IOUtils.toByteArray("");
        int int11 = org.apache.commons.io.IOUtils.read(inputStream8, byteArray10);
        long long12 = org.apache.commons.io.IOUtils.copyLarge(inputStream4, outputStream5, 0L, 0L, byteArray10);
        long long13 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream2, byteArray10);
        java.io.BufferedInputStream bufferedInputStream15 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.nio.charset.Charset charset16 = null;
        java.util.List<java.lang.String> strList17 = org.apache.commons.io.IOUtils.readLines(inputStream1, charset16);
        java.io.OutputStream outputStream18 = null;
        long long21 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream18, 0L, (long) 0);
        java.io.OutputStream outputStream22 = null;
        long long25 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream22, (long) (short) -1, (long) 10);
        java.lang.String str26 = org.apache.commons.io.IOUtils.toString(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly(inputStream1);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        byte[] byteArray30 = org.apache.commons.io.IOUtils.toByteArray(inputStream1, (long) (byte) 0);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(bufferedInputStream15);
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
    }

    @Test
    public void test1992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1992");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.BufferedInputStream bufferedInputStream10 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.io.InputStream inputStream12 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, (int) (byte) 1);
        java.io.OutputStream outputStream13 = null;
        int int14 = org.apache.commons.io.IOUtils.copy(inputStream12, outputStream13);
        java.io.BufferedInputStream bufferedInputStream16 = org.apache.commons.io.IOUtils.buffer(inputStream12, (int) (byte) 10);
        java.io.InputStream inputStream18 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray19 = new byte[] {};
        int int20 = org.apache.commons.io.IOUtils.length(byteArray19);
        int int21 = org.apache.commons.io.IOUtils.read(inputStream18, byteArray19);
        byte[] byteArray22 = org.apache.commons.io.IOUtils.toByteArray(inputStream18);
        byte[] byteArray24 = org.apache.commons.io.IOUtils.toByteArray(inputStream18, (int) (short) 0);
        long long26 = org.apache.commons.io.IOUtils.skip(inputStream18, 100L);
        java.io.InputStream inputStream28 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray29 = org.apache.commons.io.IOUtils.toByteArray(inputStream28);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream28);
        java.util.List<java.lang.String> strList31 = org.apache.commons.io.IOUtils.readLines(inputStream28);
        java.io.OutputStream outputStream32 = null;
        long long33 = org.apache.commons.io.IOUtils.copyLarge(inputStream28, outputStream32);
        java.io.OutputStream outputStream34 = null;
        java.io.InputStream inputStream38 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray39 = new byte[] {};
        int int40 = org.apache.commons.io.IOUtils.length(byteArray39);
        int int41 = org.apache.commons.io.IOUtils.read(inputStream38, byteArray39);
        long long42 = org.apache.commons.io.IOUtils.copyLarge(inputStream28, outputStream34, (-1L), 1L, byteArray39);
        int int43 = org.apache.commons.io.IOUtils.read(inputStream18, byteArray39);
        org.apache.commons.io.IOUtils.readFully((java.io.InputStream) bufferedInputStream16, byteArray39);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray46 = org.apache.commons.io.IOUtils.toByteArray((java.io.InputStream) bufferedInputStream16, (int) '\\');
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Unexpected read size. current: 0, expected: 92");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream10);
        org.junit.Assert.assertNotNull(inputStream12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(bufferedInputStream16);
        org.junit.Assert.assertNotNull(inputStream18);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(inputStream28);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(strList31);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertNotNull(inputStream38);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
    }

    @Test
    public void test1993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1993");
        java.io.Closeable closeable0 = null;
        java.io.Closeable[] closeableArray1 = new java.io.Closeable[] { closeable0 };
        org.apache.commons.io.IOUtils.closeQuietly(closeableArray1);
        org.apache.commons.io.IOUtils.closeQuietly(closeableArray1);
        org.apache.commons.io.IOUtils.closeQuietly(closeableArray1);
        org.apache.commons.io.IOUtils.closeQuietly(closeableArray1);
        int int6 = org.apache.commons.io.IOUtils.length((java.lang.Object[]) closeableArray1);
        int int7 = org.apache.commons.io.IOUtils.length((java.lang.Object[]) closeableArray1);
        org.apache.commons.io.IOUtils.closeQuietly(closeableArray1);
        int int9 = org.apache.commons.io.IOUtils.length((java.lang.Object[]) closeableArray1);
        org.apache.commons.io.IOUtils.closeQuietly(closeableArray1);
        int int11 = org.apache.commons.io.IOUtils.length((java.lang.Object[]) closeableArray1);
        int int12 = org.apache.commons.io.IOUtils.length((java.lang.Object[]) closeableArray1);
        org.apache.commons.io.IOUtils.closeQuietly(closeableArray1);
        int int14 = org.apache.commons.io.IOUtils.length((java.lang.Object[]) closeableArray1);
        org.junit.Assert.assertNotNull(closeableArray1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
    }

    @Test
    public void test1994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1994");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.BufferedInputStream bufferedInputStream10 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.io.InputStream inputStream12 = org.apache.commons.io.IOUtils.toBufferedInputStream((java.io.InputStream) bufferedInputStream10, (int) '#');
        java.nio.charset.Charset charset13 = null;
        java.lang.String str14 = org.apache.commons.io.IOUtils.toString((java.io.InputStream) bufferedInputStream10, charset13);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray16 = org.apache.commons.io.IOUtils.readFully((java.io.InputStream) bufferedInputStream10, (int) '/');
            org.junit.Assert.fail("Expected exception of type java.io.EOFException; message: Length to read: 47 actual: 0");
        } catch (java.io.EOFException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream10);
        org.junit.Assert.assertNotNull(inputStream12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
    }

    @Test
    public void test1995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1995");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.util.List<java.lang.String> strList4 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.Writer writer6 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList4, "\r\n", writer6);
        java.io.Writer writer9 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList4, "\n", writer9);
        java.io.Writer writer12 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList4, "", writer12);
        java.io.OutputStream outputStream15 = null;
        java.nio.charset.Charset charset16 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList4, "\n", outputStream15, charset16);
        java.io.OutputStream outputStream19 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList4, "\r\n", outputStream19);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(strList4);
    }

    @Test
    public void test1996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1996");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.BufferedInputStream bufferedInputStream10 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.io.InputStream inputStream12 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, (int) (byte) 1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer13 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer13);
        java.io.OutputStream outputStream15 = null;
        java.io.InputStream inputStream17 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray18 = new byte[] {};
        int int19 = org.apache.commons.io.IOUtils.length(byteArray18);
        int int20 = org.apache.commons.io.IOUtils.read(inputStream17, byteArray18);
        byte[] byteArray21 = org.apache.commons.io.IOUtils.toByteArray(inputStream17);
        java.io.InputStream inputStream23 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray24 = new byte[] {};
        int int25 = org.apache.commons.io.IOUtils.length(byteArray24);
        int int26 = org.apache.commons.io.IOUtils.read(inputStream23, byteArray24);
        byte[] byteArray27 = org.apache.commons.io.IOUtils.toByteArray(inputStream23);
        int int28 = org.apache.commons.io.IOUtils.length(byteArray27);
        org.apache.commons.io.IOUtils.readFully(inputStream17, byteArray27);
        long long30 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream15, byteArray27);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str32 = org.apache.commons.io.IOUtils.toString(byteArray27, "");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream10);
        org.junit.Assert.assertNotNull(inputStream12);
        org.junit.Assert.assertNotNull(inputStream17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertNotNull(inputStream23);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
    }

    @Test
    public void test1997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1997");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1);
        java.util.List<java.lang.String> strList4 = org.apache.commons.io.IOUtils.readLines(inputStream1);
        java.io.OutputStream outputStream5 = null;
        long long6 = org.apache.commons.io.IOUtils.copyLarge(inputStream1, outputStream5);
        java.io.Writer writer7 = null;
        org.apache.commons.io.IOUtils.copy(inputStream1, writer7);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.InputStream inputStream11 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray12 = new byte[] {};
        int int13 = org.apache.commons.io.IOUtils.length(byteArray12);
        int int14 = org.apache.commons.io.IOUtils.read(inputStream11, byteArray12);
        byte[] byteArray15 = org.apache.commons.io.IOUtils.toByteArray(inputStream11);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer16 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream11, iOExceptionConsumer16);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream11);
        java.io.BufferedInputStream bufferedInputStream20 = org.apache.commons.io.IOUtils.buffer(inputStream11, (int) (byte) 10);
        java.io.InputStream inputStream22 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream11, (int) (byte) 1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer23 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream11, iOExceptionConsumer23);
        java.io.OutputStream outputStream25 = null;
        java.io.InputStream inputStream27 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray28 = new byte[] {};
        int int29 = org.apache.commons.io.IOUtils.length(byteArray28);
        int int30 = org.apache.commons.io.IOUtils.read(inputStream27, byteArray28);
        byte[] byteArray31 = org.apache.commons.io.IOUtils.toByteArray(inputStream27);
        java.io.InputStream inputStream33 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray34 = new byte[] {};
        int int35 = org.apache.commons.io.IOUtils.length(byteArray34);
        int int36 = org.apache.commons.io.IOUtils.read(inputStream33, byteArray34);
        byte[] byteArray37 = org.apache.commons.io.IOUtils.toByteArray(inputStream33);
        int int38 = org.apache.commons.io.IOUtils.length(byteArray37);
        org.apache.commons.io.IOUtils.readFully(inputStream27, byteArray37);
        long long40 = org.apache.commons.io.IOUtils.copyLarge(inputStream11, outputStream25, byteArray37);
        boolean boolean41 = org.apache.commons.io.IOUtils.contentEquals(inputStream1, inputStream11);
        java.io.BufferedInputStream bufferedInputStream43 = org.apache.commons.io.IOUtils.buffer(inputStream1, 5);
        java.io.InputStream inputStream45 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        java.io.OutputStream outputStream46 = null;
        java.io.InputStream inputStream49 = null;
        byte[] byteArray51 = org.apache.commons.io.IOUtils.toByteArray("");
        int int52 = org.apache.commons.io.IOUtils.read(inputStream49, byteArray51);
        long long53 = org.apache.commons.io.IOUtils.copyLarge(inputStream45, outputStream46, 0L, 0L, byteArray51);
        java.nio.charset.Charset charset54 = null;
        java.util.List<java.lang.String> strList55 = org.apache.commons.io.IOUtils.readLines(inputStream45, charset54);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream45);
        java.nio.charset.Charset charset57 = null;
        java.lang.String str58 = org.apache.commons.io.IOUtils.toString(inputStream45, charset57);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer59 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream45, iOExceptionConsumer59);
        boolean boolean61 = org.apache.commons.io.IOUtils.contentEquals((java.io.InputStream) bufferedInputStream43, inputStream45);
        byte[] byteArray63 = org.apache.commons.io.IOUtils.toByteArray(inputStream45, 0);
        java.nio.charset.Charset charset64 = null;
        org.apache.commons.io.LineIterator lineIterator65 = org.apache.commons.io.IOUtils.lineIterator(inputStream45, charset64);
        java.io.InputStream inputStream67 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream45, (int) (short) 100);
        java.lang.String str68 = org.apache.commons.io.IOUtils.toString(inputStream67);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(inputStream11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream20);
        org.junit.Assert.assertNotNull(inputStream22);
        org.junit.Assert.assertNotNull(inputStream27);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(inputStream33);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(bufferedInputStream43);
        org.junit.Assert.assertNotNull(inputStream45);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertNotNull(strList55);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[]");
        org.junit.Assert.assertNotNull(lineIterator65);
        org.junit.Assert.assertNotNull(inputStream67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
    }

    @Test
    public void test1998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1998");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        java.util.function.Consumer<java.io.IOException> iOExceptionConsumer6 = null;
        org.apache.commons.io.IOUtils.closeQuietly((java.io.Closeable) inputStream1, iOExceptionConsumer6);
        org.apache.commons.io.IOUtils.close((java.io.Closeable) inputStream1);
        java.io.BufferedInputStream bufferedInputStream10 = org.apache.commons.io.IOUtils.buffer(inputStream1, (int) (byte) 10);
        java.io.InputStream inputStream12 = org.apache.commons.io.IOUtils.toBufferedInputStream(inputStream1, (int) (byte) 1);
        java.io.OutputStream outputStream13 = null;
        int int14 = org.apache.commons.io.IOUtils.copy(inputStream12, outputStream13);
        java.io.BufferedInputStream bufferedInputStream16 = org.apache.commons.io.IOUtils.buffer(inputStream12, (int) (byte) 10);
        java.nio.charset.Charset charset17 = null;
        java.util.List<java.lang.String> strList18 = org.apache.commons.io.IOUtils.readLines(inputStream12, charset17);
        java.io.OutputStream outputStream20 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList18, "", outputStream20);
        java.io.OutputStream outputStream23 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList18, "", outputStream23);
        java.io.OutputStream outputStream26 = null;
        java.nio.charset.Charset charset27 = null;
        org.apache.commons.io.IOUtils.writeLines((java.util.Collection<java.lang.String>) strList18, "\r\n", outputStream26, charset27);
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(bufferedInputStream10);
        org.junit.Assert.assertNotNull(inputStream12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(bufferedInputStream16);
        org.junit.Assert.assertNotNull(strList18);
    }

    @Test
    public void test1999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1999");
        java.io.InputStream inputStream1 = org.apache.commons.io.IOUtils.toInputStream((java.lang.CharSequence) "");
        byte[] byteArray2 = new byte[] {};
        int int3 = org.apache.commons.io.IOUtils.length(byteArray2);
        int int4 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray2);
        byte[] byteArray5 = org.apache.commons.io.IOUtils.toByteArray(inputStream1);
        byte[] byteArray7 = org.apache.commons.io.IOUtils.toByteArray(inputStream1, (int) (short) 0);
        long long9 = org.apache.commons.io.IOUtils.skip(inputStream1, 100L);
        java.io.InputStream inputStream10 = null;
        java.io.InputStream inputStream11 = null;
        java.io.OutputStream outputStream12 = null;
        byte[] byteArray15 = new byte[] {};
        int int16 = org.apache.commons.io.IOUtils.length(byteArray15);
        java.io.OutputStream outputStream17 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray15, outputStream17);
        long long19 = org.apache.commons.io.IOUtils.copyLarge(inputStream11, outputStream12, 0L, (long) (byte) -1, byteArray15);
        java.io.OutputStream outputStream20 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray15, outputStream20);
        org.apache.commons.io.IOUtils.readFully(inputStream10, byteArray15);
        int int23 = org.apache.commons.io.IOUtils.read(inputStream1, byteArray15);
        java.io.OutputStream outputStream24 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray15, outputStream24);
        java.lang.String str26 = org.apache.commons.io.IOUtils.toString(byteArray15);
        java.io.OutputStream outputStream27 = null;
        org.apache.commons.io.IOUtils.writeChunked(byteArray15, outputStream27);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str30 = org.apache.commons.io.IOUtils.toString(byteArray15, "hi!");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: hi!");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
    }

    @Test
    public void test2000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test2000");
        java.io.Reader reader0 = null;
        java.io.Reader reader1 = null;
        java.io.Writer writer2 = null;
        char[] charArray5 = new char[] {};
        long long6 = org.apache.commons.io.IOUtils.copyLarge(reader1, writer2, (long) (byte) 0, (long) 1, charArray5);
        java.io.Writer writer7 = null;
        org.apache.commons.io.IOUtils.writeChunked(charArray5, writer7);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.IOUtils.readFully(reader0, charArray5, (int) (byte) 10, 3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.io.Reader.read(char[], int, int)\" because \"input\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[]");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
    }
}

