/*
 * This file was automatically generated by EvoSuite
 * Thu Jan 21 19:20:05 GMT 2021
 */

package org.apache.commons.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayReader;
import java.io.CharArrayWriter;
import java.io.Closeable;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.LineNumberReader;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.Writer;
import java.net.ServerSocket;
import java.net.URI;
import java.net.URL;
import java.net.URLConnection;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.charset.UnsupportedCharsetException;
import java.util.Collection;
import java.util.Enumeration;
import java.util.List;
import org.apache.commons.io.IOUtils;
import org.apache.commons.io.LineIterator;
import org.apache.commons.io.function.IOConsumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockServerSocket;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IOUtils_ESTest extends IOUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      char[] charArray0 = new char[6];
      IOUtils.write(charArray0, (Writer) charArrayWriter0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000", charArrayWriter0.toString());
      assertEquals(6, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream("qBKr8?:&XNmC`Ao7:wW", (String) null);
      assertEquals(19, inputStream0.available());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      InputStream inputStream0 = IOUtils.toInputStream("", charset0);
      char[] charArray0 = IOUtils.toCharArray(inputStream0, charset0);
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      Writer writer0 = IOUtils.writer(stringBuilder0);
      assertEquals("", writer0.toString());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      Writer writer0 = IOUtils.writer(charArrayWriter0);
      assertEquals("", writer0.toString());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuffer stringBuffer0 = new StringBuffer(stringBuilder0);
      Writer writer0 = IOUtils.writer(stringBuffer0);
      assertNotNull(writer0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      IOUtils.writeLines((Collection<?>) null, ">", (OutputStream) byteArrayOutputStream0);
      assertEquals(0, byteArrayOutputStream0.size());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      char[] charArray0 = new char[7];
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(2864);
      IOUtils.writeChunked(charArray0, (Writer) charArrayWriter0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charArrayWriter0.toString());
      assertEquals(7, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      IOUtils.writeChunked((char[]) null, (Writer) charArrayWriter0);
      assertEquals("", charArrayWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("@");
      BufferedOutputStream bufferedOutputStream0 = IOUtils.buffer((OutputStream) mockFileOutputStream0, (int) (byte)98);
      IOUtils.writeChunked(byteArray0, (OutputStream) bufferedOutputStream0);
      assertEquals(5, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
      IOUtils.writeChunked((byte[]) null, (OutputStream) byteArrayOutputStream0);
      assertEquals(0, byteArrayOutputStream0.size());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      StringBuffer stringBuffer0 = new StringBuffer();
      IOUtils.write(stringBuffer0, (Writer) charArrayWriter0);
      assertEquals(0, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        IOUtils.write(stringBuffer0, (OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot invoke \"java.io.OutputStream.write(byte[])\" because \"output\" is null
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      IOUtils.write((String) null, (Writer) charArrayWriter0);
      assertEquals(0, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      IOUtils.write((String) null, (OutputStream) null, (String) null);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.write((CharSequence) "org.apache.commons.io.IOUtils", (Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot invoke \"java.io.Writer.write(String)\" because \"output\" is null
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      IOUtils.write((CharSequence) null, (Writer) null);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      IOUtils.write((CharSequence) ">", (OutputStream) byteArrayOutputStream0);
      assertEquals(1, byteArrayOutputStream0.size());
      assertEquals(">", byteArrayOutputStream0.toString());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      IOUtils.write((char[]) null, (OutputStream) pipedOutputStream0, (Charset) null);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      Charset charset0 = Charset.defaultCharset();
      byte[] byteArray0 = new byte[4];
      IOUtils.write(byteArray0, (Writer) charArrayWriter0, charset0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      Charset charset0 = Charset.defaultCharset();
      IOUtils.write((byte[]) null, (Writer) charArrayWriter0, charset0);
      assertEquals("windows-1252", charset0.toString());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      // Undeclared exception!
      try { 
        IOUtils.write(byteArray0, (OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot invoke \"java.io.OutputStream.write(byte[])\" because \"output\" is null
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      IOUtils.write((byte[]) null, (OutputStream) null);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      try { 
        IOUtils.toString((Reader) pipedReader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      char[] charArray0 = new char[7];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      BufferedReader bufferedReader0 = IOUtils.buffer((Reader) charArrayReader0);
      String string0 = IOUtils.toString((Reader) bufferedReader0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.toByteArray((URLConnection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot invoke \"java.net.URLConnection.getInputStream()\" because \"urlConn\" is null
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("W{fD=", false);
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream("W{fD=");
      try { 
        IOUtils.toByteArray((InputStream) mockFileInputStream0, 92);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected read size. current: 0, expected: 92
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, (byte) (-92));
      byte[] byteArray1 = IOUtils.toByteArray((InputStream) byteArrayInputStream0, (int) (byte)0);
      assertNotSame(byteArray0, byteArray1);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-99), (-4087));
      // Undeclared exception!
      try { 
        IOUtils.toByteArray((InputStream) byteArrayInputStream0, (-4087));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Size must be equal or greater than zero: -4087
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)2, (byte)4);
      IOUtils.toByteArray((InputStream) byteArrayInputStream0, (int) (byte)2);
      assertEquals(2, byteArrayInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      try { 
        IOUtils.toByteArray((InputStream) pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      char[] charArray0 = new char[8];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0, 0, 0);
      BufferedReader bufferedReader0 = IOUtils.toBufferedReader((Reader) charArrayReader0);
      BufferedReader bufferedReader1 = IOUtils.toBufferedReader((Reader) bufferedReader0, 1591);
      assertSame(bufferedReader1, bufferedReader0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Enumeration<BufferedInputStream> enumeration0 = (Enumeration<BufferedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      // Undeclared exception!
      try { 
        IOUtils.skipFully((InputStream) sequenceInputStream0, (-1144L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Bytes to skip must not be negative: -1144
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      char[] charArray0 = new char[5];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      charArrayReader0.read(charArray0);
      Writer writer0 = Writer.nullWriter();
      BufferedWriter bufferedWriter0 = new BufferedWriter(writer0);
      try { 
        IOUtils.copyLarge((Reader) charArrayReader0, (Writer) bufferedWriter0, (long) 4, 1L, charArray0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // Chars to skip: 4 actual: 0
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("<t(IqyIl");
      InputStream inputStream0 = IOUtils.toInputStream((CharSequence) stringBuilder0);
      InputStream inputStream1 = IOUtils.toBufferedInputStream(inputStream0);
      BufferedInputStream bufferedInputStream0 = IOUtils.buffer(inputStream1);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream((byte)23);
      byte[] byteArray0 = new byte[2];
      try { 
        IOUtils.copyLarge((InputStream) bufferedInputStream0, (OutputStream) byteArrayOutputStream0, 22L, (long) (byte)2, byteArray0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // Bytes to skip: 22 actual: 8
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("8_T");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream("8_T");
      // Undeclared exception!
      try { 
        IOUtils.skip((InputStream) mockFileInputStream0, (-589L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Skip count must be non-negative, actual: -589
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      String string0 = IOUtils.resourceToString("", charset0, classLoader0);
      assertEquals("org\n", string0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      char[] charArray0 = new char[5];
      // Undeclared exception!
      try { 
        IOUtils.readFully((Reader) null, charArray0, 1, (-1450));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Length must not be negative: -1450
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      int int0 = IOUtils.length((Object[]) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      int int0 = IOUtils.length(objectArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      int int0 = IOUtils.length((CharSequence) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "'`@");
      int int0 = IOUtils.length((CharSequence) charBuffer0);
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      int int0 = IOUtils.length((byte[]) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      int int0 = IOUtils.length(byteArray0);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      char[] charArray0 = new char[7];
      StringReader stringReader0 = new StringReader("<");
      BufferedReader bufferedReader0 = IOUtils.toBufferedReader((Reader) stringReader0, 2);
      LineNumberReader lineNumberReader0 = new LineNumberReader(bufferedReader0, 2);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("``Cj 6Y3!_");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      long long0 = IOUtils.copyLarge((Reader) lineNumberReader0, (Writer) mockPrintWriter0, (-371L), 1528L, charArray0);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      char[] charArray0 = new char[7];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0, 1, 2146079145);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(2864);
      long long0 = IOUtils.copyLarge((Reader) charArrayReader0, (Writer) charArrayWriter0, (-1L), (-1877L), charArray0);
      assertEquals(6, charArrayWriter0.size());
      assertEquals(6L, long0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader();
      char[] charArray0 = new char[3];
      long long0 = IOUtils.copyLarge((Reader) pipedReader0, (Writer) pipedWriter0, (long) 0, (long) 0, charArray0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      char[] charArray0 = new char[5];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      Writer writer0 = Writer.nullWriter();
      BufferedWriter bufferedWriter0 = new BufferedWriter(writer0);
      long long0 = IOUtils.copyLarge((Reader) charArrayReader0, (Writer) bufferedWriter0, (long) 4, 1L, charArray0);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      byte[] byteArray0 = new byte[12];
      try { 
        IOUtils.copyLarge((InputStream) mockFileInputStream0, (OutputStream) null, (-235L), 1L, byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("W{fD=");
      byte[] byteArray0 = new byte[6];
      try { 
        IOUtils.copyLarge((InputStream) mockFileInputStream0, (OutputStream) mockPrintStream0, (-1L), (-1L), byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      byte[] byteArray0 = new byte[9];
      try { 
        IOUtils.copyLarge((InputStream) mockFileInputStream0, (OutputStream) null, (-1L), (long) (byte)98, byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      StringReader stringReader0 = new StringReader("MhJ");
      BufferedReader bufferedReader0 = IOUtils.buffer((Reader) stringReader0);
      byte[] byteArray0 = IOUtils.toByteArray((Reader) bufferedReader0);
      assertArrayEquals(new byte[] {(byte)77, (byte)104, (byte)74}, byteArray0);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "MhJ");
      long long0 = IOUtils.copy((Reader) bufferedReader0, (Appendable) charBuffer0, charBuffer0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      boolean boolean0 = IOUtils.contentEqualsIgnoreEOL(pipedReader0, (Reader) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      char[] charArray0 = new char[5];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      boolean boolean0 = IOUtils.contentEqualsIgnoreEOL((Reader) null, charArrayReader0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      char[] charArray0 = new char[7];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0, 1, 2);
      boolean boolean0 = IOUtils.contentEqualsIgnoreEOL(charArrayReader0, charArrayReader0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      char[] charArray0 = new char[7];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      BufferedReader bufferedReader0 = IOUtils.toBufferedReader((Reader) charArrayReader0, 1);
      IOUtils.contentEqualsIgnoreEOL(charArrayReader0, bufferedReader0);
      try { 
        IOUtils.readFully((Reader) charArrayReader0, charArray0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // Length to read: 7 actual: 0
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      LineNumberReader lineNumberReader0 = new LineNumberReader(stringReader0, 1004);
      boolean boolean0 = IOUtils.contentEquals((Reader) lineNumberReader0, (Reader) stringReader0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("8_T");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream("8_T");
      InputStreamReader inputStreamReader0 = new InputStreamReader(mockFileInputStream0);
      boolean boolean0 = IOUtils.contentEquals((Reader) inputStreamReader0, (Reader) inputStreamReader0);
      assertTrue(boolean0);
      assertEquals(0, mockFileInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      StringReader stringReader0 = new StringReader("h");
      LineNumberReader lineNumberReader0 = new LineNumberReader(stringReader0, 6);
      boolean boolean0 = IOUtils.contentEquals((Reader) stringReader0, (Reader) lineNumberReader0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)73, (byte)73);
      boolean boolean0 = IOUtils.contentEquals((InputStream) byteArrayInputStream0, (InputStream) byteArrayInputStream0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      InputStream inputStream0 = InputStream.nullInputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(inputStream0);
      IOUtils.close((Closeable) bufferedInputStream0, (IOConsumer<IOException>) null);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      IOConsumer<IOException> iOConsumer0 = (IOConsumer<IOException>) mock(IOConsumer.class, new ViolatedAssumptionAnswer());
      IOUtils.close((Closeable) null, iOConsumer0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      IOUtils.close((Closeable) charArrayWriter0);
      assertEquals("", charArrayWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(byteArrayOutputStream0);
      BufferedWriter bufferedWriter0 = IOUtils.buffer((Writer) outputStreamWriter0, 2124);
      BufferedWriter bufferedWriter1 = IOUtils.buffer((Writer) bufferedWriter0);
      assertSame(bufferedWriter0, bufferedWriter1);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      BufferedWriter bufferedWriter0 = IOUtils.buffer((Writer) charArrayWriter0);
      assertNotNull(bufferedWriter0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Reader reader0 = Reader.nullReader();
      BufferedReader bufferedReader0 = IOUtils.buffer(reader0, 318);
      BufferedReader bufferedReader1 = IOUtils.buffer((Reader) bufferedReader0, 318);
      assertSame(bufferedReader1, bufferedReader0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Length to read: ");
      BufferedReader bufferedReader0 = IOUtils.toBufferedReader((Reader) stringReader0);
      BufferedReader bufferedReader1 = IOUtils.buffer((Reader) bufferedReader0);
      assertSame(bufferedReader1, bufferedReader0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      OutputStream outputStream0 = OutputStream.nullOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(outputStream0);
      BufferedOutputStream bufferedOutputStream0 = IOUtils.buffer((OutputStream) dataOutputStream0);
      BufferedOutputStream bufferedOutputStream1 = IOUtils.buffer((OutputStream) bufferedOutputStream0);
      assertSame(bufferedOutputStream1, bufferedOutputStream0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("i");
      BufferedOutputStream bufferedOutputStream0 = IOUtils.buffer((OutputStream) mockFileOutputStream0);
      BufferedOutputStream bufferedOutputStream1 = IOUtils.buffer((OutputStream) bufferedOutputStream0, 3);
      assertSame(bufferedOutputStream1, bufferedOutputStream0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      BufferedInputStream bufferedInputStream0 = IOUtils.buffer((InputStream) mockFileInputStream0, 2);
      assertNotNull(bufferedInputStream0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      InputStream inputStream0 = InputStream.nullInputStream();
      BufferedInputStream bufferedInputStream0 = IOUtils.buffer(inputStream0);
      BufferedInputStream bufferedInputStream1 = IOUtils.buffer((InputStream) bufferedInputStream0);
      assertSame(bufferedInputStream1, bufferedInputStream0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)82, (-1288));
      // Undeclared exception!
      try { 
        IOUtils.toCharArray((InputStream) byteArrayInputStream0, "Zm7:C6\"NbZ!((mOS/");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // Zm7:C6\"NbZ!((mOS/
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream("Array Size=");
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(inputStream0, inputStream0);
      // Undeclared exception!
      IOUtils.toBufferedInputStream((InputStream) sequenceInputStream0, 0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = IOUtils.buffer((InputStream) byteArrayInputStream0);
      List<String> list0 = IOUtils.readLines((InputStream) bufferedInputStream0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-55), (-499));
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("C-)PU^P");
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      IOUtils.copy((InputStream) dataInputStream0, (Writer) mockPrintWriter0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      InputStream inputStream0 = IOUtils.toInputStream((CharSequence) stringBuffer0);
      // Undeclared exception!
      try { 
        IOUtils.lineIterator(inputStream0, "c|wg?G<xP?`\"wLWa}");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // c|wg?G<xP?`\"wLWa}
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      String string0 = IOUtils.toString(byteArray0);
      assertEquals("\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      MockServerSocket mockServerSocket0 = new MockServerSocket(1024);
      IOUtils.closeQuietly((ServerSocket) mockServerSocket0);
      assertTrue(mockServerSocket0.isBound());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      // Undeclared exception!
      try { 
        IOUtils.toString(uRI0, "");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      // Undeclared exception!
      try { 
        IOUtils.toString(uRL0, "");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      char[] charArray0 = new char[7];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      IOUtils.readFully((Reader) charArrayReader0, charArray0);
      assertEquals(7, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      IOUtils.closeQuietly((OutputStream) null);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      // Undeclared exception!
      try { 
        IOUtils.toString((InputStream) mockFileInputStream0, "");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      InputStream inputStream0 = IOUtils.toInputStream((CharSequence) "");
      // Undeclared exception!
      try { 
        IOUtils.copy(inputStream0, (Writer) charArrayWriter0, "6kt8");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // 6kt8
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      IOUtils.write((CharSequence) null, (OutputStream) pipedOutputStream0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      byte[] byteArray0 = IOUtils.toByteArray("");
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.write((CharSequence) null, (OutputStream) null, "org.apache.commons.io.filefilter.IOFileFilter");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // org.apache.commons.io.filefilter.IOFileFilter
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      List<String> list0 = List.of("Zm7:C6\"NbZ!((mOS/", "Zm7:C6\"NbZ!((mOS/", "Zm7:C6\"NbZ!((mOS/");
      MockPrintStream mockPrintStream0 = new MockPrintStream("Zm7:C6\"NbZ!((mOS/");
      IOUtils.writeLines((Collection<?>) list0, "Zm7:C6\"NbZ!((mOS/", (OutputStream) mockPrintStream0);
      assertEquals(3, list0.size());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      try { 
        IOUtils.toString(uRL0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      assertEquals('\\', IOUtils.DIR_SEPARATOR_WINDOWS);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      char[] charArray0 = new char[7];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0, 2, 1);
      LineIterator lineIterator0 = IOUtils.lineIterator((Reader) charArrayReader0);
      assertNotNull(lineIterator0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      IOUtils.write((StringBuffer) null, (OutputStream) null);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream("\".T6fe${@?j");
      DataInputStream dataInputStream0 = new DataInputStream(inputStream0);
      long long0 = IOUtils.copyLarge((InputStream) dataInputStream0, (OutputStream) null, (-371L), 0L);
      assertEquals(11, inputStream0.available());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      char[] charArray0 = new char[10];
      // Undeclared exception!
      try { 
        IOUtils.read((Reader) null, charArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot invoke \"java.io.Reader.read(char[], int, int)\" because \"input\" is null
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "d8T");
      InputStream inputStream0 = IOUtils.toInputStream((CharSequence) stringBuffer0);
      int int0 = IOUtils.read(inputStream0, byteArray0);
      assertEquals(1, inputStream0.available());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      IOUtils.closeQuietly((InputStream) mockFileInputStream0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.toCharArray((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Reader reader0 = Reader.nullReader();
      // Undeclared exception!
      try { 
        IOUtils.toByteArray(reader0, "");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      try { 
        IOUtils.resourceToURL("org.apache.commons.io.IOUtils");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Resource not found: org.apache.commons.io.IOUtils
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      IOUtils.closeQuietly((Writer) stringWriter0);
      assertEquals("", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("MhJ");
      IOUtils.write("MhJ", (OutputStream) mockFileOutputStream0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      try { 
        IOUtils.resourceToString("IW", charset0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Resource not found: IW
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.toByteArray((URI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot invoke \"java.net.URI.isAbsolute()\" because \"uri\" is null
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURI", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.toInputStream((CharSequence) "", "9bJ");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // 9bJ
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("w$dY~&&t _^Km~", true);
      // Undeclared exception!
      try { 
        IOUtils.write((char[]) null, (OutputStream) mockFileOutputStream0, "w$dY~&&t _^Km~");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // w$dY~&&t _^Km~
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      InputStream inputStream0 = IOUtils.toInputStream("", charset0);
      // Undeclared exception!
      try { 
        IOUtils.readLines(inputStream0, "org.apache.commons.io.filefilter.CanWriteFileFilter");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // org.apache.commons.io.filefilter.CanWriteFileFilter
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.toString((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.toString((byte[]) null, "L!wSs|$^Sc<*{^Wjo");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // L!wSs|$^Sc<*{^Wjo
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      StringReader stringReader0 = new StringReader("E^;k__.AW_");
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0);
      char[] charArray0 = IOUtils.toCharArray((Reader) bufferedReader0);
      assertEquals(11, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("The filters must not be null");
      char[] charArray0 = new char[7];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      IOUtils.copy((Reader) charArrayReader0, (OutputStream) mockPrintStream0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("E_M");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream("E_M");
      try { 
        IOUtils.readFully((InputStream) mockFileInputStream0, byteArray0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // Length to read: 2 actual: 0
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileReader mockFileReader0 = new MockFileReader(fileDescriptor0);
      // Undeclared exception!
      try { 
        IOUtils.toByteArray((Reader) mockFileReader0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot invoke \"java.io.InputStreamReader.read(char[], int, int)\" because \"this.stream\" is null
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      byte[] byteArray0 = IOUtils.resourceToByteArray("");
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 92, 155);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      try { 
        IOUtils.readFully((InputStream) bufferedInputStream0, 2231);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // Length to read: 2231 actual: 155
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      URI uRI0 = MockURI.aFTPURI;
      // Undeclared exception!
      try { 
        IOUtils.toString(uRI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot invoke \"java.net.URLConnection.getInputStream()\" because the return value of \"java.net.URL.openConnection()\" is null
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      char[] charArray0 = new char[5];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      BufferedReader bufferedReader0 = IOUtils.buffer((Reader) charArrayReader0);
      IOUtils.closeQuietly((Reader) bufferedReader0);
  }
}
