/*
 * This file was automatically generated by EvoSuite
 * Thu Jan 21 19:11:07 GMT 2021
 */

package org.apache.commons.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileFilter;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.math.BigInteger;
import java.net.URI;
import java.net.URL;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.charset.UnsupportedCharsetException;
import java.nio.file.InvalidPathException;
import java.nio.file.Path;
import java.time.chrono.IsoEra;
import java.util.Collection;
import java.util.Date;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Stack;
import java.util.TreeSet;
import java.util.Vector;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.zip.Adler32;
import java.util.zip.Checksum;
import org.apache.commons.io.FileUtils;
import org.apache.commons.io.LineIterator;
import org.apache.commons.io.filefilter.CanExecuteFileFilter;
import org.apache.commons.io.filefilter.EmptyFileFilter;
import org.apache.commons.io.filefilter.IOFileFilter;
import org.apache.commons.io.filefilter.NameFileFilter;
import org.apache.commons.io.filefilter.NotFileFilter;
import org.apache.commons.io.filefilter.SuffixFileFilter;
import org.apache.commons.io.filefilter.TrueFileFilter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FileUtils_ESTest extends FileUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      FileUtils.writeStringToFile(file0, "' is not a directory", false);
      assertEquals("C:\\Users\\Mathieu\\AppData\\Local\\Temp", file0.toString());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      FileUtils.writeStringToFile(file0, "4d");
      assertEquals(0L, file0.getTotalSpace());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      FileUtils.writeLines(file0, (String) null, (Collection<?>) treeSet0, " MB");
      assertEquals(1392409281320L, file0.lastModified());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      MockFile mockFile0 = new MockFile("C:UsersMathieuAppDataLocalTemp");
      byte[] byteArray0 = new byte[5];
      try { 
        FileUtils.writeByteArrayToFile((File) mockFile0, byteArray0, (int) (byte) (-6), (int) (byte) (-6));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Directory 'C:' could not be created
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      FileUtils.openOutputStream(file0);
      LineIterator lineIterator0 = FileUtils.lineIterator(file0, (String) null);
      assertNotNull(lineIterator0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          String[] stringArray0 = new String[6];
          stringArray0[0] = "System";
          stringArray0[1] = "System";
          stringArray0[2] = "System";
          stringArray0[3] = "System";
          stringArray0[4] = "System";
          stringArray0[5] = "System";
          Path path0 = Path.of("System", stringArray0);
          File file0 = path0.toFile();
          boolean boolean0 = FileUtils.deleteQuietly(file0);
          assertFalse(boolean0);
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "M";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "";
      File file0 = FileUtils.getFile(stringArray0);
      assertTrue(file0.isFile());
      
      FileUtils.copyDirectory((File) mockFile0, file0);
      assertEquals("M", file0.getName());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      TreeSet<File> treeSet0 = new TreeSet<File>();
      File[] fileArray0 = FileUtils.convertFileCollectionToFileArray(treeSet0);
      assertEquals(0, fileArray0.length);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      try { 
        FileUtils.writeStringToFile(file0, "", false);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        FileUtils.writeStringToFile(file0, "+", true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      FileSystemHandling.shouldAllThrowIOExceptions();
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      // Undeclared exception!
      try { 
        FileUtils.writeLines(file0, ", offset=", (Collection<?>) linkedHashSet0);
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // , offset=
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      try { 
        FileUtils.writeLines((File) mockFile0, "", (Collection<?>) treeSet0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File '\\' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        FileUtils.writeByteArrayToFile(file0, (byte[]) null, 8, 37, true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      // Undeclared exception!
      try { 
        FileUtils.writeByteArrayToFile(file0, (byte[]) null, 8, 37, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot read the array length because \"b\" is null
         //
         verifyException("org.evosuite.runtime.vfs.VFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.waitFor((File) null, 47);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot invoke \"java.io.File.exists()\" because \"file\" is null
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      boolean boolean0 = FileUtils.waitFor(mockFile0, (-81));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      boolean boolean0 = FileUtils.waitFor(file0, (-81));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      // Undeclared exception!
      try { 
        FileUtils.cleanDirectory(file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // C:\\Users\\Mathieu does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      try { 
        FileUtils.moveFile(file0, file0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // Source 'C:\\Users\\Mathieu' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      File[] fileArray0 = new File[6];
      fileArray0[0] = file0;
      fileArray0[1] = file0;
      fileArray0[2] = file0;
      fileArray0[3] = file0;
      fileArray0[4] = file0;
      fileArray0[5] = file0;
      URL[] uRLArray0 = FileUtils.toURLs(fileArray0);
      assertEquals(6, uRLArray0.length);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      FileUtils.touch(mockFile0);
      assertEquals(0L, mockFile0.getUsableSpace());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      URL[] uRLArray0 = new URL[2];
      URL uRL0 = MockURL.getHttpExample();
      uRLArray0[0] = uRL0;
      // Undeclared exception!
      try { 
        FileUtils.toFiles(uRLArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URL could not be converted to a File: http://www.someFakeButWellFormedURL.org/fooExample
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      URL uRL0 = file0.toURL();
      URL[] uRLArray0 = new URL[6];
      uRLArray0[0] = uRL0;
      File[] fileArray0 = FileUtils.toFiles(uRLArray0);
      assertEquals(6, fileArray0.length);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      URL[] uRLArray0 = new URL[0];
      File[] fileArray0 = FileUtils.toFiles(uRLArray0);
      assertEquals(0, fileArray0.length);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      File[] fileArray0 = FileUtils.toFiles((URL[]) null);
      assertEquals(0, fileArray0.length);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      File file0 = FileUtils.toFile(uRL0);
      assertNull(file0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      File file0 = FileUtils.toFile((URL) null);
      assertNull(file0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      File file0 = mockFile0.getCanonicalFile();
      BigInteger bigInteger0 = FileUtils.sizeOfDirectoryAsBigInteger(file0);
      assertEquals((short)0, bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      File file1 = MockFile.createTempFile("' and destination '", "org.apache.commons.io.file.Counters$AbstractPathCounters", file0);
      BigInteger bigInteger0 = FileUtils.sizeOfAsBigInteger(file1);
      assertEquals((byte)0, bigInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "org.apache.commons.io.filefilter.NameFileFilter";
      stringArray0[2] = "PbgXB0%26Z57Gw~9[X";
      Path path0 = Path.of("No more lines", stringArray0);
      File file0 = path0.toFile();
      // Undeclared exception!
      try { 
        FileUtils.sizeOfAsBigInteger(file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No more lines\\org.apache.commons.io.filefilter.NameFileFilter\\PbgXB0%26Z57Gw~9[X does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      BigInteger bigInteger0 = FileUtils.sizeOfAsBigInteger(mockFile0);
      assertEquals((short)0, bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      MockFile mockFile0 = new MockFile("C:UsersMathieuAppDataLocalTemp");
      mockFile0.createNewFile();
      long long0 = FileUtils.sizeOf(mockFile0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      // Undeclared exception!
      try { 
        FileUtils.sizeOf(file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // C:\\Users\\Mathieu\\AppData\\Local\\Temp does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      file0.createNewFile();
      Charset charset0 = Charset.defaultCharset();
      List<String> list0 = FileUtils.readLines(file0, charset0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      MockFile mockFile0 = new MockFile((String) null, "t");
      FileUtils.write((File) mockFile0, (CharSequence) null, false);
      Charset charset0 = Charset.defaultCharset();
      String string0 = FileUtils.readFileToString((File) mockFile0, charset0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HashSet<File> hashSet0 = new HashSet<File>();
      MockFile mockFile0 = new MockFile(" HrMgmMxru%p=Yw+", "");
      // Undeclared exception!
      try { 
        FileUtils.writeLines((File) mockFile0, " HrMgmMxru%p=Yw+", (Collection<?>) hashSet0);
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         //  HrMgmMxru%p=Yw+
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      MockFile mockFile0 = new MockFile("C:UsersMathieu", "C:UsersMathieu");
      Stack<Object> stack0 = new Stack<Object>();
      FileUtils.writeLines((File) mockFile0, (Collection<?>) stack0);
      assertTrue(mockFile0.canRead());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      FileUtils.openOutputStream(file0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("C:\\Users\\Mathieu");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, false, true);
      byte[] byteArray0 = new byte[8];
      try { 
        FileUtils.writeByteArrayToFile(file0, byteArray0, 65, (int) (byte)67, false);
       //  fail("Expecting exception: IOException");
       // Unstable assertion
      } catch(IOException e) {
         //
         // File 'C:\\Users\\Mathieu' cannot be written to
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      File file1 = MockFile.createTempFile("F:c9Ie~Q_DR{DF:Mathieugitcommons-ioc9Ie~Q_DR{De~Q_DR{D", "F:c9Ie~Q_DR{DF:Mathieugitcommons-ioc9Ie~Q_DR{De~Q_DR{D", file0);
      FileUtils.writeStringToFile(file1, "F:c9Ie~Q_DR{DF:Mathieugitcommons-ioc9Ie~Q_DR{De~Q_DR{D", (String) null, false);
      assertEquals(54L, file1.length());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      try { 
        FileUtils.readFileToByteArray(mockFile0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File '\\' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      FileUtils.touch(file0);
      FileInputStream fileInputStream0 = FileUtils.openInputStream(file0);
      assertEquals(0, fileInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      FileUtils.openOutputStream(file0);
      try { 
        FileUtils.moveToDirectory(file0, file0, true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Destination 'C:\\Users\\Mathieu' is not a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      try { 
        FileUtils.moveFileToDirectory(mockFile0, mockFile0, false);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Source '' is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      MockFile mockFile0 = new MockFile("UgrsSQZXuJ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      try { 
        FileUtils.moveFile(mockFile0, mockFile0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Destination 'UgrsSQZXuJ' already exists
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      FileUtils.openOutputStream(file0);
      MockFile mockFile0 = new MockFile("System", "System");
      mockFile0.mkdirs();
      try { 
        FileUtils.moveToDirectory(mockFile0, file0, true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Destination 'C:\\Users\\Mathieu' is not a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      MockFile mockFile0 = new MockFile("");
      try { 
        FileUtils.moveToDirectory(mockFile0, file0, false);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // Destination directory 'C:\\Users\\Mathieu' does not exist [createDestDir=false]
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      MockFile mockFile1 = new MockFile("", "z7 zWwMnf5");
      try { 
        FileUtils.moveToDirectory(mockFile0, mockFile1, true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Destination 'F:\\Mathieu\\git\\commons-io\\z7 zWwMnf5' already exists
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      MockFile mockFile0 = new MockFile("+");
      mockFile0.createNewFile();
      try { 
        FileUtils.moveDirectory(mockFile0, mockFile0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Source '+' is not a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try { 
        FileUtils.listFiles((File) null, stringArray0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot invoke \"java.io.File.isDirectory()\" because \"directory\" is null
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      // Undeclared exception!
      try { 
        FileUtils.listFiles(file0, (String[]) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'directory' is not a directory: C:\\Users\\Mathieu\\AppData\\Local\\Temp
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.isFileOlder((File) null, (-1215L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No specified file
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      File file0 = MockFile.createTempFile("X/?", "F:Mathieugitcommons-ioM");
      FileUtils.openOutputStream(file0, true);
      boolean boolean0 = FileUtils.isFileOlder(file0, file0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.isFileOlder((File) null, (File) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No specified reference file
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      File file0 = MockFile.createTempFile("X/?", "F:Mathieugitcommons-ioM");
      // Undeclared exception!
      try { 
        FileUtils.isFileOlder(file0, file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The reference file 'C:\\Users\\Mathieu\\AppData\\Local\\Temp\\X\\?0F:Mathieugitcommons-ioM' doesn't exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      // Undeclared exception!
      try { 
        FileUtils.isFileOlder(file0, (Date) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No specified date
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      MockDate mockDate0 = new MockDate(37, (-977), (-1104));
      boolean boolean0 = FileUtils.isFileOlder(file0, (Date) mockDate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      MockDate mockDate0 = new MockDate((-3176), (-3176), (-3176), (-3176), 0, 0);
      boolean boolean0 = FileUtils.isFileNewer((File) mockFile0, (Date) mockDate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      boolean boolean0 = FileUtils.isFileNewer(file0, (-2383L));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.isFileNewer((File) null, 1125899906842624L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No specified file
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      File file0 = MockFile.createTempFile("X/?", "F:Mathieugitcommons-oM");
      FileUtils.openOutputStream(file0, true);
      boolean boolean0 = FileUtils.isFileNewer(file0, file0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.isFileNewer((File) null, (File) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No specified reference file
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      File file0 = MockFile.createTempFile("X/?", "F:Mathieugitcommons-oM");
      // Undeclared exception!
      try { 
        FileUtils.isFileNewer(file0, file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The reference file 'C:\\Users\\Mathieu\\AppData\\Local\\Temp\\X\\?0F:Mathieugitcommons-oM' doesn't exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      // Undeclared exception!
      try { 
        FileUtils.isFileNewer(file0, (Date) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No specified date
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      NotFileFilter notFileFilter0 = (NotFileFilter)CanExecuteFileFilter.CANNOT_EXECUTE;
      Collection<File> collection0 = FileUtils.listFilesAndDirs(mockFile0, notFileFilter0, notFileFilter0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      File file0 = mockFile0.getCanonicalFile();
      String[] stringArray0 = new String[8];
      Collection<File> collection0 = FileUtils.listFiles(file0, stringArray0, true);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "' is not a directory";
      stringArray0[1] = "' is not a directory";
      stringArray0[2] = "' is not a directory";
      File file1 = FileUtils.getFile(file0, stringArray0);
      assertEquals("F:\\Mathieu\\git\\commons-io\\C:\\Users\\Mathieu\\AppData\\Local\\Temp\\' is not a directory\\' is not a directory\\' is not a directory", file1.toString());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      MockFile mockFile0 = new MockFile("@h-_>dw");
      FileUtils.forceMkdirParent(mockFile0);
      assertEquals(0L, mockFile0.getFreeSpace());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      MockFile mockFile0 = new MockFile(file0, "' is not a directory");
      try { 
        FileUtils.forceMkdirParent(mockFile0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unable to create directory F:\\Mathieu\\git\\commons-io\\C:\\Users\\Mathieu\\AppData\\Local\\Temp
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      FileUtils.forceMkdirParent(file0);
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.exists());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      MockFile mockFile0 = new MockFile((String) null, "t");
      FileUtils.forceDeleteOnExit(mockFile0);
      assertFalse(mockFile0.canRead());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      File file0 = mockFile0.getCanonicalFile();
      FileUtils.copyToDirectory(file0, (File) mockFile0);
      assertFalse(file0.isFile());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      mockFile0.setReadOnly();
      try { 
        FileUtils.copyToDirectory((File) mockFile0, (File) mockFile0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Destination 'F:\\Mathieu\\git\\commons-io' cannot be written to
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      TrueFileFilter trueFileFilter0 = (TrueFileFilter)TrueFileFilter.TRUE;
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "M";
      stringArray0[4] = "";
      mockFile0.setReadOnly();
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "";
      File file0 = FileUtils.getFile(stringArray0);
      try { 
        FileUtils.copyDirectory((File) mockFile0, file0, (FileFilter) trueFileFilter0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Destination 'F:\\Mathieu\\git\\commons-io\\M' directory cannot be created
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      MockFile mockFile1 = new MockFile("No specified file", "");
      mockFile1.createNewFile();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      SuffixFileFilter suffixFileFilter0 = new SuffixFileFilter(stringArray0);
      try { 
        FileUtils.copyDirectory((File) mockFile0, (File) mockFile1, (FileFilter) suffixFileFilter0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Destination 'F:\\Mathieu\\git\\commons-io\\No specified file' exists but is not a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      MockFile mockFile0 = new MockFile("C:UsersMathieuAppDataLocalTemp");
      MockFile mockFile1 = new MockFile("");
      boolean boolean0 = FileUtils.directoryContains(mockFile1, mockFile0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      // Undeclared exception!
      try { 
        FileUtils.directoryContains(file0, file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Not a directory: C:\\Users\\Mathieu
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.directoryContains((File) null, (File) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Directory must not be null
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      boolean boolean0 = FileUtils.directoryContains(mockFile0, mockFile0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      boolean boolean0 = FileUtils.deleteQuietly((File) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("F:\\Mathieu\\git\\commons-io");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, true);
      try { 
        FileUtils.deleteDirectory(mockFile0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unable to delete directory .
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      FileUtils.deleteDirectory(mockFile0);
      assertFalse(mockFile0.canExecute());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      MockFile mockFile0 = new MockFile("F:M%thieu5gitcommons-ioM");
      FileUtils.deleteDirectory(mockFile0);
      assertFalse(mockFile0.exists());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      Stack<Object> stack0 = new Stack<Object>();
      FileUtils.writeLines(file0, (Collection<?>) stack0);
      // Undeclared exception!
      try { 
        FileUtils.deleteDirectory(file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // C:\\Users\\Mathieu is not a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      String string0 = FileUtils.decodeUrl("TiV.+4;%r;");
      assertEquals("TiV.+4;%r;", string0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      String string0 = FileUtils.decodeUrl((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      MockFile mockFile0 = new MockFile("TiV.+4;%r;");
      mockFile0.mkdirs();
      try { 
        FileUtils.copyInputStreamToFile((InputStream) null, mockFile0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File 'TiV.+4;%r;' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      Vector<File> vector0 = new Vector<File>();
      FileUtils.copyToDirectory((Iterable<File>) vector0, file0);
      assertEquals("Mathieu", file0.getName());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      File file0 = MockFile.createTempFile("z=Drdj7n", "z=Drdj7n");
      Vector<File> vector0 = new Vector<File>(1, (-1104));
      vector0.add(file0);
      try { 
        FileUtils.copyToDirectory((Iterable<File>) vector0, file0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // Source 'C:\\Users\\Mathieu\\AppData\\Local\\Temp\\z=Drdj7n0z=Drdj7n' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      MockFile mockFile0 = new MockFile("org.apache.commons.io.filefilter.AgeFileFilter", "org.apache.commons.io.filefilter.AgeFileFilter");
      Path path0 = mockFile0.toPath();
      File file0 = path0.toFile();
      try { 
        FileUtils.copyToDirectory(file0, (File) mockFile0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // The source F:\\Mathieu\\git\\commons-io\\org.apache.commons.io.filefilter.AgeFileFilter\\org.apache.commons.io.filefilter.AgeFileFilter does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null, 1431);
      File file0 = FileUtils.getUserDirectory();
      try { 
        FileUtils.copyInputStreamToFile(pushbackInputStream0, file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.PushbackInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      File file0 = FileUtils.getUserDirectory();
      FileUtils.copyInputStreamToFile(byteArrayInputStream0, file0);
      assertEquals(4L, file0.length());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      MockFile mockFile0 = new MockFile("c9\\Ie~Q_DR{D", "c9\\Ie~Q_DR{D");
      MockFile mockFile1 = new MockFile("");
      try { 
        FileUtils.copyToDirectory((File) mockFile0, (File) mockFile1);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // Source 'F:\\Mathieu\\git\\commons-io\\c9\\Ie~Q_DR{D\\c9\\Ie~Q_DR{D' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      FileUtils.openOutputStream(file0);
      // Undeclared exception!
      try { 
        FileUtils.copyToDirectory(file0, file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Destination 'C:\\Users\\Mathieu' is not a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      try { 
        FileUtils.copyFile(file0, (OutputStream) pipedOutputStream0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      MockFile mockFile0 = new MockFile("dC<)Q$78");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      long long0 = FileUtils.copyFile((File) mockFile0, (OutputStream) mockFileOutputStream0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      MockFile mockFile0 = new MockFile("System", "System");
      mockFile0.createNewFile();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "System";
      stringArray0[1] = "System";
      stringArray0[2] = "System";
      stringArray0[3] = "System";
      stringArray0[4] = "System";
      Path path0 = Path.of("System", stringArray0);
      File file0 = path0.toFile();
      try { 
        FileUtils.copyToDirectory((File) mockFile0, file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Destination 'F:\\Mathieu\\git\\commons-io\\System\\System\\System\\System\\System\\System' directory cannot be created
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      FileUtils.openOutputStream(file0);
      try { 
        FileUtils.copyFile(file0, file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Source 'C:\\Users\\Mathieu' and destination 'C:\\Users\\Mathieu' are the same
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      try { 
        FileUtils.copyFile((File) mockFile0, (File) mockFile0, true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Source '' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          MockFile mockFile0 = new MockFile("System", "System");
          mockFile0.createNewFile();
          URI uRI0 = MockURI.aFileURI;
          MockFile mockFile1 = new MockFile(uRI0);
          // Undeclared exception!
          try { 
            FileUtils.copyToDirectory((File) mockFile0, (File) mockFile1);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"F:\\Mathieu\\git\\commons-io\\tmp\\foo.bar\\System\" \"write\")
             // java.base/java.lang.Thread.getStackTrace(Thread.java:1598)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
             // java.base/java.lang.SecurityManager.checkWrite(SecurityManager.java:838)
             // java.base/sun.nio.fs.WindowsPath.checkWrite(WindowsPath.java:854)
             // java.base/sun.nio.fs.WindowsFileCopy.copy(WindowsFileCopy.java:83)
             // java.base/sun.nio.fs.WindowsFileSystemProvider.copy(WindowsFileSystemProvider.java:283)
             // java.base/java.nio.file.Files.copy(Files.java:1299)
             // org.apache.commons.io.FileUtils.doCopyFile(FileUtils.java:1302)
             // org.apache.commons.io.FileUtils.copyFile(FileUtils.java:797)
             // org.apache.commons.io.FileUtils.copyFileToDirectory(FileUtils.java:883)
             // org.apache.commons.io.FileUtils.copyFileToDirectory(FileUtils.java:844)
             // org.apache.commons.io.FileUtils.copyToDirectory(FileUtils.java:940)
             // jdk.internal.reflect.GeneratedMethodAccessor245.invoke(Unknown Source)
             // java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.base/java.lang.reflect.Method.invoke(Method.java:564)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:261)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:172)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:224)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:295)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:201)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:54)
             // java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
             // java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1130)
             // java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:630)
             // java.base/java.lang.Thread.run(Thread.java:832)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      File file0 = MockFile.createTempFile("X/?", "X/?");
      FileUtils.openOutputStream(file0, true);
      File file1 = FileUtils.getUserDirectory();
      // Undeclared exception!
      try { 
        FileUtils.copyToDirectory(file1, file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Destination 'C:\\Users\\Mathieu\\AppData\\Local\\Temp\\X\\?0X\\?' is not a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      MockFile mockFile0 = new MockFile("F:Mathieugitcommons-io", "F:Mathieugitcommons-io");
      File file0 = MockFile.createTempFile("F:Mathieugitcommons-io", "F:Mathieugitcommons-io", (File) mockFile0);
      // Undeclared exception!
      try { 
        FileUtils.copyDirectoryToDirectory(file0, mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Source 'F:\\Mathieu\\git\\commons-io\\F:Mathieugitcommons-io\\F:Mathieugitcommons-io\\F:Mathieugitcommons-io0F:Mathieugitcommons-io' is not a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      MockFile mockFile0 = new MockFile("NQy&nAWZ@c/F)M;=L`", "NQy&nAWZ@c/F)M;=L`");
      try { 
        FileUtils.copyDirectoryToDirectory(mockFile0, mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // Source 'F:\\Mathieu\\git\\commons-io\\NQy&nAWZ@c\\F)M;=L`\\NQy&nAWZ@c\\F)M;=L`' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          MockFile mockFile0 = new MockFile("");
          MockFile mockFile1 = new MockFile("file", "");
          mockFile1.createNewFile();
          MockFile mockFile2 = new MockFile("No specified file", "$caq`+y9ZNl]R+ZmH");
          // Undeclared exception!
          try { 
            FileUtils.copyToDirectory((File) mockFile0, (File) mockFile2);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"F:\\Mathieu\\git\\commons-io\\No specified file\\$caq`+y9ZNl]R+ZmH\\file\" \"write\")
             // java.base/java.lang.Thread.getStackTrace(Thread.java:1598)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
             // java.base/java.lang.SecurityManager.checkWrite(SecurityManager.java:838)
             // java.base/sun.nio.fs.WindowsPath.checkWrite(WindowsPath.java:854)
             // java.base/sun.nio.fs.WindowsFileCopy.copy(WindowsFileCopy.java:83)
             // java.base/sun.nio.fs.WindowsFileSystemProvider.copy(WindowsFileSystemProvider.java:283)
             // java.base/java.nio.file.Files.copy(Files.java:1299)
             // org.apache.commons.io.FileUtils.doCopyFile(FileUtils.java:1302)
             // org.apache.commons.io.FileUtils.doCopyDirectory(FileUtils.java:1265)
             // org.apache.commons.io.FileUtils.copyDirectory(FileUtils.java:677)
             // org.apache.commons.io.FileUtils.copyDirectory(FileUtils.java:553)
             // org.apache.commons.io.FileUtils.copyDirectoryToDirectory(FileUtils.java:717)
             // org.apache.commons.io.FileUtils.copyToDirectory(FileUtils.java:942)
             // jdk.internal.reflect.GeneratedMethodAccessor245.invoke(Unknown Source)
             // java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.base/java.lang.reflect.Method.invoke(Method.java:564)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:261)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:172)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:224)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:295)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:201)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:54)
             // java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
             // java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1130)
             // java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:630)
             // java.base/java.lang.Thread.run(Thread.java:832)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      MockFile mockFile1 = new MockFile("No specified file", "");
      String[] stringArray0 = new String[6];
      SuffixFileFilter suffixFileFilter0 = new SuffixFileFilter(stringArray0);
      FileUtils.copyDirectory((File) mockFile0, (File) mockFile1, (FileFilter) suffixFileFilter0);
      assertTrue(mockFile1.canWrite());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      MockFile mockFile1 = new MockFile("");
      try { 
        FileUtils.copyToDirectory((File) mockFile1, (File) mockFile0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Source '' and destination 'F:\\Mathieu\\git\\commons-io' are the same
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "target";
      stringArray0[1] = "";
      stringArray0[2] = "^[a-zA-Z0-9][a-zA-Z0-9-]*$";
      stringArray0[3] = "Insensitive";
      stringArray0[4] = "The reference file '";
      stringArray0[5] = "~vd";
      stringArray0[6] = "=K:?.VtKJP%1xqV}";
      NotFileFilter notFileFilter0 = (NotFileFilter)EmptyFileFilter.NOT_EMPTY;
      File file0 = FileUtils.getFile(stringArray0);
      File file1 = MockFile.createTempFile("Insensitive", "~vd", file0);
      try { 
        FileUtils.copyDirectory(file1, file0, (FileFilter) notFileFilter0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Source 'F:\\Mathieu\\git\\commons-io\\target\\^[a-zA-Z0-9][a-zA-Z0-9-]*$\\Insensitive\\The reference file '\\~vd\\=K:?.VtKJP%1xqV}\\Insensitive0~vd' exists but is not a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      file0.createNewFile();
      // Undeclared exception!
      try { 
        FileUtils.contentEqualsIgnoreEOL(file0, file0, "?/,^5");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // ?/,^5
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      try { 
        FileUtils.contentEqualsIgnoreEOL(mockFile0, mockFile0, "http");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can't compare directories, only files
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      File file1 = MockFile.createTempFile("F:c9Ie~Q_DR{DF:Mathieugitcommons-ioc9Ie~Q_DR{De~Q_DR{D", "F:c9Ie~Q_DR{DF:Mathieugitcommons-ioc9Ie~Q_DR{De~Q_DR{D", file0);
      try { 
        FileUtils.contentEqualsIgnoreEOL(file1, file0, "F:c9Ie~Q_DR{DF:Mathieugitcommons-ioc9Ie~Q_DR{De~Q_DR{D");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can't compare directories, only files
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      FileUtils.openOutputStream(file0);
      MockFile mockFile0 = new MockFile("System", "System");
      boolean boolean0 = FileUtils.contentEqualsIgnoreEOL(file0, mockFile0, "?/,^5");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      boolean boolean0 = FileUtils.contentEqualsIgnoreEOL(file0, (File) null, "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      boolean boolean0 = FileUtils.contentEqualsIgnoreEOL((File) null, (File) null, "http");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      MockFile mockFile0 = new MockFile("org.apache.commons.io.filefilter.CanWriteFileFilter", "org.apache.commons.io.filefilter.CanWriteFileFilter");
      boolean boolean0 = FileUtils.contentEqualsIgnoreEOL((File) null, mockFile0, "/m]&,[JJKH&pUP2Ar");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      boolean boolean0 = FileUtils.contentEqualsIgnoreEOL(file0, file0, "F:Mathieugitcommons-ioM");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      File file0 = MockFile.createTempFile("X/?", "F:Mathieugitcommons-ioM");
      FileUtils.openOutputStream(file0, true);
      File file1 = FileUtils.getUserDirectory();
      try { 
        FileUtils.contentEquals(file0, file1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can't compare directories, only files
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      try { 
        FileUtils.contentEquals(mockFile0, mockFile0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can't compare directories, only files
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "F:Mathieugitc";
      stringArray0[1] = "F";
      stringArray0[2] = "F:Mathieugitc";
      stringArray0[3] = "F:Mathieugitc";
      File file0 = FileUtils.getFile(stringArray0);
      File file1 = MockFile.createTempFile("F:Mathieugitc", "F", file0);
      try { 
        FileUtils.contentEquals(file1, file1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // La syntaxe du nom de fichier, de r\u00E9pertoire ou de volume est incorrecte
         //
         verifyException("java.io.WinNTFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      MockFile mockFile1 = new MockFile(mockFile0, "@h-_>dw");
      boolean boolean0 = FileUtils.contentEquals(mockFile0, mockFile1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      boolean boolean0 = FileUtils.contentEquals(file0, (File) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      MockFile mockFile0 = new MockFile("org.apache.commons.io.filefilter.CanWriteFileFilter", "org.apache.commons.io.filefilter.CanWriteFileFilter");
      boolean boolean0 = FileUtils.contentEquals((File) null, mockFile0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      boolean boolean0 = FileUtils.contentEquals(file0, file0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      File file0 = mockFile0.getCanonicalFile();
      FileUtils.forceDeleteOnExit(file0);
      assertEquals(0L, file0.getFreeSpace());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      file0.mkdirs();
      boolean boolean0 = FileUtils.deleteQuietly(file0);
      assertEquals(0L, file0.lastModified());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          MockFile mockFile0 = new MockFile("", "");
          File file0 = mockFile0.getCanonicalFile();
          boolean boolean0 = FileUtils.deleteQuietly(file0);
          assertFalse(boolean0);
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Adler32 adler32_0 = new Adler32();
      MockFile mockFile0 = new MockFile("dC<)Q$78");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        FileUtils.checksum(mockFile0, adler32_0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Adler32 adler32_0 = new Adler32();
      MockFile mockFile0 = new MockFile("dC<)Q$78");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      Checksum checksum0 = FileUtils.checksum(mockFile0, adler32_0);
      assertEquals(1L, checksum0.getValue());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Adler32 adler32_0 = new Adler32();
      MockFile mockFile0 = new MockFile("F:M%thieu5gitcommons-ioM");
      mockFile0.mkdirs();
      // Undeclared exception!
      try { 
        FileUtils.checksum(mockFile0, adler32_0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Checksums can't be computed on directories
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      file0.createNewFile();
      // Undeclared exception!
      try { 
        FileUtils.sizeOfDirectoryAsBigInteger(file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // C:\\Users\\Mathieu is not a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      // Undeclared exception!
      try { 
        FileUtils.sizeOfDirectoryAsBigInteger(file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // C:\\Users\\Mathieu\\AppData\\Local\\Temp does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      BigInteger bigInteger0 = FileUtils.ONE_KB_BI;
      String string0 = FileUtils.byteCountToDisplaySize(bigInteger0);
      assertEquals("1 KB", string0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      BigInteger bigInteger0 = FileUtils.ONE_MB_BI;
      String string0 = FileUtils.byteCountToDisplaySize(bigInteger0);
      assertEquals("1 MB", string0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      BigInteger bigInteger0 = FileUtils.ONE_GB_BI;
      String string0 = FileUtils.byteCountToDisplaySize(bigInteger0);
      assertEquals("1 GB", string0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      BigInteger bigInteger0 = FileUtils.ONE_TB_BI;
      String string0 = FileUtils.byteCountToDisplaySize(bigInteger0);
      assertEquals("1 TB", string0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      BigInteger bigInteger0 = FileUtils.ONE_PB_BI;
      String string0 = FileUtils.byteCountToDisplaySize(bigInteger0);
      assertEquals("1 PB", string0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      BigInteger bigInteger0 = FileUtils.ONE_ZB;
      String string0 = FileUtils.byteCountToDisplaySize(bigInteger0);
      assertEquals("1024 EB", string0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      SuffixFileFilter suffixFileFilter0 = new SuffixFileFilter("ftp");
      // Undeclared exception!
      try { 
        FileUtils.iterateFiles((File) null, (IOFileFilter) suffixFileFilter0, (IOFileFilter) suffixFileFilter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot invoke \"java.io.File.isDirectory()\" because \"directory\" is null
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      try { 
        FileUtils.writeStringToFile((File) mockFile0, (String) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File '' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      try { 
        FileUtils.readLines(file0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File 'C:\\Users\\Mathieu' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.write((File) null, (CharSequence) "C:UsersMathieu", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot invoke \"java.io.File.exists()\" because \"file\" is null
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.readFileToString((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot invoke \"java.io.File.exists()\" because \"file\" is null
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      long long0 = FileUtils.sizeOfDirectory(mockFile0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      Vector<File> vector0 = new Vector<File>();
      FileUtils.writeLines(file0, (Collection<?>) vector0, "5-txt#", false);
      assertEquals(1392409281320L, file0.lastModified());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      File file0 = FileUtils.toFile(uRL0);
      byte[] byteArray0 = new byte[9];
      FileUtils.writeByteArrayToFile(file0, byteArray0, 0, 1);
      try { 
        FileUtils.forceMkdir(file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File \\fake\\but\\wellformed\\url exists and is not a directory. Unable to create directory.
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      // Undeclared exception!
      try { 
        FileUtils.readFileToString((File) mockFile0, ">YfPUc=h&cT^");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // >YfPUc=h&cT^
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      FileUtils.openOutputStream(file0);
      boolean boolean0 = FileUtils.contentEquals(file0, file0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "targt";
      stringArray0[1] = "";
      stringArray0[2] = "^[a-zA-Z0-9][a-zA-Z0-9-]*$";
      stringArray0[3] = "Insensitive";
      stringArray0[4] = "The reference file '";
      stringArray0[5] = "~vd";
      stringArray0[6] = "=K:?.VtKJP%1xqV}";
      File file0 = FileUtils.getFile(stringArray0);
      // Undeclared exception!
      try { 
        FileUtils.iterateFiles(file0, stringArray0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'directory' is not a directory: F:\\Mathieu\\git\\commons-io\\targt\\^[a-zA-Z0-9][a-zA-Z0-9-]*$\\Insensitive\\The reference file '\\~vd\\=K:?.VtKJP%1xqV}
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      File file0 = MockFile.createTempFile("UMY", "UMY", (File) null);
      // Undeclared exception!
      try { 
        FileUtils.readLines(file0, "UMY");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // UMY
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      MockFile mockFile1 = new MockFile("No specified file", "file");
      mockFile1.createNewFile();
      long long0 = FileUtils.sizeOf(mockFile0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      Charset charset0 = Charset.defaultCharset();
      FileUtils.writeStringToFile(file0, "F:Mathieugitcommons-io", charset0);
      assertTrue(file0.isFile());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      File file0 = MockFile.createTempFile("F:F:Mathieugitcommons-ioM", "F:F:Mathieugitcommons-ioM");
      Stack<IsoEra> stack0 = new Stack<IsoEra>();
      FileUtils.writeLines(file0, (String) null, (Collection<?>) stack0, true);
      assertFalse(file0.isDirectory());
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "v";
      stringArray0[1] = "7w+vfN'D2Vun;x{;";
      stringArray0[2] = "";
      stringArray0[3] = "AA~7%VN]~|o$vD'@\"2";
      File file0 = FileUtils.getFile(stringArray0);
      assertNotNull(file0);
      
      LinkedHashSet<File> linkedHashSet0 = new LinkedHashSet<File>();
      FileUtils.writeLines(file0, (Collection<?>) linkedHashSet0, "x");
      assertEquals("F:\\Mathieu\\git\\commons-io\\v\\7w+vfN'D2Vun;x{;\\AA~7%VN]~|o$vD'@\"2", file0.toString());
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.writeStringToFile((File) null, "", "-0w6xCiu#P]");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // -0w6xCiu#P]
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      try { 
        FileUtils.checksumCRC32(file0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "c9\\Ie~Q_DR{D");
      MockFile.createTempFile("V1R>|{xwOc^:8Y4", "", (File) mockFile0);
      // Undeclared exception!
      try { 
        FileUtils.moveToDirectory(mockFile0, mockFile0, true);
        fail("Expecting exception: InvalidPathException");
      
      } catch(InvalidPathException e) {
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      URL uRL0 = MockURL.getHttpExample();
      try { 
        FileUtils.copyURLToFile(uRL0, file0, 2147483645, 0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      URL uRL0 = MockURL.getHttpExample();
      try { 
        FileUtils.copyURLToFile(uRL0, file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      File file0 = MockFile.createTempFile("file", "file");
      NameFileFilter nameFileFilter0 = new NameFileFilter("(");
      // Undeclared exception!
      try { 
        FileUtils.iterateFilesAndDirs(file0, nameFileFilter0, nameFileFilter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'directory' is not a directory: C:\\Users\\Mathieu\\AppData\\Local\\Temp\\file0file
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      MockFile mockFile0 = new MockFile("tCjQ");
      FileUtils.write((File) mockFile0, (CharSequence) "tCjQ");
      assertEquals(0L, mockFile0.getUsableSpace());
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      FileUtils.write(file0, (CharSequence) null, (String) null);
      assertEquals(0L, file0.getFreeSpace());
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      File file0 = MockFile.createTempFile("Insensitive", "Insensitive");
      try { 
        FileUtils.lineIterator(file0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File 'C:\\Users\\Mathieu\\AppData\\Local\\Temp\\Insensitive0Insensitive' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      FileUtils.writeLines(file0, (Collection<?>) linkedHashSet0, false);
      assertTrue(file0.isFile());
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      FileUtils fileUtils0 = new FileUtils();
      assertEquals("C:\\Users\\Mathieu\\AppData\\Local\\Temp\\", fileUtils0.getTempDirectoryPath());
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      MockFile mockFile0 = new MockFile("F:M%thieu5gitcommons-ioM");
      HashSet<String> hashSet0 = new HashSet<String>(310);
      FileUtils.writeLines((File) mockFile0, (String) null, (Collection<?>) hashSet0);
      assertFalse(mockFile0.isHidden());
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      Charset charset0 = Charset.defaultCharset();
      FileUtils.write(file0, (CharSequence) null, charset0);
      assertTrue(file0.canRead());
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      byte[] byteArray0 = new byte[6];
      FileUtils.writeByteArrayToFile(file0, byteArray0);
      assertEquals(6L, file0.length());
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      String string0 = FileUtils.byteCountToDisplaySize(0L);
      assertEquals("0 bytes", string0);
  }
}
